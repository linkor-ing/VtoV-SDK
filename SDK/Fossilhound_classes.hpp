#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Fossilhound

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Enum_interactionActions_structs.hpp"
#include "AIModule_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass fossilhound.fossilhound_C
// 0x00B0 (0x0570 - 0x04C0)
class AFossilhound_C final : public ACharacter
{
public:
	uint8                                         Pad_4B8[0x8];                                      // 0x04B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNavigationInvokerComponent*            NavigationInvoker;                                 // 0x04C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPnormal_C*                             Pnormal;                                           // 0x04D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URadialForceComponent*                  RadialForce;                                       // 0x04D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Dmg;                                               // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UComp_radarPoint_C*                     RadarPoint;                                        // 0x04E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Miss1;                                             // 0x04F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Scr;                                               // 0x04F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Voice;                                             // 0x0500(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x0508(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Miss;                                              // 0x0510(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x0518(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPawnSensingComponent*                  PawnSensing;                                       // 0x0520(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArm;                                         // 0x0528(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFossilhound_Skeleton_AnimBlueprint_C*  Anim;                                              // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  Chase;                                             // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      Obj;                                               // 0x0540(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         Steps;                                             // 0x0550(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Rendered;                                          // 0x0554(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_555[0x3];                                      // 0x0555(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Gibs;                                              // 0x0558(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         AccDmg;                                            // 0x0568(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_fossilhound(int32 EntryPoint);
	void AddDamage(class AActor* Actor, float Damage, const struct FHitResult& Hit, const struct FVector& Impact, bool SkipSetting);
	void ReceiveDestroyed();
	void OnLanded(const struct FHitResult& Hit);
	void Step();
	void Wander();
	void BndEvt__PawnSensing_K2Node_ComponentBoundEvent_0_SeePawnDelegate__DelegateSignature(class APawn* Pawn);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void HookTension(class AHook_C* Hook);
	void CleanSponge(float Clean, class AMainPlayer_C* Player);
	void Crafted();
	void Hooked(class AHook_C* Hook);
	void AttemptIgnite();
	void PlayerUsedOn(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void Slice(bool Clean);
	void bitten();
	void ReachedByExplosion(const struct FVector& Location, float Damage);
	void PlayerLookAway(class AMainPlayer_C* Player);
	void Stepped(float Volume);
	void ActionName(class AMainPlayer_C* Player, const struct FHitResult& Hit, const class FString& Param_Name);
	void AccumulateTemperature(float Temperature, float Speed);
	void AddTemperature(float Temperature);
	void MicrowaveElec();
	void PlayerHandAnyKey(class AMainPlayer_C* Player, const struct FKey& Key, bool Pressed);
	void PlayerHandMouse(class AMainPlayer_C* Player, const struct FVector2D& Mouse);
	void PlayerHandMouseWheel(class AMainPlayer_C* Player, float WheelDelta);
	void PlayerHandRelease_LMB(class AMainPlayer_C* Player);
	void PlayerHandRelease_RMB(class AMainPlayer_C* Player);
	void ExtinguishFire();
	void Exploded(float Damage, const struct FVector& Location);
	void PlayerHandUse_LMB(class AMainPlayer_C* Player);
	void PlayerHandUse_RMB(class AMainPlayer_C* Player);
	void ActionOptionIndex(class AMainPlayer_C* Player, const struct FHitResult& Hit, Enum_interactionActions Action);
	void ReceivedPhyiscsDamage(float Damage, const struct FHitResult& Hot);
	void Microwave();
	void Ignite(float Fuel);
	void FireDamage(float Damage);
	void SteppedOn(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void Unhook();
	void DigUp();
	void PhysPreDestroyed();
	void PhysDestroyed();
	void SetKey(const class FString& Key);
	void SetPropProps(bool Static, bool Frozen, bool Active);
	void Virus(bool Activate);
	void Eaten();
	void LeaveWaterOrigin(class AWaterVolume_C* Water);
	void EnterWaterOrigin(class AWaterVolume_C* Water);
	void LeaveWater(class AWaterVolume_C* Water);
	void EnterWater(class AWaterVolume_C* Water);
	void ImpactDamage(float Damage, const struct FHitResult& Hit, class AActor* Actor, const struct FVector& Impact);
	void OnCompleted_93ABDF4F4ACEA571A02E1AAFF4084A64(class FName NotifyName);
	void OnBlendOut_93ABDF4F4ACEA571A02E1AAFF4084A64(class FName NotifyName);
	void OnInterrupted_93ABDF4F4ACEA571A02E1AAFF4084A64(class FName NotifyName);
	void OnNotifyBegin_93ABDF4F4ACEA571A02E1AAFF4084A64(class FName NotifyName);
	void OnNotifyEnd_93ABDF4F4ACEA571A02E1AAFF4084A64(class FName NotifyName);
	void OnSuccess_8715C85644F7F13D378B8396504A9049(EPathFollowingResult MovementResult);
	void OnFail_8715C85644F7F13D378B8396504A9049(EPathFollowingResult MovementResult);
	void OnSuccess_0E745DC84F3F253C61EE1CA07A3DC668(EPathFollowingResult MovementResult);
	void OnFail_0E745DC84F3F253C61EE1CA07A3DC668(EPathFollowingResult MovementResult);
	bool biteZone(TArray<class AActor*>* OutActors);
	void FilterPawns(const class AActor* Object, bool* Pass);
	void GetActionOptions(class AMainPlayer_C* Player, class UPrimitiveComponent* Component, class AActor* Actor, TArray<class FString>* Options, TArray<Enum_interactionActions>* Options_enum, TArray<class FText>* OptionsNamesOverlay, uint8* Number);
	void SetPath(const TArray<struct FVector>& Path, bool* Return);
	void GetOnlyKey(class FString* Key);
	void ProcessKeys(bool* Return);
	void CanBeUsedHold(bool* Return);
	void GetKey(class FString* Key);
	void ToolboxFix(class AProp_toolbox_C* Toolbox, bool* Return);
	void GascanFuel(class AProp_gascan_C* Gascan, bool* Fueled);
	void SkipRadial(bool* Skip);
	void GetPriceMultiplier(float* PriceMult);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"fossilhound_C">();
	}
	static class AFossilhound_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFossilhound_C>();
	}
};
static_assert(alignof(AFossilhound_C) == 0x000010, "Wrong alignment on AFossilhound_C");
static_assert(sizeof(AFossilhound_C) == 0x000570, "Wrong size on AFossilhound_C");
static_assert(offsetof(AFossilhound_C, UberGraphFrame) == 0x0004C0, "Member 'AFossilhound_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AFossilhound_C, NavigationInvoker) == 0x0004C8, "Member 'AFossilhound_C::NavigationInvoker' has a wrong offset!");
static_assert(offsetof(AFossilhound_C, Pnormal) == 0x0004D0, "Member 'AFossilhound_C::Pnormal' has a wrong offset!");
static_assert(offsetof(AFossilhound_C, RadialForce) == 0x0004D8, "Member 'AFossilhound_C::RadialForce' has a wrong offset!");
static_assert(offsetof(AFossilhound_C, Dmg) == 0x0004E0, "Member 'AFossilhound_C::Dmg' has a wrong offset!");
static_assert(offsetof(AFossilhound_C, RadarPoint) == 0x0004E8, "Member 'AFossilhound_C::RadarPoint' has a wrong offset!");
static_assert(offsetof(AFossilhound_C, Miss1) == 0x0004F0, "Member 'AFossilhound_C::Miss1' has a wrong offset!");
static_assert(offsetof(AFossilhound_C, Scr) == 0x0004F8, "Member 'AFossilhound_C::Scr' has a wrong offset!");
static_assert(offsetof(AFossilhound_C, Voice) == 0x000500, "Member 'AFossilhound_C::Voice' has a wrong offset!");
static_assert(offsetof(AFossilhound_C, PointLight) == 0x000508, "Member 'AFossilhound_C::PointLight' has a wrong offset!");
static_assert(offsetof(AFossilhound_C, Miss) == 0x000510, "Member 'AFossilhound_C::Miss' has a wrong offset!");
static_assert(offsetof(AFossilhound_C, Sphere) == 0x000518, "Member 'AFossilhound_C::Sphere' has a wrong offset!");
static_assert(offsetof(AFossilhound_C, PawnSensing) == 0x000520, "Member 'AFossilhound_C::PawnSensing' has a wrong offset!");
static_assert(offsetof(AFossilhound_C, SpringArm) == 0x000528, "Member 'AFossilhound_C::SpringArm' has a wrong offset!");
static_assert(offsetof(AFossilhound_C, Anim) == 0x000530, "Member 'AFossilhound_C::Anim' has a wrong offset!");
static_assert(offsetof(AFossilhound_C, Chase) == 0x000538, "Member 'AFossilhound_C::Chase' has a wrong offset!");
static_assert(offsetof(AFossilhound_C, Obj) == 0x000540, "Member 'AFossilhound_C::Obj' has a wrong offset!");
static_assert(offsetof(AFossilhound_C, Steps) == 0x000550, "Member 'AFossilhound_C::Steps' has a wrong offset!");
static_assert(offsetof(AFossilhound_C, Rendered) == 0x000554, "Member 'AFossilhound_C::Rendered' has a wrong offset!");
static_assert(offsetof(AFossilhound_C, Gibs) == 0x000558, "Member 'AFossilhound_C::Gibs' has a wrong offset!");
static_assert(offsetof(AFossilhound_C, AccDmg) == 0x000568, "Member 'AFossilhound_C::AccDmg' has a wrong offset!");

}

