#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Ticker_foodTolerance

#include "Basic.hpp"


namespace SDK::Params
{

// Function ticker_foodTolerance.ticker_foodTolerance_C.ExecuteUbergraph_ticker_foodTolerance
// 0x0038 (0x0038 - 0x0000)
struct Ticker_foodTolerance_C_ExecuteUbergraph_ticker_foodTolerance final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VictoryFloatMinusEquals_FloatOut;         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F34[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable;                              // 0x0020(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0030(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue_1;           // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Ticker_foodTolerance_C_ExecuteUbergraph_ticker_foodTolerance) == 0x000008, "Wrong alignment on Ticker_foodTolerance_C_ExecuteUbergraph_ticker_foodTolerance");
static_assert(sizeof(Ticker_foodTolerance_C_ExecuteUbergraph_ticker_foodTolerance) == 0x000038, "Wrong size on Ticker_foodTolerance_C_ExecuteUbergraph_ticker_foodTolerance");
static_assert(offsetof(Ticker_foodTolerance_C_ExecuteUbergraph_ticker_foodTolerance, EntryPoint) == 0x000000, "Member 'Ticker_foodTolerance_C_ExecuteUbergraph_ticker_foodTolerance::EntryPoint' has a wrong offset!");
static_assert(offsetof(Ticker_foodTolerance_C_ExecuteUbergraph_ticker_foodTolerance, Temp_int_Array_Index_Variable) == 0x000004, "Member 'Ticker_foodTolerance_C_ExecuteUbergraph_ticker_foodTolerance::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Ticker_foodTolerance_C_ExecuteUbergraph_ticker_foodTolerance, CallFunc_Array_Length_ReturnValue) == 0x000008, "Member 'Ticker_foodTolerance_C_ExecuteUbergraph_ticker_foodTolerance::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ticker_foodTolerance_C_ExecuteUbergraph_ticker_foodTolerance, CallFunc_VictoryFloatMinusEquals_FloatOut) == 0x00000C, "Member 'Ticker_foodTolerance_C_ExecuteUbergraph_ticker_foodTolerance::CallFunc_VictoryFloatMinusEquals_FloatOut' has a wrong offset!");
static_assert(offsetof(Ticker_foodTolerance_C_ExecuteUbergraph_ticker_foodTolerance, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'Ticker_foodTolerance_C_ExecuteUbergraph_ticker_foodTolerance::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Ticker_foodTolerance_C_ExecuteUbergraph_ticker_foodTolerance, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000014, "Member 'Ticker_foodTolerance_C_ExecuteUbergraph_ticker_foodTolerance::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ticker_foodTolerance_C_ExecuteUbergraph_ticker_foodTolerance, CallFunc_Less_IntInt_ReturnValue) == 0x000015, "Member 'Ticker_foodTolerance_C_ExecuteUbergraph_ticker_foodTolerance::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ticker_foodTolerance_C_ExecuteUbergraph_ticker_foodTolerance, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'Ticker_foodTolerance_C_ExecuteUbergraph_ticker_foodTolerance::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ticker_foodTolerance_C_ExecuteUbergraph_ticker_foodTolerance, K2Node_Event_DeltaSeconds) == 0x00001C, "Member 'Ticker_foodTolerance_C_ExecuteUbergraph_ticker_foodTolerance::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(Ticker_foodTolerance_C_ExecuteUbergraph_ticker_foodTolerance, Temp_string_Variable) == 0x000020, "Member 'Ticker_foodTolerance_C_ExecuteUbergraph_ticker_foodTolerance::Temp_string_Variable' has a wrong offset!");
static_assert(offsetof(Ticker_foodTolerance_C_ExecuteUbergraph_ticker_foodTolerance, Temp_float_Variable) == 0x000030, "Member 'Ticker_foodTolerance_C_ExecuteUbergraph_ticker_foodTolerance::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(Ticker_foodTolerance_C_ExecuteUbergraph_ticker_foodTolerance, CallFunc_Array_RemoveItem_ReturnValue) == 0x000034, "Member 'Ticker_foodTolerance_C_ExecuteUbergraph_ticker_foodTolerance::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ticker_foodTolerance_C_ExecuteUbergraph_ticker_foodTolerance, CallFunc_Array_RemoveItem_ReturnValue_1) == 0x000035, "Member 'Ticker_foodTolerance_C_ExecuteUbergraph_ticker_foodTolerance::CallFunc_Array_RemoveItem_ReturnValue_1' has a wrong offset!");

// Function ticker_foodTolerance.ticker_foodTolerance_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct Ticker_foodTolerance_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ticker_foodTolerance_C_ReceiveTick) == 0x000004, "Wrong alignment on Ticker_foodTolerance_C_ReceiveTick");
static_assert(sizeof(Ticker_foodTolerance_C_ReceiveTick) == 0x000004, "Wrong size on Ticker_foodTolerance_C_ReceiveTick");
static_assert(offsetof(Ticker_foodTolerance_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'Ticker_foodTolerance_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

}

