#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Umg_console

#include "Basic.hpp"

#include "Umg_console_classes.hpp"
#include "Umg_console_parameters.hpp"


namespace SDK
{

// Function umg_console.umg_console_C.ExecuteUbergraph_umg_console
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUmg_console_C::ExecuteUbergraph_umg_console(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_console_C", "ExecuteUbergraph_umg_console");

	Params::Umg_console_C_ExecuteUbergraph_umg_console Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function umg_console.umg_console_C.BndEvt__umg_console_EditableTextBox_K2Node_ComponentBoundEvent_2_OnEditableTextBoxChangedEvent__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             Text                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UUmg_console_C::BndEvt__umg_console_EditableTextBox_K2Node_ComponentBoundEvent_2_OnEditableTextBoxChangedEvent__DelegateSignature(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_console_C", "BndEvt__umg_console_EditableTextBox_K2Node_ComponentBoundEvent_2_OnEditableTextBoxChangedEvent__DelegateSignature");

	Params::Umg_console_C_BndEvt__umg_console_EditableTextBox_K2Node_ComponentBoundEvent_2_OnEditableTextBoxChangedEvent__DelegateSignature Parms{};

	Parms.Text = std::move(Text);

	UObject::ProcessEvent(Func, &Parms);
}


// Function umg_console.umg_console_C.adrwewr
// (BlueprintCallable, BlueprintEvent)

void UUmg_console_C::Adrwewr()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_console_C", "adrwewr");

	UObject::ProcessEvent(Func, nullptr);
}


// Function umg_console.umg_console_C.AnyKey
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    Pressed                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUmg_console_C::AnyKey(const struct FKey& Key, bool Pressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_console_C", "AnyKey");

	Params::Umg_console_C_AnyKey Parms{};

	Parms.Key = std::move(Key);
	Parms.Pressed = Pressed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function umg_console.umg_console_C.BndEvt__EditableTextBox_K2Node_ComponentBoundEvent_1_OnEditableTextBoxCommittedEvent__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             Text                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// ETextCommit                             CommitMethod                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUmg_console_C::BndEvt__EditableTextBox_K2Node_ComponentBoundEvent_1_OnEditableTextBoxCommittedEvent__DelegateSignature(const class FText& Text, ETextCommit CommitMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_console_C", "BndEvt__EditableTextBox_K2Node_ComponentBoundEvent_1_OnEditableTextBoxCommittedEvent__DelegateSignature");

	Params::Umg_console_C_BndEvt__EditableTextBox_K2Node_ComponentBoundEvent_1_OnEditableTextBoxCommittedEvent__DelegateSignature Parms{};

	Parms.Text = std::move(Text);
	Parms.CommitMethod = CommitMethod;

	UObject::ProcessEvent(Func, &Parms);
}


// Function umg_console.umg_console_C.settingsApplied
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FStruct_settings                 Settings                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUmg_console_C::SettingsApplied(const struct FStruct_settings& Settings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_console_C", "settingsApplied");

	Params::Umg_console_C_SettingsApplied Parms{};

	Parms.Settings = std::move(Settings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function umg_console.umg_console_C.BndEvt__EditableTextBox_15_K2Node_ComponentBoundEvent_0_OnEditableTextBoxChangedEvent__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             Text                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UUmg_console_C::BndEvt__EditableTextBox_15_K2Node_ComponentBoundEvent_0_OnEditableTextBoxChangedEvent__DelegateSignature(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_console_C", "BndEvt__EditableTextBox_15_K2Node_ComponentBoundEvent_0_OnEditableTextBoxChangedEvent__DelegateSignature");

	Params::Umg_console_C_BndEvt__EditableTextBox_15_K2Node_ComponentBoundEvent_0_OnEditableTextBoxChangedEvent__DelegateSignature Parms{};

	Parms.Text = std::move(Text);

	UObject::ProcessEvent(Func, &Parms);
}


// Function umg_console.umg_console_C.signalDeleted
// (Public, BlueprintCallable, BlueprintEvent)

void UUmg_console_C::SignalDeleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_console_C", "signalDeleted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function umg_console.umg_console_C.signalSaved
// (Public, BlueprintCallable, BlueprintEvent)

void UUmg_console_C::SignalSaved()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_console_C", "signalSaved");

	UObject::ProcessEvent(Func, nullptr);
}


// Function umg_console.umg_console_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UUmg_console_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_console_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function umg_console.umg_console_C.stuffUpgraded
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMainGamemode_C*                  GameMode                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUmg_console_C::StuffUpgraded(class AMainGamemode_C* GameMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_console_C", "stuffUpgraded");

	Params::Umg_console_C_StuffUpgraded Parms{};

	Parms.GameMode = GameMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function umg_console.umg_console_C.calAll
// (BlueprintCallable, BlueprintEvent)

void UUmg_console_C::CalAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_console_C", "calAll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function umg_console.umg_console_C.getCals
// (BlueprintCallable, BlueprintEvent)

void UUmg_console_C::GetCals()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_console_C", "getCals");

	UObject::ProcessEvent(Func, nullptr);
}


// Function umg_console.umg_console_C.calibratteDish
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           InputPin                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UUmg_console_C::CalibratteDish(const class FString& InputPin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_console_C", "calibratteDish");

	Params::Umg_console_C_CalibratteDish Parms{};

	Parms.InputPin = std::move(InputPin);

	UObject::ProcessEvent(Func, &Parms);
}


// Function umg_console.umg_console_C.setSErverTarget
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           B                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UUmg_console_C::SetSErverTarget(const class FString& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_console_C", "setSErverTarget");

	Params::Umg_console_C_SetSErverTarget Parms{};

	Parms.B = std::move(B);

	UObject::ProcessEvent(Func, &Parms);
}


// Function umg_console.umg_console_C.pingSingleServer
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           B                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UUmg_console_C::PingSingleServer(const class FString& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_console_C", "pingSingleServer");

	Params::Umg_console_C_PingSingleServer Parms{};

	Parms.B = std::move(B);

	UObject::ProcessEvent(Func, &Parms);
}


// Function umg_console.umg_console_C.pingServers
// (BlueprintCallable, BlueprintEvent)

void UUmg_console_C::PingServers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_console_C", "pingServers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function umg_console.umg_console_C.gamemodeBeginPlay
// (Public, BlueprintCallable, BlueprintEvent)

void UUmg_console_C::GamemodeBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_console_C", "gamemodeBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function umg_console.umg_console_C.powerChanged
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Active_calc                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Active_downl                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Active_coords                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Active_play                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Active_light                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUmg_console_C::PowerChanged(bool Active_calc, bool Active_downl, bool Active_coords, bool Active_play, bool Active_light)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_console_C", "powerChanged");

	Params::Umg_console_C_PowerChanged Parms{};

	Parms.Active_calc = Active_calc;
	Parms.Active_downl = Active_downl;
	Parms.Active_coords = Active_coords;
	Parms.Active_play = Active_play;
	Parms.Active_light = Active_light;

	UObject::ProcessEvent(Func, &Parms);
}


// Function umg_console.umg_console_C.unfoc
// (Public, BlueprintCallable, BlueprintEvent)

void UUmg_console_C::Unfoc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_console_C", "unfoc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function umg_console.umg_console_C.OnFocusLost
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FFocusEvent                      InFocusEvent                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void UUmg_console_C::OnFocusLost(const struct FFocusEvent& InFocusEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_console_C", "OnFocusLost");

	Params::Umg_console_C_OnFocusLost Parms{};

	Parms.InFocusEvent = std::move(InFocusEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function umg_console.umg_console_C.applyColor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUmg_console_C::ApplyColor(const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_console_C", "applyColor");

	Params::Umg_console_C_ApplyColor Parms{};

	Parms.Color = std::move(Color);

	UObject::ProcessEvent(Func, &Parms);
}


// Function umg_console.umg_console_C.propRenderer_finishProps
// (Public, BlueprintCallable, BlueprintEvent)

void UUmg_console_C::PropRenderer_finishProps()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_console_C", "propRenderer_finishProps");

	UObject::ProcessEvent(Func, nullptr);
}


// Function umg_console.umg_console_C.gamemodeMakeKeys
// (Public, BlueprintCallable, BlueprintEvent)

void UUmg_console_C::GamemodeMakeKeys()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_console_C", "gamemodeMakeKeys");

	UObject::ProcessEvent(Func, nullptr);
}


// Function umg_console.umg_console_C.gamemodePreLoad
// (Public, BlueprintCallable, BlueprintEvent)

void UUmg_console_C::GamemodePreLoad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_console_C", "gamemodePreLoad");

	UObject::ProcessEvent(Func, nullptr);
}


// Function umg_console.umg_console_C.unfocused
// (Public, BlueprintCallable, BlueprintEvent)

void UUmg_console_C::Unfocused()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_console_C", "unfocused");

	UObject::ProcessEvent(Func, nullptr);
}


// Function umg_console.umg_console_C.OnKeyDown
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FKeyEvent                        InKeyEvent                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UUmg_console_C::OnKeyDown(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_console_C", "OnKeyDown");

	Params::Umg_console_C_OnKeyDown Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InKeyEvent = std::move(InKeyEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function umg_console.umg_console_C.OnKeyUp
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FKeyEvent                        InKeyEvent                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UUmg_console_C::OnKeyUp(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_console_C", "OnKeyUp");

	Params::Umg_console_C_OnKeyUp Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InKeyEvent = std::move(InKeyEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function umg_console.umg_console_C.convert
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             InputPin                                               (BlueprintVisible, BlueprintReadOnly, Parm)
// class FString                           Value                                                  (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UUmg_console_C::Convert(const class FText& InputPin, class FString* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_console_C", "convert");

	Params::Umg_console_C_Convert Parms{};

	Parms.InputPin = std::move(InputPin);

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = std::move(Parms.Value);
}


// Function umg_console.umg_console_C.Init
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Param_Name                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    Hide                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class ADish_C*                          Param_Dish                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUmg_console_C::Init(const class FString& Param_Name, bool Hide, class ADish_C* Param_Dish)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_console_C", "Init");

	Params::Umg_console_C_Init Parms{};

	Parms.Param_Name = std::move(Param_Name);
	Parms.Hide = Hide;
	Parms.Param_Dish = Param_Dish;

	UObject::ProcessEvent(Func, &Parms);
}


// Function umg_console.umg_console_C.typeSymbol
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Symbol                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UUmg_console_C::TypeSymbol(const class FString& Symbol)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_console_C", "typeSymbol");

	Params::Umg_console_C_TypeSymbol Parms{};

	Parms.Symbol = std::move(Symbol);

	UObject::ProcessEvent(Func, &Parms);
}


// Function umg_console.umg_console_C.enterCommand
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           C                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UUmg_console_C::EnterCommand(const class FString& C)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_console_C", "enterCommand");

	Params::Umg_console_C_EnterCommand Parms{};

	Parms.C = std::move(C);

	UObject::ProcessEvent(Func, &Parms);
}


// Function umg_console.umg_console_C.fixLog
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UUmg_console_C::FixLog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_console_C", "fixLog");

	UObject::ProcessEvent(Func, nullptr);
}


// Function umg_console.umg_console_C.writeToLog
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           B                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UUmg_console_C::WriteToLog(const class FString& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_console_C", "writeToLog");

	Params::Umg_console_C_WriteToLog Parms{};

	Parms.B = std::move(B);

	UObject::ProcessEvent(Func, &Parms);
}


// Function umg_console.umg_console_C.findServer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           B                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AActor*                           Server                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUmg_console_C::FindServer(const class FString& B, bool* Return, class AActor** Server)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_console_C", "findServer");

	Params::Umg_console_C_FindServer Parms{};

	Parms.B = std::move(B);

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;

	if (Server != nullptr)
		*Server = Parms.Server;
}


// Function umg_console.umg_console_C.findDish
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           B                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class ADish_C*                          Param_Dish                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUmg_console_C::FindDish(const class FString& B, bool* Return, class ADish_C** Param_Dish)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_console_C", "findDish");

	Params::Umg_console_C_FindDish Parms{};

	Parms.B = std::move(B);

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;

	if (Param_Dish != nullptr)
		*Param_Dish = Parms.Param_Dish;
}


// Function umg_console.umg_console_C.setTickOff
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_Tick                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUmg_console_C::SetTickOff(const bool Param_Tick)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_console_C", "setTickOff");

	Params::Umg_console_C_SetTickOff Parms{};

	Parms.Param_Tick = Param_Tick;

	UObject::ProcessEvent(Func, &Parms);
}


// Function umg_console.umg_console_C.upd
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UUmg_console_C::Upd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_console_C", "upd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function umg_console.umg_console_C.Enter
// (Public, BlueprintCallable, BlueprintEvent)

void UUmg_console_C::Enter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_console_C", "Enter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function umg_console.umg_console_C.OnKeyDown_0
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FKey                             Key1                                                   (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UUmg_console_C::OnKeyDown_0(const struct FKey& Key1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_console_C", "OnKeyDown_0");

	Params::Umg_console_C_OnKeyDown_0 Parms{};

	Parms.Key1 = std::move(Key1);

	UObject::ProcessEvent(Func, &Parms);
}


// Function umg_console.umg_console_C.OnMouseWheel
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UUmg_console_C::OnMouseWheel(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_console_C", "OnMouseWheel");

	Params::Umg_console_C_OnMouseWheel Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function umg_console.umg_console_C.dreamInv
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FStruct_save>             Invv                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class ADreamBase_C*                     Base                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUmg_console_C::DreamInv(TArray<struct FStruct_save>& Invv, class ADreamBase_C** Base)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_console_C", "dreamInv");

	Params::Umg_console_C_DreamInv Parms{};

	Parms.Invv = std::move(Invv);

	UObject::ProcessEvent(Func, &Parms);

	Invv = std::move(Parms.Invv);

	if (Base != nullptr)
		*Base = Parms.Base;
}

}

