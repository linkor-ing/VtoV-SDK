#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VictoryBPLibrary

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "VictoryBPLibrary_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "AIModule_structs.hpp"


namespace SDK
{

// Class VictoryBPLibrary.VictoryPC
// 0x0000 (0x0570 - 0x0570)
class AVictoryPC final : public APlayerController
{
public:
	void OnVictorySubtitlesQueued(const TArray<struct FVictorySubtitleCue>& VictorySubtitles, float CueDuration);
	void Subtitles_CPPDelegate(const TArray<struct FSubtitleCue>& VictorySubtitles, float CueDuration);
	void VictoryPC_GetMyIP_DataReceived(const class FString& YourIP);
	bool VictoryPC_GetMyIP_SendRequest();
	class UAudioComponent* VictoryPlaySpeechSound(class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VictoryPC">();
	}
	static class AVictoryPC* GetDefaultObj()
	{
		return GetDefaultObjImpl<AVictoryPC>();
	}
};
static_assert(alignof(AVictoryPC) == 0x000008, "Wrong alignment on AVictoryPC");
static_assert(sizeof(AVictoryPC) == 0x000570, "Wrong size on AVictoryPC");

// Class VictoryBPLibrary.TKMathFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UTKMathFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool AreLineSegmentsCrossing(const struct FVector& PointA1, const struct FVector& PointA2, const struct FVector& PointB1, const struct FVector& PointB2);
	static struct FVector ClosestPointOnLineSeqment(const struct FVector& Point, const struct FVector& LineStart, const struct FVector& LineEnd);
	static struct FVector ClosestPointOnSphereToLine(const struct FVector& SphereOrigin, float SphereRadius, const struct FVector& LineOrigin, const struct FVector& LineDir);
	static void ClosestPointsOfLineSegments(const struct FVector& Line1Start, const struct FVector& Line1End, const struct FVector& Line2Start, const struct FVector& Line2End, struct FVector* LinePoint1, struct FVector* LinePoint2);
	static bool ClosestPointsOnTwoLines(struct FVector* ClosestPointLine1, struct FVector* ClosestPointLine2, const struct FVector& LinePoint1, const struct FVector& LineVec1, const struct FVector& LinePoint2, const struct FVector& LineVec2);
	static void ConvertAnchorToAnchor(class UObject* WorldContextObject, const struct FAnchors& CurrentAnchor, const struct FMargin& Offsets, const struct FAnchors& TargetAnchor, struct FMargin* ConvertedOffsets);
	static float ConvertPhysicsLinearVelocity(const struct FVector& Velocity, ESpeedUnit SpeedUnit);
	static float GetConsoleVariableFloat(const class FString& VariableName);
	static int32 GetConsoleVariableInt(const class FString& VariableName);
	static struct FVector GetVelocityAtPoint(class UPrimitiveComponent* Target, const struct FVector& Point, class FName BoneName, bool DrawDebugInfo);
	static struct FVector GridSnap(const struct FVector& A, float Grid);
	static bool IsEvenNumber(float A);
	static bool IsLineInsideSphere(const struct FVector& LineStart, const struct FVector& LineDir, float LineLength, const struct FVector& SphereOrigin, float SphereRadius);
	static bool IsMultipleOf(int32 A, int32 Multiple);
	static bool IsPointInsideBox(const struct FVector& Point, const struct FVector& BoxOrigin, const struct FVector& BoxExtent);
	static bool IsPowerOfTwo(int32 X);
	static bool LineExtentBoxIntersection(const struct FBox& InBox, const struct FVector& Start, const struct FVector& End, const struct FVector& Extent, struct FVector* HitLocation, struct FVector* HitNormal, float* HitTime);
	static bool LineToLineIntersection(struct FVector* IntersectionPoint, const struct FVector& LinePoint1, const struct FVector& LineDir1, const struct FVector& LinePoint2, const struct FVector& LineDir2);
	static float NegateFloat(float A);
	static int32 NegateInt(int32 A);
	static struct FVector2D NegateVector2D(const struct FVector2D& A);
	static int32 PointOnWhichSideOfLineSegment(const struct FVector& LinePoint1, const struct FVector& LinePoint2, const struct FVector& Point);
	static struct FVector ProjectPointOnLine(const struct FVector& LineOrigin, const struct FVector& LineDirection, const struct FVector& Point);
	static int32 RoundToLowerMultiple(int32 A, int32 Multiple, bool SkipSelf);
	static int32 RoundToNearestMultiple(int32 A, int32 Multiple);
	static int32 RoundToUpperMultiple(int32 A, int32 Multiple, bool SkipSelf);
	static void SetCenterOfMassOffset(class UPrimitiveComponent* Target, const struct FVector& Offset, class FName BoneName);
	static struct FVector SetVectorLength(const struct FVector& A, float Size);
	static float SignedDistancePlanePoint(const struct FVector& PlaneNormal, const struct FVector& PlanePoint, const struct FVector& Point);
	static bool SphereBoxIntersection(const struct FVector& SphereOrigin, float SphereRadius, const struct FVector& BoxOrigin, const struct FVector& BoxExtent);
	static struct FVector VectorDegreesToRadians(const struct FVector& DegVector);
	static struct FVector VectorRadiansToDegrees(const struct FVector& RadVector);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TKMathFunctionLibrary">();
	}
	static class UTKMathFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTKMathFunctionLibrary>();
	}
};
static_assert(alignof(UTKMathFunctionLibrary) == 0x000008, "Wrong alignment on UTKMathFunctionLibrary");
static_assert(sizeof(UTKMathFunctionLibrary) == 0x000028, "Wrong size on UTKMathFunctionLibrary");

// Class VictoryBPLibrary.RamaVictoryPluginCreateProcessPipe
// 0x0010 (0x0038 - 0x0028)
class URamaVictoryPluginCreateProcessPipe final : public UObject
{
public:
	uint8                                         Pad_D5D[0x10];                                     // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClosePipe();
	bool CreatePipe();
	bool PipeIsValid();
	bool ReadFromPipe(class FString* PipeContents);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RamaVictoryPluginCreateProcessPipe">();
	}
	static class URamaVictoryPluginCreateProcessPipe* GetDefaultObj()
	{
		return GetDefaultObjImpl<URamaVictoryPluginCreateProcessPipe>();
	}
};
static_assert(alignof(URamaVictoryPluginCreateProcessPipe) == 0x000008, "Wrong alignment on URamaVictoryPluginCreateProcessPipe");
static_assert(sizeof(URamaVictoryPluginCreateProcessPipe) == 0x000038, "Wrong size on URamaVictoryPluginCreateProcessPipe");

// Class VictoryBPLibrary.VictoryTMapComp
// 0x0230 (0x02E0 - 0x00B0)
class UVictoryTMapComp final : public UActorComponent
{
public:
	uint8                                         Pad_D5F[0x230];                                    // 0x00B0(0x0230)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Int_Float__AddPair(int32 Key, float Value);
	void Int_Float__Clear();
	float Int_Float__Get(int32 Key, bool* IsValid);
	void Int_Float__Remove(int32 Key, float Value);
	void Int_Vector__AddPair(int32 Key, const struct FVector& Value);
	void Int_Vector__Clear();
	struct FVector Int_Vector__Get(int32 Key, bool* IsValid);
	void Int_Vector__Remove(int32 Key);
	void String_Actor__AddPair(const class FString& Key, class AActor* Value);
	void String_Actor__Clear();
	class AActor* String_Actor__Get(const class FString& Key, bool* IsValid);
	void String_Actor__Remove(const class FString& Key);
	void String_Int__AddPair(const class FString& Key, int32 Value);
	void String_Int__Clear();
	int32 String_Int__Get(const class FString& Key, bool* IsValid);
	void String_Int__Remove(const class FString& Key);
	void String_Rotator__AddPair(const class FString& Key, const struct FRotator& Value);
	void String_Rotator__Clear();
	struct FRotator String_Rotator__Get(const class FString& Key, bool* IsValid);
	void String_Rotator__Remove(const class FString& Key);
	void String_String__AddPair(const class FString& Key, const class FString& Value);
	void String_String__Clear();
	class FString String_String__Get(const class FString& Key, bool* IsValid);
	void String_String__Remove(const class FString& Key);
	void String_Vector__AddPair(const class FString& Key, const struct FVector& Value);
	void String_Vector__Clear();
	struct FVector String_Vector__Get(const class FString& Key, bool* IsValid);
	void String_Vector__Remove(const class FString& Key);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VictoryTMapComp">();
	}
	static class UVictoryTMapComp* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVictoryTMapComp>();
	}
};
static_assert(alignof(UVictoryTMapComp) == 0x000008, "Wrong alignment on UVictoryTMapComp");
static_assert(sizeof(UVictoryTMapComp) == 0x0002E0, "Wrong size on UVictoryTMapComp");

// Class VictoryBPLibrary.VictoryBPFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UVictoryBPFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class USkeletalMeshComponent* Accessor__GetCharacterSkeletalMesh(class AActor* TheCharacter, bool* IsValid);
	static class FString Accessor__GetNameAsString(const class UObject* TheObject);
	static class APlayerController* Accessor__GetPlayerController(class AActor* TheCharacter, bool* IsValid);
	static void Actor__GetAttachedActors(class AActor* ParentActor, TArray<class AActor*>* ActorsArray);
	static bool Actor__TeleportToActor(class AActor* ActorToTeleport, class AActor* DestinationActor);
	static void Actor_PrestreamTextures(class AActor* Target, float Seconds, bool bEnableStreaming, int32 CinematicTextureGroups);
	static void AddToActorRotation(class AActor* TheActor, const struct FRotator& AddRot);
	static void AddToStreamingLevels(class UObject* WorldContextObject, const struct FLevelStreamInstanceInfo& LevelInstanceInfo);
	static bool Animation__GetAimOffsets(class AActor* AnimBPOwner, float* Pitch, float* Yaw);
	static bool Animation__GetAimOffsetsFromRotation(class AActor* AnimBPOwner, const struct FRotator& TheRotation, float* Pitch, float* Yaw);
	static class FString AppendMultiple(const class FString& A, const class FString& B);
	static bool Array_IsValidIndex(const TArray<int32>& TargetArray, int32 Param_Index);
	static void Array_Sort(const TArray<int32>& TargetArray, bool bAscendingOrder, class FName VariableName);
	static float Calcs__ClosestPointToSourcePoint(const struct FVector& Source, const TArray<struct FVector>& OtherPoints, struct FVector* ClosestPoint);
	static bool Capture2D_Project(class ASceneCapture2D* Target, const struct FVector& Location, struct FVector2D* OutPixelLocation);
	static bool Capture2D_SaveImage(class ASceneCapture2D* Target, const class FString& ImagePath, const struct FLinearColor& ClearColour);
	static bool CaptureComponent2D_Project(class USceneCaptureComponent2D* Target, const struct FVector& Location, struct FVector2D* OutPixelLocation);
	static bool CaptureComponent2D_SaveImage(class USceneCaptureComponent2D* Target, const class FString& ImagePath, const struct FLinearColor& ClearColour);
	static struct FRotator Character__GetControllerRotation(class AActor* TheCharacter);
	static bool CharacterMovement__SetMaxMoveSpeed(class ACharacter* TheCharacter, float NewMaxMoveSpeed);
	static bool ClientWindow__GameWindowIsForeGroundInOS();
	static class AStaticMeshActor* Clone__StaticMeshActor(class UObject* WorldContextObject, bool* IsValid, class AStaticMeshActor* ToClone, const struct FVector& LocationOffset, const struct FRotator& RotationOffset);
	static bool CompareMD5Hash(const class FString& MD5HashFile1, const class FString& MD5HashFile2);
	static void Component_PrestreamTextures(class UMeshComponent* Target, float Seconds, bool bEnableStreaming, int32 CinematicTextureGroups);
	static void ConstructRand();
	static int32 Conversion__FloatToRoundedInteger(float IN_Float);
	static void Conversions__ColorToString(const struct FLinearColor& Color, class FString* ColorAsString);
	static struct FVector Conversions__RotatorToVector(const struct FRotator& TheRotator);
	static void Conversions__StringToColor(const class FString& String, struct FLinearColor* ConvertedColor, bool* IsValid);
	static void Conversions__StringToRotator(const class FString& String, struct FRotator* ConvertedRotator, bool* IsValid);
	static void Conversions__StringToVector(const class FString& String, struct FVector* ConvertedVector, bool* IsValid);
	static struct FRotator Conversions__VectorToRotator(const struct FVector& TheVector);
	static int32 CountOccurrancesOfSubString(const class FString& Source, const class FString& SubString, ESearchCase SearchCase);
	static bool CreateMD5Hash(const class FString& FileToHash, const class FString& FileToStoreHashTo);
	static class UObject* CreateObject(class UObject* WorldContextObject, class UClass* TheObjectClass);
	static struct FPlane CreatePlane(const struct FVector& Center, const struct FVector& Normal);
	static class UPrimitiveComponent* CreatePrimitiveComponent(class UObject* WorldContextObject, TSubclassOf<class UPrimitiveComponent> CompClass, class FName Param_Name, const struct FVector& Location, const struct FRotator& Rotation);
	static class UTextureRenderTarget2D* CreateTextureRenderTarget2D(int32 Width, int32 Height, const struct FLinearColor& ClearColor, float Gamma);
	static bool Data__GetCharacterBoneLocations(class AActor* TheCharacter, TArray<struct FVector>* BoneLocations);
	static float DistanceToSurface__DistaceOfPointToMeshSurface(class AStaticMeshActor* TheSMA, const struct FVector& TestPoint, struct FVector* ClosestSurfacePoint);
	static bool DoesMaterialHaveParameter(class UMaterialInterface* Mat, class FName Parameter);
	static void Draw__Thick3DLineBetweenActors(class AActor* StartActor, class AActor* EndActor, const struct FLinearColor& LineColor, float Thickness, float Duration);
	static void Draw__Thick3DLineFromCharacterSocket(class AActor* TheCharacter, const struct FVector& EndPoint, class FName Socket, const struct FLinearColor& LineColor, float Thickness, float Duration);
	static void Draw__Thick3DLineFromSocket(class USkeletalMeshComponent* Mesh, const struct FVector& EndPoint, class FName Socket, const struct FLinearColor& LineColor, float Thickness, float Duration);
	static void DrawCircle(class UObject* WorldContextObject, const struct FVector& Center, float Radius, int32 NumPoints, float Thickness, const struct FLinearColor& LineColor, const struct FVector& YAxis, const struct FVector& ZAxis, float Duration, bool PersistentLines);
	static bool EqualEqual_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B, float ErrorTolerance);
	static bool FileIO__SaveStringArrayToFile(const class FString& SaveDirectory, const class FString& JoyfulFileName, const TArray<class FString>& SaveText, bool AllowOverWriting, bool AllowAppend);
	static bool FileIO__SaveStringTextToFile(const class FString& SaveDirectory, const class FString& JoyfulFileName, const class FString& SaveText, bool AllowOverWriting, bool AllowAppend);
	static void FlashGameOnTaskBar(class APlayerController* PC, bool FlashContinuous, int32 MaxFlashCount, int32 FlashFrequencyMilliseconds);
	static void FlushPressedKeys(class APlayerController* PlayerController);
	static struct FVector GetActorRelativeLocation(class AActor* ParentActor, class AActor* ChildActor);
	static struct FRotator GetActorRelativeRotation(class AActor* ParentActor, class AActor* ChildActor);
	static int32 GetAllBoneNamesBelowBone(class USkeletalMeshComponent* SkeletalMeshComp, class FName StartingBoneName, TArray<class FName>* BoneNames);
	static void GetAllWidgetsOfClass(class UObject* WorldContextObject, TSubclassOf<class UUserWidget> WidgetClass, TArray<class UUserWidget*>* FoundWidgets, bool TopLevelOnly);
	static void GetBoxContainingWorldPoints(const TArray<struct FVector>& Points, struct FVector* Center, struct FVector* Extent);
	static class AActor* GetClosestActorOfClassInRadiusOfActor(class UObject* WorldContextObject, TSubclassOf<class AActor> ActorClass, class AActor* ActorCenter, float Radius, bool* IsValid);
	static class AActor* GetClosestActorOfClassInRadiusOfLocation(class UObject* WorldContextObject, TSubclassOf<class AActor> ActorClass, const struct FVector& Center, float Radius, bool* IsValid);
	static const class FString GetCommandLine();
	static struct FVector GetComponentRelativeLocation(class USceneComponent* ParentComponent, class USceneComponent* ChildComponent);
	static struct FRotator GetComponentRelativeRotation(class USceneComponent* ParentComponent, class USceneComponent* ChildComponent);
	static float GetCreationTime(const class AActor* Target);
	static float GetDistanceBetweenComponentSurfaces(class UPrimitiveComponent* CollisionComponent1, class UPrimitiveComponent* CollisionComponent2, struct FVector* PointOnSurface1, struct FVector* PointOnSurface2);
	static float GetDistanceToCollision(class UPrimitiveComponent* CollisionComponent, const struct FVector& Point, struct FVector* ClosestPointOnCollision);
	static class UUserWidget* GetFirstWidgetOfClass(class UObject* WorldContextObject, TSubclassOf<class UUserWidget> WidgetClass, bool TopLevelOnly);
	static uint8 GetGenericTeamId(class AActor* Target);
	static class FName GetHeadMountedDisplayDeviceType();
	static struct FLevelStreamInstanceInfo GetLevelInstanceInfo(class ULevelStreamingDynamic* LevelInstance);
	static void GetNamesOfLoadedLevels(class UObject* WorldContextObject, TArray<class FString>* NamesOfLoadedLevels);
	static class FName GetObjectPath(class UObject* Obj);
	static class APlayerStart* GetPlayerStart(class UObject* WorldContextObject, const class FString& PlayerStartName);
	static int32 GetPlayerUniqueNetID();
	static struct FRotator GetRotatorRelativeRotation(const struct FRotator& ParentRotation, const struct FRotator& ChildRotation);
	static class USoundWave* GetSoundWaveFromFile(const class FString& FilePath);
	static bool GetStaticMeshVertexLocations(class UStaticMeshComponent* Comp, TArray<struct FVector>* VertexPositions);
	static float GetTimeAlive(const class AActor* Target);
	static float GetTimeInPlay(class AActor* Actor);
	static int64 GetUnixTimeStamp(const struct FDateTime& UTCTime);
	static void GetUserDisplayAdapterBrand(bool* IsAMD, bool* IsNvidia, bool* IsIntel, bool* IsUnknown, int32* UnknownId);
	static void GetUTCFromUnixTimeStamp(int64 UnixTimeStamp, struct FDateTime* UTCTime);
	static struct FVector GetVectorRelativeLocation(const struct FVector& ParentLocation, const struct FRotator& ParentRotation, const struct FVector& ChildLocation);
	static bool GetViewportPosition(class UObject* WorldContextObject, const struct FVector2D& ScreenPosition, struct FVector2D* OutViewportPosition);
	static bool GetViewportPositionHitResultByChannel(class UObject* WorldContextObject, const struct FVector2D& ViewportPosition, ECollisionChannel TraceChannel, bool bTraceComplex, struct FHitResult* OutHitResult);
	static class UWidget* GetWidgetFromName(class UUserWidget* ParentUserWidget, const class FName& Param_Name);
	static void GraphicsSettings__SetFrameRateCap(float NewValue);
	static void GraphicsSettings__SetFrameRateToBeUnbound();
	static bool HasSubstring(const class FString& SearchIn, const class FString& SubString, ESearchCase SearchCase, ESearchDir SearchDir);
	static void HideStreamingLevel(class ULevelStreamingDynamic* LevelInstance);
	static float HorizontalFOV(float Param_VerticalFOV, float AspectRatio);
	static class UPanelSlot* InsertChildAt(class UWidget* Parent, int32 Param_Index, class UWidget* Content);
	static bool IsAlphaNumeric(const class FString& String);
	static bool IsPointOnPlane(const struct FPlane& Plane, const struct FVector& Point, float Tolerance);
	static bool IsStandAlone(class UObject* WorldContextObject);
	static bool IsWidgetOfClassInViewport(class UObject* WorldContextObject, TSubclassOf<class UUserWidget> WidgetClass);
	static bool JoyFileIO_GetFiles(TArray<class FString>* Files, const class FString& RootFolderFullPath, const class FString& Ext);
	static bool JoyFileIO_GetFilesInRootAndAllSubFolders(TArray<class FString>* Files, const class FString& RootFolderFullPath, const class FString& Ext);
	static EJoyGraphicsFullScreen JoyGraphicsSettings__FullScreen_Get();
	static void JoyGraphicsSettings__FullScreen_Set(EJoyGraphicsFullScreen NewSetting);
	static void JoyIsKey(const struct FKeyEvent& KeyEvent, const struct FKey& Key, bool* Ctrl, bool* Shift, bool* Alt, bool* Cmd, bool* Match);
	static bool LensFlare__GetLensFlareOffsets(class APlayerController* PlayerController, class AActor* LightSource, float* PitchOffset, float* YawOffset, float* RollOffset);
	static class UObject* LoadObjectFromAssetPath(TSubclassOf<class UObject> ObjectClass, class FName Path, bool* IsValid);
	static bool LoadStringArrayFromFile(TArray<class FString>* StringArray, int32* ArraySize, const class FString& FullFilePath, bool ExcludeEmptyLines);
	static bool LoadStringFromFile(class FString* Result, const class FString& FullFilePath);
	static class UTexture2D* LoadTexture2D_FromDDSFile(const class FString& FullFilePath);
	static class UTexture2D* LoadTexture2D_FromFileByExtension(const class FString& ImagePath, bool* IsValid, int32* OutWidth, int32* OutHeight);
	static void Loops_ResetBPRunawayCounter();
	static float MapRangeClamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);
	static void MaxOfFloatArray(const TArray<float>& FloatArray, int32* IndexOfMaxValue, float* MaxValue);
	static void MaxOfIntArray(const TArray<int32>& IntArray, int32* IndexOfMaxValue, int32* MaxValue);
	static void MinOfFloatArray(const TArray<float>& FloatArray, int32* IndexOfMinValue, float* MinValue);
	static void MinOfIntArray(const TArray<int32>& IntArray, int32* IndexOfMinValue, int32* MinValue);
	static bool Mobility__SetSceneCompMobility(class USceneComponent* SceneComp, EComponentMobility NewMobility);
	static bool NotEqual_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B, float ErrorTolerance);
	static void Open_URL_In_Web_Browser(const class FString& TheURL);
	static void OperatingSystem__GetCurrentPlatform(bool* Windows_, bool* Mac, bool* Linux, bool* IOS, bool* Android, bool* Android_ARM, bool* Android_Vulkan, bool* PS4, bool* XboxOne, bool* HTML5, bool* APPLE);
	static bool OptionsMenu__GetDisplayAdapterScreenResolutions(TArray<int32>* Widths, TArray<int32>* Heights, TArray<int32>* RefreshRates, bool IncludeRefreshRates);
	static bool Physics__EnterRagDoll(class AActor* TheCharacter);
	static bool Physics__GetLocationofRagDoll(class AActor* TheCharacter, struct FVector* RagdollLocation);
	static bool Physics__InitializeVictoryRagDoll(class AActor* TheCharacter, struct FVector* InitLocation, struct FRotator* InitRotation);
	static bool Physics__IsRagDoll(class AActor* TheCharacter);
	static bool Physics__LeaveRagDoll(class AActor* TheCharacter, bool SetToFallingMovementMode, float HeightAboveRBMesh, const struct FVector& InitLocation, const struct FRotator& InitRotation);
	static bool Physics__UpdateCharacterCameraToRagdollLocation(class AActor* TheCharacter, float HeightOffset, float InterpSpeed);
	static bool PlayerController_GetControllerID(class APlayerController* ThePC, int32* ControllerId);
	static bool PlayerState_GetPlayerID(class APlayerController* ThePC, int32* PlayerID);
	static void PlaySoundAtLocationFromFile(class UObject* WorldContextObject, const class FString& FilePath, const struct FVector& Location, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings);
	static class UAudioComponent* PlaySoundAttachedFromFile(const class FString& FilePath, class USceneComponent* AttachToComponent, class FName AttachPointName, const struct FVector& Location, EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings);
	static void PointDistanceToPlane(const struct FPlane& Plane, const struct FVector& Point, float* Distance);
	static struct FVector2D ProjectWorldToScreenPosition(const struct FVector& WorldLocation);
	static bool RandBool_Bernoulli(float FBias);
	static bool RandBool_Bernoulli_MT(float FBias);
	static float RandFloat_MINMAX_uniDis(float IMin, float IMax);
	static float RandFloat_MINMAX_uniDis_MT(float IMin, float IMax);
	static float RandFloat_uniDis();
	static float RandFloat_uniDis_MT();
	static int32 RandInt_MINMAX_uniDis(int32 IMin, int32 IMax);
	static int32 RandInt_MINMAX_uniDis_MT(int32 IMin, int32 IMax);
	static int32 RandInt_uniDis();
	static int32 RandInt_uniDis_MT();
	static class FString RealWorldTime__GetCurrentOSTime(int32* MilliSeconds, int32* Seconds, int32* Minutes, int32* Hours12, int32* Hours24, int32* Day, int32* Month, int32* Year);
	static void RealWorldTime__GetDifferenceBetweenTimes(const class FString& PreviousTime1, const class FString& PreviousTime2, float* MilliSeconds, float* Seconds, float* Minutes, float* Hours);
	static void RealWorldTime__GetTimePassedSincePreviousTime(const class FString& PreviousTime, float* MilliSeconds, float* Seconds, float* Minutes, float* Hours);
	static void RemoveAllWidgetsOfClass(class UObject* WorldContextObject, TSubclassOf<class UUserWidget> WidgetClass);
	static void RemoveFromStreamingLevels(class UObject* WorldContextObject, const struct FLevelStreamInstanceInfo& LevelInstanceInfo);
	static void Rendering__FreezeGameRendering();
	static void Rendering__UnFreezeGameRendering();
	static void SaveGameObject_GetAllSaveSlotFileNames(TArray<class FString>* FileNames);
	static void SaveGameObject_GetMostRecentSaveSlotFileName(class FString* Filename, bool* bFound);
	static bool ScreenShots_Rename_Move_Most_Recent(class FString* OriginalFileName, const class FString& NewName, const class FString& NewAbsoluteFolderPath, bool HighResolution);
	static void SeedRand(int32 Seed);
	static void SeedRandWithEntropy();
	static void SeedRandWithTime();
	static void Selection_SelectionBox(class UObject* WorldContextObject, TArray<class AActor*>* SelectedActors, const struct FVector2D& AnchorPoint, const struct FVector2D& DraggedPoint, TSubclassOf<class AActor> ClassFilter);
	static void ServerTravel(class UObject* WorldContextObject, const class FString& MapName, bool bSkipNotifyPlayers);
	static void SetBloomIntensity(class APostProcessVolume* PostProcessVolume, float Intensity);
	static void SetComponentTickRate(class UActorComponent* Component, float Seconds);
	static void SetGenericTeamId(class AActor* Target, uint8 NewTeamId);
	static class AActor* SpawnActorIntoLevel(class UObject* WorldContextObject, TSubclassOf<class AActor> ActorClass, class FName Level, const struct FVector& Location, const struct FRotator& Rotation, bool SpawnEvenIfColliding);
	static class FString String__CombineStrings(const class FString& StringFirst, const class FString& StringSecond, const class FString& Separator, const class FString& StringFirstLabel, const class FString& StringSecondLabel);
	static class FString String__CombineStrings_Multi(const class FString& A, const class FString& B);
	static void String__ExplodeString(TArray<class FString>* OutputStrings, const class FString& InputString, const class FString& Separator, int32 Limit, bool bTrimElements);
	static void StringConversion__GetFloatAsStringWithPrecision(float TheFloat, class FString* TheString, int32 Precision, bool IncludeLeadingZero);
	static bool StringIsEmpty(const class FString& Target);
	static bool Text_IsNumeric(const class FText& Text);
	static float Text_ToFloat(const class FText& Text, bool UseDotForThousands);
	static int32 Text_ToInt(const class FText& Text, bool UseDotForThousands);
	static bool TraceData__GetTraceDataFromCharacterSocket(struct FVector* TraceStart, struct FVector* TraceEnd, class AActor* TheCharacter, const struct FRotator& TraceRotation, float TraceLength, class FName Socket, bool DrawTraceData, const struct FLinearColor& TraceDataColor, float TraceDataThickness);
	static bool TraceData__GetTraceDataFromSkeletalMeshSocket(struct FVector* TraceStart, struct FVector* TraceEnd, class USkeletalMeshComponent* Mesh, const struct FRotator& TraceRotation, float TraceLength, class FName Socket, bool DrawTraceData, const struct FLinearColor& TraceDataColor, float TraceDataThickness);
	static class AActor* Traces__CharacterMeshTrace___ClosestBone(class AActor* TraceOwner, const struct FVector& TraceStart, const struct FVector& TraceEnd, struct FVector* OutImpactPoint, struct FVector* OutImpactNormal, class FName* ClosestBoneName, struct FVector* ClosestBoneLocation, bool* IsValid);
	static class AActor* Traces__CharacterMeshTrace___ClosestSocket(class UObject* WorldContextObject, const class AActor* TraceOwner, const struct FVector& TraceStart, const struct FVector& TraceEnd, struct FVector* OutImpactPoint, struct FVector* OutImpactNormal, class FName* ClosestSocketName, struct FVector* SocketLocation, bool* IsValid);
	static void UnloadStreamingLevel(class ULevelStreamingDynamic* LevelInstance);
	static void UTCToLocal(const struct FDateTime& UTCTime, struct FDateTime* LocalTime);
	static struct FVector2D Vector2DInterpTo(const struct FVector2D& Current, const struct FVector2D& Target, float DeltaTime, float InterpSpeed);
	static struct FVector2D Vector2DInterpTo_Constant(const struct FVector2D& Current, const struct FVector2D& Target, float DeltaTime, float InterpSpeed);
	static float VerticalFOV(float HorizontalFOV, float AspectRatio);
	static EPathFollowingRequestResult Victory_AI_MoveToWithFilter(class APawn* Pawn, const struct FVector& Dest, TSubclassOf<class UNavigationQueryFilter> FilterClass, float AcceptanceRadius, bool bProjectDestinationToNavigation, bool bStopOnOverlap, bool bCanStrafe);
	static bool Victory_Get_Pixel(const TArray<struct FLinearColor>& Pixels, int32 ImageHeight, int32 X, int32 Y, struct FLinearColor* FoundColor);
	static class FString Victory_GetGPUBrand();
	static void Victory_GetGPUInfo(class FString* DeviceDescription, class FString* Provider, class FString* DriverVersion, class FString* DriverDate);
	static class FString Victory_GetGRHIAdapterName();
	static bool Victory_GetPixelFromT2D(class UTexture2D* T2D, int32 X, int32 Y, struct FLinearColor* PixelColor);
	static bool Victory_GetPixelsArrayFromT2D(class UTexture2D* T2D, int32* TextureWidth, int32* TextureHeight, TArray<struct FLinearColor>* PixelArray);
	static void Victory_GetStringFromOSClipboard(class FString* FromClipboard);
	static class UTexture2D* Victory_LoadTexture2D_FromFile(const class FString& FullFilePath, EJoyImageFormats ImageFormat, bool* IsValid, int32* Width, int32* Height);
	static class UTexture2D* Victory_LoadTexture2D_FromFile_Pixels(const class FString& FullFilePath, EJoyImageFormats ImageFormat, bool* IsValid, int32* Width, int32* Height, TArray<struct FLinearColor>* OutPixels);
	static bool Victory_SavePixels(const class FString& FullFilePath, int32 Width, int32 Height, const TArray<struct FLinearColor>& ImagePixels, bool SaveAsBMP, bool SRGB, class FString* ErrorString);
	static void Victory_SaveStringToOSClipboard(const class FString& ToClipboard);
	static class FString Victory_SecondsToHoursMinutesSeconds(float Seconds, bool TrimZeroes);
	static void VictoryAppendInline(class FString& String, const class FString& ToAppend, class FString* Result, bool AppendNewline);
	static void VictoryCreateProc(int32* ProcessId, const class FString& FullPathOfProgramToRun, const TArray<class FString>& CommandlineArgs, bool Detach, bool Hidden, int32 Priority, const class FString& OptionalWorkingDirectory, class URamaVictoryPluginCreateProcessPipe* ReadPipeObject);
	static bool VictoryDestructible_DestroyChunk(class UDestructibleComponent* DestructibleComp, int32 HitItem);
	static void VictoryFloatMinusEquals(float& Float, float Sub, float* FloatOut);
	static void VictoryFloatPlusEquals(float& Float, float Add, float* FloatOut);
	static void VictoryGetAllActionKeyBindings(TArray<struct FVictoryInput>* Bindings);
	static void VictoryGetAllAxisAndActionMappingsForKey(const struct FKey& Key, TArray<struct FVictoryInput>* ActionBindings, TArray<struct FVictoryInputAxis>* AxisBindings);
	static void VictoryGetAllAxisKeyBindings(TArray<struct FVictoryInputAxis>* Bindings);
	static class FString VictoryGetApplicationName(int32 ProcessId);
	static bool VictoryGetCustomConfigVar_Bool(const class FString& SectionName, const class FString& VariableName, bool* IsValid);
	static struct FLinearColor VictoryGetCustomConfigVar_Color(const class FString& SectionName, const class FString& VariableName, bool* IsValid);
	static float VictoryGetCustomConfigVar_Float(const class FString& SectionName, const class FString& VariableName, bool* IsValid);
	static int32 VictoryGetCustomConfigVar_Int(const class FString& SectionName, const class FString& VariableName, bool* IsValid);
	static struct FRotator VictoryGetCustomConfigVar_Rotator(const class FString& SectionName, const class FString& VariableName, bool* IsValid);
	static class FString VictoryGetCustomConfigVar_String(const class FString& SectionName, const class FString& VariableName, bool* IsValid);
	static struct FVector VictoryGetCustomConfigVar_Vector(const class FString& SectionName, const class FString& VariableName, bool* IsValid);
	static struct FVector2D VictoryGetCustomConfigVar_Vector2D(const class FString& SectionName, const class FString& VariableName, bool* IsValid);
	static float VictoryGetSoundVolume(class USoundClass* SoundClassObject);
	static struct FVictoryInput VictoryGetVictoryInput(const struct FKeyEvent& KeyEvent);
	static struct FVictoryInputAxis VictoryGetVictoryInputAxis(const struct FKeyEvent& KeyEvent);
	static void VictoryIntMinusEquals(int32& Int, int32 Sub, int32* IntOut);
	static void VictoryIntPlusEquals(int32& Int, int32 Add, int32* IntOut);
	static bool VictoryIsApplicationRunning(int32 ProcessId);
	static void VictoryISM_ConvertToVictoryISMActors(class UObject* WorldContextObject, TSubclassOf<class AActor> ActorClass, TArray<class AVictoryISM*>* CreatedISMActors, bool DestroyOriginalActors, int32 MinCountToCreateISM);
	static void VictoryISM_GetAllVictoryISMActors(class UObject* WorldContextObject, TArray<class AVictoryISM*>* Out);
	static class ULevelStreaming* VictoryLoadLevelInstance(class UObject* WorldContextObject, const class FString& MapFolderOffOfContent, const class FString& LevelName, int32 InstanceNumber, const struct FVector& Location, const struct FRotator& Rotation, bool* Success);
	static class FString VictoryPaths__ConfigDir();
	static class FString VictoryPaths__GameRootDirectory();
	static class FString VictoryPaths__LogsDir();
	static class FString VictoryPaths__SavedDir();
	static class FString VictoryPaths__ScreenShotsDir();
	static class FString VictoryPaths__Win64Dir_BinaryLocation();
	static class FString VictoryPaths__WindowsNoEditorDir();
	static bool VictoryPhysics_UpdateAngularDamping(class UPrimitiveComponent* CompToUpdate, float NewAngularDamping);
	static bool VictoryReBindActionKey(const struct FVictoryInput& Original, const struct FVictoryInput& NewBinding);
	static bool VictoryReBindAxisKey(const struct FVictoryInputAxis& Original, const struct FVictoryInputAxis& NewBinding);
	static void VictoryRemoveActionKeyBind(const struct FVictoryInput& ToRemove);
	static void VictoryRemoveAxisKeyBind(const struct FVictoryInputAxis& ToRemove);
	static void VictorySetCustomConfigVar_Bool(const class FString& SectionName, const class FString& VariableName, bool Value);
	static void VictorySetCustomConfigVar_Color(const class FString& SectionName, const class FString& VariableName, const struct FLinearColor& Value);
	static void VictorySetCustomConfigVar_Float(const class FString& SectionName, const class FString& VariableName, float Value);
	static void VictorySetCustomConfigVar_Int(const class FString& SectionName, const class FString& VariableName, int32 Value);
	static void VictorySetCustomConfigVar_Rotator(const class FString& SectionName, const class FString& VariableName, const struct FRotator& Value);
	static void VictorySetCustomConfigVar_String(const class FString& SectionName, const class FString& VariableName, const class FString& Value);
	static void VictorySetCustomConfigVar_Vector(const class FString& SectionName, const class FString& VariableName, const struct FVector& Value);
	static void VictorySetCustomConfigVar_Vector2D(const class FString& SectionName, const class FString& VariableName, const struct FVector2D& Value);
	static void VictorySimulateKeyPress(class APlayerController* ThePC, const struct FKey& Key, EInputEvent EventType);
	static void VictorySimulateMouseWheel(const float& Delta);
	static void VictorySortFloatArray(TArray<float>& FloatArray, TArray<float>* FloatArrayRef);
	static void VictorySortIntArray(TArray<int32>& IntArray, TArray<int32>* IntArrayRef);
	static bool VictorySoundVolumeChange(class USoundClass* SoundClassObject, float NewVolume);
	static bool Viewport__EnableWorldRendering(const class APlayerController* ThePC, bool RenderTheWorld);
	static bool Viewport__GetCenterOfViewport(const class APlayerController* ThePC, float* PosX, float* PosY);
	static bool Viewport__GetMousePosition(const class APlayerController* ThePC, float* PosX, float* PosY);
	static bool Viewport__SetMousePosition(const class APlayerController* ThePC, const float& PosX, const float& PosY);
	static bool ViewportPositionDeproject(class UObject* WorldContextObject, const struct FVector2D& ViewportPosition, struct FVector* OutWorldOrigin, struct FVector* OutWorldDirection);
	static void Visibility__GetNotRenderedActors(class UObject* WorldContextObject, TArray<class AActor*>* CurrentlyNotRenderedActors, float MinRecentTime);
	static void Visibility__GetRenderedActors(class UObject* WorldContextObject, TArray<class AActor*>* CurrentlyRenderedActors, float MinRecentTime);
	static void WidgetGetChildrenOfClass(class UWidget* ParentWidget, TArray<class UUserWidget*>* ChildWidgets, TSubclassOf<class UUserWidget> WidgetClass, bool bImmediateOnly);
	static class UUserWidget* WidgetGetParentOfClass(class UWidget* ChildWidget, TSubclassOf<class UUserWidget> WidgetClass);
	static bool WidgetIsChildOf(class UWidget* ChildWidget, class UWidget* PossibleParent);
	static bool WorldType__InEditorWorld(class UObject* WorldContextObject);
	static bool WorldType__InGameInstanceWorld(class UObject* WorldContextObject);
	static bool WorldType__InPIEWorld(class UObject* WorldContextObject);

	struct FVector TransformVectorToActorSpace(class AActor* Actor, const struct FVector& InVector);
	struct FRotator TransformVectorToActorSpaceAngle(class AActor* Actor, const struct FVector& InVector);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VictoryBPFunctionLibrary">();
	}
	static class UVictoryBPFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVictoryBPFunctionLibrary>();
	}
};
static_assert(alignof(UVictoryBPFunctionLibrary) == 0x000008, "Wrong alignment on UVictoryBPFunctionLibrary");
static_assert(sizeof(UVictoryBPFunctionLibrary) == 0x000028, "Wrong size on UVictoryBPFunctionLibrary");

// Class VictoryBPLibrary.VictoryBPHTML
// 0x0000 (0x0028 - 0x0028)
class UVictoryBPHTML final : public UBlueprintFunctionLibrary
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VictoryBPHTML">();
	}
	static class UVictoryBPHTML* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVictoryBPHTML>();
	}
};
static_assert(alignof(UVictoryBPHTML) == 0x000008, "Wrong alignment on UVictoryBPHTML");
static_assert(sizeof(UVictoryBPHTML) == 0x000028, "Wrong size on UVictoryBPHTML");

// Class VictoryBPLibrary.VictoryISM
// 0x0008 (0x0228 - 0x0220)
class AVictoryISM final : public AActor
{
public:
	class UInstancedStaticMeshComponent*          Mesh;                                              // 0x0220(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VictoryISM">();
	}
	static class AVictoryISM* GetDefaultObj()
	{
		return GetDefaultObjImpl<AVictoryISM>();
	}
};
static_assert(alignof(AVictoryISM) == 0x000008, "Wrong alignment on AVictoryISM");
static_assert(sizeof(AVictoryISM) == 0x000228, "Wrong size on AVictoryISM");
static_assert(offsetof(AVictoryISM, Mesh) == 0x000220, "Member 'AVictoryISM::Mesh' has a wrong offset!");

}

