#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ActorChipPile

#include "Basic.hpp"

#include "Struct_food1_structs.hpp"
#include "Enum_interactionActions_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Struct_save_structs.hpp"
#include "InputCore_structs.hpp"
#include "Struct_prop_structs.hpp"
#include "Struct_mInt_structs.hpp"


namespace SDK::Params
{

// Function actorChipPile.actorChipPile_C.ExecuteUbergraph_actorChipPile
// 0x0900 (0x0900 - 0x0000)
struct ActorChipPile_C_ExecuteUbergraph_actorChipPile final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3534[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_14;                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_7;                                // 0x0010(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         K2Node_Event_damage_4;                             // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_fuel;                                 // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_13;                            // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_12;                            // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_3;                             // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_location_1;                           // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_11;                            // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_10;                            // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_9;                             // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_wheelDelta;                           // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3535[0x4];                                     // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_8;                             // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Event_mouse;                                // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_7;                             // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_Event_key_1;                                // 0x00F8(0x0018)(HasGetValueTypeHash)
	bool                                          K2Node_Event_pressed;                              // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3536[0x3];                                     // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_temperature_1;                        // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_temperature;                          // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_speed;                                // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_6;                             // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_6;                                // 0x0128(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class FString                                 K2Node_Event_name_1;                               // 0x01B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         K2Node_Event_volume;                               // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3537[0x4];                                     // 0x01C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_5;                             // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_location;                             // 0x01D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_2;                             // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_clean;                                // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3538[0x7];                                     // 0x01E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_4;                             // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_5;                                // 0x01F0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AHook_C*                                K2Node_Event_hook;                                 // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_3;                             // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_4;                                // 0x0288(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          K2Node_Event_kick;                                 // 0x0310(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3539[0x3];                                     // 0x0311(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_name;                                 // 0x0314(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_353A[0x4];                                     // 0x031C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_2;                             // 0x0320(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_1;                             // 0x0328(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_3;                                // 0x0330(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x03B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x03C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x03D0(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0400(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_353B[0x7];                                     // 0x0401(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0408(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AProp_garbageClump_C*                   CallFunc_FinishSpawningActor_ReturnValue;          // 0x0410(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0418(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0424(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0430(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_353C[0x4];                                     // 0x043C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      CallFunc_obj_static_obj;                           // 0x0440(0x0010)(ReferenceParm)
	struct FHitResult                             CallFunc_SphereTraceSingleForObjects_OutHit;       // 0x0450(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingleForObjects_ReturnValue;  // 0x04D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x04D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x04DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_353D[0x1];                                     // 0x04DB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x04DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x04E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x04E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x04F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x04FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0508(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_353E[0x4];                                     // 0x0514(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0518(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0520(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0528(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0530(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0538(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x053C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0540(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0544(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0550(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x055C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0560(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x0568(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_353F[0x4];                                     // 0x0574(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsActor_Chip_Pile;         // 0x0578(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x0580(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3540[0x3];                                     // 0x0581(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x0584(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x0590(0x0030)(IsPlainOldData, NoDestructor)
	class AMainPlayer_C*                          K2Node_Event_player;                               // 0x05C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_2;                                // 0x05C8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         K2Node_Event_index;                                // 0x0650(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_interactionActions                       K2Node_Event_action;                               // 0x0654(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3541[0x3];                                     // 0x0655(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1; // 0x0658(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_1;            // 0x0660(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_1;         // 0x0661(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3542[0x2];                                     // 0x0662(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_1;                    // 0x0664(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_1;                // 0x0668(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_1;                // 0x066C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_1;             // 0x0678(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_1;                  // 0x0684(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_1;            // 0x0690(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3543[0x4];                                     // 0x069C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_1;                 // 0x06A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_1;                // 0x06A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_1;            // 0x06B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_1;             // 0x06B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_1;                 // 0x06C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_1;            // 0x06C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_1;               // 0x06C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_1;              // 0x06CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_1;                // 0x06D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_MakeHitResult_ReturnValue;                // 0x06E4(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_3544[0x4];                                     // 0x076C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGrunge_C*                              CallFunc_FinishSpawningActor_ReturnValue_1;        // 0x0770(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 K2Node_Event_key;                                  // 0x0778(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_actor_1;                              // 0x0788(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_1;                             // 0x0790(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_1;                                // 0x0794(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                K2Node_Event_impact_1;                             // 0x081C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_skipSetting;                          // 0x0828(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_static;                               // 0x0829(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_frozen;                               // 0x082A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_active;                               // 0x082B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_activate;                             // 0x082C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3545[0x3];                                     // 0x082D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AWaterVolume_C*                         K2Node_Event_water_3;                              // 0x0830(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWaterVolume_C*                         K2Node_Event_water_2;                              // 0x0838(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWaterVolume_C*                         K2Node_Event_water_1;                              // 0x0840(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWaterVolume_C*                         K2Node_Event_water;                                // 0x0848(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage;                               // 0x0850(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit;                                  // 0x0854(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_3546[0x4];                                     // 0x08DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_actor;                                // 0x08E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_impact;                               // 0x08E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_ignore;                               // 0x08F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3547[0x3];                                     // 0x08F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x08F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ActorChipPile_C_ExecuteUbergraph_actorChipPile) == 0x000010, "Wrong alignment on ActorChipPile_C_ExecuteUbergraph_actorChipPile");
static_assert(sizeof(ActorChipPile_C_ExecuteUbergraph_actorChipPile) == 0x000900, "Wrong size on ActorChipPile_C_ExecuteUbergraph_actorChipPile");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, EntryPoint) == 0x000000, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::EntryPoint' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_player_14) == 0x000008, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_player_14' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_hit_7) == 0x000010, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_hit_7' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_damage_4) == 0x000098, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_damage_4' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_fuel) == 0x00009C, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_fuel' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_player_13) == 0x0000A0, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_player_13' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_player_12) == 0x0000A8, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_player_12' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_damage_3) == 0x0000B0, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_damage_3' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_location_1) == 0x0000B4, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_location_1' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_player_11) == 0x0000C0, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_player_11' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_player_10) == 0x0000C8, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_player_10' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_player_9) == 0x0000D0, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_player_9' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_wheelDelta) == 0x0000D8, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_wheelDelta' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_player_8) == 0x0000E0, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_player_8' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_mouse) == 0x0000E8, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_mouse' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_player_7) == 0x0000F0, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_player_7' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_key_1) == 0x0000F8, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_key_1' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_pressed) == 0x000110, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_pressed' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_temperature_1) == 0x000114, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_temperature_1' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_temperature) == 0x000118, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_temperature' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_speed) == 0x00011C, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_speed' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_player_6) == 0x000120, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_player_6' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_hit_6) == 0x000128, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_hit_6' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_name_1) == 0x0001B0, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_name_1' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_volume) == 0x0001C0, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_volume' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_player_5) == 0x0001C8, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_player_5' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_location) == 0x0001D0, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_location' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_damage_2) == 0x0001DC, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_damage_2' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_clean) == 0x0001E0, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_clean' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_player_4) == 0x0001E8, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_player_4' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_hit_5) == 0x0001F0, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_hit_5' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_hook) == 0x000278, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_hook' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_player_3) == 0x000280, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_player_3' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_hit_4) == 0x000288, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_hit_4' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_kick) == 0x000310, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_kick' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_name) == 0x000314, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_name' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_player_2) == 0x000320, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_player_2' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_player_1) == 0x000328, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_player_1' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_hit_3) == 0x000330, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_hit_3' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0003B8, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_Add_VectorVector_ReturnValue) == 0x0003C4, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_MakeTransform_ReturnValue) == 0x0003D0, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000400, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000408, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_FinishSpawningActor_ReturnValue) == 0x000410, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000418, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000424, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000430, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_obj_static_obj) == 0x000440, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_obj_static_obj' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_SphereTraceSingleForObjects_OutHit) == 0x000450, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_SphereTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_SphereTraceSingleForObjects_ReturnValue) == 0x0004D8, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_SphereTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_BreakHitResult_bBlockingHit) == 0x0004D9, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_BreakHitResult_bInitialOverlap) == 0x0004DA, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_BreakHitResult_Time) == 0x0004DC, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_BreakHitResult_Distance) == 0x0004E0, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_BreakHitResult_Location) == 0x0004E4, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_BreakHitResult_ImpactPoint) == 0x0004F0, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_BreakHitResult_Normal) == 0x0004FC, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_BreakHitResult_ImpactNormal) == 0x000508, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_BreakHitResult_PhysMat) == 0x000518, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_BreakHitResult_HitActor) == 0x000520, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_BreakHitResult_HitComponent) == 0x000528, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_BreakHitResult_HitBoneName) == 0x000530, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_BreakHitResult_HitItem) == 0x000538, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_BreakHitResult_ElementIndex) == 0x00053C, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_BreakHitResult_FaceIndex) == 0x000540, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_BreakHitResult_TraceStart) == 0x000544, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_BreakHitResult_TraceEnd) == 0x000550, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_Array_Add_ReturnValue) == 0x00055C, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_GetObjectClass_ReturnValue) == 0x000560, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_Add_VectorVector_ReturnValue_2) == 0x000568, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_ClassDynamicCast_AsActor_Chip_Pile) == 0x000578, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_ClassDynamicCast_AsActor_Chip_Pile' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_ClassDynamicCast_bSuccess) == 0x000580, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x000584, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_MakeTransform_ReturnValue_1) == 0x000590, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_player) == 0x0005C0, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_player' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_hit_2) == 0x0005C8, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_hit_2' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_index) == 0x000650, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_index' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_action) == 0x000654, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_action' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1) == 0x000658, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_BreakHitResult_bBlockingHit_1) == 0x000660, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_BreakHitResult_bBlockingHit_1' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_BreakHitResult_bInitialOverlap_1) == 0x000661, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_BreakHitResult_bInitialOverlap_1' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_BreakHitResult_Time_1) == 0x000664, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_BreakHitResult_Time_1' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_BreakHitResult_Distance_1) == 0x000668, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_BreakHitResult_Distance_1' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_BreakHitResult_Location_1) == 0x00066C, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_BreakHitResult_Location_1' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_BreakHitResult_ImpactPoint_1) == 0x000678, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_BreakHitResult_ImpactPoint_1' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_BreakHitResult_Normal_1) == 0x000684, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_BreakHitResult_Normal_1' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_BreakHitResult_ImpactNormal_1) == 0x000690, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_BreakHitResult_ImpactNormal_1' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_BreakHitResult_PhysMat_1) == 0x0006A0, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_BreakHitResult_PhysMat_1' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_BreakHitResult_HitActor_1) == 0x0006A8, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_BreakHitResult_HitActor_1' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_BreakHitResult_HitComponent_1) == 0x0006B0, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_BreakHitResult_HitComponent_1' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_BreakHitResult_HitBoneName_1) == 0x0006B8, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_BreakHitResult_HitBoneName_1' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_BreakHitResult_HitItem_1) == 0x0006C0, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_BreakHitResult_HitItem_1' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_BreakHitResult_ElementIndex_1) == 0x0006C4, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_BreakHitResult_ElementIndex_1' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_BreakHitResult_FaceIndex_1) == 0x0006C8, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_BreakHitResult_FaceIndex_1' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_BreakHitResult_TraceStart_1) == 0x0006CC, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_BreakHitResult_TraceStart_1' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_BreakHitResult_TraceEnd_1) == 0x0006D8, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_BreakHitResult_TraceEnd_1' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_MakeHitResult_ReturnValue) == 0x0006E4, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_MakeHitResult_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_FinishSpawningActor_ReturnValue_1) == 0x000770, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_FinishSpawningActor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_key) == 0x000778, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_key' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_actor_1) == 0x000788, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_actor_1' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_damage_1) == 0x000790, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_damage_1' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_hit_1) == 0x000794, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_hit_1' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_impact_1) == 0x00081C, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_impact_1' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_skipSetting) == 0x000828, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_skipSetting' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_static) == 0x000829, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_static' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_frozen) == 0x00082A, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_frozen' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_active) == 0x00082B, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_active' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_activate) == 0x00082C, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_activate' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_water_3) == 0x000830, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_water_3' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_water_2) == 0x000838, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_water_2' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_water_1) == 0x000840, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_water_1' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_water) == 0x000848, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_water' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_damage) == 0x000850, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_damage' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_hit) == 0x000854, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_hit' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_actor) == 0x0008E0, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_actor' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_impact) == 0x0008E8, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_impact' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, K2Node_Event_ignore) == 0x0008F4, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::K2Node_Event_ignore' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ExecuteUbergraph_actorChipPile, CallFunc_Array_Add_ReturnValue_1) == 0x0008F8, "Member 'ActorChipPile_C_ExecuteUbergraph_actorChipPile::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.setIgnoreSave
// 0x0001 (0x0001 - 0x0000)
struct ActorChipPile_C_SetIgnoreSave final
{
public:
	bool                                          Param_Ignore;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ActorChipPile_C_SetIgnoreSave) == 0x000001, "Wrong alignment on ActorChipPile_C_SetIgnoreSave");
static_assert(sizeof(ActorChipPile_C_SetIgnoreSave) == 0x000001, "Wrong size on ActorChipPile_C_SetIgnoreSave");
static_assert(offsetof(ActorChipPile_C_SetIgnoreSave, Param_Ignore) == 0x000000, "Member 'ActorChipPile_C_SetIgnoreSave::Param_Ignore' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.ImpactDamage
// 0x00A8 (0x00A8 - 0x0000)
struct ActorChipPile_C_ImpactDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0004(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_3548[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0090(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Impact;                                            // 0x0098(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ActorChipPile_C_ImpactDamage) == 0x000008, "Wrong alignment on ActorChipPile_C_ImpactDamage");
static_assert(sizeof(ActorChipPile_C_ImpactDamage) == 0x0000A8, "Wrong size on ActorChipPile_C_ImpactDamage");
static_assert(offsetof(ActorChipPile_C_ImpactDamage, Damage) == 0x000000, "Member 'ActorChipPile_C_ImpactDamage::Damage' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ImpactDamage, Hit) == 0x000004, "Member 'ActorChipPile_C_ImpactDamage::Hit' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ImpactDamage, Actor) == 0x000090, "Member 'ActorChipPile_C_ImpactDamage::Actor' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ImpactDamage, Impact) == 0x000098, "Member 'ActorChipPile_C_ImpactDamage::Impact' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.enterWaterOrigin
// 0x0008 (0x0008 - 0x0000)
struct ActorChipPile_C_EnterWaterOrigin final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ActorChipPile_C_EnterWaterOrigin) == 0x000008, "Wrong alignment on ActorChipPile_C_EnterWaterOrigin");
static_assert(sizeof(ActorChipPile_C_EnterWaterOrigin) == 0x000008, "Wrong size on ActorChipPile_C_EnterWaterOrigin");
static_assert(offsetof(ActorChipPile_C_EnterWaterOrigin, Water) == 0x000000, "Member 'ActorChipPile_C_EnterWaterOrigin::Water' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.leaveWaterOrigin
// 0x0008 (0x0008 - 0x0000)
struct ActorChipPile_C_LeaveWaterOrigin final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ActorChipPile_C_LeaveWaterOrigin) == 0x000008, "Wrong alignment on ActorChipPile_C_LeaveWaterOrigin");
static_assert(sizeof(ActorChipPile_C_LeaveWaterOrigin) == 0x000008, "Wrong size on ActorChipPile_C_LeaveWaterOrigin");
static_assert(offsetof(ActorChipPile_C_LeaveWaterOrigin, Water) == 0x000000, "Member 'ActorChipPile_C_LeaveWaterOrigin::Water' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.enterWater
// 0x0008 (0x0008 - 0x0000)
struct ActorChipPile_C_EnterWater final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ActorChipPile_C_EnterWater) == 0x000008, "Wrong alignment on ActorChipPile_C_EnterWater");
static_assert(sizeof(ActorChipPile_C_EnterWater) == 0x000008, "Wrong size on ActorChipPile_C_EnterWater");
static_assert(offsetof(ActorChipPile_C_EnterWater, Water) == 0x000000, "Member 'ActorChipPile_C_EnterWater::Water' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.leaveWater
// 0x0008 (0x0008 - 0x0000)
struct ActorChipPile_C_LeaveWater final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ActorChipPile_C_LeaveWater) == 0x000008, "Wrong alignment on ActorChipPile_C_LeaveWater");
static_assert(sizeof(ActorChipPile_C_LeaveWater) == 0x000008, "Wrong size on ActorChipPile_C_LeaveWater");
static_assert(offsetof(ActorChipPile_C_LeaveWater, Water) == 0x000000, "Member 'ActorChipPile_C_LeaveWater::Water' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.virus
// 0x0001 (0x0001 - 0x0000)
struct ActorChipPile_C_Virus final
{
public:
	bool                                          Activate;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ActorChipPile_C_Virus) == 0x000001, "Wrong alignment on ActorChipPile_C_Virus");
static_assert(sizeof(ActorChipPile_C_Virus) == 0x000001, "Wrong size on ActorChipPile_C_Virus");
static_assert(offsetof(ActorChipPile_C_Virus, Activate) == 0x000000, "Member 'ActorChipPile_C_Virus::Activate' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.setPropProps
// 0x0003 (0x0003 - 0x0000)
struct ActorChipPile_C_SetPropProps final
{
public:
	bool                                          Static;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Frozen;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Active;                                            // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ActorChipPile_C_SetPropProps) == 0x000001, "Wrong alignment on ActorChipPile_C_SetPropProps");
static_assert(sizeof(ActorChipPile_C_SetPropProps) == 0x000003, "Wrong size on ActorChipPile_C_SetPropProps");
static_assert(offsetof(ActorChipPile_C_SetPropProps, Static) == 0x000000, "Member 'ActorChipPile_C_SetPropProps::Static' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_SetPropProps, Frozen) == 0x000001, "Member 'ActorChipPile_C_SetPropProps::Frozen' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_SetPropProps, Active) == 0x000002, "Member 'ActorChipPile_C_SetPropProps::Active' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.addDamage
// 0x00A8 (0x00A8 - 0x0000)
struct ActorChipPile_C_AddDamage final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x000C(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                Impact;                                            // 0x0094(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipSetting;                                       // 0x00A0(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ActorChipPile_C_AddDamage) == 0x000008, "Wrong alignment on ActorChipPile_C_AddDamage");
static_assert(sizeof(ActorChipPile_C_AddDamage) == 0x0000A8, "Wrong size on ActorChipPile_C_AddDamage");
static_assert(offsetof(ActorChipPile_C_AddDamage, Actor) == 0x000000, "Member 'ActorChipPile_C_AddDamage::Actor' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_AddDamage, Damage) == 0x000008, "Member 'ActorChipPile_C_AddDamage::Damage' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_AddDamage, Hit) == 0x00000C, "Member 'ActorChipPile_C_AddDamage::Hit' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_AddDamage, Impact) == 0x000094, "Member 'ActorChipPile_C_AddDamage::Impact' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_AddDamage, SkipSetting) == 0x0000A0, "Member 'ActorChipPile_C_AddDamage::SkipSetting' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.setKey
// 0x0010 (0x0010 - 0x0000)
struct ActorChipPile_C_SetKey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(ActorChipPile_C_SetKey) == 0x000008, "Wrong alignment on ActorChipPile_C_SetKey");
static_assert(sizeof(ActorChipPile_C_SetKey) == 0x000010, "Wrong size on ActorChipPile_C_SetKey");
static_assert(offsetof(ActorChipPile_C_SetKey, Key) == 0x000000, "Member 'ActorChipPile_C_SetKey::Key' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.actionOptionIndex
// 0x0098 (0x0098 - 0x0000)
struct ActorChipPile_C_ActionOptionIndex final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         Param_Index;                                       // 0x0090(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_interactionActions                       Action;                                            // 0x0094(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ActorChipPile_C_ActionOptionIndex) == 0x000008, "Wrong alignment on ActorChipPile_C_ActionOptionIndex");
static_assert(sizeof(ActorChipPile_C_ActionOptionIndex) == 0x000098, "Wrong size on ActorChipPile_C_ActionOptionIndex");
static_assert(offsetof(ActorChipPile_C_ActionOptionIndex, Player) == 0x000000, "Member 'ActorChipPile_C_ActionOptionIndex::Player' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ActionOptionIndex, Hit) == 0x000008, "Member 'ActorChipPile_C_ActionOptionIndex::Hit' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ActionOptionIndex, Param_Index) == 0x000090, "Member 'ActorChipPile_C_ActionOptionIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ActionOptionIndex, Action) == 0x000094, "Member 'ActorChipPile_C_ActionOptionIndex::Action' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.damageByPlayer
// 0x0090 (0x0090 - 0x0000)
struct ActorChipPile_C_DamageByPlayer final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(ActorChipPile_C_DamageByPlayer) == 0x000008, "Wrong alignment on ActorChipPile_C_DamageByPlayer");
static_assert(sizeof(ActorChipPile_C_DamageByPlayer) == 0x000090, "Wrong size on ActorChipPile_C_DamageByPlayer");
static_assert(offsetof(ActorChipPile_C_DamageByPlayer, Player) == 0x000000, "Member 'ActorChipPile_C_DamageByPlayer::Player' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_DamageByPlayer, Hit) == 0x000008, "Member 'ActorChipPile_C_DamageByPlayer::Hit' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.thrown
// 0x0008 (0x0008 - 0x0000)
struct ActorChipPile_C_Thrown final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ActorChipPile_C_Thrown) == 0x000008, "Wrong alignment on ActorChipPile_C_Thrown");
static_assert(sizeof(ActorChipPile_C_Thrown) == 0x000008, "Wrong size on ActorChipPile_C_Thrown");
static_assert(offsetof(ActorChipPile_C_Thrown, Player) == 0x000000, "Member 'ActorChipPile_C_Thrown::Player' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.sendName
// 0x0008 (0x0008 - 0x0000)
struct ActorChipPile_C_SendName final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ActorChipPile_C_SendName) == 0x000004, "Wrong alignment on ActorChipPile_C_SendName");
static_assert(sizeof(ActorChipPile_C_SendName) == 0x000008, "Wrong size on ActorChipPile_C_SendName");
static_assert(offsetof(ActorChipPile_C_SendName, Param_Name) == 0x000000, "Member 'ActorChipPile_C_SendName::Param_Name' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.kicked
// 0x0001 (0x0001 - 0x0000)
struct ActorChipPile_C_Kicked final
{
public:
	bool                                          Kick;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ActorChipPile_C_Kicked) == 0x000001, "Wrong alignment on ActorChipPile_C_Kicked");
static_assert(sizeof(ActorChipPile_C_Kicked) == 0x000001, "Wrong size on ActorChipPile_C_Kicked");
static_assert(offsetof(ActorChipPile_C_Kicked, Kick) == 0x000000, "Member 'ActorChipPile_C_Kicked::Kick' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.player_use
// 0x0090 (0x0090 - 0x0000)
struct ActorChipPile_C_Player_use final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(ActorChipPile_C_Player_use) == 0x000008, "Wrong alignment on ActorChipPile_C_Player_use");
static_assert(sizeof(ActorChipPile_C_Player_use) == 0x000090, "Wrong size on ActorChipPile_C_Player_use");
static_assert(offsetof(ActorChipPile_C_Player_use, Player) == 0x000000, "Member 'ActorChipPile_C_Player_use::Player' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_Player_use, Hit) == 0x000008, "Member 'ActorChipPile_C_Player_use::Hit' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.hooked
// 0x0008 (0x0008 - 0x0000)
struct ActorChipPile_C_Hooked final
{
public:
	class AHook_C*                                Hook;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ActorChipPile_C_Hooked) == 0x000008, "Wrong alignment on ActorChipPile_C_Hooked");
static_assert(sizeof(ActorChipPile_C_Hooked) == 0x000008, "Wrong size on ActorChipPile_C_Hooked");
static_assert(offsetof(ActorChipPile_C_Hooked, Hook) == 0x000000, "Member 'ActorChipPile_C_Hooked::Hook' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.playerUsedOn
// 0x0090 (0x0090 - 0x0000)
struct ActorChipPile_C_PlayerUsedOn final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(ActorChipPile_C_PlayerUsedOn) == 0x000008, "Wrong alignment on ActorChipPile_C_PlayerUsedOn");
static_assert(sizeof(ActorChipPile_C_PlayerUsedOn) == 0x000090, "Wrong size on ActorChipPile_C_PlayerUsedOn");
static_assert(offsetof(ActorChipPile_C_PlayerUsedOn, Player) == 0x000000, "Member 'ActorChipPile_C_PlayerUsedOn::Player' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_PlayerUsedOn, Hit) == 0x000008, "Member 'ActorChipPile_C_PlayerUsedOn::Hit' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.slice
// 0x0001 (0x0001 - 0x0000)
struct ActorChipPile_C_Slice final
{
public:
	bool                                          Clean;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ActorChipPile_C_Slice) == 0x000001, "Wrong alignment on ActorChipPile_C_Slice");
static_assert(sizeof(ActorChipPile_C_Slice) == 0x000001, "Wrong size on ActorChipPile_C_Slice");
static_assert(offsetof(ActorChipPile_C_Slice, Clean) == 0x000000, "Member 'ActorChipPile_C_Slice::Clean' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.reachedByExplosion
// 0x0010 (0x0010 - 0x0000)
struct ActorChipPile_C_ReachedByExplosion final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ActorChipPile_C_ReachedByExplosion) == 0x000004, "Wrong alignment on ActorChipPile_C_ReachedByExplosion");
static_assert(sizeof(ActorChipPile_C_ReachedByExplosion) == 0x000010, "Wrong size on ActorChipPile_C_ReachedByExplosion");
static_assert(offsetof(ActorChipPile_C_ReachedByExplosion, Location) == 0x000000, "Member 'ActorChipPile_C_ReachedByExplosion::Location' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ReachedByExplosion, Damage) == 0x00000C, "Member 'ActorChipPile_C_ReachedByExplosion::Damage' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.playerLookAway
// 0x0008 (0x0008 - 0x0000)
struct ActorChipPile_C_PlayerLookAway final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ActorChipPile_C_PlayerLookAway) == 0x000008, "Wrong alignment on ActorChipPile_C_PlayerLookAway");
static_assert(sizeof(ActorChipPile_C_PlayerLookAway) == 0x000008, "Wrong size on ActorChipPile_C_PlayerLookAway");
static_assert(offsetof(ActorChipPile_C_PlayerLookAway, Player) == 0x000000, "Member 'ActorChipPile_C_PlayerLookAway::Player' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.stepped
// 0x0004 (0x0004 - 0x0000)
struct ActorChipPile_C_Stepped final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ActorChipPile_C_Stepped) == 0x000004, "Wrong alignment on ActorChipPile_C_Stepped");
static_assert(sizeof(ActorChipPile_C_Stepped) == 0x000004, "Wrong size on ActorChipPile_C_Stepped");
static_assert(offsetof(ActorChipPile_C_Stepped, Volume) == 0x000000, "Member 'ActorChipPile_C_Stepped::Volume' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.ActionName
// 0x00A0 (0x00A0 - 0x0000)
struct ActorChipPile_C_ActionName final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class FString                                 Param_Name;                                        // 0x0090(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(ActorChipPile_C_ActionName) == 0x000008, "Wrong alignment on ActorChipPile_C_ActionName");
static_assert(sizeof(ActorChipPile_C_ActionName) == 0x0000A0, "Wrong size on ActorChipPile_C_ActionName");
static_assert(offsetof(ActorChipPile_C_ActionName, Player) == 0x000000, "Member 'ActorChipPile_C_ActionName::Player' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ActionName, Hit) == 0x000008, "Member 'ActorChipPile_C_ActionName::Hit' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ActionName, Param_Name) == 0x000090, "Member 'ActorChipPile_C_ActionName::Param_Name' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.accumulateTemperature
// 0x0008 (0x0008 - 0x0000)
struct ActorChipPile_C_AccumulateTemperature final
{
public:
	float                                         Temperature;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ActorChipPile_C_AccumulateTemperature) == 0x000004, "Wrong alignment on ActorChipPile_C_AccumulateTemperature");
static_assert(sizeof(ActorChipPile_C_AccumulateTemperature) == 0x000008, "Wrong size on ActorChipPile_C_AccumulateTemperature");
static_assert(offsetof(ActorChipPile_C_AccumulateTemperature, Temperature) == 0x000000, "Member 'ActorChipPile_C_AccumulateTemperature::Temperature' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_AccumulateTemperature, Speed) == 0x000004, "Member 'ActorChipPile_C_AccumulateTemperature::Speed' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.addTemperature
// 0x0004 (0x0004 - 0x0000)
struct ActorChipPile_C_AddTemperature final
{
public:
	float                                         Temperature;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ActorChipPile_C_AddTemperature) == 0x000004, "Wrong alignment on ActorChipPile_C_AddTemperature");
static_assert(sizeof(ActorChipPile_C_AddTemperature) == 0x000004, "Wrong size on ActorChipPile_C_AddTemperature");
static_assert(offsetof(ActorChipPile_C_AddTemperature, Temperature) == 0x000000, "Member 'ActorChipPile_C_AddTemperature::Temperature' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.playerHandAnyKey
// 0x0028 (0x0028 - 0x0000)
struct ActorChipPile_C_PlayerHandAnyKey final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   Key;                                               // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Pressed;                                           // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ActorChipPile_C_PlayerHandAnyKey) == 0x000008, "Wrong alignment on ActorChipPile_C_PlayerHandAnyKey");
static_assert(sizeof(ActorChipPile_C_PlayerHandAnyKey) == 0x000028, "Wrong size on ActorChipPile_C_PlayerHandAnyKey");
static_assert(offsetof(ActorChipPile_C_PlayerHandAnyKey, Player) == 0x000000, "Member 'ActorChipPile_C_PlayerHandAnyKey::Player' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_PlayerHandAnyKey, Key) == 0x000008, "Member 'ActorChipPile_C_PlayerHandAnyKey::Key' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_PlayerHandAnyKey, Pressed) == 0x000020, "Member 'ActorChipPile_C_PlayerHandAnyKey::Pressed' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.playerHandMouse
// 0x0010 (0x0010 - 0x0000)
struct ActorChipPile_C_PlayerHandMouse final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Mouse;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ActorChipPile_C_PlayerHandMouse) == 0x000008, "Wrong alignment on ActorChipPile_C_PlayerHandMouse");
static_assert(sizeof(ActorChipPile_C_PlayerHandMouse) == 0x000010, "Wrong size on ActorChipPile_C_PlayerHandMouse");
static_assert(offsetof(ActorChipPile_C_PlayerHandMouse, Player) == 0x000000, "Member 'ActorChipPile_C_PlayerHandMouse::Player' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_PlayerHandMouse, Mouse) == 0x000008, "Member 'ActorChipPile_C_PlayerHandMouse::Mouse' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.playerHandMouseWheel
// 0x0010 (0x0010 - 0x0000)
struct ActorChipPile_C_PlayerHandMouseWheel final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WheelDelta;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ActorChipPile_C_PlayerHandMouseWheel) == 0x000008, "Wrong alignment on ActorChipPile_C_PlayerHandMouseWheel");
static_assert(sizeof(ActorChipPile_C_PlayerHandMouseWheel) == 0x000010, "Wrong size on ActorChipPile_C_PlayerHandMouseWheel");
static_assert(offsetof(ActorChipPile_C_PlayerHandMouseWheel, Player) == 0x000000, "Member 'ActorChipPile_C_PlayerHandMouseWheel::Player' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_PlayerHandMouseWheel, WheelDelta) == 0x000008, "Member 'ActorChipPile_C_PlayerHandMouseWheel::WheelDelta' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.playerHandRelease_LMB
// 0x0008 (0x0008 - 0x0000)
struct ActorChipPile_C_PlayerHandRelease_LMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ActorChipPile_C_PlayerHandRelease_LMB) == 0x000008, "Wrong alignment on ActorChipPile_C_PlayerHandRelease_LMB");
static_assert(sizeof(ActorChipPile_C_PlayerHandRelease_LMB) == 0x000008, "Wrong size on ActorChipPile_C_PlayerHandRelease_LMB");
static_assert(offsetof(ActorChipPile_C_PlayerHandRelease_LMB, Player) == 0x000000, "Member 'ActorChipPile_C_PlayerHandRelease_LMB::Player' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.playerHandRelease_RMB
// 0x0008 (0x0008 - 0x0000)
struct ActorChipPile_C_PlayerHandRelease_RMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ActorChipPile_C_PlayerHandRelease_RMB) == 0x000008, "Wrong alignment on ActorChipPile_C_PlayerHandRelease_RMB");
static_assert(sizeof(ActorChipPile_C_PlayerHandRelease_RMB) == 0x000008, "Wrong size on ActorChipPile_C_PlayerHandRelease_RMB");
static_assert(offsetof(ActorChipPile_C_PlayerHandRelease_RMB, Player) == 0x000000, "Member 'ActorChipPile_C_PlayerHandRelease_RMB::Player' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.exploded
// 0x0010 (0x0010 - 0x0000)
struct ActorChipPile_C_Exploded final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ActorChipPile_C_Exploded) == 0x000004, "Wrong alignment on ActorChipPile_C_Exploded");
static_assert(sizeof(ActorChipPile_C_Exploded) == 0x000010, "Wrong size on ActorChipPile_C_Exploded");
static_assert(offsetof(ActorChipPile_C_Exploded, Damage) == 0x000000, "Member 'ActorChipPile_C_Exploded::Damage' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_Exploded, Location) == 0x000004, "Member 'ActorChipPile_C_Exploded::Location' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.playerHandUse_LMB
// 0x0008 (0x0008 - 0x0000)
struct ActorChipPile_C_PlayerHandUse_LMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ActorChipPile_C_PlayerHandUse_LMB) == 0x000008, "Wrong alignment on ActorChipPile_C_PlayerHandUse_LMB");
static_assert(sizeof(ActorChipPile_C_PlayerHandUse_LMB) == 0x000008, "Wrong size on ActorChipPile_C_PlayerHandUse_LMB");
static_assert(offsetof(ActorChipPile_C_PlayerHandUse_LMB, Player) == 0x000000, "Member 'ActorChipPile_C_PlayerHandUse_LMB::Player' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.playerHandUse_RMB
// 0x0008 (0x0008 - 0x0000)
struct ActorChipPile_C_PlayerHandUse_RMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ActorChipPile_C_PlayerHandUse_RMB) == 0x000008, "Wrong alignment on ActorChipPile_C_PlayerHandUse_RMB");
static_assert(sizeof(ActorChipPile_C_PlayerHandUse_RMB) == 0x000008, "Wrong size on ActorChipPile_C_PlayerHandUse_RMB");
static_assert(offsetof(ActorChipPile_C_PlayerHandUse_RMB, Player) == 0x000000, "Member 'ActorChipPile_C_PlayerHandUse_RMB::Player' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.ignite
// 0x0004 (0x0004 - 0x0000)
struct ActorChipPile_C_Ignite final
{
public:
	float                                         Fuel;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ActorChipPile_C_Ignite) == 0x000004, "Wrong alignment on ActorChipPile_C_Ignite");
static_assert(sizeof(ActorChipPile_C_Ignite) == 0x000004, "Wrong size on ActorChipPile_C_Ignite");
static_assert(offsetof(ActorChipPile_C_Ignite, Fuel) == 0x000000, "Member 'ActorChipPile_C_Ignite::Fuel' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.fireDamage
// 0x0004 (0x0004 - 0x0000)
struct ActorChipPile_C_FireDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ActorChipPile_C_FireDamage) == 0x000004, "Wrong alignment on ActorChipPile_C_FireDamage");
static_assert(sizeof(ActorChipPile_C_FireDamage) == 0x000004, "Wrong size on ActorChipPile_C_FireDamage");
static_assert(offsetof(ActorChipPile_C_FireDamage, Damage) == 0x000000, "Member 'ActorChipPile_C_FireDamage::Damage' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.steppedOn
// 0x0090 (0x0090 - 0x0000)
struct ActorChipPile_C_SteppedOn final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(ActorChipPile_C_SteppedOn) == 0x000008, "Wrong alignment on ActorChipPile_C_SteppedOn");
static_assert(sizeof(ActorChipPile_C_SteppedOn) == 0x000090, "Wrong size on ActorChipPile_C_SteppedOn");
static_assert(offsetof(ActorChipPile_C_SteppedOn, Player) == 0x000000, "Member 'ActorChipPile_C_SteppedOn::Player' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_SteppedOn, Hit) == 0x000008, "Member 'ActorChipPile_C_SteppedOn::Hit' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.Init
// 0x01A0 (0x01A0 - 0x0000)
struct ActorChipPile_C_Init final
{
public:
	int32                                         Temp_int_Variable;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3549[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            Temp_object_Variable_2;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            Temp_object_Variable_3;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            Temp_object_Variable_4;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            Temp_object_Variable_5;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            Temp_object_Variable_6;                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            Temp_object_Variable_7;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x0058(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_2;         // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_3;         // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x00F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult_1;  // 0x0104(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_354A[0x4];                                     // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            K2Node_Select_Default;                             // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetStaticMesh_ReturnValue_1;              // 0x0199(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ActorChipPile_C_Init) == 0x000008, "Wrong alignment on ActorChipPile_C_Init");
static_assert(sizeof(ActorChipPile_C_Init) == 0x0001A0, "Wrong size on ActorChipPile_C_Init");
static_assert(offsetof(ActorChipPile_C_Init, Temp_int_Variable) == 0x000000, "Member 'ActorChipPile_C_Init::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_Init, Temp_object_Variable) == 0x000008, "Member 'ActorChipPile_C_Init::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_Init, Temp_object_Variable_1) == 0x000010, "Member 'ActorChipPile_C_Init::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_Init, Temp_object_Variable_2) == 0x000018, "Member 'ActorChipPile_C_Init::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_Init, Temp_object_Variable_3) == 0x000020, "Member 'ActorChipPile_C_Init::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_Init, Temp_object_Variable_4) == 0x000028, "Member 'ActorChipPile_C_Init::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_Init, Temp_object_Variable_5) == 0x000030, "Member 'ActorChipPile_C_Init::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_Init, Temp_object_Variable_6) == 0x000038, "Member 'ActorChipPile_C_Init::Temp_object_Variable_6' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_Init, Temp_object_Variable_7) == 0x000040, "Member 'ActorChipPile_C_Init::Temp_object_Variable_7' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_Init, CallFunc_RandomFloatInRange_ReturnValue) == 0x000048, "Member 'ActorChipPile_C_Init::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_Init, CallFunc_MakeRotator_ReturnValue) == 0x00004C, "Member 'ActorChipPile_C_Init::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_Init, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x000058, "Member 'ActorChipPile_C_Init::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_Init, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x0000E0, "Member 'ActorChipPile_C_Init::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_Init, CallFunc_RandomFloatInRange_ReturnValue_2) == 0x0000E4, "Member 'ActorChipPile_C_Init::CallFunc_RandomFloatInRange_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_Init, CallFunc_MakeVector_ReturnValue) == 0x0000E8, "Member 'ActorChipPile_C_Init::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_Init, CallFunc_RandomFloatInRange_ReturnValue_3) == 0x0000F4, "Member 'ActorChipPile_C_Init::CallFunc_RandomFloatInRange_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_Init, CallFunc_MakeRotator_ReturnValue_1) == 0x0000F8, "Member 'ActorChipPile_C_Init::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_Init, CallFunc_K2_SetRelativeRotation_SweepHitResult_1) == 0x000104, "Member 'ActorChipPile_C_Init::CallFunc_K2_SetRelativeRotation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_Init, K2Node_Select_Default) == 0x000190, "Member 'ActorChipPile_C_Init::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_Init, CallFunc_SetStaticMesh_ReturnValue) == 0x000198, "Member 'ActorChipPile_C_Init::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_Init, CallFunc_SetStaticMesh_ReturnValue_1) == 0x000199, "Member 'ActorChipPile_C_Init::CallFunc_SetStaticMesh_ReturnValue_1' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.toClump
// 0x0060 (0x0060 - 0x0000)
struct ActorChipPile_C_ToClump final
{
public:
	class AProp_garbageClump_C*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0020(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AProp_garbageClump_C*                   CallFunc_FinishSpawningActor_ReturnValue;          // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ActorChipPile_C_ToClump) == 0x000010, "Wrong alignment on ActorChipPile_C_ToClump");
static_assert(sizeof(ActorChipPile_C_ToClump) == 0x000060, "Wrong size on ActorChipPile_C_ToClump");
static_assert(offsetof(ActorChipPile_C_ToClump, ReturnValue) == 0x000000, "Member 'ActorChipPile_C_ToClump::ReturnValue' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ToClump, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000008, "Member 'ActorChipPile_C_ToClump::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ToClump, CallFunc_Add_VectorVector_ReturnValue) == 0x000014, "Member 'ActorChipPile_C_ToClump::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ToClump, CallFunc_MakeTransform_ReturnValue) == 0x000020, "Member 'ActorChipPile_C_ToClump::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ToClump, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000050, "Member 'ActorChipPile_C_ToClump::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ToClump, CallFunc_FinishSpawningActor_ReturnValue) == 0x000058, "Member 'ActorChipPile_C_ToClump::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.turnIntoScrap
// 0x02F0 (0x02F0 - 0x0000)
struct ActorChipPile_C_TurnIntoScrap final
{
public:
	int32                                         Temp_int_Variable;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_354B[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_354C[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_4;                               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_2;           // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_354D[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue_1;       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_354E[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue_1;          // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue_2;       // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomInteger_ReturnValue;                // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_2;           // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_3;           // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue_2;          // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue_3;          // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomInteger_ReturnValue_1;              // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomInteger_ReturnValue_2;              // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_4;           // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_5;           // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x0118(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue_4;          // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue_5;          // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomInteger_ReturnValue_3;              // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomInteger_ReturnValue_4;              // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_6;           // 0x0140(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_7;           // 0x0150(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_6;              // 0x0160(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_7;              // 0x0170(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue_6;          // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue_7;          // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0190(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x019C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_354F[0x8];                                     // 0x01A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x01B0(0x0030)(IsPlainOldData, NoDestructor)
	class FName                                   K2Node_Select_Default;                             // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_propToObject_ReturnValue;                 // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3550[0x3];                                     // 0x01F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_food1                          CallFunc_propToObject_foodData;                    // 0x01F4(0x0018)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3551[0x4];                                     // 0x020C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_propToObject_object;                      // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_propToObject_isFood;                      // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3552[0x7];                                     // 0x0219(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_prop                           CallFunc_propToObject_propData;                    // 0x0220(0x0080)(HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1; // 0x02A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x02A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3553[0x7];                                     // 0x02A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_FinishSpawningActor_ReturnValue;          // 0x02B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IInt_player_C>         K2Node_DynamicCast_AsInt_Player;                   // 0x02B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x02C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3554[0x7];                                     // 0x02C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AProp_C*                                CallFunc_FinishSpawningActor_ReturnValue_1;        // 0x02D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AProp_C*                                CallFunc_asProp_return;                            // 0x02D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_2; // 0x02E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AProp_food_C*                           CallFunc_FinishSpawningActor_ReturnValue_2;        // 0x02E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ActorChipPile_C_TurnIntoScrap) == 0x000010, "Wrong alignment on ActorChipPile_C_TurnIntoScrap");
static_assert(sizeof(ActorChipPile_C_TurnIntoScrap) == 0x0002F0, "Wrong size on ActorChipPile_C_TurnIntoScrap");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, Temp_int_Variable) == 0x000000, "Member 'ActorChipPile_C_TurnIntoScrap::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000004, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, Temp_int_Variable_1) == 0x00000C, "Member 'ActorChipPile_C_TurnIntoScrap::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x000010, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_Add_IntInt_ReturnValue_1) == 0x000014, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, Temp_int_Variable_2) == 0x000018, "Member 'ActorChipPile_C_TurnIntoScrap::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, Temp_int_Variable_3) == 0x00001C, "Member 'ActorChipPile_C_TurnIntoScrap::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, Temp_int_Variable_4) == 0x000020, "Member 'ActorChipPile_C_TurnIntoScrap::Temp_int_Variable_4' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_LessEqual_IntInt_ReturnValue_2) == 0x000024, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_LessEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_Add_IntInt_ReturnValue_2) == 0x000028, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_RandomIntegerInRange_ReturnValue) == 0x00002C, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_RandomIntegerInRange_ReturnValue_1) == 0x000030, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_RandomIntegerInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_Conv_IntToString_ReturnValue) == 0x000038, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_Conv_IntToString_ReturnValue_1) == 0x000048, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_Concat_StrStr_ReturnValue) == 0x000058, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000068, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_Conv_StringToName_ReturnValue) == 0x000078, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_Conv_StringToName_ReturnValue_1) == 0x000080, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_Conv_StringToName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_RandomIntegerInRange_ReturnValue_2) == 0x000088, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_RandomIntegerInRange_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_RandomInteger_ReturnValue) == 0x00008C, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_RandomInteger_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_Conv_IntToString_ReturnValue_2) == 0x000090, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_Conv_IntToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_Conv_IntToString_ReturnValue_3) == 0x0000A0, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_Conv_IntToString_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_Concat_StrStr_ReturnValue_2) == 0x0000B0, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_Concat_StrStr_ReturnValue_3) == 0x0000C0, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_Conv_StringToName_ReturnValue_2) == 0x0000D0, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_Conv_StringToName_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_Conv_StringToName_ReturnValue_3) == 0x0000D8, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_Conv_StringToName_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_RandomInteger_ReturnValue_1) == 0x0000E0, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_RandomInteger_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_RandomInteger_ReturnValue_2) == 0x0000E4, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_RandomInteger_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_Conv_IntToString_ReturnValue_4) == 0x0000E8, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_Conv_IntToString_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_Conv_IntToString_ReturnValue_5) == 0x0000F8, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_Conv_IntToString_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_Concat_StrStr_ReturnValue_4) == 0x000108, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_Concat_StrStr_ReturnValue_5) == 0x000118, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_Conv_StringToName_ReturnValue_4) == 0x000128, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_Conv_StringToName_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_Conv_StringToName_ReturnValue_5) == 0x000130, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_Conv_StringToName_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_RandomInteger_ReturnValue_3) == 0x000138, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_RandomInteger_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_RandomInteger_ReturnValue_4) == 0x00013C, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_RandomInteger_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_Conv_IntToString_ReturnValue_6) == 0x000140, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_Conv_IntToString_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_Conv_IntToString_ReturnValue_7) == 0x000150, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_Conv_IntToString_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_Concat_StrStr_ReturnValue_6) == 0x000160, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_Concat_StrStr_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_Concat_StrStr_ReturnValue_7) == 0x000170, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_Concat_StrStr_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_Conv_StringToName_ReturnValue_6) == 0x000180, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_Conv_StringToName_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_Conv_StringToName_ReturnValue_7) == 0x000188, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_Conv_StringToName_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000190, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_Add_VectorVector_ReturnValue) == 0x00019C, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_MakeTransform_ReturnValue) == 0x0001B0, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, K2Node_Select_Default) == 0x0001E0, "Member 'ActorChipPile_C_TurnIntoScrap::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x0001E8, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_propToObject_ReturnValue) == 0x0001F0, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_propToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_propToObject_foodData) == 0x0001F4, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_propToObject_foodData' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_propToObject_object) == 0x000210, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_propToObject_object' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_propToObject_isFood) == 0x000218, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_propToObject_isFood' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_propToObject_propData) == 0x000220, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_propToObject_propData' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1) == 0x0002A0, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_IsValidClass_ReturnValue) == 0x0002A8, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_FinishSpawningActor_ReturnValue) == 0x0002B0, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, K2Node_DynamicCast_AsInt_Player) == 0x0002B8, "Member 'ActorChipPile_C_TurnIntoScrap::K2Node_DynamicCast_AsInt_Player' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, K2Node_DynamicCast_bSuccess) == 0x0002C8, "Member 'ActorChipPile_C_TurnIntoScrap::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_FinishSpawningActor_ReturnValue_1) == 0x0002D0, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_FinishSpawningActor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_asProp_return) == 0x0002D8, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_asProp_return' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_2) == 0x0002E0, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_TurnIntoScrap, CallFunc_FinishSpawningActor_ReturnValue_2) == 0x0002E8, "Member 'ActorChipPile_C_TurnIntoScrap::CallFunc_FinishSpawningActor_ReturnValue_2' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.canBePutInContainer
// 0x0001 (0x0001 - 0x0000)
struct ActorChipPile_C_CanBePutInContainer final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ActorChipPile_C_CanBePutInContainer) == 0x000001, "Wrong alignment on ActorChipPile_C_CanBePutInContainer");
static_assert(sizeof(ActorChipPile_C_CanBePutInContainer) == 0x000001, "Wrong size on ActorChipPile_C_CanBePutInContainer");
static_assert(offsetof(ActorChipPile_C_CanBePutInContainer, Return) == 0x000000, "Member 'ActorChipPile_C_CanBePutInContainer::Return' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.asProp
// 0x0008 (0x0008 - 0x0000)
struct ActorChipPile_C_AsProp final
{
public:
	class AProp_C*                                Return;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ActorChipPile_C_AsProp) == 0x000008, "Wrong alignment on ActorChipPile_C_AsProp");
static_assert(sizeof(ActorChipPile_C_AsProp) == 0x000008, "Wrong size on ActorChipPile_C_AsProp");
static_assert(offsetof(ActorChipPile_C_AsProp, Return) == 0x000000, "Member 'ActorChipPile_C_AsProp::Return' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.canPickup
// 0x0001 (0x0001 - 0x0000)
struct ActorChipPile_C_CanPickup final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ActorChipPile_C_CanPickup) == 0x000001, "Wrong alignment on ActorChipPile_C_CanPickup");
static_assert(sizeof(ActorChipPile_C_CanPickup) == 0x000001, "Wrong size on ActorChipPile_C_CanPickup");
static_assert(offsetof(ActorChipPile_C_CanPickup, Return) == 0x000000, "Member 'ActorChipPile_C_CanPickup::Return' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.noRespawn
// 0x0002 (0x0002 - 0x0000)
struct ActorChipPile_C_NoRespawn final
{
public:
	bool                                          Param_NoRespawn;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ActorChipPile_C_NoRespawn) == 0x000001, "Wrong alignment on ActorChipPile_C_NoRespawn");
static_assert(sizeof(ActorChipPile_C_NoRespawn) == 0x000002, "Wrong size on ActorChipPile_C_NoRespawn");
static_assert(offsetof(ActorChipPile_C_NoRespawn, Param_NoRespawn) == 0x000000, "Member 'ActorChipPile_C_NoRespawn::Param_NoRespawn' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_NoRespawn, Return) == 0x000001, "Member 'ActorChipPile_C_NoRespawn::Return' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.lookAt
// 0x00B0 (0x00B0 - 0x0000)
struct ActorChipPile_C_LookAt final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          Return;                                            // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3555[0x7];                                     // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Text;                                              // 0x0098(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    boundObjectReplace;                                // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ActorChipPile_C_LookAt) == 0x000008, "Wrong alignment on ActorChipPile_C_LookAt");
static_assert(sizeof(ActorChipPile_C_LookAt) == 0x0000B0, "Wrong size on ActorChipPile_C_LookAt");
static_assert(offsetof(ActorChipPile_C_LookAt, Player) == 0x000000, "Member 'ActorChipPile_C_LookAt::Player' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_LookAt, Hit) == 0x000008, "Member 'ActorChipPile_C_LookAt::Hit' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_LookAt, Return) == 0x000090, "Member 'ActorChipPile_C_LookAt::Return' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_LookAt, Text) == 0x000098, "Member 'ActorChipPile_C_LookAt::Text' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_LookAt, boundObjectReplace) == 0x0000A8, "Member 'ActorChipPile_C_LookAt::boundObjectReplace' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.isButtonUsed
// 0x0001 (0x0001 - 0x0000)
struct ActorChipPile_C_IsButtonUsed final
{
public:
	bool                                          Failed;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ActorChipPile_C_IsButtonUsed) == 0x000001, "Wrong alignment on ActorChipPile_C_IsButtonUsed");
static_assert(sizeof(ActorChipPile_C_IsButtonUsed) == 0x000001, "Wrong size on ActorChipPile_C_IsButtonUsed");
static_assert(offsetof(ActorChipPile_C_IsButtonUsed, Failed) == 0x000000, "Member 'ActorChipPile_C_IsButtonUsed::Failed' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.getActionOptions
// 0x0058 (0x0058 - 0x0000)
struct ActorChipPile_C_GetActionOptions final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Component;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         Options;                                           // 0x0018(0x0010)(Parm, OutParm)
	TArray<Enum_interactionActions>               Options_enum;                                      // 0x0028(0x0010)(Parm, OutParm)
	TArray<class FText>                           OptionsNamesOverlay;                               // 0x0038(0x0010)(Parm, OutParm)
	TArray<Enum_interactionActions>               K2Node_MakeArray_Array;                            // 0x0048(0x0010)(ReferenceParm)
};
static_assert(alignof(ActorChipPile_C_GetActionOptions) == 0x000008, "Wrong alignment on ActorChipPile_C_GetActionOptions");
static_assert(sizeof(ActorChipPile_C_GetActionOptions) == 0x000058, "Wrong size on ActorChipPile_C_GetActionOptions");
static_assert(offsetof(ActorChipPile_C_GetActionOptions, Player) == 0x000000, "Member 'ActorChipPile_C_GetActionOptions::Player' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_GetActionOptions, Component) == 0x000008, "Member 'ActorChipPile_C_GetActionOptions::Component' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_GetActionOptions, Actor) == 0x000010, "Member 'ActorChipPile_C_GetActionOptions::Actor' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_GetActionOptions, Options) == 0x000018, "Member 'ActorChipPile_C_GetActionOptions::Options' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_GetActionOptions, Options_enum) == 0x000028, "Member 'ActorChipPile_C_GetActionOptions::Options_enum' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_GetActionOptions, OptionsNamesOverlay) == 0x000038, "Member 'ActorChipPile_C_GetActionOptions::OptionsNamesOverlay' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_GetActionOptions, K2Node_MakeArray_Array) == 0x000048, "Member 'ActorChipPile_C_GetActionOptions::K2Node_MakeArray_Array' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.setPath
// 0x0018 (0x0018 - 0x0000)
struct ActorChipPile_C_SetPath final
{
public:
	TArray<struct FVector>                        Path;                                              // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Return;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ActorChipPile_C_SetPath) == 0x000008, "Wrong alignment on ActorChipPile_C_SetPath");
static_assert(sizeof(ActorChipPile_C_SetPath) == 0x000018, "Wrong size on ActorChipPile_C_SetPath");
static_assert(offsetof(ActorChipPile_C_SetPath, Path) == 0x000000, "Member 'ActorChipPile_C_SetPath::Path' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_SetPath, Return) == 0x000010, "Member 'ActorChipPile_C_SetPath::Return' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.getOnlyKey
// 0x0010 (0x0010 - 0x0000)
struct ActorChipPile_C_GetOnlyKey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(ActorChipPile_C_GetOnlyKey) == 0x000008, "Wrong alignment on ActorChipPile_C_GetOnlyKey");
static_assert(sizeof(ActorChipPile_C_GetOnlyKey) == 0x000010, "Wrong size on ActorChipPile_C_GetOnlyKey");
static_assert(offsetof(ActorChipPile_C_GetOnlyKey, Key) == 0x000000, "Member 'ActorChipPile_C_GetOnlyKey::Key' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.processKeys
// 0x0001 (0x0001 - 0x0000)
struct ActorChipPile_C_ProcessKeys final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ActorChipPile_C_ProcessKeys) == 0x000001, "Wrong alignment on ActorChipPile_C_ProcessKeys");
static_assert(sizeof(ActorChipPile_C_ProcessKeys) == 0x000001, "Wrong size on ActorChipPile_C_ProcessKeys");
static_assert(offsetof(ActorChipPile_C_ProcessKeys, Return) == 0x000000, "Member 'ActorChipPile_C_ProcessKeys::Return' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.canBeUsedHold
// 0x0001 (0x0001 - 0x0000)
struct ActorChipPile_C_CanBeUsedHold final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ActorChipPile_C_CanBeUsedHold) == 0x000001, "Wrong alignment on ActorChipPile_C_CanBeUsedHold");
static_assert(sizeof(ActorChipPile_C_CanBeUsedHold) == 0x000001, "Wrong size on ActorChipPile_C_CanBeUsedHold");
static_assert(offsetof(ActorChipPile_C_CanBeUsedHold, Return) == 0x000000, "Member 'ActorChipPile_C_CanBeUsedHold::Return' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.GetKey
// 0x0010 (0x0010 - 0x0000)
struct ActorChipPile_C_GetKey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(ActorChipPile_C_GetKey) == 0x000008, "Wrong alignment on ActorChipPile_C_GetKey");
static_assert(sizeof(ActorChipPile_C_GetKey) == 0x000010, "Wrong size on ActorChipPile_C_GetKey");
static_assert(offsetof(ActorChipPile_C_GetKey, Key) == 0x000000, "Member 'ActorChipPile_C_GetKey::Key' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.toolboxFix
// 0x0010 (0x0010 - 0x0000)
struct ActorChipPile_C_ToolboxFix final
{
public:
	class AProp_toolbox_C*                        Toolbox;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ActorChipPile_C_ToolboxFix) == 0x000008, "Wrong alignment on ActorChipPile_C_ToolboxFix");
static_assert(sizeof(ActorChipPile_C_ToolboxFix) == 0x000010, "Wrong size on ActorChipPile_C_ToolboxFix");
static_assert(offsetof(ActorChipPile_C_ToolboxFix, Toolbox) == 0x000000, "Member 'ActorChipPile_C_ToolboxFix::Toolbox' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_ToolboxFix, Return) == 0x000008, "Member 'ActorChipPile_C_ToolboxFix::Return' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.gascanFuel
// 0x0010 (0x0010 - 0x0000)
struct ActorChipPile_C_GascanFuel final
{
public:
	class AProp_gascan_C*                         Gascan;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Fueled;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ActorChipPile_C_GascanFuel) == 0x000008, "Wrong alignment on ActorChipPile_C_GascanFuel");
static_assert(sizeof(ActorChipPile_C_GascanFuel) == 0x000010, "Wrong size on ActorChipPile_C_GascanFuel");
static_assert(offsetof(ActorChipPile_C_GascanFuel, Gascan) == 0x000000, "Member 'ActorChipPile_C_GascanFuel::Gascan' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_GascanFuel, Fueled) == 0x000008, "Member 'ActorChipPile_C_GascanFuel::Fueled' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.skipRadial
// 0x0001 (0x0001 - 0x0000)
struct ActorChipPile_C_SkipRadial final
{
public:
	bool                                          Skip;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ActorChipPile_C_SkipRadial) == 0x000001, "Wrong alignment on ActorChipPile_C_SkipRadial");
static_assert(sizeof(ActorChipPile_C_SkipRadial) == 0x000001, "Wrong size on ActorChipPile_C_SkipRadial");
static_assert(offsetof(ActorChipPile_C_SkipRadial, Skip) == 0x000000, "Member 'ActorChipPile_C_SkipRadial::Skip' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.skipPreDelete
// 0x0001 (0x0001 - 0x0000)
struct ActorChipPile_C_SkipPreDelete final
{
public:
	bool                                          Skip;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ActorChipPile_C_SkipPreDelete) == 0x000001, "Wrong alignment on ActorChipPile_C_SkipPreDelete");
static_assert(sizeof(ActorChipPile_C_SkipPreDelete) == 0x000001, "Wrong size on ActorChipPile_C_SkipPreDelete");
static_assert(offsetof(ActorChipPile_C_SkipPreDelete, Skip) == 0x000000, "Member 'ActorChipPile_C_SkipPreDelete::Skip' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.ignoreSave
// 0x0001 (0x0001 - 0x0000)
struct ActorChipPile_C_IgnoreSave final
{
public:
	bool                                          Param_IgnoreSave;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ActorChipPile_C_IgnoreSave) == 0x000001, "Wrong alignment on ActorChipPile_C_IgnoreSave");
static_assert(sizeof(ActorChipPile_C_IgnoreSave) == 0x000001, "Wrong size on ActorChipPile_C_IgnoreSave");
static_assert(offsetof(ActorChipPile_C_IgnoreSave, Param_IgnoreSave) == 0x000000, "Member 'ActorChipPile_C_IgnoreSave::Param_IgnoreSave' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.loadData
// 0x00E0 (0x00E0 - 0x0000)
struct ActorChipPile_C_LoadData final
{
public:
	struct FStruct_save                           Data;                                              // 0x0000(0x00C0)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x00C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3556[0x7];                                     // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_mInt                           CallFunc_Array_Get_Item;                           // 0x00C8(0x0010)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_1;                         // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ActorChipPile_C_LoadData) == 0x000010, "Wrong alignment on ActorChipPile_C_LoadData");
static_assert(sizeof(ActorChipPile_C_LoadData) == 0x0000E0, "Wrong size on ActorChipPile_C_LoadData");
static_assert(offsetof(ActorChipPile_C_LoadData, Data) == 0x000000, "Member 'ActorChipPile_C_LoadData::Data' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_LoadData, Return) == 0x0000C0, "Member 'ActorChipPile_C_LoadData::Return' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_LoadData, CallFunc_Array_Get_Item) == 0x0000C8, "Member 'ActorChipPile_C_LoadData::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_LoadData, CallFunc_Array_Get_Item_1) == 0x0000D8, "Member 'ActorChipPile_C_LoadData::CallFunc_Array_Get_Item_1' has a wrong offset!");

// Function actorChipPile.actorChipPile_C.getData
// 0x01F0 (0x01F0 - 0x0000)
struct ActorChipPile_C_GetData final
{
public:
	struct FStruct_save                           Data;                                              // 0x0000(0x00C0)(Parm, OutParm, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x00C0(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x00F8(0x0010)(ReferenceParm)
	struct FStruct_mInt                           K2Node_MakeStruct_struct_mInt;                     // 0x0108(0x0010)(HasGetValueTypeHash)
	TArray<struct FStruct_mInt>                   K2Node_MakeArray_Array_1;                          // 0x0118(0x0010)(ReferenceParm)
	uint8                                         Pad_3557[0x8];                                     // 0x0128(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_save                           K2Node_MakeStruct_struct_save;                     // 0x0130(0x00C0)(HasGetValueTypeHash)
};
static_assert(alignof(ActorChipPile_C_GetData) == 0x000010, "Wrong alignment on ActorChipPile_C_GetData");
static_assert(sizeof(ActorChipPile_C_GetData) == 0x0001F0, "Wrong size on ActorChipPile_C_GetData");
static_assert(offsetof(ActorChipPile_C_GetData, Data) == 0x000000, "Member 'ActorChipPile_C_GetData::Data' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_GetData, CallFunc_GetTransform_ReturnValue) == 0x0000C0, "Member 'ActorChipPile_C_GetData::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_GetData, CallFunc_GetObjectClass_ReturnValue) == 0x0000F0, "Member 'ActorChipPile_C_GetData::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_GetData, K2Node_MakeArray_Array) == 0x0000F8, "Member 'ActorChipPile_C_GetData::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_GetData, K2Node_MakeStruct_struct_mInt) == 0x000108, "Member 'ActorChipPile_C_GetData::K2Node_MakeStruct_struct_mInt' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_GetData, K2Node_MakeArray_Array_1) == 0x000118, "Member 'ActorChipPile_C_GetData::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(ActorChipPile_C_GetData, K2Node_MakeStruct_struct_save) == 0x000130, "Member 'ActorChipPile_C_GetData::K2Node_MakeStruct_struct_save' has a wrong offset!");

}

