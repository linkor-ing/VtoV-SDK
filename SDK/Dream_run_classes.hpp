#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Dream_run

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "DreamBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass dream_run.dream_run_C
// 0x0068 (0x02D8 - 0x0270)
class ADream_run_C final : public ADreamBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_Dream_run_C;                        // 0x0270(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   DoorFr;                                            // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    WallOrigin;                                        // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Roo;                                               // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Wok;                                               // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Plane1;                                            // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    WallMov;                                           // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Fin;                                               // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   DoorL;                                             // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   DoorR;                                             // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Plane;                                             // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         A;                                                 // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Spd;                                               // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_dream_run(int32 EntryPoint);
	void BndEvt__wok_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__fin_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ReceiveTick(float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"dream_run_C">();
	}
	static class ADream_run_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADream_run_C>();
	}
};
static_assert(alignof(ADream_run_C) == 0x000008, "Wrong alignment on ADream_run_C");
static_assert(sizeof(ADream_run_C) == 0x0002D8, "Wrong size on ADream_run_C");
static_assert(offsetof(ADream_run_C, UberGraphFrame_Dream_run_C) == 0x000270, "Member 'ADream_run_C::UberGraphFrame_Dream_run_C' has a wrong offset!");
static_assert(offsetof(ADream_run_C, DoorFr) == 0x000278, "Member 'ADream_run_C::DoorFr' has a wrong offset!");
static_assert(offsetof(ADream_run_C, WallOrigin) == 0x000280, "Member 'ADream_run_C::WallOrigin' has a wrong offset!");
static_assert(offsetof(ADream_run_C, Roo) == 0x000288, "Member 'ADream_run_C::Roo' has a wrong offset!");
static_assert(offsetof(ADream_run_C, PointLight) == 0x000290, "Member 'ADream_run_C::PointLight' has a wrong offset!");
static_assert(offsetof(ADream_run_C, Wok) == 0x000298, "Member 'ADream_run_C::Wok' has a wrong offset!");
static_assert(offsetof(ADream_run_C, Plane1) == 0x0002A0, "Member 'ADream_run_C::Plane1' has a wrong offset!");
static_assert(offsetof(ADream_run_C, WallMov) == 0x0002A8, "Member 'ADream_run_C::WallMov' has a wrong offset!");
static_assert(offsetof(ADream_run_C, Fin) == 0x0002B0, "Member 'ADream_run_C::Fin' has a wrong offset!");
static_assert(offsetof(ADream_run_C, DoorL) == 0x0002B8, "Member 'ADream_run_C::DoorL' has a wrong offset!");
static_assert(offsetof(ADream_run_C, DoorR) == 0x0002C0, "Member 'ADream_run_C::DoorR' has a wrong offset!");
static_assert(offsetof(ADream_run_C, Plane) == 0x0002C8, "Member 'ADream_run_C::Plane' has a wrong offset!");
static_assert(offsetof(ADream_run_C, A) == 0x0002D0, "Member 'ADream_run_C::A' has a wrong offset!");
static_assert(offsetof(ADream_run_C, Spd) == 0x0002D4, "Member 'ADream_run_C::Spd' has a wrong offset!");

}

