#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Int_objects

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "InputCore_structs.hpp"
#include "Enum_interactionActions_structs.hpp"


namespace SDK::Params
{

// Function int_objects.int_objects_C.ImpactDamage
// 0x00A8 (0x00A8 - 0x0000)
struct Int_objects_C_ImpactDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0004(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0090(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Impact;                                            // 0x0098(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_objects_C_ImpactDamage) == 0x000008, "Wrong alignment on Int_objects_C_ImpactDamage");
static_assert(sizeof(Int_objects_C_ImpactDamage) == 0x0000A8, "Wrong size on Int_objects_C_ImpactDamage");
static_assert(offsetof(Int_objects_C_ImpactDamage, Damage) == 0x000000, "Member 'Int_objects_C_ImpactDamage::Damage' has a wrong offset!");
static_assert(offsetof(Int_objects_C_ImpactDamage, Hit) == 0x000004, "Member 'Int_objects_C_ImpactDamage::Hit' has a wrong offset!");
static_assert(offsetof(Int_objects_C_ImpactDamage, Actor) == 0x000090, "Member 'Int_objects_C_ImpactDamage::Actor' has a wrong offset!");
static_assert(offsetof(Int_objects_C_ImpactDamage, Impact) == 0x000098, "Member 'Int_objects_C_ImpactDamage::Impact' has a wrong offset!");

// Function int_objects.int_objects_C.toolboxFix
// 0x0010 (0x0010 - 0x0000)
struct Int_objects_C_ToolboxFix final
{
public:
	class AProp_toolbox_C*                        Toolbox;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Int_objects_C_ToolboxFix) == 0x000008, "Wrong alignment on Int_objects_C_ToolboxFix");
static_assert(sizeof(Int_objects_C_ToolboxFix) == 0x000010, "Wrong size on Int_objects_C_ToolboxFix");
static_assert(offsetof(Int_objects_C_ToolboxFix, Toolbox) == 0x000000, "Member 'Int_objects_C_ToolboxFix::Toolbox' has a wrong offset!");
static_assert(offsetof(Int_objects_C_ToolboxFix, Return) == 0x000008, "Member 'Int_objects_C_ToolboxFix::Return' has a wrong offset!");

// Function int_objects.int_objects_C.GetKey
// 0x0010 (0x0010 - 0x0000)
struct Int_objects_C_GetKey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_objects_C_GetKey) == 0x000008, "Wrong alignment on Int_objects_C_GetKey");
static_assert(sizeof(Int_objects_C_GetKey) == 0x000010, "Wrong size on Int_objects_C_GetKey");
static_assert(offsetof(Int_objects_C_GetKey, Key) == 0x000000, "Member 'Int_objects_C_GetKey::Key' has a wrong offset!");

// Function int_objects.int_objects_C.enterWater
// 0x0008 (0x0008 - 0x0000)
struct Int_objects_C_EnterWater final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_objects_C_EnterWater) == 0x000008, "Wrong alignment on Int_objects_C_EnterWater");
static_assert(sizeof(Int_objects_C_EnterWater) == 0x000008, "Wrong size on Int_objects_C_EnterWater");
static_assert(offsetof(Int_objects_C_EnterWater, Water) == 0x000000, "Member 'Int_objects_C_EnterWater::Water' has a wrong offset!");

// Function int_objects.int_objects_C.leaveWater
// 0x0008 (0x0008 - 0x0000)
struct Int_objects_C_LeaveWater final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_objects_C_LeaveWater) == 0x000008, "Wrong alignment on Int_objects_C_LeaveWater");
static_assert(sizeof(Int_objects_C_LeaveWater) == 0x000008, "Wrong size on Int_objects_C_LeaveWater");
static_assert(offsetof(Int_objects_C_LeaveWater, Water) == 0x000000, "Member 'Int_objects_C_LeaveWater::Water' has a wrong offset!");

// Function int_objects.int_objects_C.enterWaterOrigin
// 0x0008 (0x0008 - 0x0000)
struct Int_objects_C_EnterWaterOrigin final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_objects_C_EnterWaterOrigin) == 0x000008, "Wrong alignment on Int_objects_C_EnterWaterOrigin");
static_assert(sizeof(Int_objects_C_EnterWaterOrigin) == 0x000008, "Wrong size on Int_objects_C_EnterWaterOrigin");
static_assert(offsetof(Int_objects_C_EnterWaterOrigin, Water) == 0x000000, "Member 'Int_objects_C_EnterWaterOrigin::Water' has a wrong offset!");

// Function int_objects.int_objects_C.leaveWaterOrigin
// 0x0008 (0x0008 - 0x0000)
struct Int_objects_C_LeaveWaterOrigin final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_objects_C_LeaveWaterOrigin) == 0x000008, "Wrong alignment on Int_objects_C_LeaveWaterOrigin");
static_assert(sizeof(Int_objects_C_LeaveWaterOrigin) == 0x000008, "Wrong size on Int_objects_C_LeaveWaterOrigin");
static_assert(offsetof(Int_objects_C_LeaveWaterOrigin, Water) == 0x000000, "Member 'Int_objects_C_LeaveWaterOrigin::Water' has a wrong offset!");

// Function int_objects.int_objects_C.virus
// 0x0001 (0x0001 - 0x0000)
struct Int_objects_C_Virus final
{
public:
	bool                                          Activate;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Int_objects_C_Virus) == 0x000001, "Wrong alignment on Int_objects_C_Virus");
static_assert(sizeof(Int_objects_C_Virus) == 0x000001, "Wrong size on Int_objects_C_Virus");
static_assert(offsetof(Int_objects_C_Virus, Activate) == 0x000000, "Member 'Int_objects_C_Virus::Activate' has a wrong offset!");

// Function int_objects.int_objects_C.setPropProps
// 0x0003 (0x0003 - 0x0000)
struct Int_objects_C_SetPropProps final
{
public:
	bool                                          Static;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Frozen;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Active;                                            // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Int_objects_C_SetPropProps) == 0x000001, "Wrong alignment on Int_objects_C_SetPropProps");
static_assert(sizeof(Int_objects_C_SetPropProps) == 0x000003, "Wrong size on Int_objects_C_SetPropProps");
static_assert(offsetof(Int_objects_C_SetPropProps, Static) == 0x000000, "Member 'Int_objects_C_SetPropProps::Static' has a wrong offset!");
static_assert(offsetof(Int_objects_C_SetPropProps, Frozen) == 0x000001, "Member 'Int_objects_C_SetPropProps::Frozen' has a wrong offset!");
static_assert(offsetof(Int_objects_C_SetPropProps, Active) == 0x000002, "Member 'Int_objects_C_SetPropProps::Active' has a wrong offset!");

// Function int_objects.int_objects_C.addDamage
// 0x00A8 (0x00A8 - 0x0000)
struct Int_objects_C_AddDamage final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x000C(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                Impact;                                            // 0x0094(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipSetting;                                       // 0x00A0(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Int_objects_C_AddDamage) == 0x000008, "Wrong alignment on Int_objects_C_AddDamage");
static_assert(sizeof(Int_objects_C_AddDamage) == 0x0000A8, "Wrong size on Int_objects_C_AddDamage");
static_assert(offsetof(Int_objects_C_AddDamage, Actor) == 0x000000, "Member 'Int_objects_C_AddDamage::Actor' has a wrong offset!");
static_assert(offsetof(Int_objects_C_AddDamage, Damage) == 0x000008, "Member 'Int_objects_C_AddDamage::Damage' has a wrong offset!");
static_assert(offsetof(Int_objects_C_AddDamage, Hit) == 0x00000C, "Member 'Int_objects_C_AddDamage::Hit' has a wrong offset!");
static_assert(offsetof(Int_objects_C_AddDamage, Impact) == 0x000094, "Member 'Int_objects_C_AddDamage::Impact' has a wrong offset!");
static_assert(offsetof(Int_objects_C_AddDamage, SkipSetting) == 0x0000A0, "Member 'Int_objects_C_AddDamage::SkipSetting' has a wrong offset!");

// Function int_objects.int_objects_C.canBeUsedHold
// 0x0001 (0x0001 - 0x0000)
struct Int_objects_C_CanBeUsedHold final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Int_objects_C_CanBeUsedHold) == 0x000001, "Wrong alignment on Int_objects_C_CanBeUsedHold");
static_assert(sizeof(Int_objects_C_CanBeUsedHold) == 0x000001, "Wrong size on Int_objects_C_CanBeUsedHold");
static_assert(offsetof(Int_objects_C_CanBeUsedHold, Return) == 0x000000, "Member 'Int_objects_C_CanBeUsedHold::Return' has a wrong offset!");

// Function int_objects.int_objects_C.setKey
// 0x0010 (0x0010 - 0x0000)
struct Int_objects_C_SetKey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_objects_C_SetKey) == 0x000008, "Wrong alignment on Int_objects_C_SetKey");
static_assert(sizeof(Int_objects_C_SetKey) == 0x000010, "Wrong size on Int_objects_C_SetKey");
static_assert(offsetof(Int_objects_C_SetKey, Key) == 0x000000, "Member 'Int_objects_C_SetKey::Key' has a wrong offset!");

// Function int_objects.int_objects_C.processKeys
// 0x0001 (0x0001 - 0x0000)
struct Int_objects_C_ProcessKeys final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Int_objects_C_ProcessKeys) == 0x000001, "Wrong alignment on Int_objects_C_ProcessKeys");
static_assert(sizeof(Int_objects_C_ProcessKeys) == 0x000001, "Wrong size on Int_objects_C_ProcessKeys");
static_assert(offsetof(Int_objects_C_ProcessKeys, Return) == 0x000000, "Member 'Int_objects_C_ProcessKeys::Return' has a wrong offset!");

// Function int_objects.int_objects_C.getOnlyKey
// 0x0010 (0x0010 - 0x0000)
struct Int_objects_C_GetOnlyKey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_objects_C_GetOnlyKey) == 0x000008, "Wrong alignment on Int_objects_C_GetOnlyKey");
static_assert(sizeof(Int_objects_C_GetOnlyKey) == 0x000010, "Wrong size on Int_objects_C_GetOnlyKey");
static_assert(offsetof(Int_objects_C_GetOnlyKey, Key) == 0x000000, "Member 'Int_objects_C_GetOnlyKey::Key' has a wrong offset!");

// Function int_objects.int_objects_C.setPath
// 0x0018 (0x0018 - 0x0000)
struct Int_objects_C_SetPath final
{
public:
	TArray<struct FVector>                        Path;                                              // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Return;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Int_objects_C_SetPath) == 0x000008, "Wrong alignment on Int_objects_C_SetPath");
static_assert(sizeof(Int_objects_C_SetPath) == 0x000018, "Wrong size on Int_objects_C_SetPath");
static_assert(offsetof(Int_objects_C_SetPath, Path) == 0x000000, "Member 'Int_objects_C_SetPath::Path' has a wrong offset!");
static_assert(offsetof(Int_objects_C_SetPath, Return) == 0x000010, "Member 'Int_objects_C_SetPath::Return' has a wrong offset!");

// Function int_objects.int_objects_C.steppedOn
// 0x0090 (0x0090 - 0x0000)
struct Int_objects_C_SteppedOn final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Int_objects_C_SteppedOn) == 0x000008, "Wrong alignment on Int_objects_C_SteppedOn");
static_assert(sizeof(Int_objects_C_SteppedOn) == 0x000090, "Wrong size on Int_objects_C_SteppedOn");
static_assert(offsetof(Int_objects_C_SteppedOn, Player) == 0x000000, "Member 'Int_objects_C_SteppedOn::Player' has a wrong offset!");
static_assert(offsetof(Int_objects_C_SteppedOn, Hit) == 0x000008, "Member 'Int_objects_C_SteppedOn::Hit' has a wrong offset!");

// Function int_objects.int_objects_C.fireDamage
// 0x0004 (0x0004 - 0x0000)
struct Int_objects_C_FireDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_objects_C_FireDamage) == 0x000004, "Wrong alignment on Int_objects_C_FireDamage");
static_assert(sizeof(Int_objects_C_FireDamage) == 0x000004, "Wrong size on Int_objects_C_FireDamage");
static_assert(offsetof(Int_objects_C_FireDamage, Damage) == 0x000000, "Member 'Int_objects_C_FireDamage::Damage' has a wrong offset!");

// Function int_objects.int_objects_C.ignite
// 0x0004 (0x0004 - 0x0000)
struct Int_objects_C_Ignite final
{
public:
	float                                         Fuel;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_objects_C_Ignite) == 0x000004, "Wrong alignment on Int_objects_C_Ignite");
static_assert(sizeof(Int_objects_C_Ignite) == 0x000004, "Wrong size on Int_objects_C_Ignite");
static_assert(offsetof(Int_objects_C_Ignite, Fuel) == 0x000000, "Member 'Int_objects_C_Ignite::Fuel' has a wrong offset!");

// Function int_objects.int_objects_C.receivedPhyiscsDamage
// 0x008C (0x008C - 0x0000)
struct Int_objects_C_ReceivedPhyiscsDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hot;                                               // 0x0004(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Int_objects_C_ReceivedPhyiscsDamage) == 0x000004, "Wrong alignment on Int_objects_C_ReceivedPhyiscsDamage");
static_assert(sizeof(Int_objects_C_ReceivedPhyiscsDamage) == 0x00008C, "Wrong size on Int_objects_C_ReceivedPhyiscsDamage");
static_assert(offsetof(Int_objects_C_ReceivedPhyiscsDamage, Damage) == 0x000000, "Member 'Int_objects_C_ReceivedPhyiscsDamage::Damage' has a wrong offset!");
static_assert(offsetof(Int_objects_C_ReceivedPhyiscsDamage, Hot) == 0x000004, "Member 'Int_objects_C_ReceivedPhyiscsDamage::Hot' has a wrong offset!");

// Function int_objects.int_objects_C.getActionOptions
// 0x0050 (0x0050 - 0x0000)
struct Int_objects_C_GetActionOptions final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Component;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         Options;                                           // 0x0018(0x0010)(Parm, OutParm)
	TArray<Enum_interactionActions>               Options_enum;                                      // 0x0028(0x0010)(Parm, OutParm)
	TArray<class FText>                           OptionsNamesOverlay;                               // 0x0038(0x0010)(Parm, OutParm)
	uint8                                         Number;                                            // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_objects_C_GetActionOptions) == 0x000008, "Wrong alignment on Int_objects_C_GetActionOptions");
static_assert(sizeof(Int_objects_C_GetActionOptions) == 0x000050, "Wrong size on Int_objects_C_GetActionOptions");
static_assert(offsetof(Int_objects_C_GetActionOptions, Player) == 0x000000, "Member 'Int_objects_C_GetActionOptions::Player' has a wrong offset!");
static_assert(offsetof(Int_objects_C_GetActionOptions, Component) == 0x000008, "Member 'Int_objects_C_GetActionOptions::Component' has a wrong offset!");
static_assert(offsetof(Int_objects_C_GetActionOptions, Actor) == 0x000010, "Member 'Int_objects_C_GetActionOptions::Actor' has a wrong offset!");
static_assert(offsetof(Int_objects_C_GetActionOptions, Options) == 0x000018, "Member 'Int_objects_C_GetActionOptions::Options' has a wrong offset!");
static_assert(offsetof(Int_objects_C_GetActionOptions, Options_enum) == 0x000028, "Member 'Int_objects_C_GetActionOptions::Options_enum' has a wrong offset!");
static_assert(offsetof(Int_objects_C_GetActionOptions, OptionsNamesOverlay) == 0x000038, "Member 'Int_objects_C_GetActionOptions::OptionsNamesOverlay' has a wrong offset!");
static_assert(offsetof(Int_objects_C_GetActionOptions, Number) == 0x000048, "Member 'Int_objects_C_GetActionOptions::Number' has a wrong offset!");

// Function int_objects.int_objects_C.actionOptionIndex
// 0x0098 (0x0098 - 0x0000)
struct Int_objects_C_ActionOptionIndex final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	Enum_interactionActions                       Action;                                            // 0x0090(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_objects_C_ActionOptionIndex) == 0x000008, "Wrong alignment on Int_objects_C_ActionOptionIndex");
static_assert(sizeof(Int_objects_C_ActionOptionIndex) == 0x000098, "Wrong size on Int_objects_C_ActionOptionIndex");
static_assert(offsetof(Int_objects_C_ActionOptionIndex, Player) == 0x000000, "Member 'Int_objects_C_ActionOptionIndex::Player' has a wrong offset!");
static_assert(offsetof(Int_objects_C_ActionOptionIndex, Hit) == 0x000008, "Member 'Int_objects_C_ActionOptionIndex::Hit' has a wrong offset!");
static_assert(offsetof(Int_objects_C_ActionOptionIndex, Action) == 0x000090, "Member 'Int_objects_C_ActionOptionIndex::Action' has a wrong offset!");

// Function int_objects.int_objects_C.playerHandUse_RMB
// 0x0008 (0x0008 - 0x0000)
struct Int_objects_C_PlayerHandUse_RMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_objects_C_PlayerHandUse_RMB) == 0x000008, "Wrong alignment on Int_objects_C_PlayerHandUse_RMB");
static_assert(sizeof(Int_objects_C_PlayerHandUse_RMB) == 0x000008, "Wrong size on Int_objects_C_PlayerHandUse_RMB");
static_assert(offsetof(Int_objects_C_PlayerHandUse_RMB, Player) == 0x000000, "Member 'Int_objects_C_PlayerHandUse_RMB::Player' has a wrong offset!");

// Function int_objects.int_objects_C.playerHandUse_LMB
// 0x0008 (0x0008 - 0x0000)
struct Int_objects_C_PlayerHandUse_LMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_objects_C_PlayerHandUse_LMB) == 0x000008, "Wrong alignment on Int_objects_C_PlayerHandUse_LMB");
static_assert(sizeof(Int_objects_C_PlayerHandUse_LMB) == 0x000008, "Wrong size on Int_objects_C_PlayerHandUse_LMB");
static_assert(offsetof(Int_objects_C_PlayerHandUse_LMB, Player) == 0x000000, "Member 'Int_objects_C_PlayerHandUse_LMB::Player' has a wrong offset!");

// Function int_objects.int_objects_C.exploded
// 0x0010 (0x0010 - 0x0000)
struct Int_objects_C_Exploded final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_objects_C_Exploded) == 0x000004, "Wrong alignment on Int_objects_C_Exploded");
static_assert(sizeof(Int_objects_C_Exploded) == 0x000010, "Wrong size on Int_objects_C_Exploded");
static_assert(offsetof(Int_objects_C_Exploded, Damage) == 0x000000, "Member 'Int_objects_C_Exploded::Damage' has a wrong offset!");
static_assert(offsetof(Int_objects_C_Exploded, Location) == 0x000004, "Member 'Int_objects_C_Exploded::Location' has a wrong offset!");

// Function int_objects.int_objects_C.playerHandRelease_RMB
// 0x0008 (0x0008 - 0x0000)
struct Int_objects_C_PlayerHandRelease_RMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_objects_C_PlayerHandRelease_RMB) == 0x000008, "Wrong alignment on Int_objects_C_PlayerHandRelease_RMB");
static_assert(sizeof(Int_objects_C_PlayerHandRelease_RMB) == 0x000008, "Wrong size on Int_objects_C_PlayerHandRelease_RMB");
static_assert(offsetof(Int_objects_C_PlayerHandRelease_RMB, Player) == 0x000000, "Member 'Int_objects_C_PlayerHandRelease_RMB::Player' has a wrong offset!");

// Function int_objects.int_objects_C.playerHandRelease_LMB
// 0x0008 (0x0008 - 0x0000)
struct Int_objects_C_PlayerHandRelease_LMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_objects_C_PlayerHandRelease_LMB) == 0x000008, "Wrong alignment on Int_objects_C_PlayerHandRelease_LMB");
static_assert(sizeof(Int_objects_C_PlayerHandRelease_LMB) == 0x000008, "Wrong size on Int_objects_C_PlayerHandRelease_LMB");
static_assert(offsetof(Int_objects_C_PlayerHandRelease_LMB, Player) == 0x000000, "Member 'Int_objects_C_PlayerHandRelease_LMB::Player' has a wrong offset!");

// Function int_objects.int_objects_C.playerHandMouseWheel
// 0x0010 (0x0010 - 0x0000)
struct Int_objects_C_PlayerHandMouseWheel final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WheelDelta;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_objects_C_PlayerHandMouseWheel) == 0x000008, "Wrong alignment on Int_objects_C_PlayerHandMouseWheel");
static_assert(sizeof(Int_objects_C_PlayerHandMouseWheel) == 0x000010, "Wrong size on Int_objects_C_PlayerHandMouseWheel");
static_assert(offsetof(Int_objects_C_PlayerHandMouseWheel, Player) == 0x000000, "Member 'Int_objects_C_PlayerHandMouseWheel::Player' has a wrong offset!");
static_assert(offsetof(Int_objects_C_PlayerHandMouseWheel, WheelDelta) == 0x000008, "Member 'Int_objects_C_PlayerHandMouseWheel::WheelDelta' has a wrong offset!");

// Function int_objects.int_objects_C.playerHandMouse
// 0x0010 (0x0010 - 0x0000)
struct Int_objects_C_PlayerHandMouse final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Mouse;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_objects_C_PlayerHandMouse) == 0x000008, "Wrong alignment on Int_objects_C_PlayerHandMouse");
static_assert(sizeof(Int_objects_C_PlayerHandMouse) == 0x000010, "Wrong size on Int_objects_C_PlayerHandMouse");
static_assert(offsetof(Int_objects_C_PlayerHandMouse, Player) == 0x000000, "Member 'Int_objects_C_PlayerHandMouse::Player' has a wrong offset!");
static_assert(offsetof(Int_objects_C_PlayerHandMouse, Mouse) == 0x000008, "Member 'Int_objects_C_PlayerHandMouse::Mouse' has a wrong offset!");

// Function int_objects.int_objects_C.playerHandAnyKey
// 0x0028 (0x0028 - 0x0000)
struct Int_objects_C_PlayerHandAnyKey final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   Key;                                               // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Pressed;                                           // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Int_objects_C_PlayerHandAnyKey) == 0x000008, "Wrong alignment on Int_objects_C_PlayerHandAnyKey");
static_assert(sizeof(Int_objects_C_PlayerHandAnyKey) == 0x000028, "Wrong size on Int_objects_C_PlayerHandAnyKey");
static_assert(offsetof(Int_objects_C_PlayerHandAnyKey, Player) == 0x000000, "Member 'Int_objects_C_PlayerHandAnyKey::Player' has a wrong offset!");
static_assert(offsetof(Int_objects_C_PlayerHandAnyKey, Key) == 0x000008, "Member 'Int_objects_C_PlayerHandAnyKey::Key' has a wrong offset!");
static_assert(offsetof(Int_objects_C_PlayerHandAnyKey, Pressed) == 0x000020, "Member 'Int_objects_C_PlayerHandAnyKey::Pressed' has a wrong offset!");

// Function int_objects.int_objects_C.addTemperature
// 0x0004 (0x0004 - 0x0000)
struct Int_objects_C_AddTemperature final
{
public:
	float                                         Temperature;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_objects_C_AddTemperature) == 0x000004, "Wrong alignment on Int_objects_C_AddTemperature");
static_assert(sizeof(Int_objects_C_AddTemperature) == 0x000004, "Wrong size on Int_objects_C_AddTemperature");
static_assert(offsetof(Int_objects_C_AddTemperature, Temperature) == 0x000000, "Member 'Int_objects_C_AddTemperature::Temperature' has a wrong offset!");

// Function int_objects.int_objects_C.accumulateTemperature
// 0x0008 (0x0008 - 0x0000)
struct Int_objects_C_AccumulateTemperature final
{
public:
	float                                         Temperature;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_objects_C_AccumulateTemperature) == 0x000004, "Wrong alignment on Int_objects_C_AccumulateTemperature");
static_assert(sizeof(Int_objects_C_AccumulateTemperature) == 0x000008, "Wrong size on Int_objects_C_AccumulateTemperature");
static_assert(offsetof(Int_objects_C_AccumulateTemperature, Temperature) == 0x000000, "Member 'Int_objects_C_AccumulateTemperature::Temperature' has a wrong offset!");
static_assert(offsetof(Int_objects_C_AccumulateTemperature, Speed) == 0x000004, "Member 'Int_objects_C_AccumulateTemperature::Speed' has a wrong offset!");

// Function int_objects.int_objects_C.ActionName
// 0x00A0 (0x00A0 - 0x0000)
struct Int_objects_C_ActionName final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class FString                                 Param_Name;                                        // 0x0090(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_objects_C_ActionName) == 0x000008, "Wrong alignment on Int_objects_C_ActionName");
static_assert(sizeof(Int_objects_C_ActionName) == 0x0000A0, "Wrong size on Int_objects_C_ActionName");
static_assert(offsetof(Int_objects_C_ActionName, Player) == 0x000000, "Member 'Int_objects_C_ActionName::Player' has a wrong offset!");
static_assert(offsetof(Int_objects_C_ActionName, Hit) == 0x000008, "Member 'Int_objects_C_ActionName::Hit' has a wrong offset!");
static_assert(offsetof(Int_objects_C_ActionName, Param_Name) == 0x000090, "Member 'Int_objects_C_ActionName::Param_Name' has a wrong offset!");

// Function int_objects.int_objects_C.stepped
// 0x0004 (0x0004 - 0x0000)
struct Int_objects_C_Stepped final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_objects_C_Stepped) == 0x000004, "Wrong alignment on Int_objects_C_Stepped");
static_assert(sizeof(Int_objects_C_Stepped) == 0x000004, "Wrong size on Int_objects_C_Stepped");
static_assert(offsetof(Int_objects_C_Stepped, Volume) == 0x000000, "Member 'Int_objects_C_Stepped::Volume' has a wrong offset!");

// Function int_objects.int_objects_C.playerLookAway
// 0x0008 (0x0008 - 0x0000)
struct Int_objects_C_PlayerLookAway final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_objects_C_PlayerLookAway) == 0x000008, "Wrong alignment on Int_objects_C_PlayerLookAway");
static_assert(sizeof(Int_objects_C_PlayerLookAway) == 0x000008, "Wrong size on Int_objects_C_PlayerLookAway");
static_assert(offsetof(Int_objects_C_PlayerLookAway, Player) == 0x000000, "Member 'Int_objects_C_PlayerLookAway::Player' has a wrong offset!");

// Function int_objects.int_objects_C.reachedByExplosion
// 0x0010 (0x0010 - 0x0000)
struct Int_objects_C_ReachedByExplosion final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_objects_C_ReachedByExplosion) == 0x000004, "Wrong alignment on Int_objects_C_ReachedByExplosion");
static_assert(sizeof(Int_objects_C_ReachedByExplosion) == 0x000010, "Wrong size on Int_objects_C_ReachedByExplosion");
static_assert(offsetof(Int_objects_C_ReachedByExplosion, Location) == 0x000000, "Member 'Int_objects_C_ReachedByExplosion::Location' has a wrong offset!");
static_assert(offsetof(Int_objects_C_ReachedByExplosion, Damage) == 0x00000C, "Member 'Int_objects_C_ReachedByExplosion::Damage' has a wrong offset!");

// Function int_objects.int_objects_C.slice
// 0x0001 (0x0001 - 0x0000)
struct Int_objects_C_Slice final
{
public:
	bool                                          Clean;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Int_objects_C_Slice) == 0x000001, "Wrong alignment on Int_objects_C_Slice");
static_assert(sizeof(Int_objects_C_Slice) == 0x000001, "Wrong size on Int_objects_C_Slice");
static_assert(offsetof(Int_objects_C_Slice, Clean) == 0x000000, "Member 'Int_objects_C_Slice::Clean' has a wrong offset!");

// Function int_objects.int_objects_C.gascanFuel
// 0x0010 (0x0010 - 0x0000)
struct Int_objects_C_GascanFuel final
{
public:
	class AProp_gascan_C*                         Gascan;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Fueled;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Int_objects_C_GascanFuel) == 0x000008, "Wrong alignment on Int_objects_C_GascanFuel");
static_assert(sizeof(Int_objects_C_GascanFuel) == 0x000010, "Wrong size on Int_objects_C_GascanFuel");
static_assert(offsetof(Int_objects_C_GascanFuel, Gascan) == 0x000000, "Member 'Int_objects_C_GascanFuel::Gascan' has a wrong offset!");
static_assert(offsetof(Int_objects_C_GascanFuel, Fueled) == 0x000008, "Member 'Int_objects_C_GascanFuel::Fueled' has a wrong offset!");

// Function int_objects.int_objects_C.playerUsedOn
// 0x0090 (0x0090 - 0x0000)
struct Int_objects_C_PlayerUsedOn final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Int_objects_C_PlayerUsedOn) == 0x000008, "Wrong alignment on Int_objects_C_PlayerUsedOn");
static_assert(sizeof(Int_objects_C_PlayerUsedOn) == 0x000090, "Wrong size on Int_objects_C_PlayerUsedOn");
static_assert(offsetof(Int_objects_C_PlayerUsedOn, Player) == 0x000000, "Member 'Int_objects_C_PlayerUsedOn::Player' has a wrong offset!");
static_assert(offsetof(Int_objects_C_PlayerUsedOn, Hit) == 0x000008, "Member 'Int_objects_C_PlayerUsedOn::Hit' has a wrong offset!");

// Function int_objects.int_objects_C.hooked
// 0x0008 (0x0008 - 0x0000)
struct Int_objects_C_Hooked final
{
public:
	class AHook_C*                                Hook;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_objects_C_Hooked) == 0x000008, "Wrong alignment on Int_objects_C_Hooked");
static_assert(sizeof(Int_objects_C_Hooked) == 0x000008, "Wrong size on Int_objects_C_Hooked");
static_assert(offsetof(Int_objects_C_Hooked, Hook) == 0x000000, "Member 'Int_objects_C_Hooked::Hook' has a wrong offset!");

// Function int_objects.int_objects_C.skipRadial
// 0x0001 (0x0001 - 0x0000)
struct Int_objects_C_SkipRadial final
{
public:
	bool                                          Skip;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Int_objects_C_SkipRadial) == 0x000001, "Wrong alignment on Int_objects_C_SkipRadial");
static_assert(sizeof(Int_objects_C_SkipRadial) == 0x000001, "Wrong size on Int_objects_C_SkipRadial");
static_assert(offsetof(Int_objects_C_SkipRadial, Skip) == 0x000000, "Member 'Int_objects_C_SkipRadial::Skip' has a wrong offset!");

// Function int_objects.int_objects_C.cleanSponge
// 0x0010 (0x0010 - 0x0000)
struct Int_objects_C_CleanSponge final
{
public:
	float                                         Clean;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          Player;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_objects_C_CleanSponge) == 0x000008, "Wrong alignment on Int_objects_C_CleanSponge");
static_assert(sizeof(Int_objects_C_CleanSponge) == 0x000010, "Wrong size on Int_objects_C_CleanSponge");
static_assert(offsetof(Int_objects_C_CleanSponge, Clean) == 0x000000, "Member 'Int_objects_C_CleanSponge::Clean' has a wrong offset!");
static_assert(offsetof(Int_objects_C_CleanSponge, Player) == 0x000008, "Member 'Int_objects_C_CleanSponge::Player' has a wrong offset!");

// Function int_objects.int_objects_C.hookTension
// 0x0008 (0x0008 - 0x0000)
struct Int_objects_C_HookTension final
{
public:
	class AHook_C*                                Hook;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_objects_C_HookTension) == 0x000008, "Wrong alignment on Int_objects_C_HookTension");
static_assert(sizeof(Int_objects_C_HookTension) == 0x000008, "Wrong size on Int_objects_C_HookTension");
static_assert(offsetof(Int_objects_C_HookTension, Hook) == 0x000000, "Member 'Int_objects_C_HookTension::Hook' has a wrong offset!");

// Function int_objects.int_objects_C.getPriceMultiplier
// 0x0004 (0x0004 - 0x0000)
struct Int_objects_C_GetPriceMultiplier final
{
public:
	float                                         PriceMult;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_objects_C_GetPriceMultiplier) == 0x000004, "Wrong alignment on Int_objects_C_GetPriceMultiplier");
static_assert(sizeof(Int_objects_C_GetPriceMultiplier) == 0x000004, "Wrong size on Int_objects_C_GetPriceMultiplier");
static_assert(offsetof(Int_objects_C_GetPriceMultiplier, PriceMult) == 0x000000, "Member 'Int_objects_C_GetPriceMultiplier::PriceMult' has a wrong offset!");

}

