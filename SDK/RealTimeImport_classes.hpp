#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RealTimeImport

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "RealTimeImport_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class RealTimeImport.FileFunctionsRealTimeImport
// 0x0018 (0x0040 - 0x0028)
class UFileFunctionsRealTimeImport final : public UObject
{
public:
	uint8                                         Pad_F81[0x18];                                     // 0x0028(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void AddBytesToFile(ERTIDirectoryType DirectoryType, const class FString& FilePath, const TArray<uint8>& bytes, bool* Success);
	static TArray<uint8> Base64Decode(const class FString& base64EncodedString);
	static class FString Base64Encode(const TArray<uint8>& bytes);
	static TArray<uint8> base64StringToBytes(ERTIDirectoryType DirectoryType, const class FString& base64String, bool* Success);
	static void bytesToBase64String(const TArray<uint8>& bytes, class FString* base64String);
	static bool CreateDirectory(ERTIDirectoryType DirectoryType, const class FString& Path);
	static bool DeleteDirectory(ERTIDirectoryType DirectoryType, const class FString& FilePath);
	static bool DeleteFile(ERTIDirectoryType DirectoryType, const class FString& FilePath);
	static bool DirectoryExists(ERTIDirectoryType DirectoryType, const class FString& Path);
	static bool FileExists(ERTIDirectoryType DirectoryType, const class FString& FilePath);
	static int64 FileSize(ERTIDirectoryType DirectoryType, const class FString& FilePath);
	static void FileToBase64String(ERTIDirectoryType DirectoryType, const class FString& FilePath, bool* Success, class FString* base64String, class FString* Filename);
	static struct FDateTime GetAccessTimeStamp(ERTIDirectoryType DirectoryType, const class FString& FilePath);
	static class UFileFunctionsRealTimeImport* GetFileFunctionsRealTimeImport();
	static class FString GetFilenameOnDisk(ERTIDirectoryType DirectoryType, const class FString& FilePath);
	static void GetMD5FromFile(ERTIDirectoryType DirectoryType, const class FString& FilePath, bool* Success, class FString* Md5);
	static struct FDateTime GetTimeStamp(ERTIDirectoryType DirectoryType, const class FString& FilePath);
	static bool IsReadOnly(ERTIDirectoryType DirectoryType, const class FString& FilePath);
	static bool MoveFile(ERTIDirectoryType DirectoryTypeTo, const class FString& FilePathTo, ERTIDirectoryType DirectoryTypeFrom, const class FString& FilePathFrom);
	static TArray<uint8> ReadBytesFromFile(ERTIDirectoryType DirectoryType, const class FString& FilePath, bool* Success);
	static void ReadStringFromFile(ERTIDirectoryType DirectoryType, const class FString& FilePath, bool* Success, class FString* Data);
	static bool SetReadOnly(ERTIDirectoryType DirectoryType, const class FString& FilePath, bool bNewReadOnlyValue);
	static void SetTimeStamp(ERTIDirectoryType DirectoryType, const class FString& FilePath, const struct FDateTime& DateTime);
	static void WriteBytesToFile(ERTIDirectoryType DirectoryType, const class FString& FilePath, const TArray<uint8>& bytes, bool* Success);
	static void WriteStringToFile(ERTIDirectoryType DirectoryType, const class FString& Data, const class FString& FilePath, bool* Success);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FileFunctionsRealTimeImport">();
	}
	static class UFileFunctionsRealTimeImport* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFileFunctionsRealTimeImport>();
	}
};
static_assert(alignof(UFileFunctionsRealTimeImport) == 0x000008, "Wrong alignment on UFileFunctionsRealTimeImport");
static_assert(sizeof(UFileFunctionsRealTimeImport) == 0x000040, "Wrong size on UFileFunctionsRealTimeImport");

// Class RealTimeImport.RealTimeImportAsyncNodeLoadMesh
// 0x0028 (0x0058 - 0x0030)
class URealTimeImportAsyncNodeLoadMesh final : public UBlueprintAsyncActionBase
{
public:
	FMulticastInlineDelegateProperty_             OnSuccess;                                         // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnFail;                                            // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA8[0x8];                                      // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class URealTimeImportAsyncNodeLoadMesh* LoadMeshFileAsyncNode(ERTIMeshType FileType, ERTIDirectoryType DirectoryType, const class FString& FilePath, ERTICoordinateSystem CoordinateSystem, bool AutoDetectionNormalMap, bool UseSRGB, bool CreateMipMaps, ERTIERGBFormat RgbFormat);

	void LoadMeshCompleteDelegate__DelegateSignature(const TArray<struct FRTIModelStruct>& ModelStructs, const class FString& ErrorMessage);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RealTimeImportAsyncNodeLoadMesh">();
	}
	static class URealTimeImportAsyncNodeLoadMesh* GetDefaultObj()
	{
		return GetDefaultObjImpl<URealTimeImportAsyncNodeLoadMesh>();
	}
};
static_assert(alignof(URealTimeImportAsyncNodeLoadMesh) == 0x000008, "Wrong alignment on URealTimeImportAsyncNodeLoadMesh");
static_assert(sizeof(URealTimeImportAsyncNodeLoadMesh) == 0x000058, "Wrong size on URealTimeImportAsyncNodeLoadMesh");
static_assert(offsetof(URealTimeImportAsyncNodeLoadMesh, OnSuccess) == 0x000030, "Member 'URealTimeImportAsyncNodeLoadMesh::OnSuccess' has a wrong offset!");
static_assert(offsetof(URealTimeImportAsyncNodeLoadMesh, OnFail) == 0x000040, "Member 'URealTimeImportAsyncNodeLoadMesh::OnFail' has a wrong offset!");

// Class RealTimeImport.RealTimeImportAsyncNodeLoadFile
// 0x0028 (0x0058 - 0x0030)
class URealTimeImportAsyncNodeLoadFile final : public UBlueprintAsyncActionBase
{
public:
	FMulticastInlineDelegateProperty_             OnSuccess;                                         // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnFail;                                            // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_FAB[0x8];                                      // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class URealTimeImportAsyncNodeLoadFile* LoadFileAsyncNode(ERTIDirectoryType DirectoryType, const class FString& FilePath);

	void LoadFileCompleteDelegate__DelegateSignature(const class FString& Filename, const TArray<uint8>& bytes, const int32 ErrorCode, const class FString& ErrorMessage);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RealTimeImportAsyncNodeLoadFile">();
	}
	static class URealTimeImportAsyncNodeLoadFile* GetDefaultObj()
	{
		return GetDefaultObjImpl<URealTimeImportAsyncNodeLoadFile>();
	}
};
static_assert(alignof(URealTimeImportAsyncNodeLoadFile) == 0x000008, "Wrong alignment on URealTimeImportAsyncNodeLoadFile");
static_assert(sizeof(URealTimeImportAsyncNodeLoadFile) == 0x000058, "Wrong size on URealTimeImportAsyncNodeLoadFile");
static_assert(offsetof(URealTimeImportAsyncNodeLoadFile, OnSuccess) == 0x000030, "Member 'URealTimeImportAsyncNodeLoadFile::OnSuccess' has a wrong offset!");
static_assert(offsetof(URealTimeImportAsyncNodeLoadFile, OnFail) == 0x000040, "Member 'URealTimeImportAsyncNodeLoadFile::OnFail' has a wrong offset!");

// Class RealTimeImport.RealTimeImportAsyncNodeSaveFile
// 0x0028 (0x0058 - 0x0030)
class URealTimeImportAsyncNodeSaveFile final : public UBlueprintAsyncActionBase
{
public:
	FMulticastInlineDelegateProperty_             OnSuccess;                                         // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnFail;                                            // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_FAE[0x8];                                      // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class URealTimeImportAsyncNodeSaveFile* SaveFileAsyncNode(ERTIDirectoryType DirectoryType, const class FString& FilePath, const TArray<uint8>& bytes, bool CreateDirectories, bool OverwriteFile);

	void SaveFileCompleteDelegate__DelegateSignature(const class FString& Filename, const class FString& FullPath, const int32 ErrorCode, const class FString& ErrorMessage);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RealTimeImportAsyncNodeSaveFile">();
	}
	static class URealTimeImportAsyncNodeSaveFile* GetDefaultObj()
	{
		return GetDefaultObjImpl<URealTimeImportAsyncNodeSaveFile>();
	}
};
static_assert(alignof(URealTimeImportAsyncNodeSaveFile) == 0x000008, "Wrong alignment on URealTimeImportAsyncNodeSaveFile");
static_assert(sizeof(URealTimeImportAsyncNodeSaveFile) == 0x000058, "Wrong size on URealTimeImportAsyncNodeSaveFile");
static_assert(offsetof(URealTimeImportAsyncNodeSaveFile, OnSuccess) == 0x000030, "Member 'URealTimeImportAsyncNodeSaveFile::OnSuccess' has a wrong offset!");
static_assert(offsetof(URealTimeImportAsyncNodeSaveFile, OnFail) == 0x000040, "Member 'URealTimeImportAsyncNodeSaveFile::OnFail' has a wrong offset!");

// Class RealTimeImport.RealTimeImportAsyncNodeLoadAllFilesFromDirectory
// 0x0028 (0x0058 - 0x0030)
class URealTimeImportAsyncNodeLoadAllFilesFromDirectory final : public UBlueprintAsyncActionBase
{
public:
	FMulticastInlineDelegateProperty_             OnSuccess;                                         // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnFail;                                            // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_FB2[0x8];                                      // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class URealTimeImportAsyncNodeLoadAllFilesFromDirectory* LoadAllFilesFromDirectoryAsyncNode(ERTIDirectoryType DirectoryType, ERTIFileType FileType, const class FString& DirPath, bool RecursiveSearch);

	void LoadAllFilesFromDirectoryCompleteDelegate__DelegateSignature(const int32& Count, const TArray<class FString>& Files, const TArray<class FString>& FilePaths);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RealTimeImportAsyncNodeLoadAllFilesFromDirectory">();
	}
	static class URealTimeImportAsyncNodeLoadAllFilesFromDirectory* GetDefaultObj()
	{
		return GetDefaultObjImpl<URealTimeImportAsyncNodeLoadAllFilesFromDirectory>();
	}
};
static_assert(alignof(URealTimeImportAsyncNodeLoadAllFilesFromDirectory) == 0x000008, "Wrong alignment on URealTimeImportAsyncNodeLoadAllFilesFromDirectory");
static_assert(sizeof(URealTimeImportAsyncNodeLoadAllFilesFromDirectory) == 0x000058, "Wrong size on URealTimeImportAsyncNodeLoadAllFilesFromDirectory");
static_assert(offsetof(URealTimeImportAsyncNodeLoadAllFilesFromDirectory, OnSuccess) == 0x000030, "Member 'URealTimeImportAsyncNodeLoadAllFilesFromDirectory::OnSuccess' has a wrong offset!");
static_assert(offsetof(URealTimeImportAsyncNodeLoadAllFilesFromDirectory, OnFail) == 0x000040, "Member 'URealTimeImportAsyncNodeLoadAllFilesFromDirectory::OnFail' has a wrong offset!");

// Class RealTimeImport.RealTimeImportAsyncNodeCreateSoundWaveFromFile
// 0x0028 (0x0058 - 0x0030)
class URealTimeImportAsyncNodeCreateSoundWaveFromFile final : public UBlueprintAsyncActionBase
{
public:
	FMulticastInlineDelegateProperty_             OnSuccess;                                         // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnFail;                                            // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_FB6[0x8];                                      // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class URealTimeImportAsyncNodeCreateSoundWaveFromFile* CreateSoundWaveFromFileAsyncNode(ERTIDirectoryType DirectoryType, const class FString& FilePath, float MaxFileSize, ERTISoundFileType SoundFileType);

	void CreateSoundWaveFromFileCompleteDelegate__DelegateSignature(const class FString& FileID, const class USoundWaveProcedural* SoundWave, const class FString& Filename, const int32 ErrorCode, const class FString& ErrorMessage);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RealTimeImportAsyncNodeCreateSoundWaveFromFile">();
	}
	static class URealTimeImportAsyncNodeCreateSoundWaveFromFile* GetDefaultObj()
	{
		return GetDefaultObjImpl<URealTimeImportAsyncNodeCreateSoundWaveFromFile>();
	}
};
static_assert(alignof(URealTimeImportAsyncNodeCreateSoundWaveFromFile) == 0x000008, "Wrong alignment on URealTimeImportAsyncNodeCreateSoundWaveFromFile");
static_assert(sizeof(URealTimeImportAsyncNodeCreateSoundWaveFromFile) == 0x000058, "Wrong size on URealTimeImportAsyncNodeCreateSoundWaveFromFile");
static_assert(offsetof(URealTimeImportAsyncNodeCreateSoundWaveFromFile, OnSuccess) == 0x000030, "Member 'URealTimeImportAsyncNodeCreateSoundWaveFromFile::OnSuccess' has a wrong offset!");
static_assert(offsetof(URealTimeImportAsyncNodeCreateSoundWaveFromFile, OnFail) == 0x000040, "Member 'URealTimeImportAsyncNodeCreateSoundWaveFromFile::OnFail' has a wrong offset!");

// Class RealTimeImport.RealTimeImportAsyncNodeCreateSoundWaveFromBytes
// 0x0028 (0x0058 - 0x0030)
class URealTimeImportAsyncNodeCreateSoundWaveFromBytes final : public UBlueprintAsyncActionBase
{
public:
	FMulticastInlineDelegateProperty_             OnSuccess;                                         // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnFail;                                            // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_FBA[0x8];                                      // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class URealTimeImportAsyncNodeCreateSoundWaveFromBytes* CreateSoundWaveFromBytesAsyncNode(const class FString& Param_Name, const TArray<uint8>& bytes, float MaxFileSize, ERTISoundFileType SoundFileType);

	void CreateSoundWaveFromBytesCompleteDelegate__DelegateSignature(const class USoundWaveProcedural* SoundWave, const int32 ErrorCode, const class FString& ErrorMessage);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RealTimeImportAsyncNodeCreateSoundWaveFromBytes">();
	}
	static class URealTimeImportAsyncNodeCreateSoundWaveFromBytes* GetDefaultObj()
	{
		return GetDefaultObjImpl<URealTimeImportAsyncNodeCreateSoundWaveFromBytes>();
	}
};
static_assert(alignof(URealTimeImportAsyncNodeCreateSoundWaveFromBytes) == 0x000008, "Wrong alignment on URealTimeImportAsyncNodeCreateSoundWaveFromBytes");
static_assert(sizeof(URealTimeImportAsyncNodeCreateSoundWaveFromBytes) == 0x000058, "Wrong size on URealTimeImportAsyncNodeCreateSoundWaveFromBytes");
static_assert(offsetof(URealTimeImportAsyncNodeCreateSoundWaveFromBytes, OnSuccess) == 0x000030, "Member 'URealTimeImportAsyncNodeCreateSoundWaveFromBytes::OnSuccess' has a wrong offset!");
static_assert(offsetof(URealTimeImportAsyncNodeCreateSoundWaveFromBytes, OnFail) == 0x000040, "Member 'URealTimeImportAsyncNodeCreateSoundWaveFromBytes::OnFail' has a wrong offset!");

// Class RealTimeImport.RealTimeImportAsyncNodeLoadImageFile
// 0x0028 (0x0058 - 0x0030)
class URealTimeImportAsyncNodeLoadImageFile final : public UBlueprintAsyncActionBase
{
public:
	FMulticastInlineDelegateProperty_             OnSuccess;                                         // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnFail;                                            // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_FBD[0x8];                                      // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class URealTimeImportAsyncNodeLoadImageFile* LoadImageFileAsyncNode(ERTIDirectoryType DirectoryType, const class FString& FilePath, ETextureCompressionSettings CompressionSettings, bool SRGB, bool CreateMipMaps, ERTIERGBFormat RgbFormat);

	void LoadImageFromFileCompleteDelegate__DelegateSignature(const class UTexture2D* Texture, const class FString& Filename, const int32 ErrorCode, const class FString& ErrorMessage);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RealTimeImportAsyncNodeLoadImageFile">();
	}
	static class URealTimeImportAsyncNodeLoadImageFile* GetDefaultObj()
	{
		return GetDefaultObjImpl<URealTimeImportAsyncNodeLoadImageFile>();
	}
};
static_assert(alignof(URealTimeImportAsyncNodeLoadImageFile) == 0x000008, "Wrong alignment on URealTimeImportAsyncNodeLoadImageFile");
static_assert(sizeof(URealTimeImportAsyncNodeLoadImageFile) == 0x000058, "Wrong size on URealTimeImportAsyncNodeLoadImageFile");
static_assert(offsetof(URealTimeImportAsyncNodeLoadImageFile, OnSuccess) == 0x000030, "Member 'URealTimeImportAsyncNodeLoadImageFile::OnSuccess' has a wrong offset!");
static_assert(offsetof(URealTimeImportAsyncNodeLoadImageFile, OnFail) == 0x000040, "Member 'URealTimeImportAsyncNodeLoadImageFile::OnFail' has a wrong offset!");

// Class RealTimeImport.RealTimeImportAsyncNodeLoadImageBytes
// 0x0028 (0x0058 - 0x0030)
class URealTimeImportAsyncNodeLoadImageBytes final : public UBlueprintAsyncActionBase
{
public:
	FMulticastInlineDelegateProperty_             OnSuccess;                                         // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnFail;                                            // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC1[0x8];                                      // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class URealTimeImportAsyncNodeLoadImageBytes* LoadImageBytesAsyncNode(const class FString& Param_Name, const TArray<uint8>& bytes, ETextureCompressionSettings CompressionSettings, bool SRGB, bool CreateMipMaps, ERTIERGBFormat RgbFormat);

	void LoadImageFromBytesCompleteDelegate__DelegateSignature(const class UTexture2D* Texture, const int32 ErrorCode, const class FString& ErrorMessage);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RealTimeImportAsyncNodeLoadImageBytes">();
	}
	static class URealTimeImportAsyncNodeLoadImageBytes* GetDefaultObj()
	{
		return GetDefaultObjImpl<URealTimeImportAsyncNodeLoadImageBytes>();
	}
};
static_assert(alignof(URealTimeImportAsyncNodeLoadImageBytes) == 0x000008, "Wrong alignment on URealTimeImportAsyncNodeLoadImageBytes");
static_assert(sizeof(URealTimeImportAsyncNodeLoadImageBytes) == 0x000058, "Wrong size on URealTimeImportAsyncNodeLoadImageBytes");
static_assert(offsetof(URealTimeImportAsyncNodeLoadImageBytes, OnSuccess) == 0x000030, "Member 'URealTimeImportAsyncNodeLoadImageBytes::OnSuccess' has a wrong offset!");
static_assert(offsetof(URealTimeImportAsyncNodeLoadImageBytes, OnFail) == 0x000040, "Member 'URealTimeImportAsyncNodeLoadImageBytes::OnFail' has a wrong offset!");

// Class RealTimeImport.RealTimeImportBPLibrary
// 0x00B8 (0x00E0 - 0x0028)
class URealTimeImportBPLibrary final : public UObject
{
public:
	FMulticastInlineDelegateProperty_             OnLoadFileEventDelegate;                           // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnSaveFileEventDelegate;                           // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnLoadAllFilesFromDirectoryEventDelegate;          // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCreateSoundWaveFromFileEventDelegate;            // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCreateSoundWaveFromBytesEventDelegate;           // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPlaySoundEventDelegate;                          // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnActiveSoundPositionEventDelegate;                // 0x0088(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnActiveSoundEnvelopeValueEventDelegate;           // 0x0098(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnStopSoundEventDelegate;                          // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnLoadImageFileEventDelegate;                      // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnLoadImageBytesEventDelegate;                     // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC4[0x8];                                      // 0x00D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void breakMaterialStruct(const struct FRTIMaterialStruct& MaterialData, bool* HasTexture, class FString* MaterialName, class FString* TextureName, TArray<struct FRTITextureStruct>* Textures, struct FColor* Ambient, struct FColor* Diffuse, struct FColor* Specular, float* SpecularExponent, float* Dissolved, float* DissolvedInverted);
	static void breakMeshStruct(const struct FRTIMeshStruct& MeshStruct, class FString* GeometryName, TArray<struct FVector>* Vertices, TArray<int32>* Triangles, TArray<struct FVector>* Normals, TArray<struct FVector2D>* UV0, TArray<struct FLinearColor>* VertexColors, struct FRTIMaterialStruct* MaterialStruct);
	static void breakModelStruct(const struct FRTIModelStruct& ModelStruct, class FString* Param_Name, struct FTransform* RelativeTransform, TArray<struct FRTIMeshStruct>* MeshStructs);
	static void breakTextureStruct(const struct FRTITextureStruct& TextureData, class FString* TextureName, class UTexture2D** Texture, ERTITextureType* TextureType);
	static void ChangeTexturDestroyThreadSettings(float ThreadSleepTimeInSeconds, bool ShowLogs);
	static void ChangeVolumeSound(const class FString& FileID, float VolumeMultiplier);
	static void CreateSoundWaveFromBytes(const class FString& Param_Name, const TArray<uint8>& bytes, float MaxFileSize, ERTISoundFileType SoundFileType, class USoundWaveProcedural** Sound, int32* ErrorCode, class FString* ErrorMessage);
	static class URealTimeImportBPLibrary* CreateSoundWaveFromBytesAsync(const class FString& Param_Name, const TArray<uint8>& bytes, float MaxFileSize, ERTISoundFileType SoundFileType, const class FString& EventID);
	static void CreateSoundWaveFromFile(ERTIDirectoryType DirectoryType, const class FString& FilePath, float MaxFileSize, class FString* FileID, ERTISoundFileType SoundFileType, class USoundWaveProcedural** SoundWave, class FString* Filename, int32* ErrorCode, class FString* ErrorMessage);
	static class URealTimeImportBPLibrary* CreateSoundWaveFromFileAsync(ERTIDirectoryType DirectoryType, const class FString& FilePath, float MaxFileSize, ERTISoundFileType SoundFileType, const class FString& EventID);
	static void EmptySoundCache();
	static void EmptyTextureCacheAndDestroyTextures(bool EmptyTexturesBeforeDeleting);
	static class URealTimeImportBPLibrary* GetRealTimeImportTarget();
	static void GetSoundInfo(ERTIDirectoryType DirectoryType, const class FString& FilePath, class FString* Param_Name, class FString* FileNameExtension, int64* FileSize, float* Duration, int64* NumChannels, int32* Quality, int64* SampleDataSize, int64* SampleRate);
	static bool IsSoundActive(const class FString& FileID);
	static bool LoadAllFilesFromDirectory(ERTIDirectoryType DirectoryType, ERTIFileType FileType, const class FString& DirPath, bool RecursiveSearch, int32* Count, TArray<class FString>* Files, TArray<class FString>* FilePaths);
	static void LoadAndPlaySoundBytesAsync(const class UObject* WorldContextObject, const TArray<uint8>& bytes, float VolumeMultiplier, float PlaySpeed, int32 StartTimeInSeconds, bool PersistAcrossLevelTransition);
	static void LoadAndPlaySoundFileAsync(const class UObject* WorldContextObject, ERTIDirectoryType DirectoryType, const class FString& FilePath, float MaxFileSize, float VolumeMultiplier, float PlaySpeed, int32 StartTimeInSeconds, bool PersistAcrossLevelTransition, ERTISoundFileType SoundFileType);
	static void LoadFile(ERTIDirectoryType DirectoryType, const class FString& FilePath, class FString* Filename, TArray<uint8>* bytes, int32* ErrorCode, class FString* ErrorMessage);
	static void LoadImageBytes(const class FString& Param_Name, const TArray<uint8>& bytes, class UTexture2D** Texture, int32* ErrorCode, class FString* ErrorMessage, ETextureCompressionSettings CompressionSettings, bool SRGB, bool CreateMipMaps, ERTIERGBFormat RgbFormat);
	static class URealTimeImportBPLibrary* LoadImageBytesAsync(const class FString& Param_Name, const TArray<uint8>& bytes, const class FString& EventID, ETextureCompressionSettings CompressionSettings, bool SRGB, bool CreateMipMaps, ERTIERGBFormat RgbFormat);
	static void LoadImageFile(ERTIDirectoryType DirectoryType, const class FString& FilePath, class UTexture2D** Texture, class FString* Filename, int32* ErrorCode, class FString* ErrorMessage, ETextureCompressionSettings CompressionSettings, bool SRGB, bool CreateMipMaps, ERTIERGBFormat RgbFormat);
	static class URealTimeImportBPLibrary* LoadImageFileAsync(ERTIDirectoryType DirectoryType, const class FString& FilePath, const class FString& EventID, ETextureCompressionSettings CompressionSettings, bool SRGB, bool CreateMipMaps, ERTIERGBFormat RgbFormat);
	static void LoadMeshFile(ERTIMeshType FileType, ERTIDirectoryType DirectoryType, const class FString& FilePath, bool* Success, class FString* SuccessMessage, TArray<struct FRTIModelStruct>* ModelStructs, ERTICoordinateSystem CoordinateSystem, bool AutoDetectionNormalMap, bool UseSRGB, bool CreateMipMaps, ERTIERGBFormat RgbFormat);
	static TArray<struct FVector> Multiply_VectorArrayFloat(const TArray<struct FVector>& A, float B);
	static void PauseSound(const class FString& FileID);
	static void RemoveSoundFromCache(const class FString& FileID);
	static void RemoveTextureFromCacheAndDestroyTexture(class UTexture* Texture, bool EmptyTextureBeforeDeleting);
	static void ResumeSound(const class FString& FileID);
	static void SaveFile(ERTIDirectoryType DirectoryType, const class FString& FilePath, bool CreateDirectories, bool OverwriteFile, const TArray<uint8>& bytes, class FString* Filename, class FString* FullPath, int32* ErrorCode, class FString* ErrorMessage);
	static void SeekWavFileStream(const class FString& FileID, float PositionInSeconds);
	static void StopAllSounds(bool RemoveFromCache);
	static void StopSound(const class FString& FileID, bool RemoveFromCache);
	static void StreamWavFile(bool* Success, class FString* ErrorMessage, const class UObject* WorldContextObject, ERTIDirectoryType DirectoryType, const class FString& FilePath, float VolumeMultiplier, int32 StartTimeInSeconds, bool PersistAcrossLevelTransition);
	static TArray<uint8> Texture2dToByteArray(class UTexture2D* Texture2D, ERTIExportImageType Type, int32 Quality);
	static class UTexture2DDynamic* Texture2DToTexture2DDynamic(class UTexture2D* Texture2D, bool DestroyTexture2D);
	static TArray<uint8> TextureRenderTarget2D_ToByteArray(bool* Success, class FString* ErrorMessage, class UTextureRenderTarget2D* TextureRenderTarget2D, ERTIExportImageType Type, int32 Quality);

	void ActiveSoundEnvelopeValueEventDelegate(const float AverageEnvelopeValue, const float MaxEnvelope, const int32 NumWaveInstances);
	void ActiveSoundEnvelopeValueEventDelegate__DelegateSignature(float AverageEnvelopeValue, float MaxEnvelope, int32 NumWaveInstances);
	void ActiveSoundPositionEventDelegate(const class FString& FileID, const float PositionSecondsStart, const float PositionSecondsEnd, const float PositionPercent);
	void ActiveSoundPositionEventDelegate__DelegateSignature(const class FString& FileID, float PositionSecondsStart, float PositionSecondsEnd, float PositionPercent);
	void CreateSoundWaveFromBytesEventDelegate(const int32 ErrorCode, const class FString& EventID, const class USoundWaveProcedural* Sound, const class FString& ErrorMessage);
	void CreateSoundWaveFromBytesEventDelegate__DelegateSignature(int32 ErrorCode, const class FString& EventID, class USoundWaveProcedural* Sound, const class FString& ErrorMessage);
	void CreateSoundWaveFromFileEventDelegate(const int32 ErrorCode, const class FString& EventID, const class USoundWaveProcedural* Sound, const class FString& Filename, const class FString& ErrorMessage);
	void CreateSoundWaveFromFileEventDelegate__DelegateSignature(int32 ErrorCode, const class FString& EventID, class USoundWaveProcedural* Sound, const class FString& Filename, const class FString& ErrorMessage);
	class URealTimeImportBPLibrary* LoadAllFilesFromDirectoryAsync(ERTIDirectoryType DirectoryType, ERTIFileType FileType, const class FString& DirPath, bool RecursiveSearch, const class FString& EventID);
	void LoadAllFilesFromDirectoryEventDelegate(const class FString& EventID, const int32& Count, const TArray<class FString>& Files, const TArray<class FString>& FilePaths);
	void LoadAllFilesFromDirectoryEventDelegate__DelegateSignature(const class FString& EventID, int32 Count, const TArray<class FString>& Files, const TArray<class FString>& FilePaths);
	class URealTimeImportBPLibrary* LoadFileAsync(ERTIDirectoryType DirectoryType, const class FString& FilePath, const class FString& EventID);
	void LoadFileEventDelegate(const int32 ErrorCode, const class FString& EventID, const TArray<uint8>& bytes, const class FString& Filename, const class FString& ErrorMessage);
	void LoadFileEventDelegate__DelegateSignature(int32 ErrorCode, const class FString& EventID, const TArray<uint8>& bytes, const class FString& Filename, const class FString& ErrorMessage);
	void LoadImageBytesEventDelegate(const int32 ErrorCode, const class FString& EventID, const class UTexture2D* Texture, const class FString& ErrorMessage);
	void LoadImageBytesEventDelegate__DelegateSignature(int32 ErrorCode, const class FString& EventID, class UTexture2D* Texture, const class FString& ErrorMessage);
	void LoadImageFileEventDelegate(const int32 ErrorCode, const class FString& EventID, const class UTexture2D* Texture, const class FString& Filename, const class FString& ErrorMessage);
	void LoadImageFileEventDelegate__DelegateSignature(int32 ErrorCode, const class FString& EventID, class UTexture2D* Texture, const class FString& Filename, const class FString& ErrorMessage);
	void PlaySoundEventDelegate(const int32 ErrorCode, const class FString& FileID, const class FString& ErrorMessage, const float DurationInSeconds);
	void PlaySoundEventDelegate__DelegateSignature(int32 ErrorCode, const class FString& FileID, const class FString& ErrorMessage, float DurationInSeconds);
	class URealTimeImportBPLibrary* SaveFileAsync(ERTIDirectoryType DirectoryType, const class FString& FilePath, bool CreateDirectories, bool OverwriteFile, const TArray<uint8>& bytes, const class FString& EventID);
	void SaveFileEventDelegate(const int32 ErrorCode, const class FString& EventID, const class FString& Filename, const class FString& FullPath, const class FString& ErrorMessage);
	void SaveFileEventDelegate__DelegateSignature(int32 ErrorCode, const class FString& EventID, const class FString& Filename, const class FString& FullPath, const class FString& ErrorMessage);
	void StopSoundEventDelegate(const class FString& FileID);
	void StopSoundEventDelegate__DelegateSignature(const class FString& FileID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RealTimeImportBPLibrary">();
	}
	static class URealTimeImportBPLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<URealTimeImportBPLibrary>();
	}
};
static_assert(alignof(URealTimeImportBPLibrary) == 0x000008, "Wrong alignment on URealTimeImportBPLibrary");
static_assert(sizeof(URealTimeImportBPLibrary) == 0x0000E0, "Wrong size on URealTimeImportBPLibrary");
static_assert(offsetof(URealTimeImportBPLibrary, OnLoadFileEventDelegate) == 0x000028, "Member 'URealTimeImportBPLibrary::OnLoadFileEventDelegate' has a wrong offset!");
static_assert(offsetof(URealTimeImportBPLibrary, OnSaveFileEventDelegate) == 0x000038, "Member 'URealTimeImportBPLibrary::OnSaveFileEventDelegate' has a wrong offset!");
static_assert(offsetof(URealTimeImportBPLibrary, OnLoadAllFilesFromDirectoryEventDelegate) == 0x000048, "Member 'URealTimeImportBPLibrary::OnLoadAllFilesFromDirectoryEventDelegate' has a wrong offset!");
static_assert(offsetof(URealTimeImportBPLibrary, OnCreateSoundWaveFromFileEventDelegate) == 0x000058, "Member 'URealTimeImportBPLibrary::OnCreateSoundWaveFromFileEventDelegate' has a wrong offset!");
static_assert(offsetof(URealTimeImportBPLibrary, OnCreateSoundWaveFromBytesEventDelegate) == 0x000068, "Member 'URealTimeImportBPLibrary::OnCreateSoundWaveFromBytesEventDelegate' has a wrong offset!");
static_assert(offsetof(URealTimeImportBPLibrary, OnPlaySoundEventDelegate) == 0x000078, "Member 'URealTimeImportBPLibrary::OnPlaySoundEventDelegate' has a wrong offset!");
static_assert(offsetof(URealTimeImportBPLibrary, OnActiveSoundPositionEventDelegate) == 0x000088, "Member 'URealTimeImportBPLibrary::OnActiveSoundPositionEventDelegate' has a wrong offset!");
static_assert(offsetof(URealTimeImportBPLibrary, OnActiveSoundEnvelopeValueEventDelegate) == 0x000098, "Member 'URealTimeImportBPLibrary::OnActiveSoundEnvelopeValueEventDelegate' has a wrong offset!");
static_assert(offsetof(URealTimeImportBPLibrary, OnStopSoundEventDelegate) == 0x0000A8, "Member 'URealTimeImportBPLibrary::OnStopSoundEventDelegate' has a wrong offset!");
static_assert(offsetof(URealTimeImportBPLibrary, OnLoadImageFileEventDelegate) == 0x0000B8, "Member 'URealTimeImportBPLibrary::OnLoadImageFileEventDelegate' has a wrong offset!");
static_assert(offsetof(URealTimeImportBPLibrary, OnLoadImageBytesEventDelegate) == 0x0000C8, "Member 'URealTimeImportBPLibrary::OnLoadImageBytesEventDelegate' has a wrong offset!");

// Class RealTimeImport.RealTimeImportImage
// 0x0068 (0x0090 - 0x0028)
class URealTimeImportImage final : public UObject
{
public:
	uint8                                         Pad_1010[0x68];                                    // 0x0028(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static TArray<struct FColor> GetImageColors(const TArray<uint8>& ImageBytes);
	static class URealTimeImportImage* GetRealTimeImportImage();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RealTimeImportImage">();
	}
	static class URealTimeImportImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<URealTimeImportImage>();
	}
};
static_assert(alignof(URealTimeImportImage) == 0x000008, "Wrong alignment on URealTimeImportImage");
static_assert(sizeof(URealTimeImportImage) == 0x000090, "Wrong size on URealTimeImportImage");

// Class RealTimeImport.RealTimeImportMesh
// 0x0018 (0x0040 - 0x0028)
class URealTimeImportMesh final : public UObject
{
public:
	class URealTimeImportMeshSTL*                 ImporterSTL;                                       // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URealTimeImportMeshOBJ*                 ImporterOBJ;                                       // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URealTimeImportMeshFBX*                 ImporterFBX;                                       // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static void CleanTest(const TArray<struct FRTIModelStruct>& ModelStructs);
	static class URealTimeImportMesh* GetRealTimeImportMesh();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RealTimeImportMesh">();
	}
	static class URealTimeImportMesh* GetDefaultObj()
	{
		return GetDefaultObjImpl<URealTimeImportMesh>();
	}
};
static_assert(alignof(URealTimeImportMesh) == 0x000008, "Wrong alignment on URealTimeImportMesh");
static_assert(sizeof(URealTimeImportMesh) == 0x000040, "Wrong size on URealTimeImportMesh");
static_assert(offsetof(URealTimeImportMesh, ImporterSTL) == 0x000028, "Member 'URealTimeImportMesh::ImporterSTL' has a wrong offset!");
static_assert(offsetof(URealTimeImportMesh, ImporterOBJ) == 0x000030, "Member 'URealTimeImportMesh::ImporterOBJ' has a wrong offset!");
static_assert(offsetof(URealTimeImportMesh, ImporterFBX) == 0x000038, "Member 'URealTimeImportMesh::ImporterFBX' has a wrong offset!");

// Class RealTimeImport.RealTimeImportMeshFBX
// 0x0000 (0x0028 - 0x0028)
class URealTimeImportMeshFBX final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RealTimeImportMeshFBX">();
	}
	static class URealTimeImportMeshFBX* GetDefaultObj()
	{
		return GetDefaultObjImpl<URealTimeImportMeshFBX>();
	}
};
static_assert(alignof(URealTimeImportMeshFBX) == 0x000008, "Wrong alignment on URealTimeImportMeshFBX");
static_assert(sizeof(URealTimeImportMeshFBX) == 0x000028, "Wrong size on URealTimeImportMeshFBX");

// Class RealTimeImport.RealTimeImportMeshOBJ
// 0x0000 (0x0028 - 0x0028)
class URealTimeImportMeshOBJ final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RealTimeImportMeshOBJ">();
	}
	static class URealTimeImportMeshOBJ* GetDefaultObj()
	{
		return GetDefaultObjImpl<URealTimeImportMeshOBJ>();
	}
};
static_assert(alignof(URealTimeImportMeshOBJ) == 0x000008, "Wrong alignment on URealTimeImportMeshOBJ");
static_assert(sizeof(URealTimeImportMeshOBJ) == 0x000028, "Wrong size on URealTimeImportMeshOBJ");

// Class RealTimeImport.RealTimeImportMeshSTL
// 0x0000 (0x0028 - 0x0028)
class URealTimeImportMeshSTL final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RealTimeImportMeshSTL">();
	}
	static class URealTimeImportMeshSTL* GetDefaultObj()
	{
		return GetDefaultObjImpl<URealTimeImportMeshSTL>();
	}
};
static_assert(alignof(URealTimeImportMeshSTL) == 0x000008, "Wrong alignment on URealTimeImportMeshSTL");
static_assert(sizeof(URealTimeImportMeshSTL) == 0x000028, "Wrong size on URealTimeImportMeshSTL");

// Class RealTimeImport.RealTimeImportSound
// 0x01A0 (0x01C8 - 0x0028)
class URealTimeImportSound final : public UObject
{
public:
	uint8                                         Pad_1011[0x1A0];                                   // 0x0028(0x01A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class URealTimeImportSound* GetRealTimeImportSound();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RealTimeImportSound">();
	}
	static class URealTimeImportSound* GetDefaultObj()
	{
		return GetDefaultObjImpl<URealTimeImportSound>();
	}
};
static_assert(alignof(URealTimeImportSound) == 0x000008, "Wrong alignment on URealTimeImportSound");
static_assert(sizeof(URealTimeImportSound) == 0x0001C8, "Wrong size on URealTimeImportSound");

}

