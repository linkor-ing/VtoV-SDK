#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Firetank

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Enum_interactionActions_structs.hpp"
#include "AIModule_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass firetank.firetank_C
// 0x0330 (0x05B0 - 0x0280)
class AFiretank_C final : public APawn
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0280(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          Collider3;                                         // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Collider2;                                         // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Collider1;                                         // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UComp_radarPoint_C*                     Comp_radarPoint;                                   // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cube1;                                             // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Firetank_noise_Cue;                                // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Gascan_R;                                          // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Gascan_L;                                          // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Gt_L;                                              // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Gt_R;                                              // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Eff_light2;                                        // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Eff_light1;                                        // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight1;                                        // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight;                                         // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          backoffCollide;                                    // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Eyes;                                              // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    ThreadsVelocityPoint_L;                            // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    ThreadsVelocityPoint_R;                            // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Firetank_alarm;                                    // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Firetank_gun;                                      // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Firetank_loop;                                     // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Firetank_zrot;                                     // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Firetank_arm;                                      // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Eff_fpoint_L;                                      // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Eff_fpoint_R;                                      // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          HeadCollider;                                      // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Firetank_speak;                                    // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Eff_smoke;                                         // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Thread_R;                                          // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Thread_L;                                          // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Flamethrower;                                      // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Engine_L;                                          // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Engine_R;                                          // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       SeeZone;                                           // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       AttackZone;                                        // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               ParticleSystem;                                    // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        FireDir;                                           // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Firetank;                                          // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Forward;                                           // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cube;                                              // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_point_a_E55B857E43B75A02D562258222797A31; // 0x03D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_point__Direction_E55B857E43B75A02D562258222797A31; // 0x03DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DD[0x3];                                      // 0x03DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_point;                                    // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_armStartSpeed_b_990DF4CD4CB6B2B7467972AA9FF57A76; // 0x03E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_armStartSpeed_a_990DF4CD4CB6B2B7467972AA9FF57A76; // 0x03EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_armStartSpeed__Direction_990DF4CD4CB6B2B7467972AA9FF57A76; // 0x03F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F1[0x7];                                      // 0x03F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_armStartSpeed;                            // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Loc;                                               // 0x0400(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Prev;                                              // 0x040C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0418(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41C[0x4];                                      // 0x041C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPhysicsConstraintComponent*>    Constraints_right;                                 // 0x0420(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UPhysicsConstraintComponent*>    Constraints_left;                                  // 0x0430(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UStaticMeshComponent*>           Wheels_right;                                      // 0x0440(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UStaticMeshComponent*>           Wheels_left;                                       // 0x0450(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UNavigationPath*                        PathComponent;                                     // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Dir;                                               // 0x0468(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PathPoint_A;                                       // 0x046C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PathPoint_B;                                       // 0x0478(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PathDir;                                           // 0x0484(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBackingOff;                                      // 0x0490(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_491[0x3];                                      // 0x0491(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MultWheels_right;                                  // 0x0494(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MultWheels_left;                                   // 0x0498(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipTurn;                                          // 0x049C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Turning;                                           // 0x049D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49E[0x2];                                      // 0x049E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Threads_R;                                         // 0x04A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Threads_L;                                         // 0x04A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Dynmat_thread_R;                                   // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Dynmat_thread_L;                                   // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFiretank_thread_Skeleton_AnimBlueprint_C* Anim_thread_R;                                     // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFiretank_thread_Skeleton_AnimBlueprint_C* Anim_thread_L;                                     // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UPhysicsConstraintComponent*>    ConstraintsSus_right;                              // 0x04C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UPhysicsConstraintComponent*>    ConstraintsSus_left;                               // 0x04D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class APawn*                                  Chasing;                                           // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Chasing_lastLoc;                                   // 0x04F0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4FC[0x4];                                      // 0x04FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFiretank_Skeleton_AnimBlueprint_C*     Anim_tank;                                         // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Active;                                            // 0x0508(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_509[0x7];                                      // 0x0509(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFlamethrower_C*                        FlamethrowerComponent;                             // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         backoffVel;                                        // 0x0518(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Acceleration;                                      // 0x051C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Torque_R;                                          // 0x0520(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Torque_L;                                          // 0x052C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ThreadsOffset;                                     // 0x0538(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_544[0x4];                                      // 0x0544(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPhysicsConstraintComponent*>    AllSus;                                            // 0x0548(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UPhysicsConstraintComponent*>    AllWheels;                                         // 0x0558(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	float                                         Health_R;                                          // 0x0568(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Health_L;                                          // 0x056C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxHealth;                                         // 0x0570(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Damaged;                                           // 0x0574(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_575[0x3];                                      // 0x0575(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Stage;                                             // 0x0578(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_57C[0x4];                                      // 0x057C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFiretankController_C*                  FiretankController;                                // 0x0580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFiretankCharacterController_C*         CharacterMovement;                                 // 0x0588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Key;                                               // 0x0590(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	bool                                          IsInEvent;                                         // 0x05A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A1[0x3];                                      // 0x05A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Velocity;                                          // 0x05A4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_firetank(int32 EntryPoint);
	void BndEvt__firetank_Cube_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void AddDamage(class AActor* Actor, float Damage, const struct FHitResult& Hit, const struct FVector& Impact, bool SkipSetting);
	void BndEvt__testTank_Cube1_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void Checkhealth();
	void MakeHealthNoise();
	void ReceiveDestroyed();
	void BndEvt__testTank_seeZone_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__testTank_seeZone_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void Exploded(float Damage, const struct FVector& Location);
	void DamageByPlayer(class AMainPlayer_C* Player, const struct FHitResult& Hit, float Damage);
	void Speak();
	void Dest(class AActor* DestroyedActor);
	void AssignChasedAsDestroyed();
	void Fire();
	void Activate();
	void Saw();
	void SenseUpdate();
	void BndEvt__testTank_backoffCollide_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void backoff();
	void Update();
	void MoveTo();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void HookTension(class AHook_C* Hook);
	void CleanSponge(float Clean, class AMainPlayer_C* Player);
	void Crafted();
	void Hooked(class AHook_C* Hook);
	void AttemptIgnite();
	void PlayerUsedOn(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void Slice(bool Clean);
	void bitten();
	void ReachedByExplosion(const struct FVector& Location, float Damage);
	void PlayerLookAway(class AMainPlayer_C* Player);
	void Stepped(float Volume);
	void ActionName(class AMainPlayer_C* Player, const struct FHitResult& Hit, const class FString& Param_Name);
	void AccumulateTemperature(float Temperature, float Param_Speed);
	void AddTemperature(float Temperature);
	void MicrowaveElec();
	void PlayerHandAnyKey(class AMainPlayer_C* Player, const struct FKey& Param_Key, bool Pressed);
	void PlayerHandMouse(class AMainPlayer_C* Player, const struct FVector2D& Mouse);
	void PlayerHandMouseWheel(class AMainPlayer_C* Player, float WheelDelta);
	void PlayerHandRelease_LMB(class AMainPlayer_C* Player);
	void PlayerHandRelease_RMB(class AMainPlayer_C* Player);
	void ExtinguishFire();
	void PlayerHandUse_LMB(class AMainPlayer_C* Player);
	void PlayerHandUse_RMB(class AMainPlayer_C* Player);
	void ActionOptionIndex(class AMainPlayer_C* Player, const struct FHitResult& Hit, Enum_interactionActions Action);
	void ReceivedPhyiscsDamage(float Damage, const struct FHitResult& Hot);
	void Microwave();
	void Ignite(float Fuel);
	void FireDamage(float Damage);
	void SteppedOn(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void Unhook();
	void DigUp();
	void PhysPreDestroyed();
	void PhysDestroyed();
	void SetKey(const class FString& Param_Key);
	void SetPropProps(bool Static, bool Frozen, bool Param_Active);
	void Virus(bool Activate);
	void Eaten();
	void LeaveWaterOrigin(class AWaterVolume_C* Water);
	void EnterWaterOrigin(class AWaterVolume_C* Water);
	void LeaveWater(class AWaterVolume_C* Water);
	void EnterWater(class AWaterVolume_C* Water);
	void ImpactDamage(float Damage, const struct FHitResult& Hit, class AActor* Actor, const struct FVector& Impact);
	void PlayerR(class AMainPlayer_C* Player);
	void PlayerHold(class AMainPlayer_C* Player);
	void PlayerUnequip(class AMainPlayer_C* Player);
	void UpdateStrAgl();
	void Thrown(class AMainPlayer_C* Player);
	void broken_fire();
	void broken();
	void SendName(class FName Param_Name);
	void Kicked(bool Kick);
	void Player_use(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void DriveDetached();
	void SetIgnoreSave(bool Ignore);
	void OnSuccess_99FD1C99470CA485602C19950841354D(EPathFollowingResult MovementResult);
	void OnFail_99FD1C99470CA485602C19950841354D(EPathFollowingResult MovementResult);
	void Timeline_point__UpdateFunc();
	void Timeline_point__FinishedFunc();
	void Timeline_armStartSpeed__UpdateFunc();
	void Timeline_armStartSpeed__FinishedFunc();
	void ConstructWheels();
	void CheckSides();
	void UpdThreads();
	void SensePawn();
	void UpdAnim();
	void SetThreadsOffset();
	void GcanExp(const struct FTransform& SpawnTransform);
	void UpdStage();
	void MakePathPoints();
	void UpdGastank();
	void UpdGastankRot();
	void AddGastankHealthEffect();
	void SkipRadial(bool* Skip);
	void GascanFuel(class AProp_gascan_C* Gascan, bool* Fueled);
	void GetActionOptions(class AMainPlayer_C* Player, class UPrimitiveComponent* Component, class AActor* Actor, TArray<class FString>* Options, TArray<Enum_interactionActions>* Options_enum, TArray<class FText>* OptionsNamesOverlay, uint8* Number);
	void SetPath(const TArray<struct FVector>& Path, bool* Return);
	void GetOnlyKey(class FString* Param_Key);
	void ProcessKeys(bool* Return);
	void CanBeUsedHold(bool* Return);
	void GetKey(class FString* Param_Key);
	void ToolboxFix(class AProp_toolbox_C* Toolbox, bool* Return);
	void GetPriceMultiplier(float* PriceMult);
	void LandedOn(class AMainPlayer_C* Player, bool* IgnoreFallDamage);
	void CanBePutInContainer(bool* Return);
	void AsProp(class AProp_C** Return);
	void CanPickup(bool* Return);
	void NoRespawn(bool Param_NoRespawn, bool* Return);
	void LookAt(class AMainPlayer_C* Player, const struct FHitResult& Hit, bool* Return, class FString* Text, class UPrimitiveComponent** boundObjectReplace, uint8* Number);
	void IsButtonUsed(bool* Failed);
	void GatherDataFromKey(bool* Gather);
	void SkipPreDelete(bool* Skip);
	void IgnoreSave(bool* Param_IgnoreSave);
	void LoadData(const struct FStruct_save& Data, bool* Return);
	void GetData(struct FStruct_save* Data);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"firetank_C">();
	}
	static class AFiretank_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFiretank_C>();
	}
};
static_assert(alignof(AFiretank_C) == 0x000008, "Wrong alignment on AFiretank_C");
static_assert(sizeof(AFiretank_C) == 0x0005B0, "Wrong size on AFiretank_C");
static_assert(offsetof(AFiretank_C, UberGraphFrame) == 0x000280, "Member 'AFiretank_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Collider3) == 0x000288, "Member 'AFiretank_C::Collider3' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Collider2) == 0x000290, "Member 'AFiretank_C::Collider2' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Collider1) == 0x000298, "Member 'AFiretank_C::Collider1' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Comp_radarPoint) == 0x0002A0, "Member 'AFiretank_C::Comp_radarPoint' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Cube1) == 0x0002A8, "Member 'AFiretank_C::Cube1' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Firetank_noise_Cue) == 0x0002B0, "Member 'AFiretank_C::Firetank_noise_Cue' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Gascan_R) == 0x0002B8, "Member 'AFiretank_C::Gascan_R' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Gascan_L) == 0x0002C0, "Member 'AFiretank_C::Gascan_L' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Gt_L) == 0x0002C8, "Member 'AFiretank_C::Gt_L' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Gt_R) == 0x0002D0, "Member 'AFiretank_C::Gt_R' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Eff_light2) == 0x0002D8, "Member 'AFiretank_C::Eff_light2' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Eff_light1) == 0x0002E0, "Member 'AFiretank_C::Eff_light1' has a wrong offset!");
static_assert(offsetof(AFiretank_C, SpotLight1) == 0x0002E8, "Member 'AFiretank_C::SpotLight1' has a wrong offset!");
static_assert(offsetof(AFiretank_C, SpotLight) == 0x0002F0, "Member 'AFiretank_C::SpotLight' has a wrong offset!");
static_assert(offsetof(AFiretank_C, PointLight) == 0x0002F8, "Member 'AFiretank_C::PointLight' has a wrong offset!");
static_assert(offsetof(AFiretank_C, backoffCollide) == 0x000300, "Member 'AFiretank_C::backoffCollide' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Box) == 0x000308, "Member 'AFiretank_C::Box' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Eyes) == 0x000310, "Member 'AFiretank_C::Eyes' has a wrong offset!");
static_assert(offsetof(AFiretank_C, ThreadsVelocityPoint_L) == 0x000318, "Member 'AFiretank_C::ThreadsVelocityPoint_L' has a wrong offset!");
static_assert(offsetof(AFiretank_C, ThreadsVelocityPoint_R) == 0x000320, "Member 'AFiretank_C::ThreadsVelocityPoint_R' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Firetank_alarm) == 0x000328, "Member 'AFiretank_C::Firetank_alarm' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Firetank_gun) == 0x000330, "Member 'AFiretank_C::Firetank_gun' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Firetank_loop) == 0x000338, "Member 'AFiretank_C::Firetank_loop' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Firetank_zrot) == 0x000340, "Member 'AFiretank_C::Firetank_zrot' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Firetank_arm) == 0x000348, "Member 'AFiretank_C::Firetank_arm' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Eff_fpoint_L) == 0x000350, "Member 'AFiretank_C::Eff_fpoint_L' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Eff_fpoint_R) == 0x000358, "Member 'AFiretank_C::Eff_fpoint_R' has a wrong offset!");
static_assert(offsetof(AFiretank_C, HeadCollider) == 0x000360, "Member 'AFiretank_C::HeadCollider' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Firetank_speak) == 0x000368, "Member 'AFiretank_C::Firetank_speak' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Eff_smoke) == 0x000370, "Member 'AFiretank_C::Eff_smoke' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Thread_R) == 0x000378, "Member 'AFiretank_C::Thread_R' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Thread_L) == 0x000380, "Member 'AFiretank_C::Thread_L' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Flamethrower) == 0x000388, "Member 'AFiretank_C::Flamethrower' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Engine_L) == 0x000390, "Member 'AFiretank_C::Engine_L' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Engine_R) == 0x000398, "Member 'AFiretank_C::Engine_R' has a wrong offset!");
static_assert(offsetof(AFiretank_C, SeeZone) == 0x0003A0, "Member 'AFiretank_C::SeeZone' has a wrong offset!");
static_assert(offsetof(AFiretank_C, AttackZone) == 0x0003A8, "Member 'AFiretank_C::AttackZone' has a wrong offset!");
static_assert(offsetof(AFiretank_C, ParticleSystem) == 0x0003B0, "Member 'AFiretank_C::ParticleSystem' has a wrong offset!");
static_assert(offsetof(AFiretank_C, FireDir) == 0x0003B8, "Member 'AFiretank_C::FireDir' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Firetank) == 0x0003C0, "Member 'AFiretank_C::Firetank' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Forward) == 0x0003C8, "Member 'AFiretank_C::Forward' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Cube) == 0x0003D0, "Member 'AFiretank_C::Cube' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Timeline_point_a_E55B857E43B75A02D562258222797A31) == 0x0003D8, "Member 'AFiretank_C::Timeline_point_a_E55B857E43B75A02D562258222797A31' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Timeline_point__Direction_E55B857E43B75A02D562258222797A31) == 0x0003DC, "Member 'AFiretank_C::Timeline_point__Direction_E55B857E43B75A02D562258222797A31' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Timeline_point) == 0x0003E0, "Member 'AFiretank_C::Timeline_point' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Timeline_armStartSpeed_b_990DF4CD4CB6B2B7467972AA9FF57A76) == 0x0003E8, "Member 'AFiretank_C::Timeline_armStartSpeed_b_990DF4CD4CB6B2B7467972AA9FF57A76' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Timeline_armStartSpeed_a_990DF4CD4CB6B2B7467972AA9FF57A76) == 0x0003EC, "Member 'AFiretank_C::Timeline_armStartSpeed_a_990DF4CD4CB6B2B7467972AA9FF57A76' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Timeline_armStartSpeed__Direction_990DF4CD4CB6B2B7467972AA9FF57A76) == 0x0003F0, "Member 'AFiretank_C::Timeline_armStartSpeed__Direction_990DF4CD4CB6B2B7467972AA9FF57A76' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Timeline_armStartSpeed) == 0x0003F8, "Member 'AFiretank_C::Timeline_armStartSpeed' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Loc) == 0x000400, "Member 'AFiretank_C::Loc' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Prev) == 0x00040C, "Member 'AFiretank_C::Prev' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Speed) == 0x000418, "Member 'AFiretank_C::Speed' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Constraints_right) == 0x000420, "Member 'AFiretank_C::Constraints_right' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Constraints_left) == 0x000430, "Member 'AFiretank_C::Constraints_left' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Wheels_right) == 0x000440, "Member 'AFiretank_C::Wheels_right' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Wheels_left) == 0x000450, "Member 'AFiretank_C::Wheels_left' has a wrong offset!");
static_assert(offsetof(AFiretank_C, PathComponent) == 0x000460, "Member 'AFiretank_C::PathComponent' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Dir) == 0x000468, "Member 'AFiretank_C::Dir' has a wrong offset!");
static_assert(offsetof(AFiretank_C, PathPoint_A) == 0x00046C, "Member 'AFiretank_C::PathPoint_A' has a wrong offset!");
static_assert(offsetof(AFiretank_C, PathPoint_B) == 0x000478, "Member 'AFiretank_C::PathPoint_B' has a wrong offset!");
static_assert(offsetof(AFiretank_C, PathDir) == 0x000484, "Member 'AFiretank_C::PathDir' has a wrong offset!");
static_assert(offsetof(AFiretank_C, IsBackingOff) == 0x000490, "Member 'AFiretank_C::IsBackingOff' has a wrong offset!");
static_assert(offsetof(AFiretank_C, MultWheels_right) == 0x000494, "Member 'AFiretank_C::MultWheels_right' has a wrong offset!");
static_assert(offsetof(AFiretank_C, MultWheels_left) == 0x000498, "Member 'AFiretank_C::MultWheels_left' has a wrong offset!");
static_assert(offsetof(AFiretank_C, SkipTurn) == 0x00049C, "Member 'AFiretank_C::SkipTurn' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Turning) == 0x00049D, "Member 'AFiretank_C::Turning' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Threads_R) == 0x0004A0, "Member 'AFiretank_C::Threads_R' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Threads_L) == 0x0004A4, "Member 'AFiretank_C::Threads_L' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Dynmat_thread_R) == 0x0004A8, "Member 'AFiretank_C::Dynmat_thread_R' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Dynmat_thread_L) == 0x0004B0, "Member 'AFiretank_C::Dynmat_thread_L' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Anim_thread_R) == 0x0004B8, "Member 'AFiretank_C::Anim_thread_R' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Anim_thread_L) == 0x0004C0, "Member 'AFiretank_C::Anim_thread_L' has a wrong offset!");
static_assert(offsetof(AFiretank_C, ConstraintsSus_right) == 0x0004C8, "Member 'AFiretank_C::ConstraintsSus_right' has a wrong offset!");
static_assert(offsetof(AFiretank_C, ConstraintsSus_left) == 0x0004D8, "Member 'AFiretank_C::ConstraintsSus_left' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Chasing) == 0x0004E8, "Member 'AFiretank_C::Chasing' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Chasing_lastLoc) == 0x0004F0, "Member 'AFiretank_C::Chasing_lastLoc' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Anim_tank) == 0x000500, "Member 'AFiretank_C::Anim_tank' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Active) == 0x000508, "Member 'AFiretank_C::Active' has a wrong offset!");
static_assert(offsetof(AFiretank_C, FlamethrowerComponent) == 0x000510, "Member 'AFiretank_C::FlamethrowerComponent' has a wrong offset!");
static_assert(offsetof(AFiretank_C, backoffVel) == 0x000518, "Member 'AFiretank_C::backoffVel' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Acceleration) == 0x00051C, "Member 'AFiretank_C::Acceleration' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Torque_R) == 0x000520, "Member 'AFiretank_C::Torque_R' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Torque_L) == 0x00052C, "Member 'AFiretank_C::Torque_L' has a wrong offset!");
static_assert(offsetof(AFiretank_C, ThreadsOffset) == 0x000538, "Member 'AFiretank_C::ThreadsOffset' has a wrong offset!");
static_assert(offsetof(AFiretank_C, AllSus) == 0x000548, "Member 'AFiretank_C::AllSus' has a wrong offset!");
static_assert(offsetof(AFiretank_C, AllWheels) == 0x000558, "Member 'AFiretank_C::AllWheels' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Health_R) == 0x000568, "Member 'AFiretank_C::Health_R' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Health_L) == 0x00056C, "Member 'AFiretank_C::Health_L' has a wrong offset!");
static_assert(offsetof(AFiretank_C, MaxHealth) == 0x000570, "Member 'AFiretank_C::MaxHealth' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Damaged) == 0x000574, "Member 'AFiretank_C::Damaged' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Stage) == 0x000578, "Member 'AFiretank_C::Stage' has a wrong offset!");
static_assert(offsetof(AFiretank_C, FiretankController) == 0x000580, "Member 'AFiretank_C::FiretankController' has a wrong offset!");
static_assert(offsetof(AFiretank_C, CharacterMovement) == 0x000588, "Member 'AFiretank_C::CharacterMovement' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Key) == 0x000590, "Member 'AFiretank_C::Key' has a wrong offset!");
static_assert(offsetof(AFiretank_C, IsInEvent) == 0x0005A0, "Member 'AFiretank_C::IsInEvent' has a wrong offset!");
static_assert(offsetof(AFiretank_C, Velocity) == 0x0005A4, "Member 'AFiretank_C::Velocity' has a wrong offset!");

}

