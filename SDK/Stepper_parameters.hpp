#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Stepper

#include "Basic.hpp"

#include "Enum_interactionActions_structs.hpp"
#include "Struct_triggerSave_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Struct_physSound_structs.hpp"
#include "InputCore_structs.hpp"
#include "AIModule_structs.hpp"


namespace SDK::Params
{

// Function stepper.stepper_C.getPriceMultiplier
// 0x0004 (0x0004 - 0x0000)
struct Stepper_C_GetPriceMultiplier final
{
public:
	float                                         PriceMult;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Stepper_C_GetPriceMultiplier) == 0x000004, "Wrong alignment on Stepper_C_GetPriceMultiplier");
static_assert(sizeof(Stepper_C_GetPriceMultiplier) == 0x000004, "Wrong size on Stepper_C_GetPriceMultiplier");
static_assert(offsetof(Stepper_C_GetPriceMultiplier, PriceMult) == 0x000000, "Member 'Stepper_C_GetPriceMultiplier::PriceMult' has a wrong offset!");

// Function stepper.stepper_C.skipRadial
// 0x0001 (0x0001 - 0x0000)
struct Stepper_C_SkipRadial final
{
public:
	bool                                          Skip;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Stepper_C_SkipRadial) == 0x000001, "Wrong alignment on Stepper_C_SkipRadial");
static_assert(sizeof(Stepper_C_SkipRadial) == 0x000001, "Wrong size on Stepper_C_SkipRadial");
static_assert(offsetof(Stepper_C_SkipRadial, Skip) == 0x000000, "Member 'Stepper_C_SkipRadial::Skip' has a wrong offset!");

// Function stepper.stepper_C.gascanFuel
// 0x0010 (0x0010 - 0x0000)
struct Stepper_C_GascanFuel final
{
public:
	class AProp_gascan_C*                         Gascan;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Fueled;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Stepper_C_GascanFuel) == 0x000008, "Wrong alignment on Stepper_C_GascanFuel");
static_assert(sizeof(Stepper_C_GascanFuel) == 0x000010, "Wrong size on Stepper_C_GascanFuel");
static_assert(offsetof(Stepper_C_GascanFuel, Gascan) == 0x000000, "Member 'Stepper_C_GascanFuel::Gascan' has a wrong offset!");
static_assert(offsetof(Stepper_C_GascanFuel, Fueled) == 0x000008, "Member 'Stepper_C_GascanFuel::Fueled' has a wrong offset!");

// Function stepper.stepper_C.getActionOptions
// 0x0050 (0x0050 - 0x0000)
struct Stepper_C_GetActionOptions final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Component;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         Options;                                           // 0x0018(0x0010)(Parm, OutParm)
	TArray<Enum_interactionActions>               Options_enum;                                      // 0x0028(0x0010)(Parm, OutParm)
	TArray<class FText>                           OptionsNamesOverlay;                               // 0x0038(0x0010)(Parm, OutParm)
	uint8                                         Number;                                            // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Stepper_C_GetActionOptions) == 0x000008, "Wrong alignment on Stepper_C_GetActionOptions");
static_assert(sizeof(Stepper_C_GetActionOptions) == 0x000050, "Wrong size on Stepper_C_GetActionOptions");
static_assert(offsetof(Stepper_C_GetActionOptions, Player) == 0x000000, "Member 'Stepper_C_GetActionOptions::Player' has a wrong offset!");
static_assert(offsetof(Stepper_C_GetActionOptions, Component) == 0x000008, "Member 'Stepper_C_GetActionOptions::Component' has a wrong offset!");
static_assert(offsetof(Stepper_C_GetActionOptions, Actor) == 0x000010, "Member 'Stepper_C_GetActionOptions::Actor' has a wrong offset!");
static_assert(offsetof(Stepper_C_GetActionOptions, Options) == 0x000018, "Member 'Stepper_C_GetActionOptions::Options' has a wrong offset!");
static_assert(offsetof(Stepper_C_GetActionOptions, Options_enum) == 0x000028, "Member 'Stepper_C_GetActionOptions::Options_enum' has a wrong offset!");
static_assert(offsetof(Stepper_C_GetActionOptions, OptionsNamesOverlay) == 0x000038, "Member 'Stepper_C_GetActionOptions::OptionsNamesOverlay' has a wrong offset!");
static_assert(offsetof(Stepper_C_GetActionOptions, Number) == 0x000048, "Member 'Stepper_C_GetActionOptions::Number' has a wrong offset!");

// Function stepper.stepper_C.setPath
// 0x0018 (0x0018 - 0x0000)
struct Stepper_C_SetPath final
{
public:
	TArray<struct FVector>                        Path;                                              // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Return;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Stepper_C_SetPath) == 0x000008, "Wrong alignment on Stepper_C_SetPath");
static_assert(sizeof(Stepper_C_SetPath) == 0x000018, "Wrong size on Stepper_C_SetPath");
static_assert(offsetof(Stepper_C_SetPath, Path) == 0x000000, "Member 'Stepper_C_SetPath::Path' has a wrong offset!");
static_assert(offsetof(Stepper_C_SetPath, Return) == 0x000010, "Member 'Stepper_C_SetPath::Return' has a wrong offset!");

// Function stepper.stepper_C.toolboxFix
// 0x0010 (0x0010 - 0x0000)
struct Stepper_C_ToolboxFix final
{
public:
	class AProp_toolbox_C*                        Toolbox;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Stepper_C_ToolboxFix) == 0x000008, "Wrong alignment on Stepper_C_ToolboxFix");
static_assert(sizeof(Stepper_C_ToolboxFix) == 0x000010, "Wrong size on Stepper_C_ToolboxFix");
static_assert(offsetof(Stepper_C_ToolboxFix, Toolbox) == 0x000000, "Member 'Stepper_C_ToolboxFix::Toolbox' has a wrong offset!");
static_assert(offsetof(Stepper_C_ToolboxFix, Return) == 0x000008, "Member 'Stepper_C_ToolboxFix::Return' has a wrong offset!");

// Function stepper.stepper_C.GetKey
// 0x0050 (0x0050 - 0x0000)
struct Stepper_C_GetKey final
{
public:
	class FString                                 Param_Key;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmpty_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<uint8>                                 CallFunc_GenerateRandomBytes_ByteArray;            // 0x0020(0x0010)(ReferenceParm)
	class FString                                 CallFunc_BytesToBase64Url_ReturnValue;             // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Stepper_C_GetKey) == 0x000008, "Wrong alignment on Stepper_C_GetKey");
static_assert(sizeof(Stepper_C_GetKey) == 0x000050, "Wrong size on Stepper_C_GetKey");
static_assert(offsetof(Stepper_C_GetKey, Param_Key) == 0x000000, "Member 'Stepper_C_GetKey::Param_Key' has a wrong offset!");
static_assert(offsetof(Stepper_C_GetKey, CallFunc_IsEmpty_ReturnValue) == 0x000010, "Member 'Stepper_C_GetKey::CallFunc_IsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(Stepper_C_GetKey, CallFunc_getMainGamemode_AsMain_Gamemode) == 0x000018, "Member 'Stepper_C_GetKey::CallFunc_getMainGamemode_AsMain_Gamemode' has a wrong offset!");
static_assert(offsetof(Stepper_C_GetKey, CallFunc_GenerateRandomBytes_ByteArray) == 0x000020, "Member 'Stepper_C_GetKey::CallFunc_GenerateRandomBytes_ByteArray' has a wrong offset!");
static_assert(offsetof(Stepper_C_GetKey, CallFunc_BytesToBase64Url_ReturnValue) == 0x000030, "Member 'Stepper_C_GetKey::CallFunc_BytesToBase64Url_ReturnValue' has a wrong offset!");
static_assert(offsetof(Stepper_C_GetKey, CallFunc_Array_Add_ReturnValue) == 0x000040, "Member 'Stepper_C_GetKey::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(Stepper_C_GetKey, CallFunc_Array_Add_ReturnValue_1) == 0x000044, "Member 'Stepper_C_GetKey::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Stepper_C_GetKey, CallFunc_Array_Find_ReturnValue) == 0x000048, "Member 'Stepper_C_GetKey::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(Stepper_C_GetKey, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00004C, "Member 'Stepper_C_GetKey::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function stepper.stepper_C.canBeUsedHold
// 0x0001 (0x0001 - 0x0000)
struct Stepper_C_CanBeUsedHold final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Stepper_C_CanBeUsedHold) == 0x000001, "Wrong alignment on Stepper_C_CanBeUsedHold");
static_assert(sizeof(Stepper_C_CanBeUsedHold) == 0x000001, "Wrong size on Stepper_C_CanBeUsedHold");
static_assert(offsetof(Stepper_C_CanBeUsedHold, Return) == 0x000000, "Member 'Stepper_C_CanBeUsedHold::Return' has a wrong offset!");

// Function stepper.stepper_C.processKeys
// 0x0001 (0x0001 - 0x0000)
struct Stepper_C_ProcessKeys final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Stepper_C_ProcessKeys) == 0x000001, "Wrong alignment on Stepper_C_ProcessKeys");
static_assert(sizeof(Stepper_C_ProcessKeys) == 0x000001, "Wrong size on Stepper_C_ProcessKeys");
static_assert(offsetof(Stepper_C_ProcessKeys, Return) == 0x000000, "Member 'Stepper_C_ProcessKeys::Return' has a wrong offset!");

// Function stepper.stepper_C.getOnlyKey
// 0x0010 (0x0010 - 0x0000)
struct Stepper_C_GetOnlyKey final
{
public:
	class FString                                 Param_Key;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Stepper_C_GetOnlyKey) == 0x000008, "Wrong alignment on Stepper_C_GetOnlyKey");
static_assert(sizeof(Stepper_C_GetOnlyKey) == 0x000010, "Wrong size on Stepper_C_GetOnlyKey");
static_assert(offsetof(Stepper_C_GetOnlyKey, Param_Key) == 0x000000, "Member 'Stepper_C_GetOnlyKey::Param_Key' has a wrong offset!");

// Function stepper.stepper_C.gatherDataFromKeyT
// 0x0001 (0x0001 - 0x0000)
struct Stepper_C_GatherDataFromKeyT final
{
public:
	bool                                          Gather;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Stepper_C_GatherDataFromKeyT) == 0x000001, "Wrong alignment on Stepper_C_GatherDataFromKeyT");
static_assert(sizeof(Stepper_C_GatherDataFromKeyT) == 0x000001, "Wrong size on Stepper_C_GatherDataFromKeyT");
static_assert(offsetof(Stepper_C_GatherDataFromKeyT, Gather) == 0x000000, "Member 'Stepper_C_GatherDataFromKeyT::Gather' has a wrong offset!");

// Function stepper.stepper_C.ignoreSave_trigger
// 0x0001 (0x0001 - 0x0000)
struct Stepper_C_IgnoreSave_trigger final
{
public:
	bool                                          Ignore;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Stepper_C_IgnoreSave_trigger) == 0x000001, "Wrong alignment on Stepper_C_IgnoreSave_trigger");
static_assert(sizeof(Stepper_C_IgnoreSave_trigger) == 0x000001, "Wrong size on Stepper_C_IgnoreSave_trigger");
static_assert(offsetof(Stepper_C_IgnoreSave_trigger, Ignore) == 0x000000, "Member 'Stepper_C_IgnoreSave_trigger::Ignore' has a wrong offset!");

// Function stepper.stepper_C.loadTriggerData
// 0x0100 (0x0100 - 0x0000)
struct Stepper_C_LoadTriggerData final
{
public:
	struct FStruct_triggerSave                    Data;                                              // 0x0000(0x00F0)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x00F0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Get_Item;                           // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Get_Item_1;                         // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Stepper_C_LoadTriggerData) == 0x000010, "Wrong alignment on Stepper_C_LoadTriggerData");
static_assert(sizeof(Stepper_C_LoadTriggerData) == 0x000100, "Wrong size on Stepper_C_LoadTriggerData");
static_assert(offsetof(Stepper_C_LoadTriggerData, Data) == 0x000000, "Member 'Stepper_C_LoadTriggerData::Data' has a wrong offset!");
static_assert(offsetof(Stepper_C_LoadTriggerData, Return) == 0x0000F0, "Member 'Stepper_C_LoadTriggerData::Return' has a wrong offset!");
static_assert(offsetof(Stepper_C_LoadTriggerData, CallFunc_Array_Get_Item) == 0x0000F4, "Member 'Stepper_C_LoadTriggerData::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Stepper_C_LoadTriggerData, CallFunc_Array_Get_Item_1) == 0x0000F8, "Member 'Stepper_C_LoadTriggerData::CallFunc_Array_Get_Item_1' has a wrong offset!");

// Function stepper.stepper_C.getTriggerData
// 0x0240 (0x0240 - 0x0000)
struct Stepper_C_GetTriggerData final
{
public:
	struct FStruct_triggerSave                    Data;                                              // 0x0000(0x00F0)(Parm, OutParm, HasGetValueTypeHash)
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x00F0(0x0010)(ReferenceParm)
	TArray<bool>                                  K2Node_MakeArray_Array_1;                          // 0x0100(0x0010)(ReferenceParm)
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0110(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_148[0x8];                                      // 0x0148(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_triggerSave                    K2Node_MakeStruct_struct_triggerSave;              // 0x0150(0x00F0)(HasGetValueTypeHash)
};
static_assert(alignof(Stepper_C_GetTriggerData) == 0x000010, "Wrong alignment on Stepper_C_GetTriggerData");
static_assert(sizeof(Stepper_C_GetTriggerData) == 0x000240, "Wrong size on Stepper_C_GetTriggerData");
static_assert(offsetof(Stepper_C_GetTriggerData, Data) == 0x000000, "Member 'Stepper_C_GetTriggerData::Data' has a wrong offset!");
static_assert(offsetof(Stepper_C_GetTriggerData, K2Node_MakeArray_Array) == 0x0000F0, "Member 'Stepper_C_GetTriggerData::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Stepper_C_GetTriggerData, K2Node_MakeArray_Array_1) == 0x000100, "Member 'Stepper_C_GetTriggerData::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(Stepper_C_GetTriggerData, CallFunc_GetTransform_ReturnValue) == 0x000110, "Member 'Stepper_C_GetTriggerData::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(Stepper_C_GetTriggerData, CallFunc_GetObjectClass_ReturnValue) == 0x000140, "Member 'Stepper_C_GetTriggerData::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(Stepper_C_GetTriggerData, K2Node_MakeStruct_struct_triggerSave) == 0x000150, "Member 'Stepper_C_GetTriggerData::K2Node_MakeStruct_struct_triggerSave' has a wrong offset!");

// Function stepper.stepper_C.setPoint
// 0x000C (0x000C - 0x0000)
struct Stepper_C_SetPoint final
{
public:
	struct FVector                                CallFunc_Array_Get_Item;                           // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Stepper_C_SetPoint) == 0x000004, "Wrong alignment on Stepper_C_SetPoint");
static_assert(sizeof(Stepper_C_SetPoint) == 0x00000C, "Wrong size on Stepper_C_SetPoint");
static_assert(offsetof(Stepper_C_SetPoint, CallFunc_Array_Get_Item) == 0x000000, "Member 'Stepper_C_SetPoint::CallFunc_Array_Get_Item' has a wrong offset!");

// Function stepper.stepper_C.stepOn
// 0x01A0 (0x01A0 - 0x0000)
struct Stepper_C_StepOn final
{
public:
	TArray<EObjectTypeQuery>                      A;                                                 // 0x0000(0x0010)(Edit, BlueprintVisible)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0010(0x0010)(ConstParm, ReferenceParm)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0020(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_SphereTraceSingleForObjects_OutHit;       // 0x0050(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingleForObjects_ReturnValue;  // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DB[0x1];                                       // 0x00DB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0128(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0144(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0150(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_physSound_return;                         // 0x015C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15D[0x3];                                      // 0x015D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_physSound                      CallFunc_physSound_data;                           // 0x0160(0x0040)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Stepper_C_StepOn) == 0x000008, "Wrong alignment on Stepper_C_StepOn");
static_assert(sizeof(Stepper_C_StepOn) == 0x0001A0, "Wrong size on Stepper_C_StepOn");
static_assert(offsetof(Stepper_C_StepOn, A) == 0x000000, "Member 'Stepper_C_StepOn::A' has a wrong offset!");
static_assert(offsetof(Stepper_C_StepOn, Temp_object_Variable) == 0x000010, "Member 'Stepper_C_StepOn::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(Stepper_C_StepOn, K2Node_MakeArray_Array) == 0x000020, "Member 'Stepper_C_StepOn::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Stepper_C_StepOn, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000030, "Member 'Stepper_C_StepOn::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Stepper_C_StepOn, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00003C, "Member 'Stepper_C_StepOn::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Stepper_C_StepOn, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000040, "Member 'Stepper_C_StepOn::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Stepper_C_StepOn, CallFunc_FClamp_ReturnValue) == 0x00004C, "Member 'Stepper_C_StepOn::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(Stepper_C_StepOn, CallFunc_SphereTraceSingleForObjects_OutHit) == 0x000050, "Member 'Stepper_C_StepOn::CallFunc_SphereTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(Stepper_C_StepOn, CallFunc_SphereTraceSingleForObjects_ReturnValue) == 0x0000D8, "Member 'Stepper_C_StepOn::CallFunc_SphereTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(Stepper_C_StepOn, CallFunc_BreakHitResult_bBlockingHit) == 0x0000D9, "Member 'Stepper_C_StepOn::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(Stepper_C_StepOn, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000DA, "Member 'Stepper_C_StepOn::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(Stepper_C_StepOn, CallFunc_BreakHitResult_Time) == 0x0000DC, "Member 'Stepper_C_StepOn::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(Stepper_C_StepOn, CallFunc_BreakHitResult_Distance) == 0x0000E0, "Member 'Stepper_C_StepOn::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(Stepper_C_StepOn, CallFunc_BreakHitResult_Location) == 0x0000E4, "Member 'Stepper_C_StepOn::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(Stepper_C_StepOn, CallFunc_BreakHitResult_ImpactPoint) == 0x0000F0, "Member 'Stepper_C_StepOn::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(Stepper_C_StepOn, CallFunc_BreakHitResult_Normal) == 0x0000FC, "Member 'Stepper_C_StepOn::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(Stepper_C_StepOn, CallFunc_BreakHitResult_ImpactNormal) == 0x000108, "Member 'Stepper_C_StepOn::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(Stepper_C_StepOn, CallFunc_BreakHitResult_PhysMat) == 0x000118, "Member 'Stepper_C_StepOn::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(Stepper_C_StepOn, CallFunc_BreakHitResult_HitActor) == 0x000120, "Member 'Stepper_C_StepOn::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(Stepper_C_StepOn, CallFunc_BreakHitResult_HitComponent) == 0x000128, "Member 'Stepper_C_StepOn::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(Stepper_C_StepOn, CallFunc_BreakHitResult_HitBoneName) == 0x000130, "Member 'Stepper_C_StepOn::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(Stepper_C_StepOn, CallFunc_BreakHitResult_HitItem) == 0x000138, "Member 'Stepper_C_StepOn::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(Stepper_C_StepOn, CallFunc_BreakHitResult_ElementIndex) == 0x00013C, "Member 'Stepper_C_StepOn::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(Stepper_C_StepOn, CallFunc_BreakHitResult_FaceIndex) == 0x000140, "Member 'Stepper_C_StepOn::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(Stepper_C_StepOn, CallFunc_BreakHitResult_TraceStart) == 0x000144, "Member 'Stepper_C_StepOn::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(Stepper_C_StepOn, CallFunc_BreakHitResult_TraceEnd) == 0x000150, "Member 'Stepper_C_StepOn::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(Stepper_C_StepOn, CallFunc_physSound_return) == 0x00015C, "Member 'Stepper_C_StepOn::CallFunc_physSound_return' has a wrong offset!");
static_assert(offsetof(Stepper_C_StepOn, CallFunc_physSound_data) == 0x000160, "Member 'Stepper_C_StepOn::CallFunc_physSound_data' has a wrong offset!");

// Function stepper.stepper_C.OnFail_B31AF7A44B7A0CD51981ACA205B32EC5
// 0x0001 (0x0001 - 0x0000)
struct Stepper_C_OnFail_B31AF7A44B7A0CD51981ACA205B32EC5 final
{
public:
	EPathFollowingResult                          MovementResult;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Stepper_C_OnFail_B31AF7A44B7A0CD51981ACA205B32EC5) == 0x000001, "Wrong alignment on Stepper_C_OnFail_B31AF7A44B7A0CD51981ACA205B32EC5");
static_assert(sizeof(Stepper_C_OnFail_B31AF7A44B7A0CD51981ACA205B32EC5) == 0x000001, "Wrong size on Stepper_C_OnFail_B31AF7A44B7A0CD51981ACA205B32EC5");
static_assert(offsetof(Stepper_C_OnFail_B31AF7A44B7A0CD51981ACA205B32EC5, MovementResult) == 0x000000, "Member 'Stepper_C_OnFail_B31AF7A44B7A0CD51981ACA205B32EC5::MovementResult' has a wrong offset!");

// Function stepper.stepper_C.OnSuccess_B31AF7A44B7A0CD51981ACA205B32EC5
// 0x0001 (0x0001 - 0x0000)
struct Stepper_C_OnSuccess_B31AF7A44B7A0CD51981ACA205B32EC5 final
{
public:
	EPathFollowingResult                          MovementResult;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Stepper_C_OnSuccess_B31AF7A44B7A0CD51981ACA205B32EC5) == 0x000001, "Wrong alignment on Stepper_C_OnSuccess_B31AF7A44B7A0CD51981ACA205B32EC5");
static_assert(sizeof(Stepper_C_OnSuccess_B31AF7A44B7A0CD51981ACA205B32EC5) == 0x000001, "Wrong size on Stepper_C_OnSuccess_B31AF7A44B7A0CD51981ACA205B32EC5");
static_assert(offsetof(Stepper_C_OnSuccess_B31AF7A44B7A0CD51981ACA205B32EC5, MovementResult) == 0x000000, "Member 'Stepper_C_OnSuccess_B31AF7A44B7A0CD51981ACA205B32EC5::MovementResult' has a wrong offset!");

// Function stepper.stepper_C.ImpactDamage
// 0x00A8 (0x00A8 - 0x0000)
struct Stepper_C_ImpactDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0004(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0090(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Impact;                                            // 0x0098(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Stepper_C_ImpactDamage) == 0x000008, "Wrong alignment on Stepper_C_ImpactDamage");
static_assert(sizeof(Stepper_C_ImpactDamage) == 0x0000A8, "Wrong size on Stepper_C_ImpactDamage");
static_assert(offsetof(Stepper_C_ImpactDamage, Damage) == 0x000000, "Member 'Stepper_C_ImpactDamage::Damage' has a wrong offset!");
static_assert(offsetof(Stepper_C_ImpactDamage, Hit) == 0x000004, "Member 'Stepper_C_ImpactDamage::Hit' has a wrong offset!");
static_assert(offsetof(Stepper_C_ImpactDamage, Actor) == 0x000090, "Member 'Stepper_C_ImpactDamage::Actor' has a wrong offset!");
static_assert(offsetof(Stepper_C_ImpactDamage, Impact) == 0x000098, "Member 'Stepper_C_ImpactDamage::Impact' has a wrong offset!");

// Function stepper.stepper_C.enterWater
// 0x0008 (0x0008 - 0x0000)
struct Stepper_C_EnterWater final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Stepper_C_EnterWater) == 0x000008, "Wrong alignment on Stepper_C_EnterWater");
static_assert(sizeof(Stepper_C_EnterWater) == 0x000008, "Wrong size on Stepper_C_EnterWater");
static_assert(offsetof(Stepper_C_EnterWater, Water) == 0x000000, "Member 'Stepper_C_EnterWater::Water' has a wrong offset!");

// Function stepper.stepper_C.leaveWater
// 0x0008 (0x0008 - 0x0000)
struct Stepper_C_LeaveWater final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Stepper_C_LeaveWater) == 0x000008, "Wrong alignment on Stepper_C_LeaveWater");
static_assert(sizeof(Stepper_C_LeaveWater) == 0x000008, "Wrong size on Stepper_C_LeaveWater");
static_assert(offsetof(Stepper_C_LeaveWater, Water) == 0x000000, "Member 'Stepper_C_LeaveWater::Water' has a wrong offset!");

// Function stepper.stepper_C.enterWaterOrigin
// 0x0008 (0x0008 - 0x0000)
struct Stepper_C_EnterWaterOrigin final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Stepper_C_EnterWaterOrigin) == 0x000008, "Wrong alignment on Stepper_C_EnterWaterOrigin");
static_assert(sizeof(Stepper_C_EnterWaterOrigin) == 0x000008, "Wrong size on Stepper_C_EnterWaterOrigin");
static_assert(offsetof(Stepper_C_EnterWaterOrigin, Water) == 0x000000, "Member 'Stepper_C_EnterWaterOrigin::Water' has a wrong offset!");

// Function stepper.stepper_C.leaveWaterOrigin
// 0x0008 (0x0008 - 0x0000)
struct Stepper_C_LeaveWaterOrigin final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Stepper_C_LeaveWaterOrigin) == 0x000008, "Wrong alignment on Stepper_C_LeaveWaterOrigin");
static_assert(sizeof(Stepper_C_LeaveWaterOrigin) == 0x000008, "Wrong size on Stepper_C_LeaveWaterOrigin");
static_assert(offsetof(Stepper_C_LeaveWaterOrigin, Water) == 0x000000, "Member 'Stepper_C_LeaveWaterOrigin::Water' has a wrong offset!");

// Function stepper.stepper_C.virus
// 0x0001 (0x0001 - 0x0000)
struct Stepper_C_Virus final
{
public:
	bool                                          Activate;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Stepper_C_Virus) == 0x000001, "Wrong alignment on Stepper_C_Virus");
static_assert(sizeof(Stepper_C_Virus) == 0x000001, "Wrong size on Stepper_C_Virus");
static_assert(offsetof(Stepper_C_Virus, Activate) == 0x000000, "Member 'Stepper_C_Virus::Activate' has a wrong offset!");

// Function stepper.stepper_C.setPropProps
// 0x0003 (0x0003 - 0x0000)
struct Stepper_C_SetPropProps final
{
public:
	bool                                          Static;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Frozen;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Active;                                            // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Stepper_C_SetPropProps) == 0x000001, "Wrong alignment on Stepper_C_SetPropProps");
static_assert(sizeof(Stepper_C_SetPropProps) == 0x000003, "Wrong size on Stepper_C_SetPropProps");
static_assert(offsetof(Stepper_C_SetPropProps, Static) == 0x000000, "Member 'Stepper_C_SetPropProps::Static' has a wrong offset!");
static_assert(offsetof(Stepper_C_SetPropProps, Frozen) == 0x000001, "Member 'Stepper_C_SetPropProps::Frozen' has a wrong offset!");
static_assert(offsetof(Stepper_C_SetPropProps, Active) == 0x000002, "Member 'Stepper_C_SetPropProps::Active' has a wrong offset!");

// Function stepper.stepper_C.addDamage
// 0x00A8 (0x00A8 - 0x0000)
struct Stepper_C_AddDamage final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x000C(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                Impact;                                            // 0x0094(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipSetting;                                       // 0x00A0(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Stepper_C_AddDamage) == 0x000008, "Wrong alignment on Stepper_C_AddDamage");
static_assert(sizeof(Stepper_C_AddDamage) == 0x0000A8, "Wrong size on Stepper_C_AddDamage");
static_assert(offsetof(Stepper_C_AddDamage, Actor) == 0x000000, "Member 'Stepper_C_AddDamage::Actor' has a wrong offset!");
static_assert(offsetof(Stepper_C_AddDamage, Damage) == 0x000008, "Member 'Stepper_C_AddDamage::Damage' has a wrong offset!");
static_assert(offsetof(Stepper_C_AddDamage, Hit) == 0x00000C, "Member 'Stepper_C_AddDamage::Hit' has a wrong offset!");
static_assert(offsetof(Stepper_C_AddDamage, Impact) == 0x000094, "Member 'Stepper_C_AddDamage::Impact' has a wrong offset!");
static_assert(offsetof(Stepper_C_AddDamage, SkipSetting) == 0x0000A0, "Member 'Stepper_C_AddDamage::SkipSetting' has a wrong offset!");

// Function stepper.stepper_C.setKey
// 0x0010 (0x0010 - 0x0000)
struct Stepper_C_SetKey final
{
public:
	class FString                                 Param_Key;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Stepper_C_SetKey) == 0x000008, "Wrong alignment on Stepper_C_SetKey");
static_assert(sizeof(Stepper_C_SetKey) == 0x000010, "Wrong size on Stepper_C_SetKey");
static_assert(offsetof(Stepper_C_SetKey, Param_Key) == 0x000000, "Member 'Stepper_C_SetKey::Param_Key' has a wrong offset!");

// Function stepper.stepper_C.steppedOn
// 0x0090 (0x0090 - 0x0000)
struct Stepper_C_SteppedOn final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Stepper_C_SteppedOn) == 0x000008, "Wrong alignment on Stepper_C_SteppedOn");
static_assert(sizeof(Stepper_C_SteppedOn) == 0x000090, "Wrong size on Stepper_C_SteppedOn");
static_assert(offsetof(Stepper_C_SteppedOn, Player) == 0x000000, "Member 'Stepper_C_SteppedOn::Player' has a wrong offset!");
static_assert(offsetof(Stepper_C_SteppedOn, Hit) == 0x000008, "Member 'Stepper_C_SteppedOn::Hit' has a wrong offset!");

// Function stepper.stepper_C.fireDamage
// 0x0004 (0x0004 - 0x0000)
struct Stepper_C_FireDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Stepper_C_FireDamage) == 0x000004, "Wrong alignment on Stepper_C_FireDamage");
static_assert(sizeof(Stepper_C_FireDamage) == 0x000004, "Wrong size on Stepper_C_FireDamage");
static_assert(offsetof(Stepper_C_FireDamage, Damage) == 0x000000, "Member 'Stepper_C_FireDamage::Damage' has a wrong offset!");

// Function stepper.stepper_C.ignite
// 0x0004 (0x0004 - 0x0000)
struct Stepper_C_Ignite final
{
public:
	float                                         Fuel;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Stepper_C_Ignite) == 0x000004, "Wrong alignment on Stepper_C_Ignite");
static_assert(sizeof(Stepper_C_Ignite) == 0x000004, "Wrong size on Stepper_C_Ignite");
static_assert(offsetof(Stepper_C_Ignite, Fuel) == 0x000000, "Member 'Stepper_C_Ignite::Fuel' has a wrong offset!");

// Function stepper.stepper_C.receivedPhyiscsDamage
// 0x008C (0x008C - 0x0000)
struct Stepper_C_ReceivedPhyiscsDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hot;                                               // 0x0004(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Stepper_C_ReceivedPhyiscsDamage) == 0x000004, "Wrong alignment on Stepper_C_ReceivedPhyiscsDamage");
static_assert(sizeof(Stepper_C_ReceivedPhyiscsDamage) == 0x00008C, "Wrong size on Stepper_C_ReceivedPhyiscsDamage");
static_assert(offsetof(Stepper_C_ReceivedPhyiscsDamage, Damage) == 0x000000, "Member 'Stepper_C_ReceivedPhyiscsDamage::Damage' has a wrong offset!");
static_assert(offsetof(Stepper_C_ReceivedPhyiscsDamage, Hot) == 0x000004, "Member 'Stepper_C_ReceivedPhyiscsDamage::Hot' has a wrong offset!");

// Function stepper.stepper_C.actionOptionIndex
// 0x0098 (0x0098 - 0x0000)
struct Stepper_C_ActionOptionIndex final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	Enum_interactionActions                       Action;                                            // 0x0090(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Stepper_C_ActionOptionIndex) == 0x000008, "Wrong alignment on Stepper_C_ActionOptionIndex");
static_assert(sizeof(Stepper_C_ActionOptionIndex) == 0x000098, "Wrong size on Stepper_C_ActionOptionIndex");
static_assert(offsetof(Stepper_C_ActionOptionIndex, Player) == 0x000000, "Member 'Stepper_C_ActionOptionIndex::Player' has a wrong offset!");
static_assert(offsetof(Stepper_C_ActionOptionIndex, Hit) == 0x000008, "Member 'Stepper_C_ActionOptionIndex::Hit' has a wrong offset!");
static_assert(offsetof(Stepper_C_ActionOptionIndex, Action) == 0x000090, "Member 'Stepper_C_ActionOptionIndex::Action' has a wrong offset!");

// Function stepper.stepper_C.playerHandUse_RMB
// 0x0008 (0x0008 - 0x0000)
struct Stepper_C_PlayerHandUse_RMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Stepper_C_PlayerHandUse_RMB) == 0x000008, "Wrong alignment on Stepper_C_PlayerHandUse_RMB");
static_assert(sizeof(Stepper_C_PlayerHandUse_RMB) == 0x000008, "Wrong size on Stepper_C_PlayerHandUse_RMB");
static_assert(offsetof(Stepper_C_PlayerHandUse_RMB, Player) == 0x000000, "Member 'Stepper_C_PlayerHandUse_RMB::Player' has a wrong offset!");

// Function stepper.stepper_C.playerHandUse_LMB
// 0x0008 (0x0008 - 0x0000)
struct Stepper_C_PlayerHandUse_LMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Stepper_C_PlayerHandUse_LMB) == 0x000008, "Wrong alignment on Stepper_C_PlayerHandUse_LMB");
static_assert(sizeof(Stepper_C_PlayerHandUse_LMB) == 0x000008, "Wrong size on Stepper_C_PlayerHandUse_LMB");
static_assert(offsetof(Stepper_C_PlayerHandUse_LMB, Player) == 0x000000, "Member 'Stepper_C_PlayerHandUse_LMB::Player' has a wrong offset!");

// Function stepper.stepper_C.exploded
// 0x0010 (0x0010 - 0x0000)
struct Stepper_C_Exploded final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Stepper_C_Exploded) == 0x000004, "Wrong alignment on Stepper_C_Exploded");
static_assert(sizeof(Stepper_C_Exploded) == 0x000010, "Wrong size on Stepper_C_Exploded");
static_assert(offsetof(Stepper_C_Exploded, Damage) == 0x000000, "Member 'Stepper_C_Exploded::Damage' has a wrong offset!");
static_assert(offsetof(Stepper_C_Exploded, Location) == 0x000004, "Member 'Stepper_C_Exploded::Location' has a wrong offset!");

// Function stepper.stepper_C.playerHandRelease_RMB
// 0x0008 (0x0008 - 0x0000)
struct Stepper_C_PlayerHandRelease_RMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Stepper_C_PlayerHandRelease_RMB) == 0x000008, "Wrong alignment on Stepper_C_PlayerHandRelease_RMB");
static_assert(sizeof(Stepper_C_PlayerHandRelease_RMB) == 0x000008, "Wrong size on Stepper_C_PlayerHandRelease_RMB");
static_assert(offsetof(Stepper_C_PlayerHandRelease_RMB, Player) == 0x000000, "Member 'Stepper_C_PlayerHandRelease_RMB::Player' has a wrong offset!");

// Function stepper.stepper_C.playerHandRelease_LMB
// 0x0008 (0x0008 - 0x0000)
struct Stepper_C_PlayerHandRelease_LMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Stepper_C_PlayerHandRelease_LMB) == 0x000008, "Wrong alignment on Stepper_C_PlayerHandRelease_LMB");
static_assert(sizeof(Stepper_C_PlayerHandRelease_LMB) == 0x000008, "Wrong size on Stepper_C_PlayerHandRelease_LMB");
static_assert(offsetof(Stepper_C_PlayerHandRelease_LMB, Player) == 0x000000, "Member 'Stepper_C_PlayerHandRelease_LMB::Player' has a wrong offset!");

// Function stepper.stepper_C.playerHandMouseWheel
// 0x0010 (0x0010 - 0x0000)
struct Stepper_C_PlayerHandMouseWheel final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WheelDelta;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Stepper_C_PlayerHandMouseWheel) == 0x000008, "Wrong alignment on Stepper_C_PlayerHandMouseWheel");
static_assert(sizeof(Stepper_C_PlayerHandMouseWheel) == 0x000010, "Wrong size on Stepper_C_PlayerHandMouseWheel");
static_assert(offsetof(Stepper_C_PlayerHandMouseWheel, Player) == 0x000000, "Member 'Stepper_C_PlayerHandMouseWheel::Player' has a wrong offset!");
static_assert(offsetof(Stepper_C_PlayerHandMouseWheel, WheelDelta) == 0x000008, "Member 'Stepper_C_PlayerHandMouseWheel::WheelDelta' has a wrong offset!");

// Function stepper.stepper_C.playerHandMouse
// 0x0010 (0x0010 - 0x0000)
struct Stepper_C_PlayerHandMouse final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Mouse;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Stepper_C_PlayerHandMouse) == 0x000008, "Wrong alignment on Stepper_C_PlayerHandMouse");
static_assert(sizeof(Stepper_C_PlayerHandMouse) == 0x000010, "Wrong size on Stepper_C_PlayerHandMouse");
static_assert(offsetof(Stepper_C_PlayerHandMouse, Player) == 0x000000, "Member 'Stepper_C_PlayerHandMouse::Player' has a wrong offset!");
static_assert(offsetof(Stepper_C_PlayerHandMouse, Mouse) == 0x000008, "Member 'Stepper_C_PlayerHandMouse::Mouse' has a wrong offset!");

// Function stepper.stepper_C.playerHandAnyKey
// 0x0028 (0x0028 - 0x0000)
struct Stepper_C_PlayerHandAnyKey final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   Param_Key;                                         // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Pressed;                                           // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Stepper_C_PlayerHandAnyKey) == 0x000008, "Wrong alignment on Stepper_C_PlayerHandAnyKey");
static_assert(sizeof(Stepper_C_PlayerHandAnyKey) == 0x000028, "Wrong size on Stepper_C_PlayerHandAnyKey");
static_assert(offsetof(Stepper_C_PlayerHandAnyKey, Player) == 0x000000, "Member 'Stepper_C_PlayerHandAnyKey::Player' has a wrong offset!");
static_assert(offsetof(Stepper_C_PlayerHandAnyKey, Param_Key) == 0x000008, "Member 'Stepper_C_PlayerHandAnyKey::Param_Key' has a wrong offset!");
static_assert(offsetof(Stepper_C_PlayerHandAnyKey, Pressed) == 0x000020, "Member 'Stepper_C_PlayerHandAnyKey::Pressed' has a wrong offset!");

// Function stepper.stepper_C.addTemperature
// 0x0004 (0x0004 - 0x0000)
struct Stepper_C_AddTemperature final
{
public:
	float                                         Temperature;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Stepper_C_AddTemperature) == 0x000004, "Wrong alignment on Stepper_C_AddTemperature");
static_assert(sizeof(Stepper_C_AddTemperature) == 0x000004, "Wrong size on Stepper_C_AddTemperature");
static_assert(offsetof(Stepper_C_AddTemperature, Temperature) == 0x000000, "Member 'Stepper_C_AddTemperature::Temperature' has a wrong offset!");

// Function stepper.stepper_C.accumulateTemperature
// 0x0008 (0x0008 - 0x0000)
struct Stepper_C_AccumulateTemperature final
{
public:
	float                                         Temperature;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Stepper_C_AccumulateTemperature) == 0x000004, "Wrong alignment on Stepper_C_AccumulateTemperature");
static_assert(sizeof(Stepper_C_AccumulateTemperature) == 0x000008, "Wrong size on Stepper_C_AccumulateTemperature");
static_assert(offsetof(Stepper_C_AccumulateTemperature, Temperature) == 0x000000, "Member 'Stepper_C_AccumulateTemperature::Temperature' has a wrong offset!");
static_assert(offsetof(Stepper_C_AccumulateTemperature, Speed) == 0x000004, "Member 'Stepper_C_AccumulateTemperature::Speed' has a wrong offset!");

// Function stepper.stepper_C.ActionName
// 0x00A0 (0x00A0 - 0x0000)
struct Stepper_C_ActionName final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class FString                                 Param_Name;                                        // 0x0090(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Stepper_C_ActionName) == 0x000008, "Wrong alignment on Stepper_C_ActionName");
static_assert(sizeof(Stepper_C_ActionName) == 0x0000A0, "Wrong size on Stepper_C_ActionName");
static_assert(offsetof(Stepper_C_ActionName, Player) == 0x000000, "Member 'Stepper_C_ActionName::Player' has a wrong offset!");
static_assert(offsetof(Stepper_C_ActionName, Hit) == 0x000008, "Member 'Stepper_C_ActionName::Hit' has a wrong offset!");
static_assert(offsetof(Stepper_C_ActionName, Param_Name) == 0x000090, "Member 'Stepper_C_ActionName::Param_Name' has a wrong offset!");

// Function stepper.stepper_C.stepped
// 0x0004 (0x0004 - 0x0000)
struct Stepper_C_Stepped final
{
public:
	float                                         Param_Volume;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Stepper_C_Stepped) == 0x000004, "Wrong alignment on Stepper_C_Stepped");
static_assert(sizeof(Stepper_C_Stepped) == 0x000004, "Wrong size on Stepper_C_Stepped");
static_assert(offsetof(Stepper_C_Stepped, Param_Volume) == 0x000000, "Member 'Stepper_C_Stepped::Param_Volume' has a wrong offset!");

// Function stepper.stepper_C.playerLookAway
// 0x0008 (0x0008 - 0x0000)
struct Stepper_C_PlayerLookAway final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Stepper_C_PlayerLookAway) == 0x000008, "Wrong alignment on Stepper_C_PlayerLookAway");
static_assert(sizeof(Stepper_C_PlayerLookAway) == 0x000008, "Wrong size on Stepper_C_PlayerLookAway");
static_assert(offsetof(Stepper_C_PlayerLookAway, Player) == 0x000000, "Member 'Stepper_C_PlayerLookAway::Player' has a wrong offset!");

// Function stepper.stepper_C.reachedByExplosion
// 0x0010 (0x0010 - 0x0000)
struct Stepper_C_ReachedByExplosion final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Stepper_C_ReachedByExplosion) == 0x000004, "Wrong alignment on Stepper_C_ReachedByExplosion");
static_assert(sizeof(Stepper_C_ReachedByExplosion) == 0x000010, "Wrong size on Stepper_C_ReachedByExplosion");
static_assert(offsetof(Stepper_C_ReachedByExplosion, Location) == 0x000000, "Member 'Stepper_C_ReachedByExplosion::Location' has a wrong offset!");
static_assert(offsetof(Stepper_C_ReachedByExplosion, Damage) == 0x00000C, "Member 'Stepper_C_ReachedByExplosion::Damage' has a wrong offset!");

// Function stepper.stepper_C.slice
// 0x0001 (0x0001 - 0x0000)
struct Stepper_C_Slice final
{
public:
	bool                                          Clean;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Stepper_C_Slice) == 0x000001, "Wrong alignment on Stepper_C_Slice");
static_assert(sizeof(Stepper_C_Slice) == 0x000001, "Wrong size on Stepper_C_Slice");
static_assert(offsetof(Stepper_C_Slice, Clean) == 0x000000, "Member 'Stepper_C_Slice::Clean' has a wrong offset!");

// Function stepper.stepper_C.playerUsedOn
// 0x0090 (0x0090 - 0x0000)
struct Stepper_C_PlayerUsedOn final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Stepper_C_PlayerUsedOn) == 0x000008, "Wrong alignment on Stepper_C_PlayerUsedOn");
static_assert(sizeof(Stepper_C_PlayerUsedOn) == 0x000090, "Wrong size on Stepper_C_PlayerUsedOn");
static_assert(offsetof(Stepper_C_PlayerUsedOn, Player) == 0x000000, "Member 'Stepper_C_PlayerUsedOn::Player' has a wrong offset!");
static_assert(offsetof(Stepper_C_PlayerUsedOn, Hit) == 0x000008, "Member 'Stepper_C_PlayerUsedOn::Hit' has a wrong offset!");

// Function stepper.stepper_C.hooked
// 0x0008 (0x0008 - 0x0000)
struct Stepper_C_Hooked final
{
public:
	class AHook_C*                                Hook;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Stepper_C_Hooked) == 0x000008, "Wrong alignment on Stepper_C_Hooked");
static_assert(sizeof(Stepper_C_Hooked) == 0x000008, "Wrong size on Stepper_C_Hooked");
static_assert(offsetof(Stepper_C_Hooked, Hook) == 0x000000, "Member 'Stepper_C_Hooked::Hook' has a wrong offset!");

// Function stepper.stepper_C.cleanSponge
// 0x0010 (0x0010 - 0x0000)
struct Stepper_C_CleanSponge final
{
public:
	float                                         Clean;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          Player;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Stepper_C_CleanSponge) == 0x000008, "Wrong alignment on Stepper_C_CleanSponge");
static_assert(sizeof(Stepper_C_CleanSponge) == 0x000010, "Wrong size on Stepper_C_CleanSponge");
static_assert(offsetof(Stepper_C_CleanSponge, Clean) == 0x000000, "Member 'Stepper_C_CleanSponge::Clean' has a wrong offset!");
static_assert(offsetof(Stepper_C_CleanSponge, Player) == 0x000008, "Member 'Stepper_C_CleanSponge::Player' has a wrong offset!");

// Function stepper.stepper_C.hookTension
// 0x0008 (0x0008 - 0x0000)
struct Stepper_C_HookTension final
{
public:
	class AHook_C*                                Hook;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Stepper_C_HookTension) == 0x000008, "Wrong alignment on Stepper_C_HookTension");
static_assert(sizeof(Stepper_C_HookTension) == 0x000008, "Wrong size on Stepper_C_HookTension");
static_assert(offsetof(Stepper_C_HookTension, Hook) == 0x000000, "Member 'Stepper_C_HookTension::Hook' has a wrong offset!");

// Function stepper.stepper_C.set_ignoreSave_trigger
// 0x0001 (0x0001 - 0x0000)
struct Stepper_C_Set_ignoreSave_trigger final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Stepper_C_Set_ignoreSave_trigger) == 0x000001, "Wrong alignment on Stepper_C_Set_ignoreSave_trigger");
static_assert(sizeof(Stepper_C_Set_ignoreSave_trigger) == 0x000001, "Wrong size on Stepper_C_Set_ignoreSave_trigger");
static_assert(offsetof(Stepper_C_Set_ignoreSave_trigger, NewParam) == 0x000000, "Member 'Stepper_C_Set_ignoreSave_trigger::NewParam' has a wrong offset!");

// Function stepper.stepper_C.cordPlugged
// 0x0010 (0x0010 - 0x0000)
struct Stepper_C_CordPlugged final
{
public:
	class ACord_C*                                Cord;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACordSocket_C*                          Socket;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Stepper_C_CordPlugged) == 0x000008, "Wrong alignment on Stepper_C_CordPlugged");
static_assert(sizeof(Stepper_C_CordPlugged) == 0x000010, "Wrong size on Stepper_C_CordPlugged");
static_assert(offsetof(Stepper_C_CordPlugged, Cord) == 0x000000, "Member 'Stepper_C_CordPlugged::Cord' has a wrong offset!");
static_assert(offsetof(Stepper_C_CordPlugged, Socket) == 0x000008, "Member 'Stepper_C_CordPlugged::Socket' has a wrong offset!");

// Function stepper.stepper_C.cordUnplugged
// 0x0010 (0x0010 - 0x0000)
struct Stepper_C_CordUnplugged final
{
public:
	class ACord_C*                                Cord;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACordSocket_C*                          Socket;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Stepper_C_CordUnplugged) == 0x000008, "Wrong alignment on Stepper_C_CordUnplugged");
static_assert(sizeof(Stepper_C_CordUnplugged) == 0x000010, "Wrong size on Stepper_C_CordUnplugged");
static_assert(offsetof(Stepper_C_CordUnplugged, Cord) == 0x000000, "Member 'Stepper_C_CordUnplugged::Cord' has a wrong offset!");
static_assert(offsetof(Stepper_C_CordUnplugged, Socket) == 0x000008, "Member 'Stepper_C_CordUnplugged::Socket' has a wrong offset!");

// Function stepper.stepper_C.setActiveTrigger
// 0x0010 (0x0010 - 0x0000)
struct Stepper_C_SetActiveTrigger final
{
public:
	class AActor*                                 SentFrom;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Active;                                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Stepper_C_SetActiveTrigger) == 0x000008, "Wrong alignment on Stepper_C_SetActiveTrigger");
static_assert(sizeof(Stepper_C_SetActiveTrigger) == 0x000010, "Wrong size on Stepper_C_SetActiveTrigger");
static_assert(offsetof(Stepper_C_SetActiveTrigger, SentFrom) == 0x000000, "Member 'Stepper_C_SetActiveTrigger::SentFrom' has a wrong offset!");
static_assert(offsetof(Stepper_C_SetActiveTrigger, Active) == 0x000008, "Member 'Stepper_C_SetActiveTrigger::Active' has a wrong offset!");

// Function stepper.stepper_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct Stepper_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Stepper_C_ReceiveTick) == 0x000004, "Wrong alignment on Stepper_C_ReceiveTick");
static_assert(sizeof(Stepper_C_ReceiveTick) == 0x000004, "Wrong size on Stepper_C_ReceiveTick");
static_assert(offsetof(Stepper_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'Stepper_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function stepper.stepper_C.runTrigger
// 0x0010 (0x0010 - 0x0000)
struct Stepper_C_RunTrigger final
{
public:
	class AActor*                                 Param_Owner;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Stepper_C_RunTrigger) == 0x000008, "Wrong alignment on Stepper_C_RunTrigger");
static_assert(sizeof(Stepper_C_RunTrigger) == 0x000010, "Wrong size on Stepper_C_RunTrigger");
static_assert(offsetof(Stepper_C_RunTrigger, Param_Owner) == 0x000000, "Member 'Stepper_C_RunTrigger::Param_Owner' has a wrong offset!");
static_assert(offsetof(Stepper_C_RunTrigger, Param_Index) == 0x000008, "Member 'Stepper_C_RunTrigger::Param_Index' has a wrong offset!");

// Function stepper.stepper_C.ExecuteUbergraph_stepper
// 0x05F0 (0x05F0 - 0x0000)
struct Stepper_C_ExecuteUbergraph_stepper final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPathFollowingResult                          K2Node_CustomEvent_MovementResult;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPathFollowingResult                          Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPathFollowingResult                          K2Node_CustomEvent_MovementResult_1;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EPathFollowingResult MovementResult)> K2Node_CreateDelegate_OutputDelegate;              // 0x0010(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(EPathFollowingResult MovementResult)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0020(0x0010)(ZeroConstructor, NoDestructor)
	float                                         K2Node_Event_damage_5;                             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_5;                                // 0x0034(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_actor_1;                              // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_impact_1;                             // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AWaterVolume_C*                         K2Node_Event_water_3;                              // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWaterVolume_C*                         K2Node_Event_water_2;                              // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWaterVolume_C*                         K2Node_Event_water_1;                              // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWaterVolume_C*                         K2Node_Event_water;                                // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_activate;                             // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_static;                               // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_frozen;                               // 0x00FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_active_1;                             // 0x00FB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_actor;                                // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_4;                             // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_4;                                // 0x010C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                K2Node_Event_impact;                               // 0x0194(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_skipSetting;                          // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A1[0x7];                                      // 0x01A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_Event_key_1;                                // 0x01A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_12;                            // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_3;                                // 0x01C0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         K2Node_Event_damage_3;                             // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_fuel;                                 // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_2;                             // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hot;                                  // 0x0254(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_2DC[0x4];                                      // 0x02DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_11;                            // 0x02E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_2;                                // 0x02E8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	Enum_interactionActions                       K2Node_Event_action;                               // 0x0370(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_371[0x7];                                      // 0x0371(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_10;                            // 0x0378(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_9;                             // 0x0380(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_1;                             // 0x0388(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_location_1;                           // 0x038C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_8;                             // 0x0398(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_7;                             // 0x03A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_6;                             // 0x03A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_wheelDelta;                           // 0x03B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B4[0x4];                                      // 0x03B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_5;                             // 0x03B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Event_mouse;                                // 0x03C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_4;                             // 0x03C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_Event_key;                                  // 0x03D0(0x0018)(HasGetValueTypeHash)
	bool                                          K2Node_Event_pressed;                              // 0x03E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E9[0x3];                                      // 0x03E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_temperature_1;                        // 0x03EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_temperature;                          // 0x03F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_speed;                                // 0x03F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_3;                             // 0x03F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_1;                                // 0x0400(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class FString                                 K2Node_Event_name;                                 // 0x0488(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         K2Node_Event_volume;                               // 0x0498(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49C[0x4];                                      // 0x049C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_2;                             // 0x04A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_location;                             // 0x04A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage;                               // 0x04B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_clean_1;                              // 0x04B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B9[0x7];                                      // 0x04B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_1;                             // 0x04C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit;                                  // 0x04C8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AHook_C*                                K2Node_Event_hook_1;                               // 0x0550(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_clean;                                // 0x0558(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55C[0x4];                                      // 0x055C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player;                               // 0x0560(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHook_C*                                K2Node_Event_hook;                                 // 0x0568(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_NewParam;                             // 0x0570(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_571[0x7];                                      // 0x0571(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACord_C*                                K2Node_Event_cord_1;                               // 0x0578(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACordSocket_C*                          K2Node_Event_socket_1;                             // 0x0580(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACord_C*                                K2Node_Event_cord;                                 // 0x0588(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACordSocket_C*                          K2Node_Event_socket;                               // 0x0590(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_sentFrom;                             // 0x0598(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_active;                               // 0x05A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A1[0x3];                                      // 0x05A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x05A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x05A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A9[0x3];                                      // 0x05A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x05AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x05B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Vector_Distance_ReturnValue;              // 0x05C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x05C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CC[0x4];                                      // 0x05CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_owner;                                // 0x05D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_index;                                // 0x05D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VictoryFloatPlusEquals_FloatOut;          // 0x05DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAIAsyncTaskBlueprintProxy*             CallFunc_CreateMoveToProxyObject_ReturnValue;      // 0x05E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x05E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x05E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5EA[0x2];                                      // 0x05EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x05EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Stepper_C_ExecuteUbergraph_stepper) == 0x000008, "Wrong alignment on Stepper_C_ExecuteUbergraph_stepper");
static_assert(sizeof(Stepper_C_ExecuteUbergraph_stepper) == 0x0005F0, "Wrong size on Stepper_C_ExecuteUbergraph_stepper");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, EntryPoint) == 0x000000, "Member 'Stepper_C_ExecuteUbergraph_stepper::EntryPoint' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_CustomEvent_MovementResult) == 0x000004, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_CustomEvent_MovementResult' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, Temp_byte_Variable) == 0x000005, "Member 'Stepper_C_ExecuteUbergraph_stepper::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, Temp_int_Variable) == 0x000008, "Member 'Stepper_C_ExecuteUbergraph_stepper::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_CustomEvent_MovementResult_1) == 0x00000C, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_CustomEvent_MovementResult_1' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_CreateDelegate_OutputDelegate_1) == 0x000020, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_damage_5) == 0x000030, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_damage_5' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_hit_5) == 0x000034, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_hit_5' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_actor_1) == 0x0000C0, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_actor_1' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_impact_1) == 0x0000C8, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_impact_1' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_water_3) == 0x0000D8, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_water_3' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_water_2) == 0x0000E0, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_water_2' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_water_1) == 0x0000E8, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_water_1' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_water) == 0x0000F0, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_water' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_activate) == 0x0000F8, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_activate' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_static) == 0x0000F9, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_static' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_frozen) == 0x0000FA, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_frozen' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_active_1) == 0x0000FB, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_active_1' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_actor) == 0x000100, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_actor' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_damage_4) == 0x000108, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_damage_4' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_hit_4) == 0x00010C, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_hit_4' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_impact) == 0x000194, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_impact' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_skipSetting) == 0x0001A0, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_skipSetting' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_key_1) == 0x0001A8, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_key_1' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_player_12) == 0x0001B8, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_player_12' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_hit_3) == 0x0001C0, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_hit_3' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_damage_3) == 0x000248, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_damage_3' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_fuel) == 0x00024C, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_fuel' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_damage_2) == 0x000250, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_damage_2' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_hot) == 0x000254, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_hot' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_player_11) == 0x0002E0, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_player_11' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_hit_2) == 0x0002E8, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_hit_2' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_action) == 0x000370, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_action' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_player_10) == 0x000378, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_player_10' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_player_9) == 0x000380, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_player_9' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_damage_1) == 0x000388, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_damage_1' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_location_1) == 0x00038C, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_location_1' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_player_8) == 0x000398, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_player_8' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_player_7) == 0x0003A0, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_player_7' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_player_6) == 0x0003A8, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_player_6' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_wheelDelta) == 0x0003B0, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_wheelDelta' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_player_5) == 0x0003B8, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_player_5' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_mouse) == 0x0003C0, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_mouse' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_player_4) == 0x0003C8, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_player_4' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_key) == 0x0003D0, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_key' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_pressed) == 0x0003E8, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_pressed' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_temperature_1) == 0x0003EC, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_temperature_1' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_temperature) == 0x0003F0, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_temperature' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_speed) == 0x0003F4, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_speed' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_player_3) == 0x0003F8, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_player_3' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_hit_1) == 0x000400, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_hit_1' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_name) == 0x000488, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_name' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_volume) == 0x000498, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_volume' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_player_2) == 0x0004A0, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_player_2' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_location) == 0x0004A8, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_location' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_damage) == 0x0004B4, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_damage' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_clean_1) == 0x0004B8, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_clean_1' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_player_1) == 0x0004C0, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_player_1' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_hit) == 0x0004C8, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_hit' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_hook_1) == 0x000550, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_hook_1' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_clean) == 0x000558, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_clean' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_player) == 0x000560, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_player' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_hook) == 0x000568, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_hook' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_NewParam) == 0x000570, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_NewParam' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_cord_1) == 0x000578, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_cord_1' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_socket_1) == 0x000580, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_socket_1' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_cord) == 0x000588, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_cord' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_socket) == 0x000590, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_socket' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_sentFrom) == 0x000598, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_sentFrom' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_active) == 0x0005A0, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_active' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_DeltaSeconds) == 0x0005A4, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0005A8, "Member 'Stepper_C_ExecuteUbergraph_stepper::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0005AC, "Member 'Stepper_C_ExecuteUbergraph_stepper::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x0005B8, "Member 'Stepper_C_ExecuteUbergraph_stepper::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, CallFunc_Vector_Distance_ReturnValue) == 0x0005C4, "Member 'Stepper_C_ExecuteUbergraph_stepper::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0005C8, "Member 'Stepper_C_ExecuteUbergraph_stepper::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_owner) == 0x0005D0, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_owner' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, K2Node_Event_index) == 0x0005D8, "Member 'Stepper_C_ExecuteUbergraph_stepper::K2Node_Event_index' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, CallFunc_VictoryFloatPlusEquals_FloatOut) == 0x0005DC, "Member 'Stepper_C_ExecuteUbergraph_stepper::CallFunc_VictoryFloatPlusEquals_FloatOut' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, CallFunc_CreateMoveToProxyObject_ReturnValue) == 0x0005E0, "Member 'Stepper_C_ExecuteUbergraph_stepper::CallFunc_CreateMoveToProxyObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, CallFunc_IsValid_ReturnValue) == 0x0005E8, "Member 'Stepper_C_ExecuteUbergraph_stepper::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, CallFunc_Array_IsValidIndex_ReturnValue) == 0x0005E9, "Member 'Stepper_C_ExecuteUbergraph_stepper::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(Stepper_C_ExecuteUbergraph_stepper, CallFunc_Add_IntInt_ReturnValue) == 0x0005EC, "Member 'Stepper_C_ExecuteUbergraph_stepper::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

}

