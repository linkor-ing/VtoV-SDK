#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PowerControl

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "TriggerBase_classes.hpp"
#include "Enum_interactionActions_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass powerControl.powerControl_C
// 0x0178 (0x0400 - 0x0288)
class APowerControl_C final : public ATriggerBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_PowerControl_C;                     // 0x0288(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        Sound;                                             // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Lights;                                            // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Power_light;                                       // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Power_coordinates;                                 // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Power_downloading;                                 // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Power_playing;                                     // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Power_calculating;                                 // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Eff_light_on;                                      // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Eef_calc_on;                                       // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Eff_downl_on;                                      // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Eff_coords_on;                                     // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Eff_play_on;                                       // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Eff_light_off;                                     // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Eef_calc_off;                                      // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Eff_downl_off;                                     // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Eff_coords_off;                                    // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Eff_play_off;                                      // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   Text_coords;                                       // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   Text_light;                                        // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   Text_downloading;                                  // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   Text_playing;                                      // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   Text_calc;                                         // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Lever_4;                                           // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Lever_3;                                           // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Lever_2;                                           // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Lever_1;                                           // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Lever_0;                                           // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Powerblock;                                        // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Comp;                                              // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Press_coord;                                       // 0x0378(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Press_downl;                                       // 0x0379(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Press_play;                                        // 0x037A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Press_calc;                                        // 0x037B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Press_light;                                       // 0x037C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_37D[0x3];                                      // 0x037D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ATrigger_lightRoot_C*>           LighRoots;                                         // 0x0380(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class FString>                         LighRoots_keys;                                    // 0x0390(0x0010)(Edit, BlueprintVisible)
	bool                                          SoundActivated;                                    // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A1[0x7];                                      // 0x03A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AServerBox_C*>                   Servers;                                           // 0x03A8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class AAmbientSound*                          ServersSound;                                      // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ADoor_C*>                        DoorsOpen;                                         // 0x03C0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class FString>                         DoorsOpen_keys;                                    // 0x03D0(0x0010)(Edit, BlueprintVisible)
	bool                                          Disabled;                                          // 0x03E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E1[0x7];                                      // 0x03E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Allkeys;                                           // 0x03E8(0x0010)(Edit, BlueprintVisible)
	int32                                         Sep;                                               // 0x03F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_powerControl(int32 EntryPoint);
	void MoveLevers();
	void Virus_pb();
	void PowerChanged(bool Active_calc, bool Active_downl, bool Active_coords, bool Active_play, bool Active_light);
	void ReceiveBeginPlay();
	void PlayerR(class AMainPlayer_C* Player);
	void PlayerHold(class AMainPlayer_C* Player);
	void PlayerUnequip(class AMainPlayer_C* Player);
	void UpdateStrAgl();
	void DamageByPlayer(class AMainPlayer_C* Player, const struct FHitResult& Hit, float Damage);
	void Thrown(class AMainPlayer_C* Player);
	void broken_fire();
	void broken();
	void SendName(class FName Param_Name);
	void Kicked(bool Kick);
	void Player_use(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void DriveDetached();
	void buttonsVisibility();
	void PlaySND(bool Activated);
	void Solar();
	void SendPower();
	void IsButtonUsed(bool* Failed);
	void LookAt(class AMainPlayer_C* Player, const struct FHitResult& Hit, bool* Return, class FString* Text, class UPrimitiveComponent** boundObjectReplace, uint8* Number);
	void NoRespawn(bool Param_NoRespawn, bool* Return);
	void CanPickup(bool* Return);
	void AsProp(class AProp_C** Return);
	void CanBePutInContainer(bool* Return);
	void LandedOn(class AMainPlayer_C* Player, bool* IgnoreFallDamage);
	void ActionOptionIndex(class AMainPlayer_C* Player, const struct FHitResult& Hit, Enum_interactionActions Action);
	void Virus(bool Activate);
	void GamemodeBeginPlay();
	void UserConstructionScript();
	void LoadTriggerData(const struct FStruct_triggerSave& Data, bool* Return);
	void GetTriggerData(struct FStruct_triggerSave* Data);
	void DreamInv(TArray<struct FStruct_save>& Invv, class ADreamBase_C** Base);
	void ProcessKeys(bool* Return);
	void GetActionOptions(class AMainPlayer_C* Player, class UPrimitiveComponent* Component, class AActor* Actor, TArray<class FString>* Options, TArray<Enum_interactionActions>* Options_enum, TArray<class FText>* OptionsNamesOverlay, uint8* Number);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"powerControl_C">();
	}
	static class APowerControl_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<APowerControl_C>();
	}
};
static_assert(alignof(APowerControl_C) == 0x000008, "Wrong alignment on APowerControl_C");
static_assert(sizeof(APowerControl_C) == 0x000400, "Wrong size on APowerControl_C");
static_assert(offsetof(APowerControl_C, UberGraphFrame_PowerControl_C) == 0x000288, "Member 'APowerControl_C::UberGraphFrame_PowerControl_C' has a wrong offset!");
static_assert(offsetof(APowerControl_C, Sound) == 0x000290, "Member 'APowerControl_C::Sound' has a wrong offset!");
static_assert(offsetof(APowerControl_C, Lights) == 0x000298, "Member 'APowerControl_C::Lights' has a wrong offset!");
static_assert(offsetof(APowerControl_C, Power_light) == 0x0002A0, "Member 'APowerControl_C::Power_light' has a wrong offset!");
static_assert(offsetof(APowerControl_C, Power_coordinates) == 0x0002A8, "Member 'APowerControl_C::Power_coordinates' has a wrong offset!");
static_assert(offsetof(APowerControl_C, Power_downloading) == 0x0002B0, "Member 'APowerControl_C::Power_downloading' has a wrong offset!");
static_assert(offsetof(APowerControl_C, Power_playing) == 0x0002B8, "Member 'APowerControl_C::Power_playing' has a wrong offset!");
static_assert(offsetof(APowerControl_C, Power_calculating) == 0x0002C0, "Member 'APowerControl_C::Power_calculating' has a wrong offset!");
static_assert(offsetof(APowerControl_C, Eff_light_on) == 0x0002C8, "Member 'APowerControl_C::Eff_light_on' has a wrong offset!");
static_assert(offsetof(APowerControl_C, Eef_calc_on) == 0x0002D0, "Member 'APowerControl_C::Eef_calc_on' has a wrong offset!");
static_assert(offsetof(APowerControl_C, Eff_downl_on) == 0x0002D8, "Member 'APowerControl_C::Eff_downl_on' has a wrong offset!");
static_assert(offsetof(APowerControl_C, Eff_coords_on) == 0x0002E0, "Member 'APowerControl_C::Eff_coords_on' has a wrong offset!");
static_assert(offsetof(APowerControl_C, Eff_play_on) == 0x0002E8, "Member 'APowerControl_C::Eff_play_on' has a wrong offset!");
static_assert(offsetof(APowerControl_C, Eff_light_off) == 0x0002F0, "Member 'APowerControl_C::Eff_light_off' has a wrong offset!");
static_assert(offsetof(APowerControl_C, Eef_calc_off) == 0x0002F8, "Member 'APowerControl_C::Eef_calc_off' has a wrong offset!");
static_assert(offsetof(APowerControl_C, Eff_downl_off) == 0x000300, "Member 'APowerControl_C::Eff_downl_off' has a wrong offset!");
static_assert(offsetof(APowerControl_C, Eff_coords_off) == 0x000308, "Member 'APowerControl_C::Eff_coords_off' has a wrong offset!");
static_assert(offsetof(APowerControl_C, Eff_play_off) == 0x000310, "Member 'APowerControl_C::Eff_play_off' has a wrong offset!");
static_assert(offsetof(APowerControl_C, Text_coords) == 0x000318, "Member 'APowerControl_C::Text_coords' has a wrong offset!");
static_assert(offsetof(APowerControl_C, Text_light) == 0x000320, "Member 'APowerControl_C::Text_light' has a wrong offset!");
static_assert(offsetof(APowerControl_C, Text_downloading) == 0x000328, "Member 'APowerControl_C::Text_downloading' has a wrong offset!");
static_assert(offsetof(APowerControl_C, Text_playing) == 0x000330, "Member 'APowerControl_C::Text_playing' has a wrong offset!");
static_assert(offsetof(APowerControl_C, Text_calc) == 0x000338, "Member 'APowerControl_C::Text_calc' has a wrong offset!");
static_assert(offsetof(APowerControl_C, Lever_4) == 0x000340, "Member 'APowerControl_C::Lever_4' has a wrong offset!");
static_assert(offsetof(APowerControl_C, Lever_3) == 0x000348, "Member 'APowerControl_C::Lever_3' has a wrong offset!");
static_assert(offsetof(APowerControl_C, Lever_2) == 0x000350, "Member 'APowerControl_C::Lever_2' has a wrong offset!");
static_assert(offsetof(APowerControl_C, Lever_1) == 0x000358, "Member 'APowerControl_C::Lever_1' has a wrong offset!");
static_assert(offsetof(APowerControl_C, Lever_0) == 0x000360, "Member 'APowerControl_C::Lever_0' has a wrong offset!");
static_assert(offsetof(APowerControl_C, Powerblock) == 0x000368, "Member 'APowerControl_C::Powerblock' has a wrong offset!");
static_assert(offsetof(APowerControl_C, Comp) == 0x000370, "Member 'APowerControl_C::Comp' has a wrong offset!");
static_assert(offsetof(APowerControl_C, Press_coord) == 0x000378, "Member 'APowerControl_C::Press_coord' has a wrong offset!");
static_assert(offsetof(APowerControl_C, Press_downl) == 0x000379, "Member 'APowerControl_C::Press_downl' has a wrong offset!");
static_assert(offsetof(APowerControl_C, Press_play) == 0x00037A, "Member 'APowerControl_C::Press_play' has a wrong offset!");
static_assert(offsetof(APowerControl_C, Press_calc) == 0x00037B, "Member 'APowerControl_C::Press_calc' has a wrong offset!");
static_assert(offsetof(APowerControl_C, Press_light) == 0x00037C, "Member 'APowerControl_C::Press_light' has a wrong offset!");
static_assert(offsetof(APowerControl_C, LighRoots) == 0x000380, "Member 'APowerControl_C::LighRoots' has a wrong offset!");
static_assert(offsetof(APowerControl_C, LighRoots_keys) == 0x000390, "Member 'APowerControl_C::LighRoots_keys' has a wrong offset!");
static_assert(offsetof(APowerControl_C, SoundActivated) == 0x0003A0, "Member 'APowerControl_C::SoundActivated' has a wrong offset!");
static_assert(offsetof(APowerControl_C, Servers) == 0x0003A8, "Member 'APowerControl_C::Servers' has a wrong offset!");
static_assert(offsetof(APowerControl_C, ServersSound) == 0x0003B8, "Member 'APowerControl_C::ServersSound' has a wrong offset!");
static_assert(offsetof(APowerControl_C, DoorsOpen) == 0x0003C0, "Member 'APowerControl_C::DoorsOpen' has a wrong offset!");
static_assert(offsetof(APowerControl_C, DoorsOpen_keys) == 0x0003D0, "Member 'APowerControl_C::DoorsOpen_keys' has a wrong offset!");
static_assert(offsetof(APowerControl_C, Disabled) == 0x0003E0, "Member 'APowerControl_C::Disabled' has a wrong offset!");
static_assert(offsetof(APowerControl_C, Allkeys) == 0x0003E8, "Member 'APowerControl_C::Allkeys' has a wrong offset!");
static_assert(offsetof(APowerControl_C, Sep) == 0x0003F8, "Member 'APowerControl_C::Sep' has a wrong offset!");

}

