#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Umg_radarScreen

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass umg_radarScreen.umg_radarScreen_C
// 0x00D8 (0x0338 - 0x0260)
class UUmg_radarScreen_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 Image_78;                                          // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_activated;                                     // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class URichTextBlock*                         Rtxt_log_1;                                        // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class URichTextBlock*                         Rtxt_log_2;                                        // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class URichTextBlock*                         Rtxt_log_3;                                        // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class URichTextBlock*                         Rtxt_log_4;                                        // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUmg_radar_C*                           Umg_radar;                                         // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          Active;                                            // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E65[0x3];                                     // 0x02A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Angle;                                             // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Dynmat;                                            // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Scanned;                                           // 0x02B0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class APanel_radar_C*                         Panel;                                             // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Text;                                              // 0x02C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class FString>                         LogArray;                                          // 0x02D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FString                                 Text_1;                                            // 0x02E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Text_2;                                            // 0x02F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Text_3;                                            // 0x0308(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Text_4;                                            // 0x0318(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         PrevEnt;                                           // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasColors;                                         // 0x032C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HasAlarm;                                          // 0x032D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E66[0x2];                                     // 0x032E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SpdLevel;                                          // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Spd;                                               // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_umg_radarScreen(int32 EntryPoint);
	void StuffUpgraded(class AMainGamemode_C* GameMode);
	void Upd();
	void PowerChanged(bool Active_calc, bool Active_downl, bool Active_coords, bool Active_play, bool Active_light);
	void GamemodeBeginPlay();
	void ApplyColor(const struct FLinearColor& Color);
	void PropRenderer_finishProps();
	void GamemodeMakeKeys();
	void AnyKey(const struct FKey& Key, bool Pressed);
	void GamemodePreLoad();
	void Unfocused();
	void SettingsApplied(const struct FStruct_settings& Settings);
	void Unfoc();
	void SignalSaved();
	void SignalDeleted();
	void DreamInv(TArray<struct FStruct_save>& Invv, class ADreamBase_C** Base);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"umg_radarScreen_C">();
	}
	static class UUmg_radarScreen_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUmg_radarScreen_C>();
	}
};
static_assert(alignof(UUmg_radarScreen_C) == 0x000008, "Wrong alignment on UUmg_radarScreen_C");
static_assert(sizeof(UUmg_radarScreen_C) == 0x000338, "Wrong size on UUmg_radarScreen_C");
static_assert(offsetof(UUmg_radarScreen_C, UberGraphFrame) == 0x000260, "Member 'UUmg_radarScreen_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUmg_radarScreen_C, Image_78) == 0x000268, "Member 'UUmg_radarScreen_C::Image_78' has a wrong offset!");
static_assert(offsetof(UUmg_radarScreen_C, Img_activated) == 0x000270, "Member 'UUmg_radarScreen_C::Img_activated' has a wrong offset!");
static_assert(offsetof(UUmg_radarScreen_C, Rtxt_log_1) == 0x000278, "Member 'UUmg_radarScreen_C::Rtxt_log_1' has a wrong offset!");
static_assert(offsetof(UUmg_radarScreen_C, Rtxt_log_2) == 0x000280, "Member 'UUmg_radarScreen_C::Rtxt_log_2' has a wrong offset!");
static_assert(offsetof(UUmg_radarScreen_C, Rtxt_log_3) == 0x000288, "Member 'UUmg_radarScreen_C::Rtxt_log_3' has a wrong offset!");
static_assert(offsetof(UUmg_radarScreen_C, Rtxt_log_4) == 0x000290, "Member 'UUmg_radarScreen_C::Rtxt_log_4' has a wrong offset!");
static_assert(offsetof(UUmg_radarScreen_C, Umg_radar) == 0x000298, "Member 'UUmg_radarScreen_C::Umg_radar' has a wrong offset!");
static_assert(offsetof(UUmg_radarScreen_C, Active) == 0x0002A0, "Member 'UUmg_radarScreen_C::Active' has a wrong offset!");
static_assert(offsetof(UUmg_radarScreen_C, Angle) == 0x0002A4, "Member 'UUmg_radarScreen_C::Angle' has a wrong offset!");
static_assert(offsetof(UUmg_radarScreen_C, Dynmat) == 0x0002A8, "Member 'UUmg_radarScreen_C::Dynmat' has a wrong offset!");
static_assert(offsetof(UUmg_radarScreen_C, Scanned) == 0x0002B0, "Member 'UUmg_radarScreen_C::Scanned' has a wrong offset!");
static_assert(offsetof(UUmg_radarScreen_C, Panel) == 0x0002C0, "Member 'UUmg_radarScreen_C::Panel' has a wrong offset!");
static_assert(offsetof(UUmg_radarScreen_C, Text) == 0x0002C8, "Member 'UUmg_radarScreen_C::Text' has a wrong offset!");
static_assert(offsetof(UUmg_radarScreen_C, LogArray) == 0x0002D8, "Member 'UUmg_radarScreen_C::LogArray' has a wrong offset!");
static_assert(offsetof(UUmg_radarScreen_C, Text_1) == 0x0002E8, "Member 'UUmg_radarScreen_C::Text_1' has a wrong offset!");
static_assert(offsetof(UUmg_radarScreen_C, Text_2) == 0x0002F8, "Member 'UUmg_radarScreen_C::Text_2' has a wrong offset!");
static_assert(offsetof(UUmg_radarScreen_C, Text_3) == 0x000308, "Member 'UUmg_radarScreen_C::Text_3' has a wrong offset!");
static_assert(offsetof(UUmg_radarScreen_C, Text_4) == 0x000318, "Member 'UUmg_radarScreen_C::Text_4' has a wrong offset!");
static_assert(offsetof(UUmg_radarScreen_C, PrevEnt) == 0x000328, "Member 'UUmg_radarScreen_C::PrevEnt' has a wrong offset!");
static_assert(offsetof(UUmg_radarScreen_C, HasColors) == 0x00032C, "Member 'UUmg_radarScreen_C::HasColors' has a wrong offset!");
static_assert(offsetof(UUmg_radarScreen_C, HasAlarm) == 0x00032D, "Member 'UUmg_radarScreen_C::HasAlarm' has a wrong offset!");
static_assert(offsetof(UUmg_radarScreen_C, SpdLevel) == 0x000330, "Member 'UUmg_radarScreen_C::SpdLevel' has a wrong offset!");
static_assert(offsetof(UUmg_radarScreen_C, Spd) == 0x000334, "Member 'UUmg_radarScreen_C::Spd' has a wrong offset!");

}

