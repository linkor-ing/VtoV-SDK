#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Gameover

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass gameover.gameover_C
// 0x0088 (0x02A8 - 0x0220)
class AGameover_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        DeadTone;                                          // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Alpha;                                             // 0x0238(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x023C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Text;                                              // 0x0240(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	float                                         Delay;                                             // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Delayed;                                           // 0x025C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2041[0x3];                                     // 0x025D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 String;                                            // 0x0260(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class UUmg_gameoverScreen_C*                  Widget;                                            // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         N;                                                 // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2042[0x4];                                     // 0x027C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 String_or;                                         // 0x0280(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	float                                         Rand;                                              // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Curs;                                              // 0x0294(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2043[0x3];                                     // 0x0295(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Last;                                              // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Fin;                                               // 0x029C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2044[0x3];                                     // 0x029D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PreDelay;                                          // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         PostDelay;                                         // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_gameover(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void Conv();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"gameover_C">();
	}
	static class AGameover_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGameover_C>();
	}
};
static_assert(alignof(AGameover_C) == 0x000008, "Wrong alignment on AGameover_C");
static_assert(sizeof(AGameover_C) == 0x0002A8, "Wrong size on AGameover_C");
static_assert(offsetof(AGameover_C, UberGraphFrame) == 0x000220, "Member 'AGameover_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AGameover_C, DeadTone) == 0x000228, "Member 'AGameover_C::DeadTone' has a wrong offset!");
static_assert(offsetof(AGameover_C, DefaultSceneRoot) == 0x000230, "Member 'AGameover_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AGameover_C, Alpha) == 0x000238, "Member 'AGameover_C::Alpha' has a wrong offset!");
static_assert(offsetof(AGameover_C, Speed) == 0x00023C, "Member 'AGameover_C::Speed' has a wrong offset!");
static_assert(offsetof(AGameover_C, Text) == 0x000240, "Member 'AGameover_C::Text' has a wrong offset!");
static_assert(offsetof(AGameover_C, Delay) == 0x000258, "Member 'AGameover_C::Delay' has a wrong offset!");
static_assert(offsetof(AGameover_C, Delayed) == 0x00025C, "Member 'AGameover_C::Delayed' has a wrong offset!");
static_assert(offsetof(AGameover_C, String) == 0x000260, "Member 'AGameover_C::String' has a wrong offset!");
static_assert(offsetof(AGameover_C, Widget) == 0x000270, "Member 'AGameover_C::Widget' has a wrong offset!");
static_assert(offsetof(AGameover_C, N) == 0x000278, "Member 'AGameover_C::N' has a wrong offset!");
static_assert(offsetof(AGameover_C, String_or) == 0x000280, "Member 'AGameover_C::String_or' has a wrong offset!");
static_assert(offsetof(AGameover_C, Rand) == 0x000290, "Member 'AGameover_C::Rand' has a wrong offset!");
static_assert(offsetof(AGameover_C, Curs) == 0x000294, "Member 'AGameover_C::Curs' has a wrong offset!");
static_assert(offsetof(AGameover_C, Last) == 0x000298, "Member 'AGameover_C::Last' has a wrong offset!");
static_assert(offsetof(AGameover_C, Fin) == 0x00029C, "Member 'AGameover_C::Fin' has a wrong offset!");
static_assert(offsetof(AGameover_C, PreDelay) == 0x0002A0, "Member 'AGameover_C::PreDelay' has a wrong offset!");
static_assert(offsetof(AGameover_C, PostDelay) == 0x0002A4, "Member 'AGameover_C::PostDelay' has a wrong offset!");

}

