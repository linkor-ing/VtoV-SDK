#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Umg_hsvWindow

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function umg_hsvWindow.umg_hsvWindow_C.ExecuteUbergraph_umg_hsvWindow
// 0x0060 (0x0060 - 0x0000)
struct Umg_hsvWindow_C_ExecuteUbergraph_umg_hsvWindow final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector4_X;                           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector4_Y;                           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector4_Z;                           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector4_W;                           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_ComponentBoundEvent_Value_3;                // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_ComponentBoundEvent_Value_2;                // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_HSVToRGB_ReturnValue;                     // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_ComponentBoundEvent_Value_1;                // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_ComponentBoundEvent_Value;                  // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode;          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_setActiveInterface_return;                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1EB8[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IInt_coms_C>           K2Node_DynamicCast_AsInt_Coms;                     // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Umg_hsvWindow_C_ExecuteUbergraph_umg_hsvWindow) == 0x000008, "Wrong alignment on Umg_hsvWindow_C_ExecuteUbergraph_umg_hsvWindow");
static_assert(sizeof(Umg_hsvWindow_C_ExecuteUbergraph_umg_hsvWindow) == 0x000060, "Wrong size on Umg_hsvWindow_C_ExecuteUbergraph_umg_hsvWindow");
static_assert(offsetof(Umg_hsvWindow_C_ExecuteUbergraph_umg_hsvWindow, EntryPoint) == 0x000000, "Member 'Umg_hsvWindow_C_ExecuteUbergraph_umg_hsvWindow::EntryPoint' has a wrong offset!");
static_assert(offsetof(Umg_hsvWindow_C_ExecuteUbergraph_umg_hsvWindow, CallFunc_BreakVector4_X) == 0x000004, "Member 'Umg_hsvWindow_C_ExecuteUbergraph_umg_hsvWindow::CallFunc_BreakVector4_X' has a wrong offset!");
static_assert(offsetof(Umg_hsvWindow_C_ExecuteUbergraph_umg_hsvWindow, CallFunc_BreakVector4_Y) == 0x000008, "Member 'Umg_hsvWindow_C_ExecuteUbergraph_umg_hsvWindow::CallFunc_BreakVector4_Y' has a wrong offset!");
static_assert(offsetof(Umg_hsvWindow_C_ExecuteUbergraph_umg_hsvWindow, CallFunc_BreakVector4_Z) == 0x00000C, "Member 'Umg_hsvWindow_C_ExecuteUbergraph_umg_hsvWindow::CallFunc_BreakVector4_Z' has a wrong offset!");
static_assert(offsetof(Umg_hsvWindow_C_ExecuteUbergraph_umg_hsvWindow, CallFunc_BreakVector4_W) == 0x000010, "Member 'Umg_hsvWindow_C_ExecuteUbergraph_umg_hsvWindow::CallFunc_BreakVector4_W' has a wrong offset!");
static_assert(offsetof(Umg_hsvWindow_C_ExecuteUbergraph_umg_hsvWindow, K2Node_ComponentBoundEvent_Value_3) == 0x000014, "Member 'Umg_hsvWindow_C_ExecuteUbergraph_umg_hsvWindow::K2Node_ComponentBoundEvent_Value_3' has a wrong offset!");
static_assert(offsetof(Umg_hsvWindow_C_ExecuteUbergraph_umg_hsvWindow, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000018, "Member 'Umg_hsvWindow_C_ExecuteUbergraph_umg_hsvWindow::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_hsvWindow_C_ExecuteUbergraph_umg_hsvWindow, K2Node_ComponentBoundEvent_Value_2) == 0x00001C, "Member 'Umg_hsvWindow_C_ExecuteUbergraph_umg_hsvWindow::K2Node_ComponentBoundEvent_Value_2' has a wrong offset!");
static_assert(offsetof(Umg_hsvWindow_C_ExecuteUbergraph_umg_hsvWindow, CallFunc_HSVToRGB_ReturnValue) == 0x000020, "Member 'Umg_hsvWindow_C_ExecuteUbergraph_umg_hsvWindow::CallFunc_HSVToRGB_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_hsvWindow_C_ExecuteUbergraph_umg_hsvWindow, K2Node_ComponentBoundEvent_Value_1) == 0x000030, "Member 'Umg_hsvWindow_C_ExecuteUbergraph_umg_hsvWindow::K2Node_ComponentBoundEvent_Value_1' has a wrong offset!");
static_assert(offsetof(Umg_hsvWindow_C_ExecuteUbergraph_umg_hsvWindow, K2Node_ComponentBoundEvent_Value) == 0x000034, "Member 'Umg_hsvWindow_C_ExecuteUbergraph_umg_hsvWindow::K2Node_ComponentBoundEvent_Value' has a wrong offset!");
static_assert(offsetof(Umg_hsvWindow_C_ExecuteUbergraph_umg_hsvWindow, CallFunc_getMainGamemode_AsMain_Gamemode) == 0x000038, "Member 'Umg_hsvWindow_C_ExecuteUbergraph_umg_hsvWindow::CallFunc_getMainGamemode_AsMain_Gamemode' has a wrong offset!");
static_assert(offsetof(Umg_hsvWindow_C_ExecuteUbergraph_umg_hsvWindow, CallFunc_setActiveInterface_return) == 0x000040, "Member 'Umg_hsvWindow_C_ExecuteUbergraph_umg_hsvWindow::CallFunc_setActiveInterface_return' has a wrong offset!");
static_assert(offsetof(Umg_hsvWindow_C_ExecuteUbergraph_umg_hsvWindow, K2Node_DynamicCast_AsInt_Coms) == 0x000048, "Member 'Umg_hsvWindow_C_ExecuteUbergraph_umg_hsvWindow::K2Node_DynamicCast_AsInt_Coms' has a wrong offset!");
static_assert(offsetof(Umg_hsvWindow_C_ExecuteUbergraph_umg_hsvWindow, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'Umg_hsvWindow_C_ExecuteUbergraph_umg_hsvWindow::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function umg_hsvWindow.umg_hsvWindow_C.BndEvt__umg_hsvWindow_Slider_M_K2Node_ComponentBoundEvent_3_OnFloatValueChangedEvent__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct Umg_hsvWindow_C_BndEvt__umg_hsvWindow_Slider_M_K2Node_ComponentBoundEvent_3_OnFloatValueChangedEvent__DelegateSignature final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Umg_hsvWindow_C_BndEvt__umg_hsvWindow_Slider_M_K2Node_ComponentBoundEvent_3_OnFloatValueChangedEvent__DelegateSignature) == 0x000004, "Wrong alignment on Umg_hsvWindow_C_BndEvt__umg_hsvWindow_Slider_M_K2Node_ComponentBoundEvent_3_OnFloatValueChangedEvent__DelegateSignature");
static_assert(sizeof(Umg_hsvWindow_C_BndEvt__umg_hsvWindow_Slider_M_K2Node_ComponentBoundEvent_3_OnFloatValueChangedEvent__DelegateSignature) == 0x000004, "Wrong size on Umg_hsvWindow_C_BndEvt__umg_hsvWindow_Slider_M_K2Node_ComponentBoundEvent_3_OnFloatValueChangedEvent__DelegateSignature");
static_assert(offsetof(Umg_hsvWindow_C_BndEvt__umg_hsvWindow_Slider_M_K2Node_ComponentBoundEvent_3_OnFloatValueChangedEvent__DelegateSignature, Value) == 0x000000, "Member 'Umg_hsvWindow_C_BndEvt__umg_hsvWindow_Slider_M_K2Node_ComponentBoundEvent_3_OnFloatValueChangedEvent__DelegateSignature::Value' has a wrong offset!");

// Function umg_hsvWindow.umg_hsvWindow_C.BndEvt__umg_hsvWindow_Slider_V_K2Node_ComponentBoundEvent_2_OnFloatValueChangedEvent__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct Umg_hsvWindow_C_BndEvt__umg_hsvWindow_Slider_V_K2Node_ComponentBoundEvent_2_OnFloatValueChangedEvent__DelegateSignature final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Umg_hsvWindow_C_BndEvt__umg_hsvWindow_Slider_V_K2Node_ComponentBoundEvent_2_OnFloatValueChangedEvent__DelegateSignature) == 0x000004, "Wrong alignment on Umg_hsvWindow_C_BndEvt__umg_hsvWindow_Slider_V_K2Node_ComponentBoundEvent_2_OnFloatValueChangedEvent__DelegateSignature");
static_assert(sizeof(Umg_hsvWindow_C_BndEvt__umg_hsvWindow_Slider_V_K2Node_ComponentBoundEvent_2_OnFloatValueChangedEvent__DelegateSignature) == 0x000004, "Wrong size on Umg_hsvWindow_C_BndEvt__umg_hsvWindow_Slider_V_K2Node_ComponentBoundEvent_2_OnFloatValueChangedEvent__DelegateSignature");
static_assert(offsetof(Umg_hsvWindow_C_BndEvt__umg_hsvWindow_Slider_V_K2Node_ComponentBoundEvent_2_OnFloatValueChangedEvent__DelegateSignature, Value) == 0x000000, "Member 'Umg_hsvWindow_C_BndEvt__umg_hsvWindow_Slider_V_K2Node_ComponentBoundEvent_2_OnFloatValueChangedEvent__DelegateSignature::Value' has a wrong offset!");

// Function umg_hsvWindow.umg_hsvWindow_C.BndEvt__umg_hsvWindow_Slider_S_K2Node_ComponentBoundEvent_1_OnFloatValueChangedEvent__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct Umg_hsvWindow_C_BndEvt__umg_hsvWindow_Slider_S_K2Node_ComponentBoundEvent_1_OnFloatValueChangedEvent__DelegateSignature final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Umg_hsvWindow_C_BndEvt__umg_hsvWindow_Slider_S_K2Node_ComponentBoundEvent_1_OnFloatValueChangedEvent__DelegateSignature) == 0x000004, "Wrong alignment on Umg_hsvWindow_C_BndEvt__umg_hsvWindow_Slider_S_K2Node_ComponentBoundEvent_1_OnFloatValueChangedEvent__DelegateSignature");
static_assert(sizeof(Umg_hsvWindow_C_BndEvt__umg_hsvWindow_Slider_S_K2Node_ComponentBoundEvent_1_OnFloatValueChangedEvent__DelegateSignature) == 0x000004, "Wrong size on Umg_hsvWindow_C_BndEvt__umg_hsvWindow_Slider_S_K2Node_ComponentBoundEvent_1_OnFloatValueChangedEvent__DelegateSignature");
static_assert(offsetof(Umg_hsvWindow_C_BndEvt__umg_hsvWindow_Slider_S_K2Node_ComponentBoundEvent_1_OnFloatValueChangedEvent__DelegateSignature, Value) == 0x000000, "Member 'Umg_hsvWindow_C_BndEvt__umg_hsvWindow_Slider_S_K2Node_ComponentBoundEvent_1_OnFloatValueChangedEvent__DelegateSignature::Value' has a wrong offset!");

// Function umg_hsvWindow.umg_hsvWindow_C.BndEvt__umg_hsvWindow_Slider_H_K2Node_ComponentBoundEvent_0_OnFloatValueChangedEvent__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct Umg_hsvWindow_C_BndEvt__umg_hsvWindow_Slider_H_K2Node_ComponentBoundEvent_0_OnFloatValueChangedEvent__DelegateSignature final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Umg_hsvWindow_C_BndEvt__umg_hsvWindow_Slider_H_K2Node_ComponentBoundEvent_0_OnFloatValueChangedEvent__DelegateSignature) == 0x000004, "Wrong alignment on Umg_hsvWindow_C_BndEvt__umg_hsvWindow_Slider_H_K2Node_ComponentBoundEvent_0_OnFloatValueChangedEvent__DelegateSignature");
static_assert(sizeof(Umg_hsvWindow_C_BndEvt__umg_hsvWindow_Slider_H_K2Node_ComponentBoundEvent_0_OnFloatValueChangedEvent__DelegateSignature) == 0x000004, "Wrong size on Umg_hsvWindow_C_BndEvt__umg_hsvWindow_Slider_H_K2Node_ComponentBoundEvent_0_OnFloatValueChangedEvent__DelegateSignature");
static_assert(offsetof(Umg_hsvWindow_C_BndEvt__umg_hsvWindow_Slider_H_K2Node_ComponentBoundEvent_0_OnFloatValueChangedEvent__DelegateSignature, Value) == 0x000000, "Member 'Umg_hsvWindow_C_BndEvt__umg_hsvWindow_Slider_H_K2Node_ComponentBoundEvent_0_OnFloatValueChangedEvent__DelegateSignature::Value' has a wrong offset!");

// Function umg_hsvWindow.umg_hsvWindow_C.Init
// 0x0050 (0x0050 - 0x0000)
struct Umg_hsvWindow_C_Init final
{
public:
	class AActor*                                 Param_Actor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Param_InColor;                                     // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RGBToHSV_H;                               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RGBToHSV_S;                               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RGBToHSV_V;                               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RGBToHSV_A;                               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1EB9[0x8];                                     // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               K2Node_MakeStruct_Vector4;                         // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode;          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_setActiveInterface_return;                // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Umg_hsvWindow_C_Init) == 0x000010, "Wrong alignment on Umg_hsvWindow_C_Init");
static_assert(sizeof(Umg_hsvWindow_C_Init) == 0x000050, "Wrong size on Umg_hsvWindow_C_Init");
static_assert(offsetof(Umg_hsvWindow_C_Init, Param_Actor) == 0x000000, "Member 'Umg_hsvWindow_C_Init::Param_Actor' has a wrong offset!");
static_assert(offsetof(Umg_hsvWindow_C_Init, Param_InColor) == 0x000008, "Member 'Umg_hsvWindow_C_Init::Param_InColor' has a wrong offset!");
static_assert(offsetof(Umg_hsvWindow_C_Init, CallFunc_RGBToHSV_H) == 0x000018, "Member 'Umg_hsvWindow_C_Init::CallFunc_RGBToHSV_H' has a wrong offset!");
static_assert(offsetof(Umg_hsvWindow_C_Init, CallFunc_RGBToHSV_S) == 0x00001C, "Member 'Umg_hsvWindow_C_Init::CallFunc_RGBToHSV_S' has a wrong offset!");
static_assert(offsetof(Umg_hsvWindow_C_Init, CallFunc_RGBToHSV_V) == 0x000020, "Member 'Umg_hsvWindow_C_Init::CallFunc_RGBToHSV_V' has a wrong offset!");
static_assert(offsetof(Umg_hsvWindow_C_Init, CallFunc_RGBToHSV_A) == 0x000024, "Member 'Umg_hsvWindow_C_Init::CallFunc_RGBToHSV_A' has a wrong offset!");
static_assert(offsetof(Umg_hsvWindow_C_Init, K2Node_MakeStruct_Vector4) == 0x000030, "Member 'Umg_hsvWindow_C_Init::K2Node_MakeStruct_Vector4' has a wrong offset!");
static_assert(offsetof(Umg_hsvWindow_C_Init, CallFunc_getMainGamemode_AsMain_Gamemode) == 0x000040, "Member 'Umg_hsvWindow_C_Init::CallFunc_getMainGamemode_AsMain_Gamemode' has a wrong offset!");
static_assert(offsetof(Umg_hsvWindow_C_Init, CallFunc_setActiveInterface_return) == 0x000048, "Member 'Umg_hsvWindow_C_Init::CallFunc_setActiveInterface_return' has a wrong offset!");

// Function umg_hsvWindow.umg_hsvWindow_C.upd
// 0x00A0 (0x00A0 - 0x0000)
struct Umg_hsvWindow_C_Upd final
{
public:
	float                                         CallFunc_BreakVector4_X;                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector4_Y;                           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector4_Z;                           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector4_W;                           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_HSVToRGB_ReturnValue;                     // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector4_X_1;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector4_Y_1;                         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector4_Z_1;                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector4_W_1;                         // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_FloatToText_ReturnValue;             // 0x0030(0x0018)()
	class FText                                   CallFunc_Conv_FloatToText_ReturnValue_1;           // 0x0048(0x0018)()
	class FText                                   CallFunc_Conv_FloatToText_ReturnValue_2;           // 0x0060(0x0018)()
	class FText                                   CallFunc_Conv_FloatToText_ReturnValue_3;           // 0x0078(0x0018)()
	float                                         CallFunc_BreakVector4_X_2;                         // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector4_Y_2;                         // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector4_Z_2;                         // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector4_W_2;                         // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Umg_hsvWindow_C_Upd) == 0x000008, "Wrong alignment on Umg_hsvWindow_C_Upd");
static_assert(sizeof(Umg_hsvWindow_C_Upd) == 0x0000A0, "Wrong size on Umg_hsvWindow_C_Upd");
static_assert(offsetof(Umg_hsvWindow_C_Upd, CallFunc_BreakVector4_X) == 0x000000, "Member 'Umg_hsvWindow_C_Upd::CallFunc_BreakVector4_X' has a wrong offset!");
static_assert(offsetof(Umg_hsvWindow_C_Upd, CallFunc_BreakVector4_Y) == 0x000004, "Member 'Umg_hsvWindow_C_Upd::CallFunc_BreakVector4_Y' has a wrong offset!");
static_assert(offsetof(Umg_hsvWindow_C_Upd, CallFunc_BreakVector4_Z) == 0x000008, "Member 'Umg_hsvWindow_C_Upd::CallFunc_BreakVector4_Z' has a wrong offset!");
static_assert(offsetof(Umg_hsvWindow_C_Upd, CallFunc_BreakVector4_W) == 0x00000C, "Member 'Umg_hsvWindow_C_Upd::CallFunc_BreakVector4_W' has a wrong offset!");
static_assert(offsetof(Umg_hsvWindow_C_Upd, CallFunc_HSVToRGB_ReturnValue) == 0x000010, "Member 'Umg_hsvWindow_C_Upd::CallFunc_HSVToRGB_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_hsvWindow_C_Upd, CallFunc_BreakVector4_X_1) == 0x000020, "Member 'Umg_hsvWindow_C_Upd::CallFunc_BreakVector4_X_1' has a wrong offset!");
static_assert(offsetof(Umg_hsvWindow_C_Upd, CallFunc_BreakVector4_Y_1) == 0x000024, "Member 'Umg_hsvWindow_C_Upd::CallFunc_BreakVector4_Y_1' has a wrong offset!");
static_assert(offsetof(Umg_hsvWindow_C_Upd, CallFunc_BreakVector4_Z_1) == 0x000028, "Member 'Umg_hsvWindow_C_Upd::CallFunc_BreakVector4_Z_1' has a wrong offset!");
static_assert(offsetof(Umg_hsvWindow_C_Upd, CallFunc_BreakVector4_W_1) == 0x00002C, "Member 'Umg_hsvWindow_C_Upd::CallFunc_BreakVector4_W_1' has a wrong offset!");
static_assert(offsetof(Umg_hsvWindow_C_Upd, CallFunc_Conv_FloatToText_ReturnValue) == 0x000030, "Member 'Umg_hsvWindow_C_Upd::CallFunc_Conv_FloatToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_hsvWindow_C_Upd, CallFunc_Conv_FloatToText_ReturnValue_1) == 0x000048, "Member 'Umg_hsvWindow_C_Upd::CallFunc_Conv_FloatToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Umg_hsvWindow_C_Upd, CallFunc_Conv_FloatToText_ReturnValue_2) == 0x000060, "Member 'Umg_hsvWindow_C_Upd::CallFunc_Conv_FloatToText_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Umg_hsvWindow_C_Upd, CallFunc_Conv_FloatToText_ReturnValue_3) == 0x000078, "Member 'Umg_hsvWindow_C_Upd::CallFunc_Conv_FloatToText_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Umg_hsvWindow_C_Upd, CallFunc_BreakVector4_X_2) == 0x000090, "Member 'Umg_hsvWindow_C_Upd::CallFunc_BreakVector4_X_2' has a wrong offset!");
static_assert(offsetof(Umg_hsvWindow_C_Upd, CallFunc_BreakVector4_Y_2) == 0x000094, "Member 'Umg_hsvWindow_C_Upd::CallFunc_BreakVector4_Y_2' has a wrong offset!");
static_assert(offsetof(Umg_hsvWindow_C_Upd, CallFunc_BreakVector4_Z_2) == 0x000098, "Member 'Umg_hsvWindow_C_Upd::CallFunc_BreakVector4_Z_2' has a wrong offset!");
static_assert(offsetof(Umg_hsvWindow_C_Upd, CallFunc_BreakVector4_W_2) == 0x00009C, "Member 'Umg_hsvWindow_C_Upd::CallFunc_BreakVector4_W_2' has a wrong offset!");

}

