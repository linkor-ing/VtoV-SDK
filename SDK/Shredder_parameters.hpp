#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Shredder

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Enum_interactionActions_structs.hpp"
#include "Engine_structs.hpp"
#include "Struct_settings_structs.hpp"
#include "Struct_save_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function shredder.shredder_C.getPriceMultiplier
// 0x0004 (0x0004 - 0x0000)
struct Shredder_C_GetPriceMultiplier final
{
public:
	float                                         PriceMult;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Shredder_C_GetPriceMultiplier) == 0x000004, "Wrong alignment on Shredder_C_GetPriceMultiplier");
static_assert(sizeof(Shredder_C_GetPriceMultiplier) == 0x000004, "Wrong size on Shredder_C_GetPriceMultiplier");
static_assert(offsetof(Shredder_C_GetPriceMultiplier, PriceMult) == 0x000000, "Member 'Shredder_C_GetPriceMultiplier::PriceMult' has a wrong offset!");

// Function shredder.shredder_C.skipRadial
// 0x0001 (0x0001 - 0x0000)
struct Shredder_C_SkipRadial final
{
public:
	bool                                          Skip;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Shredder_C_SkipRadial) == 0x000001, "Wrong alignment on Shredder_C_SkipRadial");
static_assert(sizeof(Shredder_C_SkipRadial) == 0x000001, "Wrong size on Shredder_C_SkipRadial");
static_assert(offsetof(Shredder_C_SkipRadial, Skip) == 0x000000, "Member 'Shredder_C_SkipRadial::Skip' has a wrong offset!");

// Function shredder.shredder_C.gascanFuel
// 0x0010 (0x0010 - 0x0000)
struct Shredder_C_GascanFuel final
{
public:
	class AProp_gascan_C*                         Gascan;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Fueled;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Shredder_C_GascanFuel) == 0x000008, "Wrong alignment on Shredder_C_GascanFuel");
static_assert(sizeof(Shredder_C_GascanFuel) == 0x000010, "Wrong size on Shredder_C_GascanFuel");
static_assert(offsetof(Shredder_C_GascanFuel, Gascan) == 0x000000, "Member 'Shredder_C_GascanFuel::Gascan' has a wrong offset!");
static_assert(offsetof(Shredder_C_GascanFuel, Fueled) == 0x000008, "Member 'Shredder_C_GascanFuel::Fueled' has a wrong offset!");

// Function shredder.shredder_C.toolboxFix
// 0x0010 (0x0010 - 0x0000)
struct Shredder_C_ToolboxFix final
{
public:
	class AProp_toolbox_C*                        Toolbox;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Shredder_C_ToolboxFix) == 0x000008, "Wrong alignment on Shredder_C_ToolboxFix");
static_assert(sizeof(Shredder_C_ToolboxFix) == 0x000010, "Wrong size on Shredder_C_ToolboxFix");
static_assert(offsetof(Shredder_C_ToolboxFix, Toolbox) == 0x000000, "Member 'Shredder_C_ToolboxFix::Toolbox' has a wrong offset!");
static_assert(offsetof(Shredder_C_ToolboxFix, Return) == 0x000008, "Member 'Shredder_C_ToolboxFix::Return' has a wrong offset!");

// Function shredder.shredder_C.GetKey
// 0x0010 (0x0010 - 0x0000)
struct Shredder_C_GetKey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Shredder_C_GetKey) == 0x000008, "Wrong alignment on Shredder_C_GetKey");
static_assert(sizeof(Shredder_C_GetKey) == 0x000010, "Wrong size on Shredder_C_GetKey");
static_assert(offsetof(Shredder_C_GetKey, Key) == 0x000000, "Member 'Shredder_C_GetKey::Key' has a wrong offset!");

// Function shredder.shredder_C.canBeUsedHold
// 0x0001 (0x0001 - 0x0000)
struct Shredder_C_CanBeUsedHold final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Shredder_C_CanBeUsedHold) == 0x000001, "Wrong alignment on Shredder_C_CanBeUsedHold");
static_assert(sizeof(Shredder_C_CanBeUsedHold) == 0x000001, "Wrong size on Shredder_C_CanBeUsedHold");
static_assert(offsetof(Shredder_C_CanBeUsedHold, Return) == 0x000000, "Member 'Shredder_C_CanBeUsedHold::Return' has a wrong offset!");

// Function shredder.shredder_C.processKeys
// 0x0001 (0x0001 - 0x0000)
struct Shredder_C_ProcessKeys final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Shredder_C_ProcessKeys) == 0x000001, "Wrong alignment on Shredder_C_ProcessKeys");
static_assert(sizeof(Shredder_C_ProcessKeys) == 0x000001, "Wrong size on Shredder_C_ProcessKeys");
static_assert(offsetof(Shredder_C_ProcessKeys, Return) == 0x000000, "Member 'Shredder_C_ProcessKeys::Return' has a wrong offset!");

// Function shredder.shredder_C.getOnlyKey
// 0x0010 (0x0010 - 0x0000)
struct Shredder_C_GetOnlyKey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Shredder_C_GetOnlyKey) == 0x000008, "Wrong alignment on Shredder_C_GetOnlyKey");
static_assert(sizeof(Shredder_C_GetOnlyKey) == 0x000010, "Wrong size on Shredder_C_GetOnlyKey");
static_assert(offsetof(Shredder_C_GetOnlyKey, Key) == 0x000000, "Member 'Shredder_C_GetOnlyKey::Key' has a wrong offset!");

// Function shredder.shredder_C.setPath
// 0x0018 (0x0018 - 0x0000)
struct Shredder_C_SetPath final
{
public:
	TArray<struct FVector>                        Path;                                              // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Return;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Shredder_C_SetPath) == 0x000008, "Wrong alignment on Shredder_C_SetPath");
static_assert(sizeof(Shredder_C_SetPath) == 0x000018, "Wrong size on Shredder_C_SetPath");
static_assert(offsetof(Shredder_C_SetPath, Path) == 0x000000, "Member 'Shredder_C_SetPath::Path' has a wrong offset!");
static_assert(offsetof(Shredder_C_SetPath, Return) == 0x000010, "Member 'Shredder_C_SetPath::Return' has a wrong offset!");

// Function shredder.shredder_C.getActionOptions
// 0x0088 (0x0088 - 0x0000)
struct Shredder_C_GetActionOptions final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Component;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         Options;                                           // 0x0018(0x0010)(Parm, OutParm)
	TArray<Enum_interactionActions>               Options_enum;                                      // 0x0028(0x0010)(Parm, OutParm)
	TArray<class FText>                           OptionsNamesOverlay;                               // 0x0038(0x0010)(Parm, OutParm)
	uint8                                         Number;                                            // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<Enum_interactionActions>               Temp_byte_Variable;                                // 0x0050(0x0010)(ReferenceParm)
	TArray<Enum_interactionActions>               K2Node_MakeArray_Array;                            // 0x0060(0x0010)(ReferenceParm)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<Enum_interactionActions>               K2Node_Select_Default;                             // 0x0078(0x0010)(ReferenceParm)
};
static_assert(alignof(Shredder_C_GetActionOptions) == 0x000008, "Wrong alignment on Shredder_C_GetActionOptions");
static_assert(sizeof(Shredder_C_GetActionOptions) == 0x000088, "Wrong size on Shredder_C_GetActionOptions");
static_assert(offsetof(Shredder_C_GetActionOptions, Player) == 0x000000, "Member 'Shredder_C_GetActionOptions::Player' has a wrong offset!");
static_assert(offsetof(Shredder_C_GetActionOptions, Component) == 0x000008, "Member 'Shredder_C_GetActionOptions::Component' has a wrong offset!");
static_assert(offsetof(Shredder_C_GetActionOptions, Actor) == 0x000010, "Member 'Shredder_C_GetActionOptions::Actor' has a wrong offset!");
static_assert(offsetof(Shredder_C_GetActionOptions, Options) == 0x000018, "Member 'Shredder_C_GetActionOptions::Options' has a wrong offset!");
static_assert(offsetof(Shredder_C_GetActionOptions, Options_enum) == 0x000028, "Member 'Shredder_C_GetActionOptions::Options_enum' has a wrong offset!");
static_assert(offsetof(Shredder_C_GetActionOptions, OptionsNamesOverlay) == 0x000038, "Member 'Shredder_C_GetActionOptions::OptionsNamesOverlay' has a wrong offset!");
static_assert(offsetof(Shredder_C_GetActionOptions, Number) == 0x000048, "Member 'Shredder_C_GetActionOptions::Number' has a wrong offset!");
static_assert(offsetof(Shredder_C_GetActionOptions, Temp_bool_Variable) == 0x000049, "Member 'Shredder_C_GetActionOptions::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Shredder_C_GetActionOptions, Temp_byte_Variable) == 0x000050, "Member 'Shredder_C_GetActionOptions::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(Shredder_C_GetActionOptions, K2Node_MakeArray_Array) == 0x000060, "Member 'Shredder_C_GetActionOptions::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Shredder_C_GetActionOptions, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000070, "Member 'Shredder_C_GetActionOptions::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(Shredder_C_GetActionOptions, K2Node_Select_Default) == 0x000078, "Member 'Shredder_C_GetActionOptions::K2Node_Select_Default' has a wrong offset!");

// Function shredder.shredder_C.landedOn
// 0x0010 (0x0010 - 0x0000)
struct Shredder_C_LandedOn final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreFallDamage;                                  // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Shredder_C_LandedOn) == 0x000008, "Wrong alignment on Shredder_C_LandedOn");
static_assert(sizeof(Shredder_C_LandedOn) == 0x000010, "Wrong size on Shredder_C_LandedOn");
static_assert(offsetof(Shredder_C_LandedOn, Player) == 0x000000, "Member 'Shredder_C_LandedOn::Player' has a wrong offset!");
static_assert(offsetof(Shredder_C_LandedOn, IgnoreFallDamage) == 0x000008, "Member 'Shredder_C_LandedOn::IgnoreFallDamage' has a wrong offset!");

// Function shredder.shredder_C.canBePutInContainer
// 0x0001 (0x0001 - 0x0000)
struct Shredder_C_CanBePutInContainer final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Shredder_C_CanBePutInContainer) == 0x000001, "Wrong alignment on Shredder_C_CanBePutInContainer");
static_assert(sizeof(Shredder_C_CanBePutInContainer) == 0x000001, "Wrong size on Shredder_C_CanBePutInContainer");
static_assert(offsetof(Shredder_C_CanBePutInContainer, Return) == 0x000000, "Member 'Shredder_C_CanBePutInContainer::Return' has a wrong offset!");

// Function shredder.shredder_C.isButtonUsed
// 0x0001 (0x0001 - 0x0000)
struct Shredder_C_IsButtonUsed final
{
public:
	bool                                          Failed;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Shredder_C_IsButtonUsed) == 0x000001, "Wrong alignment on Shredder_C_IsButtonUsed");
static_assert(sizeof(Shredder_C_IsButtonUsed) == 0x000001, "Wrong size on Shredder_C_IsButtonUsed");
static_assert(offsetof(Shredder_C_IsButtonUsed, Failed) == 0x000000, "Member 'Shredder_C_IsButtonUsed::Failed' has a wrong offset!");

// Function shredder.shredder_C.lookAt
// 0x0120 (0x0120 - 0x0000)
struct Shredder_C_LookAt final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          Return;                                            // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Text;                                              // 0x0098(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    boundObjectReplace;                                // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Number;                                            // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_MakeLiteralText_ReturnValue;              // 0x00B8(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_MakeLiteralText_ReturnValue_1;            // 0x00E0(0x0018)()
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_TextToString_ReturnValue_1;          // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_SelectString_ReturnValue;                 // 0x0110(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Shredder_C_LookAt) == 0x000008, "Wrong alignment on Shredder_C_LookAt");
static_assert(sizeof(Shredder_C_LookAt) == 0x000120, "Wrong size on Shredder_C_LookAt");
static_assert(offsetof(Shredder_C_LookAt, Player) == 0x000000, "Member 'Shredder_C_LookAt::Player' has a wrong offset!");
static_assert(offsetof(Shredder_C_LookAt, Hit) == 0x000008, "Member 'Shredder_C_LookAt::Hit' has a wrong offset!");
static_assert(offsetof(Shredder_C_LookAt, Return) == 0x000090, "Member 'Shredder_C_LookAt::Return' has a wrong offset!");
static_assert(offsetof(Shredder_C_LookAt, Text) == 0x000098, "Member 'Shredder_C_LookAt::Text' has a wrong offset!");
static_assert(offsetof(Shredder_C_LookAt, boundObjectReplace) == 0x0000A8, "Member 'Shredder_C_LookAt::boundObjectReplace' has a wrong offset!");
static_assert(offsetof(Shredder_C_LookAt, Number) == 0x0000B0, "Member 'Shredder_C_LookAt::Number' has a wrong offset!");
static_assert(offsetof(Shredder_C_LookAt, CallFunc_MakeLiteralText_ReturnValue) == 0x0000B8, "Member 'Shredder_C_LookAt::CallFunc_MakeLiteralText_ReturnValue' has a wrong offset!");
static_assert(offsetof(Shredder_C_LookAt, CallFunc_Conv_TextToString_ReturnValue) == 0x0000D0, "Member 'Shredder_C_LookAt::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(Shredder_C_LookAt, CallFunc_MakeLiteralText_ReturnValue_1) == 0x0000E0, "Member 'Shredder_C_LookAt::CallFunc_MakeLiteralText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Shredder_C_LookAt, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0000F8, "Member 'Shredder_C_LookAt::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(Shredder_C_LookAt, CallFunc_Conv_TextToString_ReturnValue_1) == 0x000100, "Member 'Shredder_C_LookAt::CallFunc_Conv_TextToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Shredder_C_LookAt, CallFunc_SelectString_ReturnValue) == 0x000110, "Member 'Shredder_C_LookAt::CallFunc_SelectString_ReturnValue' has a wrong offset!");

// Function shredder.shredder_C.noRespawn
// 0x0002 (0x0002 - 0x0000)
struct Shredder_C_NoRespawn final
{
public:
	bool                                          Param_NoRespawn;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Shredder_C_NoRespawn) == 0x000001, "Wrong alignment on Shredder_C_NoRespawn");
static_assert(sizeof(Shredder_C_NoRespawn) == 0x000002, "Wrong size on Shredder_C_NoRespawn");
static_assert(offsetof(Shredder_C_NoRespawn, Param_NoRespawn) == 0x000000, "Member 'Shredder_C_NoRespawn::Param_NoRespawn' has a wrong offset!");
static_assert(offsetof(Shredder_C_NoRespawn, Return) == 0x000001, "Member 'Shredder_C_NoRespawn::Return' has a wrong offset!");

// Function shredder.shredder_C.canPickup
// 0x0001 (0x0001 - 0x0000)
struct Shredder_C_CanPickup final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Shredder_C_CanPickup) == 0x000001, "Wrong alignment on Shredder_C_CanPickup");
static_assert(sizeof(Shredder_C_CanPickup) == 0x000001, "Wrong size on Shredder_C_CanPickup");
static_assert(offsetof(Shredder_C_CanPickup, Return) == 0x000000, "Member 'Shredder_C_CanPickup::Return' has a wrong offset!");

// Function shredder.shredder_C.asProp
// 0x0008 (0x0008 - 0x0000)
struct Shredder_C_AsProp final
{
public:
	class AProp_C*                                Return;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Shredder_C_AsProp) == 0x000008, "Wrong alignment on Shredder_C_AsProp");
static_assert(sizeof(Shredder_C_AsProp) == 0x000008, "Wrong size on Shredder_C_AsProp");
static_assert(offsetof(Shredder_C_AsProp, Return) == 0x000000, "Member 'Shredder_C_AsProp::Return' has a wrong offset!");

// Function shredder.shredder_C.dreamInv
// 0x0018 (0x0018 - 0x0000)
struct Shredder_C_DreamInv final
{
public:
	TArray<struct FStruct_save>                   Invv;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class ADreamBase_C*                           Base;                                              // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Shredder_C_DreamInv) == 0x000008, "Wrong alignment on Shredder_C_DreamInv");
static_assert(sizeof(Shredder_C_DreamInv) == 0x000018, "Wrong size on Shredder_C_DreamInv");
static_assert(offsetof(Shredder_C_DreamInv, Invv) == 0x000000, "Member 'Shredder_C_DreamInv::Invv' has a wrong offset!");
static_assert(offsetof(Shredder_C_DreamInv, Base) == 0x000010, "Member 'Shredder_C_DreamInv::Base' has a wrong offset!");

// Function shredder.shredder_C.buttonsVisibility
// 0x0004 (0x0004 - 0x0000)
struct Shredder_C_buttonsVisibility final
{
public:
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Shredder_C_buttonsVisibility) == 0x000004, "Wrong alignment on Shredder_C_buttonsVisibility");
static_assert(sizeof(Shredder_C_buttonsVisibility) == 0x000004, "Wrong size on Shredder_C_buttonsVisibility");
static_assert(offsetof(Shredder_C_buttonsVisibility, CallFunc_SelectFloat_ReturnValue) == 0x000000, "Member 'Shredder_C_buttonsVisibility::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");

// Function shredder.shredder_C.leaveWaterOrigin
// 0x0008 (0x0008 - 0x0000)
struct Shredder_C_LeaveWaterOrigin final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Shredder_C_LeaveWaterOrigin) == 0x000008, "Wrong alignment on Shredder_C_LeaveWaterOrigin");
static_assert(sizeof(Shredder_C_LeaveWaterOrigin) == 0x000008, "Wrong size on Shredder_C_LeaveWaterOrigin");
static_assert(offsetof(Shredder_C_LeaveWaterOrigin, Water) == 0x000000, "Member 'Shredder_C_LeaveWaterOrigin::Water' has a wrong offset!");

// Function shredder.shredder_C.virus
// 0x0001 (0x0001 - 0x0000)
struct Shredder_C_Virus final
{
public:
	bool                                          Activate;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Shredder_C_Virus) == 0x000001, "Wrong alignment on Shredder_C_Virus");
static_assert(sizeof(Shredder_C_Virus) == 0x000001, "Wrong size on Shredder_C_Virus");
static_assert(offsetof(Shredder_C_Virus, Activate) == 0x000000, "Member 'Shredder_C_Virus::Activate' has a wrong offset!");

// Function shredder.shredder_C.setPropProps
// 0x0003 (0x0003 - 0x0000)
struct Shredder_C_SetPropProps final
{
public:
	bool                                          Static;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Frozen;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Active;                                            // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Shredder_C_SetPropProps) == 0x000001, "Wrong alignment on Shredder_C_SetPropProps");
static_assert(sizeof(Shredder_C_SetPropProps) == 0x000003, "Wrong size on Shredder_C_SetPropProps");
static_assert(offsetof(Shredder_C_SetPropProps, Static) == 0x000000, "Member 'Shredder_C_SetPropProps::Static' has a wrong offset!");
static_assert(offsetof(Shredder_C_SetPropProps, Frozen) == 0x000001, "Member 'Shredder_C_SetPropProps::Frozen' has a wrong offset!");
static_assert(offsetof(Shredder_C_SetPropProps, Active) == 0x000002, "Member 'Shredder_C_SetPropProps::Active' has a wrong offset!");

// Function shredder.shredder_C.addDamage
// 0x00A8 (0x00A8 - 0x0000)
struct Shredder_C_AddDamage final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x000C(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                Impact;                                            // 0x0094(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipSetting;                                       // 0x00A0(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Shredder_C_AddDamage) == 0x000008, "Wrong alignment on Shredder_C_AddDamage");
static_assert(sizeof(Shredder_C_AddDamage) == 0x0000A8, "Wrong size on Shredder_C_AddDamage");
static_assert(offsetof(Shredder_C_AddDamage, Actor) == 0x000000, "Member 'Shredder_C_AddDamage::Actor' has a wrong offset!");
static_assert(offsetof(Shredder_C_AddDamage, Damage) == 0x000008, "Member 'Shredder_C_AddDamage::Damage' has a wrong offset!");
static_assert(offsetof(Shredder_C_AddDamage, Hit) == 0x00000C, "Member 'Shredder_C_AddDamage::Hit' has a wrong offset!");
static_assert(offsetof(Shredder_C_AddDamage, Impact) == 0x000094, "Member 'Shredder_C_AddDamage::Impact' has a wrong offset!");
static_assert(offsetof(Shredder_C_AddDamage, SkipSetting) == 0x0000A0, "Member 'Shredder_C_AddDamage::SkipSetting' has a wrong offset!");

// Function shredder.shredder_C.setKey
// 0x0010 (0x0010 - 0x0000)
struct Shredder_C_SetKey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Shredder_C_SetKey) == 0x000008, "Wrong alignment on Shredder_C_SetKey");
static_assert(sizeof(Shredder_C_SetKey) == 0x000010, "Wrong size on Shredder_C_SetKey");
static_assert(offsetof(Shredder_C_SetKey, Key) == 0x000000, "Member 'Shredder_C_SetKey::Key' has a wrong offset!");

// Function shredder.shredder_C.steppedOn
// 0x0090 (0x0090 - 0x0000)
struct Shredder_C_SteppedOn final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Shredder_C_SteppedOn) == 0x000008, "Wrong alignment on Shredder_C_SteppedOn");
static_assert(sizeof(Shredder_C_SteppedOn) == 0x000090, "Wrong size on Shredder_C_SteppedOn");
static_assert(offsetof(Shredder_C_SteppedOn, Player) == 0x000000, "Member 'Shredder_C_SteppedOn::Player' has a wrong offset!");
static_assert(offsetof(Shredder_C_SteppedOn, Hit) == 0x000008, "Member 'Shredder_C_SteppedOn::Hit' has a wrong offset!");

// Function shredder.shredder_C.fireDamage
// 0x0004 (0x0004 - 0x0000)
struct Shredder_C_FireDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Shredder_C_FireDamage) == 0x000004, "Wrong alignment on Shredder_C_FireDamage");
static_assert(sizeof(Shredder_C_FireDamage) == 0x000004, "Wrong size on Shredder_C_FireDamage");
static_assert(offsetof(Shredder_C_FireDamage, Damage) == 0x000000, "Member 'Shredder_C_FireDamage::Damage' has a wrong offset!");

// Function shredder.shredder_C.ignite
// 0x0004 (0x0004 - 0x0000)
struct Shredder_C_Ignite final
{
public:
	float                                         Fuel;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Shredder_C_Ignite) == 0x000004, "Wrong alignment on Shredder_C_Ignite");
static_assert(sizeof(Shredder_C_Ignite) == 0x000004, "Wrong size on Shredder_C_Ignite");
static_assert(offsetof(Shredder_C_Ignite, Fuel) == 0x000000, "Member 'Shredder_C_Ignite::Fuel' has a wrong offset!");

// Function shredder.shredder_C.receivedPhyiscsDamage
// 0x008C (0x008C - 0x0000)
struct Shredder_C_ReceivedPhyiscsDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hot;                                               // 0x0004(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Shredder_C_ReceivedPhyiscsDamage) == 0x000004, "Wrong alignment on Shredder_C_ReceivedPhyiscsDamage");
static_assert(sizeof(Shredder_C_ReceivedPhyiscsDamage) == 0x00008C, "Wrong size on Shredder_C_ReceivedPhyiscsDamage");
static_assert(offsetof(Shredder_C_ReceivedPhyiscsDamage, Damage) == 0x000000, "Member 'Shredder_C_ReceivedPhyiscsDamage::Damage' has a wrong offset!");
static_assert(offsetof(Shredder_C_ReceivedPhyiscsDamage, Hot) == 0x000004, "Member 'Shredder_C_ReceivedPhyiscsDamage::Hot' has a wrong offset!");

// Function shredder.shredder_C.playerHandUse_RMB
// 0x0008 (0x0008 - 0x0000)
struct Shredder_C_PlayerHandUse_RMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Shredder_C_PlayerHandUse_RMB) == 0x000008, "Wrong alignment on Shredder_C_PlayerHandUse_RMB");
static_assert(sizeof(Shredder_C_PlayerHandUse_RMB) == 0x000008, "Wrong size on Shredder_C_PlayerHandUse_RMB");
static_assert(offsetof(Shredder_C_PlayerHandUse_RMB, Player) == 0x000000, "Member 'Shredder_C_PlayerHandUse_RMB::Player' has a wrong offset!");

// Function shredder.shredder_C.playerHandUse_LMB
// 0x0008 (0x0008 - 0x0000)
struct Shredder_C_PlayerHandUse_LMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Shredder_C_PlayerHandUse_LMB) == 0x000008, "Wrong alignment on Shredder_C_PlayerHandUse_LMB");
static_assert(sizeof(Shredder_C_PlayerHandUse_LMB) == 0x000008, "Wrong size on Shredder_C_PlayerHandUse_LMB");
static_assert(offsetof(Shredder_C_PlayerHandUse_LMB, Player) == 0x000000, "Member 'Shredder_C_PlayerHandUse_LMB::Player' has a wrong offset!");

// Function shredder.shredder_C.exploded
// 0x0010 (0x0010 - 0x0000)
struct Shredder_C_Exploded final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Shredder_C_Exploded) == 0x000004, "Wrong alignment on Shredder_C_Exploded");
static_assert(sizeof(Shredder_C_Exploded) == 0x000010, "Wrong size on Shredder_C_Exploded");
static_assert(offsetof(Shredder_C_Exploded, Damage) == 0x000000, "Member 'Shredder_C_Exploded::Damage' has a wrong offset!");
static_assert(offsetof(Shredder_C_Exploded, Location) == 0x000004, "Member 'Shredder_C_Exploded::Location' has a wrong offset!");

// Function shredder.shredder_C.playerHandRelease_RMB
// 0x0008 (0x0008 - 0x0000)
struct Shredder_C_PlayerHandRelease_RMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Shredder_C_PlayerHandRelease_RMB) == 0x000008, "Wrong alignment on Shredder_C_PlayerHandRelease_RMB");
static_assert(sizeof(Shredder_C_PlayerHandRelease_RMB) == 0x000008, "Wrong size on Shredder_C_PlayerHandRelease_RMB");
static_assert(offsetof(Shredder_C_PlayerHandRelease_RMB, Player) == 0x000000, "Member 'Shredder_C_PlayerHandRelease_RMB::Player' has a wrong offset!");

// Function shredder.shredder_C.playerHandRelease_LMB
// 0x0008 (0x0008 - 0x0000)
struct Shredder_C_PlayerHandRelease_LMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Shredder_C_PlayerHandRelease_LMB) == 0x000008, "Wrong alignment on Shredder_C_PlayerHandRelease_LMB");
static_assert(sizeof(Shredder_C_PlayerHandRelease_LMB) == 0x000008, "Wrong size on Shredder_C_PlayerHandRelease_LMB");
static_assert(offsetof(Shredder_C_PlayerHandRelease_LMB, Player) == 0x000000, "Member 'Shredder_C_PlayerHandRelease_LMB::Player' has a wrong offset!");

// Function shredder.shredder_C.playerHandMouseWheel
// 0x0010 (0x0010 - 0x0000)
struct Shredder_C_PlayerHandMouseWheel final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WheelDelta;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Shredder_C_PlayerHandMouseWheel) == 0x000008, "Wrong alignment on Shredder_C_PlayerHandMouseWheel");
static_assert(sizeof(Shredder_C_PlayerHandMouseWheel) == 0x000010, "Wrong size on Shredder_C_PlayerHandMouseWheel");
static_assert(offsetof(Shredder_C_PlayerHandMouseWheel, Player) == 0x000000, "Member 'Shredder_C_PlayerHandMouseWheel::Player' has a wrong offset!");
static_assert(offsetof(Shredder_C_PlayerHandMouseWheel, WheelDelta) == 0x000008, "Member 'Shredder_C_PlayerHandMouseWheel::WheelDelta' has a wrong offset!");

// Function shredder.shredder_C.playerHandMouse
// 0x0010 (0x0010 - 0x0000)
struct Shredder_C_PlayerHandMouse final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Mouse;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Shredder_C_PlayerHandMouse) == 0x000008, "Wrong alignment on Shredder_C_PlayerHandMouse");
static_assert(sizeof(Shredder_C_PlayerHandMouse) == 0x000010, "Wrong size on Shredder_C_PlayerHandMouse");
static_assert(offsetof(Shredder_C_PlayerHandMouse, Player) == 0x000000, "Member 'Shredder_C_PlayerHandMouse::Player' has a wrong offset!");
static_assert(offsetof(Shredder_C_PlayerHandMouse, Mouse) == 0x000008, "Member 'Shredder_C_PlayerHandMouse::Mouse' has a wrong offset!");

// Function shredder.shredder_C.playerHandAnyKey
// 0x0028 (0x0028 - 0x0000)
struct Shredder_C_PlayerHandAnyKey final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   Key;                                               // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Pressed;                                           // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Shredder_C_PlayerHandAnyKey) == 0x000008, "Wrong alignment on Shredder_C_PlayerHandAnyKey");
static_assert(sizeof(Shredder_C_PlayerHandAnyKey) == 0x000028, "Wrong size on Shredder_C_PlayerHandAnyKey");
static_assert(offsetof(Shredder_C_PlayerHandAnyKey, Player) == 0x000000, "Member 'Shredder_C_PlayerHandAnyKey::Player' has a wrong offset!");
static_assert(offsetof(Shredder_C_PlayerHandAnyKey, Key) == 0x000008, "Member 'Shredder_C_PlayerHandAnyKey::Key' has a wrong offset!");
static_assert(offsetof(Shredder_C_PlayerHandAnyKey, Pressed) == 0x000020, "Member 'Shredder_C_PlayerHandAnyKey::Pressed' has a wrong offset!");

// Function shredder.shredder_C.addTemperature
// 0x0004 (0x0004 - 0x0000)
struct Shredder_C_AddTemperature final
{
public:
	float                                         Temperature;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Shredder_C_AddTemperature) == 0x000004, "Wrong alignment on Shredder_C_AddTemperature");
static_assert(sizeof(Shredder_C_AddTemperature) == 0x000004, "Wrong size on Shredder_C_AddTemperature");
static_assert(offsetof(Shredder_C_AddTemperature, Temperature) == 0x000000, "Member 'Shredder_C_AddTemperature::Temperature' has a wrong offset!");

// Function shredder.shredder_C.accumulateTemperature
// 0x0008 (0x0008 - 0x0000)
struct Shredder_C_AccumulateTemperature final
{
public:
	float                                         Temperature;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Shredder_C_AccumulateTemperature) == 0x000004, "Wrong alignment on Shredder_C_AccumulateTemperature");
static_assert(sizeof(Shredder_C_AccumulateTemperature) == 0x000008, "Wrong size on Shredder_C_AccumulateTemperature");
static_assert(offsetof(Shredder_C_AccumulateTemperature, Temperature) == 0x000000, "Member 'Shredder_C_AccumulateTemperature::Temperature' has a wrong offset!");
static_assert(offsetof(Shredder_C_AccumulateTemperature, Speed) == 0x000004, "Member 'Shredder_C_AccumulateTemperature::Speed' has a wrong offset!");

// Function shredder.shredder_C.ActionName
// 0x00A0 (0x00A0 - 0x0000)
struct Shredder_C_ActionName final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class FString                                 Param_Name;                                        // 0x0090(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Shredder_C_ActionName) == 0x000008, "Wrong alignment on Shredder_C_ActionName");
static_assert(sizeof(Shredder_C_ActionName) == 0x0000A0, "Wrong size on Shredder_C_ActionName");
static_assert(offsetof(Shredder_C_ActionName, Player) == 0x000000, "Member 'Shredder_C_ActionName::Player' has a wrong offset!");
static_assert(offsetof(Shredder_C_ActionName, Hit) == 0x000008, "Member 'Shredder_C_ActionName::Hit' has a wrong offset!");
static_assert(offsetof(Shredder_C_ActionName, Param_Name) == 0x000090, "Member 'Shredder_C_ActionName::Param_Name' has a wrong offset!");

// Function shredder.shredder_C.stepped
// 0x0004 (0x0004 - 0x0000)
struct Shredder_C_Stepped final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Shredder_C_Stepped) == 0x000004, "Wrong alignment on Shredder_C_Stepped");
static_assert(sizeof(Shredder_C_Stepped) == 0x000004, "Wrong size on Shredder_C_Stepped");
static_assert(offsetof(Shredder_C_Stepped, Volume) == 0x000000, "Member 'Shredder_C_Stepped::Volume' has a wrong offset!");

// Function shredder.shredder_C.playerLookAway
// 0x0008 (0x0008 - 0x0000)
struct Shredder_C_PlayerLookAway final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Shredder_C_PlayerLookAway) == 0x000008, "Wrong alignment on Shredder_C_PlayerLookAway");
static_assert(sizeof(Shredder_C_PlayerLookAway) == 0x000008, "Wrong size on Shredder_C_PlayerLookAway");
static_assert(offsetof(Shredder_C_PlayerLookAway, Player) == 0x000000, "Member 'Shredder_C_PlayerLookAway::Player' has a wrong offset!");

// Function shredder.shredder_C.reachedByExplosion
// 0x0010 (0x0010 - 0x0000)
struct Shredder_C_ReachedByExplosion final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Shredder_C_ReachedByExplosion) == 0x000004, "Wrong alignment on Shredder_C_ReachedByExplosion");
static_assert(sizeof(Shredder_C_ReachedByExplosion) == 0x000010, "Wrong size on Shredder_C_ReachedByExplosion");
static_assert(offsetof(Shredder_C_ReachedByExplosion, Location) == 0x000000, "Member 'Shredder_C_ReachedByExplosion::Location' has a wrong offset!");
static_assert(offsetof(Shredder_C_ReachedByExplosion, Damage) == 0x00000C, "Member 'Shredder_C_ReachedByExplosion::Damage' has a wrong offset!");

// Function shredder.shredder_C.slice
// 0x0001 (0x0001 - 0x0000)
struct Shredder_C_Slice final
{
public:
	bool                                          Clean;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Shredder_C_Slice) == 0x000001, "Wrong alignment on Shredder_C_Slice");
static_assert(sizeof(Shredder_C_Slice) == 0x000001, "Wrong size on Shredder_C_Slice");
static_assert(offsetof(Shredder_C_Slice, Clean) == 0x000000, "Member 'Shredder_C_Slice::Clean' has a wrong offset!");

// Function shredder.shredder_C.playerUsedOn
// 0x0090 (0x0090 - 0x0000)
struct Shredder_C_PlayerUsedOn final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Shredder_C_PlayerUsedOn) == 0x000008, "Wrong alignment on Shredder_C_PlayerUsedOn");
static_assert(sizeof(Shredder_C_PlayerUsedOn) == 0x000090, "Wrong size on Shredder_C_PlayerUsedOn");
static_assert(offsetof(Shredder_C_PlayerUsedOn, Player) == 0x000000, "Member 'Shredder_C_PlayerUsedOn::Player' has a wrong offset!");
static_assert(offsetof(Shredder_C_PlayerUsedOn, Hit) == 0x000008, "Member 'Shredder_C_PlayerUsedOn::Hit' has a wrong offset!");

// Function shredder.shredder_C.hooked
// 0x0008 (0x0008 - 0x0000)
struct Shredder_C_Hooked final
{
public:
	class AHook_C*                                Hook;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Shredder_C_Hooked) == 0x000008, "Wrong alignment on Shredder_C_Hooked");
static_assert(sizeof(Shredder_C_Hooked) == 0x000008, "Wrong size on Shredder_C_Hooked");
static_assert(offsetof(Shredder_C_Hooked, Hook) == 0x000000, "Member 'Shredder_C_Hooked::Hook' has a wrong offset!");

// Function shredder.shredder_C.cleanSponge
// 0x0010 (0x0010 - 0x0000)
struct Shredder_C_CleanSponge final
{
public:
	float                                         Clean;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          Player;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Shredder_C_CleanSponge) == 0x000008, "Wrong alignment on Shredder_C_CleanSponge");
static_assert(sizeof(Shredder_C_CleanSponge) == 0x000010, "Wrong size on Shredder_C_CleanSponge");
static_assert(offsetof(Shredder_C_CleanSponge, Clean) == 0x000000, "Member 'Shredder_C_CleanSponge::Clean' has a wrong offset!");
static_assert(offsetof(Shredder_C_CleanSponge, Player) == 0x000008, "Member 'Shredder_C_CleanSponge::Player' has a wrong offset!");

// Function shredder.shredder_C.hookTension
// 0x0008 (0x0008 - 0x0000)
struct Shredder_C_HookTension final
{
public:
	class AHook_C*                                Hook;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Shredder_C_HookTension) == 0x000008, "Wrong alignment on Shredder_C_HookTension");
static_assert(sizeof(Shredder_C_HookTension) == 0x000008, "Wrong size on Shredder_C_HookTension");
static_assert(offsetof(Shredder_C_HookTension, Hook) == 0x000000, "Member 'Shredder_C_HookTension::Hook' has a wrong offset!");

// Function shredder.shredder_C.player_use
// 0x0090 (0x0090 - 0x0000)
struct Shredder_C_Player_use final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Shredder_C_Player_use) == 0x000008, "Wrong alignment on Shredder_C_Player_use");
static_assert(sizeof(Shredder_C_Player_use) == 0x000090, "Wrong size on Shredder_C_Player_use");
static_assert(offsetof(Shredder_C_Player_use, Player) == 0x000000, "Member 'Shredder_C_Player_use::Player' has a wrong offset!");
static_assert(offsetof(Shredder_C_Player_use, Hit) == 0x000008, "Member 'Shredder_C_Player_use::Hit' has a wrong offset!");

// Function shredder.shredder_C.kicked
// 0x0001 (0x0001 - 0x0000)
struct Shredder_C_Kicked final
{
public:
	bool                                          Kick;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Shredder_C_Kicked) == 0x000001, "Wrong alignment on Shredder_C_Kicked");
static_assert(sizeof(Shredder_C_Kicked) == 0x000001, "Wrong size on Shredder_C_Kicked");
static_assert(offsetof(Shredder_C_Kicked, Kick) == 0x000000, "Member 'Shredder_C_Kicked::Kick' has a wrong offset!");

// Function shredder.shredder_C.sendName
// 0x0008 (0x0008 - 0x0000)
struct Shredder_C_SendName final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Shredder_C_SendName) == 0x000004, "Wrong alignment on Shredder_C_SendName");
static_assert(sizeof(Shredder_C_SendName) == 0x000008, "Wrong size on Shredder_C_SendName");
static_assert(offsetof(Shredder_C_SendName, Param_Name) == 0x000000, "Member 'Shredder_C_SendName::Param_Name' has a wrong offset!");

// Function shredder.shredder_C.thrown
// 0x0008 (0x0008 - 0x0000)
struct Shredder_C_Thrown final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Shredder_C_Thrown) == 0x000008, "Wrong alignment on Shredder_C_Thrown");
static_assert(sizeof(Shredder_C_Thrown) == 0x000008, "Wrong size on Shredder_C_Thrown");
static_assert(offsetof(Shredder_C_Thrown, Player) == 0x000000, "Member 'Shredder_C_Thrown::Player' has a wrong offset!");

// Function shredder.shredder_C.damageByPlayer
// 0x0098 (0x0098 - 0x0000)
struct Shredder_C_DamageByPlayer final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         Damage;                                            // 0x0090(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Shredder_C_DamageByPlayer) == 0x000008, "Wrong alignment on Shredder_C_DamageByPlayer");
static_assert(sizeof(Shredder_C_DamageByPlayer) == 0x000098, "Wrong size on Shredder_C_DamageByPlayer");
static_assert(offsetof(Shredder_C_DamageByPlayer, Player) == 0x000000, "Member 'Shredder_C_DamageByPlayer::Player' has a wrong offset!");
static_assert(offsetof(Shredder_C_DamageByPlayer, Hit) == 0x000008, "Member 'Shredder_C_DamageByPlayer::Hit' has a wrong offset!");
static_assert(offsetof(Shredder_C_DamageByPlayer, Damage) == 0x000090, "Member 'Shredder_C_DamageByPlayer::Damage' has a wrong offset!");

// Function shredder.shredder_C.playerUnequip
// 0x0008 (0x0008 - 0x0000)
struct Shredder_C_PlayerUnequip final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Shredder_C_PlayerUnequip) == 0x000008, "Wrong alignment on Shredder_C_PlayerUnequip");
static_assert(sizeof(Shredder_C_PlayerUnequip) == 0x000008, "Wrong size on Shredder_C_PlayerUnequip");
static_assert(offsetof(Shredder_C_PlayerUnequip, Player) == 0x000000, "Member 'Shredder_C_PlayerUnequip::Player' has a wrong offset!");

// Function shredder.shredder_C.playerHold
// 0x0008 (0x0008 - 0x0000)
struct Shredder_C_PlayerHold final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Shredder_C_PlayerHold) == 0x000008, "Wrong alignment on Shredder_C_PlayerHold");
static_assert(sizeof(Shredder_C_PlayerHold) == 0x000008, "Wrong size on Shredder_C_PlayerHold");
static_assert(offsetof(Shredder_C_PlayerHold, Player) == 0x000000, "Member 'Shredder_C_PlayerHold::Player' has a wrong offset!");

// Function shredder.shredder_C.playerR
// 0x0008 (0x0008 - 0x0000)
struct Shredder_C_PlayerR final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Shredder_C_PlayerR) == 0x000008, "Wrong alignment on Shredder_C_PlayerR");
static_assert(sizeof(Shredder_C_PlayerR) == 0x000008, "Wrong size on Shredder_C_PlayerR");
static_assert(offsetof(Shredder_C_PlayerR, Player) == 0x000000, "Member 'Shredder_C_PlayerR::Player' has a wrong offset!");

// Function shredder.shredder_C.stuffUpgraded
// 0x0008 (0x0008 - 0x0000)
struct Shredder_C_StuffUpgraded final
{
public:
	class AMainGamemode_C*                        GameMode;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Shredder_C_StuffUpgraded) == 0x000008, "Wrong alignment on Shredder_C_StuffUpgraded");
static_assert(sizeof(Shredder_C_StuffUpgraded) == 0x000008, "Wrong size on Shredder_C_StuffUpgraded");
static_assert(offsetof(Shredder_C_StuffUpgraded, GameMode) == 0x000000, "Member 'Shredder_C_StuffUpgraded::GameMode' has a wrong offset!");

// Function shredder.shredder_C.settingsApplied
// 0x00F0 (0x00F0 - 0x0000)
struct Shredder_C_SettingsApplied final
{
public:
	struct FStruct_settings                       Settings;                                          // 0x0000(0x00F0)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(Shredder_C_SettingsApplied) == 0x000008, "Wrong alignment on Shredder_C_SettingsApplied");
static_assert(sizeof(Shredder_C_SettingsApplied) == 0x0000F0, "Wrong size on Shredder_C_SettingsApplied");
static_assert(offsetof(Shredder_C_SettingsApplied, Settings) == 0x000000, "Member 'Shredder_C_SettingsApplied::Settings' has a wrong offset!");

// Function shredder.shredder_C.AnyKey
// 0x0020 (0x0020 - 0x0000)
struct Shredder_C_AnyKey final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Pressed;                                           // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Shredder_C_AnyKey) == 0x000008, "Wrong alignment on Shredder_C_AnyKey");
static_assert(sizeof(Shredder_C_AnyKey) == 0x000020, "Wrong size on Shredder_C_AnyKey");
static_assert(offsetof(Shredder_C_AnyKey, Key) == 0x000000, "Member 'Shredder_C_AnyKey::Key' has a wrong offset!");
static_assert(offsetof(Shredder_C_AnyKey, Pressed) == 0x000018, "Member 'Shredder_C_AnyKey::Pressed' has a wrong offset!");

// Function shredder.shredder_C.applyColor
// 0x0010 (0x0010 - 0x0000)
struct Shredder_C_ApplyColor final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Shredder_C_ApplyColor) == 0x000004, "Wrong alignment on Shredder_C_ApplyColor");
static_assert(sizeof(Shredder_C_ApplyColor) == 0x000010, "Wrong size on Shredder_C_ApplyColor");
static_assert(offsetof(Shredder_C_ApplyColor, Color) == 0x000000, "Member 'Shredder_C_ApplyColor::Color' has a wrong offset!");

// Function shredder.shredder_C.texturePickerApply
// 0x0018 (0x0018 - 0x0000)
struct Shredder_C_TexturePickerApply final
{
public:
	class UUmg_texturePicker_C*                   Picker;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Texture;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Shredder_C_TexturePickerApply) == 0x000008, "Wrong alignment on Shredder_C_TexturePickerApply");
static_assert(sizeof(Shredder_C_TexturePickerApply) == 0x000018, "Wrong size on Shredder_C_TexturePickerApply");
static_assert(offsetof(Shredder_C_TexturePickerApply, Picker) == 0x000000, "Member 'Shredder_C_TexturePickerApply::Picker' has a wrong offset!");
static_assert(offsetof(Shredder_C_TexturePickerApply, Texture) == 0x000008, "Member 'Shredder_C_TexturePickerApply::Texture' has a wrong offset!");
static_assert(offsetof(Shredder_C_TexturePickerApply, Param_Index) == 0x000010, "Member 'Shredder_C_TexturePickerApply::Param_Index' has a wrong offset!");

// Function shredder.shredder_C.BndEvt__drivePort_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct Shredder_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Shredder_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on Shredder_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(Shredder_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on Shredder_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(Shredder_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'Shredder_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Shredder_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'Shredder_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(Shredder_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'Shredder_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(Shredder_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'Shredder_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Shredder_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'Shredder_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(Shredder_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'Shredder_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function shredder.shredder_C.BndEvt__drivePort_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct Shredder_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Shredder_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on Shredder_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(Shredder_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on Shredder_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(Shredder_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'Shredder_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Shredder_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'Shredder_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(Shredder_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'Shredder_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(Shredder_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'Shredder_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function shredder.shredder_C.enterWater
// 0x0008 (0x0008 - 0x0000)
struct Shredder_C_EnterWater final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Shredder_C_EnterWater) == 0x000008, "Wrong alignment on Shredder_C_EnterWater");
static_assert(sizeof(Shredder_C_EnterWater) == 0x000008, "Wrong size on Shredder_C_EnterWater");
static_assert(offsetof(Shredder_C_EnterWater, Water) == 0x000000, "Member 'Shredder_C_EnterWater::Water' has a wrong offset!");

// Function shredder.shredder_C.ImpactDamage
// 0x00A8 (0x00A8 - 0x0000)
struct Shredder_C_ImpactDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0004(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0090(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Impact;                                            // 0x0098(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Shredder_C_ImpactDamage) == 0x000008, "Wrong alignment on Shredder_C_ImpactDamage");
static_assert(sizeof(Shredder_C_ImpactDamage) == 0x0000A8, "Wrong size on Shredder_C_ImpactDamage");
static_assert(offsetof(Shredder_C_ImpactDamage, Damage) == 0x000000, "Member 'Shredder_C_ImpactDamage::Damage' has a wrong offset!");
static_assert(offsetof(Shredder_C_ImpactDamage, Hit) == 0x000004, "Member 'Shredder_C_ImpactDamage::Hit' has a wrong offset!");
static_assert(offsetof(Shredder_C_ImpactDamage, Actor) == 0x000090, "Member 'Shredder_C_ImpactDamage::Actor' has a wrong offset!");
static_assert(offsetof(Shredder_C_ImpactDamage, Impact) == 0x000098, "Member 'Shredder_C_ImpactDamage::Impact' has a wrong offset!");

// Function shredder.shredder_C.enterWaterOrigin
// 0x0008 (0x0008 - 0x0000)
struct Shredder_C_EnterWaterOrigin final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Shredder_C_EnterWaterOrigin) == 0x000008, "Wrong alignment on Shredder_C_EnterWaterOrigin");
static_assert(sizeof(Shredder_C_EnterWaterOrigin) == 0x000008, "Wrong size on Shredder_C_EnterWaterOrigin");
static_assert(offsetof(Shredder_C_EnterWaterOrigin, Water) == 0x000000, "Member 'Shredder_C_EnterWaterOrigin::Water' has a wrong offset!");

// Function shredder.shredder_C.leaveWater
// 0x0008 (0x0008 - 0x0000)
struct Shredder_C_LeaveWater final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Shredder_C_LeaveWater) == 0x000008, "Wrong alignment on Shredder_C_LeaveWater");
static_assert(sizeof(Shredder_C_LeaveWater) == 0x000008, "Wrong size on Shredder_C_LeaveWater");
static_assert(offsetof(Shredder_C_LeaveWater, Water) == 0x000000, "Member 'Shredder_C_LeaveWater::Water' has a wrong offset!");

// Function shredder.shredder_C.actionOptionIndex
// 0x0098 (0x0098 - 0x0000)
struct Shredder_C_ActionOptionIndex final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	Enum_interactionActions                       Action;                                            // 0x0090(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Shredder_C_ActionOptionIndex) == 0x000008, "Wrong alignment on Shredder_C_ActionOptionIndex");
static_assert(sizeof(Shredder_C_ActionOptionIndex) == 0x000098, "Wrong size on Shredder_C_ActionOptionIndex");
static_assert(offsetof(Shredder_C_ActionOptionIndex, Player) == 0x000000, "Member 'Shredder_C_ActionOptionIndex::Player' has a wrong offset!");
static_assert(offsetof(Shredder_C_ActionOptionIndex, Hit) == 0x000008, "Member 'Shredder_C_ActionOptionIndex::Hit' has a wrong offset!");
static_assert(offsetof(Shredder_C_ActionOptionIndex, Action) == 0x000090, "Member 'Shredder_C_ActionOptionIndex::Action' has a wrong offset!");

// Function shredder.shredder_C.Dest
// 0x0008 (0x0008 - 0x0000)
struct Shredder_C_Dest final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Shredder_C_Dest) == 0x000008, "Wrong alignment on Shredder_C_Dest");
static_assert(sizeof(Shredder_C_Dest) == 0x000008, "Wrong size on Shredder_C_Dest");
static_assert(offsetof(Shredder_C_Dest, DestroyedActor) == 0x000000, "Member 'Shredder_C_Dest::DestroyedActor' has a wrong offset!");

// Function shredder.shredder_C.ExecuteUbergraph_shredder
// 0x0AB0 (0x0AB0 - 0x0000)
struct Shredder_C_ExecuteUbergraph_shredder final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_activate;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_static;                               // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_frozen;                               // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_active;                               // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class AActor*                                 K2Node_Event_actor_1;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_6;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_7;                                // 0x0014(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                K2Node_Event_impact_1;                             // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_skipSetting;                          // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_Event_key_2;                                // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_18;                            // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_6;                                // 0x00C8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         K2Node_Event_damage_5;                             // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_fuel;                                 // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_4;                             // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hot;                                  // 0x015C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_1E4[0x4];                                      // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_17;                            // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_16;                            // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_3;                             // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_location_1;                           // 0x01FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_15;                            // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_14;                            // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_13;                            // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_wheelDelta;                           // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_224[0x4];                                      // 0x0224(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_12;                            // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Event_mouse;                                // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_11;                            // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_Event_key_1;                                // 0x0240(0x0018)(HasGetValueTypeHash)
	bool                                          K2Node_Event_pressed_1;                            // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_259[0x3];                                      // 0x0259(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_temperature_1;                        // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_temperature;                          // 0x0260(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_speed;                                // 0x0264(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_10;                            // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_5;                                // 0x0270(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class FString                                 K2Node_Event_name_1;                               // 0x02F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         K2Node_Event_volume;                               // 0x0308(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30C[0x4];                                      // 0x030C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_9;                             // 0x0310(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_location;                             // 0x0318(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_2;                             // 0x0324(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_clean_1;                              // 0x0328(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_329[0x7];                                      // 0x0329(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_8;                             // 0x0330(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_4;                                // 0x0338(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AHook_C*                                K2Node_Event_hook_1;                               // 0x03C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_clean;                                // 0x03C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3CC[0x4];                                      // 0x03CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_7;                             // 0x03D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHook_C*                                K2Node_Event_hook;                                 // 0x03D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_6;                             // 0x03E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_3;                                // 0x03E8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          K2Node_Event_kick;                                 // 0x0470(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_471[0x3];                                      // 0x0471(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_name;                                 // 0x0474(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_47C[0x4];                                      // 0x047C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_5;                             // 0x0480(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_4;                             // 0x0488(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_2;                                // 0x0490(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         K2Node_Event_damage_1;                             // 0x0518(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51C[0x4];                                      // 0x051C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_3;                             // 0x0520(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_2;                             // 0x0528(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_1;                             // 0x0530(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainGamemode_C*                        K2Node_Event_gamemode;                             // 0x0538(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStruct_settings                       K2Node_Event_settings;                             // 0x0540(0x00F0)(HasGetValueTypeHash)
	struct FKey                                   K2Node_Event_key;                                  // 0x0630(0x0018)(HasGetValueTypeHash)
	bool                                          K2Node_Event_pressed;                              // 0x0648(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_649[0x3];                                      // 0x0649(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Event_color;                                // 0x064C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65C[0x4];                                      // 0x065C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUmg_texturePicker_C*                   K2Node_Event_picker;                               // 0x0660(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Event_texture;                              // 0x0668(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_index;                                // 0x0670(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_674[0x4];                                      // 0x0674(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_1;  // 0x0678(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_1;           // 0x0680(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_1;            // 0x0688(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_1;       // 0x0690(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x0694(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_695[0x3];                                      // 0x0695(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0698(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AProp_drive_C*                          K2Node_DynamicCast_AsProp_Drive;                   // 0x0720(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0728(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_729[0x7];                                      // 0x0729(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0730(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0760(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x076C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0778(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocationAndRotation_SweepHitResult; // 0x0784(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocationAndRotation_ReturnValue; // 0x080C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_80D[0x3];                                      // 0x080D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0810(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0818(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0820(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0828(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_82C[0x4];                                      // 0x082C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AWaterVolume_C*                         K2Node_Event_water_2;                              // 0x0830(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage;                               // 0x0838(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_1;                                // 0x083C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_8C4[0x4];                                      // 0x08C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_actor;                                // 0x08C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_impact;                               // 0x08D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8DC[0x4];                                      // 0x08DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          CallFunc_getMainPlayer_AsMain_Player;              // 0x08E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWaterVolume_C*                         K2Node_Event_water_1;                              // 0x08E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x08F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F1[0x7];                                      // 0x08F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AWaterVolume_C*                         K2Node_Event_water_3;                              // 0x08F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWaterVolume_C*                         K2Node_Event_water;                                // 0x0900(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player;                               // 0x0908(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit;                                  // 0x0910(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	Enum_interactionActions                       K2Node_Event_action;                               // 0x0998(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0999(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x099A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x099B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakHitResult_Time;                      // 0x099C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x09A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x09A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x09B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x09BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x09C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9D4[0x4];                                      // 0x09D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x09D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x09E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x09E8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x09F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x09F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x09FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0A00(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0A04(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0A10(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1C[0x4];                                      // 0x0A1C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_DestroyedActor;                 // 0x0A20(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0A28(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A29[0x3];                                      // 0x0A29(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class AActor* DestroyedActor)> K2Node_CreateDelegate_OutputDelegate;              // 0x0A2C(0x0010)(ZeroConstructor, NoDestructor)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0A3C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A48[0x8];                                      // 0x0A48(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0A50(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0A80(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0A88(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A89[0x7];                                      // 0x0A89(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AExplosion_C*                           CallFunc_FinishSpawningActor_ReturnValue;          // 0x0A90(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0A98(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A99[0x7];                                      // 0x0A99(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IInt_objects_C>        CallFunc_addDamage_self_CastInput;                 // 0x0AA0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Shredder_C_ExecuteUbergraph_shredder) == 0x000010, "Wrong alignment on Shredder_C_ExecuteUbergraph_shredder");
static_assert(sizeof(Shredder_C_ExecuteUbergraph_shredder) == 0x000AB0, "Wrong size on Shredder_C_ExecuteUbergraph_shredder");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, EntryPoint) == 0x000000, "Member 'Shredder_C_ExecuteUbergraph_shredder::EntryPoint' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_activate) == 0x000004, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_activate' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_static) == 0x000005, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_static' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_frozen) == 0x000006, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_frozen' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_active) == 0x000007, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_active' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_actor_1) == 0x000008, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_actor_1' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_damage_6) == 0x000010, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_damage_6' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_hit_7) == 0x000014, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_hit_7' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_impact_1) == 0x00009C, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_impact_1' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_skipSetting) == 0x0000A8, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_skipSetting' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_key_2) == 0x0000B0, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_key_2' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_player_18) == 0x0000C0, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_player_18' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_hit_6) == 0x0000C8, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_hit_6' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_damage_5) == 0x000150, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_damage_5' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_fuel) == 0x000154, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_fuel' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_damage_4) == 0x000158, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_damage_4' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_hot) == 0x00015C, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_hot' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_player_17) == 0x0001E8, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_player_17' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_player_16) == 0x0001F0, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_player_16' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_damage_3) == 0x0001F8, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_damage_3' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_location_1) == 0x0001FC, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_location_1' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_player_15) == 0x000208, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_player_15' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_player_14) == 0x000210, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_player_14' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_player_13) == 0x000218, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_player_13' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_wheelDelta) == 0x000220, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_wheelDelta' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_player_12) == 0x000228, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_player_12' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_mouse) == 0x000230, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_mouse' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_player_11) == 0x000238, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_player_11' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_key_1) == 0x000240, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_key_1' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_pressed_1) == 0x000258, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_pressed_1' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_temperature_1) == 0x00025C, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_temperature_1' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_temperature) == 0x000260, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_temperature' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_speed) == 0x000264, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_speed' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_player_10) == 0x000268, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_player_10' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_hit_5) == 0x000270, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_hit_5' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_name_1) == 0x0002F8, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_name_1' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_volume) == 0x000308, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_volume' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_player_9) == 0x000310, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_player_9' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_location) == 0x000318, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_location' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_damage_2) == 0x000324, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_damage_2' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_clean_1) == 0x000328, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_clean_1' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_player_8) == 0x000330, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_player_8' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_hit_4) == 0x000338, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_hit_4' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_hook_1) == 0x0003C0, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_hook_1' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_clean) == 0x0003C8, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_clean' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_player_7) == 0x0003D0, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_player_7' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_hook) == 0x0003D8, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_hook' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_player_6) == 0x0003E0, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_player_6' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_hit_3) == 0x0003E8, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_hit_3' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_kick) == 0x000470, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_kick' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_name) == 0x000474, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_name' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_player_5) == 0x000480, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_player_5' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_player_4) == 0x000488, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_player_4' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_hit_2) == 0x000490, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_hit_2' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_damage_1) == 0x000518, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_damage_1' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_player_3) == 0x000520, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_player_3' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_player_2) == 0x000528, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_player_2' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_player_1) == 0x000530, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_player_1' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_gamemode) == 0x000538, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_gamemode' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_settings) == 0x000540, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_settings' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_key) == 0x000630, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_key' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_pressed) == 0x000648, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_pressed' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_color) == 0x00064C, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_color' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_picker) == 0x000660, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_picker' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_texture) == 0x000668, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_texture' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_index) == 0x000670, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_index' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_ComponentBoundEvent_OverlappedComponent_1) == 0x000678, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_ComponentBoundEvent_OverlappedComponent_1' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_ComponentBoundEvent_OtherActor_1) == 0x000680, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_ComponentBoundEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_ComponentBoundEvent_OtherComp_1) == 0x000688, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_ComponentBoundEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_ComponentBoundEvent_OtherBodyIndex_1) == 0x000690, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_ComponentBoundEvent_OtherBodyIndex_1' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_ComponentBoundEvent_bFromSweep) == 0x000694, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_ComponentBoundEvent_SweepResult) == 0x000698, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_DynamicCast_AsProp_Drive) == 0x000720, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_DynamicCast_AsProp_Drive' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_DynamicCast_bSuccess) == 0x000728, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000730, "Member 'Shredder_C_ExecuteUbergraph_shredder::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, CallFunc_BreakTransform_Location) == 0x000760, "Member 'Shredder_C_ExecuteUbergraph_shredder::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, CallFunc_BreakTransform_Rotation) == 0x00076C, "Member 'Shredder_C_ExecuteUbergraph_shredder::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, CallFunc_BreakTransform_Scale) == 0x000778, "Member 'Shredder_C_ExecuteUbergraph_shredder::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, CallFunc_K2_SetActorLocationAndRotation_SweepHitResult) == 0x000784, "Member 'Shredder_C_ExecuteUbergraph_shredder::CallFunc_K2_SetActorLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, CallFunc_K2_SetActorLocationAndRotation_ReturnValue) == 0x00080C, "Member 'Shredder_C_ExecuteUbergraph_shredder::CallFunc_K2_SetActorLocationAndRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000810, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_ComponentBoundEvent_OtherActor) == 0x000818, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_ComponentBoundEvent_OtherComp) == 0x000820, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000828, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_water_2) == 0x000830, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_water_2' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_damage) == 0x000838, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_damage' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_hit_1) == 0x00083C, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_hit_1' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_actor) == 0x0008C8, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_actor' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_impact) == 0x0008D0, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_impact' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, CallFunc_getMainPlayer_AsMain_Player) == 0x0008E0, "Member 'Shredder_C_ExecuteUbergraph_shredder::CallFunc_getMainPlayer_AsMain_Player' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_water_1) == 0x0008E8, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_water_1' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x0008F0, "Member 'Shredder_C_ExecuteUbergraph_shredder::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_water_3) == 0x0008F8, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_water_3' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_water) == 0x000900, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_water' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_player) == 0x000908, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_player' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_hit) == 0x000910, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_hit' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_Event_action) == 0x000998, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_Event_action' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_SwitchEnum_CmpSuccess) == 0x000999, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, CallFunc_BreakHitResult_bBlockingHit) == 0x00099A, "Member 'Shredder_C_ExecuteUbergraph_shredder::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, CallFunc_BreakHitResult_bInitialOverlap) == 0x00099B, "Member 'Shredder_C_ExecuteUbergraph_shredder::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, CallFunc_BreakHitResult_Time) == 0x00099C, "Member 'Shredder_C_ExecuteUbergraph_shredder::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, CallFunc_BreakHitResult_Distance) == 0x0009A0, "Member 'Shredder_C_ExecuteUbergraph_shredder::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, CallFunc_BreakHitResult_Location) == 0x0009A4, "Member 'Shredder_C_ExecuteUbergraph_shredder::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, CallFunc_BreakHitResult_ImpactPoint) == 0x0009B0, "Member 'Shredder_C_ExecuteUbergraph_shredder::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, CallFunc_BreakHitResult_Normal) == 0x0009BC, "Member 'Shredder_C_ExecuteUbergraph_shredder::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, CallFunc_BreakHitResult_ImpactNormal) == 0x0009C8, "Member 'Shredder_C_ExecuteUbergraph_shredder::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, CallFunc_BreakHitResult_PhysMat) == 0x0009D8, "Member 'Shredder_C_ExecuteUbergraph_shredder::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, CallFunc_BreakHitResult_HitActor) == 0x0009E0, "Member 'Shredder_C_ExecuteUbergraph_shredder::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, CallFunc_BreakHitResult_HitComponent) == 0x0009E8, "Member 'Shredder_C_ExecuteUbergraph_shredder::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, CallFunc_BreakHitResult_HitBoneName) == 0x0009F0, "Member 'Shredder_C_ExecuteUbergraph_shredder::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, CallFunc_BreakHitResult_HitItem) == 0x0009F8, "Member 'Shredder_C_ExecuteUbergraph_shredder::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, CallFunc_BreakHitResult_ElementIndex) == 0x0009FC, "Member 'Shredder_C_ExecuteUbergraph_shredder::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, CallFunc_BreakHitResult_FaceIndex) == 0x000A00, "Member 'Shredder_C_ExecuteUbergraph_shredder::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, CallFunc_BreakHitResult_TraceStart) == 0x000A04, "Member 'Shredder_C_ExecuteUbergraph_shredder::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, CallFunc_BreakHitResult_TraceEnd) == 0x000A10, "Member 'Shredder_C_ExecuteUbergraph_shredder::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_CustomEvent_DestroyedActor) == 0x000A20, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_CustomEvent_DestroyedActor' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, CallFunc_IsValid_ReturnValue) == 0x000A28, "Member 'Shredder_C_ExecuteUbergraph_shredder::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, K2Node_CreateDelegate_OutputDelegate) == 0x000A2C, "Member 'Shredder_C_ExecuteUbergraph_shredder::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000A3C, "Member 'Shredder_C_ExecuteUbergraph_shredder::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, CallFunc_MakeTransform_ReturnValue) == 0x000A50, "Member 'Shredder_C_ExecuteUbergraph_shredder::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000A80, "Member 'Shredder_C_ExecuteUbergraph_shredder::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, CallFunc_IsValid_ReturnValue_1) == 0x000A88, "Member 'Shredder_C_ExecuteUbergraph_shredder::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, CallFunc_FinishSpawningActor_ReturnValue) == 0x000A90, "Member 'Shredder_C_ExecuteUbergraph_shredder::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, CallFunc_IsValid_ReturnValue_2) == 0x000A98, "Member 'Shredder_C_ExecuteUbergraph_shredder::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Shredder_C_ExecuteUbergraph_shredder, CallFunc_addDamage_self_CastInput) == 0x000AA0, "Member 'Shredder_C_ExecuteUbergraph_shredder::CallFunc_addDamage_self_CastInput' has a wrong offset!");

}

