#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VotV

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class VotV.bpCodeLib
// 0x0000 (0x0028 - 0x0028)
class UbpCodeLib final : public UBlueprintFunctionLibrary
{
public:
	static void BoundingBox2D(class APlayerController* PlayerController, class UPrimitiveComponent* Comp, TArray<struct FVector>* Verts, struct FVector2D* Min, struct FVector2D* Max, struct FVector2D* Origin, struct FVector2D* Size, bool* ClipX, bool* ClipY);
	static void BoundingBox2DPoints(class APlayerController* PlayerController, const TArray<struct FVector>& Verts, struct FVector2D* Min, struct FVector2D* Max, struct FVector2D* Origin, struct FVector2D* Size, bool* ClipX, bool* ClipY);
	static void boyoancy(const TArray<class AActor*>& ActorsInWater, const TArray<float>& ActorsSurface, const TArray<float>& ActorsBoyoancy, const TArray<struct FTransform>& Boxes, const TArray<bool>& CenterUnderwaterCompare, TArray<bool>* CenterUnderwaterCopy, float PowerDepth, float MaxPower, const TArray<class USplineComponent*>& RiverSplines, const TArray<float>& RiversRadiusIn, const TArray<float>& RiversRadiusOut, const TArray<float>& RiversForce, float Damping);
	static void boyoancyForce(class UPrimitiveComponent* Component, float Param_boyoancyForce, float Surface, float PowerDepth, float MaxPower, float Damping);
	static bool CanBoxFitInBox(const struct FVector& big, const struct FVector& Small);
	static class FString GetMachineID();
	static void GetMotion(const TArray<struct FColor>& Pixels_a, const TArray<struct FColor>& Pixels_b, float* Result);
	static void MeshConvexVolume(class UStaticMeshComponent* StaticMesh, int32 Depth, float* Volume, int32* Iters, float* MinVol, TArray<struct FVector>* Points);
	static void MeshConvexVolume2(class UStaticMeshComponent* StaticMesh, float* Volume);
	static void ProcessPhysImpact(class AActor* Object, class UPrimitiveComponent* Component, const struct FHitResult& Hit, const struct FVector& Impact, class USoundBase* ImpactSound, class USoundBase* DamageSound, class USoundBase* DestroySound, class USoundAttenuation* Attenuation, class USoundConcurrency* Concurrency, float CurrentHealth, float ImpactResistance, float ImpactDamage, float DamageResistance, float Mass, bool* IsHit, float* DebugFloat1, bool* DebugBool1);
	static void RugGen(class AActor* Owner, int32 Size_X, int32 Size_Y, float Size, float Height, float Lift, float TraceSize, float MaxRad, int32 MaxSm, TArray<struct FVector>* Verts, TArray<int32>* Tris, TArray<struct FVector>* Normals, TArray<struct FVector2D>* UVs);
	static void ScrapingMath(class UPrimitiveComponent* Component, const struct FHitResult& Hit, class UAudioComponent* Audio, bool* CanScrape, float& Vol);
	static void StringEquation(const class FString& Equation, float* Answer);
	static float TetrahedronVolume(const struct FVector& VecA, const struct FVector& VecB, const struct FVector& VecC, const struct FVector& VecD);
	static void TranslateAriral(const class FString& In, class FString* Out);
	static void TriangleNormal(const struct FVector& Point1, const struct FVector& Point2, const struct FVector& Point3, struct FVector* Normal);
	static void VecBoundBox(const TArray<struct FVector>& Vecs, struct FVector* Min, struct FVector* Max, struct FVector* Box, struct FVector* Origin, struct FVector* boundingCenter);
	static void WeightedRandomV2(const TArray<float>& Weights, int32* Param_Index);
	static void WeightedRandomV2_exponent(const TArray<float>& Weights, float Exponent, int32* Param_Index);
	static void WeightedRandomV2_lerp(const TArray<float>& Weights, float Ulerp, int32* Param_Index);

	TArray<class AActor*> GetAllAttachedActors(class AActor* ParentActor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"bpCodeLib">();
	}
	static class UbpCodeLib* GetDefaultObj()
	{
		return GetDefaultObjImpl<UbpCodeLib>();
	}
};
static_assert(alignof(UbpCodeLib) == 0x000008, "Wrong alignment on UbpCodeLib");
static_assert(sizeof(UbpCodeLib) == 0x000028, "Wrong size on UbpCodeLib");

// Class VotV.cppInterface
// 0x0000 (0x0028 - 0x0028)
class ICppInterface final : public IInterface
{
public:
	void EnteredTheWater();
	void ExitTheWater();
	void ImpactDamageCPP(float Damage, const struct FHitResult& Hit, class AActor* Actor, const struct FVector& Impact);
	void ImpactSquishCPP(class UPrimitiveComponent* Component);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"cppInterface">();
	}
	static class ICppInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ICppInterface>();
	}
};
static_assert(alignof(ICppInterface) == 0x000008, "Wrong alignment on ICppInterface");
static_assert(sizeof(ICppInterface) == 0x000028, "Wrong size on ICppInterface");

}

