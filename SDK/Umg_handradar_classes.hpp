#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Umg_handradar

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass umg_handradar.umg_handradar_C
// 0x00D8 (0x0338 - 0x0260)
class UUmg_handradar_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 Image;                                             // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_1;                                           // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_2;                                           // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_3;                                           // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_4;                                           // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_5;                                           // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_6;                                           // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_7;                                           // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_8;                                           // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_9;                                           // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_37;                                          // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_68;                                          // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_130;                                         // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_ping;                                        // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           PingCanvas;                                        // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           Pivot;                                             // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Text_posdist;                                      // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Text_posh;                                         // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Text_posx;                                         // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Text_posy;                                         // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Text_posz;                                         // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DynmatPing;                                        // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Angle;                                             // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2286[0x4];                                     // 0x031C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Scanned;                                           // 0x0320(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         Owner;                                             // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         A;                                                 // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_umg_handradar(int32 EntryPoint);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void Construct();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"umg_handradar_C">();
	}
	static class UUmg_handradar_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUmg_handradar_C>();
	}
};
static_assert(alignof(UUmg_handradar_C) == 0x000008, "Wrong alignment on UUmg_handradar_C");
static_assert(sizeof(UUmg_handradar_C) == 0x000338, "Wrong size on UUmg_handradar_C");
static_assert(offsetof(UUmg_handradar_C, UberGraphFrame) == 0x000260, "Member 'UUmg_handradar_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUmg_handradar_C, Image) == 0x000268, "Member 'UUmg_handradar_C::Image' has a wrong offset!");
static_assert(offsetof(UUmg_handradar_C, Image_1) == 0x000270, "Member 'UUmg_handradar_C::Image_1' has a wrong offset!");
static_assert(offsetof(UUmg_handradar_C, Image_2) == 0x000278, "Member 'UUmg_handradar_C::Image_2' has a wrong offset!");
static_assert(offsetof(UUmg_handradar_C, Image_3) == 0x000280, "Member 'UUmg_handradar_C::Image_3' has a wrong offset!");
static_assert(offsetof(UUmg_handradar_C, Image_4) == 0x000288, "Member 'UUmg_handradar_C::Image_4' has a wrong offset!");
static_assert(offsetof(UUmg_handradar_C, Image_5) == 0x000290, "Member 'UUmg_handradar_C::Image_5' has a wrong offset!");
static_assert(offsetof(UUmg_handradar_C, Image_6) == 0x000298, "Member 'UUmg_handradar_C::Image_6' has a wrong offset!");
static_assert(offsetof(UUmg_handradar_C, Image_7) == 0x0002A0, "Member 'UUmg_handradar_C::Image_7' has a wrong offset!");
static_assert(offsetof(UUmg_handradar_C, Image_8) == 0x0002A8, "Member 'UUmg_handradar_C::Image_8' has a wrong offset!");
static_assert(offsetof(UUmg_handradar_C, Image_9) == 0x0002B0, "Member 'UUmg_handradar_C::Image_9' has a wrong offset!");
static_assert(offsetof(UUmg_handradar_C, Image_37) == 0x0002B8, "Member 'UUmg_handradar_C::Image_37' has a wrong offset!");
static_assert(offsetof(UUmg_handradar_C, Image_68) == 0x0002C0, "Member 'UUmg_handradar_C::Image_68' has a wrong offset!");
static_assert(offsetof(UUmg_handradar_C, Image_130) == 0x0002C8, "Member 'UUmg_handradar_C::Image_130' has a wrong offset!");
static_assert(offsetof(UUmg_handradar_C, Image_ping) == 0x0002D0, "Member 'UUmg_handradar_C::Image_ping' has a wrong offset!");
static_assert(offsetof(UUmg_handradar_C, PingCanvas) == 0x0002D8, "Member 'UUmg_handradar_C::PingCanvas' has a wrong offset!");
static_assert(offsetof(UUmg_handradar_C, Pivot) == 0x0002E0, "Member 'UUmg_handradar_C::Pivot' has a wrong offset!");
static_assert(offsetof(UUmg_handradar_C, Text_posdist) == 0x0002E8, "Member 'UUmg_handradar_C::Text_posdist' has a wrong offset!");
static_assert(offsetof(UUmg_handradar_C, Text_posh) == 0x0002F0, "Member 'UUmg_handradar_C::Text_posh' has a wrong offset!");
static_assert(offsetof(UUmg_handradar_C, Text_posx) == 0x0002F8, "Member 'UUmg_handradar_C::Text_posx' has a wrong offset!");
static_assert(offsetof(UUmg_handradar_C, Text_posy) == 0x000300, "Member 'UUmg_handradar_C::Text_posy' has a wrong offset!");
static_assert(offsetof(UUmg_handradar_C, Text_posz) == 0x000308, "Member 'UUmg_handradar_C::Text_posz' has a wrong offset!");
static_assert(offsetof(UUmg_handradar_C, DynmatPing) == 0x000310, "Member 'UUmg_handradar_C::DynmatPing' has a wrong offset!");
static_assert(offsetof(UUmg_handradar_C, Angle) == 0x000318, "Member 'UUmg_handradar_C::Angle' has a wrong offset!");
static_assert(offsetof(UUmg_handradar_C, Scanned) == 0x000320, "Member 'UUmg_handradar_C::Scanned' has a wrong offset!");
static_assert(offsetof(UUmg_handradar_C, Owner) == 0x000330, "Member 'UUmg_handradar_C::Owner' has a wrong offset!");
static_assert(offsetof(UUmg_handradar_C, A) == 0x000334, "Member 'UUmg_handradar_C::A' has a wrong offset!");

}

