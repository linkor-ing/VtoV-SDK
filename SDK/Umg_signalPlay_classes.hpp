#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Umg_signalPlay

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Struct_signal_data2_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass umg_signalPlay.umg_signalPlay_C
// 0x0320 (0x0580 - 0x0260)
class UUmg_signalPlay_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCanvasPanel*                           Canvas_signalList;                                 // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           CanvasPanel_83;                                    // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_27;                                          // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_76;                                          // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_239;                                         // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_activated;                                     // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_eq;                                            // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_image;                                         // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_spec;                                          // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox_137;                                       // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Text_SText;                                        // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Txt_page;                                          // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Txt_vol;                                           // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           Vbox_bot;                                          // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           Vbox_signalList;                                   // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           Vbox_top;                                          // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	float                                         Alpha;                                             // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29C4[0x4];                                     // 0x02EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_signal_data2                   SingalPlayData;                                    // 0x02F0(0x01D0)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UTexture2D*                             Signal_image;                                      // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Dynmat_image;                                      // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Singal_sound;                                      // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Signal_text;                                       // 0x04D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         SoundDuration;                                     // 0x04E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29C5[0x4];                                     // 0x04EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APanel_signal_C*                        Panel;                                             // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Decoder;                                           // 0x04F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29C6[0x4];                                     // 0x04FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UConstantQNRT*                          Nrt;                                               // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 Rt_snd;                                            // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvas*                                Canvas_snd;                                        // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Canvas_size;                                       // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Dynmat_snd;                                        // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SelectIndex;                                       // 0x0528(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29C7[0x4];                                     // 0x052C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USignalSlot_C*>                  Slots;                                             // 0x0530(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          Active;                                            // 0x0540(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CountPlayback;                                     // 0x0541(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29C8[0x2];                                     // 0x0542(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TextLen;                                           // 0x0544(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ResPers;                                           // 0x0548(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29C9[0x4];                                     // 0x054C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 Rt_spectr;                                         // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Dynmat_spec;                                       // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Prev_a;                                            // 0x0560(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          VisMode;                                           // 0x0564(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29CA[0x3];                                     // 0x0565(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDrawToRenderTargetContext             CanvasContext;                                     // 0x0568(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	bool                                          HasCanvas;                                         // 0x0578(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_umg_signalPlay(int32 EntryPoint);
	void VolChange(int32 Vol);
	void SetPlayback(float Param_Alpha);
	void PowerChanged(bool Active_calc, bool Active_downl, bool Active_coords, bool Active_play, bool Active_light);
	void GamemodeBeginPlay();
	void SignalDeleted();
	void RepeatPlay();
	void PlaySignal();
	void ApplyColor(const struct FLinearColor& Color);
	void PropRenderer_finishProps();
	void GamemodeMakeKeys();
	void AnyKey(const struct FKey& Key, bool Pressed);
	void GamemodePreLoad();
	void Unfocused();
	void SettingsApplied(const struct FStruct_settings& Settings);
	void Unfoc();
	void StuffUpgraded(class AMainGamemode_C* GameMode);
	void SignalSaved();
	void DeleteSignal();
	void CreateList();
	void SetListLoc();
	void StopSounds();
	void CopySignal(const struct FStruct_signal_data2& Param_SingalPlayData);
	void SetCanvas(bool Param_VisMode);
	void EndCanvas();
	void DreamInv(TArray<struct FStruct_save>& Invv, class ADreamBase_C** Base);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"umg_signalPlay_C">();
	}
	static class UUmg_signalPlay_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUmg_signalPlay_C>();
	}
};
static_assert(alignof(UUmg_signalPlay_C) == 0x000008, "Wrong alignment on UUmg_signalPlay_C");
static_assert(sizeof(UUmg_signalPlay_C) == 0x000580, "Wrong size on UUmg_signalPlay_C");
static_assert(offsetof(UUmg_signalPlay_C, UberGraphFrame) == 0x000260, "Member 'UUmg_signalPlay_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUmg_signalPlay_C, Canvas_signalList) == 0x000268, "Member 'UUmg_signalPlay_C::Canvas_signalList' has a wrong offset!");
static_assert(offsetof(UUmg_signalPlay_C, CanvasPanel_83) == 0x000270, "Member 'UUmg_signalPlay_C::CanvasPanel_83' has a wrong offset!");
static_assert(offsetof(UUmg_signalPlay_C, Image_27) == 0x000278, "Member 'UUmg_signalPlay_C::Image_27' has a wrong offset!");
static_assert(offsetof(UUmg_signalPlay_C, Image_76) == 0x000280, "Member 'UUmg_signalPlay_C::Image_76' has a wrong offset!");
static_assert(offsetof(UUmg_signalPlay_C, Image_239) == 0x000288, "Member 'UUmg_signalPlay_C::Image_239' has a wrong offset!");
static_assert(offsetof(UUmg_signalPlay_C, Img_activated) == 0x000290, "Member 'UUmg_signalPlay_C::Img_activated' has a wrong offset!");
static_assert(offsetof(UUmg_signalPlay_C, Img_eq) == 0x000298, "Member 'UUmg_signalPlay_C::Img_eq' has a wrong offset!");
static_assert(offsetof(UUmg_signalPlay_C, Img_image) == 0x0002A0, "Member 'UUmg_signalPlay_C::Img_image' has a wrong offset!");
static_assert(offsetof(UUmg_signalPlay_C, Img_spec) == 0x0002A8, "Member 'UUmg_signalPlay_C::Img_spec' has a wrong offset!");
static_assert(offsetof(UUmg_signalPlay_C, SizeBox_137) == 0x0002B0, "Member 'UUmg_signalPlay_C::SizeBox_137' has a wrong offset!");
static_assert(offsetof(UUmg_signalPlay_C, Text_SText) == 0x0002B8, "Member 'UUmg_signalPlay_C::Text_SText' has a wrong offset!");
static_assert(offsetof(UUmg_signalPlay_C, Txt_page) == 0x0002C0, "Member 'UUmg_signalPlay_C::Txt_page' has a wrong offset!");
static_assert(offsetof(UUmg_signalPlay_C, Txt_vol) == 0x0002C8, "Member 'UUmg_signalPlay_C::Txt_vol' has a wrong offset!");
static_assert(offsetof(UUmg_signalPlay_C, Vbox_bot) == 0x0002D0, "Member 'UUmg_signalPlay_C::Vbox_bot' has a wrong offset!");
static_assert(offsetof(UUmg_signalPlay_C, Vbox_signalList) == 0x0002D8, "Member 'UUmg_signalPlay_C::Vbox_signalList' has a wrong offset!");
static_assert(offsetof(UUmg_signalPlay_C, Vbox_top) == 0x0002E0, "Member 'UUmg_signalPlay_C::Vbox_top' has a wrong offset!");
static_assert(offsetof(UUmg_signalPlay_C, Alpha) == 0x0002E8, "Member 'UUmg_signalPlay_C::Alpha' has a wrong offset!");
static_assert(offsetof(UUmg_signalPlay_C, SingalPlayData) == 0x0002F0, "Member 'UUmg_signalPlay_C::SingalPlayData' has a wrong offset!");
static_assert(offsetof(UUmg_signalPlay_C, Signal_image) == 0x0004C0, "Member 'UUmg_signalPlay_C::Signal_image' has a wrong offset!");
static_assert(offsetof(UUmg_signalPlay_C, Dynmat_image) == 0x0004C8, "Member 'UUmg_signalPlay_C::Dynmat_image' has a wrong offset!");
static_assert(offsetof(UUmg_signalPlay_C, Singal_sound) == 0x0004D0, "Member 'UUmg_signalPlay_C::Singal_sound' has a wrong offset!");
static_assert(offsetof(UUmg_signalPlay_C, Signal_text) == 0x0004D8, "Member 'UUmg_signalPlay_C::Signal_text' has a wrong offset!");
static_assert(offsetof(UUmg_signalPlay_C, SoundDuration) == 0x0004E8, "Member 'UUmg_signalPlay_C::SoundDuration' has a wrong offset!");
static_assert(offsetof(UUmg_signalPlay_C, Panel) == 0x0004F0, "Member 'UUmg_signalPlay_C::Panel' has a wrong offset!");
static_assert(offsetof(UUmg_signalPlay_C, Decoder) == 0x0004F8, "Member 'UUmg_signalPlay_C::Decoder' has a wrong offset!");
static_assert(offsetof(UUmg_signalPlay_C, Nrt) == 0x000500, "Member 'UUmg_signalPlay_C::Nrt' has a wrong offset!");
static_assert(offsetof(UUmg_signalPlay_C, Rt_snd) == 0x000508, "Member 'UUmg_signalPlay_C::Rt_snd' has a wrong offset!");
static_assert(offsetof(UUmg_signalPlay_C, Canvas_snd) == 0x000510, "Member 'UUmg_signalPlay_C::Canvas_snd' has a wrong offset!");
static_assert(offsetof(UUmg_signalPlay_C, Canvas_size) == 0x000518, "Member 'UUmg_signalPlay_C::Canvas_size' has a wrong offset!");
static_assert(offsetof(UUmg_signalPlay_C, Dynmat_snd) == 0x000520, "Member 'UUmg_signalPlay_C::Dynmat_snd' has a wrong offset!");
static_assert(offsetof(UUmg_signalPlay_C, SelectIndex) == 0x000528, "Member 'UUmg_signalPlay_C::SelectIndex' has a wrong offset!");
static_assert(offsetof(UUmg_signalPlay_C, Slots) == 0x000530, "Member 'UUmg_signalPlay_C::Slots' has a wrong offset!");
static_assert(offsetof(UUmg_signalPlay_C, Active) == 0x000540, "Member 'UUmg_signalPlay_C::Active' has a wrong offset!");
static_assert(offsetof(UUmg_signalPlay_C, CountPlayback) == 0x000541, "Member 'UUmg_signalPlay_C::CountPlayback' has a wrong offset!");
static_assert(offsetof(UUmg_signalPlay_C, TextLen) == 0x000544, "Member 'UUmg_signalPlay_C::TextLen' has a wrong offset!");
static_assert(offsetof(UUmg_signalPlay_C, ResPers) == 0x000548, "Member 'UUmg_signalPlay_C::ResPers' has a wrong offset!");
static_assert(offsetof(UUmg_signalPlay_C, Rt_spectr) == 0x000550, "Member 'UUmg_signalPlay_C::Rt_spectr' has a wrong offset!");
static_assert(offsetof(UUmg_signalPlay_C, Dynmat_spec) == 0x000558, "Member 'UUmg_signalPlay_C::Dynmat_spec' has a wrong offset!");
static_assert(offsetof(UUmg_signalPlay_C, Prev_a) == 0x000560, "Member 'UUmg_signalPlay_C::Prev_a' has a wrong offset!");
static_assert(offsetof(UUmg_signalPlay_C, VisMode) == 0x000564, "Member 'UUmg_signalPlay_C::VisMode' has a wrong offset!");
static_assert(offsetof(UUmg_signalPlay_C, CanvasContext) == 0x000568, "Member 'UUmg_signalPlay_C::CanvasContext' has a wrong offset!");
static_assert(offsetof(UUmg_signalPlay_C, HasCanvas) == 0x000578, "Member 'UUmg_signalPlay_C::HasCanvas' has a wrong offset!");

}

