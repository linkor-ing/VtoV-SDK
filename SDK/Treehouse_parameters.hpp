#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Treehouse

#include "Basic.hpp"

#include "Struct_settings_structs.hpp"
#include "Struct_save_structs.hpp"
#include "Enum_interactionActions_structs.hpp"
#include "Struct_mBool_structs.hpp"
#include "Struct_triggerSave_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Struct_mString_structs.hpp"
#include "Struct_mInt_structs.hpp"
#include "InputCore_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function treehouse.treehouse_C.ExecuteUbergraph_treehouse
// 0x0980 (0x0980 - 0x0000)
struct Treehouse_C_ExecuteUbergraph_treehouse final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainGamemode_C*                        K2Node_Event_gamemode;                             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStruct_settings                       K2Node_Event_settings;                             // 0x0018(0x00F0)(HasGetValueTypeHash)
	struct FKey                                   K2Node_Event_key_2;                                // 0x0108(0x0018)(HasGetValueTypeHash)
	bool                                          K2Node_Event_pressed_1;                            // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Event_color;                                // 0x0124(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUmg_texturePicker_C*                   K2Node_Event_picker;                               // 0x0138(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Event_texture;                              // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_index_1;                              // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_5;                             // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_5;                                // 0x0150(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AActor*                                 K2Node_Event_actor_1;                              // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_impact_1;                             // 0x01E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1EC[0x4];                                      // 0x01EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AWaterVolume_C*                         K2Node_Event_water_3;                              // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWaterVolume_C*                         K2Node_Event_water_2;                              // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWaterVolume_C*                         K2Node_Event_water_1;                              // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWaterVolume_C*                         K2Node_Event_water;                                // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_activate;                             // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_static;                               // 0x0211(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_frozen;                               // 0x0212(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_active_1;                             // 0x0213(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_214[0x4];                                      // 0x0214(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_actor;                                // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_4;                             // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_4;                                // 0x0224(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                K2Node_Event_impact;                               // 0x02AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_skipSetting;                          // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B9[0x7];                                      // 0x02B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_Event_key_1;                                // 0x02C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_12;                            // 0x02D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_3;                                // 0x02D8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         K2Node_Event_damage_3;                             // 0x0360(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_fuel;                                 // 0x0364(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_2;                             // 0x0368(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hot;                                  // 0x036C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_3F4[0x4];                                      // 0x03F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_11;                            // 0x03F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_2;                                // 0x0400(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	Enum_interactionActions                       K2Node_Event_action;                               // 0x0488(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_489[0x7];                                      // 0x0489(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_10;                            // 0x0490(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_9;                             // 0x0498(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_1;                             // 0x04A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_location_1;                           // 0x04A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_8;                             // 0x04B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_7;                             // 0x04B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_6;                             // 0x04C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_wheelDelta;                           // 0x04C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CC[0x4];                                      // 0x04CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_5;                             // 0x04D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Event_mouse;                                // 0x04D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_4;                             // 0x04E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_Event_key;                                  // 0x04E8(0x0018)(HasGetValueTypeHash)
	bool                                          K2Node_Event_pressed;                              // 0x0500(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_501[0x3];                                      // 0x0501(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_temperature_1;                        // 0x0504(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_temperature;                          // 0x0508(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_speed;                                // 0x050C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_3;                             // 0x0510(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_1;                                // 0x0518(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class FString                                 K2Node_Event_name;                                 // 0x05A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         K2Node_Event_volume;                               // 0x05B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B4[0x4];                                      // 0x05B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_2;                             // 0x05B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_clean_1;                              // 0x05C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C1[0x7];                                      // 0x05C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_1;                             // 0x05C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit;                                  // 0x05D0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AHook_C*                                K2Node_Event_hook_1;                               // 0x0658(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_clean;                                // 0x0660(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_664[0x4];                                      // 0x0664(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player;                               // 0x0668(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHook_C*                                K2Node_Event_hook;                                 // 0x0670(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_NewParam;                             // 0x0678(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_679[0x7];                                      // 0x0679(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACord_C*                                K2Node_Event_cord_1;                               // 0x0680(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACordSocket_C*                          K2Node_Event_socket_1;                             // 0x0688(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACord_C*                                K2Node_Event_cord;                                 // 0x0690(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACordSocket_C*                          K2Node_Event_socket;                               // 0x0698(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_sentFrom;                             // 0x06A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_active;                               // 0x06A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_ignore;                               // 0x06A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6AA[0x6];                                      // 0x06AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          CallFunc_getMainPlayer_AsMain_Player;              // 0x06B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WasRecentlyRendered_ReturnValue;          // 0x06B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOverlappingActor_ReturnValue;           // 0x06B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x06BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BB[0x1];                                      // 0x06BB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x06BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_owner;                                // 0x06C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_index;                                // 0x06C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x06CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x06D0(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x06E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x06EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6ED[0x3];                                      // 0x06ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x06F0(0x0010)(ZeroConstructor, NoDestructor)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0700(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RandomUnitVector_ReturnValue;             // 0x0708(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0714(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0720(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x072C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0738(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RandomUnitVector_ReturnValue_1;           // 0x0744(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0750(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x0780(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x078C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0798(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x07A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x07A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A5[0x3];                                      // 0x07A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Event_location;                             // 0x07A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage;                               // 0x07B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      CallFunc_obj_dynPhys_obj;                          // 0x07B8(0x0010)(ReferenceParm)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x07C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C9[0x7];                                      // 0x07C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_SphereOverlapActors_OutActors;            // 0x07D0(0x0010)(ReferenceParm)
	bool                                          CallFunc_SphereOverlapActors_ReturnValue;          // 0x07E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7E1[0x7];                                      // 0x07E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item_1;                         // 0x07E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x07F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x07F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x07F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F9[0x3];                                      // 0x07F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x07FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x0800(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_3;                  // 0x0804(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0808(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0810(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_ClassDynamicCast_AsProp_Food;               // 0x0818(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x0820(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_821[0x3];                                      // 0x0821(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetDistanceTo_ReturnValue;                // 0x0824(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_ClassDynamicCast_AsProp_Camera_Bad;         // 0x0828(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_1;                // 0x0830(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0831(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_832[0x6];                                      // 0x0832(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0838(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AProp_camera_bad_C*                     CallFunc_FinishSpawningActor_ReturnValue;          // 0x0840(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_ClassDynamicCast_AsProp_Food_Shrimp;        // 0x0848(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_2;                // 0x0850(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_851[0x7];                                      // 0x0851(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsProp_Arir_Gun;           // 0x0858(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_3;                // 0x0860(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_861[0x7];                                      // 0x0861(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_1;  // 0x0868(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_1;           // 0x0870(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_1;            // 0x0878(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_1;       // 0x0880(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x0884(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_885[0x3];                                      // 0x0885(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0888(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0910(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0918(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0920(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0928(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_92C[0x4];                                      // 0x092C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue_1;             // 0x0930(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue_2;             // 0x0938(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_ClassDynamicCast_AsProp_Equipment_Night_Glasses; // 0x0940(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_4;                // 0x0948(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_949[0x7];                                      // 0x0949(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsProp_Equipment_Night_Glasses_1; // 0x0950(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_5;                // 0x0958(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_959[0x7];                                      // 0x0959(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsProp_Water_Shooter;      // 0x0960(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_6;                // 0x0968(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_969[0x7];                                      // 0x0969(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsProp_Water_Shooter_1;    // 0x0970(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_7;                // 0x0978(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Treehouse_C_ExecuteUbergraph_treehouse) == 0x000010, "Wrong alignment on Treehouse_C_ExecuteUbergraph_treehouse");
static_assert(sizeof(Treehouse_C_ExecuteUbergraph_treehouse) == 0x000980, "Wrong size on Treehouse_C_ExecuteUbergraph_treehouse");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, EntryPoint) == 0x000000, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::EntryPoint' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, Temp_int_Variable) == 0x000004, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_gamemode) == 0x000010, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_gamemode' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_settings) == 0x000018, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_settings' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_key_2) == 0x000108, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_key_2' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_pressed_1) == 0x000120, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_pressed_1' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_color) == 0x000124, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_color' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_picker) == 0x000138, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_picker' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_texture) == 0x000140, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_texture' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_index_1) == 0x000148, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_index_1' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_damage_5) == 0x00014C, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_damage_5' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_hit_5) == 0x000150, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_hit_5' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_actor_1) == 0x0001D8, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_actor_1' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_impact_1) == 0x0001E0, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_impact_1' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_water_3) == 0x0001F0, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_water_3' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_water_2) == 0x0001F8, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_water_2' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_water_1) == 0x000200, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_water_1' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_water) == 0x000208, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_water' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_activate) == 0x000210, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_activate' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_static) == 0x000211, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_static' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_frozen) == 0x000212, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_frozen' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_active_1) == 0x000213, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_active_1' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_actor) == 0x000218, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_actor' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_damage_4) == 0x000220, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_damage_4' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_hit_4) == 0x000224, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_hit_4' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_impact) == 0x0002AC, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_impact' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_skipSetting) == 0x0002B8, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_skipSetting' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_key_1) == 0x0002C0, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_key_1' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_player_12) == 0x0002D0, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_player_12' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_hit_3) == 0x0002D8, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_hit_3' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_damage_3) == 0x000360, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_damage_3' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_fuel) == 0x000364, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_fuel' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_damage_2) == 0x000368, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_damage_2' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_hot) == 0x00036C, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_hot' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_player_11) == 0x0003F8, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_player_11' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_hit_2) == 0x000400, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_hit_2' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_action) == 0x000488, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_action' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_player_10) == 0x000490, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_player_10' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_player_9) == 0x000498, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_player_9' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_damage_1) == 0x0004A0, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_damage_1' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_location_1) == 0x0004A4, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_location_1' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_player_8) == 0x0004B0, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_player_8' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_player_7) == 0x0004B8, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_player_7' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_player_6) == 0x0004C0, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_player_6' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_wheelDelta) == 0x0004C8, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_wheelDelta' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_player_5) == 0x0004D0, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_player_5' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_mouse) == 0x0004D8, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_mouse' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_player_4) == 0x0004E0, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_player_4' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_key) == 0x0004E8, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_key' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_pressed) == 0x000500, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_pressed' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_temperature_1) == 0x000504, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_temperature_1' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_temperature) == 0x000508, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_temperature' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_speed) == 0x00050C, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_speed' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_player_3) == 0x000510, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_player_3' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_hit_1) == 0x000518, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_hit_1' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_name) == 0x0005A0, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_name' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_volume) == 0x0005B0, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_volume' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_player_2) == 0x0005B8, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_player_2' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_clean_1) == 0x0005C0, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_clean_1' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_player_1) == 0x0005C8, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_player_1' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_hit) == 0x0005D0, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_hit' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_hook_1) == 0x000658, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_hook_1' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_clean) == 0x000660, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_clean' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_player) == 0x000668, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_player' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_hook) == 0x000670, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_hook' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_NewParam) == 0x000678, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_NewParam' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_cord_1) == 0x000680, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_cord_1' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_socket_1) == 0x000688, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_socket_1' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_cord) == 0x000690, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_cord' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_socket) == 0x000698, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_socket' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_sentFrom) == 0x0006A0, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_sentFrom' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_active) == 0x0006A8, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_active' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_ignore) == 0x0006A9, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_ignore' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, CallFunc_getMainPlayer_AsMain_Player) == 0x0006B0, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::CallFunc_getMainPlayer_AsMain_Player' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, CallFunc_WasRecentlyRendered_ReturnValue) == 0x0006B8, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::CallFunc_WasRecentlyRendered_ReturnValue' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, CallFunc_IsOverlappingActor_ReturnValue) == 0x0006B9, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::CallFunc_IsOverlappingActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, CallFunc_BooleanOR_ReturnValue) == 0x0006BA, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, Temp_int_Loop_Counter_Variable) == 0x0006BC, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_owner) == 0x0006C0, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_owner' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_index) == 0x0006C8, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_index' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, CallFunc_Add_IntInt_ReturnValue_1) == 0x0006CC, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, Temp_object_Variable) == 0x0006D0, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0006E0, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, CallFunc_Greater_IntInt_ReturnValue) == 0x0006EC, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_CreateDelegate_OutputDelegate) == 0x0006F0, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000700, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, CallFunc_RandomUnitVector_ReturnValue) == 0x000708, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::CallFunc_RandomUnitVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, CallFunc_GetForwardVector_ReturnValue) == 0x000714, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000720, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x00072C, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, CallFunc_Add_VectorVector_ReturnValue) == 0x000738, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, CallFunc_RandomUnitVector_ReturnValue_1) == 0x000744, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::CallFunc_RandomUnitVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, CallFunc_MakeTransform_ReturnValue) == 0x000750, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x000780, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, CallFunc_Add_VectorVector_ReturnValue_1) == 0x00078C, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, CallFunc_Array_Get_Item) == 0x000798, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, CallFunc_Array_Length_ReturnValue) == 0x0007A0, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, CallFunc_Less_IntInt_ReturnValue) == 0x0007A4, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_location) == 0x0007A8, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_location' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_Event_damage) == 0x0007B4, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_Event_damage' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, CallFunc_obj_dynPhys_obj) == 0x0007B8, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::CallFunc_obj_dynPhys_obj' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, CallFunc_Greater_IntInt_ReturnValue_1) == 0x0007C8, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, CallFunc_SphereOverlapActors_OutActors) == 0x0007D0, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::CallFunc_SphereOverlapActors_OutActors' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, CallFunc_SphereOverlapActors_ReturnValue) == 0x0007E0, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::CallFunc_SphereOverlapActors_ReturnValue' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, CallFunc_Array_Get_Item_1) == 0x0007E8, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, CallFunc_Array_Length_ReturnValue_1) == 0x0007F0, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, CallFunc_Array_Add_ReturnValue) == 0x0007F4, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, CallFunc_Less_IntInt_ReturnValue_1) == 0x0007F8, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, CallFunc_Array_Add_ReturnValue_1) == 0x0007FC, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, CallFunc_Array_Add_ReturnValue_2) == 0x000800, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, CallFunc_Array_Add_ReturnValue_3) == 0x000804, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::CallFunc_Array_Add_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, CallFunc_GetObjectClass_ReturnValue) == 0x000808, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, CallFunc_GetPlayerPawn_ReturnValue) == 0x000810, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_ClassDynamicCast_AsProp_Food) == 0x000818, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_ClassDynamicCast_AsProp_Food' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_ClassDynamicCast_bSuccess) == 0x000820, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, CallFunc_GetDistanceTo_ReturnValue) == 0x000824, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::CallFunc_GetDistanceTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_ClassDynamicCast_AsProp_Camera_Bad) == 0x000828, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_ClassDynamicCast_AsProp_Camera_Bad' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_ClassDynamicCast_bSuccess_1) == 0x000830, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_ClassDynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000831, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000838, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, CallFunc_FinishSpawningActor_ReturnValue) == 0x000840, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_ClassDynamicCast_AsProp_Food_Shrimp) == 0x000848, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_ClassDynamicCast_AsProp_Food_Shrimp' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_ClassDynamicCast_bSuccess_2) == 0x000850, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_ClassDynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_ClassDynamicCast_AsProp_Arir_Gun) == 0x000858, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_ClassDynamicCast_AsProp_Arir_Gun' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_ClassDynamicCast_bSuccess_3) == 0x000860, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_ClassDynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_ComponentBoundEvent_OverlappedComponent_1) == 0x000868, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_ComponentBoundEvent_OverlappedComponent_1' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_ComponentBoundEvent_OtherActor_1) == 0x000870, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_ComponentBoundEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_ComponentBoundEvent_OtherComp_1) == 0x000878, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_ComponentBoundEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_ComponentBoundEvent_OtherBodyIndex_1) == 0x000880, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_ComponentBoundEvent_OtherBodyIndex_1' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_ComponentBoundEvent_bFromSweep) == 0x000884, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_ComponentBoundEvent_SweepResult) == 0x000888, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000910, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_ComponentBoundEvent_OtherActor) == 0x000918, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_ComponentBoundEvent_OtherComp) == 0x000920, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000928, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, CallFunc_GetObjectClass_ReturnValue_1) == 0x000930, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::CallFunc_GetObjectClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, CallFunc_GetObjectClass_ReturnValue_2) == 0x000938, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::CallFunc_GetObjectClass_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_ClassDynamicCast_AsProp_Equipment_Night_Glasses) == 0x000940, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_ClassDynamicCast_AsProp_Equipment_Night_Glasses' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_ClassDynamicCast_bSuccess_4) == 0x000948, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_ClassDynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_ClassDynamicCast_AsProp_Equipment_Night_Glasses_1) == 0x000950, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_ClassDynamicCast_AsProp_Equipment_Night_Glasses_1' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_ClassDynamicCast_bSuccess_5) == 0x000958, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_ClassDynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_ClassDynamicCast_AsProp_Water_Shooter) == 0x000960, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_ClassDynamicCast_AsProp_Water_Shooter' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_ClassDynamicCast_bSuccess_6) == 0x000968, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_ClassDynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_ClassDynamicCast_AsProp_Water_Shooter_1) == 0x000970, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_ClassDynamicCast_AsProp_Water_Shooter_1' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ExecuteUbergraph_treehouse, K2Node_ClassDynamicCast_bSuccess_7) == 0x000978, "Member 'Treehouse_C_ExecuteUbergraph_treehouse::K2Node_ClassDynamicCast_bSuccess_7' has a wrong offset!");

// Function treehouse.treehouse_C.BndEvt__treehouse_antiStealer_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct Treehouse_C_BndEvt__treehouse_antiStealer_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Treehouse_C_BndEvt__treehouse_antiStealer_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on Treehouse_C_BndEvt__treehouse_antiStealer_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(Treehouse_C_BndEvt__treehouse_antiStealer_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on Treehouse_C_BndEvt__treehouse_antiStealer_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(Treehouse_C_BndEvt__treehouse_antiStealer_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'Treehouse_C_BndEvt__treehouse_antiStealer_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Treehouse_C_BndEvt__treehouse_antiStealer_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'Treehouse_C_BndEvt__treehouse_antiStealer_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(Treehouse_C_BndEvt__treehouse_antiStealer_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'Treehouse_C_BndEvt__treehouse_antiStealer_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(Treehouse_C_BndEvt__treehouse_antiStealer_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'Treehouse_C_BndEvt__treehouse_antiStealer_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function treehouse.treehouse_C.BndEvt__treehouse_antiStealer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct Treehouse_C_BndEvt__treehouse_antiStealer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Treehouse_C_BndEvt__treehouse_antiStealer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on Treehouse_C_BndEvt__treehouse_antiStealer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(Treehouse_C_BndEvt__treehouse_antiStealer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on Treehouse_C_BndEvt__treehouse_antiStealer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(Treehouse_C_BndEvt__treehouse_antiStealer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'Treehouse_C_BndEvt__treehouse_antiStealer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Treehouse_C_BndEvt__treehouse_antiStealer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'Treehouse_C_BndEvt__treehouse_antiStealer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(Treehouse_C_BndEvt__treehouse_antiStealer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'Treehouse_C_BndEvt__treehouse_antiStealer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(Treehouse_C_BndEvt__treehouse_antiStealer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'Treehouse_C_BndEvt__treehouse_antiStealer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Treehouse_C_BndEvt__treehouse_antiStealer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'Treehouse_C_BndEvt__treehouse_antiStealer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(Treehouse_C_BndEvt__treehouse_antiStealer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'Treehouse_C_BndEvt__treehouse_antiStealer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function treehouse.treehouse_C.reachedByExplosion
// 0x0010 (0x0010 - 0x0000)
struct Treehouse_C_ReachedByExplosion final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Treehouse_C_ReachedByExplosion) == 0x000004, "Wrong alignment on Treehouse_C_ReachedByExplosion");
static_assert(sizeof(Treehouse_C_ReachedByExplosion) == 0x000010, "Wrong size on Treehouse_C_ReachedByExplosion");
static_assert(offsetof(Treehouse_C_ReachedByExplosion, Location) == 0x000000, "Member 'Treehouse_C_ReachedByExplosion::Location' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ReachedByExplosion, Damage) == 0x00000C, "Member 'Treehouse_C_ReachedByExplosion::Damage' has a wrong offset!");

// Function treehouse.treehouse_C.runTrigger
// 0x0010 (0x0010 - 0x0000)
struct Treehouse_C_RunTrigger final
{
public:
	class AActor*                                 Param_Owner;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Treehouse_C_RunTrigger) == 0x000008, "Wrong alignment on Treehouse_C_RunTrigger");
static_assert(sizeof(Treehouse_C_RunTrigger) == 0x000010, "Wrong size on Treehouse_C_RunTrigger");
static_assert(offsetof(Treehouse_C_RunTrigger, Param_Owner) == 0x000000, "Member 'Treehouse_C_RunTrigger::Param_Owner' has a wrong offset!");
static_assert(offsetof(Treehouse_C_RunTrigger, Param_Index) == 0x000008, "Member 'Treehouse_C_RunTrigger::Param_Index' has a wrong offset!");

// Function treehouse.treehouse_C.setIgnoreSave
// 0x0001 (0x0001 - 0x0000)
struct Treehouse_C_SetIgnoreSave final
{
public:
	bool                                          Ignore;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Treehouse_C_SetIgnoreSave) == 0x000001, "Wrong alignment on Treehouse_C_SetIgnoreSave");
static_assert(sizeof(Treehouse_C_SetIgnoreSave) == 0x000001, "Wrong size on Treehouse_C_SetIgnoreSave");
static_assert(offsetof(Treehouse_C_SetIgnoreSave, Ignore) == 0x000000, "Member 'Treehouse_C_SetIgnoreSave::Ignore' has a wrong offset!");

// Function treehouse.treehouse_C.setActiveTrigger
// 0x0010 (0x0010 - 0x0000)
struct Treehouse_C_SetActiveTrigger final
{
public:
	class AActor*                                 SentFrom;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Active;                                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Treehouse_C_SetActiveTrigger) == 0x000008, "Wrong alignment on Treehouse_C_SetActiveTrigger");
static_assert(sizeof(Treehouse_C_SetActiveTrigger) == 0x000010, "Wrong size on Treehouse_C_SetActiveTrigger");
static_assert(offsetof(Treehouse_C_SetActiveTrigger, SentFrom) == 0x000000, "Member 'Treehouse_C_SetActiveTrigger::SentFrom' has a wrong offset!");
static_assert(offsetof(Treehouse_C_SetActiveTrigger, Active) == 0x000008, "Member 'Treehouse_C_SetActiveTrigger::Active' has a wrong offset!");

// Function treehouse.treehouse_C.cordUnplugged
// 0x0010 (0x0010 - 0x0000)
struct Treehouse_C_CordUnplugged final
{
public:
	class ACord_C*                                Cord;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACordSocket_C*                          Socket;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Treehouse_C_CordUnplugged) == 0x000008, "Wrong alignment on Treehouse_C_CordUnplugged");
static_assert(sizeof(Treehouse_C_CordUnplugged) == 0x000010, "Wrong size on Treehouse_C_CordUnplugged");
static_assert(offsetof(Treehouse_C_CordUnplugged, Cord) == 0x000000, "Member 'Treehouse_C_CordUnplugged::Cord' has a wrong offset!");
static_assert(offsetof(Treehouse_C_CordUnplugged, Socket) == 0x000008, "Member 'Treehouse_C_CordUnplugged::Socket' has a wrong offset!");

// Function treehouse.treehouse_C.cordPlugged
// 0x0010 (0x0010 - 0x0000)
struct Treehouse_C_CordPlugged final
{
public:
	class ACord_C*                                Cord;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACordSocket_C*                          Socket;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Treehouse_C_CordPlugged) == 0x000008, "Wrong alignment on Treehouse_C_CordPlugged");
static_assert(sizeof(Treehouse_C_CordPlugged) == 0x000010, "Wrong size on Treehouse_C_CordPlugged");
static_assert(offsetof(Treehouse_C_CordPlugged, Cord) == 0x000000, "Member 'Treehouse_C_CordPlugged::Cord' has a wrong offset!");
static_assert(offsetof(Treehouse_C_CordPlugged, Socket) == 0x000008, "Member 'Treehouse_C_CordPlugged::Socket' has a wrong offset!");

// Function treehouse.treehouse_C.set_ignoreSave_trigger
// 0x0001 (0x0001 - 0x0000)
struct Treehouse_C_Set_ignoreSave_trigger final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Treehouse_C_Set_ignoreSave_trigger) == 0x000001, "Wrong alignment on Treehouse_C_Set_ignoreSave_trigger");
static_assert(sizeof(Treehouse_C_Set_ignoreSave_trigger) == 0x000001, "Wrong size on Treehouse_C_Set_ignoreSave_trigger");
static_assert(offsetof(Treehouse_C_Set_ignoreSave_trigger, NewParam) == 0x000000, "Member 'Treehouse_C_Set_ignoreSave_trigger::NewParam' has a wrong offset!");

// Function treehouse.treehouse_C.hookTension
// 0x0008 (0x0008 - 0x0000)
struct Treehouse_C_HookTension final
{
public:
	class AHook_C*                                Hook;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Treehouse_C_HookTension) == 0x000008, "Wrong alignment on Treehouse_C_HookTension");
static_assert(sizeof(Treehouse_C_HookTension) == 0x000008, "Wrong size on Treehouse_C_HookTension");
static_assert(offsetof(Treehouse_C_HookTension, Hook) == 0x000000, "Member 'Treehouse_C_HookTension::Hook' has a wrong offset!");

// Function treehouse.treehouse_C.cleanSponge
// 0x0010 (0x0010 - 0x0000)
struct Treehouse_C_CleanSponge final
{
public:
	float                                         Clean;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          Player;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Treehouse_C_CleanSponge) == 0x000008, "Wrong alignment on Treehouse_C_CleanSponge");
static_assert(sizeof(Treehouse_C_CleanSponge) == 0x000010, "Wrong size on Treehouse_C_CleanSponge");
static_assert(offsetof(Treehouse_C_CleanSponge, Clean) == 0x000000, "Member 'Treehouse_C_CleanSponge::Clean' has a wrong offset!");
static_assert(offsetof(Treehouse_C_CleanSponge, Player) == 0x000008, "Member 'Treehouse_C_CleanSponge::Player' has a wrong offset!");

// Function treehouse.treehouse_C.hooked
// 0x0008 (0x0008 - 0x0000)
struct Treehouse_C_Hooked final
{
public:
	class AHook_C*                                Hook;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Treehouse_C_Hooked) == 0x000008, "Wrong alignment on Treehouse_C_Hooked");
static_assert(sizeof(Treehouse_C_Hooked) == 0x000008, "Wrong size on Treehouse_C_Hooked");
static_assert(offsetof(Treehouse_C_Hooked, Hook) == 0x000000, "Member 'Treehouse_C_Hooked::Hook' has a wrong offset!");

// Function treehouse.treehouse_C.playerUsedOn
// 0x0090 (0x0090 - 0x0000)
struct Treehouse_C_PlayerUsedOn final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Treehouse_C_PlayerUsedOn) == 0x000008, "Wrong alignment on Treehouse_C_PlayerUsedOn");
static_assert(sizeof(Treehouse_C_PlayerUsedOn) == 0x000090, "Wrong size on Treehouse_C_PlayerUsedOn");
static_assert(offsetof(Treehouse_C_PlayerUsedOn, Player) == 0x000000, "Member 'Treehouse_C_PlayerUsedOn::Player' has a wrong offset!");
static_assert(offsetof(Treehouse_C_PlayerUsedOn, Hit) == 0x000008, "Member 'Treehouse_C_PlayerUsedOn::Hit' has a wrong offset!");

// Function treehouse.treehouse_C.slice
// 0x0001 (0x0001 - 0x0000)
struct Treehouse_C_Slice final
{
public:
	bool                                          Clean;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Treehouse_C_Slice) == 0x000001, "Wrong alignment on Treehouse_C_Slice");
static_assert(sizeof(Treehouse_C_Slice) == 0x000001, "Wrong size on Treehouse_C_Slice");
static_assert(offsetof(Treehouse_C_Slice, Clean) == 0x000000, "Member 'Treehouse_C_Slice::Clean' has a wrong offset!");

// Function treehouse.treehouse_C.playerLookAway
// 0x0008 (0x0008 - 0x0000)
struct Treehouse_C_PlayerLookAway final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Treehouse_C_PlayerLookAway) == 0x000008, "Wrong alignment on Treehouse_C_PlayerLookAway");
static_assert(sizeof(Treehouse_C_PlayerLookAway) == 0x000008, "Wrong size on Treehouse_C_PlayerLookAway");
static_assert(offsetof(Treehouse_C_PlayerLookAway, Player) == 0x000000, "Member 'Treehouse_C_PlayerLookAway::Player' has a wrong offset!");

// Function treehouse.treehouse_C.stepped
// 0x0004 (0x0004 - 0x0000)
struct Treehouse_C_Stepped final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Treehouse_C_Stepped) == 0x000004, "Wrong alignment on Treehouse_C_Stepped");
static_assert(sizeof(Treehouse_C_Stepped) == 0x000004, "Wrong size on Treehouse_C_Stepped");
static_assert(offsetof(Treehouse_C_Stepped, Volume) == 0x000000, "Member 'Treehouse_C_Stepped::Volume' has a wrong offset!");

// Function treehouse.treehouse_C.ActionName
// 0x00A0 (0x00A0 - 0x0000)
struct Treehouse_C_ActionName final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class FString                                 Param_Name;                                        // 0x0090(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Treehouse_C_ActionName) == 0x000008, "Wrong alignment on Treehouse_C_ActionName");
static_assert(sizeof(Treehouse_C_ActionName) == 0x0000A0, "Wrong size on Treehouse_C_ActionName");
static_assert(offsetof(Treehouse_C_ActionName, Player) == 0x000000, "Member 'Treehouse_C_ActionName::Player' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ActionName, Hit) == 0x000008, "Member 'Treehouse_C_ActionName::Hit' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ActionName, Param_Name) == 0x000090, "Member 'Treehouse_C_ActionName::Param_Name' has a wrong offset!");

// Function treehouse.treehouse_C.accumulateTemperature
// 0x0008 (0x0008 - 0x0000)
struct Treehouse_C_AccumulateTemperature final
{
public:
	float                                         Temperature;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Treehouse_C_AccumulateTemperature) == 0x000004, "Wrong alignment on Treehouse_C_AccumulateTemperature");
static_assert(sizeof(Treehouse_C_AccumulateTemperature) == 0x000008, "Wrong size on Treehouse_C_AccumulateTemperature");
static_assert(offsetof(Treehouse_C_AccumulateTemperature, Temperature) == 0x000000, "Member 'Treehouse_C_AccumulateTemperature::Temperature' has a wrong offset!");
static_assert(offsetof(Treehouse_C_AccumulateTemperature, Speed) == 0x000004, "Member 'Treehouse_C_AccumulateTemperature::Speed' has a wrong offset!");

// Function treehouse.treehouse_C.addTemperature
// 0x0004 (0x0004 - 0x0000)
struct Treehouse_C_AddTemperature final
{
public:
	float                                         Temperature;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Treehouse_C_AddTemperature) == 0x000004, "Wrong alignment on Treehouse_C_AddTemperature");
static_assert(sizeof(Treehouse_C_AddTemperature) == 0x000004, "Wrong size on Treehouse_C_AddTemperature");
static_assert(offsetof(Treehouse_C_AddTemperature, Temperature) == 0x000000, "Member 'Treehouse_C_AddTemperature::Temperature' has a wrong offset!");

// Function treehouse.treehouse_C.playerHandAnyKey
// 0x0028 (0x0028 - 0x0000)
struct Treehouse_C_PlayerHandAnyKey final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   Param_Key;                                         // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Pressed;                                           // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Treehouse_C_PlayerHandAnyKey) == 0x000008, "Wrong alignment on Treehouse_C_PlayerHandAnyKey");
static_assert(sizeof(Treehouse_C_PlayerHandAnyKey) == 0x000028, "Wrong size on Treehouse_C_PlayerHandAnyKey");
static_assert(offsetof(Treehouse_C_PlayerHandAnyKey, Player) == 0x000000, "Member 'Treehouse_C_PlayerHandAnyKey::Player' has a wrong offset!");
static_assert(offsetof(Treehouse_C_PlayerHandAnyKey, Param_Key) == 0x000008, "Member 'Treehouse_C_PlayerHandAnyKey::Param_Key' has a wrong offset!");
static_assert(offsetof(Treehouse_C_PlayerHandAnyKey, Pressed) == 0x000020, "Member 'Treehouse_C_PlayerHandAnyKey::Pressed' has a wrong offset!");

// Function treehouse.treehouse_C.playerHandMouse
// 0x0010 (0x0010 - 0x0000)
struct Treehouse_C_PlayerHandMouse final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Mouse;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Treehouse_C_PlayerHandMouse) == 0x000008, "Wrong alignment on Treehouse_C_PlayerHandMouse");
static_assert(sizeof(Treehouse_C_PlayerHandMouse) == 0x000010, "Wrong size on Treehouse_C_PlayerHandMouse");
static_assert(offsetof(Treehouse_C_PlayerHandMouse, Player) == 0x000000, "Member 'Treehouse_C_PlayerHandMouse::Player' has a wrong offset!");
static_assert(offsetof(Treehouse_C_PlayerHandMouse, Mouse) == 0x000008, "Member 'Treehouse_C_PlayerHandMouse::Mouse' has a wrong offset!");

// Function treehouse.treehouse_C.playerHandMouseWheel
// 0x0010 (0x0010 - 0x0000)
struct Treehouse_C_PlayerHandMouseWheel final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WheelDelta;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Treehouse_C_PlayerHandMouseWheel) == 0x000008, "Wrong alignment on Treehouse_C_PlayerHandMouseWheel");
static_assert(sizeof(Treehouse_C_PlayerHandMouseWheel) == 0x000010, "Wrong size on Treehouse_C_PlayerHandMouseWheel");
static_assert(offsetof(Treehouse_C_PlayerHandMouseWheel, Player) == 0x000000, "Member 'Treehouse_C_PlayerHandMouseWheel::Player' has a wrong offset!");
static_assert(offsetof(Treehouse_C_PlayerHandMouseWheel, WheelDelta) == 0x000008, "Member 'Treehouse_C_PlayerHandMouseWheel::WheelDelta' has a wrong offset!");

// Function treehouse.treehouse_C.playerHandRelease_LMB
// 0x0008 (0x0008 - 0x0000)
struct Treehouse_C_PlayerHandRelease_LMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Treehouse_C_PlayerHandRelease_LMB) == 0x000008, "Wrong alignment on Treehouse_C_PlayerHandRelease_LMB");
static_assert(sizeof(Treehouse_C_PlayerHandRelease_LMB) == 0x000008, "Wrong size on Treehouse_C_PlayerHandRelease_LMB");
static_assert(offsetof(Treehouse_C_PlayerHandRelease_LMB, Player) == 0x000000, "Member 'Treehouse_C_PlayerHandRelease_LMB::Player' has a wrong offset!");

// Function treehouse.treehouse_C.playerHandRelease_RMB
// 0x0008 (0x0008 - 0x0000)
struct Treehouse_C_PlayerHandRelease_RMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Treehouse_C_PlayerHandRelease_RMB) == 0x000008, "Wrong alignment on Treehouse_C_PlayerHandRelease_RMB");
static_assert(sizeof(Treehouse_C_PlayerHandRelease_RMB) == 0x000008, "Wrong size on Treehouse_C_PlayerHandRelease_RMB");
static_assert(offsetof(Treehouse_C_PlayerHandRelease_RMB, Player) == 0x000000, "Member 'Treehouse_C_PlayerHandRelease_RMB::Player' has a wrong offset!");

// Function treehouse.treehouse_C.exploded
// 0x0010 (0x0010 - 0x0000)
struct Treehouse_C_Exploded final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Treehouse_C_Exploded) == 0x000004, "Wrong alignment on Treehouse_C_Exploded");
static_assert(sizeof(Treehouse_C_Exploded) == 0x000010, "Wrong size on Treehouse_C_Exploded");
static_assert(offsetof(Treehouse_C_Exploded, Damage) == 0x000000, "Member 'Treehouse_C_Exploded::Damage' has a wrong offset!");
static_assert(offsetof(Treehouse_C_Exploded, Location) == 0x000004, "Member 'Treehouse_C_Exploded::Location' has a wrong offset!");

// Function treehouse.treehouse_C.playerHandUse_LMB
// 0x0008 (0x0008 - 0x0000)
struct Treehouse_C_PlayerHandUse_LMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Treehouse_C_PlayerHandUse_LMB) == 0x000008, "Wrong alignment on Treehouse_C_PlayerHandUse_LMB");
static_assert(sizeof(Treehouse_C_PlayerHandUse_LMB) == 0x000008, "Wrong size on Treehouse_C_PlayerHandUse_LMB");
static_assert(offsetof(Treehouse_C_PlayerHandUse_LMB, Player) == 0x000000, "Member 'Treehouse_C_PlayerHandUse_LMB::Player' has a wrong offset!");

// Function treehouse.treehouse_C.playerHandUse_RMB
// 0x0008 (0x0008 - 0x0000)
struct Treehouse_C_PlayerHandUse_RMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Treehouse_C_PlayerHandUse_RMB) == 0x000008, "Wrong alignment on Treehouse_C_PlayerHandUse_RMB");
static_assert(sizeof(Treehouse_C_PlayerHandUse_RMB) == 0x000008, "Wrong size on Treehouse_C_PlayerHandUse_RMB");
static_assert(offsetof(Treehouse_C_PlayerHandUse_RMB, Player) == 0x000000, "Member 'Treehouse_C_PlayerHandUse_RMB::Player' has a wrong offset!");

// Function treehouse.treehouse_C.actionOptionIndex
// 0x0098 (0x0098 - 0x0000)
struct Treehouse_C_ActionOptionIndex final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	Enum_interactionActions                       Action;                                            // 0x0090(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Treehouse_C_ActionOptionIndex) == 0x000008, "Wrong alignment on Treehouse_C_ActionOptionIndex");
static_assert(sizeof(Treehouse_C_ActionOptionIndex) == 0x000098, "Wrong size on Treehouse_C_ActionOptionIndex");
static_assert(offsetof(Treehouse_C_ActionOptionIndex, Player) == 0x000000, "Member 'Treehouse_C_ActionOptionIndex::Player' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ActionOptionIndex, Hit) == 0x000008, "Member 'Treehouse_C_ActionOptionIndex::Hit' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ActionOptionIndex, Action) == 0x000090, "Member 'Treehouse_C_ActionOptionIndex::Action' has a wrong offset!");

// Function treehouse.treehouse_C.receivedPhyiscsDamage
// 0x008C (0x008C - 0x0000)
struct Treehouse_C_ReceivedPhyiscsDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hot;                                               // 0x0004(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Treehouse_C_ReceivedPhyiscsDamage) == 0x000004, "Wrong alignment on Treehouse_C_ReceivedPhyiscsDamage");
static_assert(sizeof(Treehouse_C_ReceivedPhyiscsDamage) == 0x00008C, "Wrong size on Treehouse_C_ReceivedPhyiscsDamage");
static_assert(offsetof(Treehouse_C_ReceivedPhyiscsDamage, Damage) == 0x000000, "Member 'Treehouse_C_ReceivedPhyiscsDamage::Damage' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ReceivedPhyiscsDamage, Hot) == 0x000004, "Member 'Treehouse_C_ReceivedPhyiscsDamage::Hot' has a wrong offset!");

// Function treehouse.treehouse_C.ignite
// 0x0004 (0x0004 - 0x0000)
struct Treehouse_C_Ignite final
{
public:
	float                                         Fuel;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Treehouse_C_Ignite) == 0x000004, "Wrong alignment on Treehouse_C_Ignite");
static_assert(sizeof(Treehouse_C_Ignite) == 0x000004, "Wrong size on Treehouse_C_Ignite");
static_assert(offsetof(Treehouse_C_Ignite, Fuel) == 0x000000, "Member 'Treehouse_C_Ignite::Fuel' has a wrong offset!");

// Function treehouse.treehouse_C.fireDamage
// 0x0004 (0x0004 - 0x0000)
struct Treehouse_C_FireDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Treehouse_C_FireDamage) == 0x000004, "Wrong alignment on Treehouse_C_FireDamage");
static_assert(sizeof(Treehouse_C_FireDamage) == 0x000004, "Wrong size on Treehouse_C_FireDamage");
static_assert(offsetof(Treehouse_C_FireDamage, Damage) == 0x000000, "Member 'Treehouse_C_FireDamage::Damage' has a wrong offset!");

// Function treehouse.treehouse_C.steppedOn
// 0x0090 (0x0090 - 0x0000)
struct Treehouse_C_SteppedOn final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Treehouse_C_SteppedOn) == 0x000008, "Wrong alignment on Treehouse_C_SteppedOn");
static_assert(sizeof(Treehouse_C_SteppedOn) == 0x000090, "Wrong size on Treehouse_C_SteppedOn");
static_assert(offsetof(Treehouse_C_SteppedOn, Player) == 0x000000, "Member 'Treehouse_C_SteppedOn::Player' has a wrong offset!");
static_assert(offsetof(Treehouse_C_SteppedOn, Hit) == 0x000008, "Member 'Treehouse_C_SteppedOn::Hit' has a wrong offset!");

// Function treehouse.treehouse_C.setKey
// 0x0010 (0x0010 - 0x0000)
struct Treehouse_C_SetKey final
{
public:
	class FString                                 Param_Key;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Treehouse_C_SetKey) == 0x000008, "Wrong alignment on Treehouse_C_SetKey");
static_assert(sizeof(Treehouse_C_SetKey) == 0x000010, "Wrong size on Treehouse_C_SetKey");
static_assert(offsetof(Treehouse_C_SetKey, Param_Key) == 0x000000, "Member 'Treehouse_C_SetKey::Param_Key' has a wrong offset!");

// Function treehouse.treehouse_C.addDamage
// 0x00A8 (0x00A8 - 0x0000)
struct Treehouse_C_AddDamage final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x000C(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                Impact;                                            // 0x0094(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipSetting;                                       // 0x00A0(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Treehouse_C_AddDamage) == 0x000008, "Wrong alignment on Treehouse_C_AddDamage");
static_assert(sizeof(Treehouse_C_AddDamage) == 0x0000A8, "Wrong size on Treehouse_C_AddDamage");
static_assert(offsetof(Treehouse_C_AddDamage, Actor) == 0x000000, "Member 'Treehouse_C_AddDamage::Actor' has a wrong offset!");
static_assert(offsetof(Treehouse_C_AddDamage, Damage) == 0x000008, "Member 'Treehouse_C_AddDamage::Damage' has a wrong offset!");
static_assert(offsetof(Treehouse_C_AddDamage, Hit) == 0x00000C, "Member 'Treehouse_C_AddDamage::Hit' has a wrong offset!");
static_assert(offsetof(Treehouse_C_AddDamage, Impact) == 0x000094, "Member 'Treehouse_C_AddDamage::Impact' has a wrong offset!");
static_assert(offsetof(Treehouse_C_AddDamage, SkipSetting) == 0x0000A0, "Member 'Treehouse_C_AddDamage::SkipSetting' has a wrong offset!");

// Function treehouse.treehouse_C.setPropProps
// 0x0003 (0x0003 - 0x0000)
struct Treehouse_C_SetPropProps final
{
public:
	bool                                          Static;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Frozen;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Active;                                            // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Treehouse_C_SetPropProps) == 0x000001, "Wrong alignment on Treehouse_C_SetPropProps");
static_assert(sizeof(Treehouse_C_SetPropProps) == 0x000003, "Wrong size on Treehouse_C_SetPropProps");
static_assert(offsetof(Treehouse_C_SetPropProps, Static) == 0x000000, "Member 'Treehouse_C_SetPropProps::Static' has a wrong offset!");
static_assert(offsetof(Treehouse_C_SetPropProps, Frozen) == 0x000001, "Member 'Treehouse_C_SetPropProps::Frozen' has a wrong offset!");
static_assert(offsetof(Treehouse_C_SetPropProps, Active) == 0x000002, "Member 'Treehouse_C_SetPropProps::Active' has a wrong offset!");

// Function treehouse.treehouse_C.virus
// 0x0001 (0x0001 - 0x0000)
struct Treehouse_C_Virus final
{
public:
	bool                                          Activate;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Treehouse_C_Virus) == 0x000001, "Wrong alignment on Treehouse_C_Virus");
static_assert(sizeof(Treehouse_C_Virus) == 0x000001, "Wrong size on Treehouse_C_Virus");
static_assert(offsetof(Treehouse_C_Virus, Activate) == 0x000000, "Member 'Treehouse_C_Virus::Activate' has a wrong offset!");

// Function treehouse.treehouse_C.leaveWaterOrigin
// 0x0008 (0x0008 - 0x0000)
struct Treehouse_C_LeaveWaterOrigin final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Treehouse_C_LeaveWaterOrigin) == 0x000008, "Wrong alignment on Treehouse_C_LeaveWaterOrigin");
static_assert(sizeof(Treehouse_C_LeaveWaterOrigin) == 0x000008, "Wrong size on Treehouse_C_LeaveWaterOrigin");
static_assert(offsetof(Treehouse_C_LeaveWaterOrigin, Water) == 0x000000, "Member 'Treehouse_C_LeaveWaterOrigin::Water' has a wrong offset!");

// Function treehouse.treehouse_C.enterWaterOrigin
// 0x0008 (0x0008 - 0x0000)
struct Treehouse_C_EnterWaterOrigin final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Treehouse_C_EnterWaterOrigin) == 0x000008, "Wrong alignment on Treehouse_C_EnterWaterOrigin");
static_assert(sizeof(Treehouse_C_EnterWaterOrigin) == 0x000008, "Wrong size on Treehouse_C_EnterWaterOrigin");
static_assert(offsetof(Treehouse_C_EnterWaterOrigin, Water) == 0x000000, "Member 'Treehouse_C_EnterWaterOrigin::Water' has a wrong offset!");

// Function treehouse.treehouse_C.leaveWater
// 0x0008 (0x0008 - 0x0000)
struct Treehouse_C_LeaveWater final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Treehouse_C_LeaveWater) == 0x000008, "Wrong alignment on Treehouse_C_LeaveWater");
static_assert(sizeof(Treehouse_C_LeaveWater) == 0x000008, "Wrong size on Treehouse_C_LeaveWater");
static_assert(offsetof(Treehouse_C_LeaveWater, Water) == 0x000000, "Member 'Treehouse_C_LeaveWater::Water' has a wrong offset!");

// Function treehouse.treehouse_C.enterWater
// 0x0008 (0x0008 - 0x0000)
struct Treehouse_C_EnterWater final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Treehouse_C_EnterWater) == 0x000008, "Wrong alignment on Treehouse_C_EnterWater");
static_assert(sizeof(Treehouse_C_EnterWater) == 0x000008, "Wrong size on Treehouse_C_EnterWater");
static_assert(offsetof(Treehouse_C_EnterWater, Water) == 0x000000, "Member 'Treehouse_C_EnterWater::Water' has a wrong offset!");

// Function treehouse.treehouse_C.ImpactDamage
// 0x00A8 (0x00A8 - 0x0000)
struct Treehouse_C_ImpactDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0004(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0090(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Impact;                                            // 0x0098(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Treehouse_C_ImpactDamage) == 0x000008, "Wrong alignment on Treehouse_C_ImpactDamage");
static_assert(sizeof(Treehouse_C_ImpactDamage) == 0x0000A8, "Wrong size on Treehouse_C_ImpactDamage");
static_assert(offsetof(Treehouse_C_ImpactDamage, Damage) == 0x000000, "Member 'Treehouse_C_ImpactDamage::Damage' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ImpactDamage, Hit) == 0x000004, "Member 'Treehouse_C_ImpactDamage::Hit' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ImpactDamage, Actor) == 0x000090, "Member 'Treehouse_C_ImpactDamage::Actor' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ImpactDamage, Impact) == 0x000098, "Member 'Treehouse_C_ImpactDamage::Impact' has a wrong offset!");

// Function treehouse.treehouse_C.texturePickerApply
// 0x0018 (0x0018 - 0x0000)
struct Treehouse_C_TexturePickerApply final
{
public:
	class UUmg_texturePicker_C*                   Picker;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Texture;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Treehouse_C_TexturePickerApply) == 0x000008, "Wrong alignment on Treehouse_C_TexturePickerApply");
static_assert(sizeof(Treehouse_C_TexturePickerApply) == 0x000018, "Wrong size on Treehouse_C_TexturePickerApply");
static_assert(offsetof(Treehouse_C_TexturePickerApply, Picker) == 0x000000, "Member 'Treehouse_C_TexturePickerApply::Picker' has a wrong offset!");
static_assert(offsetof(Treehouse_C_TexturePickerApply, Texture) == 0x000008, "Member 'Treehouse_C_TexturePickerApply::Texture' has a wrong offset!");
static_assert(offsetof(Treehouse_C_TexturePickerApply, Param_Index) == 0x000010, "Member 'Treehouse_C_TexturePickerApply::Param_Index' has a wrong offset!");

// Function treehouse.treehouse_C.applyColor
// 0x0010 (0x0010 - 0x0000)
struct Treehouse_C_ApplyColor final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Treehouse_C_ApplyColor) == 0x000004, "Wrong alignment on Treehouse_C_ApplyColor");
static_assert(sizeof(Treehouse_C_ApplyColor) == 0x000010, "Wrong size on Treehouse_C_ApplyColor");
static_assert(offsetof(Treehouse_C_ApplyColor, Color) == 0x000000, "Member 'Treehouse_C_ApplyColor::Color' has a wrong offset!");

// Function treehouse.treehouse_C.AnyKey
// 0x0020 (0x0020 - 0x0000)
struct Treehouse_C_AnyKey final
{
public:
	struct FKey                                   Param_Key;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Pressed;                                           // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Treehouse_C_AnyKey) == 0x000008, "Wrong alignment on Treehouse_C_AnyKey");
static_assert(sizeof(Treehouse_C_AnyKey) == 0x000020, "Wrong size on Treehouse_C_AnyKey");
static_assert(offsetof(Treehouse_C_AnyKey, Param_Key) == 0x000000, "Member 'Treehouse_C_AnyKey::Param_Key' has a wrong offset!");
static_assert(offsetof(Treehouse_C_AnyKey, Pressed) == 0x000018, "Member 'Treehouse_C_AnyKey::Pressed' has a wrong offset!");

// Function treehouse.treehouse_C.settingsApplied
// 0x00F0 (0x00F0 - 0x0000)
struct Treehouse_C_SettingsApplied final
{
public:
	struct FStruct_settings                       Settings;                                          // 0x0000(0x00F0)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(Treehouse_C_SettingsApplied) == 0x000008, "Wrong alignment on Treehouse_C_SettingsApplied");
static_assert(sizeof(Treehouse_C_SettingsApplied) == 0x0000F0, "Wrong size on Treehouse_C_SettingsApplied");
static_assert(offsetof(Treehouse_C_SettingsApplied, Settings) == 0x000000, "Member 'Treehouse_C_SettingsApplied::Settings' has a wrong offset!");

// Function treehouse.treehouse_C.stuffUpgraded
// 0x0008 (0x0008 - 0x0000)
struct Treehouse_C_StuffUpgraded final
{
public:
	class AMainGamemode_C*                        GameMode;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Treehouse_C_StuffUpgraded) == 0x000008, "Wrong alignment on Treehouse_C_StuffUpgraded");
static_assert(sizeof(Treehouse_C_StuffUpgraded) == 0x000008, "Wrong size on Treehouse_C_StuffUpgraded");
static_assert(offsetof(Treehouse_C_StuffUpgraded, GameMode) == 0x000000, "Member 'Treehouse_C_StuffUpgraded::GameMode' has a wrong offset!");

// Function treehouse.treehouse_C.setStage
// 0x00C8 (0x00C8 - 0x0000)
struct Treehouse_C_SetStage final
{
public:
	bool                                          SpawnStuff;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SaveSpawn;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Sspw;                                              // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          P;                                                 // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            Temp_object_Variable;                              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            Temp_object_Variable_1;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            Temp_object_Variable_2;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            Temp_object_Variable_3;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            Temp_object_Variable_4;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            Temp_object_Variable_5;                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            Temp_object_Variable_6;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USceneComponent*>                CallFunc_GetChildrenComponents_Children;           // 0x0048(0x0010)(ReferenceParm, ContainsInstancedReference)
	TArray<class USceneComponent*>                CallFunc_GetChildrenComponents_Children_1;         // 0x0058(0x0010)(ReferenceParm, ContainsInstancedReference)
	TArray<class USceneComponent*>                CallFunc_GetChildrenComponents_Children_2;         // 0x0068(0x0010)(ReferenceParm, ContainsInstancedReference)
	TArray<class USceneComponent*>                CallFunc_GetChildrenComponents_Children_3;         // 0x0078(0x0010)(ReferenceParm, ContainsInstancedReference)
	TArray<class USceneComponent*>                CallFunc_GetChildrenComponents_Children_4;         // 0x0088(0x0010)(ReferenceParm, ContainsInstancedReference)
	TArray<class USceneComponent*>                CallFunc_GetChildrenComponents_Children_5;         // 0x0098(0x0010)(ReferenceParm, ContainsInstancedReference)
	class APropSpawner_editor_C*                  CallFunc_Array_Get_Item;                           // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x00B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B6[0x2];                                       // 0x00B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            K2Node_Select_Default;                             // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetStaticMesh_ReturnValue_1;              // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Treehouse_C_SetStage) == 0x000008, "Wrong alignment on Treehouse_C_SetStage");
static_assert(sizeof(Treehouse_C_SetStage) == 0x0000C8, "Wrong size on Treehouse_C_SetStage");
static_assert(offsetof(Treehouse_C_SetStage, SpawnStuff) == 0x000000, "Member 'Treehouse_C_SetStage::SpawnStuff' has a wrong offset!");
static_assert(offsetof(Treehouse_C_SetStage, SaveSpawn) == 0x000001, "Member 'Treehouse_C_SetStage::SaveSpawn' has a wrong offset!");
static_assert(offsetof(Treehouse_C_SetStage, Sspw) == 0x000002, "Member 'Treehouse_C_SetStage::Sspw' has a wrong offset!");
static_assert(offsetof(Treehouse_C_SetStage, P) == 0x000003, "Member 'Treehouse_C_SetStage::P' has a wrong offset!");
static_assert(offsetof(Treehouse_C_SetStage, Temp_int_Variable) == 0x000004, "Member 'Treehouse_C_SetStage::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(Treehouse_C_SetStage, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'Treehouse_C_SetStage::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Treehouse_C_SetStage, Temp_int_Variable_1) == 0x00000C, "Member 'Treehouse_C_SetStage::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(Treehouse_C_SetStage, Temp_object_Variable) == 0x000010, "Member 'Treehouse_C_SetStage::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(Treehouse_C_SetStage, Temp_object_Variable_1) == 0x000018, "Member 'Treehouse_C_SetStage::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(Treehouse_C_SetStage, Temp_object_Variable_2) == 0x000020, "Member 'Treehouse_C_SetStage::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(Treehouse_C_SetStage, Temp_object_Variable_3) == 0x000028, "Member 'Treehouse_C_SetStage::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(Treehouse_C_SetStage, Temp_object_Variable_4) == 0x000030, "Member 'Treehouse_C_SetStage::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(Treehouse_C_SetStage, Temp_object_Variable_5) == 0x000038, "Member 'Treehouse_C_SetStage::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(Treehouse_C_SetStage, Temp_object_Variable_6) == 0x000040, "Member 'Treehouse_C_SetStage::Temp_object_Variable_6' has a wrong offset!");
static_assert(offsetof(Treehouse_C_SetStage, CallFunc_GetChildrenComponents_Children) == 0x000048, "Member 'Treehouse_C_SetStage::CallFunc_GetChildrenComponents_Children' has a wrong offset!");
static_assert(offsetof(Treehouse_C_SetStage, CallFunc_GetChildrenComponents_Children_1) == 0x000058, "Member 'Treehouse_C_SetStage::CallFunc_GetChildrenComponents_Children_1' has a wrong offset!");
static_assert(offsetof(Treehouse_C_SetStage, CallFunc_GetChildrenComponents_Children_2) == 0x000068, "Member 'Treehouse_C_SetStage::CallFunc_GetChildrenComponents_Children_2' has a wrong offset!");
static_assert(offsetof(Treehouse_C_SetStage, CallFunc_GetChildrenComponents_Children_3) == 0x000078, "Member 'Treehouse_C_SetStage::CallFunc_GetChildrenComponents_Children_3' has a wrong offset!");
static_assert(offsetof(Treehouse_C_SetStage, CallFunc_GetChildrenComponents_Children_4) == 0x000088, "Member 'Treehouse_C_SetStage::CallFunc_GetChildrenComponents_Children_4' has a wrong offset!");
static_assert(offsetof(Treehouse_C_SetStage, CallFunc_GetChildrenComponents_Children_5) == 0x000098, "Member 'Treehouse_C_SetStage::CallFunc_GetChildrenComponents_Children_5' has a wrong offset!");
static_assert(offsetof(Treehouse_C_SetStage, CallFunc_Array_Get_Item) == 0x0000A8, "Member 'Treehouse_C_SetStage::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Treehouse_C_SetStage, CallFunc_Array_Length_ReturnValue) == 0x0000B0, "Member 'Treehouse_C_SetStage::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Treehouse_C_SetStage, CallFunc_Less_IntInt_ReturnValue) == 0x0000B4, "Member 'Treehouse_C_SetStage::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Treehouse_C_SetStage, K2Node_SwitchInteger_CmpSuccess) == 0x0000B5, "Member 'Treehouse_C_SetStage::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(Treehouse_C_SetStage, K2Node_Select_Default) == 0x0000B8, "Member 'Treehouse_C_SetStage::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Treehouse_C_SetStage, CallFunc_SetStaticMesh_ReturnValue) == 0x0000C0, "Member 'Treehouse_C_SetStage::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(Treehouse_C_SetStage, CallFunc_SetStaticMesh_ReturnValue_1) == 0x0000C1, "Member 'Treehouse_C_SetStage::CallFunc_SetStaticMesh_ReturnValue_1' has a wrong offset!");

// Function treehouse.treehouse_C.Adds
// 0x0058 (0x0058 - 0x0000)
struct Treehouse_C_Adds final
{
public:
	TArray<class USceneComponent*>                Array;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   K2Node_DynamicCast_AsChild_Actor_Component;        // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APropSpawner_editor_C*                  K2Node_DynamicCast_AsProp_Spawner_Editor;          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_spawn_treehouse_OutputPin;                // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Treehouse_C_Adds) == 0x000008, "Wrong alignment on Treehouse_C_Adds");
static_assert(sizeof(Treehouse_C_Adds) == 0x000058, "Wrong size on Treehouse_C_Adds");
static_assert(offsetof(Treehouse_C_Adds, Array) == 0x000000, "Member 'Treehouse_C_Adds::Array' has a wrong offset!");
static_assert(offsetof(Treehouse_C_Adds, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'Treehouse_C_Adds::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Treehouse_C_Adds, Temp_int_Array_Index_Variable) == 0x000014, "Member 'Treehouse_C_Adds::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Treehouse_C_Adds, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'Treehouse_C_Adds::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Treehouse_C_Adds, CallFunc_Array_Get_Item) == 0x000020, "Member 'Treehouse_C_Adds::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Treehouse_C_Adds, K2Node_DynamicCast_AsChild_Actor_Component) == 0x000028, "Member 'Treehouse_C_Adds::K2Node_DynamicCast_AsChild_Actor_Component' has a wrong offset!");
static_assert(offsetof(Treehouse_C_Adds, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'Treehouse_C_Adds::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Treehouse_C_Adds, CallFunc_Less_IntInt_ReturnValue) == 0x000031, "Member 'Treehouse_C_Adds::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Treehouse_C_Adds, K2Node_DynamicCast_AsProp_Spawner_Editor) == 0x000038, "Member 'Treehouse_C_Adds::K2Node_DynamicCast_AsProp_Spawner_Editor' has a wrong offset!");
static_assert(offsetof(Treehouse_C_Adds, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'Treehouse_C_Adds::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(Treehouse_C_Adds, CallFunc_Add_IntInt_ReturnValue) == 0x000044, "Member 'Treehouse_C_Adds::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Treehouse_C_Adds, CallFunc_spawn_treehouse_OutputPin) == 0x000048, "Member 'Treehouse_C_Adds::CallFunc_spawn_treehouse_OutputPin' has a wrong offset!");
static_assert(offsetof(Treehouse_C_Adds, CallFunc_Array_Add_ReturnValue) == 0x000050, "Member 'Treehouse_C_Adds::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function treehouse.treehouse_C.spawnGift
// 0x0060 (0x0060 - 0x0000)
struct Treehouse_C_SpawnGift final
{
public:
	TArray<class FString>                         K2Node_MakeArray_Array;                            // 0x0000(0x0010)(ReferenceParm)
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0010(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1; // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AProp_keldoll_C*                        CallFunc_FinishSpawningActor_ReturnValue;          // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AProp_clipboard_paper_C*                CallFunc_FinishSpawningActor_ReturnValue_1;        // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Treehouse_C_SpawnGift) == 0x000010, "Wrong alignment on Treehouse_C_SpawnGift");
static_assert(sizeof(Treehouse_C_SpawnGift) == 0x000060, "Wrong size on Treehouse_C_SpawnGift");
static_assert(offsetof(Treehouse_C_SpawnGift, K2Node_MakeArray_Array) == 0x000000, "Member 'Treehouse_C_SpawnGift::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Treehouse_C_SpawnGift, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000010, "Member 'Treehouse_C_SpawnGift::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(Treehouse_C_SpawnGift, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000040, "Member 'Treehouse_C_SpawnGift::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(Treehouse_C_SpawnGift, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1) == 0x000048, "Member 'Treehouse_C_SpawnGift::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Treehouse_C_SpawnGift, CallFunc_FinishSpawningActor_ReturnValue) == 0x000050, "Member 'Treehouse_C_SpawnGift::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(Treehouse_C_SpawnGift, CallFunc_FinishSpawningActor_ReturnValue_1) == 0x000058, "Member 'Treehouse_C_SpawnGift::CallFunc_FinishSpawningActor_ReturnValue_1' has a wrong offset!");

// Function treehouse.treehouse_C.ignoreSave
// 0x0001 (0x0001 - 0x0000)
struct Treehouse_C_IgnoreSave final
{
public:
	bool                                          Param_IgnoreSave;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Treehouse_C_IgnoreSave) == 0x000001, "Wrong alignment on Treehouse_C_IgnoreSave");
static_assert(sizeof(Treehouse_C_IgnoreSave) == 0x000001, "Wrong size on Treehouse_C_IgnoreSave");
static_assert(offsetof(Treehouse_C_IgnoreSave, Param_IgnoreSave) == 0x000000, "Member 'Treehouse_C_IgnoreSave::Param_IgnoreSave' has a wrong offset!");

// Function treehouse.treehouse_C.loadData
// 0x0110 (0x0110 - 0x0000)
struct Treehouse_C_LoadData final
{
public:
	struct FStruct_save                           Data;                                              // 0x0000(0x00C0)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x00C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_mString                        CallFunc_Array_Get_Item;                           // 0x00C8(0x0010)(HasGetValueTypeHash)
	struct FStruct_mInt                           CallFunc_Array_Get_Item_1;                         // 0x00D8(0x0010)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_2;                         // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_mBool                          CallFunc_Array_Get_Item_3;                         // 0x00F0(0x0010)(HasGetValueTypeHash)
	bool                                          CallFunc_Array_Get_Item_4;                         // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Treehouse_C_LoadData) == 0x000010, "Wrong alignment on Treehouse_C_LoadData");
static_assert(sizeof(Treehouse_C_LoadData) == 0x000110, "Wrong size on Treehouse_C_LoadData");
static_assert(offsetof(Treehouse_C_LoadData, Data) == 0x000000, "Member 'Treehouse_C_LoadData::Data' has a wrong offset!");
static_assert(offsetof(Treehouse_C_LoadData, Return) == 0x0000C0, "Member 'Treehouse_C_LoadData::Return' has a wrong offset!");
static_assert(offsetof(Treehouse_C_LoadData, CallFunc_Array_Get_Item) == 0x0000C8, "Member 'Treehouse_C_LoadData::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Treehouse_C_LoadData, CallFunc_Array_Get_Item_1) == 0x0000D8, "Member 'Treehouse_C_LoadData::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(Treehouse_C_LoadData, CallFunc_Array_Get_Item_2) == 0x0000E8, "Member 'Treehouse_C_LoadData::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(Treehouse_C_LoadData, CallFunc_Array_Get_Item_3) == 0x0000F0, "Member 'Treehouse_C_LoadData::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(Treehouse_C_LoadData, CallFunc_Array_Get_Item_4) == 0x000100, "Member 'Treehouse_C_LoadData::CallFunc_Array_Get_Item_4' has a wrong offset!");

// Function treehouse.treehouse_C.getData
// 0x0240 (0x0240 - 0x0000)
struct Treehouse_C_GetData final
{
public:
	struct FStruct_save                           Data;                                              // 0x0000(0x00C0)(Parm, OutParm, HasGetValueTypeHash)
	struct FStruct_mString                        K2Node_MakeStruct_struct_mString;                  // 0x00C0(0x0010)(HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FStruct_mString>                K2Node_MakeArray_Array;                            // 0x00D8(0x0010)(ReferenceParm)
	TArray<bool>                                  K2Node_MakeArray_Array_1;                          // 0x00E8(0x0010)(ReferenceParm)
	TArray<int32>                                 K2Node_MakeArray_Array_2;                          // 0x00F8(0x0010)(ReferenceParm)
	struct FStruct_mBool                          K2Node_MakeStruct_struct_mBool;                    // 0x0108(0x0010)(HasGetValueTypeHash)
	struct FStruct_mInt                           K2Node_MakeStruct_struct_mInt;                     // 0x0118(0x0010)(HasGetValueTypeHash)
	TArray<struct FStruct_mBool>                  K2Node_MakeArray_Array_3;                          // 0x0128(0x0010)(ReferenceParm)
	TArray<struct FStruct_mInt>                   K2Node_MakeArray_Array_4;                          // 0x0138(0x0010)(ReferenceParm)
	uint8                                         Pad_148[0x8];                                      // 0x0148(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0150(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FStruct_save                           K2Node_MakeStruct_struct_save;                     // 0x0180(0x00C0)(HasGetValueTypeHash)
};
static_assert(alignof(Treehouse_C_GetData) == 0x000010, "Wrong alignment on Treehouse_C_GetData");
static_assert(sizeof(Treehouse_C_GetData) == 0x000240, "Wrong size on Treehouse_C_GetData");
static_assert(offsetof(Treehouse_C_GetData, Data) == 0x000000, "Member 'Treehouse_C_GetData::Data' has a wrong offset!");
static_assert(offsetof(Treehouse_C_GetData, K2Node_MakeStruct_struct_mString) == 0x0000C0, "Member 'Treehouse_C_GetData::K2Node_MakeStruct_struct_mString' has a wrong offset!");
static_assert(offsetof(Treehouse_C_GetData, CallFunc_GetObjectClass_ReturnValue) == 0x0000D0, "Member 'Treehouse_C_GetData::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(Treehouse_C_GetData, K2Node_MakeArray_Array) == 0x0000D8, "Member 'Treehouse_C_GetData::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Treehouse_C_GetData, K2Node_MakeArray_Array_1) == 0x0000E8, "Member 'Treehouse_C_GetData::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(Treehouse_C_GetData, K2Node_MakeArray_Array_2) == 0x0000F8, "Member 'Treehouse_C_GetData::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(Treehouse_C_GetData, K2Node_MakeStruct_struct_mBool) == 0x000108, "Member 'Treehouse_C_GetData::K2Node_MakeStruct_struct_mBool' has a wrong offset!");
static_assert(offsetof(Treehouse_C_GetData, K2Node_MakeStruct_struct_mInt) == 0x000118, "Member 'Treehouse_C_GetData::K2Node_MakeStruct_struct_mInt' has a wrong offset!");
static_assert(offsetof(Treehouse_C_GetData, K2Node_MakeArray_Array_3) == 0x000128, "Member 'Treehouse_C_GetData::K2Node_MakeArray_Array_3' has a wrong offset!");
static_assert(offsetof(Treehouse_C_GetData, K2Node_MakeArray_Array_4) == 0x000138, "Member 'Treehouse_C_GetData::K2Node_MakeArray_Array_4' has a wrong offset!");
static_assert(offsetof(Treehouse_C_GetData, CallFunc_GetTransform_ReturnValue) == 0x000150, "Member 'Treehouse_C_GetData::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(Treehouse_C_GetData, K2Node_MakeStruct_struct_save) == 0x000180, "Member 'Treehouse_C_GetData::K2Node_MakeStruct_struct_save' has a wrong offset!");

// Function treehouse.treehouse_C.skipPreDelete
// 0x0001 (0x0001 - 0x0000)
struct Treehouse_C_SkipPreDelete final
{
public:
	bool                                          Skip;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Treehouse_C_SkipPreDelete) == 0x000001, "Wrong alignment on Treehouse_C_SkipPreDelete");
static_assert(sizeof(Treehouse_C_SkipPreDelete) == 0x000001, "Wrong size on Treehouse_C_SkipPreDelete");
static_assert(offsetof(Treehouse_C_SkipPreDelete, Skip) == 0x000000, "Member 'Treehouse_C_SkipPreDelete::Skip' has a wrong offset!");

// Function treehouse.treehouse_C.gatherDataFromKey
// 0x0001 (0x0001 - 0x0000)
struct Treehouse_C_GatherDataFromKey final
{
public:
	bool                                          Gather;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Treehouse_C_GatherDataFromKey) == 0x000001, "Wrong alignment on Treehouse_C_GatherDataFromKey");
static_assert(sizeof(Treehouse_C_GatherDataFromKey) == 0x000001, "Wrong size on Treehouse_C_GatherDataFromKey");
static_assert(offsetof(Treehouse_C_GatherDataFromKey, Gather) == 0x000000, "Member 'Treehouse_C_GatherDataFromKey::Gather' has a wrong offset!");

// Function treehouse.treehouse_C.getTriggerData
// 0x00F0 (0x00F0 - 0x0000)
struct Treehouse_C_GetTriggerData final
{
public:
	struct FStruct_triggerSave                    Data;                                              // 0x0000(0x00F0)(Parm, OutParm, HasGetValueTypeHash)
};
static_assert(alignof(Treehouse_C_GetTriggerData) == 0x000010, "Wrong alignment on Treehouse_C_GetTriggerData");
static_assert(sizeof(Treehouse_C_GetTriggerData) == 0x0000F0, "Wrong size on Treehouse_C_GetTriggerData");
static_assert(offsetof(Treehouse_C_GetTriggerData, Data) == 0x000000, "Member 'Treehouse_C_GetTriggerData::Data' has a wrong offset!");

// Function treehouse.treehouse_C.loadTriggerData
// 0x0100 (0x0100 - 0x0000)
struct Treehouse_C_LoadTriggerData final
{
public:
	struct FStruct_triggerSave                    Data;                                              // 0x0000(0x00F0)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x00F0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Treehouse_C_LoadTriggerData) == 0x000010, "Wrong alignment on Treehouse_C_LoadTriggerData");
static_assert(sizeof(Treehouse_C_LoadTriggerData) == 0x000100, "Wrong size on Treehouse_C_LoadTriggerData");
static_assert(offsetof(Treehouse_C_LoadTriggerData, Data) == 0x000000, "Member 'Treehouse_C_LoadTriggerData::Data' has a wrong offset!");
static_assert(offsetof(Treehouse_C_LoadTriggerData, Return) == 0x0000F0, "Member 'Treehouse_C_LoadTriggerData::Return' has a wrong offset!");

// Function treehouse.treehouse_C.ignoreSave_trigger
// 0x0001 (0x0001 - 0x0000)
struct Treehouse_C_IgnoreSave_trigger final
{
public:
	bool                                          Ignore;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Treehouse_C_IgnoreSave_trigger) == 0x000001, "Wrong alignment on Treehouse_C_IgnoreSave_trigger");
static_assert(sizeof(Treehouse_C_IgnoreSave_trigger) == 0x000001, "Wrong size on Treehouse_C_IgnoreSave_trigger");
static_assert(offsetof(Treehouse_C_IgnoreSave_trigger, Ignore) == 0x000000, "Member 'Treehouse_C_IgnoreSave_trigger::Ignore' has a wrong offset!");

// Function treehouse.treehouse_C.gatherDataFromKeyT
// 0x0001 (0x0001 - 0x0000)
struct Treehouse_C_GatherDataFromKeyT final
{
public:
	bool                                          Gather;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Treehouse_C_GatherDataFromKeyT) == 0x000001, "Wrong alignment on Treehouse_C_GatherDataFromKeyT");
static_assert(sizeof(Treehouse_C_GatherDataFromKeyT) == 0x000001, "Wrong size on Treehouse_C_GatherDataFromKeyT");
static_assert(offsetof(Treehouse_C_GatherDataFromKeyT, Gather) == 0x000000, "Member 'Treehouse_C_GatherDataFromKeyT::Gather' has a wrong offset!");

// Function treehouse.treehouse_C.canBeUsedHold
// 0x0001 (0x0001 - 0x0000)
struct Treehouse_C_CanBeUsedHold final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Treehouse_C_CanBeUsedHold) == 0x000001, "Wrong alignment on Treehouse_C_CanBeUsedHold");
static_assert(sizeof(Treehouse_C_CanBeUsedHold) == 0x000001, "Wrong size on Treehouse_C_CanBeUsedHold");
static_assert(offsetof(Treehouse_C_CanBeUsedHold, Return) == 0x000000, "Member 'Treehouse_C_CanBeUsedHold::Return' has a wrong offset!");

// Function treehouse.treehouse_C.GetKey
// 0x0028 (0x0028 - 0x0000)
struct Treehouse_C_GetKey final
{
public:
	class FString                                 Param_Key;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Treehouse_C_GetKey) == 0x000008, "Wrong alignment on Treehouse_C_GetKey");
static_assert(sizeof(Treehouse_C_GetKey) == 0x000028, "Wrong size on Treehouse_C_GetKey");
static_assert(offsetof(Treehouse_C_GetKey, Param_Key) == 0x000000, "Member 'Treehouse_C_GetKey::Param_Key' has a wrong offset!");
static_assert(offsetof(Treehouse_C_GetKey, CallFunc_getMainGamemode_AsMain_Gamemode) == 0x000010, "Member 'Treehouse_C_GetKey::CallFunc_getMainGamemode_AsMain_Gamemode' has a wrong offset!");
static_assert(offsetof(Treehouse_C_GetKey, CallFunc_Array_Add_ReturnValue) == 0x000018, "Member 'Treehouse_C_GetKey::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(Treehouse_C_GetKey, CallFunc_Array_Add_ReturnValue_1) == 0x00001C, "Member 'Treehouse_C_GetKey::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Treehouse_C_GetKey, CallFunc_Array_Find_ReturnValue) == 0x000020, "Member 'Treehouse_C_GetKey::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(Treehouse_C_GetKey, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000024, "Member 'Treehouse_C_GetKey::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function treehouse.treehouse_C.toolboxFix
// 0x0010 (0x0010 - 0x0000)
struct Treehouse_C_ToolboxFix final
{
public:
	class AProp_toolbox_C*                        Toolbox;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Treehouse_C_ToolboxFix) == 0x000008, "Wrong alignment on Treehouse_C_ToolboxFix");
static_assert(sizeof(Treehouse_C_ToolboxFix) == 0x000010, "Wrong size on Treehouse_C_ToolboxFix");
static_assert(offsetof(Treehouse_C_ToolboxFix, Toolbox) == 0x000000, "Member 'Treehouse_C_ToolboxFix::Toolbox' has a wrong offset!");
static_assert(offsetof(Treehouse_C_ToolboxFix, Return) == 0x000008, "Member 'Treehouse_C_ToolboxFix::Return' has a wrong offset!");

// Function treehouse.treehouse_C.processKeys
// 0x0001 (0x0001 - 0x0000)
struct Treehouse_C_ProcessKeys final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Treehouse_C_ProcessKeys) == 0x000001, "Wrong alignment on Treehouse_C_ProcessKeys");
static_assert(sizeof(Treehouse_C_ProcessKeys) == 0x000001, "Wrong size on Treehouse_C_ProcessKeys");
static_assert(offsetof(Treehouse_C_ProcessKeys, Return) == 0x000000, "Member 'Treehouse_C_ProcessKeys::Return' has a wrong offset!");

// Function treehouse.treehouse_C.getOnlyKey
// 0x0010 (0x0010 - 0x0000)
struct Treehouse_C_GetOnlyKey final
{
public:
	class FString                                 Param_Key;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Treehouse_C_GetOnlyKey) == 0x000008, "Wrong alignment on Treehouse_C_GetOnlyKey");
static_assert(sizeof(Treehouse_C_GetOnlyKey) == 0x000010, "Wrong size on Treehouse_C_GetOnlyKey");
static_assert(offsetof(Treehouse_C_GetOnlyKey, Param_Key) == 0x000000, "Member 'Treehouse_C_GetOnlyKey::Param_Key' has a wrong offset!");

// Function treehouse.treehouse_C.setPath
// 0x0018 (0x0018 - 0x0000)
struct Treehouse_C_SetPath final
{
public:
	TArray<struct FVector>                        Path;                                              // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Return;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Treehouse_C_SetPath) == 0x000008, "Wrong alignment on Treehouse_C_SetPath");
static_assert(sizeof(Treehouse_C_SetPath) == 0x000018, "Wrong size on Treehouse_C_SetPath");
static_assert(offsetof(Treehouse_C_SetPath, Path) == 0x000000, "Member 'Treehouse_C_SetPath::Path' has a wrong offset!");
static_assert(offsetof(Treehouse_C_SetPath, Return) == 0x000010, "Member 'Treehouse_C_SetPath::Return' has a wrong offset!");

// Function treehouse.treehouse_C.getActionOptions
// 0x0050 (0x0050 - 0x0000)
struct Treehouse_C_GetActionOptions final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Component;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         Options;                                           // 0x0018(0x0010)(Parm, OutParm)
	TArray<Enum_interactionActions>               Options_enum;                                      // 0x0028(0x0010)(Parm, OutParm)
	TArray<class FText>                           OptionsNamesOverlay;                               // 0x0038(0x0010)(Parm, OutParm)
	uint8                                         Number;                                            // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Treehouse_C_GetActionOptions) == 0x000008, "Wrong alignment on Treehouse_C_GetActionOptions");
static_assert(sizeof(Treehouse_C_GetActionOptions) == 0x000050, "Wrong size on Treehouse_C_GetActionOptions");
static_assert(offsetof(Treehouse_C_GetActionOptions, Player) == 0x000000, "Member 'Treehouse_C_GetActionOptions::Player' has a wrong offset!");
static_assert(offsetof(Treehouse_C_GetActionOptions, Component) == 0x000008, "Member 'Treehouse_C_GetActionOptions::Component' has a wrong offset!");
static_assert(offsetof(Treehouse_C_GetActionOptions, Actor) == 0x000010, "Member 'Treehouse_C_GetActionOptions::Actor' has a wrong offset!");
static_assert(offsetof(Treehouse_C_GetActionOptions, Options) == 0x000018, "Member 'Treehouse_C_GetActionOptions::Options' has a wrong offset!");
static_assert(offsetof(Treehouse_C_GetActionOptions, Options_enum) == 0x000028, "Member 'Treehouse_C_GetActionOptions::Options_enum' has a wrong offset!");
static_assert(offsetof(Treehouse_C_GetActionOptions, OptionsNamesOverlay) == 0x000038, "Member 'Treehouse_C_GetActionOptions::OptionsNamesOverlay' has a wrong offset!");
static_assert(offsetof(Treehouse_C_GetActionOptions, Number) == 0x000048, "Member 'Treehouse_C_GetActionOptions::Number' has a wrong offset!");

// Function treehouse.treehouse_C.gascanFuel
// 0x0010 (0x0010 - 0x0000)
struct Treehouse_C_GascanFuel final
{
public:
	class AProp_gascan_C*                         Gascan;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Fueled;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Treehouse_C_GascanFuel) == 0x000008, "Wrong alignment on Treehouse_C_GascanFuel");
static_assert(sizeof(Treehouse_C_GascanFuel) == 0x000010, "Wrong size on Treehouse_C_GascanFuel");
static_assert(offsetof(Treehouse_C_GascanFuel, Gascan) == 0x000000, "Member 'Treehouse_C_GascanFuel::Gascan' has a wrong offset!");
static_assert(offsetof(Treehouse_C_GascanFuel, Fueled) == 0x000008, "Member 'Treehouse_C_GascanFuel::Fueled' has a wrong offset!");

// Function treehouse.treehouse_C.skipRadial
// 0x0001 (0x0001 - 0x0000)
struct Treehouse_C_SkipRadial final
{
public:
	bool                                          Skip;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Treehouse_C_SkipRadial) == 0x000001, "Wrong alignment on Treehouse_C_SkipRadial");
static_assert(sizeof(Treehouse_C_SkipRadial) == 0x000001, "Wrong size on Treehouse_C_SkipRadial");
static_assert(offsetof(Treehouse_C_SkipRadial, Skip) == 0x000000, "Member 'Treehouse_C_SkipRadial::Skip' has a wrong offset!");

// Function treehouse.treehouse_C.getPriceMultiplier
// 0x0004 (0x0004 - 0x0000)
struct Treehouse_C_GetPriceMultiplier final
{
public:
	float                                         PriceMult;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Treehouse_C_GetPriceMultiplier) == 0x000004, "Wrong alignment on Treehouse_C_GetPriceMultiplier");
static_assert(sizeof(Treehouse_C_GetPriceMultiplier) == 0x000004, "Wrong size on Treehouse_C_GetPriceMultiplier");
static_assert(offsetof(Treehouse_C_GetPriceMultiplier, PriceMult) == 0x000000, "Member 'Treehouse_C_GetPriceMultiplier::PriceMult' has a wrong offset!");

// Function treehouse.treehouse_C.dreamInv
// 0x0018 (0x0018 - 0x0000)
struct Treehouse_C_DreamInv final
{
public:
	TArray<struct FStruct_save>                   Invv;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class ADreamBase_C*                           Base;                                              // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Treehouse_C_DreamInv) == 0x000008, "Wrong alignment on Treehouse_C_DreamInv");
static_assert(sizeof(Treehouse_C_DreamInv) == 0x000018, "Wrong size on Treehouse_C_DreamInv");
static_assert(offsetof(Treehouse_C_DreamInv, Invv) == 0x000000, "Member 'Treehouse_C_DreamInv::Invv' has a wrong offset!");
static_assert(offsetof(Treehouse_C_DreamInv, Base) == 0x000010, "Member 'Treehouse_C_DreamInv::Base' has a wrong offset!");

}

