#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CargoLift

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Actor_save_classes.hpp"
#include "Enum_interactionActions_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass cargoLift.cargoLift_C
// 0x0098 (0x02E0 - 0x0248)
class ACargoLift_C final : public AActor_save_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_CargoLift_C;                        // 0x0248(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          buttonsElev2;                                      // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          buttonsElev1;                                      // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CargoButton;                                       // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            C5;                                                // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          buttonsElev;                                       // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Lift;                                              // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            C4;                                                // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            C3;                                                // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            C2;                                                // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Attach;                                            // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Move_a_E57DF8DD4EB5C5C0AAE99CBF51BDD73C;           // 0x02A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Move__Direction_E57DF8DD4EB5C5C0AAE99CBF51BDD73C;  // 0x02A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A5[0x3];                                      // 0x02A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Move;                                              // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Moving;                                            // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Dir;                                               // 0x02B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B2[0x2];                                      // 0x02B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Spd;                                               // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Alpha;                                             // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BC[0x4];                                      // 0x02BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Timer;                                             // 0x02C0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         D;                                                 // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2CC[0x4];                                      // 0x02CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    Comp;                                              // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreCheck;                                       // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D9[0x3];                                      // 0x02D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Speed;                                             // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void LandedOn(class AMainPlayer_C* Player, bool* IgnoreFallDamage);
	void IsButtonUsed(bool* Failed);
	void LookAt(class AMainPlayer_C* Player, const struct FHitResult& Hit, bool* Return, class FString* Text, class UPrimitiveComponent** boundObjectReplace, uint8* Number);
	void NoRespawn(bool Param_NoRespawn, bool* Return);
	void CanPickup(bool* Return);
	void AsProp(class AProp_C** Return);
	void CanBePutInContainer(bool* Return);
	void SkipPreDelete(bool* Skip);
	void IgnoreSave(bool* Param_IgnoreSave);
	void GetActionOptions(class AMainPlayer_C* Player, class UPrimitiveComponent* Component, class AActor* Actor, TArray<class FString>* Options, TArray<Enum_interactionActions>* Options_enum, TArray<class FText>* OptionsNamesOverlay, uint8* Number);
	void Move__FinishedFunc();
	void Move__UpdateFunc();
	void ActionOptionIndex(class AMainPlayer_C* Player, const struct FHitResult& Hit, Enum_interactionActions Action);
	void PlayerR(class AMainPlayer_C* Player);
	void PlayerHold(class AMainPlayer_C* Player);
	void PlayerUnequip(class AMainPlayer_C* Player);
	void UpdateStrAgl();
	void DamageByPlayer(class AMainPlayer_C* Player, const struct FHitResult& Hit, float Damage);
	void Thrown(class AMainPlayer_C* Player);
	void broken_fire();
	void broken();
	void SendName(class FName Param_Name);
	void Kicked(bool Kick);
	void Player_use(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void DriveDetached();
	void ReceiveBeginPlay();
	void Hit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Param_Hit);
	void Ignore();
	void ExecuteUbergraph_cargoLift(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"cargoLift_C">();
	}
	static class ACargoLift_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACargoLift_C>();
	}
};
static_assert(alignof(ACargoLift_C) == 0x000008, "Wrong alignment on ACargoLift_C");
static_assert(sizeof(ACargoLift_C) == 0x0002E0, "Wrong size on ACargoLift_C");
static_assert(offsetof(ACargoLift_C, UberGraphFrame_CargoLift_C) == 0x000248, "Member 'ACargoLift_C::UberGraphFrame_CargoLift_C' has a wrong offset!");
static_assert(offsetof(ACargoLift_C, buttonsElev2) == 0x000250, "Member 'ACargoLift_C::buttonsElev2' has a wrong offset!");
static_assert(offsetof(ACargoLift_C, buttonsElev1) == 0x000258, "Member 'ACargoLift_C::buttonsElev1' has a wrong offset!");
static_assert(offsetof(ACargoLift_C, CargoButton) == 0x000260, "Member 'ACargoLift_C::CargoButton' has a wrong offset!");
static_assert(offsetof(ACargoLift_C, C5) == 0x000268, "Member 'ACargoLift_C::C5' has a wrong offset!");
static_assert(offsetof(ACargoLift_C, buttonsElev) == 0x000270, "Member 'ACargoLift_C::buttonsElev' has a wrong offset!");
static_assert(offsetof(ACargoLift_C, Lift) == 0x000278, "Member 'ACargoLift_C::Lift' has a wrong offset!");
static_assert(offsetof(ACargoLift_C, C4) == 0x000280, "Member 'ACargoLift_C::C4' has a wrong offset!");
static_assert(offsetof(ACargoLift_C, C3) == 0x000288, "Member 'ACargoLift_C::C3' has a wrong offset!");
static_assert(offsetof(ACargoLift_C, C2) == 0x000290, "Member 'ACargoLift_C::C2' has a wrong offset!");
static_assert(offsetof(ACargoLift_C, Attach) == 0x000298, "Member 'ACargoLift_C::Attach' has a wrong offset!");
static_assert(offsetof(ACargoLift_C, Move_a_E57DF8DD4EB5C5C0AAE99CBF51BDD73C) == 0x0002A0, "Member 'ACargoLift_C::Move_a_E57DF8DD4EB5C5C0AAE99CBF51BDD73C' has a wrong offset!");
static_assert(offsetof(ACargoLift_C, Move__Direction_E57DF8DD4EB5C5C0AAE99CBF51BDD73C) == 0x0002A4, "Member 'ACargoLift_C::Move__Direction_E57DF8DD4EB5C5C0AAE99CBF51BDD73C' has a wrong offset!");
static_assert(offsetof(ACargoLift_C, Move) == 0x0002A8, "Member 'ACargoLift_C::Move' has a wrong offset!");
static_assert(offsetof(ACargoLift_C, Moving) == 0x0002B0, "Member 'ACargoLift_C::Moving' has a wrong offset!");
static_assert(offsetof(ACargoLift_C, Dir) == 0x0002B1, "Member 'ACargoLift_C::Dir' has a wrong offset!");
static_assert(offsetof(ACargoLift_C, Spd) == 0x0002B4, "Member 'ACargoLift_C::Spd' has a wrong offset!");
static_assert(offsetof(ACargoLift_C, Alpha) == 0x0002B8, "Member 'ACargoLift_C::Alpha' has a wrong offset!");
static_assert(offsetof(ACargoLift_C, Timer) == 0x0002C0, "Member 'ACargoLift_C::Timer' has a wrong offset!");
static_assert(offsetof(ACargoLift_C, D) == 0x0002C8, "Member 'ACargoLift_C::D' has a wrong offset!");
static_assert(offsetof(ACargoLift_C, Comp) == 0x0002D0, "Member 'ACargoLift_C::Comp' has a wrong offset!");
static_assert(offsetof(ACargoLift_C, IgnoreCheck) == 0x0002D8, "Member 'ACargoLift_C::IgnoreCheck' has a wrong offset!");
static_assert(offsetof(ACargoLift_C, Speed) == 0x0002DC, "Member 'ACargoLift_C::Speed' has a wrong offset!");

}

