#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: bs

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "Enum_interactionActions_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass bs.bs_C
// 0x00D8 (0x02F8 - 0x0220)
class Abs_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPnormal_C*                             Pnormal;                                           // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URadialForceComponent*                  AAA;                                               // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URadialForceComponent*                  RadialForce;                                       // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    U;                                                 // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        bsr;                                               // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Eff_bsVib;                                         // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        bs9;                                               // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    T;                                                 // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         b_NewTrack_0_13BA099545A265481E9816B3A4A7CA5F;     // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            b__Direction_13BA099545A265481E9816B3A4A7CA5F;     // 0x027C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_27D[0x3];                                      // 0x027D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     B;                                                 // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 Rt;                                                // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Dynmat;                                            // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvas*                                Canv;                                              // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDrawToRenderTargetContext             Canvcont;                                          // 0x02A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FIntPoint                              Res;                                               // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DynmatSymbol;                                      // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SymbolSize;                                        // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       M;                                                 // 0x02C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         Word;                                              // 0x02D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         Wb;                                                // 0x02E8(0x0010)(Edit, BlueprintVisible)

public:
	void GetPriceMultiplier(float* PriceMult);
	void SkipRadial(bool* Skip);
	void GascanFuel(class AProp_gascan_C* Gascan, bool* Fueled);
	void GetActionOptions(class AMainPlayer_C* Player, class UPrimitiveComponent* Component, class AActor* Actor, TArray<class FString>* Options, TArray<Enum_interactionActions>* Options_enum, TArray<class FText>* OptionsNamesOverlay, uint8* Number);
	void SetPath(const TArray<struct FVector>& Path, bool* Return);
	void ToolboxFix(class AProp_toolbox_C* Toolbox, bool* Return);
	void GetKey(class FString* Key);
	void CanBeUsedHold(bool* Return);
	void ProcessKeys(bool* Return);
	void GetOnlyKey(class FString* Key);
	void Decal(class UMaterialInterface* DecalMaterial, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& DecalSize);
	bool GetSym(const class FString& S, class UMaterialInstanceDynamic** Output);
	void PrepareMats();
	void Loc();
	void UserConstructionScript();
	void b__FinishedFunc();
	void b__UpdateFunc();
	void BndEvt__StaticMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ReceiveBeginPlay();
	void Eaten();
	void ReceiveTick(float DeltaSeconds);
	void HookTension(class AHook_C* Hook);
	void CleanSponge(float Clean, class AMainPlayer_C* Player);
	void Crafted();
	void Hooked(class AHook_C* Hook);
	void AttemptIgnite();
	void PlayerUsedOn(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void Slice(bool Clean);
	void LeaveWaterOrigin(class AWaterVolume_C* Water);
	void bitten();
	void ReachedByExplosion(const struct FVector& Location, float Damage);
	void EnterWaterOrigin(class AWaterVolume_C* Water);
	void PlayerLookAway(class AMainPlayer_C* Player);
	void Stepped(float Volume);
	void ActionName(class AMainPlayer_C* Player, const struct FHitResult& Hit, const class FString& Param_Name);
	void AccumulateTemperature(float Temperature, float Speed);
	void AddTemperature(float Temperature);
	void MicrowaveElec();
	void PlayerHandAnyKey(class AMainPlayer_C* Player, const struct FKey& Key, bool Pressed);
	void PlayerHandMouse(class AMainPlayer_C* Player, const struct FVector2D& Mouse);
	void PlayerHandMouseWheel(class AMainPlayer_C* Player, float WheelDelta);
	void PlayerHandRelease_LMB(class AMainPlayer_C* Player);
	void PlayerHandRelease_RMB(class AMainPlayer_C* Player);
	void ExtinguishFire();
	void Exploded(float Damage, const struct FVector& Location);
	void PlayerHandUse_LMB(class AMainPlayer_C* Player);
	void PlayerHandUse_RMB(class AMainPlayer_C* Player);
	void ActionOptionIndex(class AMainPlayer_C* Player, const struct FHitResult& Hit, Enum_interactionActions Action);
	void ReceivedPhyiscsDamage(float Damage, const struct FHitResult& Hot);
	void Microwave();
	void LeaveWater(class AWaterVolume_C* Water);
	void EnterWater(class AWaterVolume_C* Water);
	void Ignite(float Fuel);
	void ImpactDamage(float Damage, const struct FHitResult& Hit, class AActor* Actor, const struct FVector& Impact);
	void FireDamage(float Damage);
	void SteppedOn(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void Unhook();
	void DigUp();
	void PhysPreDestroyed();
	void PhysDestroyed();
	void SetKey(const class FString& Key);
	void SetPropProps(bool Static, bool Frozen, bool Active);
	void Virus(bool Activate);
	void AddDamage(class AActor* Actor, float Damage, const struct FHitResult& Hit, const struct FVector& Impact, bool SkipSetting);
	void ExecuteUbergraph_bs(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"bs_C">();
	}
	static class Abs_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<Abs_C>();
	}
};
static_assert(alignof(Abs_C) == 0x000008, "Wrong alignment on Abs_C");
static_assert(sizeof(Abs_C) == 0x0002F8, "Wrong size on Abs_C");
static_assert(offsetof(Abs_C, UberGraphFrame) == 0x000220, "Member 'Abs_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(Abs_C, Pnormal) == 0x000228, "Member 'Abs_C::Pnormal' has a wrong offset!");
static_assert(offsetof(Abs_C, AAA) == 0x000230, "Member 'Abs_C::AAA' has a wrong offset!");
static_assert(offsetof(Abs_C, RadialForce) == 0x000238, "Member 'Abs_C::RadialForce' has a wrong offset!");
static_assert(offsetof(Abs_C, U) == 0x000240, "Member 'Abs_C::U' has a wrong offset!");
static_assert(offsetof(Abs_C, bsr) == 0x000248, "Member 'Abs_C::bsr' has a wrong offset!");
static_assert(offsetof(Abs_C, Eff_bsVib) == 0x000250, "Member 'Abs_C::Eff_bsVib' has a wrong offset!");
static_assert(offsetof(Abs_C, bs9) == 0x000258, "Member 'Abs_C::bs9' has a wrong offset!");
static_assert(offsetof(Abs_C, T) == 0x000260, "Member 'Abs_C::T' has a wrong offset!");
static_assert(offsetof(Abs_C, StaticMesh) == 0x000268, "Member 'Abs_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(Abs_C, DefaultSceneRoot) == 0x000270, "Member 'Abs_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(Abs_C, b_NewTrack_0_13BA099545A265481E9816B3A4A7CA5F) == 0x000278, "Member 'Abs_C::b_NewTrack_0_13BA099545A265481E9816B3A4A7CA5F' has a wrong offset!");
static_assert(offsetof(Abs_C, b__Direction_13BA099545A265481E9816B3A4A7CA5F) == 0x00027C, "Member 'Abs_C::b__Direction_13BA099545A265481E9816B3A4A7CA5F' has a wrong offset!");
static_assert(offsetof(Abs_C, B) == 0x000280, "Member 'Abs_C::B' has a wrong offset!");
static_assert(offsetof(Abs_C, Rt) == 0x000288, "Member 'Abs_C::Rt' has a wrong offset!");
static_assert(offsetof(Abs_C, Dynmat) == 0x000290, "Member 'Abs_C::Dynmat' has a wrong offset!");
static_assert(offsetof(Abs_C, Canv) == 0x000298, "Member 'Abs_C::Canv' has a wrong offset!");
static_assert(offsetof(Abs_C, Canvcont) == 0x0002A0, "Member 'Abs_C::Canvcont' has a wrong offset!");
static_assert(offsetof(Abs_C, Res) == 0x0002B0, "Member 'Abs_C::Res' has a wrong offset!");
static_assert(offsetof(Abs_C, DynmatSymbol) == 0x0002B8, "Member 'Abs_C::DynmatSymbol' has a wrong offset!");
static_assert(offsetof(Abs_C, SymbolSize) == 0x0002C0, "Member 'Abs_C::SymbolSize' has a wrong offset!");
static_assert(offsetof(Abs_C, M) == 0x0002C8, "Member 'Abs_C::M' has a wrong offset!");
static_assert(offsetof(Abs_C, Word) == 0x0002D8, "Member 'Abs_C::Word' has a wrong offset!");
static_assert(offsetof(Abs_C, Wb) == 0x0002E8, "Member 'Abs_C::Wb' has a wrong offset!");

}

