#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Conveyor_turnR_2

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "Enum_interactionActions_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass conveyor_turnR_2.conveyor_turnR_2_C
// 0x0060 (0x0280 - 0x0220)
class AConveyor_turnR_2_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Wall;                                              // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Attach_a;                                          // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Attach_b;                                          // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        ArrowDir;                                          // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Billboard;                                         // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cube;                                              // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rot;                                               // 0x0264(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               Prev;                                              // 0x0270(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DontCheck;                                         // 0x027C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Dir;                                               // 0x027D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HasWall;                                           // 0x027E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_conveyor_turnR_2(int32 EntryPoint);
	void ImpactDamage(float Damage, const struct FHitResult& Hit, class AActor* Actor, const struct FVector& Impact);
	void ReceiveBeginPlay();
	void BndEvt__conveyor_turnR_2_Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__conveyor_turnR_2_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void EnterWater(class AWaterVolume_C* Water);
	void LeaveWater(class AWaterVolume_C* Water);
	void ActionOptionIndex(class AMainPlayer_C* Player, const struct FHitResult& Hit, Enum_interactionActions Action);
	void EnterWaterOrigin(class AWaterVolume_C* Water);
	void LeaveWaterOrigin(class AWaterVolume_C* Water);
	void Eaten();
	void Virus(bool Activate);
	void SetPropProps(bool Static, bool Frozen, bool Active);
	void AddDamage(class AActor* Actor, float Damage, const struct FHitResult& Hit, const struct FVector& Impact, bool SkipSetting);
	void PlayerHandMouseWheel(class AMainPlayer_C* Player, float WheelDelta);
	void SetKey(const class FString& Key);
	void PhysDestroyed();
	void PhysPreDestroyed();
	void DigUp();
	void Unhook();
	void SteppedOn(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void FireDamage(float Damage);
	void Ignite(float Fuel);
	void Microwave();
	void ReceivedPhyiscsDamage(float Damage, const struct FHitResult& Hot);
	void PlayerHandUse_RMB(class AMainPlayer_C* Player);
	void PlayerHandUse_LMB(class AMainPlayer_C* Player);
	void Exploded(float Damage, const struct FVector& Location);
	void ExtinguishFire();
	void PlayerHandRelease_RMB(class AMainPlayer_C* Player);
	void PlayerHandRelease_LMB(class AMainPlayer_C* Player);
	void ReceiveTick(float DeltaSeconds);
	void PlayerR(class AMainPlayer_C* Player);
	void PlayerHold(class AMainPlayer_C* Player);
	void PlayerUnequip(class AMainPlayer_C* Player);
	void UpdateStrAgl();
	void DamageByPlayer(class AMainPlayer_C* Player, const struct FHitResult& Hit, float Damage);
	void Thrown(class AMainPlayer_C* Player);
	void broken_fire();
	void broken();
	void SendName(class FName Param_Name);
	void Kicked(bool Kick);
	void Player_use(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void DriveDetached();
	void HookTension(class AHook_C* Hook);
	void CleanSponge(float Clean, class AMainPlayer_C* Player);
	void Crafted();
	void Hooked(class AHook_C* Hook);
	void AttemptIgnite();
	void PlayerUsedOn(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void Slice(bool Clean);
	void bitten();
	void ReachedByExplosion(const struct FVector& Location, float Damage);
	void PlayerLookAway(class AMainPlayer_C* Player);
	void Stepped(float Volume);
	void ActionName(class AMainPlayer_C* Player, const struct FHitResult& Hit, const class FString& Param_Name);
	void AccumulateTemperature(float Temperature, float Param_Speed);
	void AddTemperature(float Temperature);
	void MicrowaveElec();
	void PlayerHandAnyKey(class AMainPlayer_C* Player, const struct FKey& Key, bool Pressed);
	void PlayerHandMouse(class AMainPlayer_C* Player, const struct FVector2D& Mouse);
	void UserConstructionScript();
	void SetSpeed();
	void TryAttach(bool* Attached);
	struct FRotator GetRot(bool B);
	void CanTick();
	void SetWall();
	void LandedOn(class AMainPlayer_C* Player, bool* IgnoreFallDamage);
	void CanBePutInContainer(bool* Return);
	void AsProp(class AProp_C** Return);
	void CanPickup(bool* Return);
	void NoRespawn(bool Param_NoRespawn, bool* Return);
	void LookAt(class AMainPlayer_C* Player, const struct FHitResult& Hit, bool* Return, class FString* Text, class UPrimitiveComponent** boundObjectReplace, uint8* Number);
	void IsButtonUsed(bool* Failed);
	void GetPriceMultiplier(float* PriceMult);
	void SkipRadial(bool* Skip);
	void GascanFuel(class AProp_gascan_C* Gascan, bool* Fueled);
	void GetActionOptions(class AMainPlayer_C* Player, class UPrimitiveComponent* Component, class AActor* Actor, TArray<class FString>* Options, TArray<Enum_interactionActions>* Options_enum, TArray<class FText>* OptionsNamesOverlay, uint8* Number);
	void SetPath(const TArray<struct FVector>& Path, bool* Return);
	void GetOnlyKey(class FString* Key);
	void ProcessKeys(bool* Return);
	void CanBeUsedHold(bool* Return);
	void GetKey(class FString* Key);
	void ToolboxFix(class AProp_toolbox_C* Toolbox, bool* Return);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"conveyor_turnR_2_C">();
	}
	static class AConveyor_turnR_2_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AConveyor_turnR_2_C>();
	}
};
static_assert(alignof(AConveyor_turnR_2_C) == 0x000008, "Wrong alignment on AConveyor_turnR_2_C");
static_assert(sizeof(AConveyor_turnR_2_C) == 0x000280, "Wrong size on AConveyor_turnR_2_C");
static_assert(offsetof(AConveyor_turnR_2_C, UberGraphFrame) == 0x000220, "Member 'AConveyor_turnR_2_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AConveyor_turnR_2_C, Wall) == 0x000228, "Member 'AConveyor_turnR_2_C::Wall' has a wrong offset!");
static_assert(offsetof(AConveyor_turnR_2_C, Attach_a) == 0x000230, "Member 'AConveyor_turnR_2_C::Attach_a' has a wrong offset!");
static_assert(offsetof(AConveyor_turnR_2_C, Attach_b) == 0x000238, "Member 'AConveyor_turnR_2_C::Attach_b' has a wrong offset!");
static_assert(offsetof(AConveyor_turnR_2_C, Box) == 0x000240, "Member 'AConveyor_turnR_2_C::Box' has a wrong offset!");
static_assert(offsetof(AConveyor_turnR_2_C, ArrowDir) == 0x000248, "Member 'AConveyor_turnR_2_C::ArrowDir' has a wrong offset!");
static_assert(offsetof(AConveyor_turnR_2_C, Billboard) == 0x000250, "Member 'AConveyor_turnR_2_C::Billboard' has a wrong offset!");
static_assert(offsetof(AConveyor_turnR_2_C, Cube) == 0x000258, "Member 'AConveyor_turnR_2_C::Cube' has a wrong offset!");
static_assert(offsetof(AConveyor_turnR_2_C, Speed) == 0x000260, "Member 'AConveyor_turnR_2_C::Speed' has a wrong offset!");
static_assert(offsetof(AConveyor_turnR_2_C, Rot) == 0x000264, "Member 'AConveyor_turnR_2_C::Rot' has a wrong offset!");
static_assert(offsetof(AConveyor_turnR_2_C, Prev) == 0x000270, "Member 'AConveyor_turnR_2_C::Prev' has a wrong offset!");
static_assert(offsetof(AConveyor_turnR_2_C, DontCheck) == 0x00027C, "Member 'AConveyor_turnR_2_C::DontCheck' has a wrong offset!");
static_assert(offsetof(AConveyor_turnR_2_C, Dir) == 0x00027D, "Member 'AConveyor_turnR_2_C::Dir' has a wrong offset!");
static_assert(offsetof(AConveyor_turnR_2_C, HasWall) == 0x00027E, "Member 'AConveyor_turnR_2_C::HasWall' has a wrong offset!");

}

