#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: bs

#include "Basic.hpp"

#include "Enum_interactionActions_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function bs.bs_C.getPriceMultiplier
// 0x0004 (0x0004 - 0x0000)
struct bs_C_GetPriceMultiplier final
{
public:
	float                                         PriceMult;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(bs_C_GetPriceMultiplier) == 0x000004, "Wrong alignment on bs_C_GetPriceMultiplier");
static_assert(sizeof(bs_C_GetPriceMultiplier) == 0x000004, "Wrong size on bs_C_GetPriceMultiplier");
static_assert(offsetof(bs_C_GetPriceMultiplier, PriceMult) == 0x000000, "Member 'bs_C_GetPriceMultiplier::PriceMult' has a wrong offset!");

// Function bs.bs_C.skipRadial
// 0x0001 (0x0001 - 0x0000)
struct bs_C_SkipRadial final
{
public:
	bool                                          Skip;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(bs_C_SkipRadial) == 0x000001, "Wrong alignment on bs_C_SkipRadial");
static_assert(sizeof(bs_C_SkipRadial) == 0x000001, "Wrong size on bs_C_SkipRadial");
static_assert(offsetof(bs_C_SkipRadial, Skip) == 0x000000, "Member 'bs_C_SkipRadial::Skip' has a wrong offset!");

// Function bs.bs_C.gascanFuel
// 0x0010 (0x0010 - 0x0000)
struct bs_C_GascanFuel final
{
public:
	class AProp_gascan_C*                         Gascan;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Fueled;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(bs_C_GascanFuel) == 0x000008, "Wrong alignment on bs_C_GascanFuel");
static_assert(sizeof(bs_C_GascanFuel) == 0x000010, "Wrong size on bs_C_GascanFuel");
static_assert(offsetof(bs_C_GascanFuel, Gascan) == 0x000000, "Member 'bs_C_GascanFuel::Gascan' has a wrong offset!");
static_assert(offsetof(bs_C_GascanFuel, Fueled) == 0x000008, "Member 'bs_C_GascanFuel::Fueled' has a wrong offset!");

// Function bs.bs_C.getActionOptions
// 0x0050 (0x0050 - 0x0000)
struct bs_C_GetActionOptions final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Component;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         Options;                                           // 0x0018(0x0010)(Parm, OutParm)
	TArray<Enum_interactionActions>               Options_enum;                                      // 0x0028(0x0010)(Parm, OutParm)
	TArray<class FText>                           OptionsNamesOverlay;                               // 0x0038(0x0010)(Parm, OutParm)
	uint8                                         Number;                                            // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(bs_C_GetActionOptions) == 0x000008, "Wrong alignment on bs_C_GetActionOptions");
static_assert(sizeof(bs_C_GetActionOptions) == 0x000050, "Wrong size on bs_C_GetActionOptions");
static_assert(offsetof(bs_C_GetActionOptions, Player) == 0x000000, "Member 'bs_C_GetActionOptions::Player' has a wrong offset!");
static_assert(offsetof(bs_C_GetActionOptions, Component) == 0x000008, "Member 'bs_C_GetActionOptions::Component' has a wrong offset!");
static_assert(offsetof(bs_C_GetActionOptions, Actor) == 0x000010, "Member 'bs_C_GetActionOptions::Actor' has a wrong offset!");
static_assert(offsetof(bs_C_GetActionOptions, Options) == 0x000018, "Member 'bs_C_GetActionOptions::Options' has a wrong offset!");
static_assert(offsetof(bs_C_GetActionOptions, Options_enum) == 0x000028, "Member 'bs_C_GetActionOptions::Options_enum' has a wrong offset!");
static_assert(offsetof(bs_C_GetActionOptions, OptionsNamesOverlay) == 0x000038, "Member 'bs_C_GetActionOptions::OptionsNamesOverlay' has a wrong offset!");
static_assert(offsetof(bs_C_GetActionOptions, Number) == 0x000048, "Member 'bs_C_GetActionOptions::Number' has a wrong offset!");

// Function bs.bs_C.setPath
// 0x0018 (0x0018 - 0x0000)
struct bs_C_SetPath final
{
public:
	TArray<struct FVector>                        Path;                                              // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Return;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(bs_C_SetPath) == 0x000008, "Wrong alignment on bs_C_SetPath");
static_assert(sizeof(bs_C_SetPath) == 0x000018, "Wrong size on bs_C_SetPath");
static_assert(offsetof(bs_C_SetPath, Path) == 0x000000, "Member 'bs_C_SetPath::Path' has a wrong offset!");
static_assert(offsetof(bs_C_SetPath, Return) == 0x000010, "Member 'bs_C_SetPath::Return' has a wrong offset!");

// Function bs.bs_C.toolboxFix
// 0x0010 (0x0010 - 0x0000)
struct bs_C_ToolboxFix final
{
public:
	class AProp_toolbox_C*                        Toolbox;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(bs_C_ToolboxFix) == 0x000008, "Wrong alignment on bs_C_ToolboxFix");
static_assert(sizeof(bs_C_ToolboxFix) == 0x000010, "Wrong size on bs_C_ToolboxFix");
static_assert(offsetof(bs_C_ToolboxFix, Toolbox) == 0x000000, "Member 'bs_C_ToolboxFix::Toolbox' has a wrong offset!");
static_assert(offsetof(bs_C_ToolboxFix, Return) == 0x000008, "Member 'bs_C_ToolboxFix::Return' has a wrong offset!");

// Function bs.bs_C.GetKey
// 0x0010 (0x0010 - 0x0000)
struct bs_C_GetKey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(bs_C_GetKey) == 0x000008, "Wrong alignment on bs_C_GetKey");
static_assert(sizeof(bs_C_GetKey) == 0x000010, "Wrong size on bs_C_GetKey");
static_assert(offsetof(bs_C_GetKey, Key) == 0x000000, "Member 'bs_C_GetKey::Key' has a wrong offset!");

// Function bs.bs_C.canBeUsedHold
// 0x0001 (0x0001 - 0x0000)
struct bs_C_CanBeUsedHold final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(bs_C_CanBeUsedHold) == 0x000001, "Wrong alignment on bs_C_CanBeUsedHold");
static_assert(sizeof(bs_C_CanBeUsedHold) == 0x000001, "Wrong size on bs_C_CanBeUsedHold");
static_assert(offsetof(bs_C_CanBeUsedHold, Return) == 0x000000, "Member 'bs_C_CanBeUsedHold::Return' has a wrong offset!");

// Function bs.bs_C.processKeys
// 0x0001 (0x0001 - 0x0000)
struct bs_C_ProcessKeys final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(bs_C_ProcessKeys) == 0x000001, "Wrong alignment on bs_C_ProcessKeys");
static_assert(sizeof(bs_C_ProcessKeys) == 0x000001, "Wrong size on bs_C_ProcessKeys");
static_assert(offsetof(bs_C_ProcessKeys, Return) == 0x000000, "Member 'bs_C_ProcessKeys::Return' has a wrong offset!");

// Function bs.bs_C.getOnlyKey
// 0x0010 (0x0010 - 0x0000)
struct bs_C_GetOnlyKey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(bs_C_GetOnlyKey) == 0x000008, "Wrong alignment on bs_C_GetOnlyKey");
static_assert(sizeof(bs_C_GetOnlyKey) == 0x000010, "Wrong size on bs_C_GetOnlyKey");
static_assert(offsetof(bs_C_GetOnlyKey, Key) == 0x000000, "Member 'bs_C_GetOnlyKey::Key' has a wrong offset!");

// Function bs.bs_C.Decal
// 0x0038 (0x0038 - 0x0000)
struct bs_C_Decal final
{
public:
	class UMaterialInterface*                     DecalMaterial;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x0014(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                DecalSize;                                         // 0x0020(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDecalComponent*                        CallFunc_SpawnDecalAttached_ReturnValue;           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(bs_C_Decal) == 0x000008, "Wrong alignment on bs_C_Decal");
static_assert(sizeof(bs_C_Decal) == 0x000038, "Wrong size on bs_C_Decal");
static_assert(offsetof(bs_C_Decal, DecalMaterial) == 0x000000, "Member 'bs_C_Decal::DecalMaterial' has a wrong offset!");
static_assert(offsetof(bs_C_Decal, Location) == 0x000008, "Member 'bs_C_Decal::Location' has a wrong offset!");
static_assert(offsetof(bs_C_Decal, Rotation) == 0x000014, "Member 'bs_C_Decal::Rotation' has a wrong offset!");
static_assert(offsetof(bs_C_Decal, DecalSize) == 0x000020, "Member 'bs_C_Decal::DecalSize' has a wrong offset!");
static_assert(offsetof(bs_C_Decal, CallFunc_SpawnDecalAttached_ReturnValue) == 0x000030, "Member 'bs_C_Decal::CallFunc_SpawnDecalAttached_ReturnValue' has a wrong offset!");

// Function bs.bs_C.getSym
// 0x0050 (0x0050 - 0x0000)
struct bs_C_GetSym final
{
public:
	class FString                                 S;                                                 // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Output;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         A;                                                 // 0x0020(0x0010)(Edit, BlueprintVisible)
	TArray<class FString>                         K2Node_MakeArray_Array;                            // 0x0030(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(bs_C_GetSym) == 0x000008, "Wrong alignment on bs_C_GetSym");
static_assert(sizeof(bs_C_GetSym) == 0x000050, "Wrong size on bs_C_GetSym");
static_assert(offsetof(bs_C_GetSym, S) == 0x000000, "Member 'bs_C_GetSym::S' has a wrong offset!");
static_assert(offsetof(bs_C_GetSym, Output) == 0x000010, "Member 'bs_C_GetSym::Output' has a wrong offset!");
static_assert(offsetof(bs_C_GetSym, ReturnValue) == 0x000018, "Member 'bs_C_GetSym::ReturnValue' has a wrong offset!");
static_assert(offsetof(bs_C_GetSym, A) == 0x000020, "Member 'bs_C_GetSym::A' has a wrong offset!");
static_assert(offsetof(bs_C_GetSym, K2Node_MakeArray_Array) == 0x000030, "Member 'bs_C_GetSym::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(bs_C_GetSym, CallFunc_Array_Find_ReturnValue) == 0x000040, "Member 'bs_C_GetSym::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(bs_C_GetSym, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000044, "Member 'bs_C_GetSym::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(bs_C_GetSym, CallFunc_Array_Get_Item) == 0x000048, "Member 'bs_C_GetSym::CallFunc_Array_Get_Item' has a wrong offset!");

// Function bs.bs_C.prepareMats
// 0x0030 (0x0030 - 0x0000)
struct bs_C_PrepareMats final
{
public:
	int32                                         Temp_int_Variable;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               K2Node_LowEntry_LocalVariable_Value__Object;       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(bs_C_PrepareMats) == 0x000008, "Wrong alignment on bs_C_PrepareMats");
static_assert(sizeof(bs_C_PrepareMats) == 0x000030, "Wrong size on bs_C_PrepareMats");
static_assert(offsetof(bs_C_PrepareMats, Temp_int_Variable) == 0x000000, "Member 'bs_C_PrepareMats::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(bs_C_PrepareMats, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000008, "Member 'bs_C_PrepareMats::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(bs_C_PrepareMats, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000010, "Member 'bs_C_PrepareMats::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(bs_C_PrepareMats, K2Node_LowEntry_LocalVariable_Value__Object) == 0x000018, "Member 'bs_C_PrepareMats::K2Node_LowEntry_LocalVariable_Value__Object' has a wrong offset!");
static_assert(offsetof(bs_C_PrepareMats, CallFunc_Array_Add_ReturnValue) == 0x000020, "Member 'bs_C_PrepareMats::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(bs_C_PrepareMats, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000024, "Member 'bs_C_PrepareMats::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(bs_C_PrepareMats, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'bs_C_PrepareMats::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function bs.bs_C.Loc
// 0x00C4 (0x00C4 - 0x0000)
struct bs_C_Loc final
{
public:
	struct FVector                                CallFunc_RandomUnitVector_ReturnValue;             // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult; // 0x003C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(bs_C_Loc) == 0x000004, "Wrong alignment on bs_C_Loc");
static_assert(sizeof(bs_C_Loc) == 0x0000C4, "Wrong size on bs_C_Loc");
static_assert(offsetof(bs_C_Loc, CallFunc_RandomUnitVector_ReturnValue) == 0x000000, "Member 'bs_C_Loc::CallFunc_RandomUnitVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(bs_C_Loc, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00000C, "Member 'bs_C_Loc::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(bs_C_Loc, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000018, "Member 'bs_C_Loc::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(bs_C_Loc, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000024, "Member 'bs_C_Loc::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(bs_C_Loc, CallFunc_Add_VectorVector_ReturnValue) == 0x000030, "Member 'bs_C_Loc::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(bs_C_Loc, CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult) == 0x00003C, "Member 'bs_C_Loc::CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult' has a wrong offset!");

// Function bs.bs_C.UserConstructionScript
// 0x009C (0x009C - 0x0000)
struct bs_C_UserConstructionScript final
{
public:
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x0014(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(bs_C_UserConstructionScript) == 0x000004, "Wrong alignment on bs_C_UserConstructionScript");
static_assert(sizeof(bs_C_UserConstructionScript) == 0x00009C, "Wrong size on bs_C_UserConstructionScript");
static_assert(offsetof(bs_C_UserConstructionScript, CallFunc_RandomFloatInRange_ReturnValue) == 0x000000, "Member 'bs_C_UserConstructionScript::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(bs_C_UserConstructionScript, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x000004, "Member 'bs_C_UserConstructionScript::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(bs_C_UserConstructionScript, CallFunc_MakeRotator_ReturnValue) == 0x000008, "Member 'bs_C_UserConstructionScript::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(bs_C_UserConstructionScript, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x000014, "Member 'bs_C_UserConstructionScript::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");

// Function bs.bs_C.BndEvt__StaticMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature
// 0x00B0 (0x00B0 - 0x0000)
struct bs_C_BndEvt__StaticMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(bs_C_BndEvt__StaticMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature) == 0x000008, "Wrong alignment on bs_C_BndEvt__StaticMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature");
static_assert(sizeof(bs_C_BndEvt__StaticMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature) == 0x0000B0, "Wrong size on bs_C_BndEvt__StaticMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature");
static_assert(offsetof(bs_C_BndEvt__StaticMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, HitComponent) == 0x000000, "Member 'bs_C_BndEvt__StaticMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::HitComponent' has a wrong offset!");
static_assert(offsetof(bs_C_BndEvt__StaticMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'bs_C_BndEvt__StaticMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(bs_C_BndEvt__StaticMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'bs_C_BndEvt__StaticMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(bs_C_BndEvt__StaticMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, NormalImpulse) == 0x000018, "Member 'bs_C_BndEvt__StaticMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::NormalImpulse' has a wrong offset!");
static_assert(offsetof(bs_C_BndEvt__StaticMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, Hit) == 0x000024, "Member 'bs_C_BndEvt__StaticMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::Hit' has a wrong offset!");

// Function bs.bs_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct bs_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(bs_C_ReceiveTick) == 0x000004, "Wrong alignment on bs_C_ReceiveTick");
static_assert(sizeof(bs_C_ReceiveTick) == 0x000004, "Wrong size on bs_C_ReceiveTick");
static_assert(offsetof(bs_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'bs_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function bs.bs_C.hookTension
// 0x0008 (0x0008 - 0x0000)
struct bs_C_HookTension final
{
public:
	class AHook_C*                                Hook;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(bs_C_HookTension) == 0x000008, "Wrong alignment on bs_C_HookTension");
static_assert(sizeof(bs_C_HookTension) == 0x000008, "Wrong size on bs_C_HookTension");
static_assert(offsetof(bs_C_HookTension, Hook) == 0x000000, "Member 'bs_C_HookTension::Hook' has a wrong offset!");

// Function bs.bs_C.cleanSponge
// 0x0010 (0x0010 - 0x0000)
struct bs_C_CleanSponge final
{
public:
	float                                         Clean;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          Player;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(bs_C_CleanSponge) == 0x000008, "Wrong alignment on bs_C_CleanSponge");
static_assert(sizeof(bs_C_CleanSponge) == 0x000010, "Wrong size on bs_C_CleanSponge");
static_assert(offsetof(bs_C_CleanSponge, Clean) == 0x000000, "Member 'bs_C_CleanSponge::Clean' has a wrong offset!");
static_assert(offsetof(bs_C_CleanSponge, Player) == 0x000008, "Member 'bs_C_CleanSponge::Player' has a wrong offset!");

// Function bs.bs_C.hooked
// 0x0008 (0x0008 - 0x0000)
struct bs_C_Hooked final
{
public:
	class AHook_C*                                Hook;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(bs_C_Hooked) == 0x000008, "Wrong alignment on bs_C_Hooked");
static_assert(sizeof(bs_C_Hooked) == 0x000008, "Wrong size on bs_C_Hooked");
static_assert(offsetof(bs_C_Hooked, Hook) == 0x000000, "Member 'bs_C_Hooked::Hook' has a wrong offset!");

// Function bs.bs_C.playerUsedOn
// 0x0090 (0x0090 - 0x0000)
struct bs_C_PlayerUsedOn final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(bs_C_PlayerUsedOn) == 0x000008, "Wrong alignment on bs_C_PlayerUsedOn");
static_assert(sizeof(bs_C_PlayerUsedOn) == 0x000090, "Wrong size on bs_C_PlayerUsedOn");
static_assert(offsetof(bs_C_PlayerUsedOn, Player) == 0x000000, "Member 'bs_C_PlayerUsedOn::Player' has a wrong offset!");
static_assert(offsetof(bs_C_PlayerUsedOn, Hit) == 0x000008, "Member 'bs_C_PlayerUsedOn::Hit' has a wrong offset!");

// Function bs.bs_C.slice
// 0x0001 (0x0001 - 0x0000)
struct bs_C_Slice final
{
public:
	bool                                          Clean;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(bs_C_Slice) == 0x000001, "Wrong alignment on bs_C_Slice");
static_assert(sizeof(bs_C_Slice) == 0x000001, "Wrong size on bs_C_Slice");
static_assert(offsetof(bs_C_Slice, Clean) == 0x000000, "Member 'bs_C_Slice::Clean' has a wrong offset!");

// Function bs.bs_C.leaveWaterOrigin
// 0x0008 (0x0008 - 0x0000)
struct bs_C_LeaveWaterOrigin final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(bs_C_LeaveWaterOrigin) == 0x000008, "Wrong alignment on bs_C_LeaveWaterOrigin");
static_assert(sizeof(bs_C_LeaveWaterOrigin) == 0x000008, "Wrong size on bs_C_LeaveWaterOrigin");
static_assert(offsetof(bs_C_LeaveWaterOrigin, Water) == 0x000000, "Member 'bs_C_LeaveWaterOrigin::Water' has a wrong offset!");

// Function bs.bs_C.reachedByExplosion
// 0x0010 (0x0010 - 0x0000)
struct bs_C_ReachedByExplosion final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(bs_C_ReachedByExplosion) == 0x000004, "Wrong alignment on bs_C_ReachedByExplosion");
static_assert(sizeof(bs_C_ReachedByExplosion) == 0x000010, "Wrong size on bs_C_ReachedByExplosion");
static_assert(offsetof(bs_C_ReachedByExplosion, Location) == 0x000000, "Member 'bs_C_ReachedByExplosion::Location' has a wrong offset!");
static_assert(offsetof(bs_C_ReachedByExplosion, Damage) == 0x00000C, "Member 'bs_C_ReachedByExplosion::Damage' has a wrong offset!");

// Function bs.bs_C.enterWaterOrigin
// 0x0008 (0x0008 - 0x0000)
struct bs_C_EnterWaterOrigin final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(bs_C_EnterWaterOrigin) == 0x000008, "Wrong alignment on bs_C_EnterWaterOrigin");
static_assert(sizeof(bs_C_EnterWaterOrigin) == 0x000008, "Wrong size on bs_C_EnterWaterOrigin");
static_assert(offsetof(bs_C_EnterWaterOrigin, Water) == 0x000000, "Member 'bs_C_EnterWaterOrigin::Water' has a wrong offset!");

// Function bs.bs_C.playerLookAway
// 0x0008 (0x0008 - 0x0000)
struct bs_C_PlayerLookAway final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(bs_C_PlayerLookAway) == 0x000008, "Wrong alignment on bs_C_PlayerLookAway");
static_assert(sizeof(bs_C_PlayerLookAway) == 0x000008, "Wrong size on bs_C_PlayerLookAway");
static_assert(offsetof(bs_C_PlayerLookAway, Player) == 0x000000, "Member 'bs_C_PlayerLookAway::Player' has a wrong offset!");

// Function bs.bs_C.stepped
// 0x0004 (0x0004 - 0x0000)
struct bs_C_Stepped final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(bs_C_Stepped) == 0x000004, "Wrong alignment on bs_C_Stepped");
static_assert(sizeof(bs_C_Stepped) == 0x000004, "Wrong size on bs_C_Stepped");
static_assert(offsetof(bs_C_Stepped, Volume) == 0x000000, "Member 'bs_C_Stepped::Volume' has a wrong offset!");

// Function bs.bs_C.ActionName
// 0x00A0 (0x00A0 - 0x0000)
struct bs_C_ActionName final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class FString                                 Param_Name;                                        // 0x0090(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(bs_C_ActionName) == 0x000008, "Wrong alignment on bs_C_ActionName");
static_assert(sizeof(bs_C_ActionName) == 0x0000A0, "Wrong size on bs_C_ActionName");
static_assert(offsetof(bs_C_ActionName, Player) == 0x000000, "Member 'bs_C_ActionName::Player' has a wrong offset!");
static_assert(offsetof(bs_C_ActionName, Hit) == 0x000008, "Member 'bs_C_ActionName::Hit' has a wrong offset!");
static_assert(offsetof(bs_C_ActionName, Param_Name) == 0x000090, "Member 'bs_C_ActionName::Param_Name' has a wrong offset!");

// Function bs.bs_C.accumulateTemperature
// 0x0008 (0x0008 - 0x0000)
struct bs_C_AccumulateTemperature final
{
public:
	float                                         Temperature;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(bs_C_AccumulateTemperature) == 0x000004, "Wrong alignment on bs_C_AccumulateTemperature");
static_assert(sizeof(bs_C_AccumulateTemperature) == 0x000008, "Wrong size on bs_C_AccumulateTemperature");
static_assert(offsetof(bs_C_AccumulateTemperature, Temperature) == 0x000000, "Member 'bs_C_AccumulateTemperature::Temperature' has a wrong offset!");
static_assert(offsetof(bs_C_AccumulateTemperature, Speed) == 0x000004, "Member 'bs_C_AccumulateTemperature::Speed' has a wrong offset!");

// Function bs.bs_C.addTemperature
// 0x0004 (0x0004 - 0x0000)
struct bs_C_AddTemperature final
{
public:
	float                                         Temperature;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(bs_C_AddTemperature) == 0x000004, "Wrong alignment on bs_C_AddTemperature");
static_assert(sizeof(bs_C_AddTemperature) == 0x000004, "Wrong size on bs_C_AddTemperature");
static_assert(offsetof(bs_C_AddTemperature, Temperature) == 0x000000, "Member 'bs_C_AddTemperature::Temperature' has a wrong offset!");

// Function bs.bs_C.playerHandAnyKey
// 0x0028 (0x0028 - 0x0000)
struct bs_C_PlayerHandAnyKey final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   Key;                                               // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Pressed;                                           // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(bs_C_PlayerHandAnyKey) == 0x000008, "Wrong alignment on bs_C_PlayerHandAnyKey");
static_assert(sizeof(bs_C_PlayerHandAnyKey) == 0x000028, "Wrong size on bs_C_PlayerHandAnyKey");
static_assert(offsetof(bs_C_PlayerHandAnyKey, Player) == 0x000000, "Member 'bs_C_PlayerHandAnyKey::Player' has a wrong offset!");
static_assert(offsetof(bs_C_PlayerHandAnyKey, Key) == 0x000008, "Member 'bs_C_PlayerHandAnyKey::Key' has a wrong offset!");
static_assert(offsetof(bs_C_PlayerHandAnyKey, Pressed) == 0x000020, "Member 'bs_C_PlayerHandAnyKey::Pressed' has a wrong offset!");

// Function bs.bs_C.playerHandMouse
// 0x0010 (0x0010 - 0x0000)
struct bs_C_PlayerHandMouse final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Mouse;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(bs_C_PlayerHandMouse) == 0x000008, "Wrong alignment on bs_C_PlayerHandMouse");
static_assert(sizeof(bs_C_PlayerHandMouse) == 0x000010, "Wrong size on bs_C_PlayerHandMouse");
static_assert(offsetof(bs_C_PlayerHandMouse, Player) == 0x000000, "Member 'bs_C_PlayerHandMouse::Player' has a wrong offset!");
static_assert(offsetof(bs_C_PlayerHandMouse, Mouse) == 0x000008, "Member 'bs_C_PlayerHandMouse::Mouse' has a wrong offset!");

// Function bs.bs_C.playerHandMouseWheel
// 0x0010 (0x0010 - 0x0000)
struct bs_C_PlayerHandMouseWheel final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WheelDelta;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(bs_C_PlayerHandMouseWheel) == 0x000008, "Wrong alignment on bs_C_PlayerHandMouseWheel");
static_assert(sizeof(bs_C_PlayerHandMouseWheel) == 0x000010, "Wrong size on bs_C_PlayerHandMouseWheel");
static_assert(offsetof(bs_C_PlayerHandMouseWheel, Player) == 0x000000, "Member 'bs_C_PlayerHandMouseWheel::Player' has a wrong offset!");
static_assert(offsetof(bs_C_PlayerHandMouseWheel, WheelDelta) == 0x000008, "Member 'bs_C_PlayerHandMouseWheel::WheelDelta' has a wrong offset!");

// Function bs.bs_C.playerHandRelease_LMB
// 0x0008 (0x0008 - 0x0000)
struct bs_C_PlayerHandRelease_LMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(bs_C_PlayerHandRelease_LMB) == 0x000008, "Wrong alignment on bs_C_PlayerHandRelease_LMB");
static_assert(sizeof(bs_C_PlayerHandRelease_LMB) == 0x000008, "Wrong size on bs_C_PlayerHandRelease_LMB");
static_assert(offsetof(bs_C_PlayerHandRelease_LMB, Player) == 0x000000, "Member 'bs_C_PlayerHandRelease_LMB::Player' has a wrong offset!");

// Function bs.bs_C.playerHandRelease_RMB
// 0x0008 (0x0008 - 0x0000)
struct bs_C_PlayerHandRelease_RMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(bs_C_PlayerHandRelease_RMB) == 0x000008, "Wrong alignment on bs_C_PlayerHandRelease_RMB");
static_assert(sizeof(bs_C_PlayerHandRelease_RMB) == 0x000008, "Wrong size on bs_C_PlayerHandRelease_RMB");
static_assert(offsetof(bs_C_PlayerHandRelease_RMB, Player) == 0x000000, "Member 'bs_C_PlayerHandRelease_RMB::Player' has a wrong offset!");

// Function bs.bs_C.exploded
// 0x0010 (0x0010 - 0x0000)
struct bs_C_Exploded final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(bs_C_Exploded) == 0x000004, "Wrong alignment on bs_C_Exploded");
static_assert(sizeof(bs_C_Exploded) == 0x000010, "Wrong size on bs_C_Exploded");
static_assert(offsetof(bs_C_Exploded, Damage) == 0x000000, "Member 'bs_C_Exploded::Damage' has a wrong offset!");
static_assert(offsetof(bs_C_Exploded, Location) == 0x000004, "Member 'bs_C_Exploded::Location' has a wrong offset!");

// Function bs.bs_C.playerHandUse_LMB
// 0x0008 (0x0008 - 0x0000)
struct bs_C_PlayerHandUse_LMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(bs_C_PlayerHandUse_LMB) == 0x000008, "Wrong alignment on bs_C_PlayerHandUse_LMB");
static_assert(sizeof(bs_C_PlayerHandUse_LMB) == 0x000008, "Wrong size on bs_C_PlayerHandUse_LMB");
static_assert(offsetof(bs_C_PlayerHandUse_LMB, Player) == 0x000000, "Member 'bs_C_PlayerHandUse_LMB::Player' has a wrong offset!");

// Function bs.bs_C.playerHandUse_RMB
// 0x0008 (0x0008 - 0x0000)
struct bs_C_PlayerHandUse_RMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(bs_C_PlayerHandUse_RMB) == 0x000008, "Wrong alignment on bs_C_PlayerHandUse_RMB");
static_assert(sizeof(bs_C_PlayerHandUse_RMB) == 0x000008, "Wrong size on bs_C_PlayerHandUse_RMB");
static_assert(offsetof(bs_C_PlayerHandUse_RMB, Player) == 0x000000, "Member 'bs_C_PlayerHandUse_RMB::Player' has a wrong offset!");

// Function bs.bs_C.actionOptionIndex
// 0x0098 (0x0098 - 0x0000)
struct bs_C_ActionOptionIndex final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	Enum_interactionActions                       Action;                                            // 0x0090(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(bs_C_ActionOptionIndex) == 0x000008, "Wrong alignment on bs_C_ActionOptionIndex");
static_assert(sizeof(bs_C_ActionOptionIndex) == 0x000098, "Wrong size on bs_C_ActionOptionIndex");
static_assert(offsetof(bs_C_ActionOptionIndex, Player) == 0x000000, "Member 'bs_C_ActionOptionIndex::Player' has a wrong offset!");
static_assert(offsetof(bs_C_ActionOptionIndex, Hit) == 0x000008, "Member 'bs_C_ActionOptionIndex::Hit' has a wrong offset!");
static_assert(offsetof(bs_C_ActionOptionIndex, Action) == 0x000090, "Member 'bs_C_ActionOptionIndex::Action' has a wrong offset!");

// Function bs.bs_C.receivedPhyiscsDamage
// 0x008C (0x008C - 0x0000)
struct bs_C_ReceivedPhyiscsDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hot;                                               // 0x0004(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(bs_C_ReceivedPhyiscsDamage) == 0x000004, "Wrong alignment on bs_C_ReceivedPhyiscsDamage");
static_assert(sizeof(bs_C_ReceivedPhyiscsDamage) == 0x00008C, "Wrong size on bs_C_ReceivedPhyiscsDamage");
static_assert(offsetof(bs_C_ReceivedPhyiscsDamage, Damage) == 0x000000, "Member 'bs_C_ReceivedPhyiscsDamage::Damage' has a wrong offset!");
static_assert(offsetof(bs_C_ReceivedPhyiscsDamage, Hot) == 0x000004, "Member 'bs_C_ReceivedPhyiscsDamage::Hot' has a wrong offset!");

// Function bs.bs_C.leaveWater
// 0x0008 (0x0008 - 0x0000)
struct bs_C_LeaveWater final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(bs_C_LeaveWater) == 0x000008, "Wrong alignment on bs_C_LeaveWater");
static_assert(sizeof(bs_C_LeaveWater) == 0x000008, "Wrong size on bs_C_LeaveWater");
static_assert(offsetof(bs_C_LeaveWater, Water) == 0x000000, "Member 'bs_C_LeaveWater::Water' has a wrong offset!");

// Function bs.bs_C.enterWater
// 0x0008 (0x0008 - 0x0000)
struct bs_C_EnterWater final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(bs_C_EnterWater) == 0x000008, "Wrong alignment on bs_C_EnterWater");
static_assert(sizeof(bs_C_EnterWater) == 0x000008, "Wrong size on bs_C_EnterWater");
static_assert(offsetof(bs_C_EnterWater, Water) == 0x000000, "Member 'bs_C_EnterWater::Water' has a wrong offset!");

// Function bs.bs_C.ignite
// 0x0004 (0x0004 - 0x0000)
struct bs_C_Ignite final
{
public:
	float                                         Fuel;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(bs_C_Ignite) == 0x000004, "Wrong alignment on bs_C_Ignite");
static_assert(sizeof(bs_C_Ignite) == 0x000004, "Wrong size on bs_C_Ignite");
static_assert(offsetof(bs_C_Ignite, Fuel) == 0x000000, "Member 'bs_C_Ignite::Fuel' has a wrong offset!");

// Function bs.bs_C.ImpactDamage
// 0x00A8 (0x00A8 - 0x0000)
struct bs_C_ImpactDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0004(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0090(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Impact;                                            // 0x0098(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(bs_C_ImpactDamage) == 0x000008, "Wrong alignment on bs_C_ImpactDamage");
static_assert(sizeof(bs_C_ImpactDamage) == 0x0000A8, "Wrong size on bs_C_ImpactDamage");
static_assert(offsetof(bs_C_ImpactDamage, Damage) == 0x000000, "Member 'bs_C_ImpactDamage::Damage' has a wrong offset!");
static_assert(offsetof(bs_C_ImpactDamage, Hit) == 0x000004, "Member 'bs_C_ImpactDamage::Hit' has a wrong offset!");
static_assert(offsetof(bs_C_ImpactDamage, Actor) == 0x000090, "Member 'bs_C_ImpactDamage::Actor' has a wrong offset!");
static_assert(offsetof(bs_C_ImpactDamage, Impact) == 0x000098, "Member 'bs_C_ImpactDamage::Impact' has a wrong offset!");

// Function bs.bs_C.fireDamage
// 0x0004 (0x0004 - 0x0000)
struct bs_C_FireDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(bs_C_FireDamage) == 0x000004, "Wrong alignment on bs_C_FireDamage");
static_assert(sizeof(bs_C_FireDamage) == 0x000004, "Wrong size on bs_C_FireDamage");
static_assert(offsetof(bs_C_FireDamage, Damage) == 0x000000, "Member 'bs_C_FireDamage::Damage' has a wrong offset!");

// Function bs.bs_C.steppedOn
// 0x0090 (0x0090 - 0x0000)
struct bs_C_SteppedOn final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(bs_C_SteppedOn) == 0x000008, "Wrong alignment on bs_C_SteppedOn");
static_assert(sizeof(bs_C_SteppedOn) == 0x000090, "Wrong size on bs_C_SteppedOn");
static_assert(offsetof(bs_C_SteppedOn, Player) == 0x000000, "Member 'bs_C_SteppedOn::Player' has a wrong offset!");
static_assert(offsetof(bs_C_SteppedOn, Hit) == 0x000008, "Member 'bs_C_SteppedOn::Hit' has a wrong offset!");

// Function bs.bs_C.setKey
// 0x0010 (0x0010 - 0x0000)
struct bs_C_SetKey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(bs_C_SetKey) == 0x000008, "Wrong alignment on bs_C_SetKey");
static_assert(sizeof(bs_C_SetKey) == 0x000010, "Wrong size on bs_C_SetKey");
static_assert(offsetof(bs_C_SetKey, Key) == 0x000000, "Member 'bs_C_SetKey::Key' has a wrong offset!");

// Function bs.bs_C.setPropProps
// 0x0003 (0x0003 - 0x0000)
struct bs_C_SetPropProps final
{
public:
	bool                                          Static;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Frozen;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Active;                                            // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(bs_C_SetPropProps) == 0x000001, "Wrong alignment on bs_C_SetPropProps");
static_assert(sizeof(bs_C_SetPropProps) == 0x000003, "Wrong size on bs_C_SetPropProps");
static_assert(offsetof(bs_C_SetPropProps, Static) == 0x000000, "Member 'bs_C_SetPropProps::Static' has a wrong offset!");
static_assert(offsetof(bs_C_SetPropProps, Frozen) == 0x000001, "Member 'bs_C_SetPropProps::Frozen' has a wrong offset!");
static_assert(offsetof(bs_C_SetPropProps, Active) == 0x000002, "Member 'bs_C_SetPropProps::Active' has a wrong offset!");

// Function bs.bs_C.virus
// 0x0001 (0x0001 - 0x0000)
struct bs_C_Virus final
{
public:
	bool                                          Activate;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(bs_C_Virus) == 0x000001, "Wrong alignment on bs_C_Virus");
static_assert(sizeof(bs_C_Virus) == 0x000001, "Wrong size on bs_C_Virus");
static_assert(offsetof(bs_C_Virus, Activate) == 0x000000, "Member 'bs_C_Virus::Activate' has a wrong offset!");

// Function bs.bs_C.addDamage
// 0x00A8 (0x00A8 - 0x0000)
struct bs_C_AddDamage final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x000C(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                Impact;                                            // 0x0094(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipSetting;                                       // 0x00A0(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(bs_C_AddDamage) == 0x000008, "Wrong alignment on bs_C_AddDamage");
static_assert(sizeof(bs_C_AddDamage) == 0x0000A8, "Wrong size on bs_C_AddDamage");
static_assert(offsetof(bs_C_AddDamage, Actor) == 0x000000, "Member 'bs_C_AddDamage::Actor' has a wrong offset!");
static_assert(offsetof(bs_C_AddDamage, Damage) == 0x000008, "Member 'bs_C_AddDamage::Damage' has a wrong offset!");
static_assert(offsetof(bs_C_AddDamage, Hit) == 0x00000C, "Member 'bs_C_AddDamage::Hit' has a wrong offset!");
static_assert(offsetof(bs_C_AddDamage, Impact) == 0x000094, "Member 'bs_C_AddDamage::Impact' has a wrong offset!");
static_assert(offsetof(bs_C_AddDamage, SkipSetting) == 0x0000A0, "Member 'bs_C_AddDamage::SkipSetting' has a wrong offset!");

// Function bs.bs_C.ExecuteUbergraph_bs
// 0x0728 (0x0728 - 0x0000)
struct bs_C_ExecuteUbergraph_bs final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue_1; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 CallFunc_CreateRenderTarget2D_ReturnValue;         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RandomUnitVector_ReturnValue;             // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHook_C*                                K2Node_Event_hook_1;                               // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_clean_1;                              // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_12;                            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHook_C*                                K2Node_Event_hook;                                 // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_11;                            // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_5;                                // 0x0068(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          K2Node_Event_clean;                                // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AWaterVolume_C*                         K2Node_Event_water_3;                              // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_location_1;                           // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_5;                             // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWaterVolume_C*                         K2Node_Event_water_2;                              // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_10;                            // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_volume;                               // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_9;                             // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_4;                                // 0x0130(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class FString                                 K2Node_Event_name;                                 // 0x01B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         K2Node_Event_temperature_1;                        // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_speed;                                // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_temperature;                          // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D4[0x4];                                      // 0x01D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_HitComponent;           // 0x01D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x01E8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_ComponentBoundEvent_NormalImpulse;          // 0x01F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_ComponentBoundEvent_Hit;                    // 0x01FC(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_284[0x4];                                      // 0x0284(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Array_Get_Item;                           // 0x0288(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_getSym_Output;                            // 0x0298(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_getSym_ReturnValue;                       // 0x02A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x02A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A2[0x6];                                      // 0x02A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_8;                             // 0x02A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_Event_key_1;                                // 0x02B0(0x0018)(HasGetValueTypeHash)
	bool                                          K2Node_Event_pressed;                              // 0x02C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C9[0x7];                                      // 0x02C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_7;                             // 0x02D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Event_mouse;                                // 0x02D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x02E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E4[0x4];                                      // 0x02E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_6;                             // 0x02E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_wheelDelta;                           // 0x02F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RandomUnitVectorInConeInDegrees_ReturnValue; // 0x02F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         CallFunc_GetCharacterArrayFromString_ReturnValue;  // 0x0300(0x0010)(ReferenceParm)
	struct FVector                                K2Node_LowEntry_LocalVariable_Value__Object;       // 0x0310(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x031C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x0328(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x0334(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue_1;         // 0x0340(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34C[0x4];                                      // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_5;                             // 0x0350(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_4;                             // 0x0358(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_4;                             // 0x0360(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_location;                             // 0x0364(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_3;                             // 0x0370(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_2;                             // 0x0378(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_1;                             // 0x0380(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_3;                                // 0x0388(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	Enum_interactionActions                       K2Node_Event_action;                               // 0x0410(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_411[0x3];                                      // 0x0411(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_damage_3;                             // 0x0414(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hot;                                  // 0x0418(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AWaterVolume_C*                         K2Node_Event_water_1;                              // 0x04A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWaterVolume_C*                         K2Node_Event_water;                                // 0x04A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_fuel;                                 // 0x04B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_2;                             // 0x04B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_2;                                // 0x04B8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AActor*                                 K2Node_Event_actor_1;                              // 0x0540(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_impact_1;                             // 0x0548(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_1;                             // 0x0554(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player;                               // 0x0558(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_1;                                // 0x0560(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class FString                                 K2Node_Event_key;                                  // 0x05E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_static;                               // 0x05F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_frozen;                               // 0x05F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_active;                               // 0x05FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_activate;                             // 0x05FB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_MakeLiteralFloat_ReturnValue;             // 0x05FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x0600(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue_1;            // 0x060C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_3;       // 0x0618(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_4;       // 0x0624(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotationFromAxes_ReturnValue;         // 0x0630(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_63C[0x4];                                      // 0x063C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_actor;                                // 0x0640(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage;                               // 0x0648(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit;                                  // 0x064C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                K2Node_Event_impact;                               // 0x06D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_skipSetting;                          // 0x06E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E1[0x7];                                      // 0x06E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_DynamicCast_AsMain_Player;                  // 0x06E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x06F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6F1[0x3];                                      // 0x06F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x06F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0700(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x070C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SetVectorLength_ReturnValue;              // 0x0718(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(bs_C_ExecuteUbergraph_bs) == 0x000008, "Wrong alignment on bs_C_ExecuteUbergraph_bs");
static_assert(sizeof(bs_C_ExecuteUbergraph_bs) == 0x000728, "Wrong size on bs_C_ExecuteUbergraph_bs");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, EntryPoint) == 0x000000, "Member 'bs_C_ExecuteUbergraph_bs::EntryPoint' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000008, "Member 'bs_C_ExecuteUbergraph_bs::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, CallFunc_CreateDynamicMaterialInstance_ReturnValue_1) == 0x000010, "Member 'bs_C_ExecuteUbergraph_bs::CallFunc_CreateDynamicMaterialInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, CallFunc_CreateRenderTarget2D_ReturnValue) == 0x000018, "Member 'bs_C_ExecuteUbergraph_bs::CallFunc_CreateRenderTarget2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, CallFunc_RandomUnitVector_ReturnValue) == 0x000020, "Member 'bs_C_ExecuteUbergraph_bs::CallFunc_RandomUnitVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00002C, "Member 'bs_C_ExecuteUbergraph_bs::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_DeltaSeconds) == 0x000038, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_hook_1) == 0x000040, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_hook_1' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_clean_1) == 0x000048, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_clean_1' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_player_12) == 0x000050, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_player_12' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_hook) == 0x000058, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_hook' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_player_11) == 0x000060, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_player_11' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_hit_5) == 0x000068, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_hit_5' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_clean) == 0x0000F0, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_clean' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_water_3) == 0x0000F8, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_water_3' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_location_1) == 0x000100, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_location_1' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_damage_5) == 0x00010C, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_damage_5' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_water_2) == 0x000110, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_water_2' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_player_10) == 0x000118, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_player_10' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_volume) == 0x000120, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_volume' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_player_9) == 0x000128, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_player_9' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_hit_4) == 0x000130, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_hit_4' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_name) == 0x0001B8, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_name' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_temperature_1) == 0x0001C8, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_temperature_1' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_speed) == 0x0001CC, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_speed' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_temperature) == 0x0001D0, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_temperature' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_ComponentBoundEvent_HitComponent) == 0x0001D8, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_ComponentBoundEvent_HitComponent' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_ComponentBoundEvent_OtherActor) == 0x0001E0, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_ComponentBoundEvent_OtherComp) == 0x0001E8, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_ComponentBoundEvent_NormalImpulse) == 0x0001F0, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_ComponentBoundEvent_NormalImpulse' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_ComponentBoundEvent_Hit) == 0x0001FC, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_ComponentBoundEvent_Hit' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, CallFunc_Array_Get_Item) == 0x000288, "Member 'bs_C_ExecuteUbergraph_bs::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, CallFunc_getSym_Output) == 0x000298, "Member 'bs_C_ExecuteUbergraph_bs::CallFunc_getSym_Output' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, CallFunc_getSym_ReturnValue) == 0x0002A0, "Member 'bs_C_ExecuteUbergraph_bs::CallFunc_getSym_ReturnValue' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, CallFunc_Array_IsValidIndex_ReturnValue) == 0x0002A1, "Member 'bs_C_ExecuteUbergraph_bs::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_player_8) == 0x0002A8, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_player_8' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_key_1) == 0x0002B0, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_key_1' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_pressed) == 0x0002C8, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_pressed' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_player_7) == 0x0002D0, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_player_7' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_mouse) == 0x0002D8, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_mouse' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, CallFunc_Lerp_ReturnValue) == 0x0002E0, "Member 'bs_C_ExecuteUbergraph_bs::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_player_6) == 0x0002E8, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_player_6' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_wheelDelta) == 0x0002F0, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_wheelDelta' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, CallFunc_RandomUnitVectorInConeInDegrees_ReturnValue) == 0x0002F4, "Member 'bs_C_ExecuteUbergraph_bs::CallFunc_RandomUnitVectorInConeInDegrees_ReturnValue' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, CallFunc_GetCharacterArrayFromString_ReturnValue) == 0x000300, "Member 'bs_C_ExecuteUbergraph_bs::CallFunc_GetCharacterArrayFromString_ReturnValue' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_LowEntry_LocalVariable_Value__Object) == 0x000310, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_LowEntry_LocalVariable_Value__Object' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x00031C, "Member 'bs_C_ExecuteUbergraph_bs::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, CallFunc_Cross_VectorVector_ReturnValue) == 0x000328, "Member 'bs_C_ExecuteUbergraph_bs::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x000334, "Member 'bs_C_ExecuteUbergraph_bs::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, CallFunc_Cross_VectorVector_ReturnValue_1) == 0x000340, "Member 'bs_C_ExecuteUbergraph_bs::CallFunc_Cross_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_player_5) == 0x000350, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_player_5' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_player_4) == 0x000358, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_player_4' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_damage_4) == 0x000360, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_damage_4' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_location) == 0x000364, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_location' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_player_3) == 0x000370, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_player_3' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_player_2) == 0x000378, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_player_2' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_player_1) == 0x000380, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_player_1' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_hit_3) == 0x000388, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_hit_3' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_action) == 0x000410, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_action' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_damage_3) == 0x000414, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_damage_3' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_hot) == 0x000418, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_hot' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_water_1) == 0x0004A0, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_water_1' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_water) == 0x0004A8, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_water' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_fuel) == 0x0004B0, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_fuel' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_damage_2) == 0x0004B4, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_damage_2' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_hit_2) == 0x0004B8, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_hit_2' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_actor_1) == 0x000540, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_actor_1' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_impact_1) == 0x000548, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_impact_1' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_damage_1) == 0x000554, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_damage_1' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_player) == 0x000558, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_player' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_hit_1) == 0x000560, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_hit_1' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_key) == 0x0005E8, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_key' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_static) == 0x0005F8, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_static' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_frozen) == 0x0005F9, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_frozen' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_active) == 0x0005FA, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_active' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_activate) == 0x0005FB, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_activate' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, CallFunc_MakeLiteralFloat_ReturnValue) == 0x0005FC, "Member 'bs_C_ExecuteUbergraph_bs::CallFunc_MakeLiteralFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, CallFunc_RotateAngleAxis_ReturnValue) == 0x000600, "Member 'bs_C_ExecuteUbergraph_bs::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, CallFunc_RotateAngleAxis_ReturnValue_1) == 0x00060C, "Member 'bs_C_ExecuteUbergraph_bs::CallFunc_RotateAngleAxis_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, CallFunc_Multiply_VectorFloat_ReturnValue_3) == 0x000618, "Member 'bs_C_ExecuteUbergraph_bs::CallFunc_Multiply_VectorFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, CallFunc_Multiply_VectorFloat_ReturnValue_4) == 0x000624, "Member 'bs_C_ExecuteUbergraph_bs::CallFunc_Multiply_VectorFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, CallFunc_MakeRotationFromAxes_ReturnValue) == 0x000630, "Member 'bs_C_ExecuteUbergraph_bs::CallFunc_MakeRotationFromAxes_ReturnValue' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_actor) == 0x000640, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_actor' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_damage) == 0x000648, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_damage' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_hit) == 0x00064C, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_hit' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_impact) == 0x0006D4, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_impact' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_Event_skipSetting) == 0x0006E0, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_Event_skipSetting' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_DynamicCast_AsMain_Player) == 0x0006E8, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_DynamicCast_AsMain_Player' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, K2Node_DynamicCast_bSuccess) == 0x0006F0, "Member 'bs_C_ExecuteUbergraph_bs::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0006F4, "Member 'bs_C_ExecuteUbergraph_bs::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000700, "Member 'bs_C_ExecuteUbergraph_bs::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00070C, "Member 'bs_C_ExecuteUbergraph_bs::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(bs_C_ExecuteUbergraph_bs, CallFunc_SetVectorLength_ReturnValue) == 0x000718, "Member 'bs_C_ExecuteUbergraph_bs::CallFunc_SetVectorLength_ReturnValue' has a wrong offset!");

}

