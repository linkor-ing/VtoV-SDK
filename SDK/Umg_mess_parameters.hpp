#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Umg_mess

#include "Basic.hpp"


namespace SDK::Params
{

// Function umg_mess.umg_mess_C.ExecuteUbergraph_umg_mess
// 0x0004 (0x0004 - 0x0000)
struct Umg_mess_C_ExecuteUbergraph_umg_mess final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Umg_mess_C_ExecuteUbergraph_umg_mess) == 0x000004, "Wrong alignment on Umg_mess_C_ExecuteUbergraph_umg_mess");
static_assert(sizeof(Umg_mess_C_ExecuteUbergraph_umg_mess) == 0x000004, "Wrong size on Umg_mess_C_ExecuteUbergraph_umg_mess");
static_assert(offsetof(Umg_mess_C_ExecuteUbergraph_umg_mess, EntryPoint) == 0x000000, "Member 'Umg_mess_C_ExecuteUbergraph_umg_mess::EntryPoint' has a wrong offset!");

// Function umg_mess.umg_mess_C.upd
// 0x00B8 (0x00B8 - 0x0000)
struct Umg_mess_C_Upd final
{
public:
	int32                                         Param_Action;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUmg_saveSlot_C*                        Param_Slot;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0018(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0030(0x0018)()
	int32                                         Temp_int_Variable_1;                               // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_2;                              // 0x0050(0x0018)()
	class FText                                   Temp_text_Variable_3;                              // 0x0068(0x0018)()
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_Select_Default;                             // 0x0088(0x0018)()
	class FText                                   K2Node_Select_Default_1;                           // 0x00A0(0x0018)()
};
static_assert(alignof(Umg_mess_C_Upd) == 0x000008, "Wrong alignment on Umg_mess_C_Upd");
static_assert(sizeof(Umg_mess_C_Upd) == 0x0000B8, "Wrong size on Umg_mess_C_Upd");
static_assert(offsetof(Umg_mess_C_Upd, Param_Action) == 0x000000, "Member 'Umg_mess_C_Upd::Param_Action' has a wrong offset!");
static_assert(offsetof(Umg_mess_C_Upd, Param_Slot) == 0x000008, "Member 'Umg_mess_C_Upd::Param_Slot' has a wrong offset!");
static_assert(offsetof(Umg_mess_C_Upd, Temp_int_Variable) == 0x000010, "Member 'Umg_mess_C_Upd::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(Umg_mess_C_Upd, Temp_text_Variable) == 0x000018, "Member 'Umg_mess_C_Upd::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(Umg_mess_C_Upd, Temp_text_Variable_1) == 0x000030, "Member 'Umg_mess_C_Upd::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(Umg_mess_C_Upd, Temp_int_Variable_1) == 0x000048, "Member 'Umg_mess_C_Upd::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(Umg_mess_C_Upd, Temp_text_Variable_2) == 0x000050, "Member 'Umg_mess_C_Upd::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(Umg_mess_C_Upd, Temp_text_Variable_3) == 0x000068, "Member 'Umg_mess_C_Upd::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(Umg_mess_C_Upd, CallFunc_GetPlayerController_ReturnValue) == 0x000080, "Member 'Umg_mess_C_Upd::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_mess_C_Upd, K2Node_Select_Default) == 0x000088, "Member 'Umg_mess_C_Upd::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Umg_mess_C_Upd, K2Node_Select_Default_1) == 0x0000A0, "Member 'Umg_mess_C_Upd::K2Node_Select_Default_1' has a wrong offset!");

// Function umg_mess.umg_mess_C.hide
// 0x0010 (0x0010 - 0x0000)
struct Umg_mess_C_Hide final
{
public:
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Umg_mess_C_Hide) == 0x000008, "Wrong alignment on Umg_mess_C_Hide");
static_assert(sizeof(Umg_mess_C_Hide) == 0x000010, "Wrong size on Umg_mess_C_Hide");
static_assert(offsetof(Umg_mess_C_Hide, CallFunc_GetPlayerController_ReturnValue) == 0x000000, "Member 'Umg_mess_C_Hide::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_mess_C_Hide, CallFunc_getMainGamemode_AsMain_Gamemode) == 0x000008, "Member 'Umg_mess_C_Hide::CallFunc_getMainGamemode_AsMain_Gamemode' has a wrong offset!");

}

