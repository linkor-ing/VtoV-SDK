#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MurderKerfur

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Prop_classes.hpp"
#include "Enum_interactionActions_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass murderKerfur.murderKerfur_C
// 0x01C0 (0x0538 - 0x0378)
class AMurderKerfur_C final : public AProp_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_MurderKerfur_C;                     // 0x0378(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPointLightComponent*                   PointLight;                                        // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        MurderfurVoice_cue;                                // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPnormal_C*                             Pnormal;                                           // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UComp_radarPoint_C*                     Comp_radarPoint;                                   // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Murderfur_st1;                                     // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        MurderfurThemePlaceholder;                         // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       NoSave;                                            // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh1;                                       // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Billboard;                                         // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       AttackSphere;                                      // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Roll;                                              // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNavigationInvokerComponent*            NavigationInvoker;                                 // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        DoorStuck;                                         // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Wheel;                                             // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            PhysicsConstraint;                                 // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Light_a_F1286C1341F5DA5C91610CB958AE2826;          // 0x0400(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Light__Direction_F1286C1341F5DA5C91610CB958AE2826; // 0x0404(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_405[0x3];                                      // 0x0405(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Light;                                             // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Mus_a_17CCC79C402BAC3723AE9791B7730586;            // 0x0410(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Mus__Direction_17CCC79C402BAC3723AE9791B7730586;   // 0x0414(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_415[0x3];                                      // 0x0415(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Mus;                                               // 0x0418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_1_a_FE0524D544F7289FB2827487F671912D;     // 0x0420(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_1__Direction_FE0524D544F7289FB2827487F671912D; // 0x0424(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_425[0x3];                                      // 0x0425(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_1;                                        // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_a_3FD169314E84DB4BFB10A1B8190E8CD6;     // 0x0430(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_3FD169314E84DB4BFB10A1B8190E8CD6; // 0x0434(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_435[0x3];                                      // 0x0435(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x0438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         A_a_BB102AB74E03E9B5E223F7B218DC3A83;              // 0x0440(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            A__Direction_BB102AB74E03E9B5E223F7B218DC3A83;     // 0x0444(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_445[0x3];                                      // 0x0445(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     A;                                                 // 0x0448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    bodyCOmponent;                                     // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Target_0;                                          // 0x0458(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_464[0x4];                                      // 0x0464(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    WheelComponent;                                    // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         P;                                                 // 0x0470(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         S;                                                 // 0x0474(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Dirr;                                              // 0x0478(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_47C[0x4];                                      // 0x047C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 MoveTo;                                            // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Active;                                            // 0x0488(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_489[0x3];                                      // 0x0489(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PowUpright;                                        // 0x048C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Wall;                                              // 0x0490(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_491[0x7];                                      // 0x0491(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AKerfusPawn_C*                          Pawn;                                              // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WheelTorque;                                       // 0x04A0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Anim;                                              // 0x04AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4AD[0x3];                                      // 0x04AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Ind;                                               // 0x04B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B4[0x4];                                      // 0x04B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                PrevPath;                                          // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNavigationPath*                        Navpath;                                           // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           Drop;                                              // 0x04C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AActor*                                 Overlapped;                                        // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      Obj;                                               // 0x04E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          backup;                                            // 0x04F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4F1[0x3];                                      // 0x04F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WheelSpeed;                                        // 0x04F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsJumping;                                         // 0x04F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4F9[0x3];                                      // 0x04F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimAlpha;                                         // 0x04FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Stage;                                             // 0x0500(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InitInd;                                           // 0x0504(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Pwr;                                               // 0x0508(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50C[0x4];                                      // 0x050C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          PlayerIn;                                          // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Stage_changer;                                     // 0x0518(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Upright;                                           // 0x051C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InEvent;                                           // 0x0520(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          WasPlayerDamaged;                                  // 0x0521(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_522[0x6];                                      // 0x0522(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 SpikeAt;                                           // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Dir;                                               // 0x0530(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SpikeMoved;                                        // 0x0531(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_murderKerfur(int32 EntryPoint);
	void PlayerDamaged();
	void Voice();
	void Stage3Spray();
	void Stunned();
	void ThemeBegin();
	void BndEvt__murderKerfur_noSave_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__murderKerfur_noSave_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void FindPath();
	void Attack(class AActor* Param_SpikeAt, const struct FRotator& NewRotation);
	void Spark();
	void AttemptJump();
	void PrepareJump();
	void CustomEvent_0(class UNavigationPath* AffectedPath, ENavPathEvent PathEvent);
	void RecalcPathInd();
	void BndEvt__murderKerfur_attackSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ReceiveTick(float DeltaSeconds);
	void SetActiveTrigger(class AActor* SentFrom, bool Param_Active);
	void CordUnplugged(class ACord_C* Cord, class ACordSocket_C* Socket);
	void CordPlugged(class ACord_C* Cord, class ACordSocket_C* Socket);
	void Set_ignoreSave_trigger(bool NewParam);
	void RunTrigger(class AActor* Param_Owner, int32 Param_Index);
	void Light__UpdateFunc();
	void Light__FinishedFunc();
	void Mus__UpdateFunc();
	void Mus__FinishedFunc();
	void Timeline_1__damage__EventFunc();
	void Timeline_1__UpdateFunc();
	void Timeline_1__FinishedFunc();
	void Timeline_0__damage__EventFunc();
	void Timeline_0__UpdateFunc();
	void Timeline_0__FinishedFunc();
	void A__damage__EventFunc();
	void A__UpdateFunc();
	void A__FinishedFunc();
	struct FVector Loccccccc();
	void UpdStage();
	void OpenDoors();
	struct FRotator RotateSpike(class AActor** OutputPin);
	void IgnoreSave_trigger(bool* Ignore);
	void LoadTriggerData(const struct FStruct_triggerSave& Data, bool* Return);
	void GetTriggerData(struct FStruct_triggerSave* Data);
	void GatherDataFromKeyT(bool* Gather);
	void FireDamage(float Damage);
	void broken_fire();
	void broken();
	void ReceiveDestroyed();
	void ReceiveBeginPlay();
	void CanBePutInContainer(bool* Return);
	void AsProp(class AProp_C** Return);
	void CanPickup(bool* Return);
	void NoRespawn(bool Param_NoRespawn, bool* Return);
	void LookAt(class AMainPlayer_C* Player, const struct FHitResult& Param_Hit, bool* Return, class FString* Text, class UPrimitiveComponent** boundObjectReplace, uint8* Number);
	void IsButtonUsed(bool* Failed);
	void CanBeUsedHold(bool* Return);
	void GetKey(class FString* Param_Key);
	void ToolboxFix(class AProp_toolbox_C* Toolbox, bool* Return);
	void IgnoreSave(bool* Param_IgnoreSave);
	void LoadData(const struct FStruct_save& Data, bool* Return);
	void GetData(struct FStruct_save* Data);
	void DreamInv(TArray<struct FStruct_save>& Invv, class ADreamBase_C** Base);
	void GetActionOptions(class AMainPlayer_C* Player, class UPrimitiveComponent* Component, class AActor* Actor, TArray<class FString>* Options, TArray<Enum_interactionActions>* Options_enum, TArray<class FText>* OptionsNamesOverlay, uint8* Number);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"murderKerfur_C">();
	}
	static class AMurderKerfur_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMurderKerfur_C>();
	}
};
static_assert(alignof(AMurderKerfur_C) == 0x000008, "Wrong alignment on AMurderKerfur_C");
static_assert(sizeof(AMurderKerfur_C) == 0x000538, "Wrong size on AMurderKerfur_C");
static_assert(offsetof(AMurderKerfur_C, UberGraphFrame_MurderKerfur_C) == 0x000378, "Member 'AMurderKerfur_C::UberGraphFrame_MurderKerfur_C' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, PointLight) == 0x000380, "Member 'AMurderKerfur_C::PointLight' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, MurderfurVoice_cue) == 0x000388, "Member 'AMurderKerfur_C::MurderfurVoice_cue' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, Pnormal) == 0x000390, "Member 'AMurderKerfur_C::Pnormal' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, Comp_radarPoint) == 0x000398, "Member 'AMurderKerfur_C::Comp_radarPoint' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, Murderfur_st1) == 0x0003A0, "Member 'AMurderKerfur_C::Murderfur_st1' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, MurderfurThemePlaceholder) == 0x0003A8, "Member 'AMurderKerfur_C::MurderfurThemePlaceholder' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, NoSave) == 0x0003B0, "Member 'AMurderKerfur_C::NoSave' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, StaticMesh1) == 0x0003B8, "Member 'AMurderKerfur_C::StaticMesh1' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, Billboard) == 0x0003C0, "Member 'AMurderKerfur_C::Billboard' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, Arrow) == 0x0003C8, "Member 'AMurderKerfur_C::Arrow' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, AttackSphere) == 0x0003D0, "Member 'AMurderKerfur_C::AttackSphere' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, Roll) == 0x0003D8, "Member 'AMurderKerfur_C::Roll' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, NavigationInvoker) == 0x0003E0, "Member 'AMurderKerfur_C::NavigationInvoker' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, DoorStuck) == 0x0003E8, "Member 'AMurderKerfur_C::DoorStuck' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, Wheel) == 0x0003F0, "Member 'AMurderKerfur_C::Wheel' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, PhysicsConstraint) == 0x0003F8, "Member 'AMurderKerfur_C::PhysicsConstraint' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, Light_a_F1286C1341F5DA5C91610CB958AE2826) == 0x000400, "Member 'AMurderKerfur_C::Light_a_F1286C1341F5DA5C91610CB958AE2826' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, Light__Direction_F1286C1341F5DA5C91610CB958AE2826) == 0x000404, "Member 'AMurderKerfur_C::Light__Direction_F1286C1341F5DA5C91610CB958AE2826' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, Light) == 0x000408, "Member 'AMurderKerfur_C::Light' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, Mus_a_17CCC79C402BAC3723AE9791B7730586) == 0x000410, "Member 'AMurderKerfur_C::Mus_a_17CCC79C402BAC3723AE9791B7730586' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, Mus__Direction_17CCC79C402BAC3723AE9791B7730586) == 0x000414, "Member 'AMurderKerfur_C::Mus__Direction_17CCC79C402BAC3723AE9791B7730586' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, Mus) == 0x000418, "Member 'AMurderKerfur_C::Mus' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, Timeline_1_a_FE0524D544F7289FB2827487F671912D) == 0x000420, "Member 'AMurderKerfur_C::Timeline_1_a_FE0524D544F7289FB2827487F671912D' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, Timeline_1__Direction_FE0524D544F7289FB2827487F671912D) == 0x000424, "Member 'AMurderKerfur_C::Timeline_1__Direction_FE0524D544F7289FB2827487F671912D' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, Timeline_1) == 0x000428, "Member 'AMurderKerfur_C::Timeline_1' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, Timeline_0_a_3FD169314E84DB4BFB10A1B8190E8CD6) == 0x000430, "Member 'AMurderKerfur_C::Timeline_0_a_3FD169314E84DB4BFB10A1B8190E8CD6' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, Timeline_0__Direction_3FD169314E84DB4BFB10A1B8190E8CD6) == 0x000434, "Member 'AMurderKerfur_C::Timeline_0__Direction_3FD169314E84DB4BFB10A1B8190E8CD6' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, Timeline_0) == 0x000438, "Member 'AMurderKerfur_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, A_a_BB102AB74E03E9B5E223F7B218DC3A83) == 0x000440, "Member 'AMurderKerfur_C::A_a_BB102AB74E03E9B5E223F7B218DC3A83' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, A__Direction_BB102AB74E03E9B5E223F7B218DC3A83) == 0x000444, "Member 'AMurderKerfur_C::A__Direction_BB102AB74E03E9B5E223F7B218DC3A83' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, A) == 0x000448, "Member 'AMurderKerfur_C::A' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, bodyCOmponent) == 0x000450, "Member 'AMurderKerfur_C::bodyCOmponent' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, Target_0) == 0x000458, "Member 'AMurderKerfur_C::Target_0' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, WheelComponent) == 0x000468, "Member 'AMurderKerfur_C::WheelComponent' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, P) == 0x000470, "Member 'AMurderKerfur_C::P' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, S) == 0x000474, "Member 'AMurderKerfur_C::S' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, Dirr) == 0x000478, "Member 'AMurderKerfur_C::Dirr' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, MoveTo) == 0x000480, "Member 'AMurderKerfur_C::MoveTo' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, Active) == 0x000488, "Member 'AMurderKerfur_C::Active' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, PowUpright) == 0x00048C, "Member 'AMurderKerfur_C::PowUpright' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, Wall) == 0x000490, "Member 'AMurderKerfur_C::Wall' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, Pawn) == 0x000498, "Member 'AMurderKerfur_C::Pawn' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, WheelTorque) == 0x0004A0, "Member 'AMurderKerfur_C::WheelTorque' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, Anim) == 0x0004AC, "Member 'AMurderKerfur_C::Anim' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, Ind) == 0x0004B0, "Member 'AMurderKerfur_C::Ind' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, PrevPath) == 0x0004B8, "Member 'AMurderKerfur_C::PrevPath' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, Navpath) == 0x0004C0, "Member 'AMurderKerfur_C::Navpath' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, Drop) == 0x0004C8, "Member 'AMurderKerfur_C::Drop' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, Overlapped) == 0x0004D8, "Member 'AMurderKerfur_C::Overlapped' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, Obj) == 0x0004E0, "Member 'AMurderKerfur_C::Obj' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, backup) == 0x0004F0, "Member 'AMurderKerfur_C::backup' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, WheelSpeed) == 0x0004F4, "Member 'AMurderKerfur_C::WheelSpeed' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, IsJumping) == 0x0004F8, "Member 'AMurderKerfur_C::IsJumping' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, AnimAlpha) == 0x0004FC, "Member 'AMurderKerfur_C::AnimAlpha' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, Stage) == 0x000500, "Member 'AMurderKerfur_C::Stage' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, InitInd) == 0x000504, "Member 'AMurderKerfur_C::InitInd' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, Pwr) == 0x000508, "Member 'AMurderKerfur_C::Pwr' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, PlayerIn) == 0x000510, "Member 'AMurderKerfur_C::PlayerIn' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, Stage_changer) == 0x000518, "Member 'AMurderKerfur_C::Stage_changer' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, Upright) == 0x00051C, "Member 'AMurderKerfur_C::Upright' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, InEvent) == 0x000520, "Member 'AMurderKerfur_C::InEvent' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, WasPlayerDamaged) == 0x000521, "Member 'AMurderKerfur_C::WasPlayerDamaged' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, SpikeAt) == 0x000528, "Member 'AMurderKerfur_C::SpikeAt' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, Dir) == 0x000530, "Member 'AMurderKerfur_C::Dir' has a wrong offset!");
static_assert(offsetof(AMurderKerfur_C, SpikeMoved) == 0x000531, "Member 'AMurderKerfur_C::SpikeMoved' has a wrong offset!");

}

