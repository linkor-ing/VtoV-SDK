#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RuntimeAudioImporter

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK
{

// Enum RuntimeAudioImporter.ETranscodingStatus
// NumValues: 0x0007
enum class ETranscodingStatus : uint8
{
	SuccessfulImport                         = 0,
	FailedToReadAudioDataArray               = 1,
	SoundWaveDeclarationError                = 2,
	InvalidAudioFormat                       = 3,
	AudioDoesNotExist                        = 4,
	LoadFileToArrayError                     = 5,
	ETranscodingStatus_MAX                   = 6,
};

// Enum RuntimeAudioImporter.ERAWAudioFormat
// NumValues: 0x0005
enum class ERAWAudioFormat : uint8
{
	Int16                                    = 0,
	Int32                                    = 1,
	UInt8                                    = 2,
	Float32                                  = 3,
	ERAWAudioFormat_MAX                      = 4,
};

// Enum RuntimeAudioImporter.EAudioFormat
// NumValues: 0x0007
enum class EAudioFormat : uint8
{
	Auto                                     = 0,
	Mp3                                      = 1,
	Wav                                      = 2,
	Flac                                     = 3,
	OggVorbis                                = 4,
	Invalid                                  = 5,
	EAudioFormat_MAX                         = 6,
};

// Enum RuntimeAudioImporter.EWAVEncodingFormat
// NumValues: 0x0008
enum class EWAVEncodingFormat : uint8
{
	FORMAT_PCM                               = 0,
	FORMAT_ADPCM                             = 1,
	FORMAT_IEEE_FLOAT                        = 2,
	FORMAT_ALAW                              = 3,
	FORMAT_MULAW                             = 4,
	FORMAT_DVI_ADPCM                         = 5,
	FORMAT_EXTENSIBLE                        = 6,
	FORMAT_MAX                               = 7,
};

// ScriptStruct RuntimeAudioImporter.CompressedSoundWaveInfo
// 0x000C (0x000C - 0x0000)
struct FCompressedSoundWaveInfo final
{
public:
	ESoundGroup                                   SoundGroup;                                        // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooping;                                          // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F3C[0x2];                                      // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Volume;                                            // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pitch;                                             // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCompressedSoundWaveInfo) == 0x000004, "Wrong alignment on FCompressedSoundWaveInfo");
static_assert(sizeof(FCompressedSoundWaveInfo) == 0x00000C, "Wrong size on FCompressedSoundWaveInfo");
static_assert(offsetof(FCompressedSoundWaveInfo, SoundGroup) == 0x000000, "Member 'FCompressedSoundWaveInfo::SoundGroup' has a wrong offset!");
static_assert(offsetof(FCompressedSoundWaveInfo, bLooping) == 0x000001, "Member 'FCompressedSoundWaveInfo::bLooping' has a wrong offset!");
static_assert(offsetof(FCompressedSoundWaveInfo, Volume) == 0x000004, "Member 'FCompressedSoundWaveInfo::Volume' has a wrong offset!");
static_assert(offsetof(FCompressedSoundWaveInfo, Pitch) == 0x000008, "Member 'FCompressedSoundWaveInfo::Pitch' has a wrong offset!");

// ScriptStruct RuntimeAudioImporter.PCMStruct
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FPCMStruct final
{
public:
	uint8                                         Pad_F3D[0x18];                                     // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPCMStruct) == 0x000008, "Wrong alignment on FPCMStruct");
static_assert(sizeof(FPCMStruct) == 0x000018, "Wrong size on FPCMStruct");

}

