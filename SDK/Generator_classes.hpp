#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Generator

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Actor_save_classes.hpp"
#include "Enum_interactionActions_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass generator.generator_C
// 0x0058 (0x02A0 - 0x0248)
class AGenerator_C final : public AActor_save_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_Generator_C;                        // 0x0248(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBillboardComponent*                    KerfSpot;                                          // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USvtarget_C*                            Svtarget;                                          // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Eff_glow_blue;                                     // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Reset;                                             // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Turnon;                                            // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Audio;                                             // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBroken;                                          // 0x0290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2EDB[0x3];                                     // 0x0291(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Index_Generator_C;                                 // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Cycle;                                             // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_generator(int32 EntryPoint);
	void GamemodeBeginPlay();
	void ReceiveBeginPlay();
	void UpdateStrAgl();
	void DamageByPlayer(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void Thrown(class AMainPlayer_C* Player);
	void broken_fire();
	void broken();
	void SendName(class FName Param_Name);
	void Kicked(bool Kick);
	void Player_use(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void DriveDetached();
	void ApplyColor(const struct FLinearColor& Color);
	void PropRenderer_finishProps();
	void GamemodeMakeKeys();
	void AnyKey(const struct FKey& Param_Key, bool Pressed);
	void GamemodePreLoad();
	void Unfocused();
	void SettingsApplied(const struct FStruct_settings& Settings);
	void Unfoc();
	void StuffUpgraded(class AMainGamemode_C* GameMode);
	void SignalSaved();
	void SignalDeleted();
	void Upd();
	void break();
	void Update();
	void CanBePutInContainer(bool* Return);
	void AsProp(class AProp_C** Return);
	void CanPickup(bool* Return);
	void NoRespawn(bool Param_NoRespawn, bool* Return);
	void LookAt(class AMainPlayer_C* Player, const struct FHitResult& Hit, bool* Return, class FString* Text, class UPrimitiveComponent** boundObjectReplace);
	void IsButtonUsed(bool* Failed);
	void DreamInv(TArray<struct FStruct_save>& Invv, class ADreamBase_C** Base);
	void AddDamage(class AActor* Actor, float Damage, const struct FHitResult& Hit, const struct FVector& Impact, bool SkipSetting);
	void ActionOptionIndex(class AMainPlayer_C* Player, const struct FHitResult& Hit, int32 Param_Index, Enum_interactionActions Action);
	void LoadData(const struct FStruct_save& Data, bool* Return);
	void GetData(struct FStruct_save* Data);
	void GetActionOptions(class AMainPlayer_C* Player, class UPrimitiveComponent* Component, class AActor* Actor, TArray<class FString>* Options, TArray<Enum_interactionActions>* Options_enum, TArray<class FText>* OptionsNamesOverlay);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"generator_C">();
	}
	static class AGenerator_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGenerator_C>();
	}
};
static_assert(alignof(AGenerator_C) == 0x000008, "Wrong alignment on AGenerator_C");
static_assert(sizeof(AGenerator_C) == 0x0002A0, "Wrong size on AGenerator_C");
static_assert(offsetof(AGenerator_C, UberGraphFrame_Generator_C) == 0x000248, "Member 'AGenerator_C::UberGraphFrame_Generator_C' has a wrong offset!");
static_assert(offsetof(AGenerator_C, KerfSpot) == 0x000250, "Member 'AGenerator_C::KerfSpot' has a wrong offset!");
static_assert(offsetof(AGenerator_C, Svtarget) == 0x000258, "Member 'AGenerator_C::Svtarget' has a wrong offset!");
static_assert(offsetof(AGenerator_C, Box) == 0x000260, "Member 'AGenerator_C::Box' has a wrong offset!");
static_assert(offsetof(AGenerator_C, Eff_glow_blue) == 0x000268, "Member 'AGenerator_C::Eff_glow_blue' has a wrong offset!");
static_assert(offsetof(AGenerator_C, Reset) == 0x000270, "Member 'AGenerator_C::Reset' has a wrong offset!");
static_assert(offsetof(AGenerator_C, Turnon) == 0x000278, "Member 'AGenerator_C::Turnon' has a wrong offset!");
static_assert(offsetof(AGenerator_C, Audio) == 0x000280, "Member 'AGenerator_C::Audio' has a wrong offset!");
static_assert(offsetof(AGenerator_C, StaticMesh) == 0x000288, "Member 'AGenerator_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(AGenerator_C, IsBroken) == 0x000290, "Member 'AGenerator_C::IsBroken' has a wrong offset!");
static_assert(offsetof(AGenerator_C, Index_Generator_C) == 0x000294, "Member 'AGenerator_C::Index_Generator_C' has a wrong offset!");
static_assert(offsetof(AGenerator_C, Cycle) == 0x000298, "Member 'AGenerator_C::Cycle' has a wrong offset!");

}

