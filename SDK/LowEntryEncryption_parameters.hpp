#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LowEntryEncryption

#include "Basic.hpp"


namespace SDK::Params
{

// Function LowEntryEncryption.LowEntryEncryptionLibrary.BytesToRsaPrivateKey
// 0x0028 (0x0028 - 0x0000)
struct LowEntryEncryptionLibrary_BytesToRsaPrivateKey final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULowEntryRsaPrivateKey*                 PrivateKey;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ByteArray;                                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryEncryptionLibrary_BytesToRsaPrivateKey) == 0x000008, "Wrong alignment on LowEntryEncryptionLibrary_BytesToRsaPrivateKey");
static_assert(sizeof(LowEntryEncryptionLibrary_BytesToRsaPrivateKey) == 0x000028, "Wrong size on LowEntryEncryptionLibrary_BytesToRsaPrivateKey");
static_assert(offsetof(LowEntryEncryptionLibrary_BytesToRsaPrivateKey, Success) == 0x000000, "Member 'LowEntryEncryptionLibrary_BytesToRsaPrivateKey::Success' has a wrong offset!");
static_assert(offsetof(LowEntryEncryptionLibrary_BytesToRsaPrivateKey, PrivateKey) == 0x000008, "Member 'LowEntryEncryptionLibrary_BytesToRsaPrivateKey::PrivateKey' has a wrong offset!");
static_assert(offsetof(LowEntryEncryptionLibrary_BytesToRsaPrivateKey, ByteArray) == 0x000010, "Member 'LowEntryEncryptionLibrary_BytesToRsaPrivateKey::ByteArray' has a wrong offset!");
static_assert(offsetof(LowEntryEncryptionLibrary_BytesToRsaPrivateKey, Param_Index) == 0x000020, "Member 'LowEntryEncryptionLibrary_BytesToRsaPrivateKey::Param_Index' has a wrong offset!");
static_assert(offsetof(LowEntryEncryptionLibrary_BytesToRsaPrivateKey, Length) == 0x000024, "Member 'LowEntryEncryptionLibrary_BytesToRsaPrivateKey::Length' has a wrong offset!");

// Function LowEntryEncryption.LowEntryEncryptionLibrary.BytesToRsaPublicKey
// 0x0028 (0x0028 - 0x0000)
struct LowEntryEncryptionLibrary_BytesToRsaPublicKey final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULowEntryRsaPublicKey*                  PublicKey;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ByteArray;                                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryEncryptionLibrary_BytesToRsaPublicKey) == 0x000008, "Wrong alignment on LowEntryEncryptionLibrary_BytesToRsaPublicKey");
static_assert(sizeof(LowEntryEncryptionLibrary_BytesToRsaPublicKey) == 0x000028, "Wrong size on LowEntryEncryptionLibrary_BytesToRsaPublicKey");
static_assert(offsetof(LowEntryEncryptionLibrary_BytesToRsaPublicKey, Success) == 0x000000, "Member 'LowEntryEncryptionLibrary_BytesToRsaPublicKey::Success' has a wrong offset!");
static_assert(offsetof(LowEntryEncryptionLibrary_BytesToRsaPublicKey, PublicKey) == 0x000008, "Member 'LowEntryEncryptionLibrary_BytesToRsaPublicKey::PublicKey' has a wrong offset!");
static_assert(offsetof(LowEntryEncryptionLibrary_BytesToRsaPublicKey, ByteArray) == 0x000010, "Member 'LowEntryEncryptionLibrary_BytesToRsaPublicKey::ByteArray' has a wrong offset!");
static_assert(offsetof(LowEntryEncryptionLibrary_BytesToRsaPublicKey, Param_Index) == 0x000020, "Member 'LowEntryEncryptionLibrary_BytesToRsaPublicKey::Param_Index' has a wrong offset!");
static_assert(offsetof(LowEntryEncryptionLibrary_BytesToRsaPublicKey, Length) == 0x000024, "Member 'LowEntryEncryptionLibrary_BytesToRsaPublicKey::Length' has a wrong offset!");

// Function LowEntryEncryption.LowEntryEncryptionLibrary.DecryptAes
// 0x0038 (0x0038 - 0x0000)
struct LowEntryEncryptionLibrary_DecryptAes final
{
public:
	TArray<uint8>                                 EncryptedData;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Key;                                               // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          AddedHash;                                         // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryEncryptionLibrary_DecryptAes) == 0x000008, "Wrong alignment on LowEntryEncryptionLibrary_DecryptAes");
static_assert(sizeof(LowEntryEncryptionLibrary_DecryptAes) == 0x000038, "Wrong size on LowEntryEncryptionLibrary_DecryptAes");
static_assert(offsetof(LowEntryEncryptionLibrary_DecryptAes, EncryptedData) == 0x000000, "Member 'LowEntryEncryptionLibrary_DecryptAes::EncryptedData' has a wrong offset!");
static_assert(offsetof(LowEntryEncryptionLibrary_DecryptAes, Key) == 0x000010, "Member 'LowEntryEncryptionLibrary_DecryptAes::Key' has a wrong offset!");
static_assert(offsetof(LowEntryEncryptionLibrary_DecryptAes, AddedHash) == 0x000020, "Member 'LowEntryEncryptionLibrary_DecryptAes::AddedHash' has a wrong offset!");
static_assert(offsetof(LowEntryEncryptionLibrary_DecryptAes, ReturnValue) == 0x000028, "Member 'LowEntryEncryptionLibrary_DecryptAes::ReturnValue' has a wrong offset!");

// Function LowEntryEncryption.LowEntryEncryptionLibrary.DecryptRsa
// 0x0028 (0x0028 - 0x0000)
struct LowEntryEncryptionLibrary_DecryptRsa final
{
public:
	TArray<uint8>                                 EncryptedData;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class ULowEntryRsaPrivateKey*                 PrivateKey;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryEncryptionLibrary_DecryptRsa) == 0x000008, "Wrong alignment on LowEntryEncryptionLibrary_DecryptRsa");
static_assert(sizeof(LowEntryEncryptionLibrary_DecryptRsa) == 0x000028, "Wrong size on LowEntryEncryptionLibrary_DecryptRsa");
static_assert(offsetof(LowEntryEncryptionLibrary_DecryptRsa, EncryptedData) == 0x000000, "Member 'LowEntryEncryptionLibrary_DecryptRsa::EncryptedData' has a wrong offset!");
static_assert(offsetof(LowEntryEncryptionLibrary_DecryptRsa, PrivateKey) == 0x000010, "Member 'LowEntryEncryptionLibrary_DecryptRsa::PrivateKey' has a wrong offset!");
static_assert(offsetof(LowEntryEncryptionLibrary_DecryptRsa, ReturnValue) == 0x000018, "Member 'LowEntryEncryptionLibrary_DecryptRsa::ReturnValue' has a wrong offset!");

// Function LowEntryEncryption.LowEntryEncryptionLibrary.EncryptAes
// 0x0038 (0x0038 - 0x0000)
struct LowEntryEncryptionLibrary_EncryptAes final
{
public:
	TArray<uint8>                                 Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Key;                                               // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          AddHash;                                           // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryEncryptionLibrary_EncryptAes) == 0x000008, "Wrong alignment on LowEntryEncryptionLibrary_EncryptAes");
static_assert(sizeof(LowEntryEncryptionLibrary_EncryptAes) == 0x000038, "Wrong size on LowEntryEncryptionLibrary_EncryptAes");
static_assert(offsetof(LowEntryEncryptionLibrary_EncryptAes, Data) == 0x000000, "Member 'LowEntryEncryptionLibrary_EncryptAes::Data' has a wrong offset!");
static_assert(offsetof(LowEntryEncryptionLibrary_EncryptAes, Key) == 0x000010, "Member 'LowEntryEncryptionLibrary_EncryptAes::Key' has a wrong offset!");
static_assert(offsetof(LowEntryEncryptionLibrary_EncryptAes, AddHash) == 0x000020, "Member 'LowEntryEncryptionLibrary_EncryptAes::AddHash' has a wrong offset!");
static_assert(offsetof(LowEntryEncryptionLibrary_EncryptAes, ReturnValue) == 0x000028, "Member 'LowEntryEncryptionLibrary_EncryptAes::ReturnValue' has a wrong offset!");

// Function LowEntryEncryption.LowEntryEncryptionLibrary.EncryptRsa
// 0x0028 (0x0028 - 0x0000)
struct LowEntryEncryptionLibrary_EncryptRsa final
{
public:
	TArray<uint8>                                 Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class ULowEntryRsaPublicKey*                  PublicKey;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryEncryptionLibrary_EncryptRsa) == 0x000008, "Wrong alignment on LowEntryEncryptionLibrary_EncryptRsa");
static_assert(sizeof(LowEntryEncryptionLibrary_EncryptRsa) == 0x000028, "Wrong size on LowEntryEncryptionLibrary_EncryptRsa");
static_assert(offsetof(LowEntryEncryptionLibrary_EncryptRsa, Data) == 0x000000, "Member 'LowEntryEncryptionLibrary_EncryptRsa::Data' has a wrong offset!");
static_assert(offsetof(LowEntryEncryptionLibrary_EncryptRsa, PublicKey) == 0x000010, "Member 'LowEntryEncryptionLibrary_EncryptRsa::PublicKey' has a wrong offset!");
static_assert(offsetof(LowEntryEncryptionLibrary_EncryptRsa, ReturnValue) == 0x000018, "Member 'LowEntryEncryptionLibrary_EncryptRsa::ReturnValue' has a wrong offset!");

// Function LowEntryEncryption.LowEntryEncryptionLibrary.GenerateKeysRsa
// 0x0018 (0x0018 - 0x0000)
struct LowEntryEncryptionLibrary_GenerateKeysRsa final
{
public:
	class ULowEntryRsaPublicKey*                  PublicKey;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULowEntryRsaPrivateKey*                 PrivateKey;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Bits;                                              // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryEncryptionLibrary_GenerateKeysRsa) == 0x000008, "Wrong alignment on LowEntryEncryptionLibrary_GenerateKeysRsa");
static_assert(sizeof(LowEntryEncryptionLibrary_GenerateKeysRsa) == 0x000018, "Wrong size on LowEntryEncryptionLibrary_GenerateKeysRsa");
static_assert(offsetof(LowEntryEncryptionLibrary_GenerateKeysRsa, PublicKey) == 0x000000, "Member 'LowEntryEncryptionLibrary_GenerateKeysRsa::PublicKey' has a wrong offset!");
static_assert(offsetof(LowEntryEncryptionLibrary_GenerateKeysRsa, PrivateKey) == 0x000008, "Member 'LowEntryEncryptionLibrary_GenerateKeysRsa::PrivateKey' has a wrong offset!");
static_assert(offsetof(LowEntryEncryptionLibrary_GenerateKeysRsa, Bits) == 0x000010, "Member 'LowEntryEncryptionLibrary_GenerateKeysRsa::Bits' has a wrong offset!");

// Function LowEntryEncryption.LowEntryEncryptionLibrary.GenerateSecureRandomBytes
// 0x0018 (0x0018 - 0x0000)
struct LowEntryEncryptionLibrary_GenerateSecureRandomBytes final
{
public:
	int32                                         Length;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryEncryptionLibrary_GenerateSecureRandomBytes) == 0x000008, "Wrong alignment on LowEntryEncryptionLibrary_GenerateSecureRandomBytes");
static_assert(sizeof(LowEntryEncryptionLibrary_GenerateSecureRandomBytes) == 0x000018, "Wrong size on LowEntryEncryptionLibrary_GenerateSecureRandomBytes");
static_assert(offsetof(LowEntryEncryptionLibrary_GenerateSecureRandomBytes, Length) == 0x000000, "Member 'LowEntryEncryptionLibrary_GenerateSecureRandomBytes::Length' has a wrong offset!");
static_assert(offsetof(LowEntryEncryptionLibrary_GenerateSecureRandomBytes, ReturnValue) == 0x000008, "Member 'LowEntryEncryptionLibrary_GenerateSecureRandomBytes::ReturnValue' has a wrong offset!");

// Function LowEntryEncryption.LowEntryEncryptionLibrary.GenerateSecureRandomBytesRandomLength
// 0x0018 (0x0018 - 0x0000)
struct LowEntryEncryptionLibrary_GenerateSecureRandomBytesRandomLength final
{
public:
	int32                                         MinLength;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLength;                                         // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryEncryptionLibrary_GenerateSecureRandomBytesRandomLength) == 0x000008, "Wrong alignment on LowEntryEncryptionLibrary_GenerateSecureRandomBytesRandomLength");
static_assert(sizeof(LowEntryEncryptionLibrary_GenerateSecureRandomBytesRandomLength) == 0x000018, "Wrong size on LowEntryEncryptionLibrary_GenerateSecureRandomBytesRandomLength");
static_assert(offsetof(LowEntryEncryptionLibrary_GenerateSecureRandomBytesRandomLength, MinLength) == 0x000000, "Member 'LowEntryEncryptionLibrary_GenerateSecureRandomBytesRandomLength::MinLength' has a wrong offset!");
static_assert(offsetof(LowEntryEncryptionLibrary_GenerateSecureRandomBytesRandomLength, MaxLength) == 0x000004, "Member 'LowEntryEncryptionLibrary_GenerateSecureRandomBytesRandomLength::MaxLength' has a wrong offset!");
static_assert(offsetof(LowEntryEncryptionLibrary_GenerateSecureRandomBytesRandomLength, ReturnValue) == 0x000008, "Member 'LowEntryEncryptionLibrary_GenerateSecureRandomBytesRandomLength::ReturnValue' has a wrong offset!");

// Function LowEntryEncryption.LowEntryEncryptionLibrary.RsaPrivateKeyToBytes
// 0x0018 (0x0018 - 0x0000)
struct LowEntryEncryptionLibrary_RsaPrivateKeyToBytes final
{
public:
	class ULowEntryRsaPrivateKey*                 PrivateKey;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryEncryptionLibrary_RsaPrivateKeyToBytes) == 0x000008, "Wrong alignment on LowEntryEncryptionLibrary_RsaPrivateKeyToBytes");
static_assert(sizeof(LowEntryEncryptionLibrary_RsaPrivateKeyToBytes) == 0x000018, "Wrong size on LowEntryEncryptionLibrary_RsaPrivateKeyToBytes");
static_assert(offsetof(LowEntryEncryptionLibrary_RsaPrivateKeyToBytes, PrivateKey) == 0x000000, "Member 'LowEntryEncryptionLibrary_RsaPrivateKeyToBytes::PrivateKey' has a wrong offset!");
static_assert(offsetof(LowEntryEncryptionLibrary_RsaPrivateKeyToBytes, ReturnValue) == 0x000008, "Member 'LowEntryEncryptionLibrary_RsaPrivateKeyToBytes::ReturnValue' has a wrong offset!");

// Function LowEntryEncryption.LowEntryEncryptionLibrary.RsaPublicKeyToBytes
// 0x0018 (0x0018 - 0x0000)
struct LowEntryEncryptionLibrary_RsaPublicKeyToBytes final
{
public:
	class ULowEntryRsaPublicKey*                  PublicKey;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryEncryptionLibrary_RsaPublicKeyToBytes) == 0x000008, "Wrong alignment on LowEntryEncryptionLibrary_RsaPublicKeyToBytes");
static_assert(sizeof(LowEntryEncryptionLibrary_RsaPublicKeyToBytes) == 0x000018, "Wrong size on LowEntryEncryptionLibrary_RsaPublicKeyToBytes");
static_assert(offsetof(LowEntryEncryptionLibrary_RsaPublicKeyToBytes, PublicKey) == 0x000000, "Member 'LowEntryEncryptionLibrary_RsaPublicKeyToBytes::PublicKey' has a wrong offset!");
static_assert(offsetof(LowEntryEncryptionLibrary_RsaPublicKeyToBytes, ReturnValue) == 0x000008, "Member 'LowEntryEncryptionLibrary_RsaPublicKeyToBytes::ReturnValue' has a wrong offset!");

// Function LowEntryEncryption.LowEntryEncryptionLibrary.SignRsa
// 0x0028 (0x0028 - 0x0000)
struct LowEntryEncryptionLibrary_SignRsa final
{
public:
	TArray<uint8>                                 Hash;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class ULowEntryRsaPrivateKey*                 PrivateKey;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryEncryptionLibrary_SignRsa) == 0x000008, "Wrong alignment on LowEntryEncryptionLibrary_SignRsa");
static_assert(sizeof(LowEntryEncryptionLibrary_SignRsa) == 0x000028, "Wrong size on LowEntryEncryptionLibrary_SignRsa");
static_assert(offsetof(LowEntryEncryptionLibrary_SignRsa, Hash) == 0x000000, "Member 'LowEntryEncryptionLibrary_SignRsa::Hash' has a wrong offset!");
static_assert(offsetof(LowEntryEncryptionLibrary_SignRsa, PrivateKey) == 0x000010, "Member 'LowEntryEncryptionLibrary_SignRsa::PrivateKey' has a wrong offset!");
static_assert(offsetof(LowEntryEncryptionLibrary_SignRsa, ReturnValue) == 0x000018, "Member 'LowEntryEncryptionLibrary_SignRsa::ReturnValue' has a wrong offset!");

// Function LowEntryEncryption.LowEntryEncryptionLibrary.VerifySignatureRsa
// 0x0030 (0x0030 - 0x0000)
struct LowEntryEncryptionLibrary_VerifySignatureRsa final
{
public:
	TArray<uint8>                                 Signature;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ExpectedHash;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class ULowEntryRsaPublicKey*                  PublicKey;                                         // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryEncryptionLibrary_VerifySignatureRsa) == 0x000008, "Wrong alignment on LowEntryEncryptionLibrary_VerifySignatureRsa");
static_assert(sizeof(LowEntryEncryptionLibrary_VerifySignatureRsa) == 0x000030, "Wrong size on LowEntryEncryptionLibrary_VerifySignatureRsa");
static_assert(offsetof(LowEntryEncryptionLibrary_VerifySignatureRsa, Signature) == 0x000000, "Member 'LowEntryEncryptionLibrary_VerifySignatureRsa::Signature' has a wrong offset!");
static_assert(offsetof(LowEntryEncryptionLibrary_VerifySignatureRsa, ExpectedHash) == 0x000010, "Member 'LowEntryEncryptionLibrary_VerifySignatureRsa::ExpectedHash' has a wrong offset!");
static_assert(offsetof(LowEntryEncryptionLibrary_VerifySignatureRsa, PublicKey) == 0x000020, "Member 'LowEntryEncryptionLibrary_VerifySignatureRsa::PublicKey' has a wrong offset!");
static_assert(offsetof(LowEntryEncryptionLibrary_VerifySignatureRsa, ReturnValue) == 0x000028, "Member 'LowEntryEncryptionLibrary_VerifySignatureRsa::ReturnValue' has a wrong offset!");

}

