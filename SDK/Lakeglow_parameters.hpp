#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Lakeglow

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function lakeglow.lakeglow_C.ExecuteUbergraph_lakeglow
// 0x0130 (0x0130 - 0x0000)
struct Lakeglow_C_ExecuteUbergraph_lakeglow final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_1;  // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_1;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_1;            // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_1;       // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0040(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x00C8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_DynamicCast_AsMain_Player;                  // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_DynamicCast_AsMain_Player_1;                // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0102(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_103[0x1];                                      // 0x0103(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0115(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_116[0x2];                                      // 0x0116(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0128(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Lakeglow_C_ExecuteUbergraph_lakeglow) == 0x000008, "Wrong alignment on Lakeglow_C_ExecuteUbergraph_lakeglow");
static_assert(sizeof(Lakeglow_C_ExecuteUbergraph_lakeglow) == 0x000130, "Wrong size on Lakeglow_C_ExecuteUbergraph_lakeglow");
static_assert(offsetof(Lakeglow_C_ExecuteUbergraph_lakeglow, EntryPoint) == 0x000000, "Member 'Lakeglow_C_ExecuteUbergraph_lakeglow::EntryPoint' has a wrong offset!");
static_assert(offsetof(Lakeglow_C_ExecuteUbergraph_lakeglow, Temp_int_Variable) == 0x000004, "Member 'Lakeglow_C_ExecuteUbergraph_lakeglow::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(Lakeglow_C_ExecuteUbergraph_lakeglow, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'Lakeglow_C_ExecuteUbergraph_lakeglow::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Lakeglow_C_ExecuteUbergraph_lakeglow, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'Lakeglow_C_ExecuteUbergraph_lakeglow::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lakeglow_C_ExecuteUbergraph_lakeglow, CallFunc_Less_IntInt_ReturnValue) == 0x00001C, "Member 'Lakeglow_C_ExecuteUbergraph_lakeglow::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lakeglow_C_ExecuteUbergraph_lakeglow, Temp_bool_Has_Been_Initd_Variable) == 0x00001D, "Member 'Lakeglow_C_ExecuteUbergraph_lakeglow::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(Lakeglow_C_ExecuteUbergraph_lakeglow, K2Node_ComponentBoundEvent_OverlappedComponent_1) == 0x000020, "Member 'Lakeglow_C_ExecuteUbergraph_lakeglow::K2Node_ComponentBoundEvent_OverlappedComponent_1' has a wrong offset!");
static_assert(offsetof(Lakeglow_C_ExecuteUbergraph_lakeglow, K2Node_ComponentBoundEvent_OtherActor_1) == 0x000028, "Member 'Lakeglow_C_ExecuteUbergraph_lakeglow::K2Node_ComponentBoundEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(Lakeglow_C_ExecuteUbergraph_lakeglow, K2Node_ComponentBoundEvent_OtherComp_1) == 0x000030, "Member 'Lakeglow_C_ExecuteUbergraph_lakeglow::K2Node_ComponentBoundEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(Lakeglow_C_ExecuteUbergraph_lakeglow, K2Node_ComponentBoundEvent_OtherBodyIndex_1) == 0x000038, "Member 'Lakeglow_C_ExecuteUbergraph_lakeglow::K2Node_ComponentBoundEvent_OtherBodyIndex_1' has a wrong offset!");
static_assert(offsetof(Lakeglow_C_ExecuteUbergraph_lakeglow, K2Node_ComponentBoundEvent_bFromSweep) == 0x00003C, "Member 'Lakeglow_C_ExecuteUbergraph_lakeglow::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(Lakeglow_C_ExecuteUbergraph_lakeglow, K2Node_ComponentBoundEvent_SweepResult) == 0x000040, "Member 'Lakeglow_C_ExecuteUbergraph_lakeglow::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(Lakeglow_C_ExecuteUbergraph_lakeglow, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x0000C8, "Member 'Lakeglow_C_ExecuteUbergraph_lakeglow::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Lakeglow_C_ExecuteUbergraph_lakeglow, K2Node_ComponentBoundEvent_OtherActor) == 0x0000D0, "Member 'Lakeglow_C_ExecuteUbergraph_lakeglow::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(Lakeglow_C_ExecuteUbergraph_lakeglow, K2Node_ComponentBoundEvent_OtherComp) == 0x0000D8, "Member 'Lakeglow_C_ExecuteUbergraph_lakeglow::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(Lakeglow_C_ExecuteUbergraph_lakeglow, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x0000E0, "Member 'Lakeglow_C_ExecuteUbergraph_lakeglow::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Lakeglow_C_ExecuteUbergraph_lakeglow, K2Node_DynamicCast_AsMain_Player) == 0x0000E8, "Member 'Lakeglow_C_ExecuteUbergraph_lakeglow::K2Node_DynamicCast_AsMain_Player' has a wrong offset!");
static_assert(offsetof(Lakeglow_C_ExecuteUbergraph_lakeglow, K2Node_DynamicCast_bSuccess) == 0x0000F0, "Member 'Lakeglow_C_ExecuteUbergraph_lakeglow::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Lakeglow_C_ExecuteUbergraph_lakeglow, K2Node_DynamicCast_AsMain_Player_1) == 0x0000F8, "Member 'Lakeglow_C_ExecuteUbergraph_lakeglow::K2Node_DynamicCast_AsMain_Player_1' has a wrong offset!");
static_assert(offsetof(Lakeglow_C_ExecuteUbergraph_lakeglow, K2Node_DynamicCast_bSuccess_1) == 0x000100, "Member 'Lakeglow_C_ExecuteUbergraph_lakeglow::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(Lakeglow_C_ExecuteUbergraph_lakeglow, CallFunc_IsValid_ReturnValue) == 0x000101, "Member 'Lakeglow_C_ExecuteUbergraph_lakeglow::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lakeglow_C_ExecuteUbergraph_lakeglow, CallFunc_IsValid_ReturnValue_1) == 0x000102, "Member 'Lakeglow_C_ExecuteUbergraph_lakeglow::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Lakeglow_C_ExecuteUbergraph_lakeglow, K2Node_Event_DeltaSeconds) == 0x000104, "Member 'Lakeglow_C_ExecuteUbergraph_lakeglow::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(Lakeglow_C_ExecuteUbergraph_lakeglow, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000108, "Member 'Lakeglow_C_ExecuteUbergraph_lakeglow::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lakeglow_C_ExecuteUbergraph_lakeglow, Temp_bool_IsClosed_Variable) == 0x000114, "Member 'Lakeglow_C_ExecuteUbergraph_lakeglow::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(Lakeglow_C_ExecuteUbergraph_lakeglow, CallFunc_IsValid_ReturnValue_2) == 0x000115, "Member 'Lakeglow_C_ExecuteUbergraph_lakeglow::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Lakeglow_C_ExecuteUbergraph_lakeglow, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000118, "Member 'Lakeglow_C_ExecuteUbergraph_lakeglow::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lakeglow_C_ExecuteUbergraph_lakeglow, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000128, "Member 'Lakeglow_C_ExecuteUbergraph_lakeglow::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");

// Function lakeglow.lakeglow_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct Lakeglow_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Lakeglow_C_ReceiveTick) == 0x000004, "Wrong alignment on Lakeglow_C_ReceiveTick");
static_assert(sizeof(Lakeglow_C_ReceiveTick) == 0x000004, "Wrong size on Lakeglow_C_ReceiveTick");
static_assert(offsetof(Lakeglow_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'Lakeglow_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function lakeglow.lakeglow_C.BndEvt__lakeglow_pulling_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct Lakeglow_C_BndEvt__lakeglow_pulling_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Lakeglow_C_BndEvt__lakeglow_pulling_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on Lakeglow_C_BndEvt__lakeglow_pulling_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(Lakeglow_C_BndEvt__lakeglow_pulling_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on Lakeglow_C_BndEvt__lakeglow_pulling_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(Lakeglow_C_BndEvt__lakeglow_pulling_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'Lakeglow_C_BndEvt__lakeglow_pulling_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Lakeglow_C_BndEvt__lakeglow_pulling_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'Lakeglow_C_BndEvt__lakeglow_pulling_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(Lakeglow_C_BndEvt__lakeglow_pulling_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'Lakeglow_C_BndEvt__lakeglow_pulling_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(Lakeglow_C_BndEvt__lakeglow_pulling_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'Lakeglow_C_BndEvt__lakeglow_pulling_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function lakeglow.lakeglow_C.BndEvt__lakeglow_pulling_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct Lakeglow_C_BndEvt__lakeglow_pulling_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Lakeglow_C_BndEvt__lakeglow_pulling_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on Lakeglow_C_BndEvt__lakeglow_pulling_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(Lakeglow_C_BndEvt__lakeglow_pulling_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on Lakeglow_C_BndEvt__lakeglow_pulling_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(Lakeglow_C_BndEvt__lakeglow_pulling_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'Lakeglow_C_BndEvt__lakeglow_pulling_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Lakeglow_C_BndEvt__lakeglow_pulling_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'Lakeglow_C_BndEvt__lakeglow_pulling_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(Lakeglow_C_BndEvt__lakeglow_pulling_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'Lakeglow_C_BndEvt__lakeglow_pulling_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(Lakeglow_C_BndEvt__lakeglow_pulling_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'Lakeglow_C_BndEvt__lakeglow_pulling_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Lakeglow_C_BndEvt__lakeglow_pulling_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'Lakeglow_C_BndEvt__lakeglow_pulling_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(Lakeglow_C_BndEvt__lakeglow_pulling_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'Lakeglow_C_BndEvt__lakeglow_pulling_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function lakeglow.lakeglow_C.SetActive
// 0x0030 (0x0030 - 0x0000)
struct Lakeglow_C_SetActive final
{
public:
	bool                                          Activate;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECollisionEnabled                             Temp_byte_Variable;                                // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             Temp_byte_Variable_1;                              // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            K2Node_Select_Default;                             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             K2Node_Select_Default_1;                           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Lakeglow_C_SetActive) == 0x000008, "Wrong alignment on Lakeglow_C_SetActive");
static_assert(sizeof(Lakeglow_C_SetActive) == 0x000030, "Wrong size on Lakeglow_C_SetActive");
static_assert(offsetof(Lakeglow_C_SetActive, Activate) == 0x000000, "Member 'Lakeglow_C_SetActive::Activate' has a wrong offset!");
static_assert(offsetof(Lakeglow_C_SetActive, Temp_bool_Variable) == 0x000001, "Member 'Lakeglow_C_SetActive::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Lakeglow_C_SetActive, Temp_object_Variable) == 0x000008, "Member 'Lakeglow_C_SetActive::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(Lakeglow_C_SetActive, Temp_object_Variable_1) == 0x000010, "Member 'Lakeglow_C_SetActive::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(Lakeglow_C_SetActive, Temp_bool_Variable_1) == 0x000018, "Member 'Lakeglow_C_SetActive::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(Lakeglow_C_SetActive, Temp_byte_Variable) == 0x000019, "Member 'Lakeglow_C_SetActive::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(Lakeglow_C_SetActive, Temp_byte_Variable_1) == 0x00001A, "Member 'Lakeglow_C_SetActive::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(Lakeglow_C_SetActive, K2Node_Select_Default) == 0x000020, "Member 'Lakeglow_C_SetActive::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Lakeglow_C_SetActive, K2Node_Select_Default_1) == 0x000028, "Member 'Lakeglow_C_SetActive::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(Lakeglow_C_SetActive, CallFunc_SetStaticMesh_ReturnValue) == 0x000029, "Member 'Lakeglow_C_SetActive::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");

}

