#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VictoryBPLibrary

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK
{

// Enum VictoryBPLibrary.ESpeedUnit
// NumValues: 0x000D
enum class ESpeedUnit : uint8
{
	CentimeterPerSecond                      = 0,
	FootPerSecond                            = 1,
	MeterPerSecond                           = 2,
	MeterPerMinute                           = 3,
	KilometerPerSecond                       = 4,
	KilometerPerMinute                       = 5,
	KilometerPerHour                         = 6,
	MilePerHour                              = 7,
	Knot                                     = 8,
	Mach                                     = 9,
	SpeedOfLight                             = 10,
	YardPerSecond                            = 11,
	ESpeedUnit_MAX                           = 12,
};

// Enum VictoryBPLibrary.EJoyGraphicsFullScreen
// NumValues: 0x0004
enum class EJoyGraphicsFullScreen : uint8
{
	FullScreen                               = 0,
	WindowedFullScreen                       = 1,
	WindowedFullScreenPerformance            = 2,
	EJoyGraphicsFullScreen_Max               = 3,
};

// Enum VictoryBPLibrary.EVictoryHMDDevice
// NumValues: 0x0007
enum class EVictoryHMDDevice : uint8
{
	None                                     = 0,
	OculusRift                               = 1,
	Morpheus                                 = 2,
	ES2GenericStereoMesh                     = 3,
	SteamVR                                  = 4,
	GearVR                                   = 5,
	EVictoryHMDDevice_MAX                    = 6,
};

// Enum VictoryBPLibrary.EJoyImageFormats
// NumValues: 0x0007
enum class EJoyImageFormats : uint8
{
	JPG                                      = 0,
	PNG                                      = 1,
	BMP                                      = 2,
	ICO                                      = 3,
	EXR                                      = 4,
	ICNS                                     = 5,
	EJoyImageFormats_MAX                     = 6,
};

// ScriptStruct VictoryBPLibrary.LevelStreamInstanceInfo
// 0x0030 (0x0030 - 0x0000)
struct FLevelStreamInstanceInfo final
{
public:
	class FName                                   PackageName;                                       // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PackageNameToLoad;                                 // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x001C(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bShouldBeLoaded : 1;                               // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShouldBeVisible : 1;                              // 0x0028(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShouldBlockOnLoad : 1;                            // 0x0028(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D44[0x3];                                      // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LODIndex;                                          // 0x002C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLevelStreamInstanceInfo) == 0x000004, "Wrong alignment on FLevelStreamInstanceInfo");
static_assert(sizeof(FLevelStreamInstanceInfo) == 0x000030, "Wrong size on FLevelStreamInstanceInfo");
static_assert(offsetof(FLevelStreamInstanceInfo, PackageName) == 0x000000, "Member 'FLevelStreamInstanceInfo::PackageName' has a wrong offset!");
static_assert(offsetof(FLevelStreamInstanceInfo, PackageNameToLoad) == 0x000008, "Member 'FLevelStreamInstanceInfo::PackageNameToLoad' has a wrong offset!");
static_assert(offsetof(FLevelStreamInstanceInfo, Location) == 0x000010, "Member 'FLevelStreamInstanceInfo::Location' has a wrong offset!");
static_assert(offsetof(FLevelStreamInstanceInfo, Rotation) == 0x00001C, "Member 'FLevelStreamInstanceInfo::Rotation' has a wrong offset!");
static_assert(offsetof(FLevelStreamInstanceInfo, LODIndex) == 0x00002C, "Member 'FLevelStreamInstanceInfo::LODIndex' has a wrong offset!");

// ScriptStruct VictoryBPLibrary.VictoryInputAxis
// 0x0040 (0x0040 - 0x0000)
struct FVictoryInputAxis final
{
public:
	class FString                                 AxisName;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KeyAsString;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   Key;                                               // 0x0020(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D45[0x4];                                      // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVictoryInputAxis) == 0x000008, "Wrong alignment on FVictoryInputAxis");
static_assert(sizeof(FVictoryInputAxis) == 0x000040, "Wrong size on FVictoryInputAxis");
static_assert(offsetof(FVictoryInputAxis, AxisName) == 0x000000, "Member 'FVictoryInputAxis::AxisName' has a wrong offset!");
static_assert(offsetof(FVictoryInputAxis, KeyAsString) == 0x000010, "Member 'FVictoryInputAxis::KeyAsString' has a wrong offset!");
static_assert(offsetof(FVictoryInputAxis, Key) == 0x000020, "Member 'FVictoryInputAxis::Key' has a wrong offset!");
static_assert(offsetof(FVictoryInputAxis, Scale) == 0x000038, "Member 'FVictoryInputAxis::Scale' has a wrong offset!");

// ScriptStruct VictoryBPLibrary.VictoryInput
// 0x0040 (0x0040 - 0x0000)
struct FVictoryInput final
{
public:
	class FString                                 ActionName;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   Key;                                               // 0x0010(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KeyAsString;                                       // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bShift : 1;                                        // 0x0038(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCtrl : 1;                                         // 0x0038(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAlt : 1;                                          // 0x0038(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCmd : 1;                                          // 0x0038(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D46[0x7];                                      // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVictoryInput) == 0x000008, "Wrong alignment on FVictoryInput");
static_assert(sizeof(FVictoryInput) == 0x000040, "Wrong size on FVictoryInput");
static_assert(offsetof(FVictoryInput, ActionName) == 0x000000, "Member 'FVictoryInput::ActionName' has a wrong offset!");
static_assert(offsetof(FVictoryInput, Key) == 0x000010, "Member 'FVictoryInput::Key' has a wrong offset!");
static_assert(offsetof(FVictoryInput, KeyAsString) == 0x000028, "Member 'FVictoryInput::KeyAsString' has a wrong offset!");

// ScriptStruct VictoryBPLibrary.VictorySubtitleCue
// 0x0020 (0x0020 - 0x0000)
struct FVictorySubtitleCue final
{
public:
	class FText                                   SubtitleText;                                      // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D47[0x4];                                      // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVictorySubtitleCue) == 0x000008, "Wrong alignment on FVictorySubtitleCue");
static_assert(sizeof(FVictorySubtitleCue) == 0x000020, "Wrong size on FVictorySubtitleCue");
static_assert(offsetof(FVictorySubtitleCue, SubtitleText) == 0x000000, "Member 'FVictorySubtitleCue::SubtitleText' has a wrong offset!");
static_assert(offsetof(FVictorySubtitleCue, Time) == 0x000018, "Member 'FVictorySubtitleCue::Time' has a wrong offset!");

}

