#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Prop_binocular

#include "Basic.hpp"


namespace SDK::Params
{

// Function prop_binocular.prop_binocular_C.ExecuteUbergraph_prop_binocular
// 0x0050 (0x0050 - 0x0000)
struct Prop_binocular_C_ExecuteUbergraph_prop_binocular final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_1;                             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player;                               // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_3;                             // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode;          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_binocular_C_ExecuteUbergraph_prop_binocular) == 0x000008, "Wrong alignment on Prop_binocular_C_ExecuteUbergraph_prop_binocular");
static_assert(sizeof(Prop_binocular_C_ExecuteUbergraph_prop_binocular) == 0x000050, "Wrong size on Prop_binocular_C_ExecuteUbergraph_prop_binocular");
static_assert(offsetof(Prop_binocular_C_ExecuteUbergraph_prop_binocular, EntryPoint) == 0x000000, "Member 'Prop_binocular_C_ExecuteUbergraph_prop_binocular::EntryPoint' has a wrong offset!");
static_assert(offsetof(Prop_binocular_C_ExecuteUbergraph_prop_binocular, Temp_int_Variable) == 0x000004, "Member 'Prop_binocular_C_ExecuteUbergraph_prop_binocular::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(Prop_binocular_C_ExecuteUbergraph_prop_binocular, Temp_float_Variable) == 0x000008, "Member 'Prop_binocular_C_ExecuteUbergraph_prop_binocular::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(Prop_binocular_C_ExecuteUbergraph_prop_binocular, CallFunc_Percent_IntInt_ReturnValue) == 0x00000C, "Member 'Prop_binocular_C_ExecuteUbergraph_prop_binocular::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_binocular_C_ExecuteUbergraph_prop_binocular, Temp_float_Variable_1) == 0x000010, "Member 'Prop_binocular_C_ExecuteUbergraph_prop_binocular::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(Prop_binocular_C_ExecuteUbergraph_prop_binocular, Temp_float_Variable_2) == 0x000014, "Member 'Prop_binocular_C_ExecuteUbergraph_prop_binocular::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(Prop_binocular_C_ExecuteUbergraph_prop_binocular, Temp_int_Variable_1) == 0x000018, "Member 'Prop_binocular_C_ExecuteUbergraph_prop_binocular::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(Prop_binocular_C_ExecuteUbergraph_prop_binocular, K2Node_Event_player_1) == 0x000020, "Member 'Prop_binocular_C_ExecuteUbergraph_prop_binocular::K2Node_Event_player_1' has a wrong offset!");
static_assert(offsetof(Prop_binocular_C_ExecuteUbergraph_prop_binocular, K2Node_Event_player) == 0x000028, "Member 'Prop_binocular_C_ExecuteUbergraph_prop_binocular::K2Node_Event_player' has a wrong offset!");
static_assert(offsetof(Prop_binocular_C_ExecuteUbergraph_prop_binocular, CallFunc_Subtract_IntInt_ReturnValue) == 0x000030, "Member 'Prop_binocular_C_ExecuteUbergraph_prop_binocular::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_binocular_C_ExecuteUbergraph_prop_binocular, CallFunc_Add_IntInt_ReturnValue) == 0x000034, "Member 'Prop_binocular_C_ExecuteUbergraph_prop_binocular::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_binocular_C_ExecuteUbergraph_prop_binocular, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'Prop_binocular_C_ExecuteUbergraph_prop_binocular::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_binocular_C_ExecuteUbergraph_prop_binocular, Temp_float_Variable_3) == 0x00003C, "Member 'Prop_binocular_C_ExecuteUbergraph_prop_binocular::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(Prop_binocular_C_ExecuteUbergraph_prop_binocular, CallFunc_getMainGamemode_AsMain_Gamemode) == 0x000040, "Member 'Prop_binocular_C_ExecuteUbergraph_prop_binocular::CallFunc_getMainGamemode_AsMain_Gamemode' has a wrong offset!");
static_assert(offsetof(Prop_binocular_C_ExecuteUbergraph_prop_binocular, K2Node_Select_Default) == 0x000048, "Member 'Prop_binocular_C_ExecuteUbergraph_prop_binocular::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Prop_binocular_C_ExecuteUbergraph_prop_binocular, CallFunc_SelectFloat_ReturnValue) == 0x00004C, "Member 'Prop_binocular_C_ExecuteUbergraph_prop_binocular::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");

// Function prop_binocular.prop_binocular_C.updPP
// 0x0010 (0x0010 - 0x0000)
struct Prop_binocular_C_UpdPP final
{
public:
	class AMainPlayer_C*                          Self2;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_binocular_C_UpdPP) == 0x000008, "Wrong alignment on Prop_binocular_C_UpdPP");
static_assert(sizeof(Prop_binocular_C_UpdPP) == 0x000010, "Wrong size on Prop_binocular_C_UpdPP");
static_assert(offsetof(Prop_binocular_C_UpdPP, Self2) == 0x000000, "Member 'Prop_binocular_C_UpdPP::Self2' has a wrong offset!");
static_assert(offsetof(Prop_binocular_C_UpdPP, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000008, "Member 'Prop_binocular_C_UpdPP::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_binocular_C_UpdPP, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x00000C, "Member 'Prop_binocular_C_UpdPP::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");

// Function prop_binocular.prop_binocular_C.playerUnequip
// 0x0008 (0x0008 - 0x0000)
struct Prop_binocular_C_PlayerUnequip final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_binocular_C_PlayerUnequip) == 0x000008, "Wrong alignment on Prop_binocular_C_PlayerUnequip");
static_assert(sizeof(Prop_binocular_C_PlayerUnequip) == 0x000008, "Wrong size on Prop_binocular_C_PlayerUnequip");
static_assert(offsetof(Prop_binocular_C_PlayerUnequip, Player) == 0x000000, "Member 'Prop_binocular_C_PlayerUnequip::Player' has a wrong offset!");

// Function prop_binocular.prop_binocular_C.playerHandUse_RMB
// 0x0008 (0x0008 - 0x0000)
struct Prop_binocular_C_PlayerHandUse_RMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_binocular_C_PlayerHandUse_RMB) == 0x000008, "Wrong alignment on Prop_binocular_C_PlayerHandUse_RMB");
static_assert(sizeof(Prop_binocular_C_PlayerHandUse_RMB) == 0x000008, "Wrong size on Prop_binocular_C_PlayerHandUse_RMB");
static_assert(offsetof(Prop_binocular_C_PlayerHandUse_RMB, Player) == 0x000000, "Member 'Prop_binocular_C_PlayerHandUse_RMB::Player' has a wrong offset!");

}

