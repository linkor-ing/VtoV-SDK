#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MainGamemode

#include "Basic.hpp"

#include "MainGamemode_classes.hpp"
#include "MainGamemode_parameters.hpp"


namespace SDK
{

// Function mainGamemode.mainGamemode_C.dishesStop__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::DishesStop__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "dishesStop__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.powerChanged__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Active_calc                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Active_downl                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Active_coords                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Active_play                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Active_light                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMainGamemode_C::PowerChanged__DelegateSignature(bool Active_calc, bool Active_downl, bool Active_coords, bool Active_play, bool Active_light)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "powerChanged__DelegateSignature");

	Params::MainGamemode_C_PowerChanged__DelegateSignature Parms{};

	Parms.Active_calc = Active_calc;
	Parms.Active_downl = Active_downl;
	Parms.Active_coords = Active_coords;
	Parms.Active_play = Active_play;
	Parms.Active_light = Active_light;

	UObject::ProcessEvent(Func, &Parms);
}


// Function mainGamemode.mainGamemode_C.wokenUp__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::WokenUp__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "wokenUp__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.fellAsleep__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::FellAsleep__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "fellAsleep__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.sleepTriggered__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::SleepTriggered__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "sleepTriggered__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.photoTaken__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::PhotoTaken__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "photoTaken__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.ExecuteUbergraph_mainGamemode
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMainGamemode_C::ExecuteUbergraph_mainGamemode(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "ExecuteUbergraph_mainGamemode");

	Params::MainGamemode_C_ExecuteUbergraph_mainGamemode Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function mainGamemode.mainGamemode_C.checkATV
// (BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::CheckATV()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "checkATV");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.chk1
// (BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::Chk1()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "chk1");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.ticker_lockerhead
// (BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::Ticker_lockerhead()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "ticker_lockerhead");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.ticker_radiotowerPoof
// (BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::Ticker_radiotowerPoof()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "ticker_radiotowerPoof");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.fuckYOuItem
// (BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::FuckYOuItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "fuckYOuItem");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.import_radio
// (BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::Import_radio()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "import_radio");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.import_tv
// (BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::Import_tv()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "import_tv");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.importAssets
// (BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::ImportAssets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "importAssets");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.exportPhoto
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Dimension_1                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMainGamemode_C::ExportPhoto(int32 Dimension_1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "exportPhoto");

	Params::MainGamemode_C_ExportPhoto Parms{};

	Parms.Dimension_1 = Dimension_1;

	UObject::ProcessEvent(Func, &Parms);
}


// Function mainGamemode.mainGamemode_C.AAA
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bSuccess                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMainGamemode_C::AAA(bool bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "AAA");

	Params::MainGamemode_C_AAA Parms{};

	Parms.bSuccess = bSuccess;

	UObject::ProcessEvent(Func, &Parms);
}


// Function mainGamemode.mainGamemode_C.photo
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          NewLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         NewRotation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMainGamemode_C::Photo(const struct FVector& NewLocation, const struct FRotator& NewRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "photo");

	Params::MainGamemode_C_Photo Parms{};

	Parms.NewLocation = std::move(NewLocation);
	Parms.NewRotation = std::move(NewRotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function mainGamemode.mainGamemode_C.seVis
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUserWidget*                      Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMainGamemode_C::SeVis(class UUserWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "seVis");

	Params::MainGamemode_C_SeVis Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function mainGamemode.mainGamemode_C.settingsApplied
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FStruct_settings                 Settings                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMainGamemode_C::SettingsApplied(const struct FStruct_settings& Settings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "settingsApplied");

	Params::MainGamemode_C_SettingsApplied Parms{};

	Parms.Settings = std::move(Settings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function mainGamemode.mainGamemode_C.autosave
// (BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::Autosave()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "autosave");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.sleep
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Param_bed                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    DropItem                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMainGamemode_C::Sleep(class AActor* Param_bed, bool DropItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "sleep");

	Params::MainGamemode_C_Sleep Parms{};

	Parms.Param_bed = Param_bed;
	Parms.DropItem = DropItem;

	UObject::ProcessEvent(Func, &Parms);
}


// Function mainGamemode.mainGamemode_C.wakeup
// (BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::Wakeup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "wakeup");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.save
// (BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::Save()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "save");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.saveAnim
// (BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::SaveAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "saveAnim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.leaveDream
// (BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::LeaveDream()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "leaveDream");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.createDream
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           CustomDream                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMainGamemode_C::CreateDream(class UClass* CustomDream)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "createDream");

	Params::MainGamemode_C_CreateDream Parms{};

	Parms.CustomDream = CustomDream;

	UObject::ProcessEvent(Func, &Parms);
}


// Function mainGamemode.mainGamemode_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMainGamemode_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "ReceiveTick");

	Params::MainGamemode_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function mainGamemode.mainGamemode_C.checkFordDishes
// (BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::CheckFordDishes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "checkFordDishes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AMainGamemode_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.propRenderer_finishProps
// (Public, BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::PropRenderer_finishProps()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "propRenderer_finishProps");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.gamemodeMakeKeys
// (Public, BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::GamemodeMakeKeys()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "gamemodeMakeKeys");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.AnyKey
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    Pressed                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMainGamemode_C::AnyKey(const struct FKey& Key, bool Pressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "AnyKey");

	Params::MainGamemode_C_AnyKey Parms{};

	Parms.Key = std::move(Key);
	Parms.Pressed = Pressed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function mainGamemode.mainGamemode_C.gamemodePreLoad
// (Public, BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::GamemodePreLoad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "gamemodePreLoad");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.unfocused
// (Public, BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::Unfocused()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "unfocused");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.unfoc
// (Public, BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::Unfoc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "unfoc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.stuffUpgraded
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMainGamemode_C*                  GameMode                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMainGamemode_C::StuffUpgraded(class AMainGamemode_C* GameMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "stuffUpgraded");

	Params::MainGamemode_C_StuffUpgraded Parms{};

	Parms.GameMode = GameMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function mainGamemode.mainGamemode_C.gamemodeBeginPlay
// (Public, BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::GamemodeBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "gamemodeBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.signalSaved
// (Public, BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::SignalSaved()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "signalSaved");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.signalDeleted
// (Public, BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::SignalDeleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "signalDeleted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.getCurrentSObject
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FStruct_spaceObject              Data                                                   (Parm, OutParm, HasGetValueTypeHash)

void AMainGamemode_C::GetCurrentSObject(struct FStruct_spaceObject* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "getCurrentSObject");

	Params::MainGamemode_C_GetCurrentSObject Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Data != nullptr)
		*Data = std::move(Parms.Data);
}


// Function mainGamemode.mainGamemode_C.getSignalData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FStruct_signal_data2             Data                                                   (Parm, OutParm, HasGetValueTypeHash)

void AMainGamemode_C::GetSignalData(struct FStruct_signal_data2* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "getSignalData");

	Params::MainGamemode_C_GetSignalData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Data != nullptr)
		*Data = std::move(Parms.Data);
}


// Function mainGamemode.mainGamemode_C.getSignalSData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FStruct_signal_spawn             Data                                                   (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMainGamemode_C::GetSignalSData(struct FStruct_signal_spawn* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "getSignalSData");

	Params::MainGamemode_C_GetSignalSData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Data != nullptr)
		*Data = std::move(Parms.Data);
}


// Function mainGamemode.mainGamemode_C.deleteActiveSignal
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::DeleteActiveSignal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "deleteActiveSignal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.deleteSignal
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   IndexToRemove                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMainGamemode_C::DeleteSignal(int32 IndexToRemove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "deleteSignal");

	Params::MainGamemode_C_DeleteSignal Parms{};

	Parms.IndexToRemove = IndexToRemove;

	UObject::ProcessEvent(Func, &Parms);
}


// Function mainGamemode.mainGamemode_C.saveSignal
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FStruct_signalDataDynamic        Signal                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    New                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    CheckOnly                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Succ                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMainGamemode_C::SaveSignal(const struct FStruct_signalDataDynamic& Signal, bool New, bool CheckOnly, bool* Succ)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "saveSignal");

	Params::MainGamemode_C_SaveSignal Parms{};

	Parms.Signal = std::move(Signal);
	Parms.New = New;
	Parms.CheckOnly = CheckOnly;

	UObject::ProcessEvent(Func, &Parms);

	if (Succ != nullptr)
		*Succ = Parms.Succ;
}


// Function mainGamemode.mainGamemode_C.setPower
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Active_calc                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Active_downl                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Active_coords                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Active_play                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Active_light                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMainGamemode_C::SetPower(bool Active_calc, bool Active_downl, bool Active_coords, bool Active_play, bool Active_light)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "setPower");

	Params::MainGamemode_C_SetPower Parms{};

	Parms.Active_calc = Active_calc;
	Parms.Active_downl = Active_downl;
	Parms.Active_coords = Active_coords;
	Parms.Active_play = Active_play;
	Parms.Active_light = Active_light;

	UObject::ProcessEvent(Func, &Parms);
}


// Function mainGamemode.mainGamemode_C.calcServerEff
// (Public, BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::CalcServerEff()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "calcServerEff");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.breakServer
// (Public, BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::breakServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "breakServer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.getWeightedObject
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Output                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMainGamemode_C::GetWeightedObject(class FName* Output)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "getWeightedObject");

	Params::MainGamemode_C_GetWeightedObject Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Output != nullptr)
		*Output = Parms.Output;
}


// Function mainGamemode.mainGamemode_C.upgraded
// (Public, BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::Upgraded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "upgraded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.regenWeights
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<float>                           W                                                      (Parm, OutParm)

void AMainGamemode_C::RegenWeights(TArray<float>* W)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "regenWeights");

	Params::MainGamemode_C_RegenWeights Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (W != nullptr)
		*W = std::move(Parms.W);
}


// Function mainGamemode.mainGamemode_C.saveObjects
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::SaveObjects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "saveObjects");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.loadObjects
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::LoadObjects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "loadObjects");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.putObjectInventory
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMainGamemode_C::PutObjectInventory(class AActor* Actor, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "putObjectInventory");

	Params::MainGamemode_C_PutObjectInventory Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function mainGamemode.mainGamemode_C.setPrec
// (Public, BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::SetPrec()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "setPrec");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.runSubtitles
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             RowName                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAudioComponent*                  AudioComponent                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CustomTime                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param_Time                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMainGamemode_C::RunSubtitles(class FName RowName, class UAudioComponent* AudioComponent, bool CustomTime, float Speed, float Param_Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "runSubtitles");

	Params::MainGamemode_C_RunSubtitles Parms{};

	Parms.RowName = RowName;
	Parms.AudioComponent = AudioComponent;
	Parms.CustomTime = CustomTime;
	Parms.Speed = Speed;
	Parms.Param_Time = Param_Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function mainGamemode.mainGamemode_C.addEmail
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FStruct_email                    Item                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void AMainGamemode_C::AddEmail(const struct FStruct_email& Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "addEmail");

	Params::MainGamemode_C_AddEmail Parms{};

	Parms.Item = std::move(Item);

	UObject::ProcessEvent(Func, &Parms);
}


// Function mainGamemode.mainGamemode_C.addAchievementPopup
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FStruct_achievement              Data                                                   (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// int32                                   Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMainGamemode_C::AddAchievementPopup(const struct FStruct_achievement& Data, int32 Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "addAchievementPopup");

	Params::MainGamemode_C_AddAchievementPopup Parms{};

	Parms.Data = std::move(Data);
	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function mainGamemode.mainGamemode_C.AddPoints
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Add                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMainGamemode_C::AddPoints(int32 Add)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "AddPoints");

	Params::MainGamemode_C_AddPoints Parms{};

	Parms.Add = Add;

	UObject::ProcessEvent(Func, &Parms);
}


// Function mainGamemode.mainGamemode_C.enterClipboard
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AProp_clipboard_C*                Param_Clipboard                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMainGamemode_C::EnterClipboard(class AProp_clipboard_C* Param_Clipboard)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "enterClipboard");

	Params::MainGamemode_C_EnterClipboard Parms{};

	Parms.Param_Clipboard = Param_Clipboard;

	UObject::ProcessEvent(Func, &Parms);
}


// Function mainGamemode.mainGamemode_C.getDishesNames
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Num                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FString>                   Codes                                                  (Parm, OutParm)
// TArray<class FString>                   Param_Dishs                                            (Parm, OutParm)

void AMainGamemode_C::GetDishesNames(int32 Num, TArray<class FString>* Codes, TArray<class FString>* Param_Dishs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "getDishesNames");

	Params::MainGamemode_C_GetDishesNames Parms{};

	Parms.Num = Num;

	UObject::ProcessEvent(Func, &Parms);

	if (Codes != nullptr)
		*Codes = std::move(Parms.Codes);

	if (Param_Dishs != nullptr)
		*Param_Dishs = std::move(Parms.Param_Dishs);
}


// Function mainGamemode.mainGamemode_C.makeBeacons
// (Public, BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::MakeBeacons()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "makeBeacons");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.openPropInv
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AProp_container_C*                Prop                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMainGamemode_C::OpenPropInv(class AProp_container_C* Prop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "openPropInv");

	Params::MainGamemode_C_OpenPropInv Parms{};

	Parms.Prop = Prop;

	UObject::ProcessEvent(Func, &Parms);
}


// Function mainGamemode.mainGamemode_C.addRadar
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           NewItem                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMainGamemode_C::AddRadar(const class AActor*& NewItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "addRadar");

	Params::MainGamemode_C_AddRadar Parms{};

	Parms.NewItem = NewItem;

	UObject::ProcessEvent(Func, &Parms);
}


// Function mainGamemode.mainGamemode_C.removeRadar
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Item                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMainGamemode_C::RemoveRadar(const class AActor*& Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "removeRadar");

	Params::MainGamemode_C_RemoveRadar Parms{};

	Parms.Item = Item;

	UObject::ProcessEvent(Func, &Parms);
}


// Function mainGamemode.mainGamemode_C.trySpawnInsomniac
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CanSpawn                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          Loc                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMainGamemode_C::TrySpawnInsomniac(bool* CanSpawn, struct FVector* Loc)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "trySpawnInsomniac");

	Params::MainGamemode_C_TrySpawnInsomniac Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CanSpawn != nullptr)
		*CanSpawn = Parms.CanSpawn;

	if (Loc != nullptr)
		*Loc = std::move(Parms.Loc);
}


// Function mainGamemode.mainGamemode_C.gameVer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           Version                                                (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void AMainGamemode_C::GameVer(class FString* Version)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "gameVer");

	Params::MainGamemode_C_GameVer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Version != nullptr)
		*Version = std::move(Parms.Version);
}


// Function mainGamemode.mainGamemode_C.addUndo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           NewItem                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMainGamemode_C::AddUndo(const class AActor*& NewItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "addUndo");

	Params::MainGamemode_C_AddUndo Parms{};

	Parms.NewItem = NewItem;

	UObject::ProcessEvent(Func, &Parms);
}


// Function mainGamemode.mainGamemode_C.Undo
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::Undo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "Undo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.addHallFood
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::AddHallFood()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "addHallFood");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.getObjectFromKey
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ItemToFind                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class AActor*                           Output                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMainGamemode_C::GetObjectFromKey(const class FString& ItemToFind, class AActor** Output)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "getObjectFromKey");

	Params::MainGamemode_C_GetObjectFromKey Parms{};

	Parms.ItemToFind = std::move(ItemToFind);

	UObject::ProcessEvent(Func, &Parms);

	if (Output != nullptr)
		*Output = Parms.Output;
}


// Function mainGamemode.mainGamemode_C.getShot
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<uint8>                           ByteArray                                              (Parm, OutParm)

void AMainGamemode_C::GetShot(TArray<uint8>* ByteArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "getShot");

	Params::MainGamemode_C_GetShot Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ByteArray != nullptr)
		*ByteArray = std::move(Parms.ByteArray);
}


// Function mainGamemode.mainGamemode_C.screenshot
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::Screenshot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "screenshot");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.AddEquipment
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FStruct_save                     Data                                                   (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMainGamemode_C::AddEquipment(const struct FStruct_save& Data, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "AddEquipment");

	Params::MainGamemode_C_AddEquipment Parms{};

	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function mainGamemode.mainGamemode_C.RemoveEquipment
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMainGamemode_C::RemoveEquipment(int32 Param_Index, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "RemoveEquipment");

	Params::MainGamemode_C_RemoveEquipment Parms{};

	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function mainGamemode.mainGamemode_C.makePhoto
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTextureRenderTarget2D*           Output_Get                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMainGamemode_C::MakePhoto(class UTextureRenderTarget2D** Output_Get)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "makePhoto");

	Params::MainGamemode_C_MakePhoto Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Output_Get != nullptr)
		*Output_Get = Parms.Output_Get;
}


// Function mainGamemode.mainGamemode_C.spawnBlackFog
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::SpawnBlackFog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "spawnBlackFog");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.spawnRedSky
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::SpawnRedSky()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "spawnRedSky");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.enterPassword
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APasswordLock_C*                  Passlock                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMainGamemode_C::EnterPassword(class APasswordLock_C* Passlock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "enterPassword");

	Params::MainGamemode_C_EnterPassword Parms{};

	Parms.Passlock = Passlock;

	UObject::ProcessEvent(Func, &Parms);
}


// Function mainGamemode.mainGamemode_C.leavePassword
// (Public, BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::LeavePassword()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "leavePassword");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.loadTriggers
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::LoadTriggers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "loadTriggers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.saveTriggers
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::SaveTriggers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "saveTriggers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.makeItemNames
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<uint8>                           ByteArray                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString AMainGamemode_C::MakeItemNames(const TArray<uint8>& ByteArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "makeItemNames");

	Params::MainGamemode_C_MakeItemNames Parms{};

	Parms.ByteArray = std::move(ByteArray);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function mainGamemode.mainGamemode_C.canBackrooms
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMainGamemode_C::CanBackrooms(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "canBackrooms");

	Params::MainGamemode_C_CanBackrooms Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function mainGamemode.mainGamemode_C.getPrinterMeshesNames
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           A                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AMainGamemode_C::GetPrinterMeshesNames(const class FString& A)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "getPrinterMeshesNames");

	Params::MainGamemode_C_GetPrinterMeshesNames Parms{};

	Parms.A = std::move(A);

	UObject::ProcessEvent(Func, &Parms);
}


// Function mainGamemode.mainGamemode_C.getRadioStations
// (Public, BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::GetRadioStations()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "getRadioStations");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.loadPrinterMesh
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Param_Name                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    SkipMessages                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FStruct_customMesh               Mesh1                                                  (Parm, OutParm, HasGetValueTypeHash)
// class UTexture2D*                       Tex1                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTexture2D*                       Tex_pbr1                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Succ                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UTexture2D*                       Tex_normal1                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMainGamemode_C::LoadPrinterMesh(const class FString& Param_Name, bool SkipMessages, struct FStruct_customMesh* Mesh1, class UTexture2D** Tex1, class UTexture2D** Tex_pbr1, bool* Succ, class UTexture2D** Tex_normal1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "loadPrinterMesh");

	Params::MainGamemode_C_LoadPrinterMesh Parms{};

	Parms.Param_Name = std::move(Param_Name);
	Parms.SkipMessages = SkipMessages;

	UObject::ProcessEvent(Func, &Parms);

	if (Mesh1 != nullptr)
		*Mesh1 = std::move(Parms.Mesh1);

	if (Tex1 != nullptr)
		*Tex1 = Parms.Tex1;

	if (Tex_pbr1 != nullptr)
		*Tex_pbr1 = Parms.Tex_pbr1;

	if (Succ != nullptr)
		*Succ = Parms.Succ;

	if (Tex_normal1 != nullptr)
		*Tex_normal1 = Parms.Tex_normal1;
}


// Function mainGamemode.mainGamemode_C.launchServerMinigame
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUmg_serverMinigame_C*            Output_Get                                             (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMainGamemode_C::LaunchServerMinigame(class UUmg_serverMinigame_C** Output_Get)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "launchServerMinigame");

	Params::MainGamemode_C_LaunchServerMinigame Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Output_Get != nullptr)
		*Output_Get = Parms.Output_Get;
}


// Function mainGamemode.mainGamemode_C.spawnBadSun
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::SpawnBadSun()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "spawnBadSun");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.processDream
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           CustomDream                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class AActor* AMainGamemode_C::ProcessDream(class UClass* CustomDream)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "processDream");

	Params::MainGamemode_C_ProcessDream Parms{};

	Parms.CustomDream = CustomDream;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function mainGamemode.mainGamemode_C.enterDrawPaper
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AProp_paper_drawable_C*           Param_PaperDraw                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AProp_pencil_C*                   Pencil                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMainGamemode_C::EnterDrawPaper(class AProp_paper_drawable_C* Param_PaperDraw, class AProp_pencil_C* Pencil)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "enterDrawPaper");

	Params::MainGamemode_C_EnterDrawPaper Parms{};

	Parms.Param_PaperDraw = Param_PaperDraw;
	Parms.Pencil = Pencil;

	UObject::ProcessEvent(Func, &Parms);
}


// Function mainGamemode.mainGamemode_C.saveHoldObj
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::SaveHoldObj()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "saveHoldObj");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.calcRads
// (Public, BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::CalcRads()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "calcRads");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.spawnPropThroughGamemode
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Prop                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       InputPin                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// int32                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Actor_                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMainGamemode_C::SpawnPropThroughGamemode(class FName Prop, const struct FTransform& InputPin, int32 Amount, class AActor** Actor_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "spawnPropThroughGamemode");

	Params::MainGamemode_C_SpawnPropThroughGamemode Parms{};

	Parms.Prop = Prop;
	Parms.InputPin = std::move(InputPin);
	Parms.Amount = Amount;

	UObject::ProcessEvent(Func, &Parms);

	if (Actor_ != nullptr)
		*Actor_ = Parms.Actor_;
}


// Function mainGamemode.mainGamemode_C.setDryness
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Add                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMainGamemode_C::SetDryness(float Add)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "setDryness");

	Params::MainGamemode_C_SetDryness Parms{};

	Parms.Add = Add;

	UObject::ProcessEvent(Func, &Parms);
}


// Function mainGamemode.mainGamemode_C.chckcy
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AMainGamemode_C::Chckcy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "chckcy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function mainGamemode.mainGamemode_C.dreamInv
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FStruct_save>             Invv                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class ADreamBase_C*                     Base                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMainGamemode_C::DreamInv(TArray<struct FStruct_save>& Invv, class ADreamBase_C** Base)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "dreamInv");

	Params::MainGamemode_C_DreamInv Parms{};

	Parms.Invv = std::move(Invv);

	UObject::ProcessEvent(Func, &Parms);

	Invv = std::move(Parms.Invv);

	if (Base != nullptr)
		*Base = Parms.Base;
}


// Function mainGamemode.mainGamemode_C.applyColor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMainGamemode_C::ApplyColor(const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("mainGamemode_C", "applyColor");

	Params::MainGamemode_C_ApplyColor Parms{};

	Parms.Color = std::move(Color);

	UObject::ProcessEvent(Func, &Parms);
}

}

