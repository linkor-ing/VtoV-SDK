#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Dream_run

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function dream_run.dream_run_C.ExecuteUbergraph_dream_run
// 0x0278 (0x0278 - 0x0000)
struct Dream_run_C_ExecuteUbergraph_dream_run final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33F8[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USave_main_C*                           CallFunc_getMainSave_save_main;                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_1;  // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_1;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_1;            // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_1;       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep_1;           // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33F9[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult_1;          // 0x0038(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode;          // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          CallFunc_getMainPlayer_AsMain_Player;              // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_addFood_full;                             // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33FA[0x3];                                     // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x00E8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33FB[0x3];                                     // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x00F8(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0180(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33FC[0x4];                                     // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode_1;        // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0198(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AMainPlayer_C*                          CallFunc_getMainPlayer_AsMain_Player_1;            // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x022C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0238(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_addFood_full_1;                           // 0x0244(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33FD[0x3];                                     // 0x0245(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x024C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x0258(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0264(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VictoryFloatPlusEquals_FloatOut;          // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue_1;       // 0x026C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VictoryFloatPlusEquals_FloatOut_1;        // 0x0274(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Dream_run_C_ExecuteUbergraph_dream_run) == 0x000008, "Wrong alignment on Dream_run_C_ExecuteUbergraph_dream_run");
static_assert(sizeof(Dream_run_C_ExecuteUbergraph_dream_run) == 0x000278, "Wrong size on Dream_run_C_ExecuteUbergraph_dream_run");
static_assert(offsetof(Dream_run_C_ExecuteUbergraph_dream_run, EntryPoint) == 0x000000, "Member 'Dream_run_C_ExecuteUbergraph_dream_run::EntryPoint' has a wrong offset!");
static_assert(offsetof(Dream_run_C_ExecuteUbergraph_dream_run, CallFunc_getMainSave_save_main) == 0x000008, "Member 'Dream_run_C_ExecuteUbergraph_dream_run::CallFunc_getMainSave_save_main' has a wrong offset!");
static_assert(offsetof(Dream_run_C_ExecuteUbergraph_dream_run, K2Node_Event_DeltaSeconds) == 0x000010, "Member 'Dream_run_C_ExecuteUbergraph_dream_run::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(Dream_run_C_ExecuteUbergraph_dream_run, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'Dream_run_C_ExecuteUbergraph_dream_run::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dream_run_C_ExecuteUbergraph_dream_run, K2Node_ComponentBoundEvent_OverlappedComponent_1) == 0x000018, "Member 'Dream_run_C_ExecuteUbergraph_dream_run::K2Node_ComponentBoundEvent_OverlappedComponent_1' has a wrong offset!");
static_assert(offsetof(Dream_run_C_ExecuteUbergraph_dream_run, K2Node_ComponentBoundEvent_OtherActor_1) == 0x000020, "Member 'Dream_run_C_ExecuteUbergraph_dream_run::K2Node_ComponentBoundEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(Dream_run_C_ExecuteUbergraph_dream_run, K2Node_ComponentBoundEvent_OtherComp_1) == 0x000028, "Member 'Dream_run_C_ExecuteUbergraph_dream_run::K2Node_ComponentBoundEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(Dream_run_C_ExecuteUbergraph_dream_run, K2Node_ComponentBoundEvent_OtherBodyIndex_1) == 0x000030, "Member 'Dream_run_C_ExecuteUbergraph_dream_run::K2Node_ComponentBoundEvent_OtherBodyIndex_1' has a wrong offset!");
static_assert(offsetof(Dream_run_C_ExecuteUbergraph_dream_run, K2Node_ComponentBoundEvent_bFromSweep_1) == 0x000034, "Member 'Dream_run_C_ExecuteUbergraph_dream_run::K2Node_ComponentBoundEvent_bFromSweep_1' has a wrong offset!");
static_assert(offsetof(Dream_run_C_ExecuteUbergraph_dream_run, K2Node_ComponentBoundEvent_SweepResult_1) == 0x000038, "Member 'Dream_run_C_ExecuteUbergraph_dream_run::K2Node_ComponentBoundEvent_SweepResult_1' has a wrong offset!");
static_assert(offsetof(Dream_run_C_ExecuteUbergraph_dream_run, CallFunc_getMainGamemode_AsMain_Gamemode) == 0x0000C0, "Member 'Dream_run_C_ExecuteUbergraph_dream_run::CallFunc_getMainGamemode_AsMain_Gamemode' has a wrong offset!");
static_assert(offsetof(Dream_run_C_ExecuteUbergraph_dream_run, CallFunc_getMainPlayer_AsMain_Player) == 0x0000C8, "Member 'Dream_run_C_ExecuteUbergraph_dream_run::CallFunc_getMainPlayer_AsMain_Player' has a wrong offset!");
static_assert(offsetof(Dream_run_C_ExecuteUbergraph_dream_run, CallFunc_addFood_full) == 0x0000D0, "Member 'Dream_run_C_ExecuteUbergraph_dream_run::CallFunc_addFood_full' has a wrong offset!");
static_assert(offsetof(Dream_run_C_ExecuteUbergraph_dream_run, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x0000D4, "Member 'Dream_run_C_ExecuteUbergraph_dream_run::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dream_run_C_ExecuteUbergraph_dream_run, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x0000D8, "Member 'Dream_run_C_ExecuteUbergraph_dream_run::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Dream_run_C_ExecuteUbergraph_dream_run, K2Node_ComponentBoundEvent_OtherActor) == 0x0000E0, "Member 'Dream_run_C_ExecuteUbergraph_dream_run::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(Dream_run_C_ExecuteUbergraph_dream_run, K2Node_ComponentBoundEvent_OtherComp) == 0x0000E8, "Member 'Dream_run_C_ExecuteUbergraph_dream_run::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(Dream_run_C_ExecuteUbergraph_dream_run, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x0000F0, "Member 'Dream_run_C_ExecuteUbergraph_dream_run::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Dream_run_C_ExecuteUbergraph_dream_run, K2Node_ComponentBoundEvent_bFromSweep) == 0x0000F4, "Member 'Dream_run_C_ExecuteUbergraph_dream_run::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(Dream_run_C_ExecuteUbergraph_dream_run, K2Node_ComponentBoundEvent_SweepResult) == 0x0000F8, "Member 'Dream_run_C_ExecuteUbergraph_dream_run::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(Dream_run_C_ExecuteUbergraph_dream_run, CallFunc_MakeVector_ReturnValue) == 0x000180, "Member 'Dream_run_C_ExecuteUbergraph_dream_run::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dream_run_C_ExecuteUbergraph_dream_run, CallFunc_getMainGamemode_AsMain_Gamemode_1) == 0x000190, "Member 'Dream_run_C_ExecuteUbergraph_dream_run::CallFunc_getMainGamemode_AsMain_Gamemode_1' has a wrong offset!");
static_assert(offsetof(Dream_run_C_ExecuteUbergraph_dream_run, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000198, "Member 'Dream_run_C_ExecuteUbergraph_dream_run::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Dream_run_C_ExecuteUbergraph_dream_run, CallFunc_getMainPlayer_AsMain_Player_1) == 0x000220, "Member 'Dream_run_C_ExecuteUbergraph_dream_run::CallFunc_getMainPlayer_AsMain_Player_1' has a wrong offset!");
static_assert(offsetof(Dream_run_C_ExecuteUbergraph_dream_run, Temp_int_Variable) == 0x000228, "Member 'Dream_run_C_ExecuteUbergraph_dream_run::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(Dream_run_C_ExecuteUbergraph_dream_run, CallFunc_GetActorForwardVector_ReturnValue) == 0x00022C, "Member 'Dream_run_C_ExecuteUbergraph_dream_run::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dream_run_C_ExecuteUbergraph_dream_run, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000238, "Member 'Dream_run_C_ExecuteUbergraph_dream_run::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dream_run_C_ExecuteUbergraph_dream_run, CallFunc_addFood_full_1) == 0x000244, "Member 'Dream_run_C_ExecuteUbergraph_dream_run::CallFunc_addFood_full_1' has a wrong offset!");
static_assert(offsetof(Dream_run_C_ExecuteUbergraph_dream_run, CallFunc_RandomFloatInRange_ReturnValue) == 0x000248, "Member 'Dream_run_C_ExecuteUbergraph_dream_run::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dream_run_C_ExecuteUbergraph_dream_run, CallFunc_MakeVector_ReturnValue_1) == 0x00024C, "Member 'Dream_run_C_ExecuteUbergraph_dream_run::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Dream_run_C_ExecuteUbergraph_dream_run, CallFunc_RotateAngleAxis_ReturnValue) == 0x000258, "Member 'Dream_run_C_ExecuteUbergraph_dream_run::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dream_run_C_ExecuteUbergraph_dream_run, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000264, "Member 'Dream_run_C_ExecuteUbergraph_dream_run::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dream_run_C_ExecuteUbergraph_dream_run, CallFunc_VictoryFloatPlusEquals_FloatOut) == 0x000268, "Member 'Dream_run_C_ExecuteUbergraph_dream_run::CallFunc_VictoryFloatPlusEquals_FloatOut' has a wrong offset!");
static_assert(offsetof(Dream_run_C_ExecuteUbergraph_dream_run, CallFunc_GetWorldDeltaSeconds_ReturnValue_1) == 0x00026C, "Member 'Dream_run_C_ExecuteUbergraph_dream_run::CallFunc_GetWorldDeltaSeconds_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Dream_run_C_ExecuteUbergraph_dream_run, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000270, "Member 'Dream_run_C_ExecuteUbergraph_dream_run::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Dream_run_C_ExecuteUbergraph_dream_run, CallFunc_VictoryFloatPlusEquals_FloatOut_1) == 0x000274, "Member 'Dream_run_C_ExecuteUbergraph_dream_run::CallFunc_VictoryFloatPlusEquals_FloatOut_1' has a wrong offset!");

// Function dream_run.dream_run_C.BndEvt__wok_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct Dream_run_C_BndEvt__wok_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33FE[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Dream_run_C_BndEvt__wok_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on Dream_run_C_BndEvt__wok_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(Dream_run_C_BndEvt__wok_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on Dream_run_C_BndEvt__wok_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(Dream_run_C_BndEvt__wok_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'Dream_run_C_BndEvt__wok_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Dream_run_C_BndEvt__wok_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'Dream_run_C_BndEvt__wok_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(Dream_run_C_BndEvt__wok_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'Dream_run_C_BndEvt__wok_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(Dream_run_C_BndEvt__wok_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'Dream_run_C_BndEvt__wok_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Dream_run_C_BndEvt__wok_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'Dream_run_C_BndEvt__wok_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(Dream_run_C_BndEvt__wok_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'Dream_run_C_BndEvt__wok_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function dream_run.dream_run_C.BndEvt__fin_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct Dream_run_C_BndEvt__fin_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33FF[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Dream_run_C_BndEvt__fin_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on Dream_run_C_BndEvt__fin_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(Dream_run_C_BndEvt__fin_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on Dream_run_C_BndEvt__fin_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(Dream_run_C_BndEvt__fin_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'Dream_run_C_BndEvt__fin_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Dream_run_C_BndEvt__fin_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'Dream_run_C_BndEvt__fin_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(Dream_run_C_BndEvt__fin_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'Dream_run_C_BndEvt__fin_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(Dream_run_C_BndEvt__fin_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'Dream_run_C_BndEvt__fin_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Dream_run_C_BndEvt__fin_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'Dream_run_C_BndEvt__fin_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(Dream_run_C_BndEvt__fin_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'Dream_run_C_BndEvt__fin_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function dream_run.dream_run_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct Dream_run_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Dream_run_C_ReceiveTick) == 0x000004, "Wrong alignment on Dream_run_C_ReceiveTick");
static_assert(sizeof(Dream_run_C_ReceiveTick) == 0x000004, "Wrong size on Dream_run_C_ReceiveTick");
static_assert(offsetof(Dream_run_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'Dream_run_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

}

