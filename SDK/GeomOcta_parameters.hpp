#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GeomOcta

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "AIModule_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function geomOcta.geomOcta_C.ExecuteUbergraph_geomOcta
// 0x05F0 (0x05F0 - 0x0000)
struct GeomOcta_C_ExecuteUbergraph_geomOcta final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NotifyName_13;                  // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate;              // 0x000C(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   K2Node_CustomEvent_NotifyName_12;                  // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_1;            // 0x0024(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   K2Node_CustomEvent_NotifyName_11;                  // 0x0034(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_2;            // 0x003C(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   K2Node_CustomEvent_NotifyName_10;                  // 0x004C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_3;            // 0x0054(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   Temp_name_Variable;                                // 0x0064(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_4;            // 0x006C(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_CustomEvent_NotifyName_9;                   // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NotifyName_8;                   // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_5;            // 0x0090(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   K2Node_CustomEvent_NotifyName_7;                   // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_6;            // 0x00A8(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   K2Node_CustomEvent_NotifyName_6;                   // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_7;            // 0x00C0(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   K2Node_CustomEvent_NotifyName_5;                   // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_8;            // 0x00D8(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   Temp_name_Variable_1;                              // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_9;            // 0x00F0(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          K2Node_SwitchName_CmpSuccess_1;                    // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_CustomEvent_NotifyName_4;                   // 0x0104(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NotifyName_3;                   // 0x010C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_10;           // 0x0114(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   K2Node_CustomEvent_NotifyName_2;                   // 0x0124(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_11;           // 0x012C(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   K2Node_CustomEvent_NotifyName_1;                   // 0x013C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_12;           // 0x0144(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   K2Node_CustomEvent_NotifyName;                     // 0x0154(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_13;           // 0x015C(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   Temp_name_Variable_2;                              // 0x016C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchName_CmpSuccess_2;                    // 0x0174(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0175(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPathFollowingResult                          K2Node_CustomEvent_MovementResult_1;               // 0x0176(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_177[0x1];                                      // 0x0177(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EPathFollowingResult MovementResult)> K2Node_CreateDelegate_OutputDelegate_14;           // 0x0178(0x0010)(ZeroConstructor, NoDestructor)
	EPathFollowingResult                          K2Node_CustomEvent_MovementResult;                 // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_189[0x3];                                      // 0x0189(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EPathFollowingResult MovementResult)> K2Node_CreateDelegate_OutputDelegate_15;           // 0x018C(0x0010)(ZeroConstructor, NoDestructor)
	EPathFollowingResult                          Temp_byte_Variable;                                // 0x019C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19D[0x3];                                      // 0x019D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_16;           // 0x01A0(0x0010)(ZeroConstructor, NoDestructor)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x01B0(0x0008)(NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_17;           // 0x01B8(0x0010)(ZeroConstructor, NoDestructor)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_1;        // 0x01C8(0x0008)(NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_actor;                          // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayMontageCallbackProxy*              CallFunc_CreateProxyObjectForPlayMontage_ReturnValue; // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E1[0x7];                                      // 0x01E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_1;  // 0x01E8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_1;           // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_1;            // 0x01F8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_1;       // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep_1;           // 0x0204(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_205[0x3];                                      // 0x0205(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult_1;          // 0x0208(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_291[0x7];                                      // 0x0291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayMontageCallbackProxy*              CallFunc_CreateProxyObjectForPlayMontage_ReturnValue_1; // 0x0298(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x02A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A1[0x7];                                      // 0x02A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayMontageCallbackProxy*              CallFunc_CreateProxyObjectForPlayMontage_ReturnValue_2; // 0x02A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x02B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B2[0x2];                                      // 0x02B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x02B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_rot_OutputPin;                            // 0x02B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x02C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_Condition_1;                    // 0x02D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D1[0x3];                                      // 0x02D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_rot_OutputPin_1;                          // 0x02D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOverlappingActor_ReturnValue;           // 0x02E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_Condition;                      // 0x02E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E2[0x2];                                      // 0x02E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue;  // 0x02E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x02E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_1; // 0x02EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_1;                       // 0x02F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_FloatToVector_ReturnValue;           // 0x02F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_rot_OutputPin_2;                          // 0x0300(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_30C[0x4];                                      // 0x030C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0310(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0340(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_341[0x3];                                      // 0x0341(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0344(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetRandomReachablePointInRadius_RandomLocation; // 0x0350(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_GetRandomReachablePointInRadius_ReturnValue; // 0x035C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35D[0x3];                                      // 0x035D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAIAsyncTaskBlueprintProxy*             CallFunc_CreateMoveToProxyObject_ReturnValue;      // 0x0360(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0368(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_369[0x3];                                      // 0x0369(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x036C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x0378(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x0379(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_37A[0x2];                                      // 0x037A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x037C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_2;                       // 0x0388(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x038C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0390(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x0394(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x03A0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue_1;       // 0x0428(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42C[0x4];                                      // 0x042C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAttached_ReturnValue;         // 0x0430(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_2; // 0x0438(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_3;                       // 0x043C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0440(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0444(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VictoryFloatPlusEquals_FloatOut;          // 0x0448(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Percent_FloatFloat_ReturnValue;           // 0x044C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0450(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_451[0x3];                                      // 0x0451(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_CustomEvent_NotifyName_14;                  // 0x0454(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_3;        // 0x045C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_3; // 0x0468(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_4;                       // 0x046C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_4; // 0x0470(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_5;                       // 0x0474(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_6;                       // 0x0478(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_5; // 0x047C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_7;                       // 0x0480(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_484[0x4];                                      // 0x0484(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0488(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0490(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0498(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x04A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x04A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A5[0x3];                                      // 0x04A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x04A8(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_18;           // 0x0530(0x0010)(ZeroConstructor, NoDestructor)
	struct FVector                                CallFunc_GetComponentVelocity_ReturnValue;         // 0x0540(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x054C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSimulatingPhysics_ReturnValue;          // 0x0550(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0551(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_552[0x2];                                      // 0x0552(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_4;        // 0x0554(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_5;        // 0x0560(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_56C[0x4];                                      // 0x056C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetOverlappingActors_OverlappingActors;   // 0x0570(0x0010)(ReferenceParm)
	TArray<class AActor*>                         K2Node_LowEntry_LocalVariable_Value__Object;       // 0x0580(0x0010)(ReferenceParm)
	float                                         CallFunc_FindNearestActor_Distance;                // 0x0590(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_594[0x4];                                      // 0x0594(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_FindNearestActor_ReturnValue;             // 0x0598(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x05A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGeomOctaLazer_C*                       CallFunc_FinishSpawningActor_ReturnValue;          // 0x05A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x05B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5B1[0x3];                                      // 0x05B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x05B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_GetOverlappingActors_OverlappingActors_1; // 0x05B8(0x0010)(ReferenceParm)
	TArray<class AActor*>                         K2Node_LowEntry_LocalVariable_Value__1_Object;     // 0x05C8(0x0010)(ReferenceParm)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x05D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue_1;           // 0x05D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFalling_ReturnValue;                    // 0x05DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5DB[0x1];                                      // 0x05DB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue_2;       // 0x05DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VInterpTo_Constant_ReturnValue;           // 0x05E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x05EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GeomOcta_C_ExecuteUbergraph_geomOcta) == 0x000010, "Wrong alignment on GeomOcta_C_ExecuteUbergraph_geomOcta");
static_assert(sizeof(GeomOcta_C_ExecuteUbergraph_geomOcta) == 0x0005F0, "Wrong size on GeomOcta_C_ExecuteUbergraph_geomOcta");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, EntryPoint) == 0x000000, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::EntryPoint' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_CustomEvent_NotifyName_13) == 0x000004, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_CustomEvent_NotifyName_13' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_CreateDelegate_OutputDelegate) == 0x00000C, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_CustomEvent_NotifyName_12) == 0x00001C, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_CustomEvent_NotifyName_12' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_CreateDelegate_OutputDelegate_1) == 0x000024, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_CustomEvent_NotifyName_11) == 0x000034, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_CustomEvent_NotifyName_11' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_CreateDelegate_OutputDelegate_2) == 0x00003C, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_CustomEvent_NotifyName_10) == 0x00004C, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_CustomEvent_NotifyName_10' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_CreateDelegate_OutputDelegate_3) == 0x000054, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, Temp_name_Variable) == 0x000064, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_CreateDelegate_OutputDelegate_4) == 0x00006C, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_SwitchName_CmpSuccess) == 0x00007C, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_SwitchName_CmpSuccess' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_CustomEvent_NotifyName_9) == 0x000080, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_CustomEvent_NotifyName_9' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_CustomEvent_NotifyName_8) == 0x000088, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_CustomEvent_NotifyName_8' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_CreateDelegate_OutputDelegate_5) == 0x000090, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_CustomEvent_NotifyName_7) == 0x0000A0, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_CustomEvent_NotifyName_7' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_CreateDelegate_OutputDelegate_6) == 0x0000A8, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_CreateDelegate_OutputDelegate_6' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_CustomEvent_NotifyName_6) == 0x0000B8, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_CustomEvent_NotifyName_6' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_CreateDelegate_OutputDelegate_7) == 0x0000C0, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_CreateDelegate_OutputDelegate_7' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_CustomEvent_NotifyName_5) == 0x0000D0, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_CustomEvent_NotifyName_5' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_CreateDelegate_OutputDelegate_8) == 0x0000D8, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_CreateDelegate_OutputDelegate_8' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, Temp_name_Variable_1) == 0x0000E8, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::Temp_name_Variable_1' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_CreateDelegate_OutputDelegate_9) == 0x0000F0, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_CreateDelegate_OutputDelegate_9' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_SwitchName_CmpSuccess_1) == 0x000100, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_SwitchName_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_CustomEvent_NotifyName_4) == 0x000104, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_CustomEvent_NotifyName_4' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_CustomEvent_NotifyName_3) == 0x00010C, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_CustomEvent_NotifyName_3' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_CreateDelegate_OutputDelegate_10) == 0x000114, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_CreateDelegate_OutputDelegate_10' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_CustomEvent_NotifyName_2) == 0x000124, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_CustomEvent_NotifyName_2' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_CreateDelegate_OutputDelegate_11) == 0x00012C, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_CreateDelegate_OutputDelegate_11' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_CustomEvent_NotifyName_1) == 0x00013C, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_CustomEvent_NotifyName_1' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_CreateDelegate_OutputDelegate_12) == 0x000144, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_CreateDelegate_OutputDelegate_12' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_CustomEvent_NotifyName) == 0x000154, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_CustomEvent_NotifyName' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_CreateDelegate_OutputDelegate_13) == 0x00015C, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_CreateDelegate_OutputDelegate_13' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, Temp_name_Variable_2) == 0x00016C, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::Temp_name_Variable_2' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_SwitchName_CmpSuccess_2) == 0x000174, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_SwitchName_CmpSuccess_2' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_SwitchEnum_CmpSuccess) == 0x000175, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_CustomEvent_MovementResult_1) == 0x000176, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_CustomEvent_MovementResult_1' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_CreateDelegate_OutputDelegate_14) == 0x000178, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_CreateDelegate_OutputDelegate_14' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_CustomEvent_MovementResult) == 0x000188, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_CustomEvent_MovementResult' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_CreateDelegate_OutputDelegate_15) == 0x00018C, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_CreateDelegate_OutputDelegate_15' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, Temp_byte_Variable) == 0x00019C, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_CreateDelegate_OutputDelegate_16) == 0x0001A0, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_CreateDelegate_OutputDelegate_16' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x0001B0, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_CreateDelegate_OutputDelegate_17) == 0x0001B8, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_CreateDelegate_OutputDelegate_17' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_K2_SetTimerDelegate_ReturnValue_1) == 0x0001C8, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_K2_SetTimerDelegate_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_CustomEvent_actor) == 0x0001D0, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_CustomEvent_actor' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_CreateProxyObjectForPlayMontage_ReturnValue) == 0x0001D8, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_CreateProxyObjectForPlayMontage_ReturnValue' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_IsValid_ReturnValue) == 0x0001E0, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_ComponentBoundEvent_OverlappedComponent_1) == 0x0001E8, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_ComponentBoundEvent_OverlappedComponent_1' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_ComponentBoundEvent_OtherActor_1) == 0x0001F0, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_ComponentBoundEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_ComponentBoundEvent_OtherComp_1) == 0x0001F8, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_ComponentBoundEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_ComponentBoundEvent_OtherBodyIndex_1) == 0x000200, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_ComponentBoundEvent_OtherBodyIndex_1' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_ComponentBoundEvent_bFromSweep_1) == 0x000204, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_ComponentBoundEvent_bFromSweep_1' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_ComponentBoundEvent_SweepResult_1) == 0x000208, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_ComponentBoundEvent_SweepResult_1' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_IsValid_ReturnValue_1) == 0x000290, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_CreateProxyObjectForPlayMontage_ReturnValue_1) == 0x000298, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_CreateProxyObjectForPlayMontage_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_IsValid_ReturnValue_2) == 0x0002A0, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_CreateProxyObjectForPlayMontage_ReturnValue_2) == 0x0002A8, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_CreateProxyObjectForPlayMontage_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x0002B0, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_IsValid_ReturnValue_3) == 0x0002B1, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_Event_DeltaSeconds) == 0x0002B4, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_rot_OutputPin) == 0x0002B8, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_rot_OutputPin' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x0002C4, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_CustomEvent_Condition_1) == 0x0002D0, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_CustomEvent_Condition_1' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_rot_OutputPin_1) == 0x0002D4, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_rot_OutputPin_1' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_IsOverlappingActor_ReturnValue) == 0x0002E0, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_IsOverlappingActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_CustomEvent_Condition) == 0x0002E1, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_CustomEvent_Condition' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue) == 0x0002E4, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_Lerp_ReturnValue) == 0x0002E8, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_1) == 0x0002EC, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_Lerp_ReturnValue_1) == 0x0002F0, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_Conv_FloatToVector_ReturnValue) == 0x0002F4, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_Conv_FloatToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_rot_OutputPin_2) == 0x000300, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_rot_OutputPin_2' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000310, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_IsValid_ReturnValue_4) == 0x000340, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000344, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_K2_GetRandomReachablePointInRadius_RandomLocation) == 0x000350, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_K2_GetRandomReachablePointInRadius_RandomLocation' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_K2_GetRandomReachablePointInRadius_ReturnValue) == 0x00035C, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_K2_GetRandomReachablePointInRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_CreateMoveToProxyObject_ReturnValue) == 0x000360, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_CreateMoveToProxyObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_IsValid_ReturnValue_5) == 0x000368, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x00036C, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_K2_AttachToComponent_ReturnValue) == 0x000378, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_IsValid_ReturnValue_6) == 0x000379, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x00037C, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_Lerp_ReturnValue_2) == 0x000388, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_Lerp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x00038C, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000390, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_RInterpTo_ReturnValue) == 0x000394, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x0003A0, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_GetWorldDeltaSeconds_ReturnValue_1) == 0x000428, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_GetWorldDeltaSeconds_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_SpawnEmitterAttached_ReturnValue) == 0x000430, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_SpawnEmitterAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_2) == 0x000438, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_Lerp_ReturnValue_3) == 0x00043C, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_Lerp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000440, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000444, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_VictoryFloatPlusEquals_FloatOut) == 0x000448, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_VictoryFloatPlusEquals_FloatOut' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_Percent_FloatFloat_ReturnValue) == 0x00044C, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_Percent_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000450, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_CustomEvent_NotifyName_14) == 0x000454, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_CustomEvent_NotifyName_14' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_K2_GetActorLocation_ReturnValue_3) == 0x00045C, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_K2_GetActorLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_3) == 0x000468, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_Lerp_ReturnValue_4) == 0x00046C, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_Lerp_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_4) == 0x000470, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_Lerp_ReturnValue_5) == 0x000474, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_Lerp_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_Lerp_ReturnValue_6) == 0x000478, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_Lerp_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_5) == 0x00047C, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_Lerp_ReturnValue_7) == 0x000480, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_Lerp_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000488, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_ComponentBoundEvent_OtherActor) == 0x000490, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_ComponentBoundEvent_OtherComp) == 0x000498, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x0004A0, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_ComponentBoundEvent_bFromSweep) == 0x0004A4, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_ComponentBoundEvent_SweepResult) == 0x0004A8, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_CreateDelegate_OutputDelegate_18) == 0x000530, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_CreateDelegate_OutputDelegate_18' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_GetComponentVelocity_ReturnValue) == 0x000540, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_GetComponentVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_VSize_ReturnValue) == 0x00054C, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_IsSimulatingPhysics_ReturnValue) == 0x000550, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_IsSimulatingPhysics_ReturnValue' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000551, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_K2_GetActorLocation_ReturnValue_4) == 0x000554, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_K2_GetActorLocation_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_K2_GetActorLocation_ReturnValue_5) == 0x000560, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_K2_GetActorLocation_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_GetOverlappingActors_OverlappingActors) == 0x000570, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_GetOverlappingActors_OverlappingActors' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_LowEntry_LocalVariable_Value__Object) == 0x000580, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_LowEntry_LocalVariable_Value__Object' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_FindNearestActor_Distance) == 0x000590, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_FindNearestActor_Distance' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_FindNearestActor_ReturnValue) == 0x000598, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_FindNearestActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x0005A0, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_FinishSpawningActor_ReturnValue) == 0x0005A8, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_Array_RemoveItem_ReturnValue) == 0x0005B0, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_RandomFloatInRange_ReturnValue) == 0x0005B4, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_GetOverlappingActors_OverlappingActors_1) == 0x0005B8, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_GetOverlappingActors_OverlappingActors_1' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, K2Node_LowEntry_LocalVariable_Value__1_Object) == 0x0005C8, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::K2Node_LowEntry_LocalVariable_Value__1_Object' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_Array_IsValidIndex_ReturnValue) == 0x0005D8, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_Array_RemoveItem_ReturnValue_1) == 0x0005D9, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_Array_RemoveItem_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_IsFalling_ReturnValue) == 0x0005DA, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_IsFalling_ReturnValue' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_GetWorldDeltaSeconds_ReturnValue_2) == 0x0005DC, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_GetWorldDeltaSeconds_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_VInterpTo_Constant_ReturnValue) == 0x0005E0, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_VInterpTo_Constant_ReturnValue' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_ExecuteUbergraph_geomOcta, CallFunc_BooleanOR_ReturnValue) == 0x0005EC, "Member 'GeomOcta_C_ExecuteUbergraph_geomOcta::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function geomOcta.geomOcta_C.BndEvt__geomOcta_propAggroSphere_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct GeomOcta_C_BndEvt__geomOcta_propAggroSphere_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(GeomOcta_C_BndEvt__geomOcta_propAggroSphere_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on GeomOcta_C_BndEvt__geomOcta_propAggroSphere_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(GeomOcta_C_BndEvt__geomOcta_propAggroSphere_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on GeomOcta_C_BndEvt__geomOcta_propAggroSphere_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(GeomOcta_C_BndEvt__geomOcta_propAggroSphere_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'GeomOcta_C_BndEvt__geomOcta_propAggroSphere_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_BndEvt__geomOcta_propAggroSphere_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'GeomOcta_C_BndEvt__geomOcta_propAggroSphere_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_BndEvt__geomOcta_propAggroSphere_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'GeomOcta_C_BndEvt__geomOcta_propAggroSphere_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_BndEvt__geomOcta_propAggroSphere_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'GeomOcta_C_BndEvt__geomOcta_propAggroSphere_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_BndEvt__geomOcta_propAggroSphere_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'GeomOcta_C_BndEvt__geomOcta_propAggroSphere_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_BndEvt__geomOcta_propAggroSphere_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'GeomOcta_C_BndEvt__geomOcta_propAggroSphere_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function geomOcta.geomOcta_C.charge
// 0x0001 (0x0001 - 0x0000)
struct GeomOcta_C_Charge final
{
public:
	bool                                          Condition;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GeomOcta_C_Charge) == 0x000001, "Wrong alignment on GeomOcta_C_Charge");
static_assert(sizeof(GeomOcta_C_Charge) == 0x000001, "Wrong size on GeomOcta_C_Charge");
static_assert(offsetof(GeomOcta_C_Charge, Condition) == 0x000000, "Member 'GeomOcta_C_Charge::Condition' has a wrong offset!");

// Function geomOcta.geomOcta_C.rotateTo
// 0x0001 (0x0001 - 0x0000)
struct GeomOcta_C_RotateTo final
{
public:
	bool                                          Condition;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GeomOcta_C_RotateTo) == 0x000001, "Wrong alignment on GeomOcta_C_RotateTo");
static_assert(sizeof(GeomOcta_C_RotateTo) == 0x000001, "Wrong size on GeomOcta_C_RotateTo");
static_assert(offsetof(GeomOcta_C_RotateTo, Condition) == 0x000000, "Member 'GeomOcta_C_RotateTo::Condition' has a wrong offset!");

// Function geomOcta.geomOcta_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct GeomOcta_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GeomOcta_C_ReceiveTick) == 0x000004, "Wrong alignment on GeomOcta_C_ReceiveTick");
static_assert(sizeof(GeomOcta_C_ReceiveTick) == 0x000004, "Wrong size on GeomOcta_C_ReceiveTick");
static_assert(offsetof(GeomOcta_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'GeomOcta_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function geomOcta.geomOcta_C.BndEvt__geomOcta_minSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct GeomOcta_C_BndEvt__geomOcta_minSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(GeomOcta_C_BndEvt__geomOcta_minSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on GeomOcta_C_BndEvt__geomOcta_minSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(GeomOcta_C_BndEvt__geomOcta_minSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on GeomOcta_C_BndEvt__geomOcta_minSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(GeomOcta_C_BndEvt__geomOcta_minSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'GeomOcta_C_BndEvt__geomOcta_minSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_BndEvt__geomOcta_minSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'GeomOcta_C_BndEvt__geomOcta_minSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_BndEvt__geomOcta_minSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'GeomOcta_C_BndEvt__geomOcta_minSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_BndEvt__geomOcta_minSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'GeomOcta_C_BndEvt__geomOcta_minSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_BndEvt__geomOcta_minSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'GeomOcta_C_BndEvt__geomOcta_minSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_BndEvt__geomOcta_minSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'GeomOcta_C_BndEvt__geomOcta_minSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function geomOcta.geomOcta_C.aggro
// 0x0008 (0x0008 - 0x0000)
struct GeomOcta_C_Aggro final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GeomOcta_C_Aggro) == 0x000008, "Wrong alignment on GeomOcta_C_Aggro");
static_assert(sizeof(GeomOcta_C_Aggro) == 0x000008, "Wrong size on GeomOcta_C_Aggro");
static_assert(offsetof(GeomOcta_C_Aggro, Actor) == 0x000000, "Member 'GeomOcta_C_Aggro::Actor' has a wrong offset!");

// Function geomOcta.geomOcta_C.OnSuccess_B50B45FF44BBE3579FA455929797BD91
// 0x0001 (0x0001 - 0x0000)
struct GeomOcta_C_OnSuccess_B50B45FF44BBE3579FA455929797BD91 final
{
public:
	EPathFollowingResult                          MovementResult;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GeomOcta_C_OnSuccess_B50B45FF44BBE3579FA455929797BD91) == 0x000001, "Wrong alignment on GeomOcta_C_OnSuccess_B50B45FF44BBE3579FA455929797BD91");
static_assert(sizeof(GeomOcta_C_OnSuccess_B50B45FF44BBE3579FA455929797BD91) == 0x000001, "Wrong size on GeomOcta_C_OnSuccess_B50B45FF44BBE3579FA455929797BD91");
static_assert(offsetof(GeomOcta_C_OnSuccess_B50B45FF44BBE3579FA455929797BD91, MovementResult) == 0x000000, "Member 'GeomOcta_C_OnSuccess_B50B45FF44BBE3579FA455929797BD91::MovementResult' has a wrong offset!");

// Function geomOcta.geomOcta_C.OnFail_B50B45FF44BBE3579FA455929797BD91
// 0x0001 (0x0001 - 0x0000)
struct GeomOcta_C_OnFail_B50B45FF44BBE3579FA455929797BD91 final
{
public:
	EPathFollowingResult                          MovementResult;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GeomOcta_C_OnFail_B50B45FF44BBE3579FA455929797BD91) == 0x000001, "Wrong alignment on GeomOcta_C_OnFail_B50B45FF44BBE3579FA455929797BD91");
static_assert(sizeof(GeomOcta_C_OnFail_B50B45FF44BBE3579FA455929797BD91) == 0x000001, "Wrong size on GeomOcta_C_OnFail_B50B45FF44BBE3579FA455929797BD91");
static_assert(offsetof(GeomOcta_C_OnFail_B50B45FF44BBE3579FA455929797BD91, MovementResult) == 0x000000, "Member 'GeomOcta_C_OnFail_B50B45FF44BBE3579FA455929797BD91::MovementResult' has a wrong offset!");

// Function geomOcta.geomOcta_C.OnCompleted_1DFC28904024A8FB71C3ACA9DBD440F9
// 0x0008 (0x0008 - 0x0000)
struct GeomOcta_C_OnCompleted_1DFC28904024A8FB71C3ACA9DBD440F9 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GeomOcta_C_OnCompleted_1DFC28904024A8FB71C3ACA9DBD440F9) == 0x000004, "Wrong alignment on GeomOcta_C_OnCompleted_1DFC28904024A8FB71C3ACA9DBD440F9");
static_assert(sizeof(GeomOcta_C_OnCompleted_1DFC28904024A8FB71C3ACA9DBD440F9) == 0x000008, "Wrong size on GeomOcta_C_OnCompleted_1DFC28904024A8FB71C3ACA9DBD440F9");
static_assert(offsetof(GeomOcta_C_OnCompleted_1DFC28904024A8FB71C3ACA9DBD440F9, NotifyName) == 0x000000, "Member 'GeomOcta_C_OnCompleted_1DFC28904024A8FB71C3ACA9DBD440F9::NotifyName' has a wrong offset!");

// Function geomOcta.geomOcta_C.OnBlendOut_1DFC28904024A8FB71C3ACA9DBD440F9
// 0x0008 (0x0008 - 0x0000)
struct GeomOcta_C_OnBlendOut_1DFC28904024A8FB71C3ACA9DBD440F9 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GeomOcta_C_OnBlendOut_1DFC28904024A8FB71C3ACA9DBD440F9) == 0x000004, "Wrong alignment on GeomOcta_C_OnBlendOut_1DFC28904024A8FB71C3ACA9DBD440F9");
static_assert(sizeof(GeomOcta_C_OnBlendOut_1DFC28904024A8FB71C3ACA9DBD440F9) == 0x000008, "Wrong size on GeomOcta_C_OnBlendOut_1DFC28904024A8FB71C3ACA9DBD440F9");
static_assert(offsetof(GeomOcta_C_OnBlendOut_1DFC28904024A8FB71C3ACA9DBD440F9, NotifyName) == 0x000000, "Member 'GeomOcta_C_OnBlendOut_1DFC28904024A8FB71C3ACA9DBD440F9::NotifyName' has a wrong offset!");

// Function geomOcta.geomOcta_C.OnInterrupted_1DFC28904024A8FB71C3ACA9DBD440F9
// 0x0008 (0x0008 - 0x0000)
struct GeomOcta_C_OnInterrupted_1DFC28904024A8FB71C3ACA9DBD440F9 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GeomOcta_C_OnInterrupted_1DFC28904024A8FB71C3ACA9DBD440F9) == 0x000004, "Wrong alignment on GeomOcta_C_OnInterrupted_1DFC28904024A8FB71C3ACA9DBD440F9");
static_assert(sizeof(GeomOcta_C_OnInterrupted_1DFC28904024A8FB71C3ACA9DBD440F9) == 0x000008, "Wrong size on GeomOcta_C_OnInterrupted_1DFC28904024A8FB71C3ACA9DBD440F9");
static_assert(offsetof(GeomOcta_C_OnInterrupted_1DFC28904024A8FB71C3ACA9DBD440F9, NotifyName) == 0x000000, "Member 'GeomOcta_C_OnInterrupted_1DFC28904024A8FB71C3ACA9DBD440F9::NotifyName' has a wrong offset!");

// Function geomOcta.geomOcta_C.OnNotifyBegin_1DFC28904024A8FB71C3ACA9DBD440F9
// 0x0008 (0x0008 - 0x0000)
struct GeomOcta_C_OnNotifyBegin_1DFC28904024A8FB71C3ACA9DBD440F9 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GeomOcta_C_OnNotifyBegin_1DFC28904024A8FB71C3ACA9DBD440F9) == 0x000004, "Wrong alignment on GeomOcta_C_OnNotifyBegin_1DFC28904024A8FB71C3ACA9DBD440F9");
static_assert(sizeof(GeomOcta_C_OnNotifyBegin_1DFC28904024A8FB71C3ACA9DBD440F9) == 0x000008, "Wrong size on GeomOcta_C_OnNotifyBegin_1DFC28904024A8FB71C3ACA9DBD440F9");
static_assert(offsetof(GeomOcta_C_OnNotifyBegin_1DFC28904024A8FB71C3ACA9DBD440F9, NotifyName) == 0x000000, "Member 'GeomOcta_C_OnNotifyBegin_1DFC28904024A8FB71C3ACA9DBD440F9::NotifyName' has a wrong offset!");

// Function geomOcta.geomOcta_C.OnNotifyEnd_1DFC28904024A8FB71C3ACA9DBD440F9
// 0x0008 (0x0008 - 0x0000)
struct GeomOcta_C_OnNotifyEnd_1DFC28904024A8FB71C3ACA9DBD440F9 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GeomOcta_C_OnNotifyEnd_1DFC28904024A8FB71C3ACA9DBD440F9) == 0x000004, "Wrong alignment on GeomOcta_C_OnNotifyEnd_1DFC28904024A8FB71C3ACA9DBD440F9");
static_assert(sizeof(GeomOcta_C_OnNotifyEnd_1DFC28904024A8FB71C3ACA9DBD440F9) == 0x000008, "Wrong size on GeomOcta_C_OnNotifyEnd_1DFC28904024A8FB71C3ACA9DBD440F9");
static_assert(offsetof(GeomOcta_C_OnNotifyEnd_1DFC28904024A8FB71C3ACA9DBD440F9, NotifyName) == 0x000000, "Member 'GeomOcta_C_OnNotifyEnd_1DFC28904024A8FB71C3ACA9DBD440F9::NotifyName' has a wrong offset!");

// Function geomOcta.geomOcta_C.OnCompleted_9B2108B443F09BA08A3C20ADBECCC562
// 0x0008 (0x0008 - 0x0000)
struct GeomOcta_C_OnCompleted_9B2108B443F09BA08A3C20ADBECCC562 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GeomOcta_C_OnCompleted_9B2108B443F09BA08A3C20ADBECCC562) == 0x000004, "Wrong alignment on GeomOcta_C_OnCompleted_9B2108B443F09BA08A3C20ADBECCC562");
static_assert(sizeof(GeomOcta_C_OnCompleted_9B2108B443F09BA08A3C20ADBECCC562) == 0x000008, "Wrong size on GeomOcta_C_OnCompleted_9B2108B443F09BA08A3C20ADBECCC562");
static_assert(offsetof(GeomOcta_C_OnCompleted_9B2108B443F09BA08A3C20ADBECCC562, NotifyName) == 0x000000, "Member 'GeomOcta_C_OnCompleted_9B2108B443F09BA08A3C20ADBECCC562::NotifyName' has a wrong offset!");

// Function geomOcta.geomOcta_C.OnBlendOut_9B2108B443F09BA08A3C20ADBECCC562
// 0x0008 (0x0008 - 0x0000)
struct GeomOcta_C_OnBlendOut_9B2108B443F09BA08A3C20ADBECCC562 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GeomOcta_C_OnBlendOut_9B2108B443F09BA08A3C20ADBECCC562) == 0x000004, "Wrong alignment on GeomOcta_C_OnBlendOut_9B2108B443F09BA08A3C20ADBECCC562");
static_assert(sizeof(GeomOcta_C_OnBlendOut_9B2108B443F09BA08A3C20ADBECCC562) == 0x000008, "Wrong size on GeomOcta_C_OnBlendOut_9B2108B443F09BA08A3C20ADBECCC562");
static_assert(offsetof(GeomOcta_C_OnBlendOut_9B2108B443F09BA08A3C20ADBECCC562, NotifyName) == 0x000000, "Member 'GeomOcta_C_OnBlendOut_9B2108B443F09BA08A3C20ADBECCC562::NotifyName' has a wrong offset!");

// Function geomOcta.geomOcta_C.OnInterrupted_9B2108B443F09BA08A3C20ADBECCC562
// 0x0008 (0x0008 - 0x0000)
struct GeomOcta_C_OnInterrupted_9B2108B443F09BA08A3C20ADBECCC562 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GeomOcta_C_OnInterrupted_9B2108B443F09BA08A3C20ADBECCC562) == 0x000004, "Wrong alignment on GeomOcta_C_OnInterrupted_9B2108B443F09BA08A3C20ADBECCC562");
static_assert(sizeof(GeomOcta_C_OnInterrupted_9B2108B443F09BA08A3C20ADBECCC562) == 0x000008, "Wrong size on GeomOcta_C_OnInterrupted_9B2108B443F09BA08A3C20ADBECCC562");
static_assert(offsetof(GeomOcta_C_OnInterrupted_9B2108B443F09BA08A3C20ADBECCC562, NotifyName) == 0x000000, "Member 'GeomOcta_C_OnInterrupted_9B2108B443F09BA08A3C20ADBECCC562::NotifyName' has a wrong offset!");

// Function geomOcta.geomOcta_C.OnNotifyBegin_9B2108B443F09BA08A3C20ADBECCC562
// 0x0008 (0x0008 - 0x0000)
struct GeomOcta_C_OnNotifyBegin_9B2108B443F09BA08A3C20ADBECCC562 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GeomOcta_C_OnNotifyBegin_9B2108B443F09BA08A3C20ADBECCC562) == 0x000004, "Wrong alignment on GeomOcta_C_OnNotifyBegin_9B2108B443F09BA08A3C20ADBECCC562");
static_assert(sizeof(GeomOcta_C_OnNotifyBegin_9B2108B443F09BA08A3C20ADBECCC562) == 0x000008, "Wrong size on GeomOcta_C_OnNotifyBegin_9B2108B443F09BA08A3C20ADBECCC562");
static_assert(offsetof(GeomOcta_C_OnNotifyBegin_9B2108B443F09BA08A3C20ADBECCC562, NotifyName) == 0x000000, "Member 'GeomOcta_C_OnNotifyBegin_9B2108B443F09BA08A3C20ADBECCC562::NotifyName' has a wrong offset!");

// Function geomOcta.geomOcta_C.OnNotifyEnd_9B2108B443F09BA08A3C20ADBECCC562
// 0x0008 (0x0008 - 0x0000)
struct GeomOcta_C_OnNotifyEnd_9B2108B443F09BA08A3C20ADBECCC562 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GeomOcta_C_OnNotifyEnd_9B2108B443F09BA08A3C20ADBECCC562) == 0x000004, "Wrong alignment on GeomOcta_C_OnNotifyEnd_9B2108B443F09BA08A3C20ADBECCC562");
static_assert(sizeof(GeomOcta_C_OnNotifyEnd_9B2108B443F09BA08A3C20ADBECCC562) == 0x000008, "Wrong size on GeomOcta_C_OnNotifyEnd_9B2108B443F09BA08A3C20ADBECCC562");
static_assert(offsetof(GeomOcta_C_OnNotifyEnd_9B2108B443F09BA08A3C20ADBECCC562, NotifyName) == 0x000000, "Member 'GeomOcta_C_OnNotifyEnd_9B2108B443F09BA08A3C20ADBECCC562::NotifyName' has a wrong offset!");

// Function geomOcta.geomOcta_C.OnCompleted_40CAEEF14EA3484C8E679EA6A1BD5F5D
// 0x0008 (0x0008 - 0x0000)
struct GeomOcta_C_OnCompleted_40CAEEF14EA3484C8E679EA6A1BD5F5D final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GeomOcta_C_OnCompleted_40CAEEF14EA3484C8E679EA6A1BD5F5D) == 0x000004, "Wrong alignment on GeomOcta_C_OnCompleted_40CAEEF14EA3484C8E679EA6A1BD5F5D");
static_assert(sizeof(GeomOcta_C_OnCompleted_40CAEEF14EA3484C8E679EA6A1BD5F5D) == 0x000008, "Wrong size on GeomOcta_C_OnCompleted_40CAEEF14EA3484C8E679EA6A1BD5F5D");
static_assert(offsetof(GeomOcta_C_OnCompleted_40CAEEF14EA3484C8E679EA6A1BD5F5D, NotifyName) == 0x000000, "Member 'GeomOcta_C_OnCompleted_40CAEEF14EA3484C8E679EA6A1BD5F5D::NotifyName' has a wrong offset!");

// Function geomOcta.geomOcta_C.OnBlendOut_40CAEEF14EA3484C8E679EA6A1BD5F5D
// 0x0008 (0x0008 - 0x0000)
struct GeomOcta_C_OnBlendOut_40CAEEF14EA3484C8E679EA6A1BD5F5D final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GeomOcta_C_OnBlendOut_40CAEEF14EA3484C8E679EA6A1BD5F5D) == 0x000004, "Wrong alignment on GeomOcta_C_OnBlendOut_40CAEEF14EA3484C8E679EA6A1BD5F5D");
static_assert(sizeof(GeomOcta_C_OnBlendOut_40CAEEF14EA3484C8E679EA6A1BD5F5D) == 0x000008, "Wrong size on GeomOcta_C_OnBlendOut_40CAEEF14EA3484C8E679EA6A1BD5F5D");
static_assert(offsetof(GeomOcta_C_OnBlendOut_40CAEEF14EA3484C8E679EA6A1BD5F5D, NotifyName) == 0x000000, "Member 'GeomOcta_C_OnBlendOut_40CAEEF14EA3484C8E679EA6A1BD5F5D::NotifyName' has a wrong offset!");

// Function geomOcta.geomOcta_C.OnInterrupted_40CAEEF14EA3484C8E679EA6A1BD5F5D
// 0x0008 (0x0008 - 0x0000)
struct GeomOcta_C_OnInterrupted_40CAEEF14EA3484C8E679EA6A1BD5F5D final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GeomOcta_C_OnInterrupted_40CAEEF14EA3484C8E679EA6A1BD5F5D) == 0x000004, "Wrong alignment on GeomOcta_C_OnInterrupted_40CAEEF14EA3484C8E679EA6A1BD5F5D");
static_assert(sizeof(GeomOcta_C_OnInterrupted_40CAEEF14EA3484C8E679EA6A1BD5F5D) == 0x000008, "Wrong size on GeomOcta_C_OnInterrupted_40CAEEF14EA3484C8E679EA6A1BD5F5D");
static_assert(offsetof(GeomOcta_C_OnInterrupted_40CAEEF14EA3484C8E679EA6A1BD5F5D, NotifyName) == 0x000000, "Member 'GeomOcta_C_OnInterrupted_40CAEEF14EA3484C8E679EA6A1BD5F5D::NotifyName' has a wrong offset!");

// Function geomOcta.geomOcta_C.OnNotifyBegin_40CAEEF14EA3484C8E679EA6A1BD5F5D
// 0x0008 (0x0008 - 0x0000)
struct GeomOcta_C_OnNotifyBegin_40CAEEF14EA3484C8E679EA6A1BD5F5D final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GeomOcta_C_OnNotifyBegin_40CAEEF14EA3484C8E679EA6A1BD5F5D) == 0x000004, "Wrong alignment on GeomOcta_C_OnNotifyBegin_40CAEEF14EA3484C8E679EA6A1BD5F5D");
static_assert(sizeof(GeomOcta_C_OnNotifyBegin_40CAEEF14EA3484C8E679EA6A1BD5F5D) == 0x000008, "Wrong size on GeomOcta_C_OnNotifyBegin_40CAEEF14EA3484C8E679EA6A1BD5F5D");
static_assert(offsetof(GeomOcta_C_OnNotifyBegin_40CAEEF14EA3484C8E679EA6A1BD5F5D, NotifyName) == 0x000000, "Member 'GeomOcta_C_OnNotifyBegin_40CAEEF14EA3484C8E679EA6A1BD5F5D::NotifyName' has a wrong offset!");

// Function geomOcta.geomOcta_C.OnNotifyEnd_40CAEEF14EA3484C8E679EA6A1BD5F5D
// 0x0008 (0x0008 - 0x0000)
struct GeomOcta_C_OnNotifyEnd_40CAEEF14EA3484C8E679EA6A1BD5F5D final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GeomOcta_C_OnNotifyEnd_40CAEEF14EA3484C8E679EA6A1BD5F5D) == 0x000004, "Wrong alignment on GeomOcta_C_OnNotifyEnd_40CAEEF14EA3484C8E679EA6A1BD5F5D");
static_assert(sizeof(GeomOcta_C_OnNotifyEnd_40CAEEF14EA3484C8E679EA6A1BD5F5D) == 0x000008, "Wrong size on GeomOcta_C_OnNotifyEnd_40CAEEF14EA3484C8E679EA6A1BD5F5D");
static_assert(offsetof(GeomOcta_C_OnNotifyEnd_40CAEEF14EA3484C8E679EA6A1BD5F5D, NotifyName) == 0x000000, "Member 'GeomOcta_C_OnNotifyEnd_40CAEEF14EA3484C8E679EA6A1BD5F5D::NotifyName' has a wrong offset!");

// Function geomOcta.geomOcta_C.rot
// 0x0064 (0x0064 - 0x0000)
struct GeomOcta_C_Rot final
{
public:
	struct FRotator                               OutputPin;                                         // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue_1;         // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotationFromAxes_ReturnValue;         // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GeomOcta_C_Rot) == 0x000004, "Wrong alignment on GeomOcta_C_Rot");
static_assert(sizeof(GeomOcta_C_Rot) == 0x000064, "Wrong size on GeomOcta_C_Rot");
static_assert(offsetof(GeomOcta_C_Rot, OutputPin) == 0x000000, "Member 'GeomOcta_C_Rot::OutputPin' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_Rot, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00000C, "Member 'GeomOcta_C_Rot::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_Rot, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'GeomOcta_C_Rot::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_Rot, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000024, "Member 'GeomOcta_C_Rot::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_Rot, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'GeomOcta_C_Rot::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_Rot, CallFunc_Normal_ReturnValue) == 0x000034, "Member 'GeomOcta_C_Rot::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_Rot, CallFunc_Cross_VectorVector_ReturnValue) == 0x000040, "Member 'GeomOcta_C_Rot::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_Rot, CallFunc_Cross_VectorVector_ReturnValue_1) == 0x00004C, "Member 'GeomOcta_C_Rot::CallFunc_Cross_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GeomOcta_C_Rot, CallFunc_MakeRotationFromAxes_ReturnValue) == 0x000058, "Member 'GeomOcta_C_Rot::CallFunc_MakeRotationFromAxes_ReturnValue' has a wrong offset!");

}

