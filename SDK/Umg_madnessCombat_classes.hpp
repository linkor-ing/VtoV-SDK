#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Umg_madnessCombat

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass umg_madnessCombat.umg_madnessCombat_C
// 0x0040 (0x02A0 - 0x0260)
class UUmg_madnessCombat_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCanvasPanel*                           CanvasPanel_1;                                     // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Text_count;                                        // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Text_count_1;                                      // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	float                                         A1;                                                // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TickEnable;                                        // 0x0284(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_285[0x3];                                      // 0x0285(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Mode;                                              // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         A2;                                                // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          M2;                                                // 0x0290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_291[0x3];                                      // 0x0291(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Count;                                             // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMadnessCombatMaster_C*                 Master;                                            // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_umg_madnessCombat(int32 EntryPoint);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void AddCount();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"umg_madnessCombat_C">();
	}
	static class UUmg_madnessCombat_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUmg_madnessCombat_C>();
	}
};
static_assert(alignof(UUmg_madnessCombat_C) == 0x000008, "Wrong alignment on UUmg_madnessCombat_C");
static_assert(sizeof(UUmg_madnessCombat_C) == 0x0002A0, "Wrong size on UUmg_madnessCombat_C");
static_assert(offsetof(UUmg_madnessCombat_C, UberGraphFrame) == 0x000260, "Member 'UUmg_madnessCombat_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUmg_madnessCombat_C, CanvasPanel_1) == 0x000268, "Member 'UUmg_madnessCombat_C::CanvasPanel_1' has a wrong offset!");
static_assert(offsetof(UUmg_madnessCombat_C, Text_count) == 0x000270, "Member 'UUmg_madnessCombat_C::Text_count' has a wrong offset!");
static_assert(offsetof(UUmg_madnessCombat_C, Text_count_1) == 0x000278, "Member 'UUmg_madnessCombat_C::Text_count_1' has a wrong offset!");
static_assert(offsetof(UUmg_madnessCombat_C, A1) == 0x000280, "Member 'UUmg_madnessCombat_C::A1' has a wrong offset!");
static_assert(offsetof(UUmg_madnessCombat_C, TickEnable) == 0x000284, "Member 'UUmg_madnessCombat_C::TickEnable' has a wrong offset!");
static_assert(offsetof(UUmg_madnessCombat_C, Mode) == 0x000288, "Member 'UUmg_madnessCombat_C::Mode' has a wrong offset!");
static_assert(offsetof(UUmg_madnessCombat_C, A2) == 0x00028C, "Member 'UUmg_madnessCombat_C::A2' has a wrong offset!");
static_assert(offsetof(UUmg_madnessCombat_C, M2) == 0x000290, "Member 'UUmg_madnessCombat_C::M2' has a wrong offset!");
static_assert(offsetof(UUmg_madnessCombat_C, Count) == 0x000294, "Member 'UUmg_madnessCombat_C::Count' has a wrong offset!");
static_assert(offsetof(UUmg_madnessCombat_C, Master) == 0x000298, "Member 'UUmg_madnessCombat_C::Master' has a wrong offset!");

}

