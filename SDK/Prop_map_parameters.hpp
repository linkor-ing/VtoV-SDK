#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Prop_map

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function prop_map.prop_map_C.ExecuteUbergraph_prop_map
// 0x01A8 (0x01A8 - 0x0000)
struct Prop_map_C_ExecuteUbergraph_prop_map final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NotifyName_8;                   // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate;              // 0x000C(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   K2Node_CustomEvent_NotifyName_7;                   // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_1;            // 0x0024(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   K2Node_CustomEvent_NotifyName_6;                   // 0x0034(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_2;            // 0x003C(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   K2Node_CustomEvent_NotifyName_5;                   // 0x004C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_3;            // 0x0054(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   Temp_name_Variable;                                // 0x0064(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_4;            // 0x006C(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   K2Node_CustomEvent_NotifyName_4;                   // 0x007C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NotifyName_3;                   // 0x0084(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_5;            // 0x008C(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   K2Node_CustomEvent_NotifyName_2;                   // 0x009C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_6;            // 0x00A4(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   K2Node_CustomEvent_NotifyName_1;                   // 0x00B4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_7;            // 0x00BC(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   K2Node_CustomEvent_NotifyName;                     // 0x00CC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_8;            // 0x00D4(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   Temp_name_Variable_1;                              // 0x00E4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_9;            // 0x00EC(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_3CD3[0x4];                                     // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode;          // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NotifyName_9;                   // 0x010C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0114(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorInt_ReturnValue;             // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x012C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3CD4[0x3];                                     // 0x012D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3CD5[0x4];                                     // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_FloatToText_ReturnValue;             // 0x0140(0x0018)()
	class FText                                   CallFunc_Conv_FloatToText_ReturnValue_1;           // 0x0158(0x0018)()
	class AMainPlayer_C*                          K2Node_Event_player_1;                             // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player;                               // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayMontageCallbackProxy*              CallFunc_CreateProxyObjectForPlayMontage_ReturnValue; // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayMontageCallbackProxy*              CallFunc_CreateProxyObjectForPlayMontage_ReturnValue_1; // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0191(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3CD6[0x6];                                     // 0x0192(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          CallFunc_getMainPlayer_AsMain_Player;              // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x01A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Prop_map_C_ExecuteUbergraph_prop_map) == 0x000008, "Wrong alignment on Prop_map_C_ExecuteUbergraph_prop_map");
static_assert(sizeof(Prop_map_C_ExecuteUbergraph_prop_map) == 0x0001A8, "Wrong size on Prop_map_C_ExecuteUbergraph_prop_map");
static_assert(offsetof(Prop_map_C_ExecuteUbergraph_prop_map, EntryPoint) == 0x000000, "Member 'Prop_map_C_ExecuteUbergraph_prop_map::EntryPoint' has a wrong offset!");
static_assert(offsetof(Prop_map_C_ExecuteUbergraph_prop_map, K2Node_CustomEvent_NotifyName_8) == 0x000004, "Member 'Prop_map_C_ExecuteUbergraph_prop_map::K2Node_CustomEvent_NotifyName_8' has a wrong offset!");
static_assert(offsetof(Prop_map_C_ExecuteUbergraph_prop_map, K2Node_CreateDelegate_OutputDelegate) == 0x00000C, "Member 'Prop_map_C_ExecuteUbergraph_prop_map::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Prop_map_C_ExecuteUbergraph_prop_map, K2Node_CustomEvent_NotifyName_7) == 0x00001C, "Member 'Prop_map_C_ExecuteUbergraph_prop_map::K2Node_CustomEvent_NotifyName_7' has a wrong offset!");
static_assert(offsetof(Prop_map_C_ExecuteUbergraph_prop_map, K2Node_CreateDelegate_OutputDelegate_1) == 0x000024, "Member 'Prop_map_C_ExecuteUbergraph_prop_map::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(Prop_map_C_ExecuteUbergraph_prop_map, K2Node_CustomEvent_NotifyName_6) == 0x000034, "Member 'Prop_map_C_ExecuteUbergraph_prop_map::K2Node_CustomEvent_NotifyName_6' has a wrong offset!");
static_assert(offsetof(Prop_map_C_ExecuteUbergraph_prop_map, K2Node_CreateDelegate_OutputDelegate_2) == 0x00003C, "Member 'Prop_map_C_ExecuteUbergraph_prop_map::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(Prop_map_C_ExecuteUbergraph_prop_map, K2Node_CustomEvent_NotifyName_5) == 0x00004C, "Member 'Prop_map_C_ExecuteUbergraph_prop_map::K2Node_CustomEvent_NotifyName_5' has a wrong offset!");
static_assert(offsetof(Prop_map_C_ExecuteUbergraph_prop_map, K2Node_CreateDelegate_OutputDelegate_3) == 0x000054, "Member 'Prop_map_C_ExecuteUbergraph_prop_map::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(Prop_map_C_ExecuteUbergraph_prop_map, Temp_name_Variable) == 0x000064, "Member 'Prop_map_C_ExecuteUbergraph_prop_map::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(Prop_map_C_ExecuteUbergraph_prop_map, K2Node_CreateDelegate_OutputDelegate_4) == 0x00006C, "Member 'Prop_map_C_ExecuteUbergraph_prop_map::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(Prop_map_C_ExecuteUbergraph_prop_map, K2Node_CustomEvent_NotifyName_4) == 0x00007C, "Member 'Prop_map_C_ExecuteUbergraph_prop_map::K2Node_CustomEvent_NotifyName_4' has a wrong offset!");
static_assert(offsetof(Prop_map_C_ExecuteUbergraph_prop_map, K2Node_CustomEvent_NotifyName_3) == 0x000084, "Member 'Prop_map_C_ExecuteUbergraph_prop_map::K2Node_CustomEvent_NotifyName_3' has a wrong offset!");
static_assert(offsetof(Prop_map_C_ExecuteUbergraph_prop_map, K2Node_CreateDelegate_OutputDelegate_5) == 0x00008C, "Member 'Prop_map_C_ExecuteUbergraph_prop_map::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(Prop_map_C_ExecuteUbergraph_prop_map, K2Node_CustomEvent_NotifyName_2) == 0x00009C, "Member 'Prop_map_C_ExecuteUbergraph_prop_map::K2Node_CustomEvent_NotifyName_2' has a wrong offset!");
static_assert(offsetof(Prop_map_C_ExecuteUbergraph_prop_map, K2Node_CreateDelegate_OutputDelegate_6) == 0x0000A4, "Member 'Prop_map_C_ExecuteUbergraph_prop_map::K2Node_CreateDelegate_OutputDelegate_6' has a wrong offset!");
static_assert(offsetof(Prop_map_C_ExecuteUbergraph_prop_map, K2Node_CustomEvent_NotifyName_1) == 0x0000B4, "Member 'Prop_map_C_ExecuteUbergraph_prop_map::K2Node_CustomEvent_NotifyName_1' has a wrong offset!");
static_assert(offsetof(Prop_map_C_ExecuteUbergraph_prop_map, K2Node_CreateDelegate_OutputDelegate_7) == 0x0000BC, "Member 'Prop_map_C_ExecuteUbergraph_prop_map::K2Node_CreateDelegate_OutputDelegate_7' has a wrong offset!");
static_assert(offsetof(Prop_map_C_ExecuteUbergraph_prop_map, K2Node_CustomEvent_NotifyName) == 0x0000CC, "Member 'Prop_map_C_ExecuteUbergraph_prop_map::K2Node_CustomEvent_NotifyName' has a wrong offset!");
static_assert(offsetof(Prop_map_C_ExecuteUbergraph_prop_map, K2Node_CreateDelegate_OutputDelegate_8) == 0x0000D4, "Member 'Prop_map_C_ExecuteUbergraph_prop_map::K2Node_CreateDelegate_OutputDelegate_8' has a wrong offset!");
static_assert(offsetof(Prop_map_C_ExecuteUbergraph_prop_map, Temp_name_Variable_1) == 0x0000E4, "Member 'Prop_map_C_ExecuteUbergraph_prop_map::Temp_name_Variable_1' has a wrong offset!");
static_assert(offsetof(Prop_map_C_ExecuteUbergraph_prop_map, K2Node_CreateDelegate_OutputDelegate_9) == 0x0000EC, "Member 'Prop_map_C_ExecuteUbergraph_prop_map::K2Node_CreateDelegate_OutputDelegate_9' has a wrong offset!");
static_assert(offsetof(Prop_map_C_ExecuteUbergraph_prop_map, CallFunc_getMainGamemode_AsMain_Gamemode) == 0x000100, "Member 'Prop_map_C_ExecuteUbergraph_prop_map::CallFunc_getMainGamemode_AsMain_Gamemode' has a wrong offset!");
static_assert(offsetof(Prop_map_C_ExecuteUbergraph_prop_map, K2Node_Event_DeltaSeconds) == 0x000108, "Member 'Prop_map_C_ExecuteUbergraph_prop_map::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(Prop_map_C_ExecuteUbergraph_prop_map, K2Node_CustomEvent_NotifyName_9) == 0x00010C, "Member 'Prop_map_C_ExecuteUbergraph_prop_map::K2Node_CustomEvent_NotifyName_9' has a wrong offset!");
static_assert(offsetof(Prop_map_C_ExecuteUbergraph_prop_map, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000114, "Member 'Prop_map_C_ExecuteUbergraph_prop_map::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_map_C_ExecuteUbergraph_prop_map, CallFunc_Divide_VectorInt_ReturnValue) == 0x000120, "Member 'Prop_map_C_ExecuteUbergraph_prop_map::CallFunc_Divide_VectorInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_map_C_ExecuteUbergraph_prop_map, CallFunc_IsValid_ReturnValue) == 0x00012C, "Member 'Prop_map_C_ExecuteUbergraph_prop_map::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_map_C_ExecuteUbergraph_prop_map, CallFunc_BreakVector_X) == 0x000130, "Member 'Prop_map_C_ExecuteUbergraph_prop_map::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(Prop_map_C_ExecuteUbergraph_prop_map, CallFunc_BreakVector_Y) == 0x000134, "Member 'Prop_map_C_ExecuteUbergraph_prop_map::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(Prop_map_C_ExecuteUbergraph_prop_map, CallFunc_BreakVector_Z) == 0x000138, "Member 'Prop_map_C_ExecuteUbergraph_prop_map::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(Prop_map_C_ExecuteUbergraph_prop_map, CallFunc_Conv_FloatToText_ReturnValue) == 0x000140, "Member 'Prop_map_C_ExecuteUbergraph_prop_map::CallFunc_Conv_FloatToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_map_C_ExecuteUbergraph_prop_map, CallFunc_Conv_FloatToText_ReturnValue_1) == 0x000158, "Member 'Prop_map_C_ExecuteUbergraph_prop_map::CallFunc_Conv_FloatToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Prop_map_C_ExecuteUbergraph_prop_map, K2Node_Event_player_1) == 0x000170, "Member 'Prop_map_C_ExecuteUbergraph_prop_map::K2Node_Event_player_1' has a wrong offset!");
static_assert(offsetof(Prop_map_C_ExecuteUbergraph_prop_map, K2Node_Event_player) == 0x000178, "Member 'Prop_map_C_ExecuteUbergraph_prop_map::K2Node_Event_player' has a wrong offset!");
static_assert(offsetof(Prop_map_C_ExecuteUbergraph_prop_map, CallFunc_CreateProxyObjectForPlayMontage_ReturnValue) == 0x000180, "Member 'Prop_map_C_ExecuteUbergraph_prop_map::CallFunc_CreateProxyObjectForPlayMontage_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_map_C_ExecuteUbergraph_prop_map, CallFunc_CreateProxyObjectForPlayMontage_ReturnValue_1) == 0x000188, "Member 'Prop_map_C_ExecuteUbergraph_prop_map::CallFunc_CreateProxyObjectForPlayMontage_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Prop_map_C_ExecuteUbergraph_prop_map, CallFunc_IsValid_ReturnValue_1) == 0x000190, "Member 'Prop_map_C_ExecuteUbergraph_prop_map::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Prop_map_C_ExecuteUbergraph_prop_map, CallFunc_IsValid_ReturnValue_2) == 0x000191, "Member 'Prop_map_C_ExecuteUbergraph_prop_map::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Prop_map_C_ExecuteUbergraph_prop_map, CallFunc_getMainPlayer_AsMain_Player) == 0x000198, "Member 'Prop_map_C_ExecuteUbergraph_prop_map::CallFunc_getMainPlayer_AsMain_Player' has a wrong offset!");
static_assert(offsetof(Prop_map_C_ExecuteUbergraph_prop_map, CallFunc_IsValid_ReturnValue_3) == 0x0001A0, "Member 'Prop_map_C_ExecuteUbergraph_prop_map::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Prop_map_C_ExecuteUbergraph_prop_map, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0001A1, "Member 'Prop_map_C_ExecuteUbergraph_prop_map::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function prop_map.prop_map_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct Prop_map_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_map_C_ReceiveTick) == 0x000004, "Wrong alignment on Prop_map_C_ReceiveTick");
static_assert(sizeof(Prop_map_C_ReceiveTick) == 0x000004, "Wrong size on Prop_map_C_ReceiveTick");
static_assert(offsetof(Prop_map_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'Prop_map_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function prop_map.prop_map_C.OnCompleted_26407029439BD8B1D2873EAE3E829D0A
// 0x0008 (0x0008 - 0x0000)
struct Prop_map_C_OnCompleted_26407029439BD8B1D2873EAE3E829D0A final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_map_C_OnCompleted_26407029439BD8B1D2873EAE3E829D0A) == 0x000004, "Wrong alignment on Prop_map_C_OnCompleted_26407029439BD8B1D2873EAE3E829D0A");
static_assert(sizeof(Prop_map_C_OnCompleted_26407029439BD8B1D2873EAE3E829D0A) == 0x000008, "Wrong size on Prop_map_C_OnCompleted_26407029439BD8B1D2873EAE3E829D0A");
static_assert(offsetof(Prop_map_C_OnCompleted_26407029439BD8B1D2873EAE3E829D0A, NotifyName) == 0x000000, "Member 'Prop_map_C_OnCompleted_26407029439BD8B1D2873EAE3E829D0A::NotifyName' has a wrong offset!");

// Function prop_map.prop_map_C.OnBlendOut_26407029439BD8B1D2873EAE3E829D0A
// 0x0008 (0x0008 - 0x0000)
struct Prop_map_C_OnBlendOut_26407029439BD8B1D2873EAE3E829D0A final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_map_C_OnBlendOut_26407029439BD8B1D2873EAE3E829D0A) == 0x000004, "Wrong alignment on Prop_map_C_OnBlendOut_26407029439BD8B1D2873EAE3E829D0A");
static_assert(sizeof(Prop_map_C_OnBlendOut_26407029439BD8B1D2873EAE3E829D0A) == 0x000008, "Wrong size on Prop_map_C_OnBlendOut_26407029439BD8B1D2873EAE3E829D0A");
static_assert(offsetof(Prop_map_C_OnBlendOut_26407029439BD8B1D2873EAE3E829D0A, NotifyName) == 0x000000, "Member 'Prop_map_C_OnBlendOut_26407029439BD8B1D2873EAE3E829D0A::NotifyName' has a wrong offset!");

// Function prop_map.prop_map_C.OnInterrupted_26407029439BD8B1D2873EAE3E829D0A
// 0x0008 (0x0008 - 0x0000)
struct Prop_map_C_OnInterrupted_26407029439BD8B1D2873EAE3E829D0A final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_map_C_OnInterrupted_26407029439BD8B1D2873EAE3E829D0A) == 0x000004, "Wrong alignment on Prop_map_C_OnInterrupted_26407029439BD8B1D2873EAE3E829D0A");
static_assert(sizeof(Prop_map_C_OnInterrupted_26407029439BD8B1D2873EAE3E829D0A) == 0x000008, "Wrong size on Prop_map_C_OnInterrupted_26407029439BD8B1D2873EAE3E829D0A");
static_assert(offsetof(Prop_map_C_OnInterrupted_26407029439BD8B1D2873EAE3E829D0A, NotifyName) == 0x000000, "Member 'Prop_map_C_OnInterrupted_26407029439BD8B1D2873EAE3E829D0A::NotifyName' has a wrong offset!");

// Function prop_map.prop_map_C.OnNotifyBegin_26407029439BD8B1D2873EAE3E829D0A
// 0x0008 (0x0008 - 0x0000)
struct Prop_map_C_OnNotifyBegin_26407029439BD8B1D2873EAE3E829D0A final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_map_C_OnNotifyBegin_26407029439BD8B1D2873EAE3E829D0A) == 0x000004, "Wrong alignment on Prop_map_C_OnNotifyBegin_26407029439BD8B1D2873EAE3E829D0A");
static_assert(sizeof(Prop_map_C_OnNotifyBegin_26407029439BD8B1D2873EAE3E829D0A) == 0x000008, "Wrong size on Prop_map_C_OnNotifyBegin_26407029439BD8B1D2873EAE3E829D0A");
static_assert(offsetof(Prop_map_C_OnNotifyBegin_26407029439BD8B1D2873EAE3E829D0A, NotifyName) == 0x000000, "Member 'Prop_map_C_OnNotifyBegin_26407029439BD8B1D2873EAE3E829D0A::NotifyName' has a wrong offset!");

// Function prop_map.prop_map_C.OnNotifyEnd_26407029439BD8B1D2873EAE3E829D0A
// 0x0008 (0x0008 - 0x0000)
struct Prop_map_C_OnNotifyEnd_26407029439BD8B1D2873EAE3E829D0A final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_map_C_OnNotifyEnd_26407029439BD8B1D2873EAE3E829D0A) == 0x000004, "Wrong alignment on Prop_map_C_OnNotifyEnd_26407029439BD8B1D2873EAE3E829D0A");
static_assert(sizeof(Prop_map_C_OnNotifyEnd_26407029439BD8B1D2873EAE3E829D0A) == 0x000008, "Wrong size on Prop_map_C_OnNotifyEnd_26407029439BD8B1D2873EAE3E829D0A");
static_assert(offsetof(Prop_map_C_OnNotifyEnd_26407029439BD8B1D2873EAE3E829D0A, NotifyName) == 0x000000, "Member 'Prop_map_C_OnNotifyEnd_26407029439BD8B1D2873EAE3E829D0A::NotifyName' has a wrong offset!");

// Function prop_map.prop_map_C.OnCompleted_1BF788334BE9A102B33746BB6D4880F8
// 0x0008 (0x0008 - 0x0000)
struct Prop_map_C_OnCompleted_1BF788334BE9A102B33746BB6D4880F8 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_map_C_OnCompleted_1BF788334BE9A102B33746BB6D4880F8) == 0x000004, "Wrong alignment on Prop_map_C_OnCompleted_1BF788334BE9A102B33746BB6D4880F8");
static_assert(sizeof(Prop_map_C_OnCompleted_1BF788334BE9A102B33746BB6D4880F8) == 0x000008, "Wrong size on Prop_map_C_OnCompleted_1BF788334BE9A102B33746BB6D4880F8");
static_assert(offsetof(Prop_map_C_OnCompleted_1BF788334BE9A102B33746BB6D4880F8, NotifyName) == 0x000000, "Member 'Prop_map_C_OnCompleted_1BF788334BE9A102B33746BB6D4880F8::NotifyName' has a wrong offset!");

// Function prop_map.prop_map_C.OnBlendOut_1BF788334BE9A102B33746BB6D4880F8
// 0x0008 (0x0008 - 0x0000)
struct Prop_map_C_OnBlendOut_1BF788334BE9A102B33746BB6D4880F8 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_map_C_OnBlendOut_1BF788334BE9A102B33746BB6D4880F8) == 0x000004, "Wrong alignment on Prop_map_C_OnBlendOut_1BF788334BE9A102B33746BB6D4880F8");
static_assert(sizeof(Prop_map_C_OnBlendOut_1BF788334BE9A102B33746BB6D4880F8) == 0x000008, "Wrong size on Prop_map_C_OnBlendOut_1BF788334BE9A102B33746BB6D4880F8");
static_assert(offsetof(Prop_map_C_OnBlendOut_1BF788334BE9A102B33746BB6D4880F8, NotifyName) == 0x000000, "Member 'Prop_map_C_OnBlendOut_1BF788334BE9A102B33746BB6D4880F8::NotifyName' has a wrong offset!");

// Function prop_map.prop_map_C.OnInterrupted_1BF788334BE9A102B33746BB6D4880F8
// 0x0008 (0x0008 - 0x0000)
struct Prop_map_C_OnInterrupted_1BF788334BE9A102B33746BB6D4880F8 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_map_C_OnInterrupted_1BF788334BE9A102B33746BB6D4880F8) == 0x000004, "Wrong alignment on Prop_map_C_OnInterrupted_1BF788334BE9A102B33746BB6D4880F8");
static_assert(sizeof(Prop_map_C_OnInterrupted_1BF788334BE9A102B33746BB6D4880F8) == 0x000008, "Wrong size on Prop_map_C_OnInterrupted_1BF788334BE9A102B33746BB6D4880F8");
static_assert(offsetof(Prop_map_C_OnInterrupted_1BF788334BE9A102B33746BB6D4880F8, NotifyName) == 0x000000, "Member 'Prop_map_C_OnInterrupted_1BF788334BE9A102B33746BB6D4880F8::NotifyName' has a wrong offset!");

// Function prop_map.prop_map_C.OnNotifyBegin_1BF788334BE9A102B33746BB6D4880F8
// 0x0008 (0x0008 - 0x0000)
struct Prop_map_C_OnNotifyBegin_1BF788334BE9A102B33746BB6D4880F8 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_map_C_OnNotifyBegin_1BF788334BE9A102B33746BB6D4880F8) == 0x000004, "Wrong alignment on Prop_map_C_OnNotifyBegin_1BF788334BE9A102B33746BB6D4880F8");
static_assert(sizeof(Prop_map_C_OnNotifyBegin_1BF788334BE9A102B33746BB6D4880F8) == 0x000008, "Wrong size on Prop_map_C_OnNotifyBegin_1BF788334BE9A102B33746BB6D4880F8");
static_assert(offsetof(Prop_map_C_OnNotifyBegin_1BF788334BE9A102B33746BB6D4880F8, NotifyName) == 0x000000, "Member 'Prop_map_C_OnNotifyBegin_1BF788334BE9A102B33746BB6D4880F8::NotifyName' has a wrong offset!");

// Function prop_map.prop_map_C.OnNotifyEnd_1BF788334BE9A102B33746BB6D4880F8
// 0x0008 (0x0008 - 0x0000)
struct Prop_map_C_OnNotifyEnd_1BF788334BE9A102B33746BB6D4880F8 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_map_C_OnNotifyEnd_1BF788334BE9A102B33746BB6D4880F8) == 0x000004, "Wrong alignment on Prop_map_C_OnNotifyEnd_1BF788334BE9A102B33746BB6D4880F8");
static_assert(sizeof(Prop_map_C_OnNotifyEnd_1BF788334BE9A102B33746BB6D4880F8) == 0x000008, "Wrong size on Prop_map_C_OnNotifyEnd_1BF788334BE9A102B33746BB6D4880F8");
static_assert(offsetof(Prop_map_C_OnNotifyEnd_1BF788334BE9A102B33746BB6D4880F8, NotifyName) == 0x000000, "Member 'Prop_map_C_OnNotifyEnd_1BF788334BE9A102B33746BB6D4880F8::NotifyName' has a wrong offset!");

// Function prop_map.prop_map_C.playerHandRelease_RMB
// 0x0008 (0x0008 - 0x0000)
struct Prop_map_C_PlayerHandRelease_RMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_map_C_PlayerHandRelease_RMB) == 0x000008, "Wrong alignment on Prop_map_C_PlayerHandRelease_RMB");
static_assert(sizeof(Prop_map_C_PlayerHandRelease_RMB) == 0x000008, "Wrong size on Prop_map_C_PlayerHandRelease_RMB");
static_assert(offsetof(Prop_map_C_PlayerHandRelease_RMB, Player) == 0x000000, "Member 'Prop_map_C_PlayerHandRelease_RMB::Player' has a wrong offset!");

// Function prop_map.prop_map_C.playerHandUse_RMB
// 0x0008 (0x0008 - 0x0000)
struct Prop_map_C_PlayerHandUse_RMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_map_C_PlayerHandUse_RMB) == 0x000008, "Wrong alignment on Prop_map_C_PlayerHandUse_RMB");
static_assert(sizeof(Prop_map_C_PlayerHandUse_RMB) == 0x000008, "Wrong size on Prop_map_C_PlayerHandUse_RMB");
static_assert(offsetof(Prop_map_C_PlayerHandUse_RMB, Player) == 0x000000, "Member 'Prop_map_C_PlayerHandUse_RMB::Player' has a wrong offset!");

}

