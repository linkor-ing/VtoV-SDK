#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Car1

#include "Basic.hpp"

#include "Struct_settings_structs.hpp"
#include "Struct_save_structs.hpp"
#include "Enum_interactionActions_structs.hpp"
#include "Struct_mFloat_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Struct_mBool_structs.hpp"
#include "Engine_structs.hpp"
#include "Enum_difficulty_structs.hpp"
#include "InputCore_structs.hpp"
#include "Struct_equipment_structs.hpp"


namespace SDK::Params
{

// Function car1.car1_C.ExecuteUbergraph_car1
// 0x1D70 (0x1D70 - 0x0000)
struct Car1_C_ExecuteUbergraph_car1 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key_1;                     // 0x0018(0x0018)(HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0030(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0031(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0032(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x0033(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_4;                              // 0x0034(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_5;                              // 0x0035(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_6;                              // 0x0036(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_7;                              // 0x0037(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AKerfurOmega_C*                         CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_8;                              // 0x0059(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_9;                              // 0x005A(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_10;                             // 0x005B(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_11;                             // 0x005C(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_12;                             // 0x005D(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5E[0x2];                                       // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key;                       // 0x0060(0x0018)(HasGetValueTypeHash)
	struct FVector                                K2Node_Event_location_1;                           // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_7;                             // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_clean_1;                              // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_18;                            // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_8;                                // 0x0098(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AHook_C*                                K2Node_Event_hook_1;                               // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_clean;                                // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_17;                            // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHook_C*                                K2Node_Event_hook;                                 // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainGamemode_C*                        K2Node_Event_gamemode;                             // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_Event_key_2;                                // 0x0148(0x0018)(HasGetValueTypeHash)
	bool                                          K2Node_Event_pressed_1;                            // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_161[0x3];                                      // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Event_color;                                // 0x0164(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUmg_texturePicker_C*                   K2Node_Event_picker;                               // 0x0178(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Event_texture;                              // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_index;                                // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_16;                            // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_7;                                // 0x0198(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          K2Node_Event_kick;                                 // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_221[0x3];                                      // 0x0221(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_name_1;                               // 0x0224(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22C[0x4];                                      // 0x022C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_15;                            // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_14;                            // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_6;                                // 0x0240(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         K2Node_Event_damage_6;                             // 0x02C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2CC[0x4];                                      // 0x02CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_13;                            // 0x02D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_12;                            // 0x02D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_11;                            // 0x02E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x02E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue_1;                 // 0x02F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x02F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue;                   // 0x02F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FC[0x4];                                      // 0x02FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key_12;                    // 0x0300(0x0018)(HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0318(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31C[0x4];                                      // 0x031C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   Temp_struct_Variable;                              // 0x0320(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_13;                    // 0x0338(0x0018)(HasGetValueTypeHash)
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x0350(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue_1;           // 0x0354(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0358(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue_2;           // 0x035C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0360(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0364(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue_3;           // 0x0368(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x036C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x0370(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_374[0x4];                                      // 0x0374(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_1;        // 0x0378(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0380(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SignOfFloat_ReturnValue;                  // 0x0384(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_1;                        // 0x0388(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RLerp_ReturnValue;                        // 0x038C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Ease_ReturnValue;                         // 0x0398(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_RotatorToVector_ReturnValue;         // 0x039C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x03A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x03AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x03B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x03BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x03C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3CC[0x4];                                      // 0x03CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_10;                            // 0x03D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_Constant_ReturnValue;           // 0x03D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_volume;                               // 0x03DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_9;                             // 0x03E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_5;                                // 0x03E8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class FString                                 K2Node_Event_name;                                 // 0x0470(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue_1;       // 0x0480(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0484(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_485[0x3];                                      // 0x0485(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0488(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x048C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0498(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_K2_TeleportTo_ReturnValue;                // 0x04A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A9[0x3];                                      // 0x04A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x04AC(0x0010)(ZeroConstructor, NoDestructor)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x04BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue_4;           // 0x04C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x04C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue_5;           // 0x04C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_5;        // 0x04CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x04D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D1[0x3];                                      // 0x04D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x04D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_1;                // 0x04D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_6;        // 0x04DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_7;        // 0x04E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_Constant_ReturnValue_1;         // 0x04E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_14;                    // 0x04E8(0x0018)(HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_8;                             // 0x0500(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_Event_key_1;                                // 0x0508(0x0018)(HasGetValueTypeHash)
	bool                                          K2Node_Event_pressed;                              // 0x0520(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x0521(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_522[0x6];                                      // 0x0522(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_7;                             // 0x0528(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Event_mouse;                                // 0x0530(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0538(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_539[0x7];                                      // 0x0539(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_6;                             // 0x0540(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_wheelDelta;                           // 0x0548(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x054C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54D[0x3];                                      // 0x054D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   Temp_struct_Variable_1;                            // 0x0550(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x0568(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_569[0x7];                                      // 0x0569(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key_2;                     // 0x0570(0x0018)(HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x0588(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0594(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_4;                  // 0x05A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_5;                  // 0x05A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A2[0x6];                                      // 0x05A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x05A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_5;           // 0x05B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_5;            // 0x05B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x05C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x05C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C5[0x3];                                      // 0x05C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x05C8(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AProp_gascan_C*                         K2Node_DynamicCast_AsProp_Gascan;                  // 0x0650(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0658(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_fuelUp_fueled;                            // 0x0659(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65A[0x6];                                      // 0x065A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key_3;                     // 0x0660(0x0018)(HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue_2;       // 0x0678(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_2;                // 0x067C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_8;        // 0x0680(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_6;                  // 0x0684(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0685(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0686(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue;          // 0x0687(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class AMainPlayer_C*                          K2Node_Event_player_5;                             // 0x0688(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_4;                             // 0x0690(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_5;                             // 0x0698(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_location;                             // 0x069C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_9;        // 0x06A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x06AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x06B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x06B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_10;       // 0x06B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x06BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x06C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_2;                // 0x06CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_AddRelativeRotation_SweepHitResult;    // 0x06D8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x0760(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_11;       // 0x07E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7EC[0x4];                                      // 0x07EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_settings                       K2Node_Event_settings;                             // 0x07F0(0x00F0)(HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_12;       // 0x08E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_3;                // 0x08E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_AddRelativeRotation_SweepHitResult_1;  // 0x08F0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FKey                                   Temp_struct_Variable_2;                            // 0x0978(0x0018)(HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0990(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x099C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_A24[0x4];                                      // 0x0A24(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode;          // 0x0A28(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_13;       // 0x0A30(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0A34(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VictoryFloatMinusEquals_FloatOut;         // 0x0A38(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A3C[0x4];                                      // 0x0A3C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode_1;        // 0x0A40(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0A48(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A49[0x7];                                      // 0x0A49(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode_2;        // 0x0A50(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0A58(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_7;                  // 0x0A59(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A5A[0x6];                                      // 0x0A5A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_3;                             // 0x0A60(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_2;                             // 0x0A68(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_4;                             // 0x0A70(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hot;                                  // 0x0A74(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_SelectFloat_ReturnValue_3;                // 0x0AFC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_4;                // 0x0B00(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0B0C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B0D[0x3];                                      // 0x0B0D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult_1;  // 0x0B10(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_HitComponent_4;         // 0x0B98(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_4;           // 0x0BA0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_4;            // 0x0BA8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_ComponentBoundEvent_NormalImpulse_4;        // 0x0BB0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_ComponentBoundEvent_Hit_4;                  // 0x0BBC(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         K2Node_Event_fuel;                                 // 0x0C44(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue_1;                       // 0x0C48(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4C[0x4];                                      // 0x0C4C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   Temp_struct_Variable_3;                            // 0x0C50(0x0018)(HasGetValueTypeHash)
	float                                         K2Node_Event_temperature_1;                        // 0x0C68(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_speed;                                // 0x0C6C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_4;                     // 0x0C70(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x0C88(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_8;                  // 0x0C89(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_9;                  // 0x0C8A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_10;                 // 0x0C8B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_11;                 // 0x0C8C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C8D[0x3];                                      // 0x0C8D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key_15;                    // 0x0C90(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0CA8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0CA9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CAA[0x2];                                      // 0x0CAA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_damage_3;                             // 0x0CAC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_1;                             // 0x0CB0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_4;                                // 0x0CB8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class FString                                 K2Node_Event_key;                                  // 0x0D40(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_actor_2;                              // 0x0D50(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_2;                             // 0x0D58(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_3;                                // 0x0D5C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                K2Node_Event_impact_2;                             // 0x0DE4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_skipSetting;                          // 0x0DF0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_static;                               // 0x0DF1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_frozen;                               // 0x0DF2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_active;                               // 0x0DF3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_activate;                             // 0x0DF4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DF5[0x3];                                      // 0x0DF5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_damage_1;                             // 0x0DF8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_2;                                // 0x0DFC(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_E84[0x4];                                      // 0x0E84(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_actor_1;                              // 0x0E88(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_impact_1;                             // 0x0E90(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9C[0x4];                                      // 0x0E9C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_Event_component;                            // 0x0EA0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0EA8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_EA9[0x3];                                      // 0x0EA9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_damage;                               // 0x0EAC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_1;                                // 0x0EB0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AActor*                                 K2Node_Event_actor;                                // 0x0F38(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_impact;                               // 0x0F40(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_ignore;                               // 0x0F4C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F4D[0x3];                                      // 0x0F4D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode_3;        // 0x0F50(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_16;                    // 0x0F58(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_5;                     // 0x0F70(0x0018)(HasGetValueTypeHash)
	uint8                                         Pad_F88[0x8];                                      // 0x0F88(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0F90(0x0030)(IsPlainOldData, NoDestructor)
	class AWaterVolume_C*                         K2Node_Event_water_3;                              // 0x0FC0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FC8[0x8];                                      // 0x0FC8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue_1;     // 0x0FD0(0x0030)(IsPlainOldData, NoDestructor)
	class AWaterVolume_C*                         K2Node_Event_water_2;                              // 0x1000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWaterVolume_C*                         K2Node_Event_water_1;                              // 0x1008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWaterVolume_C*                         K2Node_Event_water;                                // 0x1010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IInt_objects_C>        CallFunc_enterWater_self_CastInput;                // 0x1018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TScriptInterface<class IInt_objects_C>        CallFunc_leaveWater_self_CastInput;                // 0x1028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<EObjectTypeQuery>                      CallFunc_obj_static_obj;                           // 0x1038(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_RandomPointInBoundingBox_ReturnValue;     // 0x1048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1054[0xC];                                     // 0x1054(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue_2;     // 0x1060(0x0030)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue_3;       // 0x1090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TransformLocation_ReturnValue;            // 0x1094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_2;          // 0x10A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10A4[0x4];                                     // 0x10A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode_4;        // 0x10A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x10B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10B1[0x7];                                     // 0x10B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode_5;        // 0x10B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_14;       // 0x10C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x10C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue_1;                       // 0x10C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x10CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_15;       // 0x10D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RandomUnitVectorInConeInDegrees_ReturnValue; // 0x10DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VictoryFloatPlusEquals_FloatOut;          // 0x10E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x10EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode_6;        // 0x10F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x1100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x110C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x1194(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x1195(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_12;                 // 0x1196(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1197[0x1];                                     // 0x1197(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x1198(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x11A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USave_main_C*                           CallFunc_getMainSave_save_main;                    // 0x11B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Vector_Distance_ReturnValue;              // 0x11B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentVelocity_ReturnValue;         // 0x11BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VictoryFloatPlusEquals_FloatOut_1;        // 0x11C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x11CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x11D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11D1[0x3];                                     // 0x11D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x11D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x11E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11E1[0xF];                                     // 0x11E1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_Conv_VectorToTransform_ReturnValue;       // 0x11F0(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_Array_Get_Item_1;                         // 0x1220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item_2;                         // 0x1228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x1230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x1234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x1238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x1239(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_123A[0x6];                                     // 0x123A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x1240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x1248(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1254[0x4];                                     // 0x1254(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue_1;     // 0x1258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_3;        // 0x1260(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_126C[0x4];                                     // 0x126C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetOverlappingActors_OverlappingActors;   // 0x1270(0x0010)(ReferenceParm)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x1280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x1281(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x1282(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1283[0x1];                                     // 0x1283(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_2;    // 0x1284(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x1290(0x0030)(IsPlainOldData, NoDestructor)
	float                                         K2Node_LowEntry_LocalVariable_Value__Object;       // 0x12C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12C4[0x4];                                     // 0x12C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x12C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x12D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12D1[0x7];                                     // 0x12D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AExplosion_C*                           CallFunc_FinishSpawningActor_ReturnValue;          // 0x12D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player;                               // 0x12E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit;                                  // 0x12E8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	Enum_interactionActions                       K2Node_Event_action;                               // 0x1370(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_13;                             // 0x1371(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x1372(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1373[0x5];                                     // 0x1373(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UActorComponent*                        K2Node_Select_Default;                             // 0x1378(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x1380(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x1384(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x1388(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_checkEquip_empty;                         // 0x138C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_138D[0x3];                                     // 0x138D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_equipment                      CallFunc_checkEquip_Output;                        // 0x1390(0x00F0)(HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_2;                        // 0x1480(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x1484(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1485[0xB];                                     // 0x1485(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue_3;     // 0x1490(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x14C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x14CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x14D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14E4[0x4];                                     // 0x14E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_2;        // 0x14E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x14F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x14FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x1500(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x1504(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1508[0x8];                                     // 0x1508(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue_4;     // 0x1510(0x0030)(IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_5;                // 0x1540(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x154C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x1558(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x1564(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x1570(0x0030)(IsPlainOldData, NoDestructor)
	struct FKey                                   K2Node_InputActionEvent_Key_6;                     // 0x15A0(0x0018)(HasGetValueTypeHash)
	class UAudioComponent*                        CallFunc_SpawnSoundAttached_ReturnValue;           // 0x15B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CallFunc_SpawnSoundAttached_ReturnValue_1;         // 0x15C0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_13;                 // 0x15C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_14;                 // 0x15C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_15;                 // 0x15CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x15CB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult_2;  // 0x15CC(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_1654[0x4];                                     // 0x1654(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   Temp_struct_Variable_4;                            // 0x1658(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue_1;       // 0x1670(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1671[0x7];                                     // 0x1671(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key_7;                     // 0x1678(0x0018)(HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x1690(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_169C[0x4];                                     // 0x169C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key_8;                     // 0x16A0(0x0018)(HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x16B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue_1;           // 0x16C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x16D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x16DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x16E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x16F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_HitComponent_3;         // 0x1700(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_3;           // 0x1708(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_3;            // 0x1710(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_ComponentBoundEvent_NormalImpulse_3;        // 0x1718(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_ComponentBoundEvent_Hit_3;                  // 0x1724(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_17AC[0x4];                                     // 0x17AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_HitComponent_2;         // 0x17B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_2;           // 0x17B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_2;            // 0x17C0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_ComponentBoundEvent_NormalImpulse_2;        // 0x17C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_ComponentBoundEvent_Hit_2;                  // 0x17D4(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x185C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x185D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_16;                 // 0x185E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x185F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_17;                 // 0x1860(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x1861(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1862[0x2];                                     // 0x1862(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue_4;                // 0x1864(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_3;       // 0x1868(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_4;       // 0x1874(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_fullBody;                       // 0x1880(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue_1;      // 0x188C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_5;       // 0x1898(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x18A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentVelocity_ReturnValue_1;       // 0x18B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue_4;       // 0x18BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VInterpTo_ReturnValue;                    // 0x18C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorFloat_ReturnValue;           // 0x18CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_HitComponent_1;         // 0x18D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_1;           // 0x18E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_1;            // 0x18E8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_ComponentBoundEvent_NormalImpulse_1;        // 0x18F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_ComponentBoundEvent_Hit_1;                  // 0x18FC(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                K2Node_CustomEvent_Value;                          // 0x1984(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_LowEntry_LocalVariable_Value__1_Object;     // 0x1990(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue_1;                      // 0x199C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue_1;    // 0x19A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_3;          // 0x19AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_InverseTransformRotation_ReturnValue;     // 0x19B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_4;          // 0x19BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_2;                      // 0x19C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_2;                     // 0x19C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_2;                       // 0x19C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_LowEntry_LocalVariable_Value__2_Object;     // 0x19CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_6;                // 0x19D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_16;       // 0x19DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_2;              // 0x19E0(0x0030)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_VictoryFloatMinusEquals_FloatOut_1;       // 0x1A10(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_2;       // 0x1A14(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_2;         // 0x1A15(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_3;         // 0x1A16(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A17[0x1];                                     // 0x1A17(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue_2;    // 0x1A18(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_InverseTransformRotation_ReturnValue_1;   // 0x1A24(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetComponentVelocity_ReturnValue_2;       // 0x1A30(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_3;                      // 0x1A3C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_3;                     // 0x1A40(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_3;                       // 0x1A44(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_1;      // 0x1A48(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_7;                // 0x1A54(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_VSize_ReturnValue_2;                      // 0x1A60(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A64[0xC];                                     // 0x1A64(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_3;              // 0x1A70(0x0030)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_5;          // 0x1AA0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x1AA4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_17;       // 0x1AA8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x1AAC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue_1;             // 0x1AB8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1AB9[0x3];                                     // 0x1AB9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_temperature;                          // 0x1ABC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AKerfurOmega_C*>                 CallFunc_GetAllActorsOfClass_OutActors;            // 0x1AC0(0x0010)(ReferenceParm)
	class AKerfurOmega_C*                         CallFunc_Array_Get_Item_3;                         // 0x1AD0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x1AD8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x1ADC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_18;                 // 0x1ADD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_19;                 // 0x1ADE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1ADF[0x1];                                     // 0x1ADF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_3;    // 0x1AE0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocationAndRotation_SweepHitResult; // 0x1AEC(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocationAndRotation_ReturnValue; // 0x1B74(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B75[0x3];                                     // 0x1B75(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAttached_ReturnValue;         // 0x1B78(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_HitComponent;           // 0x1B80(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x1B88(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x1B90(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_ComponentBoundEvent_NormalImpulse;          // 0x1B98(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_ComponentBoundEvent_Hit;                    // 0x1BA4(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_Array_Contains_ReturnValue_2;             // 0x1C2C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C2D[0x3];                                     // 0x1C2D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue_5;       // 0x1C30(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C34[0x4];                                     // 0x1C34(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   Temp_struct_Variable_5;                            // 0x1C38(0x0018)(HasGetValueTypeHash)
	float                                         CallFunc_VictoryFloatPlusEquals_FloatOut_2;        // 0x1C50(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C54[0x4];                                     // 0x1C54(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x1C58(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x1C68(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x1CA8(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x1CB8(0x0018)()
	struct FKey                                   K2Node_InputActionEvent_Key_9;                     // 0x1CD0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_10;                    // 0x1CE8(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_IsAnyRigidBodyAwake_ReturnValue;          // 0x1D00(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_5;                // 0x1D01(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_20;                 // 0x1D02(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_4;         // 0x1D03(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_5;         // 0x1D04(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_6;         // 0x1D05(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_7;         // 0x1D06(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_8;         // 0x1D07(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_6;                // 0x1D08(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_7;                // 0x1D09(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_21;                 // 0x1D0A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_22;                 // 0x1D0B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D0C[0x4];                                     // 0x1D0C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        CallFunc_SpawnSoundAttached_ReturnValue_2;         // 0x1D10(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_6;                            // 0x1D18(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_11;                    // 0x1D30(0x0018)(HasGetValueTypeHash)
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue_2;     // 0x1D48(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDistanceTo_ReturnValue;                // 0x1D50(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_6;          // 0x1D54(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_3;             // 0x1D58(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_FloatToVector_ReturnValue;           // 0x1D5C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_ExecuteUbergraph_car1) == 0x000010, "Wrong alignment on Car1_C_ExecuteUbergraph_car1");
static_assert(sizeof(Car1_C_ExecuteUbergraph_car1) == 0x001D70, "Wrong size on Car1_C_ExecuteUbergraph_car1");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, EntryPoint) == 0x000000, "Member 'Car1_C_ExecuteUbergraph_car1::EntryPoint' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, Temp_int_Variable) == 0x000004, "Member 'Car1_C_ExecuteUbergraph_car1::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, Temp_int_Variable_1) == 0x000008, "Member 'Car1_C_ExecuteUbergraph_car1::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Add_IntInt_ReturnValue_1) == 0x000010, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_InputActionEvent_Key_1) == 0x000018, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_InputActionEvent_Key_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, Temp_bool_Variable) == 0x000030, "Member 'Car1_C_ExecuteUbergraph_car1::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, Temp_bool_Variable_1) == 0x000031, "Member 'Car1_C_ExecuteUbergraph_car1::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, Temp_bool_Variable_2) == 0x000032, "Member 'Car1_C_ExecuteUbergraph_car1::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, Temp_bool_Variable_3) == 0x000033, "Member 'Car1_C_ExecuteUbergraph_car1::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, Temp_bool_Variable_4) == 0x000034, "Member 'Car1_C_ExecuteUbergraph_car1::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, Temp_bool_Variable_5) == 0x000035, "Member 'Car1_C_ExecuteUbergraph_car1::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, Temp_bool_Variable_6) == 0x000036, "Member 'Car1_C_ExecuteUbergraph_car1::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, Temp_bool_Variable_7) == 0x000037, "Member 'Car1_C_ExecuteUbergraph_car1::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, Temp_int_Variable_2) == 0x00003C, "Member 'Car1_C_ExecuteUbergraph_car1::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, Temp_int_Variable_3) == 0x000040, "Member 'Car1_C_ExecuteUbergraph_car1::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Add_IntInt_ReturnValue_2) == 0x000044, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Add_IntInt_ReturnValue_3) == 0x000048, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Array_Get_Item) == 0x000050, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Less_IntInt_ReturnValue) == 0x000058, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, Temp_bool_Variable_8) == 0x000059, "Member 'Car1_C_ExecuteUbergraph_car1::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, Temp_bool_Variable_9) == 0x00005A, "Member 'Car1_C_ExecuteUbergraph_car1::Temp_bool_Variable_9' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, Temp_bool_Variable_10) == 0x00005B, "Member 'Car1_C_ExecuteUbergraph_car1::Temp_bool_Variable_10' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, Temp_bool_Variable_11) == 0x00005C, "Member 'Car1_C_ExecuteUbergraph_car1::Temp_bool_Variable_11' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, Temp_bool_Variable_12) == 0x00005D, "Member 'Car1_C_ExecuteUbergraph_car1::Temp_bool_Variable_12' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_InputActionEvent_Key) == 0x000060, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_InputActionEvent_Key' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_location_1) == 0x000078, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_location_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_damage_7) == 0x000084, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_damage_7' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_clean_1) == 0x000088, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_clean_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_player_18) == 0x000090, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_player_18' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_hit_8) == 0x000098, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_hit_8' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_hook_1) == 0x000120, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_hook_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_clean) == 0x000128, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_clean' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_player_17) == 0x000130, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_player_17' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_hook) == 0x000138, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_hook' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_gamemode) == 0x000140, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_gamemode' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_key_2) == 0x000148, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_key_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_pressed_1) == 0x000160, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_pressed_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_color) == 0x000164, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_color' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_picker) == 0x000178, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_picker' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_texture) == 0x000180, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_texture' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_index) == 0x000188, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_index' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_player_16) == 0x000190, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_player_16' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_hit_7) == 0x000198, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_hit_7' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_kick) == 0x000220, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_kick' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_name_1) == 0x000224, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_name_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_player_15) == 0x000230, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_player_15' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_player_14) == 0x000238, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_player_14' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_hit_6) == 0x000240, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_hit_6' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_damage_6) == 0x0002C8, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_damage_6' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_player_13) == 0x0002D0, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_player_13' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_player_12) == 0x0002D8, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_player_12' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_player_11) == 0x0002E0, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_player_11' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_GetPlayerController_ReturnValue) == 0x0002E8, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_InputAxisEvent_AxisValue_1) == 0x0002F0, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_InputAxisEvent_AxisValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0002F4, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_InputAxisEvent_AxisValue) == 0x0002F8, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_InputAxisEvent_AxisValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_InputActionEvent_Key_12) == 0x000300, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_InputActionEvent_Key_12' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000318, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, Temp_struct_Variable) == 0x000320, "Member 'Car1_C_ExecuteUbergraph_car1::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_InputActionEvent_Key_13) == 0x000338, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_InputActionEvent_Key_13' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x000350, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Conv_BoolToFloat_ReturnValue_1) == 0x000354, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Conv_BoolToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000358, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Conv_BoolToFloat_ReturnValue_2) == 0x00035C, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Conv_BoolToFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Add_FloatFloat_ReturnValue) == 0x000360, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Abs_ReturnValue) == 0x000364, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Conv_BoolToFloat_ReturnValue_3) == 0x000368, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Conv_BoolToFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_DeltaSeconds) == 0x00036C, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x000370, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_GetPlayerController_ReturnValue_1) == 0x000378, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_GetPlayerController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000380, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_SignOfFloat_ReturnValue) == 0x000384, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_SignOfFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Abs_ReturnValue_1) == 0x000388, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_RLerp_ReturnValue) == 0x00038C, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_RLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Ease_ReturnValue) == 0x000398, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Conv_RotatorToVector_ReturnValue) == 0x00039C, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Conv_RotatorToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x0003A8, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Cross_VectorVector_ReturnValue) == 0x0003AC, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Lerp_ReturnValue) == 0x0003B8, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_MakeRotator_ReturnValue) == 0x0003BC, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x0003C8, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_player_10) == 0x0003D0, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_player_10' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_FInterpTo_Constant_ReturnValue) == 0x0003D8, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_FInterpTo_Constant_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_volume) == 0x0003DC, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_volume' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_player_9) == 0x0003E0, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_player_9' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_hit_5) == 0x0003E8, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_hit_5' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_name) == 0x000470, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_name' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_GetWorldDeltaSeconds_ReturnValue_1) == 0x000480, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_GetWorldDeltaSeconds_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000484, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_SelectFloat_ReturnValue) == 0x000488, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00048C, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, Temp_object_Variable) == 0x000498, "Member 'Car1_C_ExecuteUbergraph_car1::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_K2_TeleportTo_ReturnValue) == 0x0004A8, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_K2_TeleportTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_CreateDelegate_OutputDelegate) == 0x0004AC, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0004BC, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Conv_BoolToFloat_ReturnValue_4) == 0x0004C0, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Conv_BoolToFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_FMax_ReturnValue) == 0x0004C4, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Conv_BoolToFloat_ReturnValue_5) == 0x0004C8, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Conv_BoolToFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Multiply_FloatFloat_ReturnValue_5) == 0x0004CC, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Multiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BooleanOR_ReturnValue) == 0x0004D0, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x0004D4, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_SelectFloat_ReturnValue_1) == 0x0004D8, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Multiply_FloatFloat_ReturnValue_6) == 0x0004DC, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Multiply_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Multiply_FloatFloat_ReturnValue_7) == 0x0004E0, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Multiply_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_FInterpTo_Constant_ReturnValue_1) == 0x0004E4, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_FInterpTo_Constant_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_InputActionEvent_Key_14) == 0x0004E8, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_InputActionEvent_Key_14' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_player_8) == 0x000500, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_player_8' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_key_1) == 0x000508, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_key_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_pressed) == 0x000520, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_pressed' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_K2_AttachToComponent_ReturnValue) == 0x000521, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_player_7) == 0x000528, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_player_7' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_mouse) == 0x000530, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_mouse' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BooleanOR_ReturnValue_1) == 0x000538, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_player_6) == 0x000540, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_player_6' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_wheelDelta) == 0x000548, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_wheelDelta' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BooleanOR_ReturnValue_2) == 0x00054C, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, Temp_struct_Variable_1) == 0x000550, "Member 'Car1_C_ExecuteUbergraph_car1::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BooleanOR_ReturnValue_3) == 0x000568, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_InputActionEvent_Key_2) == 0x000570, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_InputActionEvent_Key_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_GetRightVector_ReturnValue) == 0x000588, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000594, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BooleanOR_ReturnValue_4) == 0x0005A0, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BooleanOR_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BooleanOR_ReturnValue_5) == 0x0005A1, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BooleanOR_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x0005A8, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_ComponentBoundEvent_OtherActor_5) == 0x0005B0, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_ComponentBoundEvent_OtherActor_5' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_ComponentBoundEvent_OtherComp_5) == 0x0005B8, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_ComponentBoundEvent_OtherComp_5' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x0005C0, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_ComponentBoundEvent_bFromSweep) == 0x0005C4, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_ComponentBoundEvent_SweepResult) == 0x0005C8, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_DynamicCast_AsProp_Gascan) == 0x000650, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_DynamicCast_AsProp_Gascan' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_DynamicCast_bSuccess) == 0x000658, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_fuelUp_fueled) == 0x000659, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_fuelUp_fueled' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_InputActionEvent_Key_3) == 0x000660, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_InputActionEvent_Key_3' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_GetWorldDeltaSeconds_ReturnValue_2) == 0x000678, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_GetWorldDeltaSeconds_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_SelectFloat_ReturnValue_2) == 0x00067C, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_SelectFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Multiply_FloatFloat_ReturnValue_8) == 0x000680, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Multiply_FloatFloat_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BooleanOR_ReturnValue_6) == 0x000684, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BooleanOR_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Not_PreBool_ReturnValue) == 0x000685, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BooleanAND_ReturnValue) == 0x000686, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_EqualEqual_BoolBool_ReturnValue) == 0x000687, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_EqualEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_player_5) == 0x000688, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_player_5' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_player_4) == 0x000690, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_player_4' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_damage_5) == 0x000698, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_damage_5' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_location) == 0x00069C, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_location' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Multiply_FloatFloat_ReturnValue_9) == 0x0006A8, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Multiply_FloatFloat_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BreakRotator_Roll) == 0x0006AC, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BreakRotator_Pitch) == 0x0006B0, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BreakRotator_Yaw) == 0x0006B4, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Multiply_FloatFloat_ReturnValue_10) == 0x0006B8, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Multiply_FloatFloat_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_FClamp_ReturnValue) == 0x0006BC, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_MakeRotator_ReturnValue_1) == 0x0006C0, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_MakeRotator_ReturnValue_2) == 0x0006CC, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_MakeRotator_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_K2_AddRelativeRotation_SweepHitResult) == 0x0006D8, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_K2_AddRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x000760, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Multiply_FloatFloat_ReturnValue_11) == 0x0007E8, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Multiply_FloatFloat_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_settings) == 0x0007F0, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_settings' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Multiply_FloatFloat_ReturnValue_12) == 0x0008E0, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Multiply_FloatFloat_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_MakeRotator_ReturnValue_3) == 0x0008E4, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_MakeRotator_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_K2_AddRelativeRotation_SweepHitResult_1) == 0x0008F0, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_K2_AddRelativeRotation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, Temp_struct_Variable_2) == 0x000978, "Member 'Car1_C_ExecuteUbergraph_car1::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000990, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x00099C, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_getMainGamemode_AsMain_Gamemode) == 0x000A28, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_getMainGamemode_AsMain_Gamemode' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Multiply_FloatFloat_ReturnValue_13) == 0x000A30, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Multiply_FloatFloat_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000A34, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_VictoryFloatMinusEquals_FloatOut) == 0x000A38, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_VictoryFloatMinusEquals_FloatOut' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_getMainGamemode_AsMain_Gamemode_1) == 0x000A40, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_getMainGamemode_AsMain_Gamemode_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000A48, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_getMainGamemode_AsMain_Gamemode_2) == 0x000A50, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_getMainGamemode_AsMain_Gamemode_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Not_PreBool_ReturnValue_1) == 0x000A58, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BooleanOR_ReturnValue_7) == 0x000A59, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BooleanOR_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_player_3) == 0x000A60, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_player_3' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_player_2) == 0x000A68, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_player_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_damage_4) == 0x000A70, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_damage_4' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_hot) == 0x000A74, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_hot' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_SelectFloat_ReturnValue_3) == 0x000AFC, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_SelectFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_MakeRotator_ReturnValue_4) == 0x000B00, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_MakeRotator_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Not_PreBool_ReturnValue_2) == 0x000B0C, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_K2_SetRelativeRotation_SweepHitResult_1) == 0x000B10, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_K2_SetRelativeRotation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_ComponentBoundEvent_HitComponent_4) == 0x000B98, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_ComponentBoundEvent_HitComponent_4' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_ComponentBoundEvent_OtherActor_4) == 0x000BA0, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_ComponentBoundEvent_OtherActor_4' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_ComponentBoundEvent_OtherComp_4) == 0x000BA8, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_ComponentBoundEvent_OtherComp_4' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_ComponentBoundEvent_NormalImpulse_4) == 0x000BB0, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_ComponentBoundEvent_NormalImpulse_4' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_ComponentBoundEvent_Hit_4) == 0x000BBC, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_ComponentBoundEvent_Hit_4' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_fuel) == 0x000C44, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_fuel' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Ease_ReturnValue_1) == 0x000C48, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Ease_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, Temp_struct_Variable_3) == 0x000C50, "Member 'Car1_C_ExecuteUbergraph_car1::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_temperature_1) == 0x000C68, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_temperature_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_speed) == 0x000C6C, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_speed' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_InputActionEvent_Key_4) == 0x000C70, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_InputActionEvent_Key_4' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x000C88, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BooleanOR_ReturnValue_8) == 0x000C89, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BooleanOR_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BooleanOR_ReturnValue_9) == 0x000C8A, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BooleanOR_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BooleanOR_ReturnValue_10) == 0x000C8B, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BooleanOR_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BooleanOR_ReturnValue_11) == 0x000C8C, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BooleanOR_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_InputActionEvent_Key_15) == 0x000C90, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_InputActionEvent_Key_15' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_IsValid_ReturnValue) == 0x000CA8, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_IsValid_ReturnValue_1) == 0x000CA9, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_damage_3) == 0x000CAC, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_damage_3' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_player_1) == 0x000CB0, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_player_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_hit_4) == 0x000CB8, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_hit_4' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_key) == 0x000D40, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_key' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_actor_2) == 0x000D50, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_actor_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_damage_2) == 0x000D58, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_damage_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_hit_3) == 0x000D5C, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_hit_3' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_impact_2) == 0x000DE4, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_impact_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_skipSetting) == 0x000DF0, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_skipSetting' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_static) == 0x000DF1, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_static' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_frozen) == 0x000DF2, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_frozen' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_active) == 0x000DF3, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_active' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_activate) == 0x000DF4, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_activate' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_damage_1) == 0x000DF8, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_damage_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_hit_2) == 0x000DFC, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_hit_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_actor_1) == 0x000E88, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_actor_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_impact_1) == 0x000E90, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_impact_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_component) == 0x000EA0, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_component' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_IsValid_ReturnValue_2) == 0x000EA8, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_damage) == 0x000EAC, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_damage' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_hit_1) == 0x000EB0, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_hit_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_actor) == 0x000F38, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_actor' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_impact) == 0x000F40, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_impact' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_ignore) == 0x000F4C, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_ignore' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_getMainGamemode_AsMain_Gamemode_3) == 0x000F50, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_getMainGamemode_AsMain_Gamemode_3' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_InputActionEvent_Key_16) == 0x000F58, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_InputActionEvent_Key_16' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_InputActionEvent_Key_5) == 0x000F70, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_InputActionEvent_Key_5' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000F90, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_water_3) == 0x000FC0, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_water_3' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_K2_GetComponentToWorld_ReturnValue_1) == 0x000FD0, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_K2_GetComponentToWorld_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_water_2) == 0x001000, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_water_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_water_1) == 0x001008, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_water_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_water) == 0x001010, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_water' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_enterWater_self_CastInput) == 0x001018, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_enterWater_self_CastInput' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_leaveWater_self_CastInput) == 0x001028, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_leaveWater_self_CastInput' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_obj_static_obj) == 0x001038, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_obj_static_obj' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_RandomPointInBoundingBox_ReturnValue) == 0x001048, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_RandomPointInBoundingBox_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_K2_GetComponentToWorld_ReturnValue_2) == 0x001060, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_K2_GetComponentToWorld_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_GetWorldDeltaSeconds_ReturnValue_3) == 0x001090, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_GetWorldDeltaSeconds_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_TransformLocation_ReturnValue) == 0x001094, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_TransformLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Divide_FloatFloat_ReturnValue_2) == 0x0010A0, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Divide_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_getMainGamemode_AsMain_Gamemode_4) == 0x0010A8, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_getMainGamemode_AsMain_Gamemode_4' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Less_FloatFloat_ReturnValue) == 0x0010B0, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_getMainGamemode_AsMain_Gamemode_5) == 0x0010B8, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_getMainGamemode_AsMain_Gamemode_5' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Multiply_FloatFloat_ReturnValue_14) == 0x0010C0, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Multiply_FloatFloat_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0010C4, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_FMax_ReturnValue_1) == 0x0010C8, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_FMax_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_GetActorForwardVector_ReturnValue) == 0x0010CC, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Multiply_FloatFloat_ReturnValue_15) == 0x0010D8, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Multiply_FloatFloat_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_RandomUnitVectorInConeInDegrees_ReturnValue) == 0x0010DC, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_RandomUnitVectorInConeInDegrees_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_VictoryFloatPlusEquals_FloatOut) == 0x0010E8, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_VictoryFloatPlusEquals_FloatOut' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x0010EC, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_getMainGamemode_AsMain_Gamemode_6) == 0x0010F8, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_getMainGamemode_AsMain_Gamemode_6' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Add_VectorVector_ReturnValue) == 0x001100, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_LineTraceSingleForObjects_OutHit) == 0x00110C, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x001194, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Greater_IntInt_ReturnValue) == 0x001195, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BooleanOR_ReturnValue_12) == 0x001196, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BooleanOR_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_K2_GetActorLocation_ReturnValue) == 0x001198, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x0011A4, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_getMainSave_save_main) == 0x0011B0, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_getMainSave_save_main' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Vector_Distance_ReturnValue) == 0x0011B8, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_GetComponentVelocity_ReturnValue) == 0x0011BC, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_GetComponentVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_VictoryFloatPlusEquals_FloatOut_1) == 0x0011C8, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_VictoryFloatPlusEquals_FloatOut_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_VSize_ReturnValue) == 0x0011CC, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x0011D0, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x0011D4, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BooleanAND_ReturnValue_1) == 0x0011E0, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Conv_VectorToTransform_ReturnValue) == 0x0011F0, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Conv_VectorToTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Array_Get_Item_1) == 0x001220, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Array_Get_Item_2) == 0x001228, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Array_Length_ReturnValue_1) == 0x001230, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Array_Length_ReturnValue_2) == 0x001234, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Less_IntInt_ReturnValue_1) == 0x001238, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Less_IntInt_ReturnValue_2) == 0x001239, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x001240, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x001248, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_GetPlayerCameraManager_ReturnValue_1) == 0x001258, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_GetPlayerCameraManager_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_K2_GetActorLocation_ReturnValue_3) == 0x001260, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_K2_GetActorLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_GetOverlappingActors_OverlappingActors) == 0x001270, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_GetOverlappingActors_OverlappingActors' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Array_IsValidIndex_ReturnValue) == 0x001280, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_IsValid_ReturnValue_3) == 0x001281, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_IsValid_ReturnValue_4) == 0x001282, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_K2_GetComponentLocation_ReturnValue_2) == 0x001284, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_K2_GetComponentLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_MakeTransform_ReturnValue) == 0x001290, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_LowEntry_LocalVariable_Value__Object) == 0x0012C0, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_LowEntry_LocalVariable_Value__Object' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x0012C8, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0012D0, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_FinishSpawningActor_ReturnValue) == 0x0012D8, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_player) == 0x0012E0, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_player' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_hit) == 0x0012E8, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_hit' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_action) == 0x001370, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_action' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, Temp_bool_Variable_13) == 0x001371, "Member 'Car1_C_ExecuteUbergraph_car1::Temp_bool_Variable_13' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_SwitchEnum_CmpSuccess) == 0x001372, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Select_Default) == 0x001378, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BreakVector_X) == 0x001380, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BreakVector_Y) == 0x001384, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BreakVector_Z) == 0x001388, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_checkEquip_empty) == 0x00138C, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_checkEquip_empty' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_checkEquip_Output) == 0x001390, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_checkEquip_Output' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Abs_ReturnValue_2) == 0x001480, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Abs_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x001484, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_K2_GetComponentToWorld_ReturnValue_3) == 0x001490, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_K2_GetComponentToWorld_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BreakTransform_Location) == 0x0014C0, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BreakTransform_Rotation) == 0x0014CC, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BreakTransform_Scale) == 0x0014D8, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_GetPlayerController_ReturnValue_2) == 0x0014E8, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_GetPlayerController_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_K2_GetActorRotation_ReturnValue) == 0x0014F0, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BreakRotator_Roll_1) == 0x0014FC, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BreakRotator_Pitch_1) == 0x001500, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BreakRotator_Yaw_1) == 0x001504, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_K2_GetComponentToWorld_ReturnValue_4) == 0x001510, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_K2_GetComponentToWorld_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_MakeRotator_ReturnValue_5) == 0x001540, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_MakeRotator_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BreakTransform_Location_1) == 0x00154C, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BreakTransform_Rotation_1) == 0x001558, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BreakTransform_Scale_1) == 0x001564, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_MakeTransform_ReturnValue_1) == 0x001570, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_InputActionEvent_Key_6) == 0x0015A0, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_InputActionEvent_Key_6' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_SpawnSoundAttached_ReturnValue) == 0x0015B8, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_SpawnSoundAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_SpawnSoundAttached_ReturnValue_1) == 0x0015C0, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_SpawnSoundAttached_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BooleanOR_ReturnValue_13) == 0x0015C8, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BooleanOR_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BooleanOR_ReturnValue_14) == 0x0015C9, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BooleanOR_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BooleanOR_ReturnValue_15) == 0x0015CA, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BooleanOR_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_IsValid_ReturnValue_5) == 0x0015CB, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_K2_SetRelativeRotation_SweepHitResult_2) == 0x0015CC, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_K2_SetRelativeRotation_SweepHitResult_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, Temp_struct_Variable_4) == 0x001658, "Member 'Car1_C_ExecuteUbergraph_car1::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_K2_AttachToComponent_ReturnValue_1) == 0x001670, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_K2_AttachToComponent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_InputActionEvent_Key_7) == 0x001678, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_InputActionEvent_Key_7' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_GetForwardVector_ReturnValue) == 0x001690, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_InputActionEvent_Key_8) == 0x0016A0, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_InputActionEvent_Key_8' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Multiply_VectorVector_ReturnValue) == 0x0016B8, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_GetForwardVector_ReturnValue_1) == 0x0016C4, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_GetForwardVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_MakeVector_ReturnValue) == 0x0016D0, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_VLerp_ReturnValue) == 0x0016DC, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_VLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x0016E8, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Normal_ReturnValue) == 0x0016F4, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_ComponentBoundEvent_HitComponent_3) == 0x001700, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_ComponentBoundEvent_HitComponent_3' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_ComponentBoundEvent_OtherActor_3) == 0x001708, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_ComponentBoundEvent_OtherActor_3' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_ComponentBoundEvent_OtherComp_3) == 0x001710, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_ComponentBoundEvent_OtherComp_3' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_ComponentBoundEvent_NormalImpulse_3) == 0x001718, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_ComponentBoundEvent_NormalImpulse_3' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_ComponentBoundEvent_Hit_3) == 0x001724, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_ComponentBoundEvent_Hit_3' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_ComponentBoundEvent_HitComponent_2) == 0x0017B0, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_ComponentBoundEvent_HitComponent_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_ComponentBoundEvent_OtherActor_2) == 0x0017B8, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_ComponentBoundEvent_OtherActor_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_ComponentBoundEvent_OtherComp_2) == 0x0017C0, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_ComponentBoundEvent_OtherComp_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_ComponentBoundEvent_NormalImpulse_2) == 0x0017C8, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_ComponentBoundEvent_NormalImpulse_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_ComponentBoundEvent_Hit_2) == 0x0017D4, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_ComponentBoundEvent_Hit_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Array_Contains_ReturnValue) == 0x00185C, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Not_PreBool_ReturnValue_3) == 0x00185D, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BooleanOR_ReturnValue_16) == 0x00185E, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BooleanOR_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Not_PreBool_ReturnValue_4) == 0x00185F, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BooleanOR_ReturnValue_17) == 0x001860, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BooleanOR_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BooleanAND_ReturnValue_2) == 0x001861, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_SelectFloat_ReturnValue_4) == 0x001864, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_SelectFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Multiply_VectorFloat_ReturnValue_3) == 0x001868, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Multiply_VectorFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Multiply_VectorFloat_ReturnValue_4) == 0x001874, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Multiply_VectorFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_CustomEvent_fullBody) == 0x001880, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_CustomEvent_fullBody' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_GetActorForwardVector_ReturnValue_1) == 0x00188C, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_GetActorForwardVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Multiply_VectorFloat_ReturnValue_5) == 0x001898, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Multiply_VectorFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0018A4, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_GetComponentVelocity_ReturnValue_1) == 0x0018B0, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_GetComponentVelocity_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_GetWorldDeltaSeconds_ReturnValue_4) == 0x0018BC, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_GetWorldDeltaSeconds_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_VInterpTo_ReturnValue) == 0x0018C0, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_VInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Divide_VectorFloat_ReturnValue) == 0x0018CC, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Divide_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_ComponentBoundEvent_HitComponent_1) == 0x0018D8, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_ComponentBoundEvent_HitComponent_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_ComponentBoundEvent_OtherActor_1) == 0x0018E0, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_ComponentBoundEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_ComponentBoundEvent_OtherComp_1) == 0x0018E8, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_ComponentBoundEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_ComponentBoundEvent_NormalImpulse_1) == 0x0018F0, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_ComponentBoundEvent_NormalImpulse_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_ComponentBoundEvent_Hit_1) == 0x0018FC, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_ComponentBoundEvent_Hit_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_CustomEvent_Value) == 0x001984, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_CustomEvent_Value' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_LowEntry_LocalVariable_Value__1_Object) == 0x001990, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_LowEntry_LocalVariable_Value__1_Object' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_VSize_ReturnValue_1) == 0x00199C, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_VSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_K2_GetComponentRotation_ReturnValue_1) == 0x0019A0, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_K2_GetComponentRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Divide_FloatFloat_ReturnValue_3) == 0x0019AC, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Divide_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_InverseTransformRotation_ReturnValue) == 0x0019B0, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_InverseTransformRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Divide_FloatFloat_ReturnValue_4) == 0x0019BC, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Divide_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BreakRotator_Roll_2) == 0x0019C0, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BreakRotator_Roll_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BreakRotator_Pitch_2) == 0x0019C4, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BreakRotator_Pitch_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BreakRotator_Yaw_2) == 0x0019C8, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BreakRotator_Yaw_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_LowEntry_LocalVariable_Value__2_Object) == 0x0019CC, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_LowEntry_LocalVariable_Value__2_Object' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_MakeRotator_ReturnValue_6) == 0x0019D0, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_MakeRotator_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Multiply_FloatFloat_ReturnValue_16) == 0x0019DC, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Multiply_FloatFloat_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_MakeTransform_ReturnValue_2) == 0x0019E0, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_MakeTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_VictoryFloatMinusEquals_FloatOut_1) == 0x001A10, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_VictoryFloatMinusEquals_FloatOut_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_LessEqual_FloatFloat_ReturnValue_2) == 0x001A14, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_LessEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Greater_FloatFloat_ReturnValue_2) == 0x001A15, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Greater_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Greater_FloatFloat_ReturnValue_3) == 0x001A16, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Greater_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_K2_GetComponentRotation_ReturnValue_2) == 0x001A18, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_K2_GetComponentRotation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_InverseTransformRotation_ReturnValue_1) == 0x001A24, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_InverseTransformRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_GetComponentVelocity_ReturnValue_2) == 0x001A30, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_GetComponentVelocity_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BreakRotator_Roll_3) == 0x001A3C, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BreakRotator_Roll_3' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BreakRotator_Pitch_3) == 0x001A40, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BreakRotator_Pitch_3' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BreakRotator_Yaw_3) == 0x001A44, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BreakRotator_Yaw_3' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Multiply_VectorVector_ReturnValue_1) == 0x001A48, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Multiply_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_MakeRotator_ReturnValue_7) == 0x001A54, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_MakeRotator_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_VSize_ReturnValue_2) == 0x001A60, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_VSize_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_MakeTransform_ReturnValue_3) == 0x001A70, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_MakeTransform_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Divide_FloatFloat_ReturnValue_5) == 0x001AA0, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Divide_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_FClamp_ReturnValue_1) == 0x001AA4, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Multiply_FloatFloat_ReturnValue_17) == 0x001AA8, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Multiply_FloatFloat_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_MakeVector_ReturnValue_1) == 0x001AAC, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Array_Contains_ReturnValue_1) == 0x001AB8, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Array_Contains_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_Event_temperature) == 0x001ABC, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_Event_temperature' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_GetAllActorsOfClass_OutActors) == 0x001AC0, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Array_Get_Item_3) == 0x001AD0, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Array_Length_ReturnValue_3) == 0x001AD8, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Less_IntInt_ReturnValue_3) == 0x001ADC, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BooleanOR_ReturnValue_18) == 0x001ADD, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BooleanOR_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BooleanOR_ReturnValue_19) == 0x001ADE, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BooleanOR_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_K2_GetComponentLocation_ReturnValue_3) == 0x001AE0, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_K2_GetComponentLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_K2_SetActorLocationAndRotation_SweepHitResult) == 0x001AEC, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_K2_SetActorLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_K2_SetActorLocationAndRotation_ReturnValue) == 0x001B74, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_K2_SetActorLocationAndRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_SpawnEmitterAttached_ReturnValue) == 0x001B78, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_SpawnEmitterAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_ComponentBoundEvent_HitComponent) == 0x001B80, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_ComponentBoundEvent_HitComponent' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_ComponentBoundEvent_OtherActor) == 0x001B88, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_ComponentBoundEvent_OtherComp) == 0x001B90, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_ComponentBoundEvent_NormalImpulse) == 0x001B98, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_ComponentBoundEvent_NormalImpulse' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_ComponentBoundEvent_Hit) == 0x001BA4, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_ComponentBoundEvent_Hit' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Array_Contains_ReturnValue_2) == 0x001C2C, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Array_Contains_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_GetWorldDeltaSeconds_ReturnValue_5) == 0x001C30, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_GetWorldDeltaSeconds_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, Temp_struct_Variable_5) == 0x001C38, "Member 'Car1_C_ExecuteUbergraph_car1::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_VictoryFloatPlusEquals_FloatOut_2) == 0x001C50, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_VictoryFloatPlusEquals_FloatOut_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Conv_FloatToString_ReturnValue) == 0x001C58, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_MakeStruct_FormatArgumentData) == 0x001C68, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_MakeArray_Array) == 0x001CA8, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Format_ReturnValue) == 0x001CB8, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_InputActionEvent_Key_9) == 0x001CD0, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_InputActionEvent_Key_9' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_InputActionEvent_Key_10) == 0x001CE8, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_InputActionEvent_Key_10' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_IsAnyRigidBodyAwake_ReturnValue) == 0x001D00, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_IsAnyRigidBodyAwake_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Not_PreBool_ReturnValue_5) == 0x001D01, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Not_PreBool_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BooleanOR_ReturnValue_20) == 0x001D02, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BooleanOR_ReturnValue_20' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Greater_FloatFloat_ReturnValue_4) == 0x001D03, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Greater_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Greater_FloatFloat_ReturnValue_5) == 0x001D04, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Greater_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Greater_FloatFloat_ReturnValue_6) == 0x001D05, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Greater_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Greater_FloatFloat_ReturnValue_7) == 0x001D06, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Greater_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Greater_FloatFloat_ReturnValue_8) == 0x001D07, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Greater_FloatFloat_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Not_PreBool_ReturnValue_6) == 0x001D08, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Not_PreBool_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Not_PreBool_ReturnValue_7) == 0x001D09, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Not_PreBool_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BooleanOR_ReturnValue_21) == 0x001D0A, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BooleanOR_ReturnValue_21' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_BooleanOR_ReturnValue_22) == 0x001D0B, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_BooleanOR_ReturnValue_22' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_SpawnSoundAttached_ReturnValue_2) == 0x001D10, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_SpawnSoundAttached_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, Temp_struct_Variable_6) == 0x001D18, "Member 'Car1_C_ExecuteUbergraph_car1::Temp_struct_Variable_6' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, K2Node_InputActionEvent_Key_11) == 0x001D30, "Member 'Car1_C_ExecuteUbergraph_car1::K2Node_InputActionEvent_Key_11' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_GetPlayerCameraManager_ReturnValue_2) == 0x001D48, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_GetPlayerCameraManager_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_GetDistanceTo_ReturnValue) == 0x001D50, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_GetDistanceTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Divide_FloatFloat_ReturnValue_6) == 0x001D54, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Divide_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Add_FloatFloat_ReturnValue_3) == 0x001D58, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Add_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Car1_C_ExecuteUbergraph_car1, CallFunc_Conv_FloatToVector_ReturnValue) == 0x001D5C, "Member 'Car1_C_ExecuteUbergraph_car1::CallFunc_Conv_FloatToVector_ReturnValue' has a wrong offset!");

// Function car1.car1_C.BndEvt__car1_backWheelRoot_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature
// 0x00B0 (0x00B0 - 0x0000)
struct Car1_C_BndEvt__car1_backWheelRoot_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Car1_C_BndEvt__car1_backWheelRoot_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature) == 0x000008, "Wrong alignment on Car1_C_BndEvt__car1_backWheelRoot_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature");
static_assert(sizeof(Car1_C_BndEvt__car1_backWheelRoot_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature) == 0x0000B0, "Wrong size on Car1_C_BndEvt__car1_backWheelRoot_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature");
static_assert(offsetof(Car1_C_BndEvt__car1_backWheelRoot_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature, HitComponent) == 0x000000, "Member 'Car1_C_BndEvt__car1_backWheelRoot_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature::HitComponent' has a wrong offset!");
static_assert(offsetof(Car1_C_BndEvt__car1_backWheelRoot_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'Car1_C_BndEvt__car1_backWheelRoot_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(Car1_C_BndEvt__car1_backWheelRoot_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'Car1_C_BndEvt__car1_backWheelRoot_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(Car1_C_BndEvt__car1_backWheelRoot_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature, NormalImpulse) == 0x000018, "Member 'Car1_C_BndEvt__car1_backWheelRoot_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature::NormalImpulse' has a wrong offset!");
static_assert(offsetof(Car1_C_BndEvt__car1_backWheelRoot_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature, Hit) == 0x000024, "Member 'Car1_C_BndEvt__car1_backWheelRoot_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature::Hit' has a wrong offset!");

// Function car1.car1_C.addTemperature
// 0x0004 (0x0004 - 0x0000)
struct Car1_C_AddTemperature final
{
public:
	float                                         Temperature;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_AddTemperature) == 0x000004, "Wrong alignment on Car1_C_AddTemperature");
static_assert(sizeof(Car1_C_AddTemperature) == 0x000004, "Wrong size on Car1_C_AddTemperature");
static_assert(offsetof(Car1_C_AddTemperature, Temperature) == 0x000000, "Member 'Car1_C_AddTemperature::Temperature' has a wrong offset!");

// Function car1.car1_C.impulse
// 0x000C (0x000C - 0x0000)
struct Car1_C_Impulse final
{
public:
	struct FVector                                Value;                                             // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_Impulse) == 0x000004, "Wrong alignment on Car1_C_Impulse");
static_assert(sizeof(Car1_C_Impulse) == 0x00000C, "Wrong size on Car1_C_Impulse");
static_assert(offsetof(Car1_C_Impulse, Value) == 0x000000, "Member 'Car1_C_Impulse::Value' has a wrong offset!");

// Function car1.car1_C.BndEvt__car1_Capsule_K2Node_ComponentBoundEvent_6_ComponentHitSignature__DelegateSignature
// 0x00B0 (0x00B0 - 0x0000)
struct Car1_C_BndEvt__car1_Capsule_K2Node_ComponentBoundEvent_6_ComponentHitSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Car1_C_BndEvt__car1_Capsule_K2Node_ComponentBoundEvent_6_ComponentHitSignature__DelegateSignature) == 0x000008, "Wrong alignment on Car1_C_BndEvt__car1_Capsule_K2Node_ComponentBoundEvent_6_ComponentHitSignature__DelegateSignature");
static_assert(sizeof(Car1_C_BndEvt__car1_Capsule_K2Node_ComponentBoundEvent_6_ComponentHitSignature__DelegateSignature) == 0x0000B0, "Wrong size on Car1_C_BndEvt__car1_Capsule_K2Node_ComponentBoundEvent_6_ComponentHitSignature__DelegateSignature");
static_assert(offsetof(Car1_C_BndEvt__car1_Capsule_K2Node_ComponentBoundEvent_6_ComponentHitSignature__DelegateSignature, HitComponent) == 0x000000, "Member 'Car1_C_BndEvt__car1_Capsule_K2Node_ComponentBoundEvent_6_ComponentHitSignature__DelegateSignature::HitComponent' has a wrong offset!");
static_assert(offsetof(Car1_C_BndEvt__car1_Capsule_K2Node_ComponentBoundEvent_6_ComponentHitSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'Car1_C_BndEvt__car1_Capsule_K2Node_ComponentBoundEvent_6_ComponentHitSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(Car1_C_BndEvt__car1_Capsule_K2Node_ComponentBoundEvent_6_ComponentHitSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'Car1_C_BndEvt__car1_Capsule_K2Node_ComponentBoundEvent_6_ComponentHitSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(Car1_C_BndEvt__car1_Capsule_K2Node_ComponentBoundEvent_6_ComponentHitSignature__DelegateSignature, NormalImpulse) == 0x000018, "Member 'Car1_C_BndEvt__car1_Capsule_K2Node_ComponentBoundEvent_6_ComponentHitSignature__DelegateSignature::NormalImpulse' has a wrong offset!");
static_assert(offsetof(Car1_C_BndEvt__car1_Capsule_K2Node_ComponentBoundEvent_6_ComponentHitSignature__DelegateSignature, Hit) == 0x000024, "Member 'Car1_C_BndEvt__car1_Capsule_K2Node_ComponentBoundEvent_6_ComponentHitSignature__DelegateSignature::Hit' has a wrong offset!");

// Function car1.car1_C.explode
// 0x000C (0x000C - 0x0000)
struct Car1_C_Explode final
{
public:
	struct FVector                                FullBody;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_Explode) == 0x000004, "Wrong alignment on Car1_C_Explode");
static_assert(sizeof(Car1_C_Explode) == 0x00000C, "Wrong size on Car1_C_Explode");
static_assert(offsetof(Car1_C_Explode, FullBody) == 0x000000, "Member 'Car1_C_Explode::FullBody' has a wrong offset!");

// Function car1.car1_C.BndEvt__car1_wheel_FR_K2Node_ComponentBoundEvent_5_ComponentHitSignature__DelegateSignature
// 0x00B0 (0x00B0 - 0x0000)
struct Car1_C_BndEvt__car1_wheel_FR_K2Node_ComponentBoundEvent_5_ComponentHitSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Car1_C_BndEvt__car1_wheel_FR_K2Node_ComponentBoundEvent_5_ComponentHitSignature__DelegateSignature) == 0x000008, "Wrong alignment on Car1_C_BndEvt__car1_wheel_FR_K2Node_ComponentBoundEvent_5_ComponentHitSignature__DelegateSignature");
static_assert(sizeof(Car1_C_BndEvt__car1_wheel_FR_K2Node_ComponentBoundEvent_5_ComponentHitSignature__DelegateSignature) == 0x0000B0, "Wrong size on Car1_C_BndEvt__car1_wheel_FR_K2Node_ComponentBoundEvent_5_ComponentHitSignature__DelegateSignature");
static_assert(offsetof(Car1_C_BndEvt__car1_wheel_FR_K2Node_ComponentBoundEvent_5_ComponentHitSignature__DelegateSignature, HitComponent) == 0x000000, "Member 'Car1_C_BndEvt__car1_wheel_FR_K2Node_ComponentBoundEvent_5_ComponentHitSignature__DelegateSignature::HitComponent' has a wrong offset!");
static_assert(offsetof(Car1_C_BndEvt__car1_wheel_FR_K2Node_ComponentBoundEvent_5_ComponentHitSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'Car1_C_BndEvt__car1_wheel_FR_K2Node_ComponentBoundEvent_5_ComponentHitSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(Car1_C_BndEvt__car1_wheel_FR_K2Node_ComponentBoundEvent_5_ComponentHitSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'Car1_C_BndEvt__car1_wheel_FR_K2Node_ComponentBoundEvent_5_ComponentHitSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(Car1_C_BndEvt__car1_wheel_FR_K2Node_ComponentBoundEvent_5_ComponentHitSignature__DelegateSignature, NormalImpulse) == 0x000018, "Member 'Car1_C_BndEvt__car1_wheel_FR_K2Node_ComponentBoundEvent_5_ComponentHitSignature__DelegateSignature::NormalImpulse' has a wrong offset!");
static_assert(offsetof(Car1_C_BndEvt__car1_wheel_FR_K2Node_ComponentBoundEvent_5_ComponentHitSignature__DelegateSignature, Hit) == 0x000024, "Member 'Car1_C_BndEvt__car1_wheel_FR_K2Node_ComponentBoundEvent_5_ComponentHitSignature__DelegateSignature::Hit' has a wrong offset!");

// Function car1.car1_C.BndEvt__car1_wheel_FL_K2Node_ComponentBoundEvent_4_ComponentHitSignature__DelegateSignature
// 0x00B0 (0x00B0 - 0x0000)
struct Car1_C_BndEvt__car1_wheel_FL_K2Node_ComponentBoundEvent_4_ComponentHitSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Car1_C_BndEvt__car1_wheel_FL_K2Node_ComponentBoundEvent_4_ComponentHitSignature__DelegateSignature) == 0x000008, "Wrong alignment on Car1_C_BndEvt__car1_wheel_FL_K2Node_ComponentBoundEvent_4_ComponentHitSignature__DelegateSignature");
static_assert(sizeof(Car1_C_BndEvt__car1_wheel_FL_K2Node_ComponentBoundEvent_4_ComponentHitSignature__DelegateSignature) == 0x0000B0, "Wrong size on Car1_C_BndEvt__car1_wheel_FL_K2Node_ComponentBoundEvent_4_ComponentHitSignature__DelegateSignature");
static_assert(offsetof(Car1_C_BndEvt__car1_wheel_FL_K2Node_ComponentBoundEvent_4_ComponentHitSignature__DelegateSignature, HitComponent) == 0x000000, "Member 'Car1_C_BndEvt__car1_wheel_FL_K2Node_ComponentBoundEvent_4_ComponentHitSignature__DelegateSignature::HitComponent' has a wrong offset!");
static_assert(offsetof(Car1_C_BndEvt__car1_wheel_FL_K2Node_ComponentBoundEvent_4_ComponentHitSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'Car1_C_BndEvt__car1_wheel_FL_K2Node_ComponentBoundEvent_4_ComponentHitSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(Car1_C_BndEvt__car1_wheel_FL_K2Node_ComponentBoundEvent_4_ComponentHitSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'Car1_C_BndEvt__car1_wheel_FL_K2Node_ComponentBoundEvent_4_ComponentHitSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(Car1_C_BndEvt__car1_wheel_FL_K2Node_ComponentBoundEvent_4_ComponentHitSignature__DelegateSignature, NormalImpulse) == 0x000018, "Member 'Car1_C_BndEvt__car1_wheel_FL_K2Node_ComponentBoundEvent_4_ComponentHitSignature__DelegateSignature::NormalImpulse' has a wrong offset!");
static_assert(offsetof(Car1_C_BndEvt__car1_wheel_FL_K2Node_ComponentBoundEvent_4_ComponentHitSignature__DelegateSignature, Hit) == 0x000024, "Member 'Car1_C_BndEvt__car1_wheel_FL_K2Node_ComponentBoundEvent_4_ComponentHitSignature__DelegateSignature::Hit' has a wrong offset!");

// Function car1.car1_C.actionOptionIndex
// 0x0098 (0x0098 - 0x0000)
struct Car1_C_ActionOptionIndex final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	Enum_interactionActions                       Action;                                            // 0x0090(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_ActionOptionIndex) == 0x000008, "Wrong alignment on Car1_C_ActionOptionIndex");
static_assert(sizeof(Car1_C_ActionOptionIndex) == 0x000098, "Wrong size on Car1_C_ActionOptionIndex");
static_assert(offsetof(Car1_C_ActionOptionIndex, Player) == 0x000000, "Member 'Car1_C_ActionOptionIndex::Player' has a wrong offset!");
static_assert(offsetof(Car1_C_ActionOptionIndex, Hit) == 0x000008, "Member 'Car1_C_ActionOptionIndex::Hit' has a wrong offset!");
static_assert(offsetof(Car1_C_ActionOptionIndex, Action) == 0x000090, "Member 'Car1_C_ActionOptionIndex::Action' has a wrong offset!");

// Function car1.car1_C.leaveWater
// 0x0008 (0x0008 - 0x0000)
struct Car1_C_LeaveWater final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_LeaveWater) == 0x000008, "Wrong alignment on Car1_C_LeaveWater");
static_assert(sizeof(Car1_C_LeaveWater) == 0x000008, "Wrong size on Car1_C_LeaveWater");
static_assert(offsetof(Car1_C_LeaveWater, Water) == 0x000000, "Member 'Car1_C_LeaveWater::Water' has a wrong offset!");

// Function car1.car1_C.enterWater
// 0x0008 (0x0008 - 0x0000)
struct Car1_C_EnterWater final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_EnterWater) == 0x000008, "Wrong alignment on Car1_C_EnterWater");
static_assert(sizeof(Car1_C_EnterWater) == 0x000008, "Wrong size on Car1_C_EnterWater");
static_assert(offsetof(Car1_C_EnterWater, Water) == 0x000000, "Member 'Car1_C_EnterWater::Water' has a wrong offset!");

// Function car1.car1_C.leaveWaterOrigin
// 0x0008 (0x0008 - 0x0000)
struct Car1_C_LeaveWaterOrigin final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_LeaveWaterOrigin) == 0x000008, "Wrong alignment on Car1_C_LeaveWaterOrigin");
static_assert(sizeof(Car1_C_LeaveWaterOrigin) == 0x000008, "Wrong size on Car1_C_LeaveWaterOrigin");
static_assert(offsetof(Car1_C_LeaveWaterOrigin, Water) == 0x000000, "Member 'Car1_C_LeaveWaterOrigin::Water' has a wrong offset!");

// Function car1.car1_C.enterWaterOrigin
// 0x0008 (0x0008 - 0x0000)
struct Car1_C_EnterWaterOrigin final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_EnterWaterOrigin) == 0x000008, "Wrong alignment on Car1_C_EnterWaterOrigin");
static_assert(sizeof(Car1_C_EnterWaterOrigin) == 0x000008, "Wrong size on Car1_C_EnterWaterOrigin");
static_assert(offsetof(Car1_C_EnterWaterOrigin, Water) == 0x000000, "Member 'Car1_C_EnterWaterOrigin::Water' has a wrong offset!");

// Function car1.car1_C.setIgnoreSave
// 0x0001 (0x0001 - 0x0000)
struct Car1_C_SetIgnoreSave final
{
public:
	bool                                          Ignore;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Car1_C_SetIgnoreSave) == 0x000001, "Wrong alignment on Car1_C_SetIgnoreSave");
static_assert(sizeof(Car1_C_SetIgnoreSave) == 0x000001, "Wrong size on Car1_C_SetIgnoreSave");
static_assert(offsetof(Car1_C_SetIgnoreSave, Ignore) == 0x000000, "Member 'Car1_C_SetIgnoreSave::Ignore' has a wrong offset!");

// Function car1.car1_C.impactDamageCPP
// 0x00A8 (0x00A8 - 0x0000)
struct Car1_C_ImpactDamageCPP final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0004(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0090(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Impact;                                            // 0x0098(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_ImpactDamageCPP) == 0x000008, "Wrong alignment on Car1_C_ImpactDamageCPP");
static_assert(sizeof(Car1_C_ImpactDamageCPP) == 0x0000A8, "Wrong size on Car1_C_ImpactDamageCPP");
static_assert(offsetof(Car1_C_ImpactDamageCPP, Damage) == 0x000000, "Member 'Car1_C_ImpactDamageCPP::Damage' has a wrong offset!");
static_assert(offsetof(Car1_C_ImpactDamageCPP, Hit) == 0x000004, "Member 'Car1_C_ImpactDamageCPP::Hit' has a wrong offset!");
static_assert(offsetof(Car1_C_ImpactDamageCPP, Actor) == 0x000090, "Member 'Car1_C_ImpactDamageCPP::Actor' has a wrong offset!");
static_assert(offsetof(Car1_C_ImpactDamageCPP, Impact) == 0x000098, "Member 'Car1_C_ImpactDamageCPP::Impact' has a wrong offset!");

// Function car1.car1_C.impactSquishCPP
// 0x0008 (0x0008 - 0x0000)
struct Car1_C_ImpactSquishCPP final
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_ImpactSquishCPP) == 0x000008, "Wrong alignment on Car1_C_ImpactSquishCPP");
static_assert(sizeof(Car1_C_ImpactSquishCPP) == 0x000008, "Wrong size on Car1_C_ImpactSquishCPP");
static_assert(offsetof(Car1_C_ImpactSquishCPP, Component) == 0x000000, "Member 'Car1_C_ImpactSquishCPP::Component' has a wrong offset!");

// Function car1.car1_C.ImpactDamage
// 0x00A8 (0x00A8 - 0x0000)
struct Car1_C_ImpactDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0004(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0090(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Impact;                                            // 0x0098(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_ImpactDamage) == 0x000008, "Wrong alignment on Car1_C_ImpactDamage");
static_assert(sizeof(Car1_C_ImpactDamage) == 0x0000A8, "Wrong size on Car1_C_ImpactDamage");
static_assert(offsetof(Car1_C_ImpactDamage, Damage) == 0x000000, "Member 'Car1_C_ImpactDamage::Damage' has a wrong offset!");
static_assert(offsetof(Car1_C_ImpactDamage, Hit) == 0x000004, "Member 'Car1_C_ImpactDamage::Hit' has a wrong offset!");
static_assert(offsetof(Car1_C_ImpactDamage, Actor) == 0x000090, "Member 'Car1_C_ImpactDamage::Actor' has a wrong offset!");
static_assert(offsetof(Car1_C_ImpactDamage, Impact) == 0x000098, "Member 'Car1_C_ImpactDamage::Impact' has a wrong offset!");

// Function car1.car1_C.virus
// 0x0001 (0x0001 - 0x0000)
struct Car1_C_Virus final
{
public:
	bool                                          Activate;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Car1_C_Virus) == 0x000001, "Wrong alignment on Car1_C_Virus");
static_assert(sizeof(Car1_C_Virus) == 0x000001, "Wrong size on Car1_C_Virus");
static_assert(offsetof(Car1_C_Virus, Activate) == 0x000000, "Member 'Car1_C_Virus::Activate' has a wrong offset!");

// Function car1.car1_C.setPropProps
// 0x0003 (0x0003 - 0x0000)
struct Car1_C_SetPropProps final
{
public:
	bool                                          Static;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Frozen;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Active;                                            // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Car1_C_SetPropProps) == 0x000001, "Wrong alignment on Car1_C_SetPropProps");
static_assert(sizeof(Car1_C_SetPropProps) == 0x000003, "Wrong size on Car1_C_SetPropProps");
static_assert(offsetof(Car1_C_SetPropProps, Static) == 0x000000, "Member 'Car1_C_SetPropProps::Static' has a wrong offset!");
static_assert(offsetof(Car1_C_SetPropProps, Frozen) == 0x000001, "Member 'Car1_C_SetPropProps::Frozen' has a wrong offset!");
static_assert(offsetof(Car1_C_SetPropProps, Active) == 0x000002, "Member 'Car1_C_SetPropProps::Active' has a wrong offset!");

// Function car1.car1_C.addDamage
// 0x00A8 (0x00A8 - 0x0000)
struct Car1_C_AddDamage final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x000C(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                Impact;                                            // 0x0094(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipSetting;                                       // 0x00A0(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Car1_C_AddDamage) == 0x000008, "Wrong alignment on Car1_C_AddDamage");
static_assert(sizeof(Car1_C_AddDamage) == 0x0000A8, "Wrong size on Car1_C_AddDamage");
static_assert(offsetof(Car1_C_AddDamage, Actor) == 0x000000, "Member 'Car1_C_AddDamage::Actor' has a wrong offset!");
static_assert(offsetof(Car1_C_AddDamage, Damage) == 0x000008, "Member 'Car1_C_AddDamage::Damage' has a wrong offset!");
static_assert(offsetof(Car1_C_AddDamage, Hit) == 0x00000C, "Member 'Car1_C_AddDamage::Hit' has a wrong offset!");
static_assert(offsetof(Car1_C_AddDamage, Impact) == 0x000094, "Member 'Car1_C_AddDamage::Impact' has a wrong offset!");
static_assert(offsetof(Car1_C_AddDamage, SkipSetting) == 0x0000A0, "Member 'Car1_C_AddDamage::SkipSetting' has a wrong offset!");

// Function car1.car1_C.setKey
// 0x0010 (0x0010 - 0x0000)
struct Car1_C_SetKey final
{
public:
	class FString                                 Param_Key;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_SetKey) == 0x000008, "Wrong alignment on Car1_C_SetKey");
static_assert(sizeof(Car1_C_SetKey) == 0x000010, "Wrong size on Car1_C_SetKey");
static_assert(offsetof(Car1_C_SetKey, Param_Key) == 0x000000, "Member 'Car1_C_SetKey::Param_Key' has a wrong offset!");

// Function car1.car1_C.steppedOn
// 0x0090 (0x0090 - 0x0000)
struct Car1_C_SteppedOn final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Car1_C_SteppedOn) == 0x000008, "Wrong alignment on Car1_C_SteppedOn");
static_assert(sizeof(Car1_C_SteppedOn) == 0x000090, "Wrong size on Car1_C_SteppedOn");
static_assert(offsetof(Car1_C_SteppedOn, Player) == 0x000000, "Member 'Car1_C_SteppedOn::Player' has a wrong offset!");
static_assert(offsetof(Car1_C_SteppedOn, Hit) == 0x000008, "Member 'Car1_C_SteppedOn::Hit' has a wrong offset!");

// Function car1.car1_C.fireDamage
// 0x0004 (0x0004 - 0x0000)
struct Car1_C_FireDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_FireDamage) == 0x000004, "Wrong alignment on Car1_C_FireDamage");
static_assert(sizeof(Car1_C_FireDamage) == 0x000004, "Wrong size on Car1_C_FireDamage");
static_assert(offsetof(Car1_C_FireDamage, Damage) == 0x000000, "Member 'Car1_C_FireDamage::Damage' has a wrong offset!");

// Function car1.car1_C.accumulateTemperature
// 0x0008 (0x0008 - 0x0000)
struct Car1_C_AccumulateTemperature final
{
public:
	float                                         Temperature;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Param_Speed;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_AccumulateTemperature) == 0x000004, "Wrong alignment on Car1_C_AccumulateTemperature");
static_assert(sizeof(Car1_C_AccumulateTemperature) == 0x000008, "Wrong size on Car1_C_AccumulateTemperature");
static_assert(offsetof(Car1_C_AccumulateTemperature, Temperature) == 0x000000, "Member 'Car1_C_AccumulateTemperature::Temperature' has a wrong offset!");
static_assert(offsetof(Car1_C_AccumulateTemperature, Param_Speed) == 0x000004, "Member 'Car1_C_AccumulateTemperature::Param_Speed' has a wrong offset!");

// Function car1.car1_C.ignite
// 0x0004 (0x0004 - 0x0000)
struct Car1_C_Ignite final
{
public:
	float                                         Param_Fuel;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_Ignite) == 0x000004, "Wrong alignment on Car1_C_Ignite");
static_assert(sizeof(Car1_C_Ignite) == 0x000004, "Wrong size on Car1_C_Ignite");
static_assert(offsetof(Car1_C_Ignite, Param_Fuel) == 0x000000, "Member 'Car1_C_Ignite::Param_Fuel' has a wrong offset!");

// Function car1.car1_C.BndEvt__mesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature
// 0x00B0 (0x00B0 - 0x0000)
struct Car1_C_BndEvt__mesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Car1_C_BndEvt__mesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature) == 0x000008, "Wrong alignment on Car1_C_BndEvt__mesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature");
static_assert(sizeof(Car1_C_BndEvt__mesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature) == 0x0000B0, "Wrong size on Car1_C_BndEvt__mesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature");
static_assert(offsetof(Car1_C_BndEvt__mesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature, HitComponent) == 0x000000, "Member 'Car1_C_BndEvt__mesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature::HitComponent' has a wrong offset!");
static_assert(offsetof(Car1_C_BndEvt__mesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'Car1_C_BndEvt__mesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(Car1_C_BndEvt__mesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'Car1_C_BndEvt__mesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(Car1_C_BndEvt__mesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature, NormalImpulse) == 0x000018, "Member 'Car1_C_BndEvt__mesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature::NormalImpulse' has a wrong offset!");
static_assert(offsetof(Car1_C_BndEvt__mesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature, Hit) == 0x000024, "Member 'Car1_C_BndEvt__mesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature::Hit' has a wrong offset!");

// Function car1.car1_C.receivedPhyiscsDamage
// 0x008C (0x008C - 0x0000)
struct Car1_C_ReceivedPhyiscsDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hot;                                               // 0x0004(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Car1_C_ReceivedPhyiscsDamage) == 0x000004, "Wrong alignment on Car1_C_ReceivedPhyiscsDamage");
static_assert(sizeof(Car1_C_ReceivedPhyiscsDamage) == 0x00008C, "Wrong size on Car1_C_ReceivedPhyiscsDamage");
static_assert(offsetof(Car1_C_ReceivedPhyiscsDamage, Damage) == 0x000000, "Member 'Car1_C_ReceivedPhyiscsDamage::Damage' has a wrong offset!");
static_assert(offsetof(Car1_C_ReceivedPhyiscsDamage, Hot) == 0x000004, "Member 'Car1_C_ReceivedPhyiscsDamage::Hot' has a wrong offset!");

// Function car1.car1_C.playerHandUse_RMB
// 0x0008 (0x0008 - 0x0000)
struct Car1_C_PlayerHandUse_RMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_PlayerHandUse_RMB) == 0x000008, "Wrong alignment on Car1_C_PlayerHandUse_RMB");
static_assert(sizeof(Car1_C_PlayerHandUse_RMB) == 0x000008, "Wrong size on Car1_C_PlayerHandUse_RMB");
static_assert(offsetof(Car1_C_PlayerHandUse_RMB, Player) == 0x000000, "Member 'Car1_C_PlayerHandUse_RMB::Player' has a wrong offset!");

// Function car1.car1_C.playerHandUse_LMB
// 0x0008 (0x0008 - 0x0000)
struct Car1_C_PlayerHandUse_LMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_PlayerHandUse_LMB) == 0x000008, "Wrong alignment on Car1_C_PlayerHandUse_LMB");
static_assert(sizeof(Car1_C_PlayerHandUse_LMB) == 0x000008, "Wrong size on Car1_C_PlayerHandUse_LMB");
static_assert(offsetof(Car1_C_PlayerHandUse_LMB, Player) == 0x000000, "Member 'Car1_C_PlayerHandUse_LMB::Player' has a wrong offset!");

// Function car1.car1_C.settingsApplied
// 0x00F0 (0x00F0 - 0x0000)
struct Car1_C_SettingsApplied final
{
public:
	struct FStruct_settings                       Settings;                                          // 0x0000(0x00F0)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_SettingsApplied) == 0x000008, "Wrong alignment on Car1_C_SettingsApplied");
static_assert(sizeof(Car1_C_SettingsApplied) == 0x0000F0, "Wrong size on Car1_C_SettingsApplied");
static_assert(offsetof(Car1_C_SettingsApplied, Settings) == 0x000000, "Member 'Car1_C_SettingsApplied::Settings' has a wrong offset!");

// Function car1.car1_C.exploded
// 0x0010 (0x0010 - 0x0000)
struct Car1_C_Exploded final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_Exploded) == 0x000004, "Wrong alignment on Car1_C_Exploded");
static_assert(sizeof(Car1_C_Exploded) == 0x000010, "Wrong size on Car1_C_Exploded");
static_assert(offsetof(Car1_C_Exploded, Damage) == 0x000000, "Member 'Car1_C_Exploded::Damage' has a wrong offset!");
static_assert(offsetof(Car1_C_Exploded, Location) == 0x000004, "Member 'Car1_C_Exploded::Location' has a wrong offset!");

// Function car1.car1_C.playerHandRelease_RMB
// 0x0008 (0x0008 - 0x0000)
struct Car1_C_PlayerHandRelease_RMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_PlayerHandRelease_RMB) == 0x000008, "Wrong alignment on Car1_C_PlayerHandRelease_RMB");
static_assert(sizeof(Car1_C_PlayerHandRelease_RMB) == 0x000008, "Wrong size on Car1_C_PlayerHandRelease_RMB");
static_assert(offsetof(Car1_C_PlayerHandRelease_RMB, Player) == 0x000000, "Member 'Car1_C_PlayerHandRelease_RMB::Player' has a wrong offset!");

// Function car1.car1_C.playerHandRelease_LMB
// 0x0008 (0x0008 - 0x0000)
struct Car1_C_PlayerHandRelease_LMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_PlayerHandRelease_LMB) == 0x000008, "Wrong alignment on Car1_C_PlayerHandRelease_LMB");
static_assert(sizeof(Car1_C_PlayerHandRelease_LMB) == 0x000008, "Wrong size on Car1_C_PlayerHandRelease_LMB");
static_assert(offsetof(Car1_C_PlayerHandRelease_LMB, Player) == 0x000000, "Member 'Car1_C_PlayerHandRelease_LMB::Player' has a wrong offset!");

// Function car1.car1_C.BndEvt__fuelbox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct Car1_C_BndEvt__fuelbox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Car1_C_BndEvt__fuelbox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on Car1_C_BndEvt__fuelbox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(Car1_C_BndEvt__fuelbox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on Car1_C_BndEvt__fuelbox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(Car1_C_BndEvt__fuelbox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'Car1_C_BndEvt__fuelbox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Car1_C_BndEvt__fuelbox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'Car1_C_BndEvt__fuelbox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(Car1_C_BndEvt__fuelbox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'Car1_C_BndEvt__fuelbox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(Car1_C_BndEvt__fuelbox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'Car1_C_BndEvt__fuelbox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Car1_C_BndEvt__fuelbox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'Car1_C_BndEvt__fuelbox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(Car1_C_BndEvt__fuelbox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'Car1_C_BndEvt__fuelbox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function car1.car1_C.playerHandMouseWheel
// 0x0010 (0x0010 - 0x0000)
struct Car1_C_PlayerHandMouseWheel final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WheelDelta;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_PlayerHandMouseWheel) == 0x000008, "Wrong alignment on Car1_C_PlayerHandMouseWheel");
static_assert(sizeof(Car1_C_PlayerHandMouseWheel) == 0x000010, "Wrong size on Car1_C_PlayerHandMouseWheel");
static_assert(offsetof(Car1_C_PlayerHandMouseWheel, Player) == 0x000000, "Member 'Car1_C_PlayerHandMouseWheel::Player' has a wrong offset!");
static_assert(offsetof(Car1_C_PlayerHandMouseWheel, WheelDelta) == 0x000008, "Member 'Car1_C_PlayerHandMouseWheel::WheelDelta' has a wrong offset!");

// Function car1.car1_C.playerHandMouse
// 0x0010 (0x0010 - 0x0000)
struct Car1_C_PlayerHandMouse final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Mouse;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_PlayerHandMouse) == 0x000008, "Wrong alignment on Car1_C_PlayerHandMouse");
static_assert(sizeof(Car1_C_PlayerHandMouse) == 0x000010, "Wrong size on Car1_C_PlayerHandMouse");
static_assert(offsetof(Car1_C_PlayerHandMouse, Player) == 0x000000, "Member 'Car1_C_PlayerHandMouse::Player' has a wrong offset!");
static_assert(offsetof(Car1_C_PlayerHandMouse, Mouse) == 0x000008, "Member 'Car1_C_PlayerHandMouse::Mouse' has a wrong offset!");

// Function car1.car1_C.playerHandAnyKey
// 0x0028 (0x0028 - 0x0000)
struct Car1_C_PlayerHandAnyKey final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   Param_Key;                                         // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Pressed;                                           // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Car1_C_PlayerHandAnyKey) == 0x000008, "Wrong alignment on Car1_C_PlayerHandAnyKey");
static_assert(sizeof(Car1_C_PlayerHandAnyKey) == 0x000028, "Wrong size on Car1_C_PlayerHandAnyKey");
static_assert(offsetof(Car1_C_PlayerHandAnyKey, Player) == 0x000000, "Member 'Car1_C_PlayerHandAnyKey::Player' has a wrong offset!");
static_assert(offsetof(Car1_C_PlayerHandAnyKey, Param_Key) == 0x000008, "Member 'Car1_C_PlayerHandAnyKey::Param_Key' has a wrong offset!");
static_assert(offsetof(Car1_C_PlayerHandAnyKey, Pressed) == 0x000020, "Member 'Car1_C_PlayerHandAnyKey::Pressed' has a wrong offset!");

// Function car1.car1_C.ActionName
// 0x00A0 (0x00A0 - 0x0000)
struct Car1_C_ActionName final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class FString                                 Param_Name;                                        // 0x0090(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_ActionName) == 0x000008, "Wrong alignment on Car1_C_ActionName");
static_assert(sizeof(Car1_C_ActionName) == 0x0000A0, "Wrong size on Car1_C_ActionName");
static_assert(offsetof(Car1_C_ActionName, Player) == 0x000000, "Member 'Car1_C_ActionName::Player' has a wrong offset!");
static_assert(offsetof(Car1_C_ActionName, Hit) == 0x000008, "Member 'Car1_C_ActionName::Hit' has a wrong offset!");
static_assert(offsetof(Car1_C_ActionName, Param_Name) == 0x000090, "Member 'Car1_C_ActionName::Param_Name' has a wrong offset!");

// Function car1.car1_C.stepped
// 0x0004 (0x0004 - 0x0000)
struct Car1_C_Stepped final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_Stepped) == 0x000004, "Wrong alignment on Car1_C_Stepped");
static_assert(sizeof(Car1_C_Stepped) == 0x000004, "Wrong size on Car1_C_Stepped");
static_assert(offsetof(Car1_C_Stepped, Volume) == 0x000000, "Member 'Car1_C_Stepped::Volume' has a wrong offset!");

// Function car1.car1_C.playerLookAway
// 0x0008 (0x0008 - 0x0000)
struct Car1_C_PlayerLookAway final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_PlayerLookAway) == 0x000008, "Wrong alignment on Car1_C_PlayerLookAway");
static_assert(sizeof(Car1_C_PlayerLookAway) == 0x000008, "Wrong size on Car1_C_PlayerLookAway");
static_assert(offsetof(Car1_C_PlayerLookAway, Player) == 0x000000, "Member 'Car1_C_PlayerLookAway::Player' has a wrong offset!");

// Function car1.car1_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct Car1_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_ReceiveTick) == 0x000004, "Wrong alignment on Car1_C_ReceiveTick");
static_assert(sizeof(Car1_C_ReceiveTick) == 0x000004, "Wrong size on Car1_C_ReceiveTick");
static_assert(offsetof(Car1_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'Car1_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function car1.car1_C.InpAxisEvt_mouseY_K2Node_InputAxisEvent_1
// 0x0004 (0x0004 - 0x0000)
struct Car1_C_InpAxisEvt_mouseY_K2Node_InputAxisEvent_1 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_InpAxisEvt_mouseY_K2Node_InputAxisEvent_1) == 0x000004, "Wrong alignment on Car1_C_InpAxisEvt_mouseY_K2Node_InputAxisEvent_1");
static_assert(sizeof(Car1_C_InpAxisEvt_mouseY_K2Node_InputAxisEvent_1) == 0x000004, "Wrong size on Car1_C_InpAxisEvt_mouseY_K2Node_InputAxisEvent_1");
static_assert(offsetof(Car1_C_InpAxisEvt_mouseY_K2Node_InputAxisEvent_1, AxisValue) == 0x000000, "Member 'Car1_C_InpAxisEvt_mouseY_K2Node_InputAxisEvent_1::AxisValue' has a wrong offset!");

// Function car1.car1_C.InpAxisEvt_mouseX_K2Node_InputAxisEvent_0
// 0x0004 (0x0004 - 0x0000)
struct Car1_C_InpAxisEvt_mouseX_K2Node_InputAxisEvent_0 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_InpAxisEvt_mouseX_K2Node_InputAxisEvent_0) == 0x000004, "Wrong alignment on Car1_C_InpAxisEvt_mouseX_K2Node_InputAxisEvent_0");
static_assert(sizeof(Car1_C_InpAxisEvt_mouseX_K2Node_InputAxisEvent_0) == 0x000004, "Wrong size on Car1_C_InpAxisEvt_mouseX_K2Node_InputAxisEvent_0");
static_assert(offsetof(Car1_C_InpAxisEvt_mouseX_K2Node_InputAxisEvent_0, AxisValue) == 0x000000, "Member 'Car1_C_InpAxisEvt_mouseX_K2Node_InputAxisEvent_0::AxisValue' has a wrong offset!");

// Function car1.car1_C.playerR
// 0x0008 (0x0008 - 0x0000)
struct Car1_C_PlayerR final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_PlayerR) == 0x000008, "Wrong alignment on Car1_C_PlayerR");
static_assert(sizeof(Car1_C_PlayerR) == 0x000008, "Wrong size on Car1_C_PlayerR");
static_assert(offsetof(Car1_C_PlayerR, Player) == 0x000000, "Member 'Car1_C_PlayerR::Player' has a wrong offset!");

// Function car1.car1_C.playerHold
// 0x0008 (0x0008 - 0x0000)
struct Car1_C_PlayerHold final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_PlayerHold) == 0x000008, "Wrong alignment on Car1_C_PlayerHold");
static_assert(sizeof(Car1_C_PlayerHold) == 0x000008, "Wrong size on Car1_C_PlayerHold");
static_assert(offsetof(Car1_C_PlayerHold, Player) == 0x000000, "Member 'Car1_C_PlayerHold::Player' has a wrong offset!");

// Function car1.car1_C.playerUnequip
// 0x0008 (0x0008 - 0x0000)
struct Car1_C_PlayerUnequip final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_PlayerUnequip) == 0x000008, "Wrong alignment on Car1_C_PlayerUnequip");
static_assert(sizeof(Car1_C_PlayerUnequip) == 0x000008, "Wrong size on Car1_C_PlayerUnequip");
static_assert(offsetof(Car1_C_PlayerUnequip, Player) == 0x000000, "Member 'Car1_C_PlayerUnequip::Player' has a wrong offset!");

// Function car1.car1_C.damageByPlayer
// 0x0098 (0x0098 - 0x0000)
struct Car1_C_DamageByPlayer final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         Damage;                                            // 0x0090(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_DamageByPlayer) == 0x000008, "Wrong alignment on Car1_C_DamageByPlayer");
static_assert(sizeof(Car1_C_DamageByPlayer) == 0x000098, "Wrong size on Car1_C_DamageByPlayer");
static_assert(offsetof(Car1_C_DamageByPlayer, Player) == 0x000000, "Member 'Car1_C_DamageByPlayer::Player' has a wrong offset!");
static_assert(offsetof(Car1_C_DamageByPlayer, Hit) == 0x000008, "Member 'Car1_C_DamageByPlayer::Hit' has a wrong offset!");
static_assert(offsetof(Car1_C_DamageByPlayer, Damage) == 0x000090, "Member 'Car1_C_DamageByPlayer::Damage' has a wrong offset!");

// Function car1.car1_C.thrown
// 0x0008 (0x0008 - 0x0000)
struct Car1_C_Thrown final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_Thrown) == 0x000008, "Wrong alignment on Car1_C_Thrown");
static_assert(sizeof(Car1_C_Thrown) == 0x000008, "Wrong size on Car1_C_Thrown");
static_assert(offsetof(Car1_C_Thrown, Player) == 0x000000, "Member 'Car1_C_Thrown::Player' has a wrong offset!");

// Function car1.car1_C.sendName
// 0x0008 (0x0008 - 0x0000)
struct Car1_C_SendName final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_SendName) == 0x000004, "Wrong alignment on Car1_C_SendName");
static_assert(sizeof(Car1_C_SendName) == 0x000008, "Wrong size on Car1_C_SendName");
static_assert(offsetof(Car1_C_SendName, Param_Name) == 0x000000, "Member 'Car1_C_SendName::Param_Name' has a wrong offset!");

// Function car1.car1_C.kicked
// 0x0001 (0x0001 - 0x0000)
struct Car1_C_Kicked final
{
public:
	bool                                          Kick;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Car1_C_Kicked) == 0x000001, "Wrong alignment on Car1_C_Kicked");
static_assert(sizeof(Car1_C_Kicked) == 0x000001, "Wrong size on Car1_C_Kicked");
static_assert(offsetof(Car1_C_Kicked, Kick) == 0x000000, "Member 'Car1_C_Kicked::Kick' has a wrong offset!");

// Function car1.car1_C.player_use
// 0x0090 (0x0090 - 0x0000)
struct Car1_C_Player_use final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Car1_C_Player_use) == 0x000008, "Wrong alignment on Car1_C_Player_use");
static_assert(sizeof(Car1_C_Player_use) == 0x000090, "Wrong size on Car1_C_Player_use");
static_assert(offsetof(Car1_C_Player_use, Player) == 0x000000, "Member 'Car1_C_Player_use::Player' has a wrong offset!");
static_assert(offsetof(Car1_C_Player_use, Hit) == 0x000008, "Member 'Car1_C_Player_use::Hit' has a wrong offset!");

// Function car1.car1_C.texturePickerApply
// 0x0018 (0x0018 - 0x0000)
struct Car1_C_TexturePickerApply final
{
public:
	class UUmg_texturePicker_C*                   Picker;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Texture;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_TexturePickerApply) == 0x000008, "Wrong alignment on Car1_C_TexturePickerApply");
static_assert(sizeof(Car1_C_TexturePickerApply) == 0x000018, "Wrong size on Car1_C_TexturePickerApply");
static_assert(offsetof(Car1_C_TexturePickerApply, Picker) == 0x000000, "Member 'Car1_C_TexturePickerApply::Picker' has a wrong offset!");
static_assert(offsetof(Car1_C_TexturePickerApply, Texture) == 0x000008, "Member 'Car1_C_TexturePickerApply::Texture' has a wrong offset!");
static_assert(offsetof(Car1_C_TexturePickerApply, Param_Index) == 0x000010, "Member 'Car1_C_TexturePickerApply::Param_Index' has a wrong offset!");

// Function car1.car1_C.applyColor
// 0x0010 (0x0010 - 0x0000)
struct Car1_C_ApplyColor final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_ApplyColor) == 0x000004, "Wrong alignment on Car1_C_ApplyColor");
static_assert(sizeof(Car1_C_ApplyColor) == 0x000010, "Wrong size on Car1_C_ApplyColor");
static_assert(offsetof(Car1_C_ApplyColor, Color) == 0x000000, "Member 'Car1_C_ApplyColor::Color' has a wrong offset!");

// Function car1.car1_C.AnyKey
// 0x0020 (0x0020 - 0x0000)
struct Car1_C_AnyKey final
{
public:
	struct FKey                                   Param_Key;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Pressed;                                           // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Car1_C_AnyKey) == 0x000008, "Wrong alignment on Car1_C_AnyKey");
static_assert(sizeof(Car1_C_AnyKey) == 0x000020, "Wrong size on Car1_C_AnyKey");
static_assert(offsetof(Car1_C_AnyKey, Param_Key) == 0x000000, "Member 'Car1_C_AnyKey::Param_Key' has a wrong offset!");
static_assert(offsetof(Car1_C_AnyKey, Pressed) == 0x000018, "Member 'Car1_C_AnyKey::Pressed' has a wrong offset!");

// Function car1.car1_C.stuffUpgraded
// 0x0008 (0x0008 - 0x0000)
struct Car1_C_StuffUpgraded final
{
public:
	class AMainGamemode_C*                        GameMode;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_StuffUpgraded) == 0x000008, "Wrong alignment on Car1_C_StuffUpgraded");
static_assert(sizeof(Car1_C_StuffUpgraded) == 0x000008, "Wrong size on Car1_C_StuffUpgraded");
static_assert(offsetof(Car1_C_StuffUpgraded, GameMode) == 0x000000, "Member 'Car1_C_StuffUpgraded::GameMode' has a wrong offset!");

// Function car1.car1_C.hookTension
// 0x0008 (0x0008 - 0x0000)
struct Car1_C_HookTension final
{
public:
	class AHook_C*                                Hook;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_HookTension) == 0x000008, "Wrong alignment on Car1_C_HookTension");
static_assert(sizeof(Car1_C_HookTension) == 0x000008, "Wrong size on Car1_C_HookTension");
static_assert(offsetof(Car1_C_HookTension, Hook) == 0x000000, "Member 'Car1_C_HookTension::Hook' has a wrong offset!");

// Function car1.car1_C.cleanSponge
// 0x0010 (0x0010 - 0x0000)
struct Car1_C_CleanSponge final
{
public:
	float                                         Clean;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          Player;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_CleanSponge) == 0x000008, "Wrong alignment on Car1_C_CleanSponge");
static_assert(sizeof(Car1_C_CleanSponge) == 0x000010, "Wrong size on Car1_C_CleanSponge");
static_assert(offsetof(Car1_C_CleanSponge, Clean) == 0x000000, "Member 'Car1_C_CleanSponge::Clean' has a wrong offset!");
static_assert(offsetof(Car1_C_CleanSponge, Player) == 0x000008, "Member 'Car1_C_CleanSponge::Player' has a wrong offset!");

// Function car1.car1_C.hooked
// 0x0008 (0x0008 - 0x0000)
struct Car1_C_Hooked final
{
public:
	class AHook_C*                                Hook;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_Hooked) == 0x000008, "Wrong alignment on Car1_C_Hooked");
static_assert(sizeof(Car1_C_Hooked) == 0x000008, "Wrong size on Car1_C_Hooked");
static_assert(offsetof(Car1_C_Hooked, Hook) == 0x000000, "Member 'Car1_C_Hooked::Hook' has a wrong offset!");

// Function car1.car1_C.playerUsedOn
// 0x0090 (0x0090 - 0x0000)
struct Car1_C_PlayerUsedOn final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Car1_C_PlayerUsedOn) == 0x000008, "Wrong alignment on Car1_C_PlayerUsedOn");
static_assert(sizeof(Car1_C_PlayerUsedOn) == 0x000090, "Wrong size on Car1_C_PlayerUsedOn");
static_assert(offsetof(Car1_C_PlayerUsedOn, Player) == 0x000000, "Member 'Car1_C_PlayerUsedOn::Player' has a wrong offset!");
static_assert(offsetof(Car1_C_PlayerUsedOn, Hit) == 0x000008, "Member 'Car1_C_PlayerUsedOn::Hit' has a wrong offset!");

// Function car1.car1_C.slice
// 0x0001 (0x0001 - 0x0000)
struct Car1_C_Slice final
{
public:
	bool                                          Clean;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Car1_C_Slice) == 0x000001, "Wrong alignment on Car1_C_Slice");
static_assert(sizeof(Car1_C_Slice) == 0x000001, "Wrong size on Car1_C_Slice");
static_assert(offsetof(Car1_C_Slice, Clean) == 0x000000, "Member 'Car1_C_Slice::Clean' has a wrong offset!");

// Function car1.car1_C.reachedByExplosion
// 0x0010 (0x0010 - 0x0000)
struct Car1_C_ReachedByExplosion final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_ReachedByExplosion) == 0x000004, "Wrong alignment on Car1_C_ReachedByExplosion");
static_assert(sizeof(Car1_C_ReachedByExplosion) == 0x000010, "Wrong size on Car1_C_ReachedByExplosion");
static_assert(offsetof(Car1_C_ReachedByExplosion, Location) == 0x000000, "Member 'Car1_C_ReachedByExplosion::Location' has a wrong offset!");
static_assert(offsetof(Car1_C_ReachedByExplosion, Damage) == 0x00000C, "Member 'Car1_C_ReachedByExplosion::Damage' has a wrong offset!");

// Function car1.car1_C.InpActEvt_dismount_K2Node_InputActionEvent_0
// 0x0018 (0x0018 - 0x0000)
struct Car1_C_InpActEvt_dismount_K2Node_InputActionEvent_0 final
{
public:
	struct FKey                                   Param_Key;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_InpActEvt_dismount_K2Node_InputActionEvent_0) == 0x000008, "Wrong alignment on Car1_C_InpActEvt_dismount_K2Node_InputActionEvent_0");
static_assert(sizeof(Car1_C_InpActEvt_dismount_K2Node_InputActionEvent_0) == 0x000018, "Wrong size on Car1_C_InpActEvt_dismount_K2Node_InputActionEvent_0");
static_assert(offsetof(Car1_C_InpActEvt_dismount_K2Node_InputActionEvent_0, Param_Key) == 0x000000, "Member 'Car1_C_InpActEvt_dismount_K2Node_InputActionEvent_0::Param_Key' has a wrong offset!");

// Function car1.car1_C.InpActEvt_jump_K2Node_InputActionEvent_1
// 0x0018 (0x0018 - 0x0000)
struct Car1_C_InpActEvt_jump_K2Node_InputActionEvent_1 final
{
public:
	struct FKey                                   Param_Key;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_InpActEvt_jump_K2Node_InputActionEvent_1) == 0x000008, "Wrong alignment on Car1_C_InpActEvt_jump_K2Node_InputActionEvent_1");
static_assert(sizeof(Car1_C_InpActEvt_jump_K2Node_InputActionEvent_1) == 0x000018, "Wrong size on Car1_C_InpActEvt_jump_K2Node_InputActionEvent_1");
static_assert(offsetof(Car1_C_InpActEvt_jump_K2Node_InputActionEvent_1, Param_Key) == 0x000000, "Member 'Car1_C_InpActEvt_jump_K2Node_InputActionEvent_1::Param_Key' has a wrong offset!");

// Function car1.car1_C.InpActEvt_alt_K2Node_InputActionEvent_2
// 0x0018 (0x0018 - 0x0000)
struct Car1_C_InpActEvt_alt_K2Node_InputActionEvent_2 final
{
public:
	struct FKey                                   Param_Key;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_InpActEvt_alt_K2Node_InputActionEvent_2) == 0x000008, "Wrong alignment on Car1_C_InpActEvt_alt_K2Node_InputActionEvent_2");
static_assert(sizeof(Car1_C_InpActEvt_alt_K2Node_InputActionEvent_2) == 0x000018, "Wrong size on Car1_C_InpActEvt_alt_K2Node_InputActionEvent_2");
static_assert(offsetof(Car1_C_InpActEvt_alt_K2Node_InputActionEvent_2, Param_Key) == 0x000000, "Member 'Car1_C_InpActEvt_alt_K2Node_InputActionEvent_2::Param_Key' has a wrong offset!");

// Function car1.car1_C.InpActEvt_alt_K2Node_InputActionEvent_3
// 0x0018 (0x0018 - 0x0000)
struct Car1_C_InpActEvt_alt_K2Node_InputActionEvent_3 final
{
public:
	struct FKey                                   Param_Key;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_InpActEvt_alt_K2Node_InputActionEvent_3) == 0x000008, "Wrong alignment on Car1_C_InpActEvt_alt_K2Node_InputActionEvent_3");
static_assert(sizeof(Car1_C_InpActEvt_alt_K2Node_InputActionEvent_3) == 0x000018, "Wrong size on Car1_C_InpActEvt_alt_K2Node_InputActionEvent_3");
static_assert(offsetof(Car1_C_InpActEvt_alt_K2Node_InputActionEvent_3, Param_Key) == 0x000000, "Member 'Car1_C_InpActEvt_alt_K2Node_InputActionEvent_3::Param_Key' has a wrong offset!");

// Function car1.car1_C.InpActEvt_zoom_K2Node_InputActionEvent_4
// 0x0018 (0x0018 - 0x0000)
struct Car1_C_InpActEvt_zoom_K2Node_InputActionEvent_4 final
{
public:
	struct FKey                                   Param_Key;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_InpActEvt_zoom_K2Node_InputActionEvent_4) == 0x000008, "Wrong alignment on Car1_C_InpActEvt_zoom_K2Node_InputActionEvent_4");
static_assert(sizeof(Car1_C_InpActEvt_zoom_K2Node_InputActionEvent_4) == 0x000018, "Wrong size on Car1_C_InpActEvt_zoom_K2Node_InputActionEvent_4");
static_assert(offsetof(Car1_C_InpActEvt_zoom_K2Node_InputActionEvent_4, Param_Key) == 0x000000, "Member 'Car1_C_InpActEvt_zoom_K2Node_InputActionEvent_4::Param_Key' has a wrong offset!");

// Function car1.car1_C.InpActEvt_zoom_K2Node_InputActionEvent_5
// 0x0018 (0x0018 - 0x0000)
struct Car1_C_InpActEvt_zoom_K2Node_InputActionEvent_5 final
{
public:
	struct FKey                                   Param_Key;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_InpActEvt_zoom_K2Node_InputActionEvent_5) == 0x000008, "Wrong alignment on Car1_C_InpActEvt_zoom_K2Node_InputActionEvent_5");
static_assert(sizeof(Car1_C_InpActEvt_zoom_K2Node_InputActionEvent_5) == 0x000018, "Wrong size on Car1_C_InpActEvt_zoom_K2Node_InputActionEvent_5");
static_assert(offsetof(Car1_C_InpActEvt_zoom_K2Node_InputActionEvent_5, Param_Key) == 0x000000, "Member 'Car1_C_InpActEvt_zoom_K2Node_InputActionEvent_5::Param_Key' has a wrong offset!");

// Function car1.car1_C.InpActEvt_flashlight_K2Node_InputActionEvent_6
// 0x0018 (0x0018 - 0x0000)
struct Car1_C_InpActEvt_flashlight_K2Node_InputActionEvent_6 final
{
public:
	struct FKey                                   Param_Key;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_InpActEvt_flashlight_K2Node_InputActionEvent_6) == 0x000008, "Wrong alignment on Car1_C_InpActEvt_flashlight_K2Node_InputActionEvent_6");
static_assert(sizeof(Car1_C_InpActEvt_flashlight_K2Node_InputActionEvent_6) == 0x000018, "Wrong size on Car1_C_InpActEvt_flashlight_K2Node_InputActionEvent_6");
static_assert(offsetof(Car1_C_InpActEvt_flashlight_K2Node_InputActionEvent_6, Param_Key) == 0x000000, "Member 'Car1_C_InpActEvt_flashlight_K2Node_InputActionEvent_6::Param_Key' has a wrong offset!");

// Function car1.car1_C.InpActEvt_run_K2Node_InputActionEvent_7
// 0x0018 (0x0018 - 0x0000)
struct Car1_C_InpActEvt_run_K2Node_InputActionEvent_7 final
{
public:
	struct FKey                                   Param_Key;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_InpActEvt_run_K2Node_InputActionEvent_7) == 0x000008, "Wrong alignment on Car1_C_InpActEvt_run_K2Node_InputActionEvent_7");
static_assert(sizeof(Car1_C_InpActEvt_run_K2Node_InputActionEvent_7) == 0x000018, "Wrong size on Car1_C_InpActEvt_run_K2Node_InputActionEvent_7");
static_assert(offsetof(Car1_C_InpActEvt_run_K2Node_InputActionEvent_7, Param_Key) == 0x000000, "Member 'Car1_C_InpActEvt_run_K2Node_InputActionEvent_7::Param_Key' has a wrong offset!");

// Function car1.car1_C.InpActEvt_run_K2Node_InputActionEvent_8
// 0x0018 (0x0018 - 0x0000)
struct Car1_C_InpActEvt_run_K2Node_InputActionEvent_8 final
{
public:
	struct FKey                                   Param_Key;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_InpActEvt_run_K2Node_InputActionEvent_8) == 0x000008, "Wrong alignment on Car1_C_InpActEvt_run_K2Node_InputActionEvent_8");
static_assert(sizeof(Car1_C_InpActEvt_run_K2Node_InputActionEvent_8) == 0x000018, "Wrong size on Car1_C_InpActEvt_run_K2Node_InputActionEvent_8");
static_assert(offsetof(Car1_C_InpActEvt_run_K2Node_InputActionEvent_8, Param_Key) == 0x000000, "Member 'Car1_C_InpActEvt_run_K2Node_InputActionEvent_8::Param_Key' has a wrong offset!");

// Function car1.car1_C.InpActEvt_left_K2Node_InputActionEvent_9
// 0x0018 (0x0018 - 0x0000)
struct Car1_C_InpActEvt_left_K2Node_InputActionEvent_9 final
{
public:
	struct FKey                                   Param_Key;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_InpActEvt_left_K2Node_InputActionEvent_9) == 0x000008, "Wrong alignment on Car1_C_InpActEvt_left_K2Node_InputActionEvent_9");
static_assert(sizeof(Car1_C_InpActEvt_left_K2Node_InputActionEvent_9) == 0x000018, "Wrong size on Car1_C_InpActEvt_left_K2Node_InputActionEvent_9");
static_assert(offsetof(Car1_C_InpActEvt_left_K2Node_InputActionEvent_9, Param_Key) == 0x000000, "Member 'Car1_C_InpActEvt_left_K2Node_InputActionEvent_9::Param_Key' has a wrong offset!");

// Function car1.car1_C.InpActEvt_left_K2Node_InputActionEvent_10
// 0x0018 (0x0018 - 0x0000)
struct Car1_C_InpActEvt_left_K2Node_InputActionEvent_10 final
{
public:
	struct FKey                                   Param_Key;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_InpActEvt_left_K2Node_InputActionEvent_10) == 0x000008, "Wrong alignment on Car1_C_InpActEvt_left_K2Node_InputActionEvent_10");
static_assert(sizeof(Car1_C_InpActEvt_left_K2Node_InputActionEvent_10) == 0x000018, "Wrong size on Car1_C_InpActEvt_left_K2Node_InputActionEvent_10");
static_assert(offsetof(Car1_C_InpActEvt_left_K2Node_InputActionEvent_10, Param_Key) == 0x000000, "Member 'Car1_C_InpActEvt_left_K2Node_InputActionEvent_10::Param_Key' has a wrong offset!");

// Function car1.car1_C.InpActEvt_right_K2Node_InputActionEvent_11
// 0x0018 (0x0018 - 0x0000)
struct Car1_C_InpActEvt_right_K2Node_InputActionEvent_11 final
{
public:
	struct FKey                                   Param_Key;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_InpActEvt_right_K2Node_InputActionEvent_11) == 0x000008, "Wrong alignment on Car1_C_InpActEvt_right_K2Node_InputActionEvent_11");
static_assert(sizeof(Car1_C_InpActEvt_right_K2Node_InputActionEvent_11) == 0x000018, "Wrong size on Car1_C_InpActEvt_right_K2Node_InputActionEvent_11");
static_assert(offsetof(Car1_C_InpActEvt_right_K2Node_InputActionEvent_11, Param_Key) == 0x000000, "Member 'Car1_C_InpActEvt_right_K2Node_InputActionEvent_11::Param_Key' has a wrong offset!");

// Function car1.car1_C.InpActEvt_right_K2Node_InputActionEvent_12
// 0x0018 (0x0018 - 0x0000)
struct Car1_C_InpActEvt_right_K2Node_InputActionEvent_12 final
{
public:
	struct FKey                                   Param_Key;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_InpActEvt_right_K2Node_InputActionEvent_12) == 0x000008, "Wrong alignment on Car1_C_InpActEvt_right_K2Node_InputActionEvent_12");
static_assert(sizeof(Car1_C_InpActEvt_right_K2Node_InputActionEvent_12) == 0x000018, "Wrong size on Car1_C_InpActEvt_right_K2Node_InputActionEvent_12");
static_assert(offsetof(Car1_C_InpActEvt_right_K2Node_InputActionEvent_12, Param_Key) == 0x000000, "Member 'Car1_C_InpActEvt_right_K2Node_InputActionEvent_12::Param_Key' has a wrong offset!");

// Function car1.car1_C.InpActEvt_back_K2Node_InputActionEvent_13
// 0x0018 (0x0018 - 0x0000)
struct Car1_C_InpActEvt_back_K2Node_InputActionEvent_13 final
{
public:
	struct FKey                                   Param_Key;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_InpActEvt_back_K2Node_InputActionEvent_13) == 0x000008, "Wrong alignment on Car1_C_InpActEvt_back_K2Node_InputActionEvent_13");
static_assert(sizeof(Car1_C_InpActEvt_back_K2Node_InputActionEvent_13) == 0x000018, "Wrong size on Car1_C_InpActEvt_back_K2Node_InputActionEvent_13");
static_assert(offsetof(Car1_C_InpActEvt_back_K2Node_InputActionEvent_13, Param_Key) == 0x000000, "Member 'Car1_C_InpActEvt_back_K2Node_InputActionEvent_13::Param_Key' has a wrong offset!");

// Function car1.car1_C.InpActEvt_back_K2Node_InputActionEvent_14
// 0x0018 (0x0018 - 0x0000)
struct Car1_C_InpActEvt_back_K2Node_InputActionEvent_14 final
{
public:
	struct FKey                                   Param_Key;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_InpActEvt_back_K2Node_InputActionEvent_14) == 0x000008, "Wrong alignment on Car1_C_InpActEvt_back_K2Node_InputActionEvent_14");
static_assert(sizeof(Car1_C_InpActEvt_back_K2Node_InputActionEvent_14) == 0x000018, "Wrong size on Car1_C_InpActEvt_back_K2Node_InputActionEvent_14");
static_assert(offsetof(Car1_C_InpActEvt_back_K2Node_InputActionEvent_14, Param_Key) == 0x000000, "Member 'Car1_C_InpActEvt_back_K2Node_InputActionEvent_14::Param_Key' has a wrong offset!");

// Function car1.car1_C.InpActEvt_forward_K2Node_InputActionEvent_15
// 0x0018 (0x0018 - 0x0000)
struct Car1_C_InpActEvt_forward_K2Node_InputActionEvent_15 final
{
public:
	struct FKey                                   Param_Key;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_InpActEvt_forward_K2Node_InputActionEvent_15) == 0x000008, "Wrong alignment on Car1_C_InpActEvt_forward_K2Node_InputActionEvent_15");
static_assert(sizeof(Car1_C_InpActEvt_forward_K2Node_InputActionEvent_15) == 0x000018, "Wrong size on Car1_C_InpActEvt_forward_K2Node_InputActionEvent_15");
static_assert(offsetof(Car1_C_InpActEvt_forward_K2Node_InputActionEvent_15, Param_Key) == 0x000000, "Member 'Car1_C_InpActEvt_forward_K2Node_InputActionEvent_15::Param_Key' has a wrong offset!");

// Function car1.car1_C.InpActEvt_forward_K2Node_InputActionEvent_16
// 0x0018 (0x0018 - 0x0000)
struct Car1_C_InpActEvt_forward_K2Node_InputActionEvent_16 final
{
public:
	struct FKey                                   Param_Key;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_InpActEvt_forward_K2Node_InputActionEvent_16) == 0x000008, "Wrong alignment on Car1_C_InpActEvt_forward_K2Node_InputActionEvent_16");
static_assert(sizeof(Car1_C_InpActEvt_forward_K2Node_InputActionEvent_16) == 0x000018, "Wrong size on Car1_C_InpActEvt_forward_K2Node_InputActionEvent_16");
static_assert(offsetof(Car1_C_InpActEvt_forward_K2Node_InputActionEvent_16, Param_Key) == 0x000000, "Member 'Car1_C_InpActEvt_forward_K2Node_InputActionEvent_16::Param_Key' has a wrong offset!");

// Function car1.car1_C.runout
// 0x000C (0x000C - 0x0000)
struct Car1_C_Runout final
{
public:
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue_1;                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_Runout) == 0x000004, "Wrong alignment on Car1_C_Runout");
static_assert(sizeof(Car1_C_Runout) == 0x00000C, "Wrong size on Car1_C_Runout");
static_assert(offsetof(Car1_C_Runout, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000000, "Member 'Car1_C_Runout::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_Runout, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x000001, "Member 'Car1_C_Runout::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_Runout, CallFunc_FMax_ReturnValue) == 0x000004, "Member 'Car1_C_Runout::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_Runout, CallFunc_FMax_ReturnValue_1) == 0x000008, "Member 'Car1_C_Runout::CallFunc_FMax_ReturnValue_1' has a wrong offset!");

// Function car1.car1_C.telepCar
// 0x0264 (0x0264 - 0x0000)
struct Car1_C_TelepCar final
{
public:
	struct FVector                                NewLocation;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               NewRotation;                                       // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x0028(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x00C0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_2;    // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult_1;     // 0x0154(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult_2;     // 0x01DC(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Car1_C_TelepCar) == 0x000004, "Wrong alignment on Car1_C_TelepCar");
static_assert(sizeof(Car1_C_TelepCar) == 0x000264, "Wrong size on Car1_C_TelepCar");
static_assert(offsetof(Car1_C_TelepCar, NewLocation) == 0x000000, "Member 'Car1_C_TelepCar::NewLocation' has a wrong offset!");
static_assert(offsetof(Car1_C_TelepCar, NewRotation) == 0x00000C, "Member 'Car1_C_TelepCar::NewRotation' has a wrong offset!");
static_assert(offsetof(Car1_C_TelepCar, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000018, "Member 'Car1_C_TelepCar::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_TelepCar, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00001C, "Member 'Car1_C_TelepCar::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_TelepCar, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x000028, "Member 'Car1_C_TelepCar::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Car1_C_TelepCar, CallFunc_K2_SetActorLocation_ReturnValue) == 0x0000B0, "Member 'Car1_C_TelepCar::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_TelepCar, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x0000B4, "Member 'Car1_C_TelepCar::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_TelepCar, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x0000C0, "Member 'Car1_C_TelepCar::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Car1_C_TelepCar, CallFunc_K2_GetComponentLocation_ReturnValue_2) == 0x000148, "Member 'Car1_C_TelepCar::CallFunc_K2_GetComponentLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Car1_C_TelepCar, CallFunc_K2_SetWorldLocation_SweepHitResult_1) == 0x000154, "Member 'Car1_C_TelepCar::CallFunc_K2_SetWorldLocation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(Car1_C_TelepCar, CallFunc_K2_SetWorldLocation_SweepHitResult_2) == 0x0001DC, "Member 'Car1_C_TelepCar::CallFunc_K2_SetWorldLocation_SweepHitResult_2' has a wrong offset!");

// Function car1.car1_C.updHealth
// 0x0028 (0x0028 - 0x0000)
struct Car1_C_UpdHealth final
{
public:
	float                                         A;                                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue;              // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue;  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_UpdHealth) == 0x000004, "Wrong alignment on Car1_C_UpdHealth");
static_assert(sizeof(Car1_C_UpdHealth) == 0x000028, "Wrong size on Car1_C_UpdHealth");
static_assert(offsetof(Car1_C_UpdHealth, A) == 0x000000, "Member 'Car1_C_UpdHealth::A' has a wrong offset!");
static_assert(offsetof(Car1_C_UpdHealth, CallFunc_LinearColorLerp_ReturnValue) == 0x000004, "Member 'Car1_C_UpdHealth::CallFunc_LinearColorLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_UpdHealth, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue) == 0x000014, "Member 'Car1_C_UpdHealth::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_UpdHealth, CallFunc_Lerp_ReturnValue) == 0x000018, "Member 'Car1_C_UpdHealth::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_UpdHealth, CallFunc_FClamp_ReturnValue) == 0x00001C, "Member 'Car1_C_UpdHealth::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_UpdHealth, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000020, "Member 'Car1_C_UpdHealth::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_UpdHealth, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000024, "Member 'Car1_C_UpdHealth::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");

// Function car1.car1_C.setSett
// 0x0120 (0x0120 - 0x0000)
struct Car1_C_SetSett final
{
public:
	struct FStruct_settings                       Sttruct_settings;                                  // 0x0000(0x00F0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECollisionResponse                            Temp_byte_Variable;                                // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F2[0x2];                                       // 0x00F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SafeDivide_ReturnValue;                   // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionResponse                            Temp_byte_Variable_1;                              // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_difficulty                               Temp_byte_Variable_2;                              // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionResponse                            K2Node_Select_Default;                             // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_102[0x2];                                      // 0x0102(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_4;                             // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_SetSett) == 0x000008, "Wrong alignment on Car1_C_SetSett");
static_assert(sizeof(Car1_C_SetSett) == 0x000120, "Wrong size on Car1_C_SetSett");
static_assert(offsetof(Car1_C_SetSett, Sttruct_settings) == 0x000000, "Member 'Car1_C_SetSett::Sttruct_settings' has a wrong offset!");
static_assert(offsetof(Car1_C_SetSett, Temp_bool_Variable) == 0x0000F0, "Member 'Car1_C_SetSett::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Car1_C_SetSett, Temp_byte_Variable) == 0x0000F1, "Member 'Car1_C_SetSett::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(Car1_C_SetSett, CallFunc_SafeDivide_ReturnValue) == 0x0000F4, "Member 'Car1_C_SetSett::CallFunc_SafeDivide_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_SetSett, Temp_byte_Variable_1) == 0x0000F8, "Member 'Car1_C_SetSett::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(Car1_C_SetSett, CallFunc_Lerp_ReturnValue) == 0x0000FC, "Member 'Car1_C_SetSett::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_SetSett, Temp_byte_Variable_2) == 0x000100, "Member 'Car1_C_SetSett::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(Car1_C_SetSett, K2Node_Select_Default) == 0x000101, "Member 'Car1_C_SetSett::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Car1_C_SetSett, Temp_float_Variable) == 0x000104, "Member 'Car1_C_SetSett::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(Car1_C_SetSett, Temp_float_Variable_1) == 0x000108, "Member 'Car1_C_SetSett::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(Car1_C_SetSett, Temp_float_Variable_2) == 0x00010C, "Member 'Car1_C_SetSett::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(Car1_C_SetSett, Temp_float_Variable_3) == 0x000110, "Member 'Car1_C_SetSett::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(Car1_C_SetSett, Temp_float_Variable_4) == 0x000114, "Member 'Car1_C_SetSett::Temp_float_Variable_4' has a wrong offset!");
static_assert(offsetof(Car1_C_SetSett, K2Node_Select_Default_1) == 0x000118, "Member 'Car1_C_SetSett::K2Node_Select_Default_1' has a wrong offset!");

// Function car1.car1_C.fuelUp
// 0x0010 (0x0010 - 0x0000)
struct Car1_C_FuelUp final
{
public:
	class AProp_gascan_C*                         InputPin;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Fueled;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_getFuel_hasFueled;                        // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_getFuel_changed;                          // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Car1_C_FuelUp) == 0x000008, "Wrong alignment on Car1_C_FuelUp");
static_assert(sizeof(Car1_C_FuelUp) == 0x000010, "Wrong size on Car1_C_FuelUp");
static_assert(offsetof(Car1_C_FuelUp, InputPin) == 0x000000, "Member 'Car1_C_FuelUp::InputPin' has a wrong offset!");
static_assert(offsetof(Car1_C_FuelUp, Fueled) == 0x000008, "Member 'Car1_C_FuelUp::Fueled' has a wrong offset!");
static_assert(offsetof(Car1_C_FuelUp, CallFunc_getFuel_hasFueled) == 0x000009, "Member 'Car1_C_FuelUp::CallFunc_getFuel_hasFueled' has a wrong offset!");
static_assert(offsetof(Car1_C_FuelUp, CallFunc_getFuel_changed) == 0x00000A, "Member 'Car1_C_FuelUp::CallFunc_getFuel_changed' has a wrong offset!");

// Function car1.car1_C.applyWheelTorque
// 0x004C (0x004C - 0x0000)
struct Car1_C_ApplyWheelTorque final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SignOfFloat_ReturnValue;                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue;  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetPhysicsAngularVelocityInRadians_ReturnValue; // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Car1_C_ApplyWheelTorque) == 0x000004, "Wrong alignment on Car1_C_ApplyWheelTorque");
static_assert(sizeof(Car1_C_ApplyWheelTorque) == 0x00004C, "Wrong size on Car1_C_ApplyWheelTorque");
static_assert(offsetof(Car1_C_ApplyWheelTorque, Temp_bool_Variable) == 0x000000, "Member 'Car1_C_ApplyWheelTorque::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Car1_C_ApplyWheelTorque, CallFunc_SignOfFloat_ReturnValue) == 0x000004, "Member 'Car1_C_ApplyWheelTorque::CallFunc_SignOfFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ApplyWheelTorque, CallFunc_Abs_ReturnValue) == 0x000008, "Member 'Car1_C_ApplyWheelTorque::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ApplyWheelTorque, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue) == 0x00000C, "Member 'Car1_C_ApplyWheelTorque::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ApplyWheelTorque, CallFunc_GetPhysicsAngularVelocityInRadians_ReturnValue) == 0x000010, "Member 'Car1_C_ApplyWheelTorque::CallFunc_GetPhysicsAngularVelocityInRadians_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ApplyWheelTorque, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00001C, "Member 'Car1_C_ApplyWheelTorque::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ApplyWheelTorque, CallFunc_GetRightVector_ReturnValue) == 0x000020, "Member 'Car1_C_ApplyWheelTorque::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ApplyWheelTorque, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x00002C, "Member 'Car1_C_ApplyWheelTorque::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_ApplyWheelTorque, CallFunc_Dot_VectorVector_ReturnValue) == 0x000030, "Member 'Car1_C_ApplyWheelTorque::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ApplyWheelTorque, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000034, "Member 'Car1_C_ApplyWheelTorque::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ApplyWheelTorque, CallFunc_Less_FloatFloat_ReturnValue) == 0x000040, "Member 'Car1_C_ApplyWheelTorque::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ApplyWheelTorque, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000044, "Member 'Car1_C_ApplyWheelTorque::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ApplyWheelTorque, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000048, "Member 'Car1_C_ApplyWheelTorque::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ApplyWheelTorque, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000049, "Member 'Car1_C_ApplyWheelTorque::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ApplyWheelTorque, K2Node_Select_Default) == 0x00004A, "Member 'Car1_C_ApplyWheelTorque::K2Node_Select_Default' has a wrong offset!");

// Function car1.car1_C.addCamRot
// 0x009C (0x009C - 0x0000)
struct Car1_C_AddCamRot final
{
public:
	float                                         Pitch;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Yaw;                                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_AddRelativeRotation_SweepHitResult;    // 0x0014(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Car1_C_AddCamRot) == 0x000004, "Wrong alignment on Car1_C_AddCamRot");
static_assert(sizeof(Car1_C_AddCamRot) == 0x00009C, "Wrong size on Car1_C_AddCamRot");
static_assert(offsetof(Car1_C_AddCamRot, Pitch) == 0x000000, "Member 'Car1_C_AddCamRot::Pitch' has a wrong offset!");
static_assert(offsetof(Car1_C_AddCamRot, Yaw) == 0x000004, "Member 'Car1_C_AddCamRot::Yaw' has a wrong offset!");
static_assert(offsetof(Car1_C_AddCamRot, CallFunc_MakeRotator_ReturnValue) == 0x000008, "Member 'Car1_C_AddCamRot::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_AddCamRot, CallFunc_K2_AddRelativeRotation_SweepHitResult) == 0x000014, "Member 'Car1_C_AddCamRot::CallFunc_K2_AddRelativeRotation_SweepHitResult' has a wrong offset!");

// Function car1.car1_C.isButtonUsed
// 0x0001 (0x0001 - 0x0000)
struct Car1_C_IsButtonUsed final
{
public:
	bool                                          Failed;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Car1_C_IsButtonUsed) == 0x000001, "Wrong alignment on Car1_C_IsButtonUsed");
static_assert(sizeof(Car1_C_IsButtonUsed) == 0x000001, "Wrong size on Car1_C_IsButtonUsed");
static_assert(offsetof(Car1_C_IsButtonUsed, Failed) == 0x000000, "Member 'Car1_C_IsButtonUsed::Failed' has a wrong offset!");

// Function car1.car1_C.lookAt
// 0x05C8 (0x05C8 - 0x0000)
struct Car1_C_LookAt final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          Return;                                            // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Text;                                              // 0x0098(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    boundObjectReplace;                                // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Number;                                            // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_MakeLiteralText_ReturnValue;              // 0x00B8(0x0018)()
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D2[0x2];                                       // 0x00D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0120(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0158(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_MakeLiteralText_ReturnValue_1;            // 0x0168(0x0018)()
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0180(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_TextToString_ReturnValue_1;          // 0x0190(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_MakeLiteralText_ReturnValue_2;            // 0x01A0(0x0018)()
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x01B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_TextToString_ReturnValue_2;          // 0x01C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_MakeLiteralText_ReturnValue_3;            // 0x01D8(0x0018)()
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x01F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_TextToString_ReturnValue_3;          // 0x0200(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_MakeLiteralText_ReturnValue_4;            // 0x0210(0x0018)()
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0228(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_TextToString_ReturnValue_4;          // 0x0238(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_MakeLiteralText_ReturnValue_5;            // 0x0248(0x0018)()
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x0260(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_TextToString_ReturnValue_5;          // 0x0270(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x0280(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_MakeLiteralText_ReturnValue_6;            // 0x0290(0x0018)()
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_6;              // 0x02A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_TextToString_ReturnValue_6;          // 0x02B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_7;              // 0x02C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_MakeLiteralText_ReturnValue_7;            // 0x02D8(0x0018)()
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_8;              // 0x02F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_TextToString_ReturnValue_7;          // 0x0300(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_9;              // 0x0310(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_MakeLiteralText_ReturnValue_8;            // 0x0320(0x0018)()
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_10;             // 0x0338(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_TextToString_ReturnValue_8;          // 0x0348(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_11;             // 0x0358(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_12;             // 0x0368(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_13;             // 0x0378(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPI_ReturnValue;                        // 0x0388(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38C[0x4];                                      // 0x038C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_14;             // 0x0390(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetPhysicsAngularVelocityInDegrees_ReturnValue; // 0x03A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetPhysicsAngularVelocityInDegrees_ReturnValue_1; // 0x03AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x03B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue_1;                      // 0x03BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x03C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C4[0x4];                                      // 0x03C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_FloatToText_ReturnValue;             // 0x03C8(0x0018)()
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x03E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E4[0x4];                                      // 0x03E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_TextToString_ReturnValue_9;          // 0x03E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x03F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FC[0x4];                                      // 0x03FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_15;             // 0x0400(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0410(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0414(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_FloatToText_ReturnValue_1;           // 0x0418(0x0018)()
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x0430(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_434[0x4];                                      // 0x0434(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_TextToString_ReturnValue_10;         // 0x0438(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0448(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44C[0x4];                                      // 0x044C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_16;             // 0x0450(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_FloatToText_ReturnValue_2;           // 0x0460(0x0018)()
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_17;             // 0x0478(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_TextToString_ReturnValue_11;         // 0x0488(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_18;             // 0x0498(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue;            // 0x04A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_19;             // 0x04B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_20;             // 0x04C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x04D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x04D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4DA[0x6];                                      // 0x04DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_FloatToText_ReturnValue_3;           // 0x04E0(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue_12;         // 0x04F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_21;             // 0x0508(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_SelectString_ReturnValue;                 // 0x0518(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_22;             // 0x0528(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_23;             // 0x0538(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_24;             // 0x0548(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_25;             // 0x0558(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_26;             // 0x0568(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_27;             // 0x0578(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_28;             // 0x0588(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_29;             // 0x0598(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_30;             // 0x05A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_SelectString_ReturnValue_1;               // 0x05B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_LookAt) == 0x000008, "Wrong alignment on Car1_C_LookAt");
static_assert(sizeof(Car1_C_LookAt) == 0x0005C8, "Wrong size on Car1_C_LookAt");
static_assert(offsetof(Car1_C_LookAt, Player) == 0x000000, "Member 'Car1_C_LookAt::Player' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, Hit) == 0x000008, "Member 'Car1_C_LookAt::Hit' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, Return) == 0x000090, "Member 'Car1_C_LookAt::Return' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, Text) == 0x000098, "Member 'Car1_C_LookAt::Text' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, boundObjectReplace) == 0x0000A8, "Member 'Car1_C_LookAt::boundObjectReplace' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, Number) == 0x0000B0, "Member 'Car1_C_LookAt::Number' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_MakeLiteralText_ReturnValue) == 0x0000B8, "Member 'Car1_C_LookAt::CallFunc_MakeLiteralText_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_BreakHitResult_bBlockingHit) == 0x0000D0, "Member 'Car1_C_LookAt::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000D1, "Member 'Car1_C_LookAt::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_BreakHitResult_Time) == 0x0000D4, "Member 'Car1_C_LookAt::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_BreakHitResult_Distance) == 0x0000D8, "Member 'Car1_C_LookAt::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_BreakHitResult_Location) == 0x0000DC, "Member 'Car1_C_LookAt::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_BreakHitResult_ImpactPoint) == 0x0000E8, "Member 'Car1_C_LookAt::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_BreakHitResult_Normal) == 0x0000F4, "Member 'Car1_C_LookAt::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_BreakHitResult_ImpactNormal) == 0x000100, "Member 'Car1_C_LookAt::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_BreakHitResult_PhysMat) == 0x000110, "Member 'Car1_C_LookAt::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_BreakHitResult_HitActor) == 0x000118, "Member 'Car1_C_LookAt::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_BreakHitResult_HitComponent) == 0x000120, "Member 'Car1_C_LookAt::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_BreakHitResult_HitBoneName) == 0x000128, "Member 'Car1_C_LookAt::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_BreakHitResult_HitItem) == 0x000130, "Member 'Car1_C_LookAt::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_BreakHitResult_ElementIndex) == 0x000134, "Member 'Car1_C_LookAt::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_BreakHitResult_FaceIndex) == 0x000138, "Member 'Car1_C_LookAt::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_BreakHitResult_TraceStart) == 0x00013C, "Member 'Car1_C_LookAt::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_BreakHitResult_TraceEnd) == 0x000148, "Member 'Car1_C_LookAt::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Conv_TextToString_ReturnValue) == 0x000158, "Member 'Car1_C_LookAt::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_MakeLiteralText_ReturnValue_1) == 0x000168, "Member 'Car1_C_LookAt::CallFunc_MakeLiteralText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Concat_StrStr_ReturnValue) == 0x000180, "Member 'Car1_C_LookAt::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Conv_TextToString_ReturnValue_1) == 0x000190, "Member 'Car1_C_LookAt::CallFunc_Conv_TextToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_MakeLiteralText_ReturnValue_2) == 0x0001A0, "Member 'Car1_C_LookAt::CallFunc_MakeLiteralText_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Concat_StrStr_ReturnValue_1) == 0x0001B8, "Member 'Car1_C_LookAt::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Conv_TextToString_ReturnValue_2) == 0x0001C8, "Member 'Car1_C_LookAt::CallFunc_Conv_TextToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_MakeLiteralText_ReturnValue_3) == 0x0001D8, "Member 'Car1_C_LookAt::CallFunc_MakeLiteralText_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Concat_StrStr_ReturnValue_2) == 0x0001F0, "Member 'Car1_C_LookAt::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Conv_TextToString_ReturnValue_3) == 0x000200, "Member 'Car1_C_LookAt::CallFunc_Conv_TextToString_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_MakeLiteralText_ReturnValue_4) == 0x000210, "Member 'Car1_C_LookAt::CallFunc_MakeLiteralText_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000228, "Member 'Car1_C_LookAt::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Conv_TextToString_ReturnValue_4) == 0x000238, "Member 'Car1_C_LookAt::CallFunc_Conv_TextToString_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_MakeLiteralText_ReturnValue_5) == 0x000248, "Member 'Car1_C_LookAt::CallFunc_MakeLiteralText_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Concat_StrStr_ReturnValue_4) == 0x000260, "Member 'Car1_C_LookAt::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Conv_TextToString_ReturnValue_5) == 0x000270, "Member 'Car1_C_LookAt::CallFunc_Conv_TextToString_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Concat_StrStr_ReturnValue_5) == 0x000280, "Member 'Car1_C_LookAt::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_MakeLiteralText_ReturnValue_6) == 0x000290, "Member 'Car1_C_LookAt::CallFunc_MakeLiteralText_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Concat_StrStr_ReturnValue_6) == 0x0002A8, "Member 'Car1_C_LookAt::CallFunc_Concat_StrStr_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Conv_TextToString_ReturnValue_6) == 0x0002B8, "Member 'Car1_C_LookAt::CallFunc_Conv_TextToString_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Concat_StrStr_ReturnValue_7) == 0x0002C8, "Member 'Car1_C_LookAt::CallFunc_Concat_StrStr_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_MakeLiteralText_ReturnValue_7) == 0x0002D8, "Member 'Car1_C_LookAt::CallFunc_MakeLiteralText_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Concat_StrStr_ReturnValue_8) == 0x0002F0, "Member 'Car1_C_LookAt::CallFunc_Concat_StrStr_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Conv_TextToString_ReturnValue_7) == 0x000300, "Member 'Car1_C_LookAt::CallFunc_Conv_TextToString_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Concat_StrStr_ReturnValue_9) == 0x000310, "Member 'Car1_C_LookAt::CallFunc_Concat_StrStr_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_MakeLiteralText_ReturnValue_8) == 0x000320, "Member 'Car1_C_LookAt::CallFunc_MakeLiteralText_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Concat_StrStr_ReturnValue_10) == 0x000338, "Member 'Car1_C_LookAt::CallFunc_Concat_StrStr_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Conv_TextToString_ReturnValue_8) == 0x000348, "Member 'Car1_C_LookAt::CallFunc_Conv_TextToString_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Concat_StrStr_ReturnValue_11) == 0x000358, "Member 'Car1_C_LookAt::CallFunc_Concat_StrStr_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Concat_StrStr_ReturnValue_12) == 0x000368, "Member 'Car1_C_LookAt::CallFunc_Concat_StrStr_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Concat_StrStr_ReturnValue_13) == 0x000378, "Member 'Car1_C_LookAt::CallFunc_Concat_StrStr_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_GetPI_ReturnValue) == 0x000388, "Member 'Car1_C_LookAt::CallFunc_GetPI_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Concat_StrStr_ReturnValue_14) == 0x000390, "Member 'Car1_C_LookAt::CallFunc_Concat_StrStr_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_GetPhysicsAngularVelocityInDegrees_ReturnValue) == 0x0003A0, "Member 'Car1_C_LookAt::CallFunc_GetPhysicsAngularVelocityInDegrees_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_GetPhysicsAngularVelocityInDegrees_ReturnValue_1) == 0x0003AC, "Member 'Car1_C_LookAt::CallFunc_GetPhysicsAngularVelocityInDegrees_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_VSize_ReturnValue) == 0x0003B8, "Member 'Car1_C_LookAt::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_VSize_ReturnValue_1) == 0x0003BC, "Member 'Car1_C_LookAt::CallFunc_VSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Add_FloatFloat_ReturnValue) == 0x0003C0, "Member 'Car1_C_LookAt::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Conv_FloatToText_ReturnValue) == 0x0003C8, "Member 'Car1_C_LookAt::CallFunc_Conv_FloatToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0003E0, "Member 'Car1_C_LookAt::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Conv_TextToString_ReturnValue_9) == 0x0003E8, "Member 'Car1_C_LookAt::CallFunc_Conv_TextToString_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0003F8, "Member 'Car1_C_LookAt::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Concat_StrStr_ReturnValue_15) == 0x000400, "Member 'Car1_C_LookAt::CallFunc_Concat_StrStr_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000410, "Member 'Car1_C_LookAt::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000414, "Member 'Car1_C_LookAt::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Conv_FloatToText_ReturnValue_1) == 0x000418, "Member 'Car1_C_LookAt::CallFunc_Conv_FloatToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x000430, "Member 'Car1_C_LookAt::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Conv_TextToString_ReturnValue_10) == 0x000438, "Member 'Car1_C_LookAt::CallFunc_Conv_TextToString_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000448, "Member 'Car1_C_LookAt::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Concat_StrStr_ReturnValue_16) == 0x000450, "Member 'Car1_C_LookAt::CallFunc_Concat_StrStr_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Conv_FloatToText_ReturnValue_2) == 0x000460, "Member 'Car1_C_LookAt::CallFunc_Conv_FloatToText_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Concat_StrStr_ReturnValue_17) == 0x000478, "Member 'Car1_C_LookAt::CallFunc_Concat_StrStr_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Conv_TextToString_ReturnValue_11) == 0x000488, "Member 'Car1_C_LookAt::CallFunc_Conv_TextToString_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Concat_StrStr_ReturnValue_18) == 0x000498, "Member 'Car1_C_LookAt::CallFunc_Concat_StrStr_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Conv_BoolToString_ReturnValue) == 0x0004A8, "Member 'Car1_C_LookAt::CallFunc_Conv_BoolToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Concat_StrStr_ReturnValue_19) == 0x0004B8, "Member 'Car1_C_LookAt::CallFunc_Concat_StrStr_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Concat_StrStr_ReturnValue_20) == 0x0004C8, "Member 'Car1_C_LookAt::CallFunc_Concat_StrStr_ReturnValue_20' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0004D8, "Member 'Car1_C_LookAt::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x0004D9, "Member 'Car1_C_LookAt::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Conv_FloatToText_ReturnValue_3) == 0x0004E0, "Member 'Car1_C_LookAt::CallFunc_Conv_FloatToText_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Conv_TextToString_ReturnValue_12) == 0x0004F8, "Member 'Car1_C_LookAt::CallFunc_Conv_TextToString_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Concat_StrStr_ReturnValue_21) == 0x000508, "Member 'Car1_C_LookAt::CallFunc_Concat_StrStr_ReturnValue_21' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_SelectString_ReturnValue) == 0x000518, "Member 'Car1_C_LookAt::CallFunc_SelectString_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Concat_StrStr_ReturnValue_22) == 0x000528, "Member 'Car1_C_LookAt::CallFunc_Concat_StrStr_ReturnValue_22' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Concat_StrStr_ReturnValue_23) == 0x000538, "Member 'Car1_C_LookAt::CallFunc_Concat_StrStr_ReturnValue_23' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Concat_StrStr_ReturnValue_24) == 0x000548, "Member 'Car1_C_LookAt::CallFunc_Concat_StrStr_ReturnValue_24' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Concat_StrStr_ReturnValue_25) == 0x000558, "Member 'Car1_C_LookAt::CallFunc_Concat_StrStr_ReturnValue_25' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Concat_StrStr_ReturnValue_26) == 0x000568, "Member 'Car1_C_LookAt::CallFunc_Concat_StrStr_ReturnValue_26' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Concat_StrStr_ReturnValue_27) == 0x000578, "Member 'Car1_C_LookAt::CallFunc_Concat_StrStr_ReturnValue_27' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Concat_StrStr_ReturnValue_28) == 0x000588, "Member 'Car1_C_LookAt::CallFunc_Concat_StrStr_ReturnValue_28' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Concat_StrStr_ReturnValue_29) == 0x000598, "Member 'Car1_C_LookAt::CallFunc_Concat_StrStr_ReturnValue_29' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_Concat_StrStr_ReturnValue_30) == 0x0005A8, "Member 'Car1_C_LookAt::CallFunc_Concat_StrStr_ReturnValue_30' has a wrong offset!");
static_assert(offsetof(Car1_C_LookAt, CallFunc_SelectString_ReturnValue_1) == 0x0005B8, "Member 'Car1_C_LookAt::CallFunc_SelectString_ReturnValue_1' has a wrong offset!");

// Function car1.car1_C.noRespawn
// 0x0002 (0x0002 - 0x0000)
struct Car1_C_NoRespawn final
{
public:
	bool                                          Param_NoRespawn;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Car1_C_NoRespawn) == 0x000001, "Wrong alignment on Car1_C_NoRespawn");
static_assert(sizeof(Car1_C_NoRespawn) == 0x000002, "Wrong size on Car1_C_NoRespawn");
static_assert(offsetof(Car1_C_NoRespawn, Param_NoRespawn) == 0x000000, "Member 'Car1_C_NoRespawn::Param_NoRespawn' has a wrong offset!");
static_assert(offsetof(Car1_C_NoRespawn, Return) == 0x000001, "Member 'Car1_C_NoRespawn::Return' has a wrong offset!");

// Function car1.car1_C.canPickup
// 0x0001 (0x0001 - 0x0000)
struct Car1_C_CanPickup final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Car1_C_CanPickup) == 0x000001, "Wrong alignment on Car1_C_CanPickup");
static_assert(sizeof(Car1_C_CanPickup) == 0x000001, "Wrong size on Car1_C_CanPickup");
static_assert(offsetof(Car1_C_CanPickup, Return) == 0x000000, "Member 'Car1_C_CanPickup::Return' has a wrong offset!");

// Function car1.car1_C.asProp
// 0x0008 (0x0008 - 0x0000)
struct Car1_C_AsProp final
{
public:
	class AProp_C*                                Return;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_AsProp) == 0x000008, "Wrong alignment on Car1_C_AsProp");
static_assert(sizeof(Car1_C_AsProp) == 0x000008, "Wrong size on Car1_C_AsProp");
static_assert(offsetof(Car1_C_AsProp, Return) == 0x000000, "Member 'Car1_C_AsProp::Return' has a wrong offset!");

// Function car1.car1_C.canBePutInContainer
// 0x0001 (0x0001 - 0x0000)
struct Car1_C_CanBePutInContainer final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Car1_C_CanBePutInContainer) == 0x000001, "Wrong alignment on Car1_C_CanBePutInContainer");
static_assert(sizeof(Car1_C_CanBePutInContainer) == 0x000001, "Wrong size on Car1_C_CanBePutInContainer");
static_assert(offsetof(Car1_C_CanBePutInContainer, Return) == 0x000000, "Member 'Car1_C_CanBePutInContainer::Return' has a wrong offset!");

// Function car1.car1_C.landedOn
// 0x0010 (0x0010 - 0x0000)
struct Car1_C_LandedOn final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreFallDamage;                                  // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Car1_C_LandedOn) == 0x000008, "Wrong alignment on Car1_C_LandedOn");
static_assert(sizeof(Car1_C_LandedOn) == 0x000010, "Wrong size on Car1_C_LandedOn");
static_assert(offsetof(Car1_C_LandedOn, Player) == 0x000000, "Member 'Car1_C_LandedOn::Player' has a wrong offset!");
static_assert(offsetof(Car1_C_LandedOn, IgnoreFallDamage) == 0x000008, "Member 'Car1_C_LandedOn::IgnoreFallDamage' has a wrong offset!");

// Function car1.car1_C.dreamInv
// 0x0018 (0x0018 - 0x0000)
struct Car1_C_DreamInv final
{
public:
	TArray<struct FStruct_save>                   Invv;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class ADreamBase_C*                           Base;                                              // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_DreamInv) == 0x000008, "Wrong alignment on Car1_C_DreamInv");
static_assert(sizeof(Car1_C_DreamInv) == 0x000018, "Wrong size on Car1_C_DreamInv");
static_assert(offsetof(Car1_C_DreamInv, Invv) == 0x000000, "Member 'Car1_C_DreamInv::Invv' has a wrong offset!");
static_assert(offsetof(Car1_C_DreamInv, Base) == 0x000010, "Member 'Car1_C_DreamInv::Base' has a wrong offset!");

// Function car1.car1_C.toolboxFix
// 0x0018 (0x0018 - 0x0000)
struct Car1_C_ToolboxFix final
{
public:
	class AProp_toolbox_C*                        Toolbox;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FFloor_ReturnValue;                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Car1_C_ToolboxFix) == 0x000008, "Wrong alignment on Car1_C_ToolboxFix");
static_assert(sizeof(Car1_C_ToolboxFix) == 0x000018, "Wrong size on Car1_C_ToolboxFix");
static_assert(offsetof(Car1_C_ToolboxFix, Toolbox) == 0x000000, "Member 'Car1_C_ToolboxFix::Toolbox' has a wrong offset!");
static_assert(offsetof(Car1_C_ToolboxFix, Return) == 0x000008, "Member 'Car1_C_ToolboxFix::Return' has a wrong offset!");
static_assert(offsetof(Car1_C_ToolboxFix, CallFunc_FFloor_ReturnValue) == 0x00000C, "Member 'Car1_C_ToolboxFix::CallFunc_FFloor_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_ToolboxFix, CallFunc_Less_IntInt_ReturnValue) == 0x000010, "Member 'Car1_C_ToolboxFix::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function car1.car1_C.GetKey
// 0x0048 (0x0048 - 0x0000)
struct Car1_C_GetKey final
{
public:
	class FString                                 Param_Key;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<uint8>                                 CallFunc_GenerateRandomBytes_ByteArray;            // 0x0018(0x0010)(ReferenceParm)
	class FString                                 CallFunc_BytesToBase64Url_ReturnValue;             // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEmpty_ReturnValue;                      // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Car1_C_GetKey) == 0x000008, "Wrong alignment on Car1_C_GetKey");
static_assert(sizeof(Car1_C_GetKey) == 0x000048, "Wrong size on Car1_C_GetKey");
static_assert(offsetof(Car1_C_GetKey, Param_Key) == 0x000000, "Member 'Car1_C_GetKey::Param_Key' has a wrong offset!");
static_assert(offsetof(Car1_C_GetKey, CallFunc_getMainGamemode_AsMain_Gamemode) == 0x000010, "Member 'Car1_C_GetKey::CallFunc_getMainGamemode_AsMain_Gamemode' has a wrong offset!");
static_assert(offsetof(Car1_C_GetKey, CallFunc_GenerateRandomBytes_ByteArray) == 0x000018, "Member 'Car1_C_GetKey::CallFunc_GenerateRandomBytes_ByteArray' has a wrong offset!");
static_assert(offsetof(Car1_C_GetKey, CallFunc_BytesToBase64Url_ReturnValue) == 0x000028, "Member 'Car1_C_GetKey::CallFunc_BytesToBase64Url_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_GetKey, CallFunc_Array_Add_ReturnValue) == 0x000038, "Member 'Car1_C_GetKey::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_GetKey, CallFunc_Array_Add_ReturnValue_1) == 0x00003C, "Member 'Car1_C_GetKey::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Car1_C_GetKey, CallFunc_Array_Find_ReturnValue) == 0x000040, "Member 'Car1_C_GetKey::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_GetKey, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000044, "Member 'Car1_C_GetKey::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_GetKey, CallFunc_IsEmpty_ReturnValue) == 0x000045, "Member 'Car1_C_GetKey::CallFunc_IsEmpty_ReturnValue' has a wrong offset!");

// Function car1.car1_C.canBeUsedHold
// 0x0001 (0x0001 - 0x0000)
struct Car1_C_CanBeUsedHold final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Car1_C_CanBeUsedHold) == 0x000001, "Wrong alignment on Car1_C_CanBeUsedHold");
static_assert(sizeof(Car1_C_CanBeUsedHold) == 0x000001, "Wrong size on Car1_C_CanBeUsedHold");
static_assert(offsetof(Car1_C_CanBeUsedHold, Return) == 0x000000, "Member 'Car1_C_CanBeUsedHold::Return' has a wrong offset!");

// Function car1.car1_C.processKeys
// 0x0001 (0x0001 - 0x0000)
struct Car1_C_ProcessKeys final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Car1_C_ProcessKeys) == 0x000001, "Wrong alignment on Car1_C_ProcessKeys");
static_assert(sizeof(Car1_C_ProcessKeys) == 0x000001, "Wrong size on Car1_C_ProcessKeys");
static_assert(offsetof(Car1_C_ProcessKeys, Return) == 0x000000, "Member 'Car1_C_ProcessKeys::Return' has a wrong offset!");

// Function car1.car1_C.getOnlyKey
// 0x0010 (0x0010 - 0x0000)
struct Car1_C_GetOnlyKey final
{
public:
	class FString                                 Param_Key;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_GetOnlyKey) == 0x000008, "Wrong alignment on Car1_C_GetOnlyKey");
static_assert(sizeof(Car1_C_GetOnlyKey) == 0x000010, "Wrong size on Car1_C_GetOnlyKey");
static_assert(offsetof(Car1_C_GetOnlyKey, Param_Key) == 0x000000, "Member 'Car1_C_GetOnlyKey::Param_Key' has a wrong offset!");

// Function car1.car1_C.setPath
// 0x0018 (0x0018 - 0x0000)
struct Car1_C_SetPath final
{
public:
	TArray<struct FVector>                        Path;                                              // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Return;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Car1_C_SetPath) == 0x000008, "Wrong alignment on Car1_C_SetPath");
static_assert(sizeof(Car1_C_SetPath) == 0x000018, "Wrong size on Car1_C_SetPath");
static_assert(offsetof(Car1_C_SetPath, Path) == 0x000000, "Member 'Car1_C_SetPath::Path' has a wrong offset!");
static_assert(offsetof(Car1_C_SetPath, Return) == 0x000010, "Member 'Car1_C_SetPath::Return' has a wrong offset!");

// Function car1.car1_C.getActionOptions
// 0x0060 (0x0060 - 0x0000)
struct Car1_C_GetActionOptions final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Component;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         Options;                                           // 0x0018(0x0010)(Parm, OutParm)
	TArray<Enum_interactionActions>               Options_enum;                                      // 0x0028(0x0010)(Parm, OutParm)
	TArray<class FText>                           OptionsNamesOverlay;                               // 0x0038(0x0010)(Parm, OutParm)
	uint8                                         Number;                                            // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<Enum_interactionActions>               K2Node_MakeArray_Array;                            // 0x0050(0x0010)(ReferenceParm)
};
static_assert(alignof(Car1_C_GetActionOptions) == 0x000008, "Wrong alignment on Car1_C_GetActionOptions");
static_assert(sizeof(Car1_C_GetActionOptions) == 0x000060, "Wrong size on Car1_C_GetActionOptions");
static_assert(offsetof(Car1_C_GetActionOptions, Player) == 0x000000, "Member 'Car1_C_GetActionOptions::Player' has a wrong offset!");
static_assert(offsetof(Car1_C_GetActionOptions, Component) == 0x000008, "Member 'Car1_C_GetActionOptions::Component' has a wrong offset!");
static_assert(offsetof(Car1_C_GetActionOptions, Actor) == 0x000010, "Member 'Car1_C_GetActionOptions::Actor' has a wrong offset!");
static_assert(offsetof(Car1_C_GetActionOptions, Options) == 0x000018, "Member 'Car1_C_GetActionOptions::Options' has a wrong offset!");
static_assert(offsetof(Car1_C_GetActionOptions, Options_enum) == 0x000028, "Member 'Car1_C_GetActionOptions::Options_enum' has a wrong offset!");
static_assert(offsetof(Car1_C_GetActionOptions, OptionsNamesOverlay) == 0x000038, "Member 'Car1_C_GetActionOptions::OptionsNamesOverlay' has a wrong offset!");
static_assert(offsetof(Car1_C_GetActionOptions, Number) == 0x000048, "Member 'Car1_C_GetActionOptions::Number' has a wrong offset!");
static_assert(offsetof(Car1_C_GetActionOptions, K2Node_MakeArray_Array) == 0x000050, "Member 'Car1_C_GetActionOptions::K2Node_MakeArray_Array' has a wrong offset!");

// Function car1.car1_C.gascanFuel
// 0x0010 (0x0010 - 0x0000)
struct Car1_C_GascanFuel final
{
public:
	class AProp_gascan_C*                         Gascan;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Fueled;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_fuelUp_fueled;                            // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Car1_C_GascanFuel) == 0x000008, "Wrong alignment on Car1_C_GascanFuel");
static_assert(sizeof(Car1_C_GascanFuel) == 0x000010, "Wrong size on Car1_C_GascanFuel");
static_assert(offsetof(Car1_C_GascanFuel, Gascan) == 0x000000, "Member 'Car1_C_GascanFuel::Gascan' has a wrong offset!");
static_assert(offsetof(Car1_C_GascanFuel, Fueled) == 0x000008, "Member 'Car1_C_GascanFuel::Fueled' has a wrong offset!");
static_assert(offsetof(Car1_C_GascanFuel, CallFunc_fuelUp_fueled) == 0x000009, "Member 'Car1_C_GascanFuel::CallFunc_fuelUp_fueled' has a wrong offset!");

// Function car1.car1_C.skipRadial
// 0x0001 (0x0001 - 0x0000)
struct Car1_C_SkipRadial final
{
public:
	bool                                          Skip;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Car1_C_SkipRadial) == 0x000001, "Wrong alignment on Car1_C_SkipRadial");
static_assert(sizeof(Car1_C_SkipRadial) == 0x000001, "Wrong size on Car1_C_SkipRadial");
static_assert(offsetof(Car1_C_SkipRadial, Skip) == 0x000000, "Member 'Car1_C_SkipRadial::Skip' has a wrong offset!");

// Function car1.car1_C.getPriceMultiplier
// 0x0004 (0x0004 - 0x0000)
struct Car1_C_GetPriceMultiplier final
{
public:
	float                                         PriceMult;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_GetPriceMultiplier) == 0x000004, "Wrong alignment on Car1_C_GetPriceMultiplier");
static_assert(sizeof(Car1_C_GetPriceMultiplier) == 0x000004, "Wrong size on Car1_C_GetPriceMultiplier");
static_assert(offsetof(Car1_C_GetPriceMultiplier, PriceMult) == 0x000000, "Member 'Car1_C_GetPriceMultiplier::PriceMult' has a wrong offset!");

// Function car1.car1_C.skipPreDelete
// 0x0001 (0x0001 - 0x0000)
struct Car1_C_SkipPreDelete final
{
public:
	bool                                          Skip;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Car1_C_SkipPreDelete) == 0x000001, "Wrong alignment on Car1_C_SkipPreDelete");
static_assert(sizeof(Car1_C_SkipPreDelete) == 0x000001, "Wrong size on Car1_C_SkipPreDelete");
static_assert(offsetof(Car1_C_SkipPreDelete, Skip) == 0x000000, "Member 'Car1_C_SkipPreDelete::Skip' has a wrong offset!");

// Function car1.car1_C.ignoreSave
// 0x0001 (0x0001 - 0x0000)
struct Car1_C_IgnoreSave final
{
public:
	bool                                          Param_IgnoreSave;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Car1_C_IgnoreSave) == 0x000001, "Wrong alignment on Car1_C_IgnoreSave");
static_assert(sizeof(Car1_C_IgnoreSave) == 0x000001, "Wrong size on Car1_C_IgnoreSave");
static_assert(offsetof(Car1_C_IgnoreSave, Param_IgnoreSave) == 0x000000, "Member 'Car1_C_IgnoreSave::Param_IgnoreSave' has a wrong offset!");

// Function car1.car1_C.loadData
// 0x0100 (0x0100 - 0x0000)
struct Car1_C_LoadData final
{
public:
	struct FStruct_save                           Data;                                              // 0x0000(0x00C0)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x00C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_mFloat                         CallFunc_Array_Get_Item;                           // 0x00C8(0x0010)(HasGetValueTypeHash)
	struct FStruct_mBool                          CallFunc_Array_Get_Item_1;                         // 0x00D8(0x0010)(HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item_2;                         // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Get_Item_3;                         // 0x00EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Get_Item_4;                         // 0x00ED(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Get_Item_5;                         // 0x00EE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_EF[0x1];                                       // 0x00EF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Array_Get_Item_6;                         // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Car1_C_LoadData) == 0x000010, "Wrong alignment on Car1_C_LoadData");
static_assert(sizeof(Car1_C_LoadData) == 0x000100, "Wrong size on Car1_C_LoadData");
static_assert(offsetof(Car1_C_LoadData, Data) == 0x000000, "Member 'Car1_C_LoadData::Data' has a wrong offset!");
static_assert(offsetof(Car1_C_LoadData, Return) == 0x0000C0, "Member 'Car1_C_LoadData::Return' has a wrong offset!");
static_assert(offsetof(Car1_C_LoadData, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x0000C1, "Member 'Car1_C_LoadData::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_LoadData, CallFunc_Array_Get_Item) == 0x0000C8, "Member 'Car1_C_LoadData::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Car1_C_LoadData, CallFunc_Array_Get_Item_1) == 0x0000D8, "Member 'Car1_C_LoadData::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(Car1_C_LoadData, CallFunc_Array_Get_Item_2) == 0x0000E8, "Member 'Car1_C_LoadData::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(Car1_C_LoadData, CallFunc_Array_Get_Item_3) == 0x0000EC, "Member 'Car1_C_LoadData::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(Car1_C_LoadData, CallFunc_Array_Get_Item_4) == 0x0000ED, "Member 'Car1_C_LoadData::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(Car1_C_LoadData, CallFunc_Array_Get_Item_5) == 0x0000EE, "Member 'Car1_C_LoadData::CallFunc_Array_Get_Item_5' has a wrong offset!");
static_assert(offsetof(Car1_C_LoadData, CallFunc_Array_Get_Item_6) == 0x0000F0, "Member 'Car1_C_LoadData::CallFunc_Array_Get_Item_6' has a wrong offset!");
static_assert(offsetof(Car1_C_LoadData, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x0000F4, "Member 'Car1_C_LoadData::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function car1.car1_C.getData
// 0x0220 (0x0220 - 0x0000)
struct Car1_C_GetData final
{
public:
	struct FStruct_save                           Data;                                              // 0x0000(0x00C0)(Parm, OutParm, HasGetValueTypeHash)
	TArray<float>                                 K2Node_MakeArray_Array;                            // 0x00C0(0x0010)(ReferenceParm)
	struct FStruct_mFloat                         K2Node_MakeStruct_struct_mFloat;                   // 0x00D0(0x0010)(HasGetValueTypeHash)
	TArray<bool>                                  K2Node_MakeArray_Array_1;                          // 0x00E0(0x0010)(ReferenceParm)
	TArray<struct FStruct_mFloat>                 K2Node_MakeArray_Array_2;                          // 0x00F0(0x0010)(ReferenceParm)
	struct FStruct_mBool                          K2Node_MakeStruct_struct_mBool;                    // 0x0100(0x0010)(HasGetValueTypeHash)
	TArray<struct FStruct_mBool>                  K2Node_MakeArray_Array_3;                          // 0x0110(0x0010)(ReferenceParm)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_128[0x8];                                      // 0x0128(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0130(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FStruct_save                           K2Node_MakeStruct_struct_save;                     // 0x0160(0x00C0)(HasGetValueTypeHash)
};
static_assert(alignof(Car1_C_GetData) == 0x000010, "Wrong alignment on Car1_C_GetData");
static_assert(sizeof(Car1_C_GetData) == 0x000220, "Wrong size on Car1_C_GetData");
static_assert(offsetof(Car1_C_GetData, Data) == 0x000000, "Member 'Car1_C_GetData::Data' has a wrong offset!");
static_assert(offsetof(Car1_C_GetData, K2Node_MakeArray_Array) == 0x0000C0, "Member 'Car1_C_GetData::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Car1_C_GetData, K2Node_MakeStruct_struct_mFloat) == 0x0000D0, "Member 'Car1_C_GetData::K2Node_MakeStruct_struct_mFloat' has a wrong offset!");
static_assert(offsetof(Car1_C_GetData, K2Node_MakeArray_Array_1) == 0x0000E0, "Member 'Car1_C_GetData::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(Car1_C_GetData, K2Node_MakeArray_Array_2) == 0x0000F0, "Member 'Car1_C_GetData::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(Car1_C_GetData, K2Node_MakeStruct_struct_mBool) == 0x000100, "Member 'Car1_C_GetData::K2Node_MakeStruct_struct_mBool' has a wrong offset!");
static_assert(offsetof(Car1_C_GetData, K2Node_MakeArray_Array_3) == 0x000110, "Member 'Car1_C_GetData::K2Node_MakeArray_Array_3' has a wrong offset!");
static_assert(offsetof(Car1_C_GetData, CallFunc_GetObjectClass_ReturnValue) == 0x000120, "Member 'Car1_C_GetData::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_GetData, CallFunc_GetTransform_ReturnValue) == 0x000130, "Member 'Car1_C_GetData::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(Car1_C_GetData, K2Node_MakeStruct_struct_save) == 0x000160, "Member 'Car1_C_GetData::K2Node_MakeStruct_struct_save' has a wrong offset!");

// Function car1.car1_C.gatherDataFromKey
// 0x0001 (0x0001 - 0x0000)
struct Car1_C_GatherDataFromKey final
{
public:
	bool                                          Gather;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Car1_C_GatherDataFromKey) == 0x000001, "Wrong alignment on Car1_C_GatherDataFromKey");
static_assert(sizeof(Car1_C_GatherDataFromKey) == 0x000001, "Wrong size on Car1_C_GatherDataFromKey");
static_assert(offsetof(Car1_C_GatherDataFromKey, Gather) == 0x000000, "Member 'Car1_C_GatherDataFromKey::Gather' has a wrong offset!");

}

