#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Conveyor_turnR_2

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Enum_interactionActions_structs.hpp"
#include "Engine_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function conveyor_turnR_2.conveyor_turnR_2_C.ExecuteUbergraph_conveyor_turnR_2
// 0x0840 (0x0840 - 0x0000)
struct Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_18;                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Event_mouse;                                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_17;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_Event_key_1;                                // 0x0020(0x0018)(HasGetValueTypeHash)
	bool                                          K2Node_Event_pressed;                              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_temperature_1;                        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_temperature;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_speed;                                // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_16;                            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_7;                                // 0x0050(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class FString                                 K2Node_Event_name_1;                               // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         K2Node_Event_volume;                               // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_15;                            // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_location_1;                           // 0x00F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_6;                             // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_clean_1;                              // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_14;                            // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_6;                                // 0x0118(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AHook_C*                                K2Node_Event_hook_1;                               // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_clean;                                // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1AC[0x4];                                      // 0x01AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_13;                            // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHook_C*                                K2Node_Event_hook;                                 // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_12;                            // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_5;                                // 0x01C8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          K2Node_Event_kick;                                 // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_251[0x3];                                      // 0x0251(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_name;                                 // 0x0254(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25C[0x4];                                      // 0x025C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_11;                            // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_10;                            // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_4;                                // 0x0270(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         K2Node_Event_damage_5;                             // 0x02F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FC[0x4];                                      // 0x02FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_9;                             // 0x0300(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_8;                             // 0x0308(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_7;                             // 0x0310(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0318(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31C[0x4];                                      // 0x031C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_6;                             // 0x0320(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_AddActorLocalRotation_SweepHitResult;  // 0x0328(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AMainPlayer_C*                          K2Node_Event_player_5;                             // 0x03B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_4;                             // 0x03B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_location;                             // 0x03BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_4;                             // 0x03C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_3;                             // 0x03D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_3;                             // 0x03D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hot;                                  // 0x03DC(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         K2Node_Event_fuel;                                 // 0x0464(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_2;                             // 0x0468(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46C[0x4];                                      // 0x046C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_2;                             // 0x0470(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_3;                                // 0x0478(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class FString                                 K2Node_Event_key;                                  // 0x0500(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_1;                             // 0x0510(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_wheelDelta;                           // 0x0518(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51C[0x4];                                      // 0x051C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_actor_1;                              // 0x0520(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_1;                             // 0x0528(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_2;                                // 0x052C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                K2Node_Event_impact_1;                             // 0x05B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_skipSetting;                          // 0x05C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_static;                               // 0x05C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_frozen;                               // 0x05C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_active;                               // 0x05C3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_activate;                             // 0x05C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C5[0x3];                                      // 0x05C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AWaterVolume_C*                         K2Node_Event_water_3;                              // 0x05C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWaterVolume_C*                         K2Node_Event_water_2;                              // 0x05D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x05D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x05E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5E5[0x3];                                      // 0x05E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player;                               // 0x05E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_1;                                // 0x05F0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	Enum_interactionActions                       K2Node_Event_action;                               // 0x0678(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0679(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSimulatingPhysics_ReturnValue;          // 0x067A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_67B[0x1];                                      // 0x067B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetComponentVelocity_ReturnValue;         // 0x067C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0688(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x068C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x068D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68E[0x2];                                      // 0x068E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AWaterVolume_C*                         K2Node_Event_water_1;                              // 0x0690(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0698(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69C[0x4];                                      // 0x069C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AWaterVolume_C*                         K2Node_Event_water;                                // 0x06A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_tryAttach_attached;                       // 0x06A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6A9[0x7];                                      // 0x06A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_1;  // 0x06B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_1;           // 0x06B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_1;            // 0x06C0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_1;       // 0x06C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x06CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CD[0x3];                                      // 0x06CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x06D0(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0758(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0760(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0768(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0770(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_tryAttach_attached_1;                     // 0x0774(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_tryAttach_attached_2;                     // 0x0775(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0776(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_777[0x1];                                      // 0x0777(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0778(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x077C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage;                               // 0x0780(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit;                                  // 0x0784(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_80C[0x4];                                      // 0x080C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_actor;                                // 0x0810(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_impact;                               // 0x0818(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0824(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0828(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x082C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0830(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2) == 0x000008, "Wrong alignment on Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2");
static_assert(sizeof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2) == 0x000840, "Wrong size on Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, EntryPoint) == 0x000000, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::EntryPoint' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_player_18) == 0x000008, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_player_18' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_mouse) == 0x000010, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_mouse' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_player_17) == 0x000018, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_player_17' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_key_1) == 0x000020, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_key_1' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_pressed) == 0x000038, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_pressed' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_temperature_1) == 0x00003C, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_temperature_1' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_temperature) == 0x000040, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_temperature' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_speed) == 0x000044, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_speed' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_player_16) == 0x000048, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_player_16' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_hit_7) == 0x000050, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_hit_7' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_name_1) == 0x0000D8, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_name_1' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_volume) == 0x0000E8, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_volume' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_player_15) == 0x0000F0, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_player_15' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_location_1) == 0x0000F8, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_location_1' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_damage_6) == 0x000104, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_damage_6' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_clean_1) == 0x000108, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_clean_1' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_player_14) == 0x000110, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_player_14' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_hit_6) == 0x000118, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_hit_6' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_hook_1) == 0x0001A0, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_hook_1' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_clean) == 0x0001A8, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_clean' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_player_13) == 0x0001B0, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_player_13' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_hook) == 0x0001B8, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_hook' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_player_12) == 0x0001C0, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_player_12' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_hit_5) == 0x0001C8, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_hit_5' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_kick) == 0x000250, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_kick' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_name) == 0x000254, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_name' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_player_11) == 0x000260, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_player_11' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_player_10) == 0x000268, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_player_10' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_hit_4) == 0x000270, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_hit_4' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_damage_5) == 0x0002F8, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_damage_5' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_player_9) == 0x000300, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_player_9' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_player_8) == 0x000308, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_player_8' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_player_7) == 0x000310, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_player_7' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_DeltaSeconds) == 0x000318, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_player_6) == 0x000320, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_player_6' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, CallFunc_K2_AddActorLocalRotation_SweepHitResult) == 0x000328, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::CallFunc_K2_AddActorLocalRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_player_5) == 0x0003B0, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_player_5' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_damage_4) == 0x0003B8, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_damage_4' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_location) == 0x0003BC, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_location' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_player_4) == 0x0003C8, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_player_4' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_player_3) == 0x0003D0, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_player_3' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_damage_3) == 0x0003D8, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_damage_3' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_hot) == 0x0003DC, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_hot' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_fuel) == 0x000464, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_fuel' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_damage_2) == 0x000468, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_damage_2' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_player_2) == 0x000470, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_player_2' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_hit_3) == 0x000478, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_hit_3' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_key) == 0x000500, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_key' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_player_1) == 0x000510, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_player_1' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_wheelDelta) == 0x000518, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_wheelDelta' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_actor_1) == 0x000520, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_actor_1' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_damage_1) == 0x000528, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_damage_1' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_hit_2) == 0x00052C, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_hit_2' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_impact_1) == 0x0005B4, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_impact_1' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_skipSetting) == 0x0005C0, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_skipSetting' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_static) == 0x0005C1, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_static' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_frozen) == 0x0005C2, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_frozen' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_active) == 0x0005C3, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_active' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_activate) == 0x0005C4, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_activate' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_water_3) == 0x0005C8, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_water_3' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_water_2) == 0x0005D0, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_water_2' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, CallFunc_K2_GetActorRotation_ReturnValue) == 0x0005D8, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, CallFunc_K2_SetActorRotation_ReturnValue) == 0x0005E4, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_player) == 0x0005E8, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_player' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_hit_1) == 0x0005F0, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_hit_1' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_action) == 0x000678, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_action' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_SwitchEnum_CmpSuccess) == 0x000679, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, CallFunc_IsSimulatingPhysics_ReturnValue) == 0x00067A, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::CallFunc_IsSimulatingPhysics_ReturnValue' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, CallFunc_GetComponentVelocity_ReturnValue) == 0x00067C, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::CallFunc_GetComponentVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, CallFunc_VSize_ReturnValue) == 0x000688, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00068C, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, CallFunc_BooleanOR_ReturnValue) == 0x00068D, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_water_1) == 0x000690, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_water_1' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, CallFunc_SelectFloat_ReturnValue) == 0x000698, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_water) == 0x0006A0, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_water' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, CallFunc_tryAttach_attached) == 0x0006A8, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::CallFunc_tryAttach_attached' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_ComponentBoundEvent_OverlappedComponent_1) == 0x0006B0, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_ComponentBoundEvent_OverlappedComponent_1' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_ComponentBoundEvent_OtherActor_1) == 0x0006B8, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_ComponentBoundEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_ComponentBoundEvent_OtherComp_1) == 0x0006C0, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_ComponentBoundEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_ComponentBoundEvent_OtherBodyIndex_1) == 0x0006C8, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_ComponentBoundEvent_OtherBodyIndex_1' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_ComponentBoundEvent_bFromSweep) == 0x0006CC, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_ComponentBoundEvent_SweepResult) == 0x0006D0, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000758, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_ComponentBoundEvent_OtherActor) == 0x000760, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_ComponentBoundEvent_OtherComp) == 0x000768, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000770, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, CallFunc_tryAttach_attached_1) == 0x000774, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::CallFunc_tryAttach_attached_1' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, CallFunc_tryAttach_attached_2) == 0x000775, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::CallFunc_tryAttach_attached_2' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, CallFunc_Not_PreBool_ReturnValue) == 0x000776, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000778, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, CallFunc_FClamp_ReturnValue) == 0x00077C, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_damage) == 0x000780, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_damage' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_hit) == 0x000784, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_hit' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_actor) == 0x000810, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_actor' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, K2Node_Event_impact) == 0x000818, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::K2Node_Event_impact' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000824, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000828, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x00082C, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2, CallFunc_MakeRotator_ReturnValue) == 0x000830, "Member 'Conveyor_turnR_2_C_ExecuteUbergraph_conveyor_turnR_2::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.ImpactDamage
// 0x00A8 (0x00A8 - 0x0000)
struct Conveyor_turnR_2_C_ImpactDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0004(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0090(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Impact;                                            // 0x0098(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Conveyor_turnR_2_C_ImpactDamage) == 0x000008, "Wrong alignment on Conveyor_turnR_2_C_ImpactDamage");
static_assert(sizeof(Conveyor_turnR_2_C_ImpactDamage) == 0x0000A8, "Wrong size on Conveyor_turnR_2_C_ImpactDamage");
static_assert(offsetof(Conveyor_turnR_2_C_ImpactDamage, Damage) == 0x000000, "Member 'Conveyor_turnR_2_C_ImpactDamage::Damage' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ImpactDamage, Hit) == 0x000004, "Member 'Conveyor_turnR_2_C_ImpactDamage::Hit' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ImpactDamage, Actor) == 0x000090, "Member 'Conveyor_turnR_2_C_ImpactDamage::Actor' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ImpactDamage, Impact) == 0x000098, "Member 'Conveyor_turnR_2_C_ImpactDamage::Impact' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.BndEvt__conveyor_turnR_2_Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct Conveyor_turnR_2_C_BndEvt__conveyor_turnR_2_Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Conveyor_turnR_2_C_BndEvt__conveyor_turnR_2_Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on Conveyor_turnR_2_C_BndEvt__conveyor_turnR_2_Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(Conveyor_turnR_2_C_BndEvt__conveyor_turnR_2_Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on Conveyor_turnR_2_C_BndEvt__conveyor_turnR_2_Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(Conveyor_turnR_2_C_BndEvt__conveyor_turnR_2_Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'Conveyor_turnR_2_C_BndEvt__conveyor_turnR_2_Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_BndEvt__conveyor_turnR_2_Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'Conveyor_turnR_2_C_BndEvt__conveyor_turnR_2_Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_BndEvt__conveyor_turnR_2_Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'Conveyor_turnR_2_C_BndEvt__conveyor_turnR_2_Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_BndEvt__conveyor_turnR_2_Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'Conveyor_turnR_2_C_BndEvt__conveyor_turnR_2_Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.BndEvt__conveyor_turnR_2_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct Conveyor_turnR_2_C_BndEvt__conveyor_turnR_2_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Conveyor_turnR_2_C_BndEvt__conveyor_turnR_2_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on Conveyor_turnR_2_C_BndEvt__conveyor_turnR_2_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(Conveyor_turnR_2_C_BndEvt__conveyor_turnR_2_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on Conveyor_turnR_2_C_BndEvt__conveyor_turnR_2_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(Conveyor_turnR_2_C_BndEvt__conveyor_turnR_2_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'Conveyor_turnR_2_C_BndEvt__conveyor_turnR_2_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_BndEvt__conveyor_turnR_2_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'Conveyor_turnR_2_C_BndEvt__conveyor_turnR_2_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_BndEvt__conveyor_turnR_2_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'Conveyor_turnR_2_C_BndEvt__conveyor_turnR_2_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_BndEvt__conveyor_turnR_2_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'Conveyor_turnR_2_C_BndEvt__conveyor_turnR_2_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_BndEvt__conveyor_turnR_2_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'Conveyor_turnR_2_C_BndEvt__conveyor_turnR_2_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_BndEvt__conveyor_turnR_2_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'Conveyor_turnR_2_C_BndEvt__conveyor_turnR_2_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.enterWater
// 0x0008 (0x0008 - 0x0000)
struct Conveyor_turnR_2_C_EnterWater final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Conveyor_turnR_2_C_EnterWater) == 0x000008, "Wrong alignment on Conveyor_turnR_2_C_EnterWater");
static_assert(sizeof(Conveyor_turnR_2_C_EnterWater) == 0x000008, "Wrong size on Conveyor_turnR_2_C_EnterWater");
static_assert(offsetof(Conveyor_turnR_2_C_EnterWater, Water) == 0x000000, "Member 'Conveyor_turnR_2_C_EnterWater::Water' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.leaveWater
// 0x0008 (0x0008 - 0x0000)
struct Conveyor_turnR_2_C_LeaveWater final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Conveyor_turnR_2_C_LeaveWater) == 0x000008, "Wrong alignment on Conveyor_turnR_2_C_LeaveWater");
static_assert(sizeof(Conveyor_turnR_2_C_LeaveWater) == 0x000008, "Wrong size on Conveyor_turnR_2_C_LeaveWater");
static_assert(offsetof(Conveyor_turnR_2_C_LeaveWater, Water) == 0x000000, "Member 'Conveyor_turnR_2_C_LeaveWater::Water' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.actionOptionIndex
// 0x0098 (0x0098 - 0x0000)
struct Conveyor_turnR_2_C_ActionOptionIndex final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	Enum_interactionActions                       Action;                                            // 0x0090(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Conveyor_turnR_2_C_ActionOptionIndex) == 0x000008, "Wrong alignment on Conveyor_turnR_2_C_ActionOptionIndex");
static_assert(sizeof(Conveyor_turnR_2_C_ActionOptionIndex) == 0x000098, "Wrong size on Conveyor_turnR_2_C_ActionOptionIndex");
static_assert(offsetof(Conveyor_turnR_2_C_ActionOptionIndex, Player) == 0x000000, "Member 'Conveyor_turnR_2_C_ActionOptionIndex::Player' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ActionOptionIndex, Hit) == 0x000008, "Member 'Conveyor_turnR_2_C_ActionOptionIndex::Hit' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ActionOptionIndex, Action) == 0x000090, "Member 'Conveyor_turnR_2_C_ActionOptionIndex::Action' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.enterWaterOrigin
// 0x0008 (0x0008 - 0x0000)
struct Conveyor_turnR_2_C_EnterWaterOrigin final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Conveyor_turnR_2_C_EnterWaterOrigin) == 0x000008, "Wrong alignment on Conveyor_turnR_2_C_EnterWaterOrigin");
static_assert(sizeof(Conveyor_turnR_2_C_EnterWaterOrigin) == 0x000008, "Wrong size on Conveyor_turnR_2_C_EnterWaterOrigin");
static_assert(offsetof(Conveyor_turnR_2_C_EnterWaterOrigin, Water) == 0x000000, "Member 'Conveyor_turnR_2_C_EnterWaterOrigin::Water' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.leaveWaterOrigin
// 0x0008 (0x0008 - 0x0000)
struct Conveyor_turnR_2_C_LeaveWaterOrigin final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Conveyor_turnR_2_C_LeaveWaterOrigin) == 0x000008, "Wrong alignment on Conveyor_turnR_2_C_LeaveWaterOrigin");
static_assert(sizeof(Conveyor_turnR_2_C_LeaveWaterOrigin) == 0x000008, "Wrong size on Conveyor_turnR_2_C_LeaveWaterOrigin");
static_assert(offsetof(Conveyor_turnR_2_C_LeaveWaterOrigin, Water) == 0x000000, "Member 'Conveyor_turnR_2_C_LeaveWaterOrigin::Water' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.virus
// 0x0001 (0x0001 - 0x0000)
struct Conveyor_turnR_2_C_Virus final
{
public:
	bool                                          Activate;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Conveyor_turnR_2_C_Virus) == 0x000001, "Wrong alignment on Conveyor_turnR_2_C_Virus");
static_assert(sizeof(Conveyor_turnR_2_C_Virus) == 0x000001, "Wrong size on Conveyor_turnR_2_C_Virus");
static_assert(offsetof(Conveyor_turnR_2_C_Virus, Activate) == 0x000000, "Member 'Conveyor_turnR_2_C_Virus::Activate' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.setPropProps
// 0x0003 (0x0003 - 0x0000)
struct Conveyor_turnR_2_C_SetPropProps final
{
public:
	bool                                          Static;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Frozen;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Active;                                            // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Conveyor_turnR_2_C_SetPropProps) == 0x000001, "Wrong alignment on Conveyor_turnR_2_C_SetPropProps");
static_assert(sizeof(Conveyor_turnR_2_C_SetPropProps) == 0x000003, "Wrong size on Conveyor_turnR_2_C_SetPropProps");
static_assert(offsetof(Conveyor_turnR_2_C_SetPropProps, Static) == 0x000000, "Member 'Conveyor_turnR_2_C_SetPropProps::Static' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_SetPropProps, Frozen) == 0x000001, "Member 'Conveyor_turnR_2_C_SetPropProps::Frozen' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_SetPropProps, Active) == 0x000002, "Member 'Conveyor_turnR_2_C_SetPropProps::Active' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.addDamage
// 0x00A8 (0x00A8 - 0x0000)
struct Conveyor_turnR_2_C_AddDamage final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x000C(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                Impact;                                            // 0x0094(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipSetting;                                       // 0x00A0(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Conveyor_turnR_2_C_AddDamage) == 0x000008, "Wrong alignment on Conveyor_turnR_2_C_AddDamage");
static_assert(sizeof(Conveyor_turnR_2_C_AddDamage) == 0x0000A8, "Wrong size on Conveyor_turnR_2_C_AddDamage");
static_assert(offsetof(Conveyor_turnR_2_C_AddDamage, Actor) == 0x000000, "Member 'Conveyor_turnR_2_C_AddDamage::Actor' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_AddDamage, Damage) == 0x000008, "Member 'Conveyor_turnR_2_C_AddDamage::Damage' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_AddDamage, Hit) == 0x00000C, "Member 'Conveyor_turnR_2_C_AddDamage::Hit' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_AddDamage, Impact) == 0x000094, "Member 'Conveyor_turnR_2_C_AddDamage::Impact' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_AddDamage, SkipSetting) == 0x0000A0, "Member 'Conveyor_turnR_2_C_AddDamage::SkipSetting' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.playerHandMouseWheel
// 0x0010 (0x0010 - 0x0000)
struct Conveyor_turnR_2_C_PlayerHandMouseWheel final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WheelDelta;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Conveyor_turnR_2_C_PlayerHandMouseWheel) == 0x000008, "Wrong alignment on Conveyor_turnR_2_C_PlayerHandMouseWheel");
static_assert(sizeof(Conveyor_turnR_2_C_PlayerHandMouseWheel) == 0x000010, "Wrong size on Conveyor_turnR_2_C_PlayerHandMouseWheel");
static_assert(offsetof(Conveyor_turnR_2_C_PlayerHandMouseWheel, Player) == 0x000000, "Member 'Conveyor_turnR_2_C_PlayerHandMouseWheel::Player' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_PlayerHandMouseWheel, WheelDelta) == 0x000008, "Member 'Conveyor_turnR_2_C_PlayerHandMouseWheel::WheelDelta' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.setKey
// 0x0010 (0x0010 - 0x0000)
struct Conveyor_turnR_2_C_SetKey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Conveyor_turnR_2_C_SetKey) == 0x000008, "Wrong alignment on Conveyor_turnR_2_C_SetKey");
static_assert(sizeof(Conveyor_turnR_2_C_SetKey) == 0x000010, "Wrong size on Conveyor_turnR_2_C_SetKey");
static_assert(offsetof(Conveyor_turnR_2_C_SetKey, Key) == 0x000000, "Member 'Conveyor_turnR_2_C_SetKey::Key' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.steppedOn
// 0x0090 (0x0090 - 0x0000)
struct Conveyor_turnR_2_C_SteppedOn final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Conveyor_turnR_2_C_SteppedOn) == 0x000008, "Wrong alignment on Conveyor_turnR_2_C_SteppedOn");
static_assert(sizeof(Conveyor_turnR_2_C_SteppedOn) == 0x000090, "Wrong size on Conveyor_turnR_2_C_SteppedOn");
static_assert(offsetof(Conveyor_turnR_2_C_SteppedOn, Player) == 0x000000, "Member 'Conveyor_turnR_2_C_SteppedOn::Player' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_SteppedOn, Hit) == 0x000008, "Member 'Conveyor_turnR_2_C_SteppedOn::Hit' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.fireDamage
// 0x0004 (0x0004 - 0x0000)
struct Conveyor_turnR_2_C_FireDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Conveyor_turnR_2_C_FireDamage) == 0x000004, "Wrong alignment on Conveyor_turnR_2_C_FireDamage");
static_assert(sizeof(Conveyor_turnR_2_C_FireDamage) == 0x000004, "Wrong size on Conveyor_turnR_2_C_FireDamage");
static_assert(offsetof(Conveyor_turnR_2_C_FireDamage, Damage) == 0x000000, "Member 'Conveyor_turnR_2_C_FireDamage::Damage' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.ignite
// 0x0004 (0x0004 - 0x0000)
struct Conveyor_turnR_2_C_Ignite final
{
public:
	float                                         Fuel;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Conveyor_turnR_2_C_Ignite) == 0x000004, "Wrong alignment on Conveyor_turnR_2_C_Ignite");
static_assert(sizeof(Conveyor_turnR_2_C_Ignite) == 0x000004, "Wrong size on Conveyor_turnR_2_C_Ignite");
static_assert(offsetof(Conveyor_turnR_2_C_Ignite, Fuel) == 0x000000, "Member 'Conveyor_turnR_2_C_Ignite::Fuel' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.receivedPhyiscsDamage
// 0x008C (0x008C - 0x0000)
struct Conveyor_turnR_2_C_ReceivedPhyiscsDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hot;                                               // 0x0004(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Conveyor_turnR_2_C_ReceivedPhyiscsDamage) == 0x000004, "Wrong alignment on Conveyor_turnR_2_C_ReceivedPhyiscsDamage");
static_assert(sizeof(Conveyor_turnR_2_C_ReceivedPhyiscsDamage) == 0x00008C, "Wrong size on Conveyor_turnR_2_C_ReceivedPhyiscsDamage");
static_assert(offsetof(Conveyor_turnR_2_C_ReceivedPhyiscsDamage, Damage) == 0x000000, "Member 'Conveyor_turnR_2_C_ReceivedPhyiscsDamage::Damage' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ReceivedPhyiscsDamage, Hot) == 0x000004, "Member 'Conveyor_turnR_2_C_ReceivedPhyiscsDamage::Hot' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.playerHandUse_RMB
// 0x0008 (0x0008 - 0x0000)
struct Conveyor_turnR_2_C_PlayerHandUse_RMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Conveyor_turnR_2_C_PlayerHandUse_RMB) == 0x000008, "Wrong alignment on Conveyor_turnR_2_C_PlayerHandUse_RMB");
static_assert(sizeof(Conveyor_turnR_2_C_PlayerHandUse_RMB) == 0x000008, "Wrong size on Conveyor_turnR_2_C_PlayerHandUse_RMB");
static_assert(offsetof(Conveyor_turnR_2_C_PlayerHandUse_RMB, Player) == 0x000000, "Member 'Conveyor_turnR_2_C_PlayerHandUse_RMB::Player' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.playerHandUse_LMB
// 0x0008 (0x0008 - 0x0000)
struct Conveyor_turnR_2_C_PlayerHandUse_LMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Conveyor_turnR_2_C_PlayerHandUse_LMB) == 0x000008, "Wrong alignment on Conveyor_turnR_2_C_PlayerHandUse_LMB");
static_assert(sizeof(Conveyor_turnR_2_C_PlayerHandUse_LMB) == 0x000008, "Wrong size on Conveyor_turnR_2_C_PlayerHandUse_LMB");
static_assert(offsetof(Conveyor_turnR_2_C_PlayerHandUse_LMB, Player) == 0x000000, "Member 'Conveyor_turnR_2_C_PlayerHandUse_LMB::Player' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.exploded
// 0x0010 (0x0010 - 0x0000)
struct Conveyor_turnR_2_C_Exploded final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Conveyor_turnR_2_C_Exploded) == 0x000004, "Wrong alignment on Conveyor_turnR_2_C_Exploded");
static_assert(sizeof(Conveyor_turnR_2_C_Exploded) == 0x000010, "Wrong size on Conveyor_turnR_2_C_Exploded");
static_assert(offsetof(Conveyor_turnR_2_C_Exploded, Damage) == 0x000000, "Member 'Conveyor_turnR_2_C_Exploded::Damage' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_Exploded, Location) == 0x000004, "Member 'Conveyor_turnR_2_C_Exploded::Location' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.playerHandRelease_RMB
// 0x0008 (0x0008 - 0x0000)
struct Conveyor_turnR_2_C_PlayerHandRelease_RMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Conveyor_turnR_2_C_PlayerHandRelease_RMB) == 0x000008, "Wrong alignment on Conveyor_turnR_2_C_PlayerHandRelease_RMB");
static_assert(sizeof(Conveyor_turnR_2_C_PlayerHandRelease_RMB) == 0x000008, "Wrong size on Conveyor_turnR_2_C_PlayerHandRelease_RMB");
static_assert(offsetof(Conveyor_turnR_2_C_PlayerHandRelease_RMB, Player) == 0x000000, "Member 'Conveyor_turnR_2_C_PlayerHandRelease_RMB::Player' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.playerHandRelease_LMB
// 0x0008 (0x0008 - 0x0000)
struct Conveyor_turnR_2_C_PlayerHandRelease_LMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Conveyor_turnR_2_C_PlayerHandRelease_LMB) == 0x000008, "Wrong alignment on Conveyor_turnR_2_C_PlayerHandRelease_LMB");
static_assert(sizeof(Conveyor_turnR_2_C_PlayerHandRelease_LMB) == 0x000008, "Wrong size on Conveyor_turnR_2_C_PlayerHandRelease_LMB");
static_assert(offsetof(Conveyor_turnR_2_C_PlayerHandRelease_LMB, Player) == 0x000000, "Member 'Conveyor_turnR_2_C_PlayerHandRelease_LMB::Player' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct Conveyor_turnR_2_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Conveyor_turnR_2_C_ReceiveTick) == 0x000004, "Wrong alignment on Conveyor_turnR_2_C_ReceiveTick");
static_assert(sizeof(Conveyor_turnR_2_C_ReceiveTick) == 0x000004, "Wrong size on Conveyor_turnR_2_C_ReceiveTick");
static_assert(offsetof(Conveyor_turnR_2_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'Conveyor_turnR_2_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.playerR
// 0x0008 (0x0008 - 0x0000)
struct Conveyor_turnR_2_C_PlayerR final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Conveyor_turnR_2_C_PlayerR) == 0x000008, "Wrong alignment on Conveyor_turnR_2_C_PlayerR");
static_assert(sizeof(Conveyor_turnR_2_C_PlayerR) == 0x000008, "Wrong size on Conveyor_turnR_2_C_PlayerR");
static_assert(offsetof(Conveyor_turnR_2_C_PlayerR, Player) == 0x000000, "Member 'Conveyor_turnR_2_C_PlayerR::Player' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.playerHold
// 0x0008 (0x0008 - 0x0000)
struct Conveyor_turnR_2_C_PlayerHold final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Conveyor_turnR_2_C_PlayerHold) == 0x000008, "Wrong alignment on Conveyor_turnR_2_C_PlayerHold");
static_assert(sizeof(Conveyor_turnR_2_C_PlayerHold) == 0x000008, "Wrong size on Conveyor_turnR_2_C_PlayerHold");
static_assert(offsetof(Conveyor_turnR_2_C_PlayerHold, Player) == 0x000000, "Member 'Conveyor_turnR_2_C_PlayerHold::Player' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.playerUnequip
// 0x0008 (0x0008 - 0x0000)
struct Conveyor_turnR_2_C_PlayerUnequip final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Conveyor_turnR_2_C_PlayerUnequip) == 0x000008, "Wrong alignment on Conveyor_turnR_2_C_PlayerUnequip");
static_assert(sizeof(Conveyor_turnR_2_C_PlayerUnequip) == 0x000008, "Wrong size on Conveyor_turnR_2_C_PlayerUnequip");
static_assert(offsetof(Conveyor_turnR_2_C_PlayerUnequip, Player) == 0x000000, "Member 'Conveyor_turnR_2_C_PlayerUnequip::Player' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.damageByPlayer
// 0x0098 (0x0098 - 0x0000)
struct Conveyor_turnR_2_C_DamageByPlayer final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         Damage;                                            // 0x0090(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Conveyor_turnR_2_C_DamageByPlayer) == 0x000008, "Wrong alignment on Conveyor_turnR_2_C_DamageByPlayer");
static_assert(sizeof(Conveyor_turnR_2_C_DamageByPlayer) == 0x000098, "Wrong size on Conveyor_turnR_2_C_DamageByPlayer");
static_assert(offsetof(Conveyor_turnR_2_C_DamageByPlayer, Player) == 0x000000, "Member 'Conveyor_turnR_2_C_DamageByPlayer::Player' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_DamageByPlayer, Hit) == 0x000008, "Member 'Conveyor_turnR_2_C_DamageByPlayer::Hit' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_DamageByPlayer, Damage) == 0x000090, "Member 'Conveyor_turnR_2_C_DamageByPlayer::Damage' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.thrown
// 0x0008 (0x0008 - 0x0000)
struct Conveyor_turnR_2_C_Thrown final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Conveyor_turnR_2_C_Thrown) == 0x000008, "Wrong alignment on Conveyor_turnR_2_C_Thrown");
static_assert(sizeof(Conveyor_turnR_2_C_Thrown) == 0x000008, "Wrong size on Conveyor_turnR_2_C_Thrown");
static_assert(offsetof(Conveyor_turnR_2_C_Thrown, Player) == 0x000000, "Member 'Conveyor_turnR_2_C_Thrown::Player' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.sendName
// 0x0008 (0x0008 - 0x0000)
struct Conveyor_turnR_2_C_SendName final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Conveyor_turnR_2_C_SendName) == 0x000004, "Wrong alignment on Conveyor_turnR_2_C_SendName");
static_assert(sizeof(Conveyor_turnR_2_C_SendName) == 0x000008, "Wrong size on Conveyor_turnR_2_C_SendName");
static_assert(offsetof(Conveyor_turnR_2_C_SendName, Param_Name) == 0x000000, "Member 'Conveyor_turnR_2_C_SendName::Param_Name' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.kicked
// 0x0001 (0x0001 - 0x0000)
struct Conveyor_turnR_2_C_Kicked final
{
public:
	bool                                          Kick;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Conveyor_turnR_2_C_Kicked) == 0x000001, "Wrong alignment on Conveyor_turnR_2_C_Kicked");
static_assert(sizeof(Conveyor_turnR_2_C_Kicked) == 0x000001, "Wrong size on Conveyor_turnR_2_C_Kicked");
static_assert(offsetof(Conveyor_turnR_2_C_Kicked, Kick) == 0x000000, "Member 'Conveyor_turnR_2_C_Kicked::Kick' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.player_use
// 0x0090 (0x0090 - 0x0000)
struct Conveyor_turnR_2_C_Player_use final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Conveyor_turnR_2_C_Player_use) == 0x000008, "Wrong alignment on Conveyor_turnR_2_C_Player_use");
static_assert(sizeof(Conveyor_turnR_2_C_Player_use) == 0x000090, "Wrong size on Conveyor_turnR_2_C_Player_use");
static_assert(offsetof(Conveyor_turnR_2_C_Player_use, Player) == 0x000000, "Member 'Conveyor_turnR_2_C_Player_use::Player' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_Player_use, Hit) == 0x000008, "Member 'Conveyor_turnR_2_C_Player_use::Hit' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.hookTension
// 0x0008 (0x0008 - 0x0000)
struct Conveyor_turnR_2_C_HookTension final
{
public:
	class AHook_C*                                Hook;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Conveyor_turnR_2_C_HookTension) == 0x000008, "Wrong alignment on Conveyor_turnR_2_C_HookTension");
static_assert(sizeof(Conveyor_turnR_2_C_HookTension) == 0x000008, "Wrong size on Conveyor_turnR_2_C_HookTension");
static_assert(offsetof(Conveyor_turnR_2_C_HookTension, Hook) == 0x000000, "Member 'Conveyor_turnR_2_C_HookTension::Hook' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.cleanSponge
// 0x0010 (0x0010 - 0x0000)
struct Conveyor_turnR_2_C_CleanSponge final
{
public:
	float                                         Clean;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          Player;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Conveyor_turnR_2_C_CleanSponge) == 0x000008, "Wrong alignment on Conveyor_turnR_2_C_CleanSponge");
static_assert(sizeof(Conveyor_turnR_2_C_CleanSponge) == 0x000010, "Wrong size on Conveyor_turnR_2_C_CleanSponge");
static_assert(offsetof(Conveyor_turnR_2_C_CleanSponge, Clean) == 0x000000, "Member 'Conveyor_turnR_2_C_CleanSponge::Clean' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_CleanSponge, Player) == 0x000008, "Member 'Conveyor_turnR_2_C_CleanSponge::Player' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.hooked
// 0x0008 (0x0008 - 0x0000)
struct Conveyor_turnR_2_C_Hooked final
{
public:
	class AHook_C*                                Hook;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Conveyor_turnR_2_C_Hooked) == 0x000008, "Wrong alignment on Conveyor_turnR_2_C_Hooked");
static_assert(sizeof(Conveyor_turnR_2_C_Hooked) == 0x000008, "Wrong size on Conveyor_turnR_2_C_Hooked");
static_assert(offsetof(Conveyor_turnR_2_C_Hooked, Hook) == 0x000000, "Member 'Conveyor_turnR_2_C_Hooked::Hook' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.playerUsedOn
// 0x0090 (0x0090 - 0x0000)
struct Conveyor_turnR_2_C_PlayerUsedOn final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Conveyor_turnR_2_C_PlayerUsedOn) == 0x000008, "Wrong alignment on Conveyor_turnR_2_C_PlayerUsedOn");
static_assert(sizeof(Conveyor_turnR_2_C_PlayerUsedOn) == 0x000090, "Wrong size on Conveyor_turnR_2_C_PlayerUsedOn");
static_assert(offsetof(Conveyor_turnR_2_C_PlayerUsedOn, Player) == 0x000000, "Member 'Conveyor_turnR_2_C_PlayerUsedOn::Player' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_PlayerUsedOn, Hit) == 0x000008, "Member 'Conveyor_turnR_2_C_PlayerUsedOn::Hit' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.slice
// 0x0001 (0x0001 - 0x0000)
struct Conveyor_turnR_2_C_Slice final
{
public:
	bool                                          Clean;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Conveyor_turnR_2_C_Slice) == 0x000001, "Wrong alignment on Conveyor_turnR_2_C_Slice");
static_assert(sizeof(Conveyor_turnR_2_C_Slice) == 0x000001, "Wrong size on Conveyor_turnR_2_C_Slice");
static_assert(offsetof(Conveyor_turnR_2_C_Slice, Clean) == 0x000000, "Member 'Conveyor_turnR_2_C_Slice::Clean' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.reachedByExplosion
// 0x0010 (0x0010 - 0x0000)
struct Conveyor_turnR_2_C_ReachedByExplosion final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Conveyor_turnR_2_C_ReachedByExplosion) == 0x000004, "Wrong alignment on Conveyor_turnR_2_C_ReachedByExplosion");
static_assert(sizeof(Conveyor_turnR_2_C_ReachedByExplosion) == 0x000010, "Wrong size on Conveyor_turnR_2_C_ReachedByExplosion");
static_assert(offsetof(Conveyor_turnR_2_C_ReachedByExplosion, Location) == 0x000000, "Member 'Conveyor_turnR_2_C_ReachedByExplosion::Location' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ReachedByExplosion, Damage) == 0x00000C, "Member 'Conveyor_turnR_2_C_ReachedByExplosion::Damage' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.playerLookAway
// 0x0008 (0x0008 - 0x0000)
struct Conveyor_turnR_2_C_PlayerLookAway final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Conveyor_turnR_2_C_PlayerLookAway) == 0x000008, "Wrong alignment on Conveyor_turnR_2_C_PlayerLookAway");
static_assert(sizeof(Conveyor_turnR_2_C_PlayerLookAway) == 0x000008, "Wrong size on Conveyor_turnR_2_C_PlayerLookAway");
static_assert(offsetof(Conveyor_turnR_2_C_PlayerLookAway, Player) == 0x000000, "Member 'Conveyor_turnR_2_C_PlayerLookAway::Player' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.stepped
// 0x0004 (0x0004 - 0x0000)
struct Conveyor_turnR_2_C_Stepped final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Conveyor_turnR_2_C_Stepped) == 0x000004, "Wrong alignment on Conveyor_turnR_2_C_Stepped");
static_assert(sizeof(Conveyor_turnR_2_C_Stepped) == 0x000004, "Wrong size on Conveyor_turnR_2_C_Stepped");
static_assert(offsetof(Conveyor_turnR_2_C_Stepped, Volume) == 0x000000, "Member 'Conveyor_turnR_2_C_Stepped::Volume' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.ActionName
// 0x00A0 (0x00A0 - 0x0000)
struct Conveyor_turnR_2_C_ActionName final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class FString                                 Param_Name;                                        // 0x0090(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Conveyor_turnR_2_C_ActionName) == 0x000008, "Wrong alignment on Conveyor_turnR_2_C_ActionName");
static_assert(sizeof(Conveyor_turnR_2_C_ActionName) == 0x0000A0, "Wrong size on Conveyor_turnR_2_C_ActionName");
static_assert(offsetof(Conveyor_turnR_2_C_ActionName, Player) == 0x000000, "Member 'Conveyor_turnR_2_C_ActionName::Player' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ActionName, Hit) == 0x000008, "Member 'Conveyor_turnR_2_C_ActionName::Hit' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ActionName, Param_Name) == 0x000090, "Member 'Conveyor_turnR_2_C_ActionName::Param_Name' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.accumulateTemperature
// 0x0008 (0x0008 - 0x0000)
struct Conveyor_turnR_2_C_AccumulateTemperature final
{
public:
	float                                         Temperature;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Param_Speed;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Conveyor_turnR_2_C_AccumulateTemperature) == 0x000004, "Wrong alignment on Conveyor_turnR_2_C_AccumulateTemperature");
static_assert(sizeof(Conveyor_turnR_2_C_AccumulateTemperature) == 0x000008, "Wrong size on Conveyor_turnR_2_C_AccumulateTemperature");
static_assert(offsetof(Conveyor_turnR_2_C_AccumulateTemperature, Temperature) == 0x000000, "Member 'Conveyor_turnR_2_C_AccumulateTemperature::Temperature' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_AccumulateTemperature, Param_Speed) == 0x000004, "Member 'Conveyor_turnR_2_C_AccumulateTemperature::Param_Speed' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.addTemperature
// 0x0004 (0x0004 - 0x0000)
struct Conveyor_turnR_2_C_AddTemperature final
{
public:
	float                                         Temperature;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Conveyor_turnR_2_C_AddTemperature) == 0x000004, "Wrong alignment on Conveyor_turnR_2_C_AddTemperature");
static_assert(sizeof(Conveyor_turnR_2_C_AddTemperature) == 0x000004, "Wrong size on Conveyor_turnR_2_C_AddTemperature");
static_assert(offsetof(Conveyor_turnR_2_C_AddTemperature, Temperature) == 0x000000, "Member 'Conveyor_turnR_2_C_AddTemperature::Temperature' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.playerHandAnyKey
// 0x0028 (0x0028 - 0x0000)
struct Conveyor_turnR_2_C_PlayerHandAnyKey final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   Key;                                               // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Pressed;                                           // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Conveyor_turnR_2_C_PlayerHandAnyKey) == 0x000008, "Wrong alignment on Conveyor_turnR_2_C_PlayerHandAnyKey");
static_assert(sizeof(Conveyor_turnR_2_C_PlayerHandAnyKey) == 0x000028, "Wrong size on Conveyor_turnR_2_C_PlayerHandAnyKey");
static_assert(offsetof(Conveyor_turnR_2_C_PlayerHandAnyKey, Player) == 0x000000, "Member 'Conveyor_turnR_2_C_PlayerHandAnyKey::Player' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_PlayerHandAnyKey, Key) == 0x000008, "Member 'Conveyor_turnR_2_C_PlayerHandAnyKey::Key' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_PlayerHandAnyKey, Pressed) == 0x000020, "Member 'Conveyor_turnR_2_C_PlayerHandAnyKey::Pressed' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.playerHandMouse
// 0x0010 (0x0010 - 0x0000)
struct Conveyor_turnR_2_C_PlayerHandMouse final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Mouse;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Conveyor_turnR_2_C_PlayerHandMouse) == 0x000008, "Wrong alignment on Conveyor_turnR_2_C_PlayerHandMouse");
static_assert(sizeof(Conveyor_turnR_2_C_PlayerHandMouse) == 0x000010, "Wrong size on Conveyor_turnR_2_C_PlayerHandMouse");
static_assert(offsetof(Conveyor_turnR_2_C_PlayerHandMouse, Player) == 0x000000, "Member 'Conveyor_turnR_2_C_PlayerHandMouse::Player' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_PlayerHandMouse, Mouse) == 0x000008, "Member 'Conveyor_turnR_2_C_PlayerHandMouse::Mouse' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.UserConstructionScript
// 0x00B0 (0x00B0 - 0x0000)
struct Conveyor_turnR_2_C_UserConstructionScript final
{
public:
	struct FBoxSphereBounds                       CallFunc_GetBounds_ReturnValue;                    // 0x0000(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x001C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_Add_VectorFloat_ReturnValue;              // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Conveyor_turnR_2_C_UserConstructionScript) == 0x000004, "Wrong alignment on Conveyor_turnR_2_C_UserConstructionScript");
static_assert(sizeof(Conveyor_turnR_2_C_UserConstructionScript) == 0x0000B0, "Wrong size on Conveyor_turnR_2_C_UserConstructionScript");
static_assert(offsetof(Conveyor_turnR_2_C_UserConstructionScript, CallFunc_GetBounds_ReturnValue) == 0x000000, "Member 'Conveyor_turnR_2_C_UserConstructionScript::CallFunc_GetBounds_ReturnValue' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_UserConstructionScript, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x00001C, "Member 'Conveyor_turnR_2_C_UserConstructionScript::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_UserConstructionScript, CallFunc_Add_VectorFloat_ReturnValue) == 0x0000A4, "Member 'Conveyor_turnR_2_C_UserConstructionScript::CallFunc_Add_VectorFloat_ReturnValue' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.SetSpeed
// 0x0008 (0x0008 - 0x0000)
struct Conveyor_turnR_2_C_SetSpeed final
{
public:
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Conveyor_turnR_2_C_SetSpeed) == 0x000004, "Wrong alignment on Conveyor_turnR_2_C_SetSpeed");
static_assert(sizeof(Conveyor_turnR_2_C_SetSpeed) == 0x000008, "Wrong size on Conveyor_turnR_2_C_SetSpeed");
static_assert(offsetof(Conveyor_turnR_2_C_SetSpeed, CallFunc_SelectFloat_ReturnValue) == 0x000000, "Member 'Conveyor_turnR_2_C_SetSpeed::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_SetSpeed, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000004, "Member 'Conveyor_turnR_2_C_SetSpeed::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.tryAttach
// 0x05C0 (0x05C0 - 0x0000)
struct Conveyor_turnR_2_C_TryAttach final
{
public:
	bool                                          Attached;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         A;                                                 // 0x0008(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class AActor*>                         CallFunc_GetOverlappingActors_OverlappingActors;   // 0x0018(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0040(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue_1;     // 0x0090(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item_1;                         // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AConveyor_2x2_C*                        K2Node_DynamicCast_AsConveyor_2x_2;                // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AConveyor_turnR_2_C*                    K2Node_DynamicCast_AsConveyor_Turn_R_2;            // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue_2;     // 0x00F0(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue_3;     // 0x0120(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeRelativeTransform_ReturnValue;        // 0x0150(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeRelativeTransform_ReturnValue_1;      // 0x0180(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x01B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x01BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x01C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x01D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x01E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x01EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F8[0x8];                                      // 0x01F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0200(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x0230(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_2;    // 0x0260(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26C[0x4];                                      // 0x026C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue_4;     // 0x0270(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x02A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AC[0x4];                                      // 0x02AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_ComposeTransforms_ReturnValue;            // 0x02B0(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x02E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult;      // 0x02EC(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue;         // 0x0374(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_375[0x3];                                      // 0x0375(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x0378(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x0400(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_401[0x3];                                      // 0x0401(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_3;    // 0x0404(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue_5;     // 0x0410(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0440(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44C[0x4];                                      // 0x044C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_ComposeTransforms_ReturnValue_1;          // 0x0450(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0480(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult_1;    // 0x048C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue_1;       // 0x0514(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_515[0x3];                                      // 0x0515(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult_1;     // 0x0518(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue_1;        // 0x05A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x05A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_1;         // 0x05A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A3[0x5];                                      // 0x05A3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetOverlappingActors_OverlappingActors_1; // 0x05A8(0x0010)(ReferenceParm)
};
static_assert(alignof(Conveyor_turnR_2_C_TryAttach) == 0x000010, "Wrong alignment on Conveyor_turnR_2_C_TryAttach");
static_assert(sizeof(Conveyor_turnR_2_C_TryAttach) == 0x0005C0, "Wrong size on Conveyor_turnR_2_C_TryAttach");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, Attached) == 0x000000, "Member 'Conveyor_turnR_2_C_TryAttach::Attached' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, A) == 0x000008, "Member 'Conveyor_turnR_2_C_TryAttach::A' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, CallFunc_GetOverlappingActors_OverlappingActors) == 0x000018, "Member 'Conveyor_turnR_2_C_TryAttach::CallFunc_GetOverlappingActors_OverlappingActors' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000028, "Member 'Conveyor_turnR_2_C_TryAttach::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000034, "Member 'Conveyor_turnR_2_C_TryAttach::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000040, "Member 'Conveyor_turnR_2_C_TryAttach::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000070, "Member 'Conveyor_turnR_2_C_TryAttach::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x00007C, "Member 'Conveyor_turnR_2_C_TryAttach::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, CallFunc_K2_GetComponentToWorld_ReturnValue_1) == 0x000090, "Member 'Conveyor_turnR_2_C_TryAttach::CallFunc_K2_GetComponentToWorld_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, CallFunc_Array_Get_Item) == 0x0000C0, "Member 'Conveyor_turnR_2_C_TryAttach::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, CallFunc_Array_Get_Item_1) == 0x0000C8, "Member 'Conveyor_turnR_2_C_TryAttach::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, K2Node_DynamicCast_AsConveyor_2x_2) == 0x0000D0, "Member 'Conveyor_turnR_2_C_TryAttach::K2Node_DynamicCast_AsConveyor_2x_2' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, K2Node_DynamicCast_bSuccess) == 0x0000D8, "Member 'Conveyor_turnR_2_C_TryAttach::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, K2Node_DynamicCast_AsConveyor_Turn_R_2) == 0x0000E0, "Member 'Conveyor_turnR_2_C_TryAttach::K2Node_DynamicCast_AsConveyor_Turn_R_2' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, K2Node_DynamicCast_bSuccess_1) == 0x0000E8, "Member 'Conveyor_turnR_2_C_TryAttach::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, CallFunc_K2_GetComponentToWorld_ReturnValue_2) == 0x0000F0, "Member 'Conveyor_turnR_2_C_TryAttach::CallFunc_K2_GetComponentToWorld_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, CallFunc_K2_GetComponentToWorld_ReturnValue_3) == 0x000120, "Member 'Conveyor_turnR_2_C_TryAttach::CallFunc_K2_GetComponentToWorld_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, CallFunc_MakeRelativeTransform_ReturnValue) == 0x000150, "Member 'Conveyor_turnR_2_C_TryAttach::CallFunc_MakeRelativeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, CallFunc_MakeRelativeTransform_ReturnValue_1) == 0x000180, "Member 'Conveyor_turnR_2_C_TryAttach::CallFunc_MakeRelativeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, CallFunc_BreakTransform_Location) == 0x0001B0, "Member 'Conveyor_turnR_2_C_TryAttach::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, CallFunc_BreakTransform_Rotation) == 0x0001BC, "Member 'Conveyor_turnR_2_C_TryAttach::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, CallFunc_BreakTransform_Scale) == 0x0001C8, "Member 'Conveyor_turnR_2_C_TryAttach::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, CallFunc_BreakTransform_Location_1) == 0x0001D4, "Member 'Conveyor_turnR_2_C_TryAttach::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, CallFunc_BreakTransform_Rotation_1) == 0x0001E0, "Member 'Conveyor_turnR_2_C_TryAttach::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, CallFunc_BreakTransform_Scale_1) == 0x0001EC, "Member 'Conveyor_turnR_2_C_TryAttach::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, CallFunc_MakeTransform_ReturnValue) == 0x000200, "Member 'Conveyor_turnR_2_C_TryAttach::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, CallFunc_MakeTransform_ReturnValue_1) == 0x000230, "Member 'Conveyor_turnR_2_C_TryAttach::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, CallFunc_K2_GetComponentLocation_ReturnValue_2) == 0x000260, "Member 'Conveyor_turnR_2_C_TryAttach::CallFunc_K2_GetComponentLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, CallFunc_K2_GetComponentToWorld_ReturnValue_4) == 0x000270, "Member 'Conveyor_turnR_2_C_TryAttach::CallFunc_K2_GetComponentToWorld_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0002A0, "Member 'Conveyor_turnR_2_C_TryAttach::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, CallFunc_ComposeTransforms_ReturnValue) == 0x0002B0, "Member 'Conveyor_turnR_2_C_TryAttach::CallFunc_ComposeTransforms_ReturnValue' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, CallFunc_Add_VectorVector_ReturnValue) == 0x0002E0, "Member 'Conveyor_turnR_2_C_TryAttach::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, CallFunc_K2_SetActorTransform_SweepHitResult) == 0x0002EC, "Member 'Conveyor_turnR_2_C_TryAttach::CallFunc_K2_SetActorTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, CallFunc_K2_SetActorTransform_ReturnValue) == 0x000374, "Member 'Conveyor_turnR_2_C_TryAttach::CallFunc_K2_SetActorTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x000378, "Member 'Conveyor_turnR_2_C_TryAttach::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, CallFunc_K2_SetActorLocation_ReturnValue) == 0x000400, "Member 'Conveyor_turnR_2_C_TryAttach::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, CallFunc_K2_GetComponentLocation_ReturnValue_3) == 0x000404, "Member 'Conveyor_turnR_2_C_TryAttach::CallFunc_K2_GetComponentLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, CallFunc_K2_GetComponentToWorld_ReturnValue_5) == 0x000410, "Member 'Conveyor_turnR_2_C_TryAttach::CallFunc_K2_GetComponentToWorld_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000440, "Member 'Conveyor_turnR_2_C_TryAttach::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, CallFunc_ComposeTransforms_ReturnValue_1) == 0x000450, "Member 'Conveyor_turnR_2_C_TryAttach::CallFunc_ComposeTransforms_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000480, "Member 'Conveyor_turnR_2_C_TryAttach::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, CallFunc_K2_SetActorTransform_SweepHitResult_1) == 0x00048C, "Member 'Conveyor_turnR_2_C_TryAttach::CallFunc_K2_SetActorTransform_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, CallFunc_K2_SetActorTransform_ReturnValue_1) == 0x000514, "Member 'Conveyor_turnR_2_C_TryAttach::CallFunc_K2_SetActorTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, CallFunc_K2_SetActorLocation_SweepHitResult_1) == 0x000518, "Member 'Conveyor_turnR_2_C_TryAttach::CallFunc_K2_SetActorLocation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, CallFunc_K2_SetActorLocation_ReturnValue_1) == 0x0005A0, "Member 'Conveyor_turnR_2_C_TryAttach::CallFunc_K2_SetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, CallFunc_Array_IsValidIndex_ReturnValue) == 0x0005A1, "Member 'Conveyor_turnR_2_C_TryAttach::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, CallFunc_Array_IsValidIndex_ReturnValue_1) == 0x0005A2, "Member 'Conveyor_turnR_2_C_TryAttach::CallFunc_Array_IsValidIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_TryAttach, CallFunc_GetOverlappingActors_OverlappingActors_1) == 0x0005A8, "Member 'Conveyor_turnR_2_C_TryAttach::CallFunc_GetOverlappingActors_OverlappingActors_1' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.getRot
// 0x0010 (0x0010 - 0x0000)
struct Conveyor_turnR_2_C_GetRot final
{
public:
	bool                                          B;                                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Conveyor_turnR_2_C_GetRot) == 0x000004, "Wrong alignment on Conveyor_turnR_2_C_GetRot");
static_assert(sizeof(Conveyor_turnR_2_C_GetRot) == 0x000010, "Wrong size on Conveyor_turnR_2_C_GetRot");
static_assert(offsetof(Conveyor_turnR_2_C_GetRot, B) == 0x000000, "Member 'Conveyor_turnR_2_C_GetRot::B' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_GetRot, ReturnValue) == 0x000004, "Member 'Conveyor_turnR_2_C_GetRot::ReturnValue' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.canTick
// 0x0060 (0x0060 - 0x0000)
struct Conveyor_turnR_2_C_CanTick final
{
public:
	TArray<class AActor*>                         A;                                                 // 0x0000(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetOverlappingActors_OverlappingActors;   // 0x0020(0x0010)(ReferenceParm)
	bool                                          CallFunc_IsSimulatingPhysics_ReturnValue;          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_K2_GetRootComponent_ReturnValue;          // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSimulatingPhysics_ReturnValue_1;        // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Conveyor_turnR_2_C_CanTick) == 0x000008, "Wrong alignment on Conveyor_turnR_2_C_CanTick");
static_assert(sizeof(Conveyor_turnR_2_C_CanTick) == 0x000060, "Wrong size on Conveyor_turnR_2_C_CanTick");
static_assert(offsetof(Conveyor_turnR_2_C_CanTick, A) == 0x000000, "Member 'Conveyor_turnR_2_C_CanTick::A' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_CanTick, Temp_int_Array_Index_Variable) == 0x000010, "Member 'Conveyor_turnR_2_C_CanTick::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_CanTick, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'Conveyor_turnR_2_C_CanTick::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_CanTick, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'Conveyor_turnR_2_C_CanTick::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_CanTick, CallFunc_Array_IsValidIndex_ReturnValue) == 0x00001C, "Member 'Conveyor_turnR_2_C_CanTick::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_CanTick, CallFunc_GetOverlappingActors_OverlappingActors) == 0x000020, "Member 'Conveyor_turnR_2_C_CanTick::CallFunc_GetOverlappingActors_OverlappingActors' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_CanTick, CallFunc_IsSimulatingPhysics_ReturnValue) == 0x000030, "Member 'Conveyor_turnR_2_C_CanTick::CallFunc_IsSimulatingPhysics_ReturnValue' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_CanTick, CallFunc_Array_Get_Item) == 0x000038, "Member 'Conveyor_turnR_2_C_CanTick::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_CanTick, CallFunc_BooleanOR_ReturnValue) == 0x000040, "Member 'Conveyor_turnR_2_C_CanTick::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_CanTick, CallFunc_K2_GetRootComponent_ReturnValue) == 0x000048, "Member 'Conveyor_turnR_2_C_CanTick::CallFunc_K2_GetRootComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_CanTick, CallFunc_IsSimulatingPhysics_ReturnValue_1) == 0x000050, "Member 'Conveyor_turnR_2_C_CanTick::CallFunc_IsSimulatingPhysics_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_CanTick, CallFunc_Array_Add_ReturnValue) == 0x000054, "Member 'Conveyor_turnR_2_C_CanTick::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_CanTick, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'Conveyor_turnR_2_C_CanTick::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_CanTick, CallFunc_Less_IntInt_ReturnValue) == 0x00005C, "Member 'Conveyor_turnR_2_C_CanTick::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.setWall
// 0x0004 (0x0004 - 0x0000)
struct Conveyor_turnR_2_C_SetWall final
{
public:
	ECollisionEnabled                             Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             Temp_byte_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECollisionEnabled                             K2Node_Select_Default;                             // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Conveyor_turnR_2_C_SetWall) == 0x000001, "Wrong alignment on Conveyor_turnR_2_C_SetWall");
static_assert(sizeof(Conveyor_turnR_2_C_SetWall) == 0x000004, "Wrong size on Conveyor_turnR_2_C_SetWall");
static_assert(offsetof(Conveyor_turnR_2_C_SetWall, Temp_byte_Variable) == 0x000000, "Member 'Conveyor_turnR_2_C_SetWall::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_SetWall, Temp_byte_Variable_1) == 0x000001, "Member 'Conveyor_turnR_2_C_SetWall::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_SetWall, Temp_bool_Variable) == 0x000002, "Member 'Conveyor_turnR_2_C_SetWall::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_SetWall, K2Node_Select_Default) == 0x000003, "Member 'Conveyor_turnR_2_C_SetWall::K2Node_Select_Default' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.landedOn
// 0x0010 (0x0010 - 0x0000)
struct Conveyor_turnR_2_C_LandedOn final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreFallDamage;                                  // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Conveyor_turnR_2_C_LandedOn) == 0x000008, "Wrong alignment on Conveyor_turnR_2_C_LandedOn");
static_assert(sizeof(Conveyor_turnR_2_C_LandedOn) == 0x000010, "Wrong size on Conveyor_turnR_2_C_LandedOn");
static_assert(offsetof(Conveyor_turnR_2_C_LandedOn, Player) == 0x000000, "Member 'Conveyor_turnR_2_C_LandedOn::Player' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_LandedOn, IgnoreFallDamage) == 0x000008, "Member 'Conveyor_turnR_2_C_LandedOn::IgnoreFallDamage' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.canBePutInContainer
// 0x0001 (0x0001 - 0x0000)
struct Conveyor_turnR_2_C_CanBePutInContainer final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Conveyor_turnR_2_C_CanBePutInContainer) == 0x000001, "Wrong alignment on Conveyor_turnR_2_C_CanBePutInContainer");
static_assert(sizeof(Conveyor_turnR_2_C_CanBePutInContainer) == 0x000001, "Wrong size on Conveyor_turnR_2_C_CanBePutInContainer");
static_assert(offsetof(Conveyor_turnR_2_C_CanBePutInContainer, Return) == 0x000000, "Member 'Conveyor_turnR_2_C_CanBePutInContainer::Return' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.asProp
// 0x0008 (0x0008 - 0x0000)
struct Conveyor_turnR_2_C_AsProp final
{
public:
	class AProp_C*                                Return;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Conveyor_turnR_2_C_AsProp) == 0x000008, "Wrong alignment on Conveyor_turnR_2_C_AsProp");
static_assert(sizeof(Conveyor_turnR_2_C_AsProp) == 0x000008, "Wrong size on Conveyor_turnR_2_C_AsProp");
static_assert(offsetof(Conveyor_turnR_2_C_AsProp, Return) == 0x000000, "Member 'Conveyor_turnR_2_C_AsProp::Return' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.canPickup
// 0x0001 (0x0001 - 0x0000)
struct Conveyor_turnR_2_C_CanPickup final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Conveyor_turnR_2_C_CanPickup) == 0x000001, "Wrong alignment on Conveyor_turnR_2_C_CanPickup");
static_assert(sizeof(Conveyor_turnR_2_C_CanPickup) == 0x000001, "Wrong size on Conveyor_turnR_2_C_CanPickup");
static_assert(offsetof(Conveyor_turnR_2_C_CanPickup, Return) == 0x000000, "Member 'Conveyor_turnR_2_C_CanPickup::Return' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.noRespawn
// 0x0002 (0x0002 - 0x0000)
struct Conveyor_turnR_2_C_NoRespawn final
{
public:
	bool                                          Param_NoRespawn;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Conveyor_turnR_2_C_NoRespawn) == 0x000001, "Wrong alignment on Conveyor_turnR_2_C_NoRespawn");
static_assert(sizeof(Conveyor_turnR_2_C_NoRespawn) == 0x000002, "Wrong size on Conveyor_turnR_2_C_NoRespawn");
static_assert(offsetof(Conveyor_turnR_2_C_NoRespawn, Param_NoRespawn) == 0x000000, "Member 'Conveyor_turnR_2_C_NoRespawn::Param_NoRespawn' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_NoRespawn, Return) == 0x000001, "Member 'Conveyor_turnR_2_C_NoRespawn::Return' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.lookAt
// 0x00B8 (0x00B8 - 0x0000)
struct Conveyor_turnR_2_C_LookAt final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          Return;                                            // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Text;                                              // 0x0098(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    boundObjectReplace;                                // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Number;                                            // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Conveyor_turnR_2_C_LookAt) == 0x000008, "Wrong alignment on Conveyor_turnR_2_C_LookAt");
static_assert(sizeof(Conveyor_turnR_2_C_LookAt) == 0x0000B8, "Wrong size on Conveyor_turnR_2_C_LookAt");
static_assert(offsetof(Conveyor_turnR_2_C_LookAt, Player) == 0x000000, "Member 'Conveyor_turnR_2_C_LookAt::Player' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_LookAt, Hit) == 0x000008, "Member 'Conveyor_turnR_2_C_LookAt::Hit' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_LookAt, Return) == 0x000090, "Member 'Conveyor_turnR_2_C_LookAt::Return' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_LookAt, Text) == 0x000098, "Member 'Conveyor_turnR_2_C_LookAt::Text' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_LookAt, boundObjectReplace) == 0x0000A8, "Member 'Conveyor_turnR_2_C_LookAt::boundObjectReplace' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_LookAt, Number) == 0x0000B0, "Member 'Conveyor_turnR_2_C_LookAt::Number' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.isButtonUsed
// 0x0001 (0x0001 - 0x0000)
struct Conveyor_turnR_2_C_IsButtonUsed final
{
public:
	bool                                          Failed;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Conveyor_turnR_2_C_IsButtonUsed) == 0x000001, "Wrong alignment on Conveyor_turnR_2_C_IsButtonUsed");
static_assert(sizeof(Conveyor_turnR_2_C_IsButtonUsed) == 0x000001, "Wrong size on Conveyor_turnR_2_C_IsButtonUsed");
static_assert(offsetof(Conveyor_turnR_2_C_IsButtonUsed, Failed) == 0x000000, "Member 'Conveyor_turnR_2_C_IsButtonUsed::Failed' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.getPriceMultiplier
// 0x0004 (0x0004 - 0x0000)
struct Conveyor_turnR_2_C_GetPriceMultiplier final
{
public:
	float                                         PriceMult;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Conveyor_turnR_2_C_GetPriceMultiplier) == 0x000004, "Wrong alignment on Conveyor_turnR_2_C_GetPriceMultiplier");
static_assert(sizeof(Conveyor_turnR_2_C_GetPriceMultiplier) == 0x000004, "Wrong size on Conveyor_turnR_2_C_GetPriceMultiplier");
static_assert(offsetof(Conveyor_turnR_2_C_GetPriceMultiplier, PriceMult) == 0x000000, "Member 'Conveyor_turnR_2_C_GetPriceMultiplier::PriceMult' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.skipRadial
// 0x0001 (0x0001 - 0x0000)
struct Conveyor_turnR_2_C_SkipRadial final
{
public:
	bool                                          Skip;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Conveyor_turnR_2_C_SkipRadial) == 0x000001, "Wrong alignment on Conveyor_turnR_2_C_SkipRadial");
static_assert(sizeof(Conveyor_turnR_2_C_SkipRadial) == 0x000001, "Wrong size on Conveyor_turnR_2_C_SkipRadial");
static_assert(offsetof(Conveyor_turnR_2_C_SkipRadial, Skip) == 0x000000, "Member 'Conveyor_turnR_2_C_SkipRadial::Skip' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.gascanFuel
// 0x0010 (0x0010 - 0x0000)
struct Conveyor_turnR_2_C_GascanFuel final
{
public:
	class AProp_gascan_C*                         Gascan;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Fueled;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Conveyor_turnR_2_C_GascanFuel) == 0x000008, "Wrong alignment on Conveyor_turnR_2_C_GascanFuel");
static_assert(sizeof(Conveyor_turnR_2_C_GascanFuel) == 0x000010, "Wrong size on Conveyor_turnR_2_C_GascanFuel");
static_assert(offsetof(Conveyor_turnR_2_C_GascanFuel, Gascan) == 0x000000, "Member 'Conveyor_turnR_2_C_GascanFuel::Gascan' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_GascanFuel, Fueled) == 0x000008, "Member 'Conveyor_turnR_2_C_GascanFuel::Fueled' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.getActionOptions
// 0x0060 (0x0060 - 0x0000)
struct Conveyor_turnR_2_C_GetActionOptions final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Component;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         Options;                                           // 0x0018(0x0010)(Parm, OutParm)
	TArray<Enum_interactionActions>               Options_enum;                                      // 0x0028(0x0010)(Parm, OutParm)
	TArray<class FText>                           OptionsNamesOverlay;                               // 0x0038(0x0010)(Parm, OutParm)
	uint8                                         Number;                                            // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<Enum_interactionActions>               K2Node_MakeArray_Array;                            // 0x0050(0x0010)(ReferenceParm)
};
static_assert(alignof(Conveyor_turnR_2_C_GetActionOptions) == 0x000008, "Wrong alignment on Conveyor_turnR_2_C_GetActionOptions");
static_assert(sizeof(Conveyor_turnR_2_C_GetActionOptions) == 0x000060, "Wrong size on Conveyor_turnR_2_C_GetActionOptions");
static_assert(offsetof(Conveyor_turnR_2_C_GetActionOptions, Player) == 0x000000, "Member 'Conveyor_turnR_2_C_GetActionOptions::Player' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_GetActionOptions, Component) == 0x000008, "Member 'Conveyor_turnR_2_C_GetActionOptions::Component' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_GetActionOptions, Actor) == 0x000010, "Member 'Conveyor_turnR_2_C_GetActionOptions::Actor' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_GetActionOptions, Options) == 0x000018, "Member 'Conveyor_turnR_2_C_GetActionOptions::Options' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_GetActionOptions, Options_enum) == 0x000028, "Member 'Conveyor_turnR_2_C_GetActionOptions::Options_enum' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_GetActionOptions, OptionsNamesOverlay) == 0x000038, "Member 'Conveyor_turnR_2_C_GetActionOptions::OptionsNamesOverlay' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_GetActionOptions, Number) == 0x000048, "Member 'Conveyor_turnR_2_C_GetActionOptions::Number' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_GetActionOptions, K2Node_MakeArray_Array) == 0x000050, "Member 'Conveyor_turnR_2_C_GetActionOptions::K2Node_MakeArray_Array' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.setPath
// 0x0018 (0x0018 - 0x0000)
struct Conveyor_turnR_2_C_SetPath final
{
public:
	TArray<struct FVector>                        Path;                                              // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Return;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Conveyor_turnR_2_C_SetPath) == 0x000008, "Wrong alignment on Conveyor_turnR_2_C_SetPath");
static_assert(sizeof(Conveyor_turnR_2_C_SetPath) == 0x000018, "Wrong size on Conveyor_turnR_2_C_SetPath");
static_assert(offsetof(Conveyor_turnR_2_C_SetPath, Path) == 0x000000, "Member 'Conveyor_turnR_2_C_SetPath::Path' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_SetPath, Return) == 0x000010, "Member 'Conveyor_turnR_2_C_SetPath::Return' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.getOnlyKey
// 0x0010 (0x0010 - 0x0000)
struct Conveyor_turnR_2_C_GetOnlyKey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Conveyor_turnR_2_C_GetOnlyKey) == 0x000008, "Wrong alignment on Conveyor_turnR_2_C_GetOnlyKey");
static_assert(sizeof(Conveyor_turnR_2_C_GetOnlyKey) == 0x000010, "Wrong size on Conveyor_turnR_2_C_GetOnlyKey");
static_assert(offsetof(Conveyor_turnR_2_C_GetOnlyKey, Key) == 0x000000, "Member 'Conveyor_turnR_2_C_GetOnlyKey::Key' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.processKeys
// 0x0001 (0x0001 - 0x0000)
struct Conveyor_turnR_2_C_ProcessKeys final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Conveyor_turnR_2_C_ProcessKeys) == 0x000001, "Wrong alignment on Conveyor_turnR_2_C_ProcessKeys");
static_assert(sizeof(Conveyor_turnR_2_C_ProcessKeys) == 0x000001, "Wrong size on Conveyor_turnR_2_C_ProcessKeys");
static_assert(offsetof(Conveyor_turnR_2_C_ProcessKeys, Return) == 0x000000, "Member 'Conveyor_turnR_2_C_ProcessKeys::Return' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.canBeUsedHold
// 0x0001 (0x0001 - 0x0000)
struct Conveyor_turnR_2_C_CanBeUsedHold final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Conveyor_turnR_2_C_CanBeUsedHold) == 0x000001, "Wrong alignment on Conveyor_turnR_2_C_CanBeUsedHold");
static_assert(sizeof(Conveyor_turnR_2_C_CanBeUsedHold) == 0x000001, "Wrong size on Conveyor_turnR_2_C_CanBeUsedHold");
static_assert(offsetof(Conveyor_turnR_2_C_CanBeUsedHold, Return) == 0x000000, "Member 'Conveyor_turnR_2_C_CanBeUsedHold::Return' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.GetKey
// 0x0010 (0x0010 - 0x0000)
struct Conveyor_turnR_2_C_GetKey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Conveyor_turnR_2_C_GetKey) == 0x000008, "Wrong alignment on Conveyor_turnR_2_C_GetKey");
static_assert(sizeof(Conveyor_turnR_2_C_GetKey) == 0x000010, "Wrong size on Conveyor_turnR_2_C_GetKey");
static_assert(offsetof(Conveyor_turnR_2_C_GetKey, Key) == 0x000000, "Member 'Conveyor_turnR_2_C_GetKey::Key' has a wrong offset!");

// Function conveyor_turnR_2.conveyor_turnR_2_C.toolboxFix
// 0x0010 (0x0010 - 0x0000)
struct Conveyor_turnR_2_C_ToolboxFix final
{
public:
	class AProp_toolbox_C*                        Toolbox;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Conveyor_turnR_2_C_ToolboxFix) == 0x000008, "Wrong alignment on Conveyor_turnR_2_C_ToolboxFix");
static_assert(sizeof(Conveyor_turnR_2_C_ToolboxFix) == 0x000010, "Wrong size on Conveyor_turnR_2_C_ToolboxFix");
static_assert(offsetof(Conveyor_turnR_2_C_ToolboxFix, Toolbox) == 0x000000, "Member 'Conveyor_turnR_2_C_ToolboxFix::Toolbox' has a wrong offset!");
static_assert(offsetof(Conveyor_turnR_2_C_ToolboxFix, Return) == 0x000008, "Member 'Conveyor_turnR_2_C_ToolboxFix::Return' has a wrong offset!");

}

