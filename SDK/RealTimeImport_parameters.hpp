#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RealTimeImport

#include "Basic.hpp"

#include "RealTimeImport_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function RealTimeImport.FileFunctionsRealTimeImport.addBytesToFile
// 0x0030 (0x0030 - 0x0000)
struct FileFunctionsRealTimeImport_AddBytesToFile final
{
public:
	ERTIDirectoryType                             DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F82[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 bytes;                                             // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F83[0x7];                                      // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FileFunctionsRealTimeImport_AddBytesToFile) == 0x000008, "Wrong alignment on FileFunctionsRealTimeImport_AddBytesToFile");
static_assert(sizeof(FileFunctionsRealTimeImport_AddBytesToFile) == 0x000030, "Wrong size on FileFunctionsRealTimeImport_AddBytesToFile");
static_assert(offsetof(FileFunctionsRealTimeImport_AddBytesToFile, DirectoryType) == 0x000000, "Member 'FileFunctionsRealTimeImport_AddBytesToFile::DirectoryType' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_AddBytesToFile, FilePath) == 0x000008, "Member 'FileFunctionsRealTimeImport_AddBytesToFile::FilePath' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_AddBytesToFile, bytes) == 0x000018, "Member 'FileFunctionsRealTimeImport_AddBytesToFile::bytes' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_AddBytesToFile, Success) == 0x000028, "Member 'FileFunctionsRealTimeImport_AddBytesToFile::Success' has a wrong offset!");

// Function RealTimeImport.FileFunctionsRealTimeImport.Base64Decode
// 0x0020 (0x0020 - 0x0000)
struct FileFunctionsRealTimeImport_Base64Decode final
{
public:
	class FString                                 base64EncodedString;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FileFunctionsRealTimeImport_Base64Decode) == 0x000008, "Wrong alignment on FileFunctionsRealTimeImport_Base64Decode");
static_assert(sizeof(FileFunctionsRealTimeImport_Base64Decode) == 0x000020, "Wrong size on FileFunctionsRealTimeImport_Base64Decode");
static_assert(offsetof(FileFunctionsRealTimeImport_Base64Decode, base64EncodedString) == 0x000000, "Member 'FileFunctionsRealTimeImport_Base64Decode::base64EncodedString' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_Base64Decode, ReturnValue) == 0x000010, "Member 'FileFunctionsRealTimeImport_Base64Decode::ReturnValue' has a wrong offset!");

// Function RealTimeImport.FileFunctionsRealTimeImport.Base64Encode
// 0x0020 (0x0020 - 0x0000)
struct FileFunctionsRealTimeImport_Base64Encode final
{
public:
	TArray<uint8>                                 bytes;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FileFunctionsRealTimeImport_Base64Encode) == 0x000008, "Wrong alignment on FileFunctionsRealTimeImport_Base64Encode");
static_assert(sizeof(FileFunctionsRealTimeImport_Base64Encode) == 0x000020, "Wrong size on FileFunctionsRealTimeImport_Base64Encode");
static_assert(offsetof(FileFunctionsRealTimeImport_Base64Encode, bytes) == 0x000000, "Member 'FileFunctionsRealTimeImport_Base64Encode::bytes' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_Base64Encode, ReturnValue) == 0x000010, "Member 'FileFunctionsRealTimeImport_Base64Encode::ReturnValue' has a wrong offset!");

// Function RealTimeImport.FileFunctionsRealTimeImport.base64StringToBytes
// 0x0030 (0x0030 - 0x0000)
struct FileFunctionsRealTimeImport_base64StringToBytes final
{
public:
	ERTIDirectoryType                             DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F84[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 base64String;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F85[0x7];                                      // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FileFunctionsRealTimeImport_base64StringToBytes) == 0x000008, "Wrong alignment on FileFunctionsRealTimeImport_base64StringToBytes");
static_assert(sizeof(FileFunctionsRealTimeImport_base64StringToBytes) == 0x000030, "Wrong size on FileFunctionsRealTimeImport_base64StringToBytes");
static_assert(offsetof(FileFunctionsRealTimeImport_base64StringToBytes, DirectoryType) == 0x000000, "Member 'FileFunctionsRealTimeImport_base64StringToBytes::DirectoryType' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_base64StringToBytes, base64String) == 0x000008, "Member 'FileFunctionsRealTimeImport_base64StringToBytes::base64String' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_base64StringToBytes, Success) == 0x000018, "Member 'FileFunctionsRealTimeImport_base64StringToBytes::Success' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_base64StringToBytes, ReturnValue) == 0x000020, "Member 'FileFunctionsRealTimeImport_base64StringToBytes::ReturnValue' has a wrong offset!");

// Function RealTimeImport.FileFunctionsRealTimeImport.bytesToBase64String
// 0x0020 (0x0020 - 0x0000)
struct FileFunctionsRealTimeImport_bytesToBase64String final
{
public:
	TArray<uint8>                                 bytes;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 base64String;                                      // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FileFunctionsRealTimeImport_bytesToBase64String) == 0x000008, "Wrong alignment on FileFunctionsRealTimeImport_bytesToBase64String");
static_assert(sizeof(FileFunctionsRealTimeImport_bytesToBase64String) == 0x000020, "Wrong size on FileFunctionsRealTimeImport_bytesToBase64String");
static_assert(offsetof(FileFunctionsRealTimeImport_bytesToBase64String, bytes) == 0x000000, "Member 'FileFunctionsRealTimeImport_bytesToBase64String::bytes' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_bytesToBase64String, base64String) == 0x000010, "Member 'FileFunctionsRealTimeImport_bytesToBase64String::base64String' has a wrong offset!");

// Function RealTimeImport.FileFunctionsRealTimeImport.CreateDirectory
// 0x0020 (0x0020 - 0x0000)
struct FileFunctionsRealTimeImport_CreateDirectory final
{
public:
	ERTIDirectoryType                             DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F86[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Path;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F87[0x7];                                      // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FileFunctionsRealTimeImport_CreateDirectory) == 0x000008, "Wrong alignment on FileFunctionsRealTimeImport_CreateDirectory");
static_assert(sizeof(FileFunctionsRealTimeImport_CreateDirectory) == 0x000020, "Wrong size on FileFunctionsRealTimeImport_CreateDirectory");
static_assert(offsetof(FileFunctionsRealTimeImport_CreateDirectory, DirectoryType) == 0x000000, "Member 'FileFunctionsRealTimeImport_CreateDirectory::DirectoryType' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_CreateDirectory, Path) == 0x000008, "Member 'FileFunctionsRealTimeImport_CreateDirectory::Path' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_CreateDirectory, ReturnValue) == 0x000018, "Member 'FileFunctionsRealTimeImport_CreateDirectory::ReturnValue' has a wrong offset!");

// Function RealTimeImport.FileFunctionsRealTimeImport.DeleteDirectory
// 0x0020 (0x0020 - 0x0000)
struct FileFunctionsRealTimeImport_DeleteDirectory final
{
public:
	ERTIDirectoryType                             DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F88[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F89[0x7];                                      // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FileFunctionsRealTimeImport_DeleteDirectory) == 0x000008, "Wrong alignment on FileFunctionsRealTimeImport_DeleteDirectory");
static_assert(sizeof(FileFunctionsRealTimeImport_DeleteDirectory) == 0x000020, "Wrong size on FileFunctionsRealTimeImport_DeleteDirectory");
static_assert(offsetof(FileFunctionsRealTimeImport_DeleteDirectory, DirectoryType) == 0x000000, "Member 'FileFunctionsRealTimeImport_DeleteDirectory::DirectoryType' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_DeleteDirectory, FilePath) == 0x000008, "Member 'FileFunctionsRealTimeImport_DeleteDirectory::FilePath' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_DeleteDirectory, ReturnValue) == 0x000018, "Member 'FileFunctionsRealTimeImport_DeleteDirectory::ReturnValue' has a wrong offset!");

// Function RealTimeImport.FileFunctionsRealTimeImport.DeleteFile
// 0x0020 (0x0020 - 0x0000)
struct FileFunctionsRealTimeImport_DeleteFile final
{
public:
	ERTIDirectoryType                             DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8A[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8B[0x7];                                      // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FileFunctionsRealTimeImport_DeleteFile) == 0x000008, "Wrong alignment on FileFunctionsRealTimeImport_DeleteFile");
static_assert(sizeof(FileFunctionsRealTimeImport_DeleteFile) == 0x000020, "Wrong size on FileFunctionsRealTimeImport_DeleteFile");
static_assert(offsetof(FileFunctionsRealTimeImport_DeleteFile, DirectoryType) == 0x000000, "Member 'FileFunctionsRealTimeImport_DeleteFile::DirectoryType' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_DeleteFile, FilePath) == 0x000008, "Member 'FileFunctionsRealTimeImport_DeleteFile::FilePath' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_DeleteFile, ReturnValue) == 0x000018, "Member 'FileFunctionsRealTimeImport_DeleteFile::ReturnValue' has a wrong offset!");

// Function RealTimeImport.FileFunctionsRealTimeImport.directoryExists
// 0x0020 (0x0020 - 0x0000)
struct FileFunctionsRealTimeImport_DirectoryExists final
{
public:
	ERTIDirectoryType                             DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8C[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Path;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8D[0x7];                                      // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FileFunctionsRealTimeImport_DirectoryExists) == 0x000008, "Wrong alignment on FileFunctionsRealTimeImport_DirectoryExists");
static_assert(sizeof(FileFunctionsRealTimeImport_DirectoryExists) == 0x000020, "Wrong size on FileFunctionsRealTimeImport_DirectoryExists");
static_assert(offsetof(FileFunctionsRealTimeImport_DirectoryExists, DirectoryType) == 0x000000, "Member 'FileFunctionsRealTimeImport_DirectoryExists::DirectoryType' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_DirectoryExists, Path) == 0x000008, "Member 'FileFunctionsRealTimeImport_DirectoryExists::Path' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_DirectoryExists, ReturnValue) == 0x000018, "Member 'FileFunctionsRealTimeImport_DirectoryExists::ReturnValue' has a wrong offset!");

// Function RealTimeImport.FileFunctionsRealTimeImport.fileExists
// 0x0020 (0x0020 - 0x0000)
struct FileFunctionsRealTimeImport_FileExists final
{
public:
	ERTIDirectoryType                             DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8E[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8F[0x7];                                      // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FileFunctionsRealTimeImport_FileExists) == 0x000008, "Wrong alignment on FileFunctionsRealTimeImport_FileExists");
static_assert(sizeof(FileFunctionsRealTimeImport_FileExists) == 0x000020, "Wrong size on FileFunctionsRealTimeImport_FileExists");
static_assert(offsetof(FileFunctionsRealTimeImport_FileExists, DirectoryType) == 0x000000, "Member 'FileFunctionsRealTimeImport_FileExists::DirectoryType' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_FileExists, FilePath) == 0x000008, "Member 'FileFunctionsRealTimeImport_FileExists::FilePath' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_FileExists, ReturnValue) == 0x000018, "Member 'FileFunctionsRealTimeImport_FileExists::ReturnValue' has a wrong offset!");

// Function RealTimeImport.FileFunctionsRealTimeImport.fileSize
// 0x0020 (0x0020 - 0x0000)
struct FileFunctionsRealTimeImport_FileSize final
{
public:
	ERTIDirectoryType                             DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F90[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FileFunctionsRealTimeImport_FileSize) == 0x000008, "Wrong alignment on FileFunctionsRealTimeImport_FileSize");
static_assert(sizeof(FileFunctionsRealTimeImport_FileSize) == 0x000020, "Wrong size on FileFunctionsRealTimeImport_FileSize");
static_assert(offsetof(FileFunctionsRealTimeImport_FileSize, DirectoryType) == 0x000000, "Member 'FileFunctionsRealTimeImport_FileSize::DirectoryType' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_FileSize, FilePath) == 0x000008, "Member 'FileFunctionsRealTimeImport_FileSize::FilePath' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_FileSize, ReturnValue) == 0x000018, "Member 'FileFunctionsRealTimeImport_FileSize::ReturnValue' has a wrong offset!");

// Function RealTimeImport.FileFunctionsRealTimeImport.fileToBase64String
// 0x0040 (0x0040 - 0x0000)
struct FileFunctionsRealTimeImport_FileToBase64String final
{
public:
	ERTIDirectoryType                             DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F91[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F92[0x7];                                      // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 base64String;                                      // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FileFunctionsRealTimeImport_FileToBase64String) == 0x000008, "Wrong alignment on FileFunctionsRealTimeImport_FileToBase64String");
static_assert(sizeof(FileFunctionsRealTimeImport_FileToBase64String) == 0x000040, "Wrong size on FileFunctionsRealTimeImport_FileToBase64String");
static_assert(offsetof(FileFunctionsRealTimeImport_FileToBase64String, DirectoryType) == 0x000000, "Member 'FileFunctionsRealTimeImport_FileToBase64String::DirectoryType' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_FileToBase64String, FilePath) == 0x000008, "Member 'FileFunctionsRealTimeImport_FileToBase64String::FilePath' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_FileToBase64String, Success) == 0x000018, "Member 'FileFunctionsRealTimeImport_FileToBase64String::Success' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_FileToBase64String, base64String) == 0x000020, "Member 'FileFunctionsRealTimeImport_FileToBase64String::base64String' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_FileToBase64String, Filename) == 0x000030, "Member 'FileFunctionsRealTimeImport_FileToBase64String::Filename' has a wrong offset!");

// Function RealTimeImport.FileFunctionsRealTimeImport.getAccessTimeStamp
// 0x0020 (0x0020 - 0x0000)
struct FileFunctionsRealTimeImport_GetAccessTimeStamp final
{
public:
	ERTIDirectoryType                             DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F93[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FileFunctionsRealTimeImport_GetAccessTimeStamp) == 0x000008, "Wrong alignment on FileFunctionsRealTimeImport_GetAccessTimeStamp");
static_assert(sizeof(FileFunctionsRealTimeImport_GetAccessTimeStamp) == 0x000020, "Wrong size on FileFunctionsRealTimeImport_GetAccessTimeStamp");
static_assert(offsetof(FileFunctionsRealTimeImport_GetAccessTimeStamp, DirectoryType) == 0x000000, "Member 'FileFunctionsRealTimeImport_GetAccessTimeStamp::DirectoryType' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_GetAccessTimeStamp, FilePath) == 0x000008, "Member 'FileFunctionsRealTimeImport_GetAccessTimeStamp::FilePath' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_GetAccessTimeStamp, ReturnValue) == 0x000018, "Member 'FileFunctionsRealTimeImport_GetAccessTimeStamp::ReturnValue' has a wrong offset!");

// Function RealTimeImport.FileFunctionsRealTimeImport.getFileFunctionsRealTimeImport
// 0x0008 (0x0008 - 0x0000)
struct FileFunctionsRealTimeImport_GetFileFunctionsRealTimeImport final
{
public:
	class UFileFunctionsRealTimeImport*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FileFunctionsRealTimeImport_GetFileFunctionsRealTimeImport) == 0x000008, "Wrong alignment on FileFunctionsRealTimeImport_GetFileFunctionsRealTimeImport");
static_assert(sizeof(FileFunctionsRealTimeImport_GetFileFunctionsRealTimeImport) == 0x000008, "Wrong size on FileFunctionsRealTimeImport_GetFileFunctionsRealTimeImport");
static_assert(offsetof(FileFunctionsRealTimeImport_GetFileFunctionsRealTimeImport, ReturnValue) == 0x000000, "Member 'FileFunctionsRealTimeImport_GetFileFunctionsRealTimeImport::ReturnValue' has a wrong offset!");

// Function RealTimeImport.FileFunctionsRealTimeImport.getFilenameOnDisk
// 0x0028 (0x0028 - 0x0000)
struct FileFunctionsRealTimeImport_GetFilenameOnDisk final
{
public:
	ERTIDirectoryType                             DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F94[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FileFunctionsRealTimeImport_GetFilenameOnDisk) == 0x000008, "Wrong alignment on FileFunctionsRealTimeImport_GetFilenameOnDisk");
static_assert(sizeof(FileFunctionsRealTimeImport_GetFilenameOnDisk) == 0x000028, "Wrong size on FileFunctionsRealTimeImport_GetFilenameOnDisk");
static_assert(offsetof(FileFunctionsRealTimeImport_GetFilenameOnDisk, DirectoryType) == 0x000000, "Member 'FileFunctionsRealTimeImport_GetFilenameOnDisk::DirectoryType' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_GetFilenameOnDisk, FilePath) == 0x000008, "Member 'FileFunctionsRealTimeImport_GetFilenameOnDisk::FilePath' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_GetFilenameOnDisk, ReturnValue) == 0x000018, "Member 'FileFunctionsRealTimeImport_GetFilenameOnDisk::ReturnValue' has a wrong offset!");

// Function RealTimeImport.FileFunctionsRealTimeImport.getMD5FromFile
// 0x0030 (0x0030 - 0x0000)
struct FileFunctionsRealTimeImport_GetMD5FromFile final
{
public:
	ERTIDirectoryType                             DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F95[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F96[0x7];                                      // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Md5;                                               // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FileFunctionsRealTimeImport_GetMD5FromFile) == 0x000008, "Wrong alignment on FileFunctionsRealTimeImport_GetMD5FromFile");
static_assert(sizeof(FileFunctionsRealTimeImport_GetMD5FromFile) == 0x000030, "Wrong size on FileFunctionsRealTimeImport_GetMD5FromFile");
static_assert(offsetof(FileFunctionsRealTimeImport_GetMD5FromFile, DirectoryType) == 0x000000, "Member 'FileFunctionsRealTimeImport_GetMD5FromFile::DirectoryType' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_GetMD5FromFile, FilePath) == 0x000008, "Member 'FileFunctionsRealTimeImport_GetMD5FromFile::FilePath' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_GetMD5FromFile, Success) == 0x000018, "Member 'FileFunctionsRealTimeImport_GetMD5FromFile::Success' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_GetMD5FromFile, Md5) == 0x000020, "Member 'FileFunctionsRealTimeImport_GetMD5FromFile::Md5' has a wrong offset!");

// Function RealTimeImport.FileFunctionsRealTimeImport.getTimeStamp
// 0x0020 (0x0020 - 0x0000)
struct FileFunctionsRealTimeImport_GetTimeStamp final
{
public:
	ERTIDirectoryType                             DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F97[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FileFunctionsRealTimeImport_GetTimeStamp) == 0x000008, "Wrong alignment on FileFunctionsRealTimeImport_GetTimeStamp");
static_assert(sizeof(FileFunctionsRealTimeImport_GetTimeStamp) == 0x000020, "Wrong size on FileFunctionsRealTimeImport_GetTimeStamp");
static_assert(offsetof(FileFunctionsRealTimeImport_GetTimeStamp, DirectoryType) == 0x000000, "Member 'FileFunctionsRealTimeImport_GetTimeStamp::DirectoryType' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_GetTimeStamp, FilePath) == 0x000008, "Member 'FileFunctionsRealTimeImport_GetTimeStamp::FilePath' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_GetTimeStamp, ReturnValue) == 0x000018, "Member 'FileFunctionsRealTimeImport_GetTimeStamp::ReturnValue' has a wrong offset!");

// Function RealTimeImport.FileFunctionsRealTimeImport.isReadOnly
// 0x0020 (0x0020 - 0x0000)
struct FileFunctionsRealTimeImport_IsReadOnly final
{
public:
	ERTIDirectoryType                             DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F98[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F99[0x7];                                      // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FileFunctionsRealTimeImport_IsReadOnly) == 0x000008, "Wrong alignment on FileFunctionsRealTimeImport_IsReadOnly");
static_assert(sizeof(FileFunctionsRealTimeImport_IsReadOnly) == 0x000020, "Wrong size on FileFunctionsRealTimeImport_IsReadOnly");
static_assert(offsetof(FileFunctionsRealTimeImport_IsReadOnly, DirectoryType) == 0x000000, "Member 'FileFunctionsRealTimeImport_IsReadOnly::DirectoryType' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_IsReadOnly, FilePath) == 0x000008, "Member 'FileFunctionsRealTimeImport_IsReadOnly::FilePath' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_IsReadOnly, ReturnValue) == 0x000018, "Member 'FileFunctionsRealTimeImport_IsReadOnly::ReturnValue' has a wrong offset!");

// Function RealTimeImport.FileFunctionsRealTimeImport.moveFile
// 0x0038 (0x0038 - 0x0000)
struct FileFunctionsRealTimeImport_MoveFile final
{
public:
	ERTIDirectoryType                             DirectoryTypeTo;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9A[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePathTo;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERTIDirectoryType                             DirectoryTypeFrom;                                 // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9B[0x7];                                      // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePathFrom;                                      // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9C[0x7];                                      // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FileFunctionsRealTimeImport_MoveFile) == 0x000008, "Wrong alignment on FileFunctionsRealTimeImport_MoveFile");
static_assert(sizeof(FileFunctionsRealTimeImport_MoveFile) == 0x000038, "Wrong size on FileFunctionsRealTimeImport_MoveFile");
static_assert(offsetof(FileFunctionsRealTimeImport_MoveFile, DirectoryTypeTo) == 0x000000, "Member 'FileFunctionsRealTimeImport_MoveFile::DirectoryTypeTo' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_MoveFile, FilePathTo) == 0x000008, "Member 'FileFunctionsRealTimeImport_MoveFile::FilePathTo' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_MoveFile, DirectoryTypeFrom) == 0x000018, "Member 'FileFunctionsRealTimeImport_MoveFile::DirectoryTypeFrom' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_MoveFile, FilePathFrom) == 0x000020, "Member 'FileFunctionsRealTimeImport_MoveFile::FilePathFrom' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_MoveFile, ReturnValue) == 0x000030, "Member 'FileFunctionsRealTimeImport_MoveFile::ReturnValue' has a wrong offset!");

// Function RealTimeImport.FileFunctionsRealTimeImport.ReadBytesFromFile
// 0x0030 (0x0030 - 0x0000)
struct FileFunctionsRealTimeImport_ReadBytesFromFile final
{
public:
	ERTIDirectoryType                             DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9D[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9E[0x7];                                      // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FileFunctionsRealTimeImport_ReadBytesFromFile) == 0x000008, "Wrong alignment on FileFunctionsRealTimeImport_ReadBytesFromFile");
static_assert(sizeof(FileFunctionsRealTimeImport_ReadBytesFromFile) == 0x000030, "Wrong size on FileFunctionsRealTimeImport_ReadBytesFromFile");
static_assert(offsetof(FileFunctionsRealTimeImport_ReadBytesFromFile, DirectoryType) == 0x000000, "Member 'FileFunctionsRealTimeImport_ReadBytesFromFile::DirectoryType' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_ReadBytesFromFile, FilePath) == 0x000008, "Member 'FileFunctionsRealTimeImport_ReadBytesFromFile::FilePath' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_ReadBytesFromFile, Success) == 0x000018, "Member 'FileFunctionsRealTimeImport_ReadBytesFromFile::Success' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_ReadBytesFromFile, ReturnValue) == 0x000020, "Member 'FileFunctionsRealTimeImport_ReadBytesFromFile::ReturnValue' has a wrong offset!");

// Function RealTimeImport.FileFunctionsRealTimeImport.ReadStringFromFile
// 0x0030 (0x0030 - 0x0000)
struct FileFunctionsRealTimeImport_ReadStringFromFile final
{
public:
	ERTIDirectoryType                             DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9F[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA0[0x7];                                      // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Data;                                              // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FileFunctionsRealTimeImport_ReadStringFromFile) == 0x000008, "Wrong alignment on FileFunctionsRealTimeImport_ReadStringFromFile");
static_assert(sizeof(FileFunctionsRealTimeImport_ReadStringFromFile) == 0x000030, "Wrong size on FileFunctionsRealTimeImport_ReadStringFromFile");
static_assert(offsetof(FileFunctionsRealTimeImport_ReadStringFromFile, DirectoryType) == 0x000000, "Member 'FileFunctionsRealTimeImport_ReadStringFromFile::DirectoryType' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_ReadStringFromFile, FilePath) == 0x000008, "Member 'FileFunctionsRealTimeImport_ReadStringFromFile::FilePath' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_ReadStringFromFile, Success) == 0x000018, "Member 'FileFunctionsRealTimeImport_ReadStringFromFile::Success' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_ReadStringFromFile, Data) == 0x000020, "Member 'FileFunctionsRealTimeImport_ReadStringFromFile::Data' has a wrong offset!");

// Function RealTimeImport.FileFunctionsRealTimeImport.setReadOnly
// 0x0020 (0x0020 - 0x0000)
struct FileFunctionsRealTimeImport_SetReadOnly final
{
public:
	ERTIDirectoryType                             DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA1[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewReadOnlyValue;                                 // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA2[0x6];                                      // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FileFunctionsRealTimeImport_SetReadOnly) == 0x000008, "Wrong alignment on FileFunctionsRealTimeImport_SetReadOnly");
static_assert(sizeof(FileFunctionsRealTimeImport_SetReadOnly) == 0x000020, "Wrong size on FileFunctionsRealTimeImport_SetReadOnly");
static_assert(offsetof(FileFunctionsRealTimeImport_SetReadOnly, DirectoryType) == 0x000000, "Member 'FileFunctionsRealTimeImport_SetReadOnly::DirectoryType' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_SetReadOnly, FilePath) == 0x000008, "Member 'FileFunctionsRealTimeImport_SetReadOnly::FilePath' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_SetReadOnly, bNewReadOnlyValue) == 0x000018, "Member 'FileFunctionsRealTimeImport_SetReadOnly::bNewReadOnlyValue' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_SetReadOnly, ReturnValue) == 0x000019, "Member 'FileFunctionsRealTimeImport_SetReadOnly::ReturnValue' has a wrong offset!");

// Function RealTimeImport.FileFunctionsRealTimeImport.setTimeStamp
// 0x0020 (0x0020 - 0x0000)
struct FileFunctionsRealTimeImport_SetTimeStamp final
{
public:
	ERTIDirectoryType                             DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA3[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              DateTime;                                          // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FileFunctionsRealTimeImport_SetTimeStamp) == 0x000008, "Wrong alignment on FileFunctionsRealTimeImport_SetTimeStamp");
static_assert(sizeof(FileFunctionsRealTimeImport_SetTimeStamp) == 0x000020, "Wrong size on FileFunctionsRealTimeImport_SetTimeStamp");
static_assert(offsetof(FileFunctionsRealTimeImport_SetTimeStamp, DirectoryType) == 0x000000, "Member 'FileFunctionsRealTimeImport_SetTimeStamp::DirectoryType' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_SetTimeStamp, FilePath) == 0x000008, "Member 'FileFunctionsRealTimeImport_SetTimeStamp::FilePath' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_SetTimeStamp, DateTime) == 0x000018, "Member 'FileFunctionsRealTimeImport_SetTimeStamp::DateTime' has a wrong offset!");

// Function RealTimeImport.FileFunctionsRealTimeImport.WriteBytesToFile
// 0x0030 (0x0030 - 0x0000)
struct FileFunctionsRealTimeImport_WriteBytesToFile final
{
public:
	ERTIDirectoryType                             DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA4[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 bytes;                                             // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA5[0x7];                                      // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FileFunctionsRealTimeImport_WriteBytesToFile) == 0x000008, "Wrong alignment on FileFunctionsRealTimeImport_WriteBytesToFile");
static_assert(sizeof(FileFunctionsRealTimeImport_WriteBytesToFile) == 0x000030, "Wrong size on FileFunctionsRealTimeImport_WriteBytesToFile");
static_assert(offsetof(FileFunctionsRealTimeImport_WriteBytesToFile, DirectoryType) == 0x000000, "Member 'FileFunctionsRealTimeImport_WriteBytesToFile::DirectoryType' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_WriteBytesToFile, FilePath) == 0x000008, "Member 'FileFunctionsRealTimeImport_WriteBytesToFile::FilePath' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_WriteBytesToFile, bytes) == 0x000018, "Member 'FileFunctionsRealTimeImport_WriteBytesToFile::bytes' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_WriteBytesToFile, Success) == 0x000028, "Member 'FileFunctionsRealTimeImport_WriteBytesToFile::Success' has a wrong offset!");

// Function RealTimeImport.FileFunctionsRealTimeImport.WriteStringToFile
// 0x0030 (0x0030 - 0x0000)
struct FileFunctionsRealTimeImport_WriteStringToFile final
{
public:
	ERTIDirectoryType                             DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA6[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Data;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FilePath;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA7[0x7];                                      // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FileFunctionsRealTimeImport_WriteStringToFile) == 0x000008, "Wrong alignment on FileFunctionsRealTimeImport_WriteStringToFile");
static_assert(sizeof(FileFunctionsRealTimeImport_WriteStringToFile) == 0x000030, "Wrong size on FileFunctionsRealTimeImport_WriteStringToFile");
static_assert(offsetof(FileFunctionsRealTimeImport_WriteStringToFile, DirectoryType) == 0x000000, "Member 'FileFunctionsRealTimeImport_WriteStringToFile::DirectoryType' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_WriteStringToFile, Data) == 0x000008, "Member 'FileFunctionsRealTimeImport_WriteStringToFile::Data' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_WriteStringToFile, FilePath) == 0x000018, "Member 'FileFunctionsRealTimeImport_WriteStringToFile::FilePath' has a wrong offset!");
static_assert(offsetof(FileFunctionsRealTimeImport_WriteStringToFile, Success) == 0x000028, "Member 'FileFunctionsRealTimeImport_WriteStringToFile::Success' has a wrong offset!");

// Function RealTimeImport.RealTimeImportAsyncNodeLoadMesh.LoadMeshFileAsyncNode
// 0x0028 (0x0028 - 0x0000)
struct RealTimeImportAsyncNodeLoadMesh_LoadMeshFileAsyncNode final
{
public:
	ERTIMeshType                                  FileType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERTIDirectoryType                             DirectoryType;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA9[0x6];                                      // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERTICoordinateSystem                          CoordinateSystem;                                  // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoDetectionNormalMap;                            // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseSRGB;                                           // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CreateMipMaps;                                     // 0x001B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERTIERGBFormat                                RgbFormat;                                         // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FAA[0x3];                                      // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class URealTimeImportAsyncNodeLoadMesh*       ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportAsyncNodeLoadMesh_LoadMeshFileAsyncNode) == 0x000008, "Wrong alignment on RealTimeImportAsyncNodeLoadMesh_LoadMeshFileAsyncNode");
static_assert(sizeof(RealTimeImportAsyncNodeLoadMesh_LoadMeshFileAsyncNode) == 0x000028, "Wrong size on RealTimeImportAsyncNodeLoadMesh_LoadMeshFileAsyncNode");
static_assert(offsetof(RealTimeImportAsyncNodeLoadMesh_LoadMeshFileAsyncNode, FileType) == 0x000000, "Member 'RealTimeImportAsyncNodeLoadMesh_LoadMeshFileAsyncNode::FileType' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeLoadMesh_LoadMeshFileAsyncNode, DirectoryType) == 0x000001, "Member 'RealTimeImportAsyncNodeLoadMesh_LoadMeshFileAsyncNode::DirectoryType' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeLoadMesh_LoadMeshFileAsyncNode, FilePath) == 0x000008, "Member 'RealTimeImportAsyncNodeLoadMesh_LoadMeshFileAsyncNode::FilePath' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeLoadMesh_LoadMeshFileAsyncNode, CoordinateSystem) == 0x000018, "Member 'RealTimeImportAsyncNodeLoadMesh_LoadMeshFileAsyncNode::CoordinateSystem' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeLoadMesh_LoadMeshFileAsyncNode, AutoDetectionNormalMap) == 0x000019, "Member 'RealTimeImportAsyncNodeLoadMesh_LoadMeshFileAsyncNode::AutoDetectionNormalMap' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeLoadMesh_LoadMeshFileAsyncNode, UseSRGB) == 0x00001A, "Member 'RealTimeImportAsyncNodeLoadMesh_LoadMeshFileAsyncNode::UseSRGB' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeLoadMesh_LoadMeshFileAsyncNode, CreateMipMaps) == 0x00001B, "Member 'RealTimeImportAsyncNodeLoadMesh_LoadMeshFileAsyncNode::CreateMipMaps' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeLoadMesh_LoadMeshFileAsyncNode, RgbFormat) == 0x00001C, "Member 'RealTimeImportAsyncNodeLoadMesh_LoadMeshFileAsyncNode::RgbFormat' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeLoadMesh_LoadMeshFileAsyncNode, ReturnValue) == 0x000020, "Member 'RealTimeImportAsyncNodeLoadMesh_LoadMeshFileAsyncNode::ReturnValue' has a wrong offset!");

// DelegateFunction RealTimeImport.RealTimeImportAsyncNodeLoadMesh.LoadMeshCompleteDelegate__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct RealTimeImportAsyncNodeLoadMesh_LoadMeshCompleteDelegate__DelegateSignature final
{
public:
	TArray<struct FRTIModelStruct>                ModelStructs;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ErrorMessage;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportAsyncNodeLoadMesh_LoadMeshCompleteDelegate__DelegateSignature) == 0x000008, "Wrong alignment on RealTimeImportAsyncNodeLoadMesh_LoadMeshCompleteDelegate__DelegateSignature");
static_assert(sizeof(RealTimeImportAsyncNodeLoadMesh_LoadMeshCompleteDelegate__DelegateSignature) == 0x000020, "Wrong size on RealTimeImportAsyncNodeLoadMesh_LoadMeshCompleteDelegate__DelegateSignature");
static_assert(offsetof(RealTimeImportAsyncNodeLoadMesh_LoadMeshCompleteDelegate__DelegateSignature, ModelStructs) == 0x000000, "Member 'RealTimeImportAsyncNodeLoadMesh_LoadMeshCompleteDelegate__DelegateSignature::ModelStructs' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeLoadMesh_LoadMeshCompleteDelegate__DelegateSignature, ErrorMessage) == 0x000010, "Member 'RealTimeImportAsyncNodeLoadMesh_LoadMeshCompleteDelegate__DelegateSignature::ErrorMessage' has a wrong offset!");

// Function RealTimeImport.RealTimeImportAsyncNodeLoadFile.LoadFileAsyncNode
// 0x0020 (0x0020 - 0x0000)
struct RealTimeImportAsyncNodeLoadFile_LoadFileAsyncNode final
{
public:
	ERTIDirectoryType                             DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FAC[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URealTimeImportAsyncNodeLoadFile*       ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportAsyncNodeLoadFile_LoadFileAsyncNode) == 0x000008, "Wrong alignment on RealTimeImportAsyncNodeLoadFile_LoadFileAsyncNode");
static_assert(sizeof(RealTimeImportAsyncNodeLoadFile_LoadFileAsyncNode) == 0x000020, "Wrong size on RealTimeImportAsyncNodeLoadFile_LoadFileAsyncNode");
static_assert(offsetof(RealTimeImportAsyncNodeLoadFile_LoadFileAsyncNode, DirectoryType) == 0x000000, "Member 'RealTimeImportAsyncNodeLoadFile_LoadFileAsyncNode::DirectoryType' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeLoadFile_LoadFileAsyncNode, FilePath) == 0x000008, "Member 'RealTimeImportAsyncNodeLoadFile_LoadFileAsyncNode::FilePath' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeLoadFile_LoadFileAsyncNode, ReturnValue) == 0x000018, "Member 'RealTimeImportAsyncNodeLoadFile_LoadFileAsyncNode::ReturnValue' has a wrong offset!");

// DelegateFunction RealTimeImport.RealTimeImportAsyncNodeLoadFile.LoadFileCompleteDelegate__DelegateSignature
// 0x0038 (0x0038 - 0x0000)
struct RealTimeImportAsyncNodeLoadFile_LoadFileCompleteDelegate__DelegateSignature final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 bytes;                                             // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ErrorCode;                                         // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FAD[0x4];                                      // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0028(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportAsyncNodeLoadFile_LoadFileCompleteDelegate__DelegateSignature) == 0x000008, "Wrong alignment on RealTimeImportAsyncNodeLoadFile_LoadFileCompleteDelegate__DelegateSignature");
static_assert(sizeof(RealTimeImportAsyncNodeLoadFile_LoadFileCompleteDelegate__DelegateSignature) == 0x000038, "Wrong size on RealTimeImportAsyncNodeLoadFile_LoadFileCompleteDelegate__DelegateSignature");
static_assert(offsetof(RealTimeImportAsyncNodeLoadFile_LoadFileCompleteDelegate__DelegateSignature, Filename) == 0x000000, "Member 'RealTimeImportAsyncNodeLoadFile_LoadFileCompleteDelegate__DelegateSignature::Filename' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeLoadFile_LoadFileCompleteDelegate__DelegateSignature, bytes) == 0x000010, "Member 'RealTimeImportAsyncNodeLoadFile_LoadFileCompleteDelegate__DelegateSignature::bytes' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeLoadFile_LoadFileCompleteDelegate__DelegateSignature, ErrorCode) == 0x000020, "Member 'RealTimeImportAsyncNodeLoadFile_LoadFileCompleteDelegate__DelegateSignature::ErrorCode' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeLoadFile_LoadFileCompleteDelegate__DelegateSignature, ErrorMessage) == 0x000028, "Member 'RealTimeImportAsyncNodeLoadFile_LoadFileCompleteDelegate__DelegateSignature::ErrorMessage' has a wrong offset!");

// Function RealTimeImport.RealTimeImportAsyncNodeSaveFile.SaveFileAsyncNode
// 0x0038 (0x0038 - 0x0000)
struct RealTimeImportAsyncNodeSaveFile_SaveFileAsyncNode final
{
public:
	ERTIDirectoryType                             DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FAF[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 bytes;                                             // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          CreateDirectories;                                 // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverwriteFile;                                     // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FB0[0x6];                                      // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class URealTimeImportAsyncNodeSaveFile*       ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportAsyncNodeSaveFile_SaveFileAsyncNode) == 0x000008, "Wrong alignment on RealTimeImportAsyncNodeSaveFile_SaveFileAsyncNode");
static_assert(sizeof(RealTimeImportAsyncNodeSaveFile_SaveFileAsyncNode) == 0x000038, "Wrong size on RealTimeImportAsyncNodeSaveFile_SaveFileAsyncNode");
static_assert(offsetof(RealTimeImportAsyncNodeSaveFile_SaveFileAsyncNode, DirectoryType) == 0x000000, "Member 'RealTimeImportAsyncNodeSaveFile_SaveFileAsyncNode::DirectoryType' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeSaveFile_SaveFileAsyncNode, FilePath) == 0x000008, "Member 'RealTimeImportAsyncNodeSaveFile_SaveFileAsyncNode::FilePath' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeSaveFile_SaveFileAsyncNode, bytes) == 0x000018, "Member 'RealTimeImportAsyncNodeSaveFile_SaveFileAsyncNode::bytes' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeSaveFile_SaveFileAsyncNode, CreateDirectories) == 0x000028, "Member 'RealTimeImportAsyncNodeSaveFile_SaveFileAsyncNode::CreateDirectories' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeSaveFile_SaveFileAsyncNode, OverwriteFile) == 0x000029, "Member 'RealTimeImportAsyncNodeSaveFile_SaveFileAsyncNode::OverwriteFile' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeSaveFile_SaveFileAsyncNode, ReturnValue) == 0x000030, "Member 'RealTimeImportAsyncNodeSaveFile_SaveFileAsyncNode::ReturnValue' has a wrong offset!");

// DelegateFunction RealTimeImport.RealTimeImportAsyncNodeSaveFile.SaveFileCompleteDelegate__DelegateSignature
// 0x0038 (0x0038 - 0x0000)
struct RealTimeImportAsyncNodeSaveFile_SaveFileCompleteDelegate__DelegateSignature final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FullPath;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ErrorCode;                                         // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FB1[0x4];                                      // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0028(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportAsyncNodeSaveFile_SaveFileCompleteDelegate__DelegateSignature) == 0x000008, "Wrong alignment on RealTimeImportAsyncNodeSaveFile_SaveFileCompleteDelegate__DelegateSignature");
static_assert(sizeof(RealTimeImportAsyncNodeSaveFile_SaveFileCompleteDelegate__DelegateSignature) == 0x000038, "Wrong size on RealTimeImportAsyncNodeSaveFile_SaveFileCompleteDelegate__DelegateSignature");
static_assert(offsetof(RealTimeImportAsyncNodeSaveFile_SaveFileCompleteDelegate__DelegateSignature, Filename) == 0x000000, "Member 'RealTimeImportAsyncNodeSaveFile_SaveFileCompleteDelegate__DelegateSignature::Filename' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeSaveFile_SaveFileCompleteDelegate__DelegateSignature, FullPath) == 0x000010, "Member 'RealTimeImportAsyncNodeSaveFile_SaveFileCompleteDelegate__DelegateSignature::FullPath' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeSaveFile_SaveFileCompleteDelegate__DelegateSignature, ErrorCode) == 0x000020, "Member 'RealTimeImportAsyncNodeSaveFile_SaveFileCompleteDelegate__DelegateSignature::ErrorCode' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeSaveFile_SaveFileCompleteDelegate__DelegateSignature, ErrorMessage) == 0x000028, "Member 'RealTimeImportAsyncNodeSaveFile_SaveFileCompleteDelegate__DelegateSignature::ErrorMessage' has a wrong offset!");

// Function RealTimeImport.RealTimeImportAsyncNodeLoadAllFilesFromDirectory.LoadAllFilesFromDirectoryAsyncNode
// 0x0028 (0x0028 - 0x0000)
struct RealTimeImportAsyncNodeLoadAllFilesFromDirectory_LoadAllFilesFromDirectoryAsyncNode final
{
public:
	ERTIDirectoryType                             DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERTIFileType                                  FileType;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FB3[0x6];                                      // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DirPath;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RecursiveSearch;                                   // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FB4[0x7];                                      // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URealTimeImportAsyncNodeLoadAllFilesFromDirectory* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportAsyncNodeLoadAllFilesFromDirectory_LoadAllFilesFromDirectoryAsyncNode) == 0x000008, "Wrong alignment on RealTimeImportAsyncNodeLoadAllFilesFromDirectory_LoadAllFilesFromDirectoryAsyncNode");
static_assert(sizeof(RealTimeImportAsyncNodeLoadAllFilesFromDirectory_LoadAllFilesFromDirectoryAsyncNode) == 0x000028, "Wrong size on RealTimeImportAsyncNodeLoadAllFilesFromDirectory_LoadAllFilesFromDirectoryAsyncNode");
static_assert(offsetof(RealTimeImportAsyncNodeLoadAllFilesFromDirectory_LoadAllFilesFromDirectoryAsyncNode, DirectoryType) == 0x000000, "Member 'RealTimeImportAsyncNodeLoadAllFilesFromDirectory_LoadAllFilesFromDirectoryAsyncNode::DirectoryType' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeLoadAllFilesFromDirectory_LoadAllFilesFromDirectoryAsyncNode, FileType) == 0x000001, "Member 'RealTimeImportAsyncNodeLoadAllFilesFromDirectory_LoadAllFilesFromDirectoryAsyncNode::FileType' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeLoadAllFilesFromDirectory_LoadAllFilesFromDirectoryAsyncNode, DirPath) == 0x000008, "Member 'RealTimeImportAsyncNodeLoadAllFilesFromDirectory_LoadAllFilesFromDirectoryAsyncNode::DirPath' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeLoadAllFilesFromDirectory_LoadAllFilesFromDirectoryAsyncNode, RecursiveSearch) == 0x000018, "Member 'RealTimeImportAsyncNodeLoadAllFilesFromDirectory_LoadAllFilesFromDirectoryAsyncNode::RecursiveSearch' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeLoadAllFilesFromDirectory_LoadAllFilesFromDirectoryAsyncNode, ReturnValue) == 0x000020, "Member 'RealTimeImportAsyncNodeLoadAllFilesFromDirectory_LoadAllFilesFromDirectoryAsyncNode::ReturnValue' has a wrong offset!");

// DelegateFunction RealTimeImport.RealTimeImportAsyncNodeLoadAllFilesFromDirectory.LoadAllFilesFromDirectoryCompleteDelegate__DelegateSignature
// 0x0028 (0x0028 - 0x0000)
struct RealTimeImportAsyncNodeLoadAllFilesFromDirectory_LoadAllFilesFromDirectoryCompleteDelegate__DelegateSignature final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FB5[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Files;                                             // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         FilePaths;                                         // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportAsyncNodeLoadAllFilesFromDirectory_LoadAllFilesFromDirectoryCompleteDelegate__DelegateSignature) == 0x000008, "Wrong alignment on RealTimeImportAsyncNodeLoadAllFilesFromDirectory_LoadAllFilesFromDirectoryCompleteDelegate__DelegateSignature");
static_assert(sizeof(RealTimeImportAsyncNodeLoadAllFilesFromDirectory_LoadAllFilesFromDirectoryCompleteDelegate__DelegateSignature) == 0x000028, "Wrong size on RealTimeImportAsyncNodeLoadAllFilesFromDirectory_LoadAllFilesFromDirectoryCompleteDelegate__DelegateSignature");
static_assert(offsetof(RealTimeImportAsyncNodeLoadAllFilesFromDirectory_LoadAllFilesFromDirectoryCompleteDelegate__DelegateSignature, Count) == 0x000000, "Member 'RealTimeImportAsyncNodeLoadAllFilesFromDirectory_LoadAllFilesFromDirectoryCompleteDelegate__DelegateSignature::Count' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeLoadAllFilesFromDirectory_LoadAllFilesFromDirectoryCompleteDelegate__DelegateSignature, Files) == 0x000008, "Member 'RealTimeImportAsyncNodeLoadAllFilesFromDirectory_LoadAllFilesFromDirectoryCompleteDelegate__DelegateSignature::Files' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeLoadAllFilesFromDirectory_LoadAllFilesFromDirectoryCompleteDelegate__DelegateSignature, FilePaths) == 0x000018, "Member 'RealTimeImportAsyncNodeLoadAllFilesFromDirectory_LoadAllFilesFromDirectoryCompleteDelegate__DelegateSignature::FilePaths' has a wrong offset!");

// Function RealTimeImport.RealTimeImportAsyncNodeCreateSoundWaveFromFile.CreateSoundWaveFromFileAsyncNode
// 0x0028 (0x0028 - 0x0000)
struct RealTimeImportAsyncNodeCreateSoundWaveFromFile_CreateSoundWaveFromFileAsyncNode final
{
public:
	ERTIDirectoryType                             DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FB7[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxFileSize;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERTISoundFileType                             SoundFileType;                                     // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FB8[0x3];                                      // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class URealTimeImportAsyncNodeCreateSoundWaveFromFile* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportAsyncNodeCreateSoundWaveFromFile_CreateSoundWaveFromFileAsyncNode) == 0x000008, "Wrong alignment on RealTimeImportAsyncNodeCreateSoundWaveFromFile_CreateSoundWaveFromFileAsyncNode");
static_assert(sizeof(RealTimeImportAsyncNodeCreateSoundWaveFromFile_CreateSoundWaveFromFileAsyncNode) == 0x000028, "Wrong size on RealTimeImportAsyncNodeCreateSoundWaveFromFile_CreateSoundWaveFromFileAsyncNode");
static_assert(offsetof(RealTimeImportAsyncNodeCreateSoundWaveFromFile_CreateSoundWaveFromFileAsyncNode, DirectoryType) == 0x000000, "Member 'RealTimeImportAsyncNodeCreateSoundWaveFromFile_CreateSoundWaveFromFileAsyncNode::DirectoryType' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeCreateSoundWaveFromFile_CreateSoundWaveFromFileAsyncNode, FilePath) == 0x000008, "Member 'RealTimeImportAsyncNodeCreateSoundWaveFromFile_CreateSoundWaveFromFileAsyncNode::FilePath' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeCreateSoundWaveFromFile_CreateSoundWaveFromFileAsyncNode, MaxFileSize) == 0x000018, "Member 'RealTimeImportAsyncNodeCreateSoundWaveFromFile_CreateSoundWaveFromFileAsyncNode::MaxFileSize' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeCreateSoundWaveFromFile_CreateSoundWaveFromFileAsyncNode, SoundFileType) == 0x00001C, "Member 'RealTimeImportAsyncNodeCreateSoundWaveFromFile_CreateSoundWaveFromFileAsyncNode::SoundFileType' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeCreateSoundWaveFromFile_CreateSoundWaveFromFileAsyncNode, ReturnValue) == 0x000020, "Member 'RealTimeImportAsyncNodeCreateSoundWaveFromFile_CreateSoundWaveFromFileAsyncNode::ReturnValue' has a wrong offset!");

// DelegateFunction RealTimeImport.RealTimeImportAsyncNodeCreateSoundWaveFromFile.CreateSoundWaveFromFileCompleteDelegate__DelegateSignature
// 0x0040 (0x0040 - 0x0000)
struct RealTimeImportAsyncNodeCreateSoundWaveFromFile_CreateSoundWaveFromFileCompleteDelegate__DelegateSignature final
{
public:
	class FString                                 FileID;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USoundWaveProcedural*             SoundWave;                                         // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0018(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ErrorCode;                                         // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FB9[0x4];                                      // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0030(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportAsyncNodeCreateSoundWaveFromFile_CreateSoundWaveFromFileCompleteDelegate__DelegateSignature) == 0x000008, "Wrong alignment on RealTimeImportAsyncNodeCreateSoundWaveFromFile_CreateSoundWaveFromFileCompleteDelegate__DelegateSignature");
static_assert(sizeof(RealTimeImportAsyncNodeCreateSoundWaveFromFile_CreateSoundWaveFromFileCompleteDelegate__DelegateSignature) == 0x000040, "Wrong size on RealTimeImportAsyncNodeCreateSoundWaveFromFile_CreateSoundWaveFromFileCompleteDelegate__DelegateSignature");
static_assert(offsetof(RealTimeImportAsyncNodeCreateSoundWaveFromFile_CreateSoundWaveFromFileCompleteDelegate__DelegateSignature, FileID) == 0x000000, "Member 'RealTimeImportAsyncNodeCreateSoundWaveFromFile_CreateSoundWaveFromFileCompleteDelegate__DelegateSignature::FileID' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeCreateSoundWaveFromFile_CreateSoundWaveFromFileCompleteDelegate__DelegateSignature, SoundWave) == 0x000010, "Member 'RealTimeImportAsyncNodeCreateSoundWaveFromFile_CreateSoundWaveFromFileCompleteDelegate__DelegateSignature::SoundWave' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeCreateSoundWaveFromFile_CreateSoundWaveFromFileCompleteDelegate__DelegateSignature, Filename) == 0x000018, "Member 'RealTimeImportAsyncNodeCreateSoundWaveFromFile_CreateSoundWaveFromFileCompleteDelegate__DelegateSignature::Filename' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeCreateSoundWaveFromFile_CreateSoundWaveFromFileCompleteDelegate__DelegateSignature, ErrorCode) == 0x000028, "Member 'RealTimeImportAsyncNodeCreateSoundWaveFromFile_CreateSoundWaveFromFileCompleteDelegate__DelegateSignature::ErrorCode' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeCreateSoundWaveFromFile_CreateSoundWaveFromFileCompleteDelegate__DelegateSignature, ErrorMessage) == 0x000030, "Member 'RealTimeImportAsyncNodeCreateSoundWaveFromFile_CreateSoundWaveFromFileCompleteDelegate__DelegateSignature::ErrorMessage' has a wrong offset!");

// Function RealTimeImport.RealTimeImportAsyncNodeCreateSoundWaveFromBytes.CreateSoundWaveFromBytesAsyncNode
// 0x0030 (0x0030 - 0x0000)
struct RealTimeImportAsyncNodeCreateSoundWaveFromBytes_CreateSoundWaveFromBytesAsyncNode final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 bytes;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         MaxFileSize;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERTISoundFileType                             SoundFileType;                                     // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FBB[0x3];                                      // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class URealTimeImportAsyncNodeCreateSoundWaveFromBytes* ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportAsyncNodeCreateSoundWaveFromBytes_CreateSoundWaveFromBytesAsyncNode) == 0x000008, "Wrong alignment on RealTimeImportAsyncNodeCreateSoundWaveFromBytes_CreateSoundWaveFromBytesAsyncNode");
static_assert(sizeof(RealTimeImportAsyncNodeCreateSoundWaveFromBytes_CreateSoundWaveFromBytesAsyncNode) == 0x000030, "Wrong size on RealTimeImportAsyncNodeCreateSoundWaveFromBytes_CreateSoundWaveFromBytesAsyncNode");
static_assert(offsetof(RealTimeImportAsyncNodeCreateSoundWaveFromBytes_CreateSoundWaveFromBytesAsyncNode, Param_Name) == 0x000000, "Member 'RealTimeImportAsyncNodeCreateSoundWaveFromBytes_CreateSoundWaveFromBytesAsyncNode::Param_Name' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeCreateSoundWaveFromBytes_CreateSoundWaveFromBytesAsyncNode, bytes) == 0x000010, "Member 'RealTimeImportAsyncNodeCreateSoundWaveFromBytes_CreateSoundWaveFromBytesAsyncNode::bytes' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeCreateSoundWaveFromBytes_CreateSoundWaveFromBytesAsyncNode, MaxFileSize) == 0x000020, "Member 'RealTimeImportAsyncNodeCreateSoundWaveFromBytes_CreateSoundWaveFromBytesAsyncNode::MaxFileSize' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeCreateSoundWaveFromBytes_CreateSoundWaveFromBytesAsyncNode, SoundFileType) == 0x000024, "Member 'RealTimeImportAsyncNodeCreateSoundWaveFromBytes_CreateSoundWaveFromBytesAsyncNode::SoundFileType' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeCreateSoundWaveFromBytes_CreateSoundWaveFromBytesAsyncNode, ReturnValue) == 0x000028, "Member 'RealTimeImportAsyncNodeCreateSoundWaveFromBytes_CreateSoundWaveFromBytesAsyncNode::ReturnValue' has a wrong offset!");

// DelegateFunction RealTimeImport.RealTimeImportAsyncNodeCreateSoundWaveFromBytes.CreateSoundWaveFromBytesCompleteDelegate__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct RealTimeImportAsyncNodeCreateSoundWaveFromBytes_CreateSoundWaveFromBytesCompleteDelegate__DelegateSignature final
{
public:
	const class USoundWaveProcedural*             SoundWave;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ErrorCode;                                         // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FBC[0x4];                                      // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportAsyncNodeCreateSoundWaveFromBytes_CreateSoundWaveFromBytesCompleteDelegate__DelegateSignature) == 0x000008, "Wrong alignment on RealTimeImportAsyncNodeCreateSoundWaveFromBytes_CreateSoundWaveFromBytesCompleteDelegate__DelegateSignature");
static_assert(sizeof(RealTimeImportAsyncNodeCreateSoundWaveFromBytes_CreateSoundWaveFromBytesCompleteDelegate__DelegateSignature) == 0x000020, "Wrong size on RealTimeImportAsyncNodeCreateSoundWaveFromBytes_CreateSoundWaveFromBytesCompleteDelegate__DelegateSignature");
static_assert(offsetof(RealTimeImportAsyncNodeCreateSoundWaveFromBytes_CreateSoundWaveFromBytesCompleteDelegate__DelegateSignature, SoundWave) == 0x000000, "Member 'RealTimeImportAsyncNodeCreateSoundWaveFromBytes_CreateSoundWaveFromBytesCompleteDelegate__DelegateSignature::SoundWave' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeCreateSoundWaveFromBytes_CreateSoundWaveFromBytesCompleteDelegate__DelegateSignature, ErrorCode) == 0x000008, "Member 'RealTimeImportAsyncNodeCreateSoundWaveFromBytes_CreateSoundWaveFromBytesCompleteDelegate__DelegateSignature::ErrorCode' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeCreateSoundWaveFromBytes_CreateSoundWaveFromBytesCompleteDelegate__DelegateSignature, ErrorMessage) == 0x000010, "Member 'RealTimeImportAsyncNodeCreateSoundWaveFromBytes_CreateSoundWaveFromBytesCompleteDelegate__DelegateSignature::ErrorMessage' has a wrong offset!");

// Function RealTimeImport.RealTimeImportAsyncNodeLoadImageFile.LoadImageFileAsyncNode
// 0x0028 (0x0028 - 0x0000)
struct RealTimeImportAsyncNodeLoadImageFile_LoadImageFileAsyncNode final
{
public:
	ERTIDirectoryType                             DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FBE[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureCompressionSettings                   CompressionSettings;                               // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SRGB;                                              // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CreateMipMaps;                                     // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERTIERGBFormat                                RgbFormat;                                         // 0x001B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FBF[0x4];                                      // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URealTimeImportAsyncNodeLoadImageFile*  ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportAsyncNodeLoadImageFile_LoadImageFileAsyncNode) == 0x000008, "Wrong alignment on RealTimeImportAsyncNodeLoadImageFile_LoadImageFileAsyncNode");
static_assert(sizeof(RealTimeImportAsyncNodeLoadImageFile_LoadImageFileAsyncNode) == 0x000028, "Wrong size on RealTimeImportAsyncNodeLoadImageFile_LoadImageFileAsyncNode");
static_assert(offsetof(RealTimeImportAsyncNodeLoadImageFile_LoadImageFileAsyncNode, DirectoryType) == 0x000000, "Member 'RealTimeImportAsyncNodeLoadImageFile_LoadImageFileAsyncNode::DirectoryType' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeLoadImageFile_LoadImageFileAsyncNode, FilePath) == 0x000008, "Member 'RealTimeImportAsyncNodeLoadImageFile_LoadImageFileAsyncNode::FilePath' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeLoadImageFile_LoadImageFileAsyncNode, CompressionSettings) == 0x000018, "Member 'RealTimeImportAsyncNodeLoadImageFile_LoadImageFileAsyncNode::CompressionSettings' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeLoadImageFile_LoadImageFileAsyncNode, SRGB) == 0x000019, "Member 'RealTimeImportAsyncNodeLoadImageFile_LoadImageFileAsyncNode::SRGB' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeLoadImageFile_LoadImageFileAsyncNode, CreateMipMaps) == 0x00001A, "Member 'RealTimeImportAsyncNodeLoadImageFile_LoadImageFileAsyncNode::CreateMipMaps' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeLoadImageFile_LoadImageFileAsyncNode, RgbFormat) == 0x00001B, "Member 'RealTimeImportAsyncNodeLoadImageFile_LoadImageFileAsyncNode::RgbFormat' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeLoadImageFile_LoadImageFileAsyncNode, ReturnValue) == 0x000020, "Member 'RealTimeImportAsyncNodeLoadImageFile_LoadImageFileAsyncNode::ReturnValue' has a wrong offset!");

// DelegateFunction RealTimeImport.RealTimeImportAsyncNodeLoadImageFile.LoadImageFromFileCompleteDelegate__DelegateSignature
// 0x0030 (0x0030 - 0x0000)
struct RealTimeImportAsyncNodeLoadImageFile_LoadImageFromFileCompleteDelegate__DelegateSignature final
{
public:
	const class UTexture2D*                       Texture;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ErrorCode;                                         // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC0[0x4];                                      // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0020(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportAsyncNodeLoadImageFile_LoadImageFromFileCompleteDelegate__DelegateSignature) == 0x000008, "Wrong alignment on RealTimeImportAsyncNodeLoadImageFile_LoadImageFromFileCompleteDelegate__DelegateSignature");
static_assert(sizeof(RealTimeImportAsyncNodeLoadImageFile_LoadImageFromFileCompleteDelegate__DelegateSignature) == 0x000030, "Wrong size on RealTimeImportAsyncNodeLoadImageFile_LoadImageFromFileCompleteDelegate__DelegateSignature");
static_assert(offsetof(RealTimeImportAsyncNodeLoadImageFile_LoadImageFromFileCompleteDelegate__DelegateSignature, Texture) == 0x000000, "Member 'RealTimeImportAsyncNodeLoadImageFile_LoadImageFromFileCompleteDelegate__DelegateSignature::Texture' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeLoadImageFile_LoadImageFromFileCompleteDelegate__DelegateSignature, Filename) == 0x000008, "Member 'RealTimeImportAsyncNodeLoadImageFile_LoadImageFromFileCompleteDelegate__DelegateSignature::Filename' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeLoadImageFile_LoadImageFromFileCompleteDelegate__DelegateSignature, ErrorCode) == 0x000018, "Member 'RealTimeImportAsyncNodeLoadImageFile_LoadImageFromFileCompleteDelegate__DelegateSignature::ErrorCode' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeLoadImageFile_LoadImageFromFileCompleteDelegate__DelegateSignature, ErrorMessage) == 0x000020, "Member 'RealTimeImportAsyncNodeLoadImageFile_LoadImageFromFileCompleteDelegate__DelegateSignature::ErrorMessage' has a wrong offset!");

// Function RealTimeImport.RealTimeImportAsyncNodeLoadImageBytes.LoadImageBytesAsyncNode
// 0x0030 (0x0030 - 0x0000)
struct RealTimeImportAsyncNodeLoadImageBytes_LoadImageBytesAsyncNode final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 bytes;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	ETextureCompressionSettings                   CompressionSettings;                               // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SRGB;                                              // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CreateMipMaps;                                     // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERTIERGBFormat                                RgbFormat;                                         // 0x0023(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC2[0x4];                                      // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URealTimeImportAsyncNodeLoadImageBytes* ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportAsyncNodeLoadImageBytes_LoadImageBytesAsyncNode) == 0x000008, "Wrong alignment on RealTimeImportAsyncNodeLoadImageBytes_LoadImageBytesAsyncNode");
static_assert(sizeof(RealTimeImportAsyncNodeLoadImageBytes_LoadImageBytesAsyncNode) == 0x000030, "Wrong size on RealTimeImportAsyncNodeLoadImageBytes_LoadImageBytesAsyncNode");
static_assert(offsetof(RealTimeImportAsyncNodeLoadImageBytes_LoadImageBytesAsyncNode, Param_Name) == 0x000000, "Member 'RealTimeImportAsyncNodeLoadImageBytes_LoadImageBytesAsyncNode::Param_Name' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeLoadImageBytes_LoadImageBytesAsyncNode, bytes) == 0x000010, "Member 'RealTimeImportAsyncNodeLoadImageBytes_LoadImageBytesAsyncNode::bytes' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeLoadImageBytes_LoadImageBytesAsyncNode, CompressionSettings) == 0x000020, "Member 'RealTimeImportAsyncNodeLoadImageBytes_LoadImageBytesAsyncNode::CompressionSettings' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeLoadImageBytes_LoadImageBytesAsyncNode, SRGB) == 0x000021, "Member 'RealTimeImportAsyncNodeLoadImageBytes_LoadImageBytesAsyncNode::SRGB' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeLoadImageBytes_LoadImageBytesAsyncNode, CreateMipMaps) == 0x000022, "Member 'RealTimeImportAsyncNodeLoadImageBytes_LoadImageBytesAsyncNode::CreateMipMaps' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeLoadImageBytes_LoadImageBytesAsyncNode, RgbFormat) == 0x000023, "Member 'RealTimeImportAsyncNodeLoadImageBytes_LoadImageBytesAsyncNode::RgbFormat' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeLoadImageBytes_LoadImageBytesAsyncNode, ReturnValue) == 0x000028, "Member 'RealTimeImportAsyncNodeLoadImageBytes_LoadImageBytesAsyncNode::ReturnValue' has a wrong offset!");

// DelegateFunction RealTimeImport.RealTimeImportAsyncNodeLoadImageBytes.LoadImageFromBytesCompleteDelegate__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct RealTimeImportAsyncNodeLoadImageBytes_LoadImageFromBytesCompleteDelegate__DelegateSignature final
{
public:
	const class UTexture2D*                       Texture;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ErrorCode;                                         // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC3[0x4];                                      // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportAsyncNodeLoadImageBytes_LoadImageFromBytesCompleteDelegate__DelegateSignature) == 0x000008, "Wrong alignment on RealTimeImportAsyncNodeLoadImageBytes_LoadImageFromBytesCompleteDelegate__DelegateSignature");
static_assert(sizeof(RealTimeImportAsyncNodeLoadImageBytes_LoadImageFromBytesCompleteDelegate__DelegateSignature) == 0x000020, "Wrong size on RealTimeImportAsyncNodeLoadImageBytes_LoadImageFromBytesCompleteDelegate__DelegateSignature");
static_assert(offsetof(RealTimeImportAsyncNodeLoadImageBytes_LoadImageFromBytesCompleteDelegate__DelegateSignature, Texture) == 0x000000, "Member 'RealTimeImportAsyncNodeLoadImageBytes_LoadImageFromBytesCompleteDelegate__DelegateSignature::Texture' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeLoadImageBytes_LoadImageFromBytesCompleteDelegate__DelegateSignature, ErrorCode) == 0x000008, "Member 'RealTimeImportAsyncNodeLoadImageBytes_LoadImageFromBytesCompleteDelegate__DelegateSignature::ErrorCode' has a wrong offset!");
static_assert(offsetof(RealTimeImportAsyncNodeLoadImageBytes_LoadImageFromBytesCompleteDelegate__DelegateSignature, ErrorMessage) == 0x000010, "Member 'RealTimeImportAsyncNodeLoadImageBytes_LoadImageFromBytesCompleteDelegate__DelegateSignature::ErrorMessage' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.breakMaterialStruct
// 0x00F8 (0x00F8 - 0x0000)
struct RealTimeImportBPLibrary_breakMaterialStruct final
{
public:
	struct FRTIMaterialStruct                     MaterialData;                                      // 0x0000(0x00A8)(Parm, NativeAccessSpecifierPublic)
	bool                                          HasTexture;                                        // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC5[0x7];                                      // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MaterialName;                                      // 0x00B0(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TextureName;                                       // 0x00C0(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRTITextureStruct>              Textures;                                          // 0x00D0(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FColor                                 Ambient;                                           // 0x00E0(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Diffuse;                                           // 0x00E4(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Specular;                                          // 0x00E8(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpecularExponent;                                  // 0x00EC(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dissolved;                                         // 0x00F0(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DissolvedInverted;                                 // 0x00F4(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportBPLibrary_breakMaterialStruct) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_breakMaterialStruct");
static_assert(sizeof(RealTimeImportBPLibrary_breakMaterialStruct) == 0x0000F8, "Wrong size on RealTimeImportBPLibrary_breakMaterialStruct");
static_assert(offsetof(RealTimeImportBPLibrary_breakMaterialStruct, MaterialData) == 0x000000, "Member 'RealTimeImportBPLibrary_breakMaterialStruct::MaterialData' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_breakMaterialStruct, HasTexture) == 0x0000A8, "Member 'RealTimeImportBPLibrary_breakMaterialStruct::HasTexture' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_breakMaterialStruct, MaterialName) == 0x0000B0, "Member 'RealTimeImportBPLibrary_breakMaterialStruct::MaterialName' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_breakMaterialStruct, TextureName) == 0x0000C0, "Member 'RealTimeImportBPLibrary_breakMaterialStruct::TextureName' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_breakMaterialStruct, Textures) == 0x0000D0, "Member 'RealTimeImportBPLibrary_breakMaterialStruct::Textures' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_breakMaterialStruct, Ambient) == 0x0000E0, "Member 'RealTimeImportBPLibrary_breakMaterialStruct::Ambient' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_breakMaterialStruct, Diffuse) == 0x0000E4, "Member 'RealTimeImportBPLibrary_breakMaterialStruct::Diffuse' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_breakMaterialStruct, Specular) == 0x0000E8, "Member 'RealTimeImportBPLibrary_breakMaterialStruct::Specular' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_breakMaterialStruct, SpecularExponent) == 0x0000EC, "Member 'RealTimeImportBPLibrary_breakMaterialStruct::SpecularExponent' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_breakMaterialStruct, Dissolved) == 0x0000F0, "Member 'RealTimeImportBPLibrary_breakMaterialStruct::Dissolved' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_breakMaterialStruct, DissolvedInverted) == 0x0000F4, "Member 'RealTimeImportBPLibrary_breakMaterialStruct::DissolvedInverted' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.breakMeshStruct
// 0x0220 (0x0220 - 0x0000)
struct RealTimeImportBPLibrary_breakMeshStruct final
{
public:
	struct FRTIMeshStruct                         MeshStruct;                                        // 0x0000(0x0118)(Parm, NativeAccessSpecifierPublic)
	class FString                                 GeometryName;                                      // 0x0118(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        Vertices;                                          // 0x0128(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Triangles;                                         // 0x0138(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        Normals;                                           // 0x0148(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      UV0;                                               // 0x0158(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                   VertexColors;                                      // 0x0168(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FRTIMaterialStruct                     MaterialStruct;                                    // 0x0178(0x00A8)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportBPLibrary_breakMeshStruct) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_breakMeshStruct");
static_assert(sizeof(RealTimeImportBPLibrary_breakMeshStruct) == 0x000220, "Wrong size on RealTimeImportBPLibrary_breakMeshStruct");
static_assert(offsetof(RealTimeImportBPLibrary_breakMeshStruct, MeshStruct) == 0x000000, "Member 'RealTimeImportBPLibrary_breakMeshStruct::MeshStruct' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_breakMeshStruct, GeometryName) == 0x000118, "Member 'RealTimeImportBPLibrary_breakMeshStruct::GeometryName' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_breakMeshStruct, Vertices) == 0x000128, "Member 'RealTimeImportBPLibrary_breakMeshStruct::Vertices' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_breakMeshStruct, Triangles) == 0x000138, "Member 'RealTimeImportBPLibrary_breakMeshStruct::Triangles' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_breakMeshStruct, Normals) == 0x000148, "Member 'RealTimeImportBPLibrary_breakMeshStruct::Normals' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_breakMeshStruct, UV0) == 0x000158, "Member 'RealTimeImportBPLibrary_breakMeshStruct::UV0' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_breakMeshStruct, VertexColors) == 0x000168, "Member 'RealTimeImportBPLibrary_breakMeshStruct::VertexColors' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_breakMeshStruct, MaterialStruct) == 0x000178, "Member 'RealTimeImportBPLibrary_breakMeshStruct::MaterialStruct' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.breakModelStruct
// 0x00A0 (0x00A0 - 0x0000)
struct RealTimeImportBPLibrary_breakModelStruct final
{
public:
	struct FRTIModelStruct                        ModelStruct;                                       // 0x0000(0x0050)(Parm, NativeAccessSpecifierPublic)
	class FString                                 Param_Name;                                        // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             RelativeTransform;                                 // 0x0060(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FRTIMeshStruct>                 MeshStructs;                                       // 0x0090(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportBPLibrary_breakModelStruct) == 0x000010, "Wrong alignment on RealTimeImportBPLibrary_breakModelStruct");
static_assert(sizeof(RealTimeImportBPLibrary_breakModelStruct) == 0x0000A0, "Wrong size on RealTimeImportBPLibrary_breakModelStruct");
static_assert(offsetof(RealTimeImportBPLibrary_breakModelStruct, ModelStruct) == 0x000000, "Member 'RealTimeImportBPLibrary_breakModelStruct::ModelStruct' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_breakModelStruct, Param_Name) == 0x000050, "Member 'RealTimeImportBPLibrary_breakModelStruct::Param_Name' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_breakModelStruct, RelativeTransform) == 0x000060, "Member 'RealTimeImportBPLibrary_breakModelStruct::RelativeTransform' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_breakModelStruct, MeshStructs) == 0x000090, "Member 'RealTimeImportBPLibrary_breakModelStruct::MeshStructs' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.breakTextureStruct
// 0x0048 (0x0048 - 0x0000)
struct RealTimeImportBPLibrary_breakTextureStruct final
{
public:
	struct FRTITextureStruct                      TextureData;                                       // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
	class FString                                 TextureName;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Texture;                                           // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERTITextureType                               TextureType;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC6[0x7];                                      // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RealTimeImportBPLibrary_breakTextureStruct) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_breakTextureStruct");
static_assert(sizeof(RealTimeImportBPLibrary_breakTextureStruct) == 0x000048, "Wrong size on RealTimeImportBPLibrary_breakTextureStruct");
static_assert(offsetof(RealTimeImportBPLibrary_breakTextureStruct, TextureData) == 0x000000, "Member 'RealTimeImportBPLibrary_breakTextureStruct::TextureData' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_breakTextureStruct, TextureName) == 0x000028, "Member 'RealTimeImportBPLibrary_breakTextureStruct::TextureName' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_breakTextureStruct, Texture) == 0x000038, "Member 'RealTimeImportBPLibrary_breakTextureStruct::Texture' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_breakTextureStruct, TextureType) == 0x000040, "Member 'RealTimeImportBPLibrary_breakTextureStruct::TextureType' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.changeTexturDestroyThreadSettings
// 0x0008 (0x0008 - 0x0000)
struct RealTimeImportBPLibrary_ChangeTexturDestroyThreadSettings final
{
public:
	float                                         ThreadSleepTimeInSeconds;                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowLogs;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC7[0x3];                                      // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RealTimeImportBPLibrary_ChangeTexturDestroyThreadSettings) == 0x000004, "Wrong alignment on RealTimeImportBPLibrary_ChangeTexturDestroyThreadSettings");
static_assert(sizeof(RealTimeImportBPLibrary_ChangeTexturDestroyThreadSettings) == 0x000008, "Wrong size on RealTimeImportBPLibrary_ChangeTexturDestroyThreadSettings");
static_assert(offsetof(RealTimeImportBPLibrary_ChangeTexturDestroyThreadSettings, ThreadSleepTimeInSeconds) == 0x000000, "Member 'RealTimeImportBPLibrary_ChangeTexturDestroyThreadSettings::ThreadSleepTimeInSeconds' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_ChangeTexturDestroyThreadSettings, ShowLogs) == 0x000004, "Member 'RealTimeImportBPLibrary_ChangeTexturDestroyThreadSettings::ShowLogs' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.changeVolumeSound
// 0x0018 (0x0018 - 0x0000)
struct RealTimeImportBPLibrary_ChangeVolumeSound final
{
public:
	class FString                                 FileID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC8[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RealTimeImportBPLibrary_ChangeVolumeSound) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_ChangeVolumeSound");
static_assert(sizeof(RealTimeImportBPLibrary_ChangeVolumeSound) == 0x000018, "Wrong size on RealTimeImportBPLibrary_ChangeVolumeSound");
static_assert(offsetof(RealTimeImportBPLibrary_ChangeVolumeSound, FileID) == 0x000000, "Member 'RealTimeImportBPLibrary_ChangeVolumeSound::FileID' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_ChangeVolumeSound, VolumeMultiplier) == 0x000010, "Member 'RealTimeImportBPLibrary_ChangeVolumeSound::VolumeMultiplier' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.CreateSoundWaveFromBytes
// 0x0048 (0x0048 - 0x0000)
struct RealTimeImportBPLibrary_CreateSoundWaveFromBytes final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 bytes;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         MaxFileSize;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERTISoundFileType                             SoundFileType;                                     // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC9[0x3];                                      // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundWaveProcedural*                   Sound;                                             // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ErrorCode;                                         // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FCA[0x4];                                      // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportBPLibrary_CreateSoundWaveFromBytes) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_CreateSoundWaveFromBytes");
static_assert(sizeof(RealTimeImportBPLibrary_CreateSoundWaveFromBytes) == 0x000048, "Wrong size on RealTimeImportBPLibrary_CreateSoundWaveFromBytes");
static_assert(offsetof(RealTimeImportBPLibrary_CreateSoundWaveFromBytes, Param_Name) == 0x000000, "Member 'RealTimeImportBPLibrary_CreateSoundWaveFromBytes::Param_Name' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_CreateSoundWaveFromBytes, bytes) == 0x000010, "Member 'RealTimeImportBPLibrary_CreateSoundWaveFromBytes::bytes' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_CreateSoundWaveFromBytes, MaxFileSize) == 0x000020, "Member 'RealTimeImportBPLibrary_CreateSoundWaveFromBytes::MaxFileSize' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_CreateSoundWaveFromBytes, SoundFileType) == 0x000024, "Member 'RealTimeImportBPLibrary_CreateSoundWaveFromBytes::SoundFileType' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_CreateSoundWaveFromBytes, Sound) == 0x000028, "Member 'RealTimeImportBPLibrary_CreateSoundWaveFromBytes::Sound' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_CreateSoundWaveFromBytes, ErrorCode) == 0x000030, "Member 'RealTimeImportBPLibrary_CreateSoundWaveFromBytes::ErrorCode' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_CreateSoundWaveFromBytes, ErrorMessage) == 0x000038, "Member 'RealTimeImportBPLibrary_CreateSoundWaveFromBytes::ErrorMessage' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.CreateSoundWaveFromBytesAsync
// 0x0040 (0x0040 - 0x0000)
struct RealTimeImportBPLibrary_CreateSoundWaveFromBytesAsync final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 bytes;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         MaxFileSize;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERTISoundFileType                             SoundFileType;                                     // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FCB[0x3];                                      // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventID;                                           // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URealTimeImportBPLibrary*               ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportBPLibrary_CreateSoundWaveFromBytesAsync) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_CreateSoundWaveFromBytesAsync");
static_assert(sizeof(RealTimeImportBPLibrary_CreateSoundWaveFromBytesAsync) == 0x000040, "Wrong size on RealTimeImportBPLibrary_CreateSoundWaveFromBytesAsync");
static_assert(offsetof(RealTimeImportBPLibrary_CreateSoundWaveFromBytesAsync, Param_Name) == 0x000000, "Member 'RealTimeImportBPLibrary_CreateSoundWaveFromBytesAsync::Param_Name' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_CreateSoundWaveFromBytesAsync, bytes) == 0x000010, "Member 'RealTimeImportBPLibrary_CreateSoundWaveFromBytesAsync::bytes' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_CreateSoundWaveFromBytesAsync, MaxFileSize) == 0x000020, "Member 'RealTimeImportBPLibrary_CreateSoundWaveFromBytesAsync::MaxFileSize' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_CreateSoundWaveFromBytesAsync, SoundFileType) == 0x000024, "Member 'RealTimeImportBPLibrary_CreateSoundWaveFromBytesAsync::SoundFileType' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_CreateSoundWaveFromBytesAsync, EventID) == 0x000028, "Member 'RealTimeImportBPLibrary_CreateSoundWaveFromBytesAsync::EventID' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_CreateSoundWaveFromBytesAsync, ReturnValue) == 0x000038, "Member 'RealTimeImportBPLibrary_CreateSoundWaveFromBytesAsync::ReturnValue' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.CreateSoundWaveFromFile
// 0x0068 (0x0068 - 0x0000)
struct RealTimeImportBPLibrary_CreateSoundWaveFromFile final
{
public:
	ERTIDirectoryType                             DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FCC[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxFileSize;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FCD[0x4];                                      // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FileID;                                            // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERTISoundFileType                             SoundFileType;                                     // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FCE[0x7];                                      // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundWaveProcedural*                   SoundWave;                                         // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ErrorCode;                                         // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FCF[0x4];                                      // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0058(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportBPLibrary_CreateSoundWaveFromFile) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_CreateSoundWaveFromFile");
static_assert(sizeof(RealTimeImportBPLibrary_CreateSoundWaveFromFile) == 0x000068, "Wrong size on RealTimeImportBPLibrary_CreateSoundWaveFromFile");
static_assert(offsetof(RealTimeImportBPLibrary_CreateSoundWaveFromFile, DirectoryType) == 0x000000, "Member 'RealTimeImportBPLibrary_CreateSoundWaveFromFile::DirectoryType' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_CreateSoundWaveFromFile, FilePath) == 0x000008, "Member 'RealTimeImportBPLibrary_CreateSoundWaveFromFile::FilePath' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_CreateSoundWaveFromFile, MaxFileSize) == 0x000018, "Member 'RealTimeImportBPLibrary_CreateSoundWaveFromFile::MaxFileSize' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_CreateSoundWaveFromFile, FileID) == 0x000020, "Member 'RealTimeImportBPLibrary_CreateSoundWaveFromFile::FileID' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_CreateSoundWaveFromFile, SoundFileType) == 0x000030, "Member 'RealTimeImportBPLibrary_CreateSoundWaveFromFile::SoundFileType' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_CreateSoundWaveFromFile, SoundWave) == 0x000038, "Member 'RealTimeImportBPLibrary_CreateSoundWaveFromFile::SoundWave' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_CreateSoundWaveFromFile, Filename) == 0x000040, "Member 'RealTimeImportBPLibrary_CreateSoundWaveFromFile::Filename' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_CreateSoundWaveFromFile, ErrorCode) == 0x000050, "Member 'RealTimeImportBPLibrary_CreateSoundWaveFromFile::ErrorCode' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_CreateSoundWaveFromFile, ErrorMessage) == 0x000058, "Member 'RealTimeImportBPLibrary_CreateSoundWaveFromFile::ErrorMessage' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.CreateSoundWaveFromFileAsync
// 0x0038 (0x0038 - 0x0000)
struct RealTimeImportBPLibrary_CreateSoundWaveFromFileAsync final
{
public:
	ERTIDirectoryType                             DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FD0[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxFileSize;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERTISoundFileType                             SoundFileType;                                     // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FD1[0x3];                                      // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URealTimeImportBPLibrary*               ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportBPLibrary_CreateSoundWaveFromFileAsync) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_CreateSoundWaveFromFileAsync");
static_assert(sizeof(RealTimeImportBPLibrary_CreateSoundWaveFromFileAsync) == 0x000038, "Wrong size on RealTimeImportBPLibrary_CreateSoundWaveFromFileAsync");
static_assert(offsetof(RealTimeImportBPLibrary_CreateSoundWaveFromFileAsync, DirectoryType) == 0x000000, "Member 'RealTimeImportBPLibrary_CreateSoundWaveFromFileAsync::DirectoryType' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_CreateSoundWaveFromFileAsync, FilePath) == 0x000008, "Member 'RealTimeImportBPLibrary_CreateSoundWaveFromFileAsync::FilePath' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_CreateSoundWaveFromFileAsync, MaxFileSize) == 0x000018, "Member 'RealTimeImportBPLibrary_CreateSoundWaveFromFileAsync::MaxFileSize' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_CreateSoundWaveFromFileAsync, SoundFileType) == 0x00001C, "Member 'RealTimeImportBPLibrary_CreateSoundWaveFromFileAsync::SoundFileType' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_CreateSoundWaveFromFileAsync, EventID) == 0x000020, "Member 'RealTimeImportBPLibrary_CreateSoundWaveFromFileAsync::EventID' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_CreateSoundWaveFromFileAsync, ReturnValue) == 0x000030, "Member 'RealTimeImportBPLibrary_CreateSoundWaveFromFileAsync::ReturnValue' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.emptyTextureCacheAndDestroyTextures
// 0x0001 (0x0001 - 0x0000)
struct RealTimeImportBPLibrary_EmptyTextureCacheAndDestroyTextures final
{
public:
	bool                                          EmptyTexturesBeforeDeleting;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportBPLibrary_EmptyTextureCacheAndDestroyTextures) == 0x000001, "Wrong alignment on RealTimeImportBPLibrary_EmptyTextureCacheAndDestroyTextures");
static_assert(sizeof(RealTimeImportBPLibrary_EmptyTextureCacheAndDestroyTextures) == 0x000001, "Wrong size on RealTimeImportBPLibrary_EmptyTextureCacheAndDestroyTextures");
static_assert(offsetof(RealTimeImportBPLibrary_EmptyTextureCacheAndDestroyTextures, EmptyTexturesBeforeDeleting) == 0x000000, "Member 'RealTimeImportBPLibrary_EmptyTextureCacheAndDestroyTextures::EmptyTexturesBeforeDeleting' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.getRealTimeImportTarget
// 0x0008 (0x0008 - 0x0000)
struct RealTimeImportBPLibrary_GetRealTimeImportTarget final
{
public:
	class URealTimeImportBPLibrary*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportBPLibrary_GetRealTimeImportTarget) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_GetRealTimeImportTarget");
static_assert(sizeof(RealTimeImportBPLibrary_GetRealTimeImportTarget) == 0x000008, "Wrong size on RealTimeImportBPLibrary_GetRealTimeImportTarget");
static_assert(offsetof(RealTimeImportBPLibrary_GetRealTimeImportTarget, ReturnValue) == 0x000000, "Member 'RealTimeImportBPLibrary_GetRealTimeImportTarget::ReturnValue' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.getSoundInfo
// 0x0068 (0x0068 - 0x0000)
struct RealTimeImportBPLibrary_GetSoundInfo final
{
public:
	ERTIDirectoryType                             DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FD2[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Param_Name;                                        // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FileNameExtension;                                 // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         FileSize;                                          // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FD3[0x4];                                      // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         NumChannels;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quality;                                           // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FD4[0x4];                                      // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         SampleDataSize;                                    // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         SampleRate;                                        // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportBPLibrary_GetSoundInfo) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_GetSoundInfo");
static_assert(sizeof(RealTimeImportBPLibrary_GetSoundInfo) == 0x000068, "Wrong size on RealTimeImportBPLibrary_GetSoundInfo");
static_assert(offsetof(RealTimeImportBPLibrary_GetSoundInfo, DirectoryType) == 0x000000, "Member 'RealTimeImportBPLibrary_GetSoundInfo::DirectoryType' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_GetSoundInfo, FilePath) == 0x000008, "Member 'RealTimeImportBPLibrary_GetSoundInfo::FilePath' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_GetSoundInfo, Param_Name) == 0x000018, "Member 'RealTimeImportBPLibrary_GetSoundInfo::Param_Name' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_GetSoundInfo, FileNameExtension) == 0x000028, "Member 'RealTimeImportBPLibrary_GetSoundInfo::FileNameExtension' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_GetSoundInfo, FileSize) == 0x000038, "Member 'RealTimeImportBPLibrary_GetSoundInfo::FileSize' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_GetSoundInfo, Duration) == 0x000040, "Member 'RealTimeImportBPLibrary_GetSoundInfo::Duration' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_GetSoundInfo, NumChannels) == 0x000048, "Member 'RealTimeImportBPLibrary_GetSoundInfo::NumChannels' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_GetSoundInfo, Quality) == 0x000050, "Member 'RealTimeImportBPLibrary_GetSoundInfo::Quality' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_GetSoundInfo, SampleDataSize) == 0x000058, "Member 'RealTimeImportBPLibrary_GetSoundInfo::SampleDataSize' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_GetSoundInfo, SampleRate) == 0x000060, "Member 'RealTimeImportBPLibrary_GetSoundInfo::SampleRate' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.isSoundActive
// 0x0018 (0x0018 - 0x0000)
struct RealTimeImportBPLibrary_IsSoundActive final
{
public:
	class FString                                 FileID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FD5[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RealTimeImportBPLibrary_IsSoundActive) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_IsSoundActive");
static_assert(sizeof(RealTimeImportBPLibrary_IsSoundActive) == 0x000018, "Wrong size on RealTimeImportBPLibrary_IsSoundActive");
static_assert(offsetof(RealTimeImportBPLibrary_IsSoundActive, FileID) == 0x000000, "Member 'RealTimeImportBPLibrary_IsSoundActive::FileID' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_IsSoundActive, ReturnValue) == 0x000010, "Member 'RealTimeImportBPLibrary_IsSoundActive::ReturnValue' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.LoadAllFilesFromDirectory
// 0x0048 (0x0048 - 0x0000)
struct RealTimeImportBPLibrary_LoadAllFilesFromDirectory final
{
public:
	ERTIDirectoryType                             DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERTIFileType                                  FileType;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FD6[0x6];                                      // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DirPath;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RecursiveSearch;                                   // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FD7[0x3];                                      // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Count;                                             // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Files;                                             // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         FilePaths;                                         // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FD8[0x7];                                      // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RealTimeImportBPLibrary_LoadAllFilesFromDirectory) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_LoadAllFilesFromDirectory");
static_assert(sizeof(RealTimeImportBPLibrary_LoadAllFilesFromDirectory) == 0x000048, "Wrong size on RealTimeImportBPLibrary_LoadAllFilesFromDirectory");
static_assert(offsetof(RealTimeImportBPLibrary_LoadAllFilesFromDirectory, DirectoryType) == 0x000000, "Member 'RealTimeImportBPLibrary_LoadAllFilesFromDirectory::DirectoryType' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadAllFilesFromDirectory, FileType) == 0x000001, "Member 'RealTimeImportBPLibrary_LoadAllFilesFromDirectory::FileType' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadAllFilesFromDirectory, DirPath) == 0x000008, "Member 'RealTimeImportBPLibrary_LoadAllFilesFromDirectory::DirPath' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadAllFilesFromDirectory, RecursiveSearch) == 0x000018, "Member 'RealTimeImportBPLibrary_LoadAllFilesFromDirectory::RecursiveSearch' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadAllFilesFromDirectory, Count) == 0x00001C, "Member 'RealTimeImportBPLibrary_LoadAllFilesFromDirectory::Count' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadAllFilesFromDirectory, Files) == 0x000020, "Member 'RealTimeImportBPLibrary_LoadAllFilesFromDirectory::Files' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadAllFilesFromDirectory, FilePaths) == 0x000030, "Member 'RealTimeImportBPLibrary_LoadAllFilesFromDirectory::FilePaths' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadAllFilesFromDirectory, ReturnValue) == 0x000040, "Member 'RealTimeImportBPLibrary_LoadAllFilesFromDirectory::ReturnValue' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.loadAndPlaySoundBytesAsync
// 0x0028 (0x0028 - 0x0000)
struct RealTimeImportBPLibrary_LoadAndPlaySoundBytesAsync final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 bytes;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlaySpeed;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartTimeInSeconds;                                // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PersistAcrossLevelTransition;                      // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FD9[0x3];                                      // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RealTimeImportBPLibrary_LoadAndPlaySoundBytesAsync) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_LoadAndPlaySoundBytesAsync");
static_assert(sizeof(RealTimeImportBPLibrary_LoadAndPlaySoundBytesAsync) == 0x000028, "Wrong size on RealTimeImportBPLibrary_LoadAndPlaySoundBytesAsync");
static_assert(offsetof(RealTimeImportBPLibrary_LoadAndPlaySoundBytesAsync, WorldContextObject) == 0x000000, "Member 'RealTimeImportBPLibrary_LoadAndPlaySoundBytesAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadAndPlaySoundBytesAsync, bytes) == 0x000008, "Member 'RealTimeImportBPLibrary_LoadAndPlaySoundBytesAsync::bytes' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadAndPlaySoundBytesAsync, VolumeMultiplier) == 0x000018, "Member 'RealTimeImportBPLibrary_LoadAndPlaySoundBytesAsync::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadAndPlaySoundBytesAsync, PlaySpeed) == 0x00001C, "Member 'RealTimeImportBPLibrary_LoadAndPlaySoundBytesAsync::PlaySpeed' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadAndPlaySoundBytesAsync, StartTimeInSeconds) == 0x000020, "Member 'RealTimeImportBPLibrary_LoadAndPlaySoundBytesAsync::StartTimeInSeconds' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadAndPlaySoundBytesAsync, PersistAcrossLevelTransition) == 0x000024, "Member 'RealTimeImportBPLibrary_LoadAndPlaySoundBytesAsync::PersistAcrossLevelTransition' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.loadAndPlaySoundFileAsync
// 0x0038 (0x0038 - 0x0000)
struct RealTimeImportBPLibrary_LoadAndPlaySoundFileAsync final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERTIDirectoryType                             DirectoryType;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FDA[0x7];                                      // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxFileSize;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlaySpeed;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartTimeInSeconds;                                // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PersistAcrossLevelTransition;                      // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERTISoundFileType                             SoundFileType;                                     // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FDB[0x6];                                      // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RealTimeImportBPLibrary_LoadAndPlaySoundFileAsync) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_LoadAndPlaySoundFileAsync");
static_assert(sizeof(RealTimeImportBPLibrary_LoadAndPlaySoundFileAsync) == 0x000038, "Wrong size on RealTimeImportBPLibrary_LoadAndPlaySoundFileAsync");
static_assert(offsetof(RealTimeImportBPLibrary_LoadAndPlaySoundFileAsync, WorldContextObject) == 0x000000, "Member 'RealTimeImportBPLibrary_LoadAndPlaySoundFileAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadAndPlaySoundFileAsync, DirectoryType) == 0x000008, "Member 'RealTimeImportBPLibrary_LoadAndPlaySoundFileAsync::DirectoryType' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadAndPlaySoundFileAsync, FilePath) == 0x000010, "Member 'RealTimeImportBPLibrary_LoadAndPlaySoundFileAsync::FilePath' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadAndPlaySoundFileAsync, MaxFileSize) == 0x000020, "Member 'RealTimeImportBPLibrary_LoadAndPlaySoundFileAsync::MaxFileSize' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadAndPlaySoundFileAsync, VolumeMultiplier) == 0x000024, "Member 'RealTimeImportBPLibrary_LoadAndPlaySoundFileAsync::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadAndPlaySoundFileAsync, PlaySpeed) == 0x000028, "Member 'RealTimeImportBPLibrary_LoadAndPlaySoundFileAsync::PlaySpeed' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadAndPlaySoundFileAsync, StartTimeInSeconds) == 0x00002C, "Member 'RealTimeImportBPLibrary_LoadAndPlaySoundFileAsync::StartTimeInSeconds' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadAndPlaySoundFileAsync, PersistAcrossLevelTransition) == 0x000030, "Member 'RealTimeImportBPLibrary_LoadAndPlaySoundFileAsync::PersistAcrossLevelTransition' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadAndPlaySoundFileAsync, SoundFileType) == 0x000031, "Member 'RealTimeImportBPLibrary_LoadAndPlaySoundFileAsync::SoundFileType' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.LoadFile
// 0x0050 (0x0050 - 0x0000)
struct RealTimeImportBPLibrary_LoadFile final
{
public:
	ERTIDirectoryType                             DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FDC[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 bytes;                                             // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ErrorCode;                                         // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FDD[0x4];                                      // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportBPLibrary_LoadFile) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_LoadFile");
static_assert(sizeof(RealTimeImportBPLibrary_LoadFile) == 0x000050, "Wrong size on RealTimeImportBPLibrary_LoadFile");
static_assert(offsetof(RealTimeImportBPLibrary_LoadFile, DirectoryType) == 0x000000, "Member 'RealTimeImportBPLibrary_LoadFile::DirectoryType' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadFile, FilePath) == 0x000008, "Member 'RealTimeImportBPLibrary_LoadFile::FilePath' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadFile, Filename) == 0x000018, "Member 'RealTimeImportBPLibrary_LoadFile::Filename' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadFile, bytes) == 0x000028, "Member 'RealTimeImportBPLibrary_LoadFile::bytes' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadFile, ErrorCode) == 0x000038, "Member 'RealTimeImportBPLibrary_LoadFile::ErrorCode' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadFile, ErrorMessage) == 0x000040, "Member 'RealTimeImportBPLibrary_LoadFile::ErrorMessage' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.LoadImageBytes
// 0x0048 (0x0048 - 0x0000)
struct RealTimeImportBPLibrary_LoadImageBytes final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 bytes;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UTexture2D*                             Texture;                                           // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ErrorCode;                                         // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FDE[0x4];                                      // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureCompressionSettings                   CompressionSettings;                               // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SRGB;                                              // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CreateMipMaps;                                     // 0x0042(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERTIERGBFormat                                RgbFormat;                                         // 0x0043(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FDF[0x4];                                      // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RealTimeImportBPLibrary_LoadImageBytes) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_LoadImageBytes");
static_assert(sizeof(RealTimeImportBPLibrary_LoadImageBytes) == 0x000048, "Wrong size on RealTimeImportBPLibrary_LoadImageBytes");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageBytes, Param_Name) == 0x000000, "Member 'RealTimeImportBPLibrary_LoadImageBytes::Param_Name' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageBytes, bytes) == 0x000010, "Member 'RealTimeImportBPLibrary_LoadImageBytes::bytes' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageBytes, Texture) == 0x000020, "Member 'RealTimeImportBPLibrary_LoadImageBytes::Texture' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageBytes, ErrorCode) == 0x000028, "Member 'RealTimeImportBPLibrary_LoadImageBytes::ErrorCode' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageBytes, ErrorMessage) == 0x000030, "Member 'RealTimeImportBPLibrary_LoadImageBytes::ErrorMessage' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageBytes, CompressionSettings) == 0x000040, "Member 'RealTimeImportBPLibrary_LoadImageBytes::CompressionSettings' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageBytes, SRGB) == 0x000041, "Member 'RealTimeImportBPLibrary_LoadImageBytes::SRGB' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageBytes, CreateMipMaps) == 0x000042, "Member 'RealTimeImportBPLibrary_LoadImageBytes::CreateMipMaps' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageBytes, RgbFormat) == 0x000043, "Member 'RealTimeImportBPLibrary_LoadImageBytes::RgbFormat' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.LoadImageBytesAsync
// 0x0040 (0x0040 - 0x0000)
struct RealTimeImportBPLibrary_LoadImageBytesAsync final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 bytes;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 EventID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureCompressionSettings                   CompressionSettings;                               // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SRGB;                                              // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CreateMipMaps;                                     // 0x0032(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERTIERGBFormat                                RgbFormat;                                         // 0x0033(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FE0[0x4];                                      // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URealTimeImportBPLibrary*               ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportBPLibrary_LoadImageBytesAsync) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_LoadImageBytesAsync");
static_assert(sizeof(RealTimeImportBPLibrary_LoadImageBytesAsync) == 0x000040, "Wrong size on RealTimeImportBPLibrary_LoadImageBytesAsync");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageBytesAsync, Param_Name) == 0x000000, "Member 'RealTimeImportBPLibrary_LoadImageBytesAsync::Param_Name' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageBytesAsync, bytes) == 0x000010, "Member 'RealTimeImportBPLibrary_LoadImageBytesAsync::bytes' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageBytesAsync, EventID) == 0x000020, "Member 'RealTimeImportBPLibrary_LoadImageBytesAsync::EventID' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageBytesAsync, CompressionSettings) == 0x000030, "Member 'RealTimeImportBPLibrary_LoadImageBytesAsync::CompressionSettings' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageBytesAsync, SRGB) == 0x000031, "Member 'RealTimeImportBPLibrary_LoadImageBytesAsync::SRGB' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageBytesAsync, CreateMipMaps) == 0x000032, "Member 'RealTimeImportBPLibrary_LoadImageBytesAsync::CreateMipMaps' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageBytesAsync, RgbFormat) == 0x000033, "Member 'RealTimeImportBPLibrary_LoadImageBytesAsync::RgbFormat' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageBytesAsync, ReturnValue) == 0x000038, "Member 'RealTimeImportBPLibrary_LoadImageBytesAsync::ReturnValue' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.LoadImageFile
// 0x0050 (0x0050 - 0x0000)
struct RealTimeImportBPLibrary_LoadImageFile final
{
public:
	ERTIDirectoryType                             DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FE1[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Texture;                                           // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ErrorCode;                                         // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FE2[0x4];                                      // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureCompressionSettings                   CompressionSettings;                               // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SRGB;                                              // 0x0049(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CreateMipMaps;                                     // 0x004A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERTIERGBFormat                                RgbFormat;                                         // 0x004B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FE3[0x4];                                      // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RealTimeImportBPLibrary_LoadImageFile) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_LoadImageFile");
static_assert(sizeof(RealTimeImportBPLibrary_LoadImageFile) == 0x000050, "Wrong size on RealTimeImportBPLibrary_LoadImageFile");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageFile, DirectoryType) == 0x000000, "Member 'RealTimeImportBPLibrary_LoadImageFile::DirectoryType' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageFile, FilePath) == 0x000008, "Member 'RealTimeImportBPLibrary_LoadImageFile::FilePath' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageFile, Texture) == 0x000018, "Member 'RealTimeImportBPLibrary_LoadImageFile::Texture' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageFile, Filename) == 0x000020, "Member 'RealTimeImportBPLibrary_LoadImageFile::Filename' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageFile, ErrorCode) == 0x000030, "Member 'RealTimeImportBPLibrary_LoadImageFile::ErrorCode' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageFile, ErrorMessage) == 0x000038, "Member 'RealTimeImportBPLibrary_LoadImageFile::ErrorMessage' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageFile, CompressionSettings) == 0x000048, "Member 'RealTimeImportBPLibrary_LoadImageFile::CompressionSettings' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageFile, SRGB) == 0x000049, "Member 'RealTimeImportBPLibrary_LoadImageFile::SRGB' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageFile, CreateMipMaps) == 0x00004A, "Member 'RealTimeImportBPLibrary_LoadImageFile::CreateMipMaps' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageFile, RgbFormat) == 0x00004B, "Member 'RealTimeImportBPLibrary_LoadImageFile::RgbFormat' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.LoadImageFileAsync
// 0x0038 (0x0038 - 0x0000)
struct RealTimeImportBPLibrary_LoadImageFileAsync final
{
public:
	ERTIDirectoryType                             DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FE4[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventID;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureCompressionSettings                   CompressionSettings;                               // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SRGB;                                              // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CreateMipMaps;                                     // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERTIERGBFormat                                RgbFormat;                                         // 0x002B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FE5[0x4];                                      // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URealTimeImportBPLibrary*               ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportBPLibrary_LoadImageFileAsync) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_LoadImageFileAsync");
static_assert(sizeof(RealTimeImportBPLibrary_LoadImageFileAsync) == 0x000038, "Wrong size on RealTimeImportBPLibrary_LoadImageFileAsync");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageFileAsync, DirectoryType) == 0x000000, "Member 'RealTimeImportBPLibrary_LoadImageFileAsync::DirectoryType' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageFileAsync, FilePath) == 0x000008, "Member 'RealTimeImportBPLibrary_LoadImageFileAsync::FilePath' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageFileAsync, EventID) == 0x000018, "Member 'RealTimeImportBPLibrary_LoadImageFileAsync::EventID' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageFileAsync, CompressionSettings) == 0x000028, "Member 'RealTimeImportBPLibrary_LoadImageFileAsync::CompressionSettings' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageFileAsync, SRGB) == 0x000029, "Member 'RealTimeImportBPLibrary_LoadImageFileAsync::SRGB' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageFileAsync, CreateMipMaps) == 0x00002A, "Member 'RealTimeImportBPLibrary_LoadImageFileAsync::CreateMipMaps' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageFileAsync, RgbFormat) == 0x00002B, "Member 'RealTimeImportBPLibrary_LoadImageFileAsync::RgbFormat' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageFileAsync, ReturnValue) == 0x000030, "Member 'RealTimeImportBPLibrary_LoadImageFileAsync::ReturnValue' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.LoadMeshFile
// 0x0048 (0x0048 - 0x0000)
struct RealTimeImportBPLibrary_LoadMeshFile final
{
public:
	ERTIMeshType                                  FileType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERTIDirectoryType                             DirectoryType;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FE6[0x6];                                      // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FE7[0x7];                                      // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SuccessMessage;                                    // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRTIModelStruct>                ModelStructs;                                      // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	ERTICoordinateSystem                          CoordinateSystem;                                  // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoDetectionNormalMap;                            // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseSRGB;                                           // 0x0042(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CreateMipMaps;                                     // 0x0043(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERTIERGBFormat                                RgbFormat;                                         // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FE8[0x3];                                      // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RealTimeImportBPLibrary_LoadMeshFile) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_LoadMeshFile");
static_assert(sizeof(RealTimeImportBPLibrary_LoadMeshFile) == 0x000048, "Wrong size on RealTimeImportBPLibrary_LoadMeshFile");
static_assert(offsetof(RealTimeImportBPLibrary_LoadMeshFile, FileType) == 0x000000, "Member 'RealTimeImportBPLibrary_LoadMeshFile::FileType' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadMeshFile, DirectoryType) == 0x000001, "Member 'RealTimeImportBPLibrary_LoadMeshFile::DirectoryType' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadMeshFile, FilePath) == 0x000008, "Member 'RealTimeImportBPLibrary_LoadMeshFile::FilePath' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadMeshFile, Success) == 0x000018, "Member 'RealTimeImportBPLibrary_LoadMeshFile::Success' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadMeshFile, SuccessMessage) == 0x000020, "Member 'RealTimeImportBPLibrary_LoadMeshFile::SuccessMessage' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadMeshFile, ModelStructs) == 0x000030, "Member 'RealTimeImportBPLibrary_LoadMeshFile::ModelStructs' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadMeshFile, CoordinateSystem) == 0x000040, "Member 'RealTimeImportBPLibrary_LoadMeshFile::CoordinateSystem' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadMeshFile, AutoDetectionNormalMap) == 0x000041, "Member 'RealTimeImportBPLibrary_LoadMeshFile::AutoDetectionNormalMap' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadMeshFile, UseSRGB) == 0x000042, "Member 'RealTimeImportBPLibrary_LoadMeshFile::UseSRGB' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadMeshFile, CreateMipMaps) == 0x000043, "Member 'RealTimeImportBPLibrary_LoadMeshFile::CreateMipMaps' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadMeshFile, RgbFormat) == 0x000044, "Member 'RealTimeImportBPLibrary_LoadMeshFile::RgbFormat' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.Multiply_VectorArrayFloat
// 0x0028 (0x0028 - 0x0000)
struct RealTimeImportBPLibrary_Multiply_VectorArrayFloat final
{
public:
	TArray<struct FVector>                        A;                                                 // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         B;                                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FE9[0x4];                                      // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportBPLibrary_Multiply_VectorArrayFloat) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_Multiply_VectorArrayFloat");
static_assert(sizeof(RealTimeImportBPLibrary_Multiply_VectorArrayFloat) == 0x000028, "Wrong size on RealTimeImportBPLibrary_Multiply_VectorArrayFloat");
static_assert(offsetof(RealTimeImportBPLibrary_Multiply_VectorArrayFloat, A) == 0x000000, "Member 'RealTimeImportBPLibrary_Multiply_VectorArrayFloat::A' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_Multiply_VectorArrayFloat, B) == 0x000010, "Member 'RealTimeImportBPLibrary_Multiply_VectorArrayFloat::B' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_Multiply_VectorArrayFloat, ReturnValue) == 0x000018, "Member 'RealTimeImportBPLibrary_Multiply_VectorArrayFloat::ReturnValue' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.pauseSound
// 0x0010 (0x0010 - 0x0000)
struct RealTimeImportBPLibrary_PauseSound final
{
public:
	class FString                                 FileID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportBPLibrary_PauseSound) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_PauseSound");
static_assert(sizeof(RealTimeImportBPLibrary_PauseSound) == 0x000010, "Wrong size on RealTimeImportBPLibrary_PauseSound");
static_assert(offsetof(RealTimeImportBPLibrary_PauseSound, FileID) == 0x000000, "Member 'RealTimeImportBPLibrary_PauseSound::FileID' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.removeSoundFromCache
// 0x0010 (0x0010 - 0x0000)
struct RealTimeImportBPLibrary_RemoveSoundFromCache final
{
public:
	class FString                                 FileID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportBPLibrary_RemoveSoundFromCache) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_RemoveSoundFromCache");
static_assert(sizeof(RealTimeImportBPLibrary_RemoveSoundFromCache) == 0x000010, "Wrong size on RealTimeImportBPLibrary_RemoveSoundFromCache");
static_assert(offsetof(RealTimeImportBPLibrary_RemoveSoundFromCache, FileID) == 0x000000, "Member 'RealTimeImportBPLibrary_RemoveSoundFromCache::FileID' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.removeTextureFromCacheAndDestroyTexture
// 0x0010 (0x0010 - 0x0000)
struct RealTimeImportBPLibrary_RemoveTextureFromCacheAndDestroyTexture final
{
public:
	class UTexture*                               Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EmptyTextureBeforeDeleting;                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FEA[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RealTimeImportBPLibrary_RemoveTextureFromCacheAndDestroyTexture) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_RemoveTextureFromCacheAndDestroyTexture");
static_assert(sizeof(RealTimeImportBPLibrary_RemoveTextureFromCacheAndDestroyTexture) == 0x000010, "Wrong size on RealTimeImportBPLibrary_RemoveTextureFromCacheAndDestroyTexture");
static_assert(offsetof(RealTimeImportBPLibrary_RemoveTextureFromCacheAndDestroyTexture, Texture) == 0x000000, "Member 'RealTimeImportBPLibrary_RemoveTextureFromCacheAndDestroyTexture::Texture' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_RemoveTextureFromCacheAndDestroyTexture, EmptyTextureBeforeDeleting) == 0x000008, "Member 'RealTimeImportBPLibrary_RemoveTextureFromCacheAndDestroyTexture::EmptyTextureBeforeDeleting' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.resumeSound
// 0x0010 (0x0010 - 0x0000)
struct RealTimeImportBPLibrary_ResumeSound final
{
public:
	class FString                                 FileID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportBPLibrary_ResumeSound) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_ResumeSound");
static_assert(sizeof(RealTimeImportBPLibrary_ResumeSound) == 0x000010, "Wrong size on RealTimeImportBPLibrary_ResumeSound");
static_assert(offsetof(RealTimeImportBPLibrary_ResumeSound, FileID) == 0x000000, "Member 'RealTimeImportBPLibrary_ResumeSound::FileID' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.SaveFile
// 0x0068 (0x0068 - 0x0000)
struct RealTimeImportBPLibrary_SaveFile final
{
public:
	ERTIDirectoryType                             DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FEB[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CreateDirectories;                                 // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverwriteFile;                                     // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FEC[0x6];                                      // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 bytes;                                             // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FullPath;                                          // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ErrorCode;                                         // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FED[0x4];                                      // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0058(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportBPLibrary_SaveFile) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_SaveFile");
static_assert(sizeof(RealTimeImportBPLibrary_SaveFile) == 0x000068, "Wrong size on RealTimeImportBPLibrary_SaveFile");
static_assert(offsetof(RealTimeImportBPLibrary_SaveFile, DirectoryType) == 0x000000, "Member 'RealTimeImportBPLibrary_SaveFile::DirectoryType' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_SaveFile, FilePath) == 0x000008, "Member 'RealTimeImportBPLibrary_SaveFile::FilePath' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_SaveFile, CreateDirectories) == 0x000018, "Member 'RealTimeImportBPLibrary_SaveFile::CreateDirectories' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_SaveFile, OverwriteFile) == 0x000019, "Member 'RealTimeImportBPLibrary_SaveFile::OverwriteFile' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_SaveFile, bytes) == 0x000020, "Member 'RealTimeImportBPLibrary_SaveFile::bytes' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_SaveFile, Filename) == 0x000030, "Member 'RealTimeImportBPLibrary_SaveFile::Filename' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_SaveFile, FullPath) == 0x000040, "Member 'RealTimeImportBPLibrary_SaveFile::FullPath' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_SaveFile, ErrorCode) == 0x000050, "Member 'RealTimeImportBPLibrary_SaveFile::ErrorCode' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_SaveFile, ErrorMessage) == 0x000058, "Member 'RealTimeImportBPLibrary_SaveFile::ErrorMessage' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.seekWavFileStream
// 0x0018 (0x0018 - 0x0000)
struct RealTimeImportBPLibrary_SeekWavFileStream final
{
public:
	class FString                                 FileID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositionInSeconds;                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FEE[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RealTimeImportBPLibrary_SeekWavFileStream) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_SeekWavFileStream");
static_assert(sizeof(RealTimeImportBPLibrary_SeekWavFileStream) == 0x000018, "Wrong size on RealTimeImportBPLibrary_SeekWavFileStream");
static_assert(offsetof(RealTimeImportBPLibrary_SeekWavFileStream, FileID) == 0x000000, "Member 'RealTimeImportBPLibrary_SeekWavFileStream::FileID' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_SeekWavFileStream, PositionInSeconds) == 0x000010, "Member 'RealTimeImportBPLibrary_SeekWavFileStream::PositionInSeconds' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.stopAllSounds
// 0x0001 (0x0001 - 0x0000)
struct RealTimeImportBPLibrary_StopAllSounds final
{
public:
	bool                                          RemoveFromCache;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportBPLibrary_StopAllSounds) == 0x000001, "Wrong alignment on RealTimeImportBPLibrary_StopAllSounds");
static_assert(sizeof(RealTimeImportBPLibrary_StopAllSounds) == 0x000001, "Wrong size on RealTimeImportBPLibrary_StopAllSounds");
static_assert(offsetof(RealTimeImportBPLibrary_StopAllSounds, RemoveFromCache) == 0x000000, "Member 'RealTimeImportBPLibrary_StopAllSounds::RemoveFromCache' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.stopSound
// 0x0018 (0x0018 - 0x0000)
struct RealTimeImportBPLibrary_StopSound final
{
public:
	class FString                                 FileID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RemoveFromCache;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FEF[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RealTimeImportBPLibrary_StopSound) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_StopSound");
static_assert(sizeof(RealTimeImportBPLibrary_StopSound) == 0x000018, "Wrong size on RealTimeImportBPLibrary_StopSound");
static_assert(offsetof(RealTimeImportBPLibrary_StopSound, FileID) == 0x000000, "Member 'RealTimeImportBPLibrary_StopSound::FileID' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_StopSound, RemoveFromCache) == 0x000010, "Member 'RealTimeImportBPLibrary_StopSound::RemoveFromCache' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.streamWavFile
// 0x0048 (0x0048 - 0x0000)
struct RealTimeImportBPLibrary_StreamWavFile final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FF0[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERTIDirectoryType                             DirectoryType;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FF1[0x7];                                      // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartTimeInSeconds;                                // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PersistAcrossLevelTransition;                      // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FF2[0x7];                                      // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RealTimeImportBPLibrary_StreamWavFile) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_StreamWavFile");
static_assert(sizeof(RealTimeImportBPLibrary_StreamWavFile) == 0x000048, "Wrong size on RealTimeImportBPLibrary_StreamWavFile");
static_assert(offsetof(RealTimeImportBPLibrary_StreamWavFile, Success) == 0x000000, "Member 'RealTimeImportBPLibrary_StreamWavFile::Success' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_StreamWavFile, ErrorMessage) == 0x000008, "Member 'RealTimeImportBPLibrary_StreamWavFile::ErrorMessage' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_StreamWavFile, WorldContextObject) == 0x000018, "Member 'RealTimeImportBPLibrary_StreamWavFile::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_StreamWavFile, DirectoryType) == 0x000020, "Member 'RealTimeImportBPLibrary_StreamWavFile::DirectoryType' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_StreamWavFile, FilePath) == 0x000028, "Member 'RealTimeImportBPLibrary_StreamWavFile::FilePath' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_StreamWavFile, VolumeMultiplier) == 0x000038, "Member 'RealTimeImportBPLibrary_StreamWavFile::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_StreamWavFile, StartTimeInSeconds) == 0x00003C, "Member 'RealTimeImportBPLibrary_StreamWavFile::StartTimeInSeconds' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_StreamWavFile, PersistAcrossLevelTransition) == 0x000040, "Member 'RealTimeImportBPLibrary_StreamWavFile::PersistAcrossLevelTransition' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.texture2dToByteArray
// 0x0020 (0x0020 - 0x0000)
struct RealTimeImportBPLibrary_Texture2dToByteArray final
{
public:
	class UTexture2D*                             Texture2D;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERTIExportImageType                           Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FF3[0x3];                                      // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Quality;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportBPLibrary_Texture2dToByteArray) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_Texture2dToByteArray");
static_assert(sizeof(RealTimeImportBPLibrary_Texture2dToByteArray) == 0x000020, "Wrong size on RealTimeImportBPLibrary_Texture2dToByteArray");
static_assert(offsetof(RealTimeImportBPLibrary_Texture2dToByteArray, Texture2D) == 0x000000, "Member 'RealTimeImportBPLibrary_Texture2dToByteArray::Texture2D' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_Texture2dToByteArray, Type) == 0x000008, "Member 'RealTimeImportBPLibrary_Texture2dToByteArray::Type' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_Texture2dToByteArray, Quality) == 0x00000C, "Member 'RealTimeImportBPLibrary_Texture2dToByteArray::Quality' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_Texture2dToByteArray, ReturnValue) == 0x000010, "Member 'RealTimeImportBPLibrary_Texture2dToByteArray::ReturnValue' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.texture2DToTexture2DDynamic
// 0x0018 (0x0018 - 0x0000)
struct RealTimeImportBPLibrary_Texture2DToTexture2DDynamic final
{
public:
	class UTexture2D*                             Texture2D;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DestroyTexture2D;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FF4[0x7];                                      // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2DDynamic*                      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportBPLibrary_Texture2DToTexture2DDynamic) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_Texture2DToTexture2DDynamic");
static_assert(sizeof(RealTimeImportBPLibrary_Texture2DToTexture2DDynamic) == 0x000018, "Wrong size on RealTimeImportBPLibrary_Texture2DToTexture2DDynamic");
static_assert(offsetof(RealTimeImportBPLibrary_Texture2DToTexture2DDynamic, Texture2D) == 0x000000, "Member 'RealTimeImportBPLibrary_Texture2DToTexture2DDynamic::Texture2D' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_Texture2DToTexture2DDynamic, DestroyTexture2D) == 0x000008, "Member 'RealTimeImportBPLibrary_Texture2DToTexture2DDynamic::DestroyTexture2D' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_Texture2DToTexture2DDynamic, ReturnValue) == 0x000010, "Member 'RealTimeImportBPLibrary_Texture2DToTexture2DDynamic::ReturnValue' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.textureRenderTarget2D_ToByteArray
// 0x0038 (0x0038 - 0x0000)
struct RealTimeImportBPLibrary_TextureRenderTarget2D_ToByteArray final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FF5[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 TextureRenderTarget2D;                             // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERTIExportImageType                           Type;                                              // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FF6[0x3];                                      // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Quality;                                           // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportBPLibrary_TextureRenderTarget2D_ToByteArray) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_TextureRenderTarget2D_ToByteArray");
static_assert(sizeof(RealTimeImportBPLibrary_TextureRenderTarget2D_ToByteArray) == 0x000038, "Wrong size on RealTimeImportBPLibrary_TextureRenderTarget2D_ToByteArray");
static_assert(offsetof(RealTimeImportBPLibrary_TextureRenderTarget2D_ToByteArray, Success) == 0x000000, "Member 'RealTimeImportBPLibrary_TextureRenderTarget2D_ToByteArray::Success' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_TextureRenderTarget2D_ToByteArray, ErrorMessage) == 0x000008, "Member 'RealTimeImportBPLibrary_TextureRenderTarget2D_ToByteArray::ErrorMessage' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_TextureRenderTarget2D_ToByteArray, TextureRenderTarget2D) == 0x000018, "Member 'RealTimeImportBPLibrary_TextureRenderTarget2D_ToByteArray::TextureRenderTarget2D' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_TextureRenderTarget2D_ToByteArray, Type) == 0x000020, "Member 'RealTimeImportBPLibrary_TextureRenderTarget2D_ToByteArray::Type' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_TextureRenderTarget2D_ToByteArray, Quality) == 0x000024, "Member 'RealTimeImportBPLibrary_TextureRenderTarget2D_ToByteArray::Quality' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_TextureRenderTarget2D_ToByteArray, ReturnValue) == 0x000028, "Member 'RealTimeImportBPLibrary_TextureRenderTarget2D_ToByteArray::ReturnValue' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.ActiveSoundEnvelopeValueEventDelegate
// 0x000C (0x000C - 0x0000)
struct RealTimeImportBPLibrary_ActiveSoundEnvelopeValueEventDelegate final
{
public:
	float                                         AverageEnvelopeValue;                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxEnvelope;                                       // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumWaveInstances;                                  // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportBPLibrary_ActiveSoundEnvelopeValueEventDelegate) == 0x000004, "Wrong alignment on RealTimeImportBPLibrary_ActiveSoundEnvelopeValueEventDelegate");
static_assert(sizeof(RealTimeImportBPLibrary_ActiveSoundEnvelopeValueEventDelegate) == 0x00000C, "Wrong size on RealTimeImportBPLibrary_ActiveSoundEnvelopeValueEventDelegate");
static_assert(offsetof(RealTimeImportBPLibrary_ActiveSoundEnvelopeValueEventDelegate, AverageEnvelopeValue) == 0x000000, "Member 'RealTimeImportBPLibrary_ActiveSoundEnvelopeValueEventDelegate::AverageEnvelopeValue' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_ActiveSoundEnvelopeValueEventDelegate, MaxEnvelope) == 0x000004, "Member 'RealTimeImportBPLibrary_ActiveSoundEnvelopeValueEventDelegate::MaxEnvelope' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_ActiveSoundEnvelopeValueEventDelegate, NumWaveInstances) == 0x000008, "Member 'RealTimeImportBPLibrary_ActiveSoundEnvelopeValueEventDelegate::NumWaveInstances' has a wrong offset!");

// DelegateFunction RealTimeImport.RealTimeImportBPLibrary.ActiveSoundEnvelopeValueEventDelegate__DelegateSignature
// 0x000C (0x000C - 0x0000)
struct RealTimeImportBPLibrary_ActiveSoundEnvelopeValueEventDelegate__DelegateSignature final
{
public:
	float                                         AverageEnvelopeValue;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxEnvelope;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumWaveInstances;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportBPLibrary_ActiveSoundEnvelopeValueEventDelegate__DelegateSignature) == 0x000004, "Wrong alignment on RealTimeImportBPLibrary_ActiveSoundEnvelopeValueEventDelegate__DelegateSignature");
static_assert(sizeof(RealTimeImportBPLibrary_ActiveSoundEnvelopeValueEventDelegate__DelegateSignature) == 0x00000C, "Wrong size on RealTimeImportBPLibrary_ActiveSoundEnvelopeValueEventDelegate__DelegateSignature");
static_assert(offsetof(RealTimeImportBPLibrary_ActiveSoundEnvelopeValueEventDelegate__DelegateSignature, AverageEnvelopeValue) == 0x000000, "Member 'RealTimeImportBPLibrary_ActiveSoundEnvelopeValueEventDelegate__DelegateSignature::AverageEnvelopeValue' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_ActiveSoundEnvelopeValueEventDelegate__DelegateSignature, MaxEnvelope) == 0x000004, "Member 'RealTimeImportBPLibrary_ActiveSoundEnvelopeValueEventDelegate__DelegateSignature::MaxEnvelope' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_ActiveSoundEnvelopeValueEventDelegate__DelegateSignature, NumWaveInstances) == 0x000008, "Member 'RealTimeImportBPLibrary_ActiveSoundEnvelopeValueEventDelegate__DelegateSignature::NumWaveInstances' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.ActiveSoundPositionEventDelegate
// 0x0020 (0x0020 - 0x0000)
struct RealTimeImportBPLibrary_ActiveSoundPositionEventDelegate final
{
public:
	class FString                                 FileID;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositionSecondsStart;                              // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositionSecondsEnd;                                // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositionPercent;                                   // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FF7[0x4];                                      // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RealTimeImportBPLibrary_ActiveSoundPositionEventDelegate) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_ActiveSoundPositionEventDelegate");
static_assert(sizeof(RealTimeImportBPLibrary_ActiveSoundPositionEventDelegate) == 0x000020, "Wrong size on RealTimeImportBPLibrary_ActiveSoundPositionEventDelegate");
static_assert(offsetof(RealTimeImportBPLibrary_ActiveSoundPositionEventDelegate, FileID) == 0x000000, "Member 'RealTimeImportBPLibrary_ActiveSoundPositionEventDelegate::FileID' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_ActiveSoundPositionEventDelegate, PositionSecondsStart) == 0x000010, "Member 'RealTimeImportBPLibrary_ActiveSoundPositionEventDelegate::PositionSecondsStart' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_ActiveSoundPositionEventDelegate, PositionSecondsEnd) == 0x000014, "Member 'RealTimeImportBPLibrary_ActiveSoundPositionEventDelegate::PositionSecondsEnd' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_ActiveSoundPositionEventDelegate, PositionPercent) == 0x000018, "Member 'RealTimeImportBPLibrary_ActiveSoundPositionEventDelegate::PositionPercent' has a wrong offset!");

// DelegateFunction RealTimeImport.RealTimeImportBPLibrary.ActiveSoundPositionEventDelegate__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct RealTimeImportBPLibrary_ActiveSoundPositionEventDelegate__DelegateSignature final
{
public:
	class FString                                 FileID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositionSecondsStart;                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositionSecondsEnd;                                // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositionPercent;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FF8[0x4];                                      // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RealTimeImportBPLibrary_ActiveSoundPositionEventDelegate__DelegateSignature) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_ActiveSoundPositionEventDelegate__DelegateSignature");
static_assert(sizeof(RealTimeImportBPLibrary_ActiveSoundPositionEventDelegate__DelegateSignature) == 0x000020, "Wrong size on RealTimeImportBPLibrary_ActiveSoundPositionEventDelegate__DelegateSignature");
static_assert(offsetof(RealTimeImportBPLibrary_ActiveSoundPositionEventDelegate__DelegateSignature, FileID) == 0x000000, "Member 'RealTimeImportBPLibrary_ActiveSoundPositionEventDelegate__DelegateSignature::FileID' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_ActiveSoundPositionEventDelegate__DelegateSignature, PositionSecondsStart) == 0x000010, "Member 'RealTimeImportBPLibrary_ActiveSoundPositionEventDelegate__DelegateSignature::PositionSecondsStart' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_ActiveSoundPositionEventDelegate__DelegateSignature, PositionSecondsEnd) == 0x000014, "Member 'RealTimeImportBPLibrary_ActiveSoundPositionEventDelegate__DelegateSignature::PositionSecondsEnd' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_ActiveSoundPositionEventDelegate__DelegateSignature, PositionPercent) == 0x000018, "Member 'RealTimeImportBPLibrary_ActiveSoundPositionEventDelegate__DelegateSignature::PositionPercent' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.CreateSoundWaveFromBytesEventDelegate
// 0x0030 (0x0030 - 0x0000)
struct RealTimeImportBPLibrary_CreateSoundWaveFromBytesEventDelegate final
{
public:
	int32                                         ErrorCode;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FF9[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventID;                                           // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USoundWaveProcedural*             Sound;                                             // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ErrorMessage;                                      // 0x0020(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportBPLibrary_CreateSoundWaveFromBytesEventDelegate) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_CreateSoundWaveFromBytesEventDelegate");
static_assert(sizeof(RealTimeImportBPLibrary_CreateSoundWaveFromBytesEventDelegate) == 0x000030, "Wrong size on RealTimeImportBPLibrary_CreateSoundWaveFromBytesEventDelegate");
static_assert(offsetof(RealTimeImportBPLibrary_CreateSoundWaveFromBytesEventDelegate, ErrorCode) == 0x000000, "Member 'RealTimeImportBPLibrary_CreateSoundWaveFromBytesEventDelegate::ErrorCode' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_CreateSoundWaveFromBytesEventDelegate, EventID) == 0x000008, "Member 'RealTimeImportBPLibrary_CreateSoundWaveFromBytesEventDelegate::EventID' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_CreateSoundWaveFromBytesEventDelegate, Sound) == 0x000018, "Member 'RealTimeImportBPLibrary_CreateSoundWaveFromBytesEventDelegate::Sound' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_CreateSoundWaveFromBytesEventDelegate, ErrorMessage) == 0x000020, "Member 'RealTimeImportBPLibrary_CreateSoundWaveFromBytesEventDelegate::ErrorMessage' has a wrong offset!");

// DelegateFunction RealTimeImport.RealTimeImportBPLibrary.CreateSoundWaveFromBytesEventDelegate__DelegateSignature
// 0x0030 (0x0030 - 0x0000)
struct RealTimeImportBPLibrary_CreateSoundWaveFromBytesEventDelegate__DelegateSignature final
{
public:
	int32                                         ErrorCode;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FFA[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventID;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundWaveProcedural*                   Sound;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ErrorMessage;                                      // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportBPLibrary_CreateSoundWaveFromBytesEventDelegate__DelegateSignature) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_CreateSoundWaveFromBytesEventDelegate__DelegateSignature");
static_assert(sizeof(RealTimeImportBPLibrary_CreateSoundWaveFromBytesEventDelegate__DelegateSignature) == 0x000030, "Wrong size on RealTimeImportBPLibrary_CreateSoundWaveFromBytesEventDelegate__DelegateSignature");
static_assert(offsetof(RealTimeImportBPLibrary_CreateSoundWaveFromBytesEventDelegate__DelegateSignature, ErrorCode) == 0x000000, "Member 'RealTimeImportBPLibrary_CreateSoundWaveFromBytesEventDelegate__DelegateSignature::ErrorCode' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_CreateSoundWaveFromBytesEventDelegate__DelegateSignature, EventID) == 0x000008, "Member 'RealTimeImportBPLibrary_CreateSoundWaveFromBytesEventDelegate__DelegateSignature::EventID' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_CreateSoundWaveFromBytesEventDelegate__DelegateSignature, Sound) == 0x000018, "Member 'RealTimeImportBPLibrary_CreateSoundWaveFromBytesEventDelegate__DelegateSignature::Sound' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_CreateSoundWaveFromBytesEventDelegate__DelegateSignature, ErrorMessage) == 0x000020, "Member 'RealTimeImportBPLibrary_CreateSoundWaveFromBytesEventDelegate__DelegateSignature::ErrorMessage' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.CreateSoundWaveFromFileEventDelegate
// 0x0040 (0x0040 - 0x0000)
struct RealTimeImportBPLibrary_CreateSoundWaveFromFileEventDelegate final
{
public:
	int32                                         ErrorCode;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FFB[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventID;                                           // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USoundWaveProcedural*             Sound;                                             // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0020(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ErrorMessage;                                      // 0x0030(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportBPLibrary_CreateSoundWaveFromFileEventDelegate) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_CreateSoundWaveFromFileEventDelegate");
static_assert(sizeof(RealTimeImportBPLibrary_CreateSoundWaveFromFileEventDelegate) == 0x000040, "Wrong size on RealTimeImportBPLibrary_CreateSoundWaveFromFileEventDelegate");
static_assert(offsetof(RealTimeImportBPLibrary_CreateSoundWaveFromFileEventDelegate, ErrorCode) == 0x000000, "Member 'RealTimeImportBPLibrary_CreateSoundWaveFromFileEventDelegate::ErrorCode' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_CreateSoundWaveFromFileEventDelegate, EventID) == 0x000008, "Member 'RealTimeImportBPLibrary_CreateSoundWaveFromFileEventDelegate::EventID' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_CreateSoundWaveFromFileEventDelegate, Sound) == 0x000018, "Member 'RealTimeImportBPLibrary_CreateSoundWaveFromFileEventDelegate::Sound' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_CreateSoundWaveFromFileEventDelegate, Filename) == 0x000020, "Member 'RealTimeImportBPLibrary_CreateSoundWaveFromFileEventDelegate::Filename' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_CreateSoundWaveFromFileEventDelegate, ErrorMessage) == 0x000030, "Member 'RealTimeImportBPLibrary_CreateSoundWaveFromFileEventDelegate::ErrorMessage' has a wrong offset!");

// DelegateFunction RealTimeImport.RealTimeImportBPLibrary.CreateSoundWaveFromFileEventDelegate__DelegateSignature
// 0x0040 (0x0040 - 0x0000)
struct RealTimeImportBPLibrary_CreateSoundWaveFromFileEventDelegate__DelegateSignature final
{
public:
	int32                                         ErrorCode;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FFC[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventID;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundWaveProcedural*                   Sound;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ErrorMessage;                                      // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportBPLibrary_CreateSoundWaveFromFileEventDelegate__DelegateSignature) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_CreateSoundWaveFromFileEventDelegate__DelegateSignature");
static_assert(sizeof(RealTimeImportBPLibrary_CreateSoundWaveFromFileEventDelegate__DelegateSignature) == 0x000040, "Wrong size on RealTimeImportBPLibrary_CreateSoundWaveFromFileEventDelegate__DelegateSignature");
static_assert(offsetof(RealTimeImportBPLibrary_CreateSoundWaveFromFileEventDelegate__DelegateSignature, ErrorCode) == 0x000000, "Member 'RealTimeImportBPLibrary_CreateSoundWaveFromFileEventDelegate__DelegateSignature::ErrorCode' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_CreateSoundWaveFromFileEventDelegate__DelegateSignature, EventID) == 0x000008, "Member 'RealTimeImportBPLibrary_CreateSoundWaveFromFileEventDelegate__DelegateSignature::EventID' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_CreateSoundWaveFromFileEventDelegate__DelegateSignature, Sound) == 0x000018, "Member 'RealTimeImportBPLibrary_CreateSoundWaveFromFileEventDelegate__DelegateSignature::Sound' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_CreateSoundWaveFromFileEventDelegate__DelegateSignature, Filename) == 0x000020, "Member 'RealTimeImportBPLibrary_CreateSoundWaveFromFileEventDelegate__DelegateSignature::Filename' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_CreateSoundWaveFromFileEventDelegate__DelegateSignature, ErrorMessage) == 0x000030, "Member 'RealTimeImportBPLibrary_CreateSoundWaveFromFileEventDelegate__DelegateSignature::ErrorMessage' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.LoadAllFilesFromDirectoryAsync
// 0x0038 (0x0038 - 0x0000)
struct RealTimeImportBPLibrary_LoadAllFilesFromDirectoryAsync final
{
public:
	ERTIDirectoryType                             DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERTIFileType                                  FileType;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FFD[0x6];                                      // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DirPath;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RecursiveSearch;                                   // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FFE[0x7];                                      // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventID;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URealTimeImportBPLibrary*               ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportBPLibrary_LoadAllFilesFromDirectoryAsync) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_LoadAllFilesFromDirectoryAsync");
static_assert(sizeof(RealTimeImportBPLibrary_LoadAllFilesFromDirectoryAsync) == 0x000038, "Wrong size on RealTimeImportBPLibrary_LoadAllFilesFromDirectoryAsync");
static_assert(offsetof(RealTimeImportBPLibrary_LoadAllFilesFromDirectoryAsync, DirectoryType) == 0x000000, "Member 'RealTimeImportBPLibrary_LoadAllFilesFromDirectoryAsync::DirectoryType' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadAllFilesFromDirectoryAsync, FileType) == 0x000001, "Member 'RealTimeImportBPLibrary_LoadAllFilesFromDirectoryAsync::FileType' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadAllFilesFromDirectoryAsync, DirPath) == 0x000008, "Member 'RealTimeImportBPLibrary_LoadAllFilesFromDirectoryAsync::DirPath' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadAllFilesFromDirectoryAsync, RecursiveSearch) == 0x000018, "Member 'RealTimeImportBPLibrary_LoadAllFilesFromDirectoryAsync::RecursiveSearch' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadAllFilesFromDirectoryAsync, EventID) == 0x000020, "Member 'RealTimeImportBPLibrary_LoadAllFilesFromDirectoryAsync::EventID' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadAllFilesFromDirectoryAsync, ReturnValue) == 0x000030, "Member 'RealTimeImportBPLibrary_LoadAllFilesFromDirectoryAsync::ReturnValue' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.LoadAllFilesFromDirectoryEventDelegate
// 0x0038 (0x0038 - 0x0000)
struct RealTimeImportBPLibrary_LoadAllFilesFromDirectoryEventDelegate final
{
public:
	class FString                                 EventID;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FFF[0x4];                                      // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Files;                                             // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         FilePaths;                                         // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportBPLibrary_LoadAllFilesFromDirectoryEventDelegate) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_LoadAllFilesFromDirectoryEventDelegate");
static_assert(sizeof(RealTimeImportBPLibrary_LoadAllFilesFromDirectoryEventDelegate) == 0x000038, "Wrong size on RealTimeImportBPLibrary_LoadAllFilesFromDirectoryEventDelegate");
static_assert(offsetof(RealTimeImportBPLibrary_LoadAllFilesFromDirectoryEventDelegate, EventID) == 0x000000, "Member 'RealTimeImportBPLibrary_LoadAllFilesFromDirectoryEventDelegate::EventID' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadAllFilesFromDirectoryEventDelegate, Count) == 0x000010, "Member 'RealTimeImportBPLibrary_LoadAllFilesFromDirectoryEventDelegate::Count' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadAllFilesFromDirectoryEventDelegate, Files) == 0x000018, "Member 'RealTimeImportBPLibrary_LoadAllFilesFromDirectoryEventDelegate::Files' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadAllFilesFromDirectoryEventDelegate, FilePaths) == 0x000028, "Member 'RealTimeImportBPLibrary_LoadAllFilesFromDirectoryEventDelegate::FilePaths' has a wrong offset!");

// DelegateFunction RealTimeImport.RealTimeImportBPLibrary.LoadAllFilesFromDirectoryEventDelegate__DelegateSignature
// 0x0038 (0x0038 - 0x0000)
struct RealTimeImportBPLibrary_LoadAllFilesFromDirectoryEventDelegate__DelegateSignature final
{
public:
	class FString                                 EventID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1000[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Files;                                             // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         FilePaths;                                         // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportBPLibrary_LoadAllFilesFromDirectoryEventDelegate__DelegateSignature) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_LoadAllFilesFromDirectoryEventDelegate__DelegateSignature");
static_assert(sizeof(RealTimeImportBPLibrary_LoadAllFilesFromDirectoryEventDelegate__DelegateSignature) == 0x000038, "Wrong size on RealTimeImportBPLibrary_LoadAllFilesFromDirectoryEventDelegate__DelegateSignature");
static_assert(offsetof(RealTimeImportBPLibrary_LoadAllFilesFromDirectoryEventDelegate__DelegateSignature, EventID) == 0x000000, "Member 'RealTimeImportBPLibrary_LoadAllFilesFromDirectoryEventDelegate__DelegateSignature::EventID' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadAllFilesFromDirectoryEventDelegate__DelegateSignature, Count) == 0x000010, "Member 'RealTimeImportBPLibrary_LoadAllFilesFromDirectoryEventDelegate__DelegateSignature::Count' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadAllFilesFromDirectoryEventDelegate__DelegateSignature, Files) == 0x000018, "Member 'RealTimeImportBPLibrary_LoadAllFilesFromDirectoryEventDelegate__DelegateSignature::Files' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadAllFilesFromDirectoryEventDelegate__DelegateSignature, FilePaths) == 0x000028, "Member 'RealTimeImportBPLibrary_LoadAllFilesFromDirectoryEventDelegate__DelegateSignature::FilePaths' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.LoadFileAsync
// 0x0030 (0x0030 - 0x0000)
struct RealTimeImportBPLibrary_LoadFileAsync final
{
public:
	ERTIDirectoryType                             DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1001[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventID;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URealTimeImportBPLibrary*               ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportBPLibrary_LoadFileAsync) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_LoadFileAsync");
static_assert(sizeof(RealTimeImportBPLibrary_LoadFileAsync) == 0x000030, "Wrong size on RealTimeImportBPLibrary_LoadFileAsync");
static_assert(offsetof(RealTimeImportBPLibrary_LoadFileAsync, DirectoryType) == 0x000000, "Member 'RealTimeImportBPLibrary_LoadFileAsync::DirectoryType' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadFileAsync, FilePath) == 0x000008, "Member 'RealTimeImportBPLibrary_LoadFileAsync::FilePath' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadFileAsync, EventID) == 0x000018, "Member 'RealTimeImportBPLibrary_LoadFileAsync::EventID' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadFileAsync, ReturnValue) == 0x000028, "Member 'RealTimeImportBPLibrary_LoadFileAsync::ReturnValue' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.LoadFileEventDelegate
// 0x0048 (0x0048 - 0x0000)
struct RealTimeImportBPLibrary_LoadFileEventDelegate final
{
public:
	int32                                         ErrorCode;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1002[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventID;                                           // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 bytes;                                             // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0028(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ErrorMessage;                                      // 0x0038(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportBPLibrary_LoadFileEventDelegate) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_LoadFileEventDelegate");
static_assert(sizeof(RealTimeImportBPLibrary_LoadFileEventDelegate) == 0x000048, "Wrong size on RealTimeImportBPLibrary_LoadFileEventDelegate");
static_assert(offsetof(RealTimeImportBPLibrary_LoadFileEventDelegate, ErrorCode) == 0x000000, "Member 'RealTimeImportBPLibrary_LoadFileEventDelegate::ErrorCode' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadFileEventDelegate, EventID) == 0x000008, "Member 'RealTimeImportBPLibrary_LoadFileEventDelegate::EventID' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadFileEventDelegate, bytes) == 0x000018, "Member 'RealTimeImportBPLibrary_LoadFileEventDelegate::bytes' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadFileEventDelegate, Filename) == 0x000028, "Member 'RealTimeImportBPLibrary_LoadFileEventDelegate::Filename' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadFileEventDelegate, ErrorMessage) == 0x000038, "Member 'RealTimeImportBPLibrary_LoadFileEventDelegate::ErrorMessage' has a wrong offset!");

// DelegateFunction RealTimeImport.RealTimeImportBPLibrary.LoadFileEventDelegate__DelegateSignature
// 0x0048 (0x0048 - 0x0000)
struct RealTimeImportBPLibrary_LoadFileEventDelegate__DelegateSignature final
{
public:
	int32                                         ErrorCode;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1003[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventID;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 bytes;                                             // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ErrorMessage;                                      // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportBPLibrary_LoadFileEventDelegate__DelegateSignature) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_LoadFileEventDelegate__DelegateSignature");
static_assert(sizeof(RealTimeImportBPLibrary_LoadFileEventDelegate__DelegateSignature) == 0x000048, "Wrong size on RealTimeImportBPLibrary_LoadFileEventDelegate__DelegateSignature");
static_assert(offsetof(RealTimeImportBPLibrary_LoadFileEventDelegate__DelegateSignature, ErrorCode) == 0x000000, "Member 'RealTimeImportBPLibrary_LoadFileEventDelegate__DelegateSignature::ErrorCode' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadFileEventDelegate__DelegateSignature, EventID) == 0x000008, "Member 'RealTimeImportBPLibrary_LoadFileEventDelegate__DelegateSignature::EventID' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadFileEventDelegate__DelegateSignature, bytes) == 0x000018, "Member 'RealTimeImportBPLibrary_LoadFileEventDelegate__DelegateSignature::bytes' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadFileEventDelegate__DelegateSignature, Filename) == 0x000028, "Member 'RealTimeImportBPLibrary_LoadFileEventDelegate__DelegateSignature::Filename' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadFileEventDelegate__DelegateSignature, ErrorMessage) == 0x000038, "Member 'RealTimeImportBPLibrary_LoadFileEventDelegate__DelegateSignature::ErrorMessage' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.LoadImageBytesEventDelegate
// 0x0030 (0x0030 - 0x0000)
struct RealTimeImportBPLibrary_LoadImageBytesEventDelegate final
{
public:
	int32                                         ErrorCode;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1004[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventID;                                           // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTexture2D*                       Texture;                                           // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ErrorMessage;                                      // 0x0020(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportBPLibrary_LoadImageBytesEventDelegate) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_LoadImageBytesEventDelegate");
static_assert(sizeof(RealTimeImportBPLibrary_LoadImageBytesEventDelegate) == 0x000030, "Wrong size on RealTimeImportBPLibrary_LoadImageBytesEventDelegate");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageBytesEventDelegate, ErrorCode) == 0x000000, "Member 'RealTimeImportBPLibrary_LoadImageBytesEventDelegate::ErrorCode' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageBytesEventDelegate, EventID) == 0x000008, "Member 'RealTimeImportBPLibrary_LoadImageBytesEventDelegate::EventID' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageBytesEventDelegate, Texture) == 0x000018, "Member 'RealTimeImportBPLibrary_LoadImageBytesEventDelegate::Texture' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageBytesEventDelegate, ErrorMessage) == 0x000020, "Member 'RealTimeImportBPLibrary_LoadImageBytesEventDelegate::ErrorMessage' has a wrong offset!");

// DelegateFunction RealTimeImport.RealTimeImportBPLibrary.LoadImageBytesEventDelegate__DelegateSignature
// 0x0030 (0x0030 - 0x0000)
struct RealTimeImportBPLibrary_LoadImageBytesEventDelegate__DelegateSignature final
{
public:
	int32                                         ErrorCode;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1005[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventID;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Texture;                                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ErrorMessage;                                      // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportBPLibrary_LoadImageBytesEventDelegate__DelegateSignature) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_LoadImageBytesEventDelegate__DelegateSignature");
static_assert(sizeof(RealTimeImportBPLibrary_LoadImageBytesEventDelegate__DelegateSignature) == 0x000030, "Wrong size on RealTimeImportBPLibrary_LoadImageBytesEventDelegate__DelegateSignature");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageBytesEventDelegate__DelegateSignature, ErrorCode) == 0x000000, "Member 'RealTimeImportBPLibrary_LoadImageBytesEventDelegate__DelegateSignature::ErrorCode' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageBytesEventDelegate__DelegateSignature, EventID) == 0x000008, "Member 'RealTimeImportBPLibrary_LoadImageBytesEventDelegate__DelegateSignature::EventID' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageBytesEventDelegate__DelegateSignature, Texture) == 0x000018, "Member 'RealTimeImportBPLibrary_LoadImageBytesEventDelegate__DelegateSignature::Texture' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageBytesEventDelegate__DelegateSignature, ErrorMessage) == 0x000020, "Member 'RealTimeImportBPLibrary_LoadImageBytesEventDelegate__DelegateSignature::ErrorMessage' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.LoadImageFileEventDelegate
// 0x0040 (0x0040 - 0x0000)
struct RealTimeImportBPLibrary_LoadImageFileEventDelegate final
{
public:
	int32                                         ErrorCode;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1006[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventID;                                           // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTexture2D*                       Texture;                                           // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0020(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ErrorMessage;                                      // 0x0030(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportBPLibrary_LoadImageFileEventDelegate) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_LoadImageFileEventDelegate");
static_assert(sizeof(RealTimeImportBPLibrary_LoadImageFileEventDelegate) == 0x000040, "Wrong size on RealTimeImportBPLibrary_LoadImageFileEventDelegate");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageFileEventDelegate, ErrorCode) == 0x000000, "Member 'RealTimeImportBPLibrary_LoadImageFileEventDelegate::ErrorCode' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageFileEventDelegate, EventID) == 0x000008, "Member 'RealTimeImportBPLibrary_LoadImageFileEventDelegate::EventID' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageFileEventDelegate, Texture) == 0x000018, "Member 'RealTimeImportBPLibrary_LoadImageFileEventDelegate::Texture' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageFileEventDelegate, Filename) == 0x000020, "Member 'RealTimeImportBPLibrary_LoadImageFileEventDelegate::Filename' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageFileEventDelegate, ErrorMessage) == 0x000030, "Member 'RealTimeImportBPLibrary_LoadImageFileEventDelegate::ErrorMessage' has a wrong offset!");

// DelegateFunction RealTimeImport.RealTimeImportBPLibrary.LoadImageFileEventDelegate__DelegateSignature
// 0x0040 (0x0040 - 0x0000)
struct RealTimeImportBPLibrary_LoadImageFileEventDelegate__DelegateSignature final
{
public:
	int32                                         ErrorCode;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1007[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventID;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Texture;                                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ErrorMessage;                                      // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportBPLibrary_LoadImageFileEventDelegate__DelegateSignature) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_LoadImageFileEventDelegate__DelegateSignature");
static_assert(sizeof(RealTimeImportBPLibrary_LoadImageFileEventDelegate__DelegateSignature) == 0x000040, "Wrong size on RealTimeImportBPLibrary_LoadImageFileEventDelegate__DelegateSignature");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageFileEventDelegate__DelegateSignature, ErrorCode) == 0x000000, "Member 'RealTimeImportBPLibrary_LoadImageFileEventDelegate__DelegateSignature::ErrorCode' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageFileEventDelegate__DelegateSignature, EventID) == 0x000008, "Member 'RealTimeImportBPLibrary_LoadImageFileEventDelegate__DelegateSignature::EventID' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageFileEventDelegate__DelegateSignature, Texture) == 0x000018, "Member 'RealTimeImportBPLibrary_LoadImageFileEventDelegate__DelegateSignature::Texture' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageFileEventDelegate__DelegateSignature, Filename) == 0x000020, "Member 'RealTimeImportBPLibrary_LoadImageFileEventDelegate__DelegateSignature::Filename' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_LoadImageFileEventDelegate__DelegateSignature, ErrorMessage) == 0x000030, "Member 'RealTimeImportBPLibrary_LoadImageFileEventDelegate__DelegateSignature::ErrorMessage' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.PlaySoundEventDelegate
// 0x0030 (0x0030 - 0x0000)
struct RealTimeImportBPLibrary_PlaySoundEventDelegate final
{
public:
	int32                                         ErrorCode;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1008[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FileID;                                            // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ErrorMessage;                                      // 0x0018(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationInSeconds;                                 // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1009[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RealTimeImportBPLibrary_PlaySoundEventDelegate) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_PlaySoundEventDelegate");
static_assert(sizeof(RealTimeImportBPLibrary_PlaySoundEventDelegate) == 0x000030, "Wrong size on RealTimeImportBPLibrary_PlaySoundEventDelegate");
static_assert(offsetof(RealTimeImportBPLibrary_PlaySoundEventDelegate, ErrorCode) == 0x000000, "Member 'RealTimeImportBPLibrary_PlaySoundEventDelegate::ErrorCode' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_PlaySoundEventDelegate, FileID) == 0x000008, "Member 'RealTimeImportBPLibrary_PlaySoundEventDelegate::FileID' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_PlaySoundEventDelegate, ErrorMessage) == 0x000018, "Member 'RealTimeImportBPLibrary_PlaySoundEventDelegate::ErrorMessage' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_PlaySoundEventDelegate, DurationInSeconds) == 0x000028, "Member 'RealTimeImportBPLibrary_PlaySoundEventDelegate::DurationInSeconds' has a wrong offset!");

// DelegateFunction RealTimeImport.RealTimeImportBPLibrary.PlaySoundEventDelegate__DelegateSignature
// 0x0030 (0x0030 - 0x0000)
struct RealTimeImportBPLibrary_PlaySoundEventDelegate__DelegateSignature final
{
public:
	int32                                         ErrorCode;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_100A[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FileID;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ErrorMessage;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationInSeconds;                                 // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_100B[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RealTimeImportBPLibrary_PlaySoundEventDelegate__DelegateSignature) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_PlaySoundEventDelegate__DelegateSignature");
static_assert(sizeof(RealTimeImportBPLibrary_PlaySoundEventDelegate__DelegateSignature) == 0x000030, "Wrong size on RealTimeImportBPLibrary_PlaySoundEventDelegate__DelegateSignature");
static_assert(offsetof(RealTimeImportBPLibrary_PlaySoundEventDelegate__DelegateSignature, ErrorCode) == 0x000000, "Member 'RealTimeImportBPLibrary_PlaySoundEventDelegate__DelegateSignature::ErrorCode' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_PlaySoundEventDelegate__DelegateSignature, FileID) == 0x000008, "Member 'RealTimeImportBPLibrary_PlaySoundEventDelegate__DelegateSignature::FileID' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_PlaySoundEventDelegate__DelegateSignature, ErrorMessage) == 0x000018, "Member 'RealTimeImportBPLibrary_PlaySoundEventDelegate__DelegateSignature::ErrorMessage' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_PlaySoundEventDelegate__DelegateSignature, DurationInSeconds) == 0x000028, "Member 'RealTimeImportBPLibrary_PlaySoundEventDelegate__DelegateSignature::DurationInSeconds' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.SaveFileAsync
// 0x0048 (0x0048 - 0x0000)
struct RealTimeImportBPLibrary_SaveFileAsync final
{
public:
	ERTIDirectoryType                             DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_100C[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CreateDirectories;                                 // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverwriteFile;                                     // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_100D[0x6];                                     // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 bytes;                                             // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 EventID;                                           // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URealTimeImportBPLibrary*               ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportBPLibrary_SaveFileAsync) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_SaveFileAsync");
static_assert(sizeof(RealTimeImportBPLibrary_SaveFileAsync) == 0x000048, "Wrong size on RealTimeImportBPLibrary_SaveFileAsync");
static_assert(offsetof(RealTimeImportBPLibrary_SaveFileAsync, DirectoryType) == 0x000000, "Member 'RealTimeImportBPLibrary_SaveFileAsync::DirectoryType' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_SaveFileAsync, FilePath) == 0x000008, "Member 'RealTimeImportBPLibrary_SaveFileAsync::FilePath' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_SaveFileAsync, CreateDirectories) == 0x000018, "Member 'RealTimeImportBPLibrary_SaveFileAsync::CreateDirectories' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_SaveFileAsync, OverwriteFile) == 0x000019, "Member 'RealTimeImportBPLibrary_SaveFileAsync::OverwriteFile' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_SaveFileAsync, bytes) == 0x000020, "Member 'RealTimeImportBPLibrary_SaveFileAsync::bytes' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_SaveFileAsync, EventID) == 0x000030, "Member 'RealTimeImportBPLibrary_SaveFileAsync::EventID' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_SaveFileAsync, ReturnValue) == 0x000040, "Member 'RealTimeImportBPLibrary_SaveFileAsync::ReturnValue' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.SaveFileEventDelegate
// 0x0048 (0x0048 - 0x0000)
struct RealTimeImportBPLibrary_SaveFileEventDelegate final
{
public:
	int32                                         ErrorCode;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_100E[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventID;                                           // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0018(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FullPath;                                          // 0x0028(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ErrorMessage;                                      // 0x0038(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportBPLibrary_SaveFileEventDelegate) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_SaveFileEventDelegate");
static_assert(sizeof(RealTimeImportBPLibrary_SaveFileEventDelegate) == 0x000048, "Wrong size on RealTimeImportBPLibrary_SaveFileEventDelegate");
static_assert(offsetof(RealTimeImportBPLibrary_SaveFileEventDelegate, ErrorCode) == 0x000000, "Member 'RealTimeImportBPLibrary_SaveFileEventDelegate::ErrorCode' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_SaveFileEventDelegate, EventID) == 0x000008, "Member 'RealTimeImportBPLibrary_SaveFileEventDelegate::EventID' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_SaveFileEventDelegate, Filename) == 0x000018, "Member 'RealTimeImportBPLibrary_SaveFileEventDelegate::Filename' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_SaveFileEventDelegate, FullPath) == 0x000028, "Member 'RealTimeImportBPLibrary_SaveFileEventDelegate::FullPath' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_SaveFileEventDelegate, ErrorMessage) == 0x000038, "Member 'RealTimeImportBPLibrary_SaveFileEventDelegate::ErrorMessage' has a wrong offset!");

// DelegateFunction RealTimeImport.RealTimeImportBPLibrary.SaveFileEventDelegate__DelegateSignature
// 0x0048 (0x0048 - 0x0000)
struct RealTimeImportBPLibrary_SaveFileEventDelegate__DelegateSignature final
{
public:
	int32                                         ErrorCode;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_100F[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventID;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FullPath;                                          // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ErrorMessage;                                      // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportBPLibrary_SaveFileEventDelegate__DelegateSignature) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_SaveFileEventDelegate__DelegateSignature");
static_assert(sizeof(RealTimeImportBPLibrary_SaveFileEventDelegate__DelegateSignature) == 0x000048, "Wrong size on RealTimeImportBPLibrary_SaveFileEventDelegate__DelegateSignature");
static_assert(offsetof(RealTimeImportBPLibrary_SaveFileEventDelegate__DelegateSignature, ErrorCode) == 0x000000, "Member 'RealTimeImportBPLibrary_SaveFileEventDelegate__DelegateSignature::ErrorCode' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_SaveFileEventDelegate__DelegateSignature, EventID) == 0x000008, "Member 'RealTimeImportBPLibrary_SaveFileEventDelegate__DelegateSignature::EventID' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_SaveFileEventDelegate__DelegateSignature, Filename) == 0x000018, "Member 'RealTimeImportBPLibrary_SaveFileEventDelegate__DelegateSignature::Filename' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_SaveFileEventDelegate__DelegateSignature, FullPath) == 0x000028, "Member 'RealTimeImportBPLibrary_SaveFileEventDelegate__DelegateSignature::FullPath' has a wrong offset!");
static_assert(offsetof(RealTimeImportBPLibrary_SaveFileEventDelegate__DelegateSignature, ErrorMessage) == 0x000038, "Member 'RealTimeImportBPLibrary_SaveFileEventDelegate__DelegateSignature::ErrorMessage' has a wrong offset!");

// Function RealTimeImport.RealTimeImportBPLibrary.StopSoundEventDelegate
// 0x0010 (0x0010 - 0x0000)
struct RealTimeImportBPLibrary_StopSoundEventDelegate final
{
public:
	class FString                                 FileID;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportBPLibrary_StopSoundEventDelegate) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_StopSoundEventDelegate");
static_assert(sizeof(RealTimeImportBPLibrary_StopSoundEventDelegate) == 0x000010, "Wrong size on RealTimeImportBPLibrary_StopSoundEventDelegate");
static_assert(offsetof(RealTimeImportBPLibrary_StopSoundEventDelegate, FileID) == 0x000000, "Member 'RealTimeImportBPLibrary_StopSoundEventDelegate::FileID' has a wrong offset!");

// DelegateFunction RealTimeImport.RealTimeImportBPLibrary.StopSoundEventDelegate__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct RealTimeImportBPLibrary_StopSoundEventDelegate__DelegateSignature final
{
public:
	class FString                                 FileID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportBPLibrary_StopSoundEventDelegate__DelegateSignature) == 0x000008, "Wrong alignment on RealTimeImportBPLibrary_StopSoundEventDelegate__DelegateSignature");
static_assert(sizeof(RealTimeImportBPLibrary_StopSoundEventDelegate__DelegateSignature) == 0x000010, "Wrong size on RealTimeImportBPLibrary_StopSoundEventDelegate__DelegateSignature");
static_assert(offsetof(RealTimeImportBPLibrary_StopSoundEventDelegate__DelegateSignature, FileID) == 0x000000, "Member 'RealTimeImportBPLibrary_StopSoundEventDelegate__DelegateSignature::FileID' has a wrong offset!");

// Function RealTimeImport.RealTimeImportImage.getImageColors
// 0x0020 (0x0020 - 0x0000)
struct RealTimeImportImage_GetImageColors final
{
public:
	TArray<uint8>                                 ImageBytes;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FColor>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportImage_GetImageColors) == 0x000008, "Wrong alignment on RealTimeImportImage_GetImageColors");
static_assert(sizeof(RealTimeImportImage_GetImageColors) == 0x000020, "Wrong size on RealTimeImportImage_GetImageColors");
static_assert(offsetof(RealTimeImportImage_GetImageColors, ImageBytes) == 0x000000, "Member 'RealTimeImportImage_GetImageColors::ImageBytes' has a wrong offset!");
static_assert(offsetof(RealTimeImportImage_GetImageColors, ReturnValue) == 0x000010, "Member 'RealTimeImportImage_GetImageColors::ReturnValue' has a wrong offset!");

// Function RealTimeImport.RealTimeImportImage.getRealTimeImportImage
// 0x0008 (0x0008 - 0x0000)
struct RealTimeImportImage_GetRealTimeImportImage final
{
public:
	class URealTimeImportImage*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportImage_GetRealTimeImportImage) == 0x000008, "Wrong alignment on RealTimeImportImage_GetRealTimeImportImage");
static_assert(sizeof(RealTimeImportImage_GetRealTimeImportImage) == 0x000008, "Wrong size on RealTimeImportImage_GetRealTimeImportImage");
static_assert(offsetof(RealTimeImportImage_GetRealTimeImportImage, ReturnValue) == 0x000000, "Member 'RealTimeImportImage_GetRealTimeImportImage::ReturnValue' has a wrong offset!");

// Function RealTimeImport.RealTimeImportMesh.cleanTest
// 0x0010 (0x0010 - 0x0000)
struct RealTimeImportMesh_CleanTest final
{
public:
	TArray<struct FRTIModelStruct>                ModelStructs;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportMesh_CleanTest) == 0x000008, "Wrong alignment on RealTimeImportMesh_CleanTest");
static_assert(sizeof(RealTimeImportMesh_CleanTest) == 0x000010, "Wrong size on RealTimeImportMesh_CleanTest");
static_assert(offsetof(RealTimeImportMesh_CleanTest, ModelStructs) == 0x000000, "Member 'RealTimeImportMesh_CleanTest::ModelStructs' has a wrong offset!");

// Function RealTimeImport.RealTimeImportMesh.getRealTimeImportMesh
// 0x0008 (0x0008 - 0x0000)
struct RealTimeImportMesh_GetRealTimeImportMesh final
{
public:
	class URealTimeImportMesh*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportMesh_GetRealTimeImportMesh) == 0x000008, "Wrong alignment on RealTimeImportMesh_GetRealTimeImportMesh");
static_assert(sizeof(RealTimeImportMesh_GetRealTimeImportMesh) == 0x000008, "Wrong size on RealTimeImportMesh_GetRealTimeImportMesh");
static_assert(offsetof(RealTimeImportMesh_GetRealTimeImportMesh, ReturnValue) == 0x000000, "Member 'RealTimeImportMesh_GetRealTimeImportMesh::ReturnValue' has a wrong offset!");

// Function RealTimeImport.RealTimeImportSound.getRealTimeImportSound
// 0x0008 (0x0008 - 0x0000)
struct RealTimeImportSound_GetRealTimeImportSound final
{
public:
	class URealTimeImportSound*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RealTimeImportSound_GetRealTimeImportSound) == 0x000008, "Wrong alignment on RealTimeImportSound_GetRealTimeImportSound");
static_assert(sizeof(RealTimeImportSound_GetRealTimeImportSound) == 0x000008, "Wrong size on RealTimeImportSound_GetRealTimeImportSound");
static_assert(offsetof(RealTimeImportSound_GetRealTimeImportSound, ReturnValue) == 0x000000, "Member 'RealTimeImportSound_GetRealTimeImportSound::ReturnValue' has a wrong offset!");

}

