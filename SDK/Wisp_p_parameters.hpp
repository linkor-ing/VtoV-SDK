#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Wisp_p

#include "Basic.hpp"

#include "Enum_interactionActions_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "AIModule_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function wisp_p.wisp_p_C.ExecuteUbergraph_wisp_p
// 0x08C8 (0x08C8 - 0x0000)
struct Wisp_p_C_ExecuteUbergraph_wisp_p final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0004(0x0010)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue;                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue;  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2361[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_1;                       // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPathFollowingResult                          K2Node_CustomEvent_MovementResult_1;               // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2362[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EPathFollowingResult MovementResult)> K2Node_CreateDelegate_OutputDelegate;              // 0x002C(0x0010)(ZeroConstructor, NoDestructor)
	EPathFollowingResult                          K2Node_CustomEvent_MovementResult;                 // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2363[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EPathFollowingResult MovementResult)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0040(0x0010)(ZeroConstructor, NoDestructor)
	EPathFollowingResult                          Temp_byte_Variable;                                // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2364[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUmg_flashbang_C*                       CallFunc_Create_ReturnValue;                       // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_activate;                             // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_static;                               // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_frozen;                               // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_active;                               // 0x0063(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2365[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_actor_1;                              // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_4;                             // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_5;                                // 0x0074(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                K2Node_Event_impact_1;                             // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_skipSetting;                          // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2366[0x7];                                     // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_Event_key_1;                                // 0x0110(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_11;                            // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_4;                                // 0x0128(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         K2Node_Event_damage_3;                             // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_fuel;                                 // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_10;                            // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_3;                                // 0x01C0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         K2Node_Event_index;                                // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_interactionActions                       K2Node_Event_action;                               // 0x024C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2367[0x3];                                     // 0x024D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_9;                             // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_8;                             // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_2;                             // 0x0260(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_location_1;                           // 0x0264(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_7;                             // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_6;                             // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_5;                             // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_wheelDelta;                           // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2368[0x4];                                     // 0x028C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_4;                             // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Event_mouse;                                // 0x0298(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_3;                             // 0x02A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_Event_key;                                  // 0x02A8(0x0018)(HasGetValueTypeHash)
	bool                                          K2Node_Event_pressed;                              // 0x02C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2369[0x3];                                     // 0x02C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_temperature_1;                        // 0x02C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_temperature;                          // 0x02C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_speed;                                // 0x02CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_2;                             // 0x02D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_2;                                // 0x02D8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class FString                                 K2Node_Event_name;                                 // 0x0360(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         K2Node_Event_volume;                               // 0x0370(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_236A[0x4];                                     // 0x0374(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_1;                             // 0x0378(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_location;                             // 0x0380(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_1;                             // 0x038C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_clean;                                // 0x0390(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_236B[0x7];                                     // 0x0391(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player;                               // 0x0398(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_1;                                // 0x03A0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AHook_C*                                K2Node_Event_hook;                                 // 0x0428(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Condition;                      // 0x0430(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_236C[0x3];                                     // 0x0431(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0434(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0438(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VInterpTo_ReturnValue;                    // 0x043C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0448(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_PerlinNoise1D_ReturnValue;                // 0x04D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue_1;       // 0x04D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_2;                       // 0x04D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x04DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x04E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VictoryFloatPlusEquals_FloatOut;          // 0x04E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x04E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x04F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult_1;  // 0x04F8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AWaterVolume_C*                         K2Node_Event_water_3;                              // 0x0580(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWaterVolume_C*                         K2Node_Event_water_2;                              // 0x0588(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWaterVolume_C*                         K2Node_Event_water_1;                              // 0x0590(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage;                               // 0x0598(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit;                                  // 0x059C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_236D[0x4];                                     // 0x0624(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_actor;                                // 0x0628(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_impact;                               // 0x0630(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_236E[0x4];                                     // 0x063C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0640(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0648(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_236F[0x4];                                     // 0x0654(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode;          // 0x0658(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x0660(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0664(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0665(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0666(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_RandomBoolWithWeight_ReturnValue;         // 0x0667(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_WasRecentlyRendered_ReturnValue;          // 0x0668(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2370[0x7];                                     // 0x0669(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AWaterVolume_C*                         K2Node_Event_water;                                // 0x0670(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0678(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0679(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2371[0x2];                                     // 0x067A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RandomFloatInRange_ReturnValue_2;         // 0x067C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0680(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_3;         // 0x068C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x0690(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x069C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_ProjectPointToNavigation_ProjectedLocation; // 0x06A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_ProjectPointToNavigation_ReturnValue;  // 0x06B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2372[0x3];                                     // 0x06B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_1;  // 0x06B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_1;           // 0x06C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_1;            // 0x06C8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_1;       // 0x06D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep_1;           // 0x06D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2373[0x3];                                     // 0x06D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult_1;          // 0x06D8(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0760(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2374[0x4];                                     // 0x076C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADoor_C*                                K2Node_DynamicCast_AsDoor;                         // 0x0770(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0778(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2375[0x3];                                     // 0x0779(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RandomFloatInRange_ReturnValue_4;         // 0x077C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_ComponentBoundEvent_Pawn;                   // 0x0780(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetRandomPointInNavigableRadius_RandomLocation; // 0x0788(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_GetRandomPointInNavigableRadius_ReturnValue; // 0x0794(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2376[0x3];                                     // 0x0795(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_SelectVector_ReturnValue;                 // 0x0798(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2377[0x4];                                     // 0x07A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAIAsyncTaskBlueprintProxy*             CallFunc_CreateMoveToProxyObject_ReturnValue;      // 0x07A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x07B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2378[0x7];                                     // 0x07B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x07B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x07C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x07C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x07D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x07E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x07E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x07F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x07F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x07FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2379[0x3];                                     // 0x07FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0800(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0888(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_237A[0x4];                                     // 0x0894(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_DynamicCast_AsMain_Player;                  // 0x0898(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x08A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_237B[0x7];                                     // 0x08A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode_1;        // 0x08A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x08B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x08BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_p_C_ExecuteUbergraph_wisp_p) == 0x000008, "Wrong alignment on Wisp_p_C_ExecuteUbergraph_wisp_p");
static_assert(sizeof(Wisp_p_C_ExecuteUbergraph_wisp_p) == 0x0008C8, "Wrong size on Wisp_p_C_ExecuteUbergraph_wisp_p");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, EntryPoint) == 0x000000, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::EntryPoint' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, Temp_struct_Variable) == 0x000004, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_Ease_ReturnValue) == 0x000014, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue) == 0x000018, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_SwitchEnum_CmpSuccess) == 0x00001C, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_Lerp_ReturnValue) == 0x000020, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_Lerp_ReturnValue_1) == 0x000024, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_CustomEvent_MovementResult_1) == 0x000028, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_CustomEvent_MovementResult_1' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_CreateDelegate_OutputDelegate) == 0x00002C, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_CustomEvent_MovementResult) == 0x00003C, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_CustomEvent_MovementResult' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_CreateDelegate_OutputDelegate_1) == 0x000040, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, Temp_byte_Variable) == 0x000050, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_Create_ReturnValue) == 0x000058, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_activate) == 0x000060, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_activate' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_static) == 0x000061, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_static' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_frozen) == 0x000062, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_frozen' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_active) == 0x000063, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_active' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_actor_1) == 0x000068, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_actor_1' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_damage_4) == 0x000070, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_damage_4' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_hit_5) == 0x000074, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_hit_5' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_impact_1) == 0x0000FC, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_impact_1' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_skipSetting) == 0x000108, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_skipSetting' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_key_1) == 0x000110, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_key_1' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_player_11) == 0x000120, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_player_11' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_hit_4) == 0x000128, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_hit_4' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_damage_3) == 0x0001B0, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_damage_3' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_fuel) == 0x0001B4, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_fuel' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_player_10) == 0x0001B8, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_player_10' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_hit_3) == 0x0001C0, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_hit_3' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_index) == 0x000248, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_index' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_action) == 0x00024C, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_action' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_player_9) == 0x000250, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_player_9' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_player_8) == 0x000258, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_player_8' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_damage_2) == 0x000260, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_damage_2' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_location_1) == 0x000264, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_location_1' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_player_7) == 0x000270, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_player_7' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_player_6) == 0x000278, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_player_6' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_player_5) == 0x000280, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_player_5' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_wheelDelta) == 0x000288, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_wheelDelta' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_player_4) == 0x000290, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_player_4' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_mouse) == 0x000298, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_mouse' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_player_3) == 0x0002A0, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_player_3' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_key) == 0x0002A8, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_key' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_pressed) == 0x0002C0, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_pressed' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_temperature_1) == 0x0002C4, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_temperature_1' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_temperature) == 0x0002C8, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_temperature' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_speed) == 0x0002CC, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_speed' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_player_2) == 0x0002D0, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_player_2' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_hit_2) == 0x0002D8, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_hit_2' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_name) == 0x000360, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_name' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_volume) == 0x000370, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_volume' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_player_1) == 0x000378, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_player_1' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_location) == 0x000380, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_location' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_damage_1) == 0x00038C, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_damage_1' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_clean) == 0x000390, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_clean' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_player) == 0x000398, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_player' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_hit_1) == 0x0003A0, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_hit_1' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_hook) == 0x000428, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_hook' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_CustomEvent_Condition) == 0x000430, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_CustomEvent_Condition' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_DeltaSeconds) == 0x000434, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000438, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_VInterpTo_ReturnValue) == 0x00043C, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_VInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000448, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_PerlinNoise1D_ReturnValue) == 0x0004D0, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_PerlinNoise1D_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_GetWorldDeltaSeconds_ReturnValue_1) == 0x0004D4, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_GetWorldDeltaSeconds_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_Lerp_ReturnValue_2) == 0x0004D8, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_Lerp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0004DC, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_Add_FloatFloat_ReturnValue) == 0x0004E0, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_VictoryFloatPlusEquals_FloatOut) == 0x0004E4, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_VictoryFloatPlusEquals_FloatOut' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_MakeVector_ReturnValue) == 0x0004E8, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_RandomFloatInRange_ReturnValue) == 0x0004F4, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_K2_SetRelativeLocation_SweepHitResult_1) == 0x0004F8, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_K2_SetRelativeLocation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_water_3) == 0x000580, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_water_3' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_water_2) == 0x000588, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_water_2' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_water_1) == 0x000590, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_water_1' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_damage) == 0x000598, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_damage' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_hit) == 0x00059C, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_hit' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_actor) == 0x000628, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_actor' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_impact) == 0x000630, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_impact' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_GetPlayerPawn_ReturnValue) == 0x000640, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000648, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_getMainGamemode_AsMain_Gamemode) == 0x000658, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_getMainGamemode_AsMain_Gamemode' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x000660, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000664, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_Not_PreBool_ReturnValue) == 0x000665, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_BooleanOR_ReturnValue) == 0x000666, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_RandomBoolWithWeight_ReturnValue) == 0x000667, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_RandomBoolWithWeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_WasRecentlyRendered_ReturnValue) == 0x000668, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_WasRecentlyRendered_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_Event_water) == 0x000670, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_Event_water' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_Not_PreBool_ReturnValue_1) == 0x000678, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_BooleanAND_ReturnValue) == 0x000679, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_RandomFloatInRange_ReturnValue_2) == 0x00067C, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_RandomFloatInRange_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_MakeVector_ReturnValue_1) == 0x000680, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_RandomFloatInRange_ReturnValue_3) == 0x00068C, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_RandomFloatInRange_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_RotateAngleAxis_ReturnValue) == 0x000690, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_MakeVector_ReturnValue_2) == 0x00069C, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_K2_ProjectPointToNavigation_ProjectedLocation) == 0x0006A8, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_K2_ProjectPointToNavigation_ProjectedLocation' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_K2_ProjectPointToNavigation_ReturnValue) == 0x0006B4, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_K2_ProjectPointToNavigation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_ComponentBoundEvent_OverlappedComponent_1) == 0x0006B8, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_ComponentBoundEvent_OverlappedComponent_1' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_ComponentBoundEvent_OtherActor_1) == 0x0006C0, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_ComponentBoundEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_ComponentBoundEvent_OtherComp_1) == 0x0006C8, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_ComponentBoundEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_ComponentBoundEvent_OtherBodyIndex_1) == 0x0006D0, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_ComponentBoundEvent_OtherBodyIndex_1' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_ComponentBoundEvent_bFromSweep_1) == 0x0006D4, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_ComponentBoundEvent_bFromSweep_1' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_ComponentBoundEvent_SweepResult_1) == 0x0006D8, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_ComponentBoundEvent_SweepResult_1' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_Add_VectorVector_ReturnValue) == 0x000760, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_DynamicCast_AsDoor) == 0x000770, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_DynamicCast_AsDoor' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_DynamicCast_bSuccess) == 0x000778, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_RandomFloatInRange_ReturnValue_4) == 0x00077C, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_RandomFloatInRange_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_ComponentBoundEvent_Pawn) == 0x000780, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_ComponentBoundEvent_Pawn' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_K2_GetRandomPointInNavigableRadius_RandomLocation) == 0x000788, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_K2_GetRandomPointInNavigableRadius_RandomLocation' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_K2_GetRandomPointInNavigableRadius_ReturnValue) == 0x000794, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_K2_GetRandomPointInNavigableRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_SelectVector_ReturnValue) == 0x000798, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_SelectVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_CreateMoveToProxyObject_ReturnValue) == 0x0007A8, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_CreateMoveToProxyObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_IsValid_ReturnValue) == 0x0007B0, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_GetPlayerController_ReturnValue) == 0x0007B8, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x0007C0, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x0007C8, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x0007D4, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x0007E0, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_ComponentBoundEvent_OtherActor) == 0x0007E8, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_ComponentBoundEvent_OtherComp) == 0x0007F0, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x0007F8, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_ComponentBoundEvent_bFromSweep) == 0x0007FC, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_ComponentBoundEvent_SweepResult) == 0x000800, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_FindLookAtRotation_ReturnValue) == 0x000888, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_DynamicCast_AsMain_Player) == 0x000898, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_DynamicCast_AsMain_Player' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, K2Node_DynamicCast_bSuccess_1) == 0x0008A0, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_getMainGamemode_AsMain_Gamemode_1) == 0x0008A8, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_getMainGamemode_AsMain_Gamemode_1' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_GetActorForwardVector_ReturnValue) == 0x0008B0, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ExecuteUbergraph_wisp_p, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0008BC, "Member 'Wisp_p_C_ExecuteUbergraph_wisp_p::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");

// Function wisp_p.wisp_p_C.BndEvt__wisp_p_Sphere1_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct Wisp_p_C_BndEvt__wisp_p_Sphere1_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_237C[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Wisp_p_C_BndEvt__wisp_p_Sphere1_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on Wisp_p_C_BndEvt__wisp_p_Sphere1_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(Wisp_p_C_BndEvt__wisp_p_Sphere1_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on Wisp_p_C_BndEvt__wisp_p_Sphere1_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(Wisp_p_C_BndEvt__wisp_p_Sphere1_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'Wisp_p_C_BndEvt__wisp_p_Sphere1_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_BndEvt__wisp_p_Sphere1_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'Wisp_p_C_BndEvt__wisp_p_Sphere1_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_BndEvt__wisp_p_Sphere1_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'Wisp_p_C_BndEvt__wisp_p_Sphere1_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_BndEvt__wisp_p_Sphere1_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'Wisp_p_C_BndEvt__wisp_p_Sphere1_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_BndEvt__wisp_p_Sphere1_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'Wisp_p_C_BndEvt__wisp_p_Sphere1_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_BndEvt__wisp_p_Sphere1_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'Wisp_p_C_BndEvt__wisp_p_Sphere1_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function wisp_p.wisp_p_C.BndEvt__wisp_w_PawnSensing_K2Node_ComponentBoundEvent_2_SeePawnDelegate__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct Wisp_p_C_BndEvt__wisp_w_PawnSensing_K2Node_ComponentBoundEvent_2_SeePawnDelegate__DelegateSignature final
{
public:
	class APawn*                                  Param_Pawn;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_p_C_BndEvt__wisp_w_PawnSensing_K2Node_ComponentBoundEvent_2_SeePawnDelegate__DelegateSignature) == 0x000008, "Wrong alignment on Wisp_p_C_BndEvt__wisp_w_PawnSensing_K2Node_ComponentBoundEvent_2_SeePawnDelegate__DelegateSignature");
static_assert(sizeof(Wisp_p_C_BndEvt__wisp_w_PawnSensing_K2Node_ComponentBoundEvent_2_SeePawnDelegate__DelegateSignature) == 0x000008, "Wrong size on Wisp_p_C_BndEvt__wisp_w_PawnSensing_K2Node_ComponentBoundEvent_2_SeePawnDelegate__DelegateSignature");
static_assert(offsetof(Wisp_p_C_BndEvt__wisp_w_PawnSensing_K2Node_ComponentBoundEvent_2_SeePawnDelegate__DelegateSignature, Param_Pawn) == 0x000000, "Member 'Wisp_p_C_BndEvt__wisp_w_PawnSensing_K2Node_ComponentBoundEvent_2_SeePawnDelegate__DelegateSignature::Param_Pawn' has a wrong offset!");

// Function wisp_p.wisp_p_C.BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct Wisp_p_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_237D[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Wisp_p_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on Wisp_p_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(Wisp_p_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on Wisp_p_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(Wisp_p_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'Wisp_p_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'Wisp_p_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'Wisp_p_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'Wisp_p_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'Wisp_p_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'Wisp_p_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function wisp_p.wisp_p_C.enterWater
// 0x0008 (0x0008 - 0x0000)
struct Wisp_p_C_EnterWater final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_p_C_EnterWater) == 0x000008, "Wrong alignment on Wisp_p_C_EnterWater");
static_assert(sizeof(Wisp_p_C_EnterWater) == 0x000008, "Wrong size on Wisp_p_C_EnterWater");
static_assert(offsetof(Wisp_p_C_EnterWater, Water) == 0x000000, "Member 'Wisp_p_C_EnterWater::Water' has a wrong offset!");

// Function wisp_p.wisp_p_C.ImpactDamage
// 0x00A8 (0x00A8 - 0x0000)
struct Wisp_p_C_ImpactDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0004(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_237E[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0090(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Impact;                                            // 0x0098(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_p_C_ImpactDamage) == 0x000008, "Wrong alignment on Wisp_p_C_ImpactDamage");
static_assert(sizeof(Wisp_p_C_ImpactDamage) == 0x0000A8, "Wrong size on Wisp_p_C_ImpactDamage");
static_assert(offsetof(Wisp_p_C_ImpactDamage, Damage) == 0x000000, "Member 'Wisp_p_C_ImpactDamage::Damage' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ImpactDamage, Hit) == 0x000004, "Member 'Wisp_p_C_ImpactDamage::Hit' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ImpactDamage, Actor) == 0x000090, "Member 'Wisp_p_C_ImpactDamage::Actor' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ImpactDamage, Impact) == 0x000098, "Member 'Wisp_p_C_ImpactDamage::Impact' has a wrong offset!");

// Function wisp_p.wisp_p_C.leaveWater
// 0x0008 (0x0008 - 0x0000)
struct Wisp_p_C_LeaveWater final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_p_C_LeaveWater) == 0x000008, "Wrong alignment on Wisp_p_C_LeaveWater");
static_assert(sizeof(Wisp_p_C_LeaveWater) == 0x000008, "Wrong size on Wisp_p_C_LeaveWater");
static_assert(offsetof(Wisp_p_C_LeaveWater, Water) == 0x000000, "Member 'Wisp_p_C_LeaveWater::Water' has a wrong offset!");

// Function wisp_p.wisp_p_C.enterWaterOrigin
// 0x0008 (0x0008 - 0x0000)
struct Wisp_p_C_EnterWaterOrigin final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_p_C_EnterWaterOrigin) == 0x000008, "Wrong alignment on Wisp_p_C_EnterWaterOrigin");
static_assert(sizeof(Wisp_p_C_EnterWaterOrigin) == 0x000008, "Wrong size on Wisp_p_C_EnterWaterOrigin");
static_assert(offsetof(Wisp_p_C_EnterWaterOrigin, Water) == 0x000000, "Member 'Wisp_p_C_EnterWaterOrigin::Water' has a wrong offset!");

// Function wisp_p.wisp_p_C.leaveWaterOrigin
// 0x0008 (0x0008 - 0x0000)
struct Wisp_p_C_LeaveWaterOrigin final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_p_C_LeaveWaterOrigin) == 0x000008, "Wrong alignment on Wisp_p_C_LeaveWaterOrigin");
static_assert(sizeof(Wisp_p_C_LeaveWaterOrigin) == 0x000008, "Wrong size on Wisp_p_C_LeaveWaterOrigin");
static_assert(offsetof(Wisp_p_C_LeaveWaterOrigin, Water) == 0x000000, "Member 'Wisp_p_C_LeaveWaterOrigin::Water' has a wrong offset!");

// Function wisp_p.wisp_p_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct Wisp_p_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_p_C_ReceiveTick) == 0x000004, "Wrong alignment on Wisp_p_C_ReceiveTick");
static_assert(sizeof(Wisp_p_C_ReceiveTick) == 0x000004, "Wrong size on Wisp_p_C_ReceiveTick");
static_assert(offsetof(Wisp_p_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'Wisp_p_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function wisp_p.wisp_p_C.dir
// 0x0001 (0x0001 - 0x0000)
struct Wisp_p_C_Dir final
{
public:
	bool                                          Condition;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wisp_p_C_Dir) == 0x000001, "Wrong alignment on Wisp_p_C_Dir");
static_assert(sizeof(Wisp_p_C_Dir) == 0x000001, "Wrong size on Wisp_p_C_Dir");
static_assert(offsetof(Wisp_p_C_Dir, Condition) == 0x000000, "Member 'Wisp_p_C_Dir::Condition' has a wrong offset!");

// Function wisp_p.wisp_p_C.hooked
// 0x0008 (0x0008 - 0x0000)
struct Wisp_p_C_Hooked final
{
public:
	class AHook_C*                                Hook;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_p_C_Hooked) == 0x000008, "Wrong alignment on Wisp_p_C_Hooked");
static_assert(sizeof(Wisp_p_C_Hooked) == 0x000008, "Wrong size on Wisp_p_C_Hooked");
static_assert(offsetof(Wisp_p_C_Hooked, Hook) == 0x000000, "Member 'Wisp_p_C_Hooked::Hook' has a wrong offset!");

// Function wisp_p.wisp_p_C.playerUsedOn
// 0x0090 (0x0090 - 0x0000)
struct Wisp_p_C_PlayerUsedOn final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Wisp_p_C_PlayerUsedOn) == 0x000008, "Wrong alignment on Wisp_p_C_PlayerUsedOn");
static_assert(sizeof(Wisp_p_C_PlayerUsedOn) == 0x000090, "Wrong size on Wisp_p_C_PlayerUsedOn");
static_assert(offsetof(Wisp_p_C_PlayerUsedOn, Player) == 0x000000, "Member 'Wisp_p_C_PlayerUsedOn::Player' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_PlayerUsedOn, Hit) == 0x000008, "Member 'Wisp_p_C_PlayerUsedOn::Hit' has a wrong offset!");

// Function wisp_p.wisp_p_C.slice
// 0x0001 (0x0001 - 0x0000)
struct Wisp_p_C_Slice final
{
public:
	bool                                          Clean;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wisp_p_C_Slice) == 0x000001, "Wrong alignment on Wisp_p_C_Slice");
static_assert(sizeof(Wisp_p_C_Slice) == 0x000001, "Wrong size on Wisp_p_C_Slice");
static_assert(offsetof(Wisp_p_C_Slice, Clean) == 0x000000, "Member 'Wisp_p_C_Slice::Clean' has a wrong offset!");

// Function wisp_p.wisp_p_C.reachedByExplosion
// 0x0010 (0x0010 - 0x0000)
struct Wisp_p_C_ReachedByExplosion final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_p_C_ReachedByExplosion) == 0x000004, "Wrong alignment on Wisp_p_C_ReachedByExplosion");
static_assert(sizeof(Wisp_p_C_ReachedByExplosion) == 0x000010, "Wrong size on Wisp_p_C_ReachedByExplosion");
static_assert(offsetof(Wisp_p_C_ReachedByExplosion, Location) == 0x000000, "Member 'Wisp_p_C_ReachedByExplosion::Location' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ReachedByExplosion, Damage) == 0x00000C, "Member 'Wisp_p_C_ReachedByExplosion::Damage' has a wrong offset!");

// Function wisp_p.wisp_p_C.playerLookAway
// 0x0008 (0x0008 - 0x0000)
struct Wisp_p_C_PlayerLookAway final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_p_C_PlayerLookAway) == 0x000008, "Wrong alignment on Wisp_p_C_PlayerLookAway");
static_assert(sizeof(Wisp_p_C_PlayerLookAway) == 0x000008, "Wrong size on Wisp_p_C_PlayerLookAway");
static_assert(offsetof(Wisp_p_C_PlayerLookAway, Player) == 0x000000, "Member 'Wisp_p_C_PlayerLookAway::Player' has a wrong offset!");

// Function wisp_p.wisp_p_C.stepped
// 0x0004 (0x0004 - 0x0000)
struct Wisp_p_C_Stepped final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_p_C_Stepped) == 0x000004, "Wrong alignment on Wisp_p_C_Stepped");
static_assert(sizeof(Wisp_p_C_Stepped) == 0x000004, "Wrong size on Wisp_p_C_Stepped");
static_assert(offsetof(Wisp_p_C_Stepped, Volume) == 0x000000, "Member 'Wisp_p_C_Stepped::Volume' has a wrong offset!");

// Function wisp_p.wisp_p_C.ActionName
// 0x00A0 (0x00A0 - 0x0000)
struct Wisp_p_C_ActionName final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class FString                                 Param_Name;                                        // 0x0090(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_p_C_ActionName) == 0x000008, "Wrong alignment on Wisp_p_C_ActionName");
static_assert(sizeof(Wisp_p_C_ActionName) == 0x0000A0, "Wrong size on Wisp_p_C_ActionName");
static_assert(offsetof(Wisp_p_C_ActionName, Player) == 0x000000, "Member 'Wisp_p_C_ActionName::Player' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ActionName, Hit) == 0x000008, "Member 'Wisp_p_C_ActionName::Hit' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ActionName, Param_Name) == 0x000090, "Member 'Wisp_p_C_ActionName::Param_Name' has a wrong offset!");

// Function wisp_p.wisp_p_C.accumulateTemperature
// 0x0008 (0x0008 - 0x0000)
struct Wisp_p_C_AccumulateTemperature final
{
public:
	float                                         Temperature;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_p_C_AccumulateTemperature) == 0x000004, "Wrong alignment on Wisp_p_C_AccumulateTemperature");
static_assert(sizeof(Wisp_p_C_AccumulateTemperature) == 0x000008, "Wrong size on Wisp_p_C_AccumulateTemperature");
static_assert(offsetof(Wisp_p_C_AccumulateTemperature, Temperature) == 0x000000, "Member 'Wisp_p_C_AccumulateTemperature::Temperature' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_AccumulateTemperature, Speed) == 0x000004, "Member 'Wisp_p_C_AccumulateTemperature::Speed' has a wrong offset!");

// Function wisp_p.wisp_p_C.addTemperature
// 0x0004 (0x0004 - 0x0000)
struct Wisp_p_C_AddTemperature final
{
public:
	float                                         Temperature;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_p_C_AddTemperature) == 0x000004, "Wrong alignment on Wisp_p_C_AddTemperature");
static_assert(sizeof(Wisp_p_C_AddTemperature) == 0x000004, "Wrong size on Wisp_p_C_AddTemperature");
static_assert(offsetof(Wisp_p_C_AddTemperature, Temperature) == 0x000000, "Member 'Wisp_p_C_AddTemperature::Temperature' has a wrong offset!");

// Function wisp_p.wisp_p_C.playerHandAnyKey
// 0x0028 (0x0028 - 0x0000)
struct Wisp_p_C_PlayerHandAnyKey final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   Key;                                               // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Pressed;                                           // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wisp_p_C_PlayerHandAnyKey) == 0x000008, "Wrong alignment on Wisp_p_C_PlayerHandAnyKey");
static_assert(sizeof(Wisp_p_C_PlayerHandAnyKey) == 0x000028, "Wrong size on Wisp_p_C_PlayerHandAnyKey");
static_assert(offsetof(Wisp_p_C_PlayerHandAnyKey, Player) == 0x000000, "Member 'Wisp_p_C_PlayerHandAnyKey::Player' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_PlayerHandAnyKey, Key) == 0x000008, "Member 'Wisp_p_C_PlayerHandAnyKey::Key' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_PlayerHandAnyKey, Pressed) == 0x000020, "Member 'Wisp_p_C_PlayerHandAnyKey::Pressed' has a wrong offset!");

// Function wisp_p.wisp_p_C.playerHandMouse
// 0x0010 (0x0010 - 0x0000)
struct Wisp_p_C_PlayerHandMouse final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Mouse;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_p_C_PlayerHandMouse) == 0x000008, "Wrong alignment on Wisp_p_C_PlayerHandMouse");
static_assert(sizeof(Wisp_p_C_PlayerHandMouse) == 0x000010, "Wrong size on Wisp_p_C_PlayerHandMouse");
static_assert(offsetof(Wisp_p_C_PlayerHandMouse, Player) == 0x000000, "Member 'Wisp_p_C_PlayerHandMouse::Player' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_PlayerHandMouse, Mouse) == 0x000008, "Member 'Wisp_p_C_PlayerHandMouse::Mouse' has a wrong offset!");

// Function wisp_p.wisp_p_C.playerHandMouseWheel
// 0x0010 (0x0010 - 0x0000)
struct Wisp_p_C_PlayerHandMouseWheel final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WheelDelta;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_p_C_PlayerHandMouseWheel) == 0x000008, "Wrong alignment on Wisp_p_C_PlayerHandMouseWheel");
static_assert(sizeof(Wisp_p_C_PlayerHandMouseWheel) == 0x000010, "Wrong size on Wisp_p_C_PlayerHandMouseWheel");
static_assert(offsetof(Wisp_p_C_PlayerHandMouseWheel, Player) == 0x000000, "Member 'Wisp_p_C_PlayerHandMouseWheel::Player' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_PlayerHandMouseWheel, WheelDelta) == 0x000008, "Member 'Wisp_p_C_PlayerHandMouseWheel::WheelDelta' has a wrong offset!");

// Function wisp_p.wisp_p_C.playerHandRelease_LMB
// 0x0008 (0x0008 - 0x0000)
struct Wisp_p_C_PlayerHandRelease_LMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_p_C_PlayerHandRelease_LMB) == 0x000008, "Wrong alignment on Wisp_p_C_PlayerHandRelease_LMB");
static_assert(sizeof(Wisp_p_C_PlayerHandRelease_LMB) == 0x000008, "Wrong size on Wisp_p_C_PlayerHandRelease_LMB");
static_assert(offsetof(Wisp_p_C_PlayerHandRelease_LMB, Player) == 0x000000, "Member 'Wisp_p_C_PlayerHandRelease_LMB::Player' has a wrong offset!");

// Function wisp_p.wisp_p_C.playerHandRelease_RMB
// 0x0008 (0x0008 - 0x0000)
struct Wisp_p_C_PlayerHandRelease_RMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_p_C_PlayerHandRelease_RMB) == 0x000008, "Wrong alignment on Wisp_p_C_PlayerHandRelease_RMB");
static_assert(sizeof(Wisp_p_C_PlayerHandRelease_RMB) == 0x000008, "Wrong size on Wisp_p_C_PlayerHandRelease_RMB");
static_assert(offsetof(Wisp_p_C_PlayerHandRelease_RMB, Player) == 0x000000, "Member 'Wisp_p_C_PlayerHandRelease_RMB::Player' has a wrong offset!");

// Function wisp_p.wisp_p_C.exploded
// 0x0010 (0x0010 - 0x0000)
struct Wisp_p_C_Exploded final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_p_C_Exploded) == 0x000004, "Wrong alignment on Wisp_p_C_Exploded");
static_assert(sizeof(Wisp_p_C_Exploded) == 0x000010, "Wrong size on Wisp_p_C_Exploded");
static_assert(offsetof(Wisp_p_C_Exploded, Damage) == 0x000000, "Member 'Wisp_p_C_Exploded::Damage' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_Exploded, Location) == 0x000004, "Member 'Wisp_p_C_Exploded::Location' has a wrong offset!");

// Function wisp_p.wisp_p_C.playerHandUse_LMB
// 0x0008 (0x0008 - 0x0000)
struct Wisp_p_C_PlayerHandUse_LMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_p_C_PlayerHandUse_LMB) == 0x000008, "Wrong alignment on Wisp_p_C_PlayerHandUse_LMB");
static_assert(sizeof(Wisp_p_C_PlayerHandUse_LMB) == 0x000008, "Wrong size on Wisp_p_C_PlayerHandUse_LMB");
static_assert(offsetof(Wisp_p_C_PlayerHandUse_LMB, Player) == 0x000000, "Member 'Wisp_p_C_PlayerHandUse_LMB::Player' has a wrong offset!");

// Function wisp_p.wisp_p_C.playerHandUse_RMB
// 0x0008 (0x0008 - 0x0000)
struct Wisp_p_C_PlayerHandUse_RMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_p_C_PlayerHandUse_RMB) == 0x000008, "Wrong alignment on Wisp_p_C_PlayerHandUse_RMB");
static_assert(sizeof(Wisp_p_C_PlayerHandUse_RMB) == 0x000008, "Wrong size on Wisp_p_C_PlayerHandUse_RMB");
static_assert(offsetof(Wisp_p_C_PlayerHandUse_RMB, Player) == 0x000000, "Member 'Wisp_p_C_PlayerHandUse_RMB::Player' has a wrong offset!");

// Function wisp_p.wisp_p_C.actionOptionIndex
// 0x0098 (0x0098 - 0x0000)
struct Wisp_p_C_ActionOptionIndex final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         Param_Index;                                       // 0x0090(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_interactionActions                       Action;                                            // 0x0094(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_p_C_ActionOptionIndex) == 0x000008, "Wrong alignment on Wisp_p_C_ActionOptionIndex");
static_assert(sizeof(Wisp_p_C_ActionOptionIndex) == 0x000098, "Wrong size on Wisp_p_C_ActionOptionIndex");
static_assert(offsetof(Wisp_p_C_ActionOptionIndex, Player) == 0x000000, "Member 'Wisp_p_C_ActionOptionIndex::Player' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ActionOptionIndex, Hit) == 0x000008, "Member 'Wisp_p_C_ActionOptionIndex::Hit' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ActionOptionIndex, Param_Index) == 0x000090, "Member 'Wisp_p_C_ActionOptionIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ActionOptionIndex, Action) == 0x000094, "Member 'Wisp_p_C_ActionOptionIndex::Action' has a wrong offset!");

// Function wisp_p.wisp_p_C.ignite
// 0x0004 (0x0004 - 0x0000)
struct Wisp_p_C_Ignite final
{
public:
	float                                         Fuel;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_p_C_Ignite) == 0x000004, "Wrong alignment on Wisp_p_C_Ignite");
static_assert(sizeof(Wisp_p_C_Ignite) == 0x000004, "Wrong size on Wisp_p_C_Ignite");
static_assert(offsetof(Wisp_p_C_Ignite, Fuel) == 0x000000, "Member 'Wisp_p_C_Ignite::Fuel' has a wrong offset!");

// Function wisp_p.wisp_p_C.fireDamage
// 0x0004 (0x0004 - 0x0000)
struct Wisp_p_C_FireDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_p_C_FireDamage) == 0x000004, "Wrong alignment on Wisp_p_C_FireDamage");
static_assert(sizeof(Wisp_p_C_FireDamage) == 0x000004, "Wrong size on Wisp_p_C_FireDamage");
static_assert(offsetof(Wisp_p_C_FireDamage, Damage) == 0x000000, "Member 'Wisp_p_C_FireDamage::Damage' has a wrong offset!");

// Function wisp_p.wisp_p_C.steppedOn
// 0x0090 (0x0090 - 0x0000)
struct Wisp_p_C_SteppedOn final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Wisp_p_C_SteppedOn) == 0x000008, "Wrong alignment on Wisp_p_C_SteppedOn");
static_assert(sizeof(Wisp_p_C_SteppedOn) == 0x000090, "Wrong size on Wisp_p_C_SteppedOn");
static_assert(offsetof(Wisp_p_C_SteppedOn, Player) == 0x000000, "Member 'Wisp_p_C_SteppedOn::Player' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_SteppedOn, Hit) == 0x000008, "Member 'Wisp_p_C_SteppedOn::Hit' has a wrong offset!");

// Function wisp_p.wisp_p_C.setKey
// 0x0010 (0x0010 - 0x0000)
struct Wisp_p_C_SetKey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_p_C_SetKey) == 0x000008, "Wrong alignment on Wisp_p_C_SetKey");
static_assert(sizeof(Wisp_p_C_SetKey) == 0x000010, "Wrong size on Wisp_p_C_SetKey");
static_assert(offsetof(Wisp_p_C_SetKey, Key) == 0x000000, "Member 'Wisp_p_C_SetKey::Key' has a wrong offset!");

// Function wisp_p.wisp_p_C.addDamage
// 0x00A8 (0x00A8 - 0x0000)
struct Wisp_p_C_AddDamage final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x000C(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                Impact;                                            // 0x0094(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipSetting;                                       // 0x00A0(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wisp_p_C_AddDamage) == 0x000008, "Wrong alignment on Wisp_p_C_AddDamage");
static_assert(sizeof(Wisp_p_C_AddDamage) == 0x0000A8, "Wrong size on Wisp_p_C_AddDamage");
static_assert(offsetof(Wisp_p_C_AddDamage, Actor) == 0x000000, "Member 'Wisp_p_C_AddDamage::Actor' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_AddDamage, Damage) == 0x000008, "Member 'Wisp_p_C_AddDamage::Damage' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_AddDamage, Hit) == 0x00000C, "Member 'Wisp_p_C_AddDamage::Hit' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_AddDamage, Impact) == 0x000094, "Member 'Wisp_p_C_AddDamage::Impact' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_AddDamage, SkipSetting) == 0x0000A0, "Member 'Wisp_p_C_AddDamage::SkipSetting' has a wrong offset!");

// Function wisp_p.wisp_p_C.setPropProps
// 0x0003 (0x0003 - 0x0000)
struct Wisp_p_C_SetPropProps final
{
public:
	bool                                          Static;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Frozen;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Active;                                            // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wisp_p_C_SetPropProps) == 0x000001, "Wrong alignment on Wisp_p_C_SetPropProps");
static_assert(sizeof(Wisp_p_C_SetPropProps) == 0x000003, "Wrong size on Wisp_p_C_SetPropProps");
static_assert(offsetof(Wisp_p_C_SetPropProps, Static) == 0x000000, "Member 'Wisp_p_C_SetPropProps::Static' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_SetPropProps, Frozen) == 0x000001, "Member 'Wisp_p_C_SetPropProps::Frozen' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_SetPropProps, Active) == 0x000002, "Member 'Wisp_p_C_SetPropProps::Active' has a wrong offset!");

// Function wisp_p.wisp_p_C.virus
// 0x0001 (0x0001 - 0x0000)
struct Wisp_p_C_Virus final
{
public:
	bool                                          Activate;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wisp_p_C_Virus) == 0x000001, "Wrong alignment on Wisp_p_C_Virus");
static_assert(sizeof(Wisp_p_C_Virus) == 0x000001, "Wrong size on Wisp_p_C_Virus");
static_assert(offsetof(Wisp_p_C_Virus, Activate) == 0x000000, "Member 'Wisp_p_C_Virus::Activate' has a wrong offset!");

// Function wisp_p.wisp_p_C.OnSuccess_5964CA0C498861B5278421A25658D22C
// 0x0001 (0x0001 - 0x0000)
struct Wisp_p_C_OnSuccess_5964CA0C498861B5278421A25658D22C final
{
public:
	EPathFollowingResult                          MovementResult;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_p_C_OnSuccess_5964CA0C498861B5278421A25658D22C) == 0x000001, "Wrong alignment on Wisp_p_C_OnSuccess_5964CA0C498861B5278421A25658D22C");
static_assert(sizeof(Wisp_p_C_OnSuccess_5964CA0C498861B5278421A25658D22C) == 0x000001, "Wrong size on Wisp_p_C_OnSuccess_5964CA0C498861B5278421A25658D22C");
static_assert(offsetof(Wisp_p_C_OnSuccess_5964CA0C498861B5278421A25658D22C, MovementResult) == 0x000000, "Member 'Wisp_p_C_OnSuccess_5964CA0C498861B5278421A25658D22C::MovementResult' has a wrong offset!");

// Function wisp_p.wisp_p_C.OnFail_5964CA0C498861B5278421A25658D22C
// 0x0001 (0x0001 - 0x0000)
struct Wisp_p_C_OnFail_5964CA0C498861B5278421A25658D22C final
{
public:
	EPathFollowingResult                          MovementResult;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_p_C_OnFail_5964CA0C498861B5278421A25658D22C) == 0x000001, "Wrong alignment on Wisp_p_C_OnFail_5964CA0C498861B5278421A25658D22C");
static_assert(sizeof(Wisp_p_C_OnFail_5964CA0C498861B5278421A25658D22C) == 0x000001, "Wrong size on Wisp_p_C_OnFail_5964CA0C498861B5278421A25658D22C");
static_assert(offsetof(Wisp_p_C_OnFail_5964CA0C498861B5278421A25658D22C, MovementResult) == 0x000000, "Member 'Wisp_p_C_OnFail_5964CA0C498861B5278421A25658D22C::MovementResult' has a wrong offset!");

// Function wisp_p.wisp_p_C.UserConstructionScript
// 0x0094 (0x0094 - 0x0000)
struct Wisp_p_C_UserConstructionScript final
{
public:
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x000C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Wisp_p_C_UserConstructionScript) == 0x000004, "Wrong alignment on Wisp_p_C_UserConstructionScript");
static_assert(sizeof(Wisp_p_C_UserConstructionScript) == 0x000094, "Wrong size on Wisp_p_C_UserConstructionScript");
static_assert(offsetof(Wisp_p_C_UserConstructionScript, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000000, "Member 'Wisp_p_C_UserConstructionScript::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_UserConstructionScript, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x00000C, "Member 'Wisp_p_C_UserConstructionScript::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");

// Function wisp_p.wisp_p_C.getActionOptions
// 0x0048 (0x0048 - 0x0000)
struct Wisp_p_C_GetActionOptions final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Component;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         Options;                                           // 0x0018(0x0010)(Parm, OutParm)
	TArray<Enum_interactionActions>               Options_enum;                                      // 0x0028(0x0010)(Parm, OutParm)
	TArray<class FText>                           OptionsNamesOverlay;                               // 0x0038(0x0010)(Parm, OutParm)
};
static_assert(alignof(Wisp_p_C_GetActionOptions) == 0x000008, "Wrong alignment on Wisp_p_C_GetActionOptions");
static_assert(sizeof(Wisp_p_C_GetActionOptions) == 0x000048, "Wrong size on Wisp_p_C_GetActionOptions");
static_assert(offsetof(Wisp_p_C_GetActionOptions, Player) == 0x000000, "Member 'Wisp_p_C_GetActionOptions::Player' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_GetActionOptions, Component) == 0x000008, "Member 'Wisp_p_C_GetActionOptions::Component' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_GetActionOptions, Actor) == 0x000010, "Member 'Wisp_p_C_GetActionOptions::Actor' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_GetActionOptions, Options) == 0x000018, "Member 'Wisp_p_C_GetActionOptions::Options' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_GetActionOptions, Options_enum) == 0x000028, "Member 'Wisp_p_C_GetActionOptions::Options_enum' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_GetActionOptions, OptionsNamesOverlay) == 0x000038, "Member 'Wisp_p_C_GetActionOptions::OptionsNamesOverlay' has a wrong offset!");

// Function wisp_p.wisp_p_C.setPath
// 0x0018 (0x0018 - 0x0000)
struct Wisp_p_C_SetPath final
{
public:
	TArray<struct FVector>                        Path;                                              // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Return;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wisp_p_C_SetPath) == 0x000008, "Wrong alignment on Wisp_p_C_SetPath");
static_assert(sizeof(Wisp_p_C_SetPath) == 0x000018, "Wrong size on Wisp_p_C_SetPath");
static_assert(offsetof(Wisp_p_C_SetPath, Path) == 0x000000, "Member 'Wisp_p_C_SetPath::Path' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_SetPath, Return) == 0x000010, "Member 'Wisp_p_C_SetPath::Return' has a wrong offset!");

// Function wisp_p.wisp_p_C.getOnlyKey
// 0x0010 (0x0010 - 0x0000)
struct Wisp_p_C_GetOnlyKey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_p_C_GetOnlyKey) == 0x000008, "Wrong alignment on Wisp_p_C_GetOnlyKey");
static_assert(sizeof(Wisp_p_C_GetOnlyKey) == 0x000010, "Wrong size on Wisp_p_C_GetOnlyKey");
static_assert(offsetof(Wisp_p_C_GetOnlyKey, Key) == 0x000000, "Member 'Wisp_p_C_GetOnlyKey::Key' has a wrong offset!");

// Function wisp_p.wisp_p_C.processKeys
// 0x0001 (0x0001 - 0x0000)
struct Wisp_p_C_ProcessKeys final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wisp_p_C_ProcessKeys) == 0x000001, "Wrong alignment on Wisp_p_C_ProcessKeys");
static_assert(sizeof(Wisp_p_C_ProcessKeys) == 0x000001, "Wrong size on Wisp_p_C_ProcessKeys");
static_assert(offsetof(Wisp_p_C_ProcessKeys, Return) == 0x000000, "Member 'Wisp_p_C_ProcessKeys::Return' has a wrong offset!");

// Function wisp_p.wisp_p_C.canBeUsedHold
// 0x0001 (0x0001 - 0x0000)
struct Wisp_p_C_CanBeUsedHold final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wisp_p_C_CanBeUsedHold) == 0x000001, "Wrong alignment on Wisp_p_C_CanBeUsedHold");
static_assert(sizeof(Wisp_p_C_CanBeUsedHold) == 0x000001, "Wrong size on Wisp_p_C_CanBeUsedHold");
static_assert(offsetof(Wisp_p_C_CanBeUsedHold, Return) == 0x000000, "Member 'Wisp_p_C_CanBeUsedHold::Return' has a wrong offset!");

// Function wisp_p.wisp_p_C.GetKey
// 0x0010 (0x0010 - 0x0000)
struct Wisp_p_C_GetKey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_p_C_GetKey) == 0x000008, "Wrong alignment on Wisp_p_C_GetKey");
static_assert(sizeof(Wisp_p_C_GetKey) == 0x000010, "Wrong size on Wisp_p_C_GetKey");
static_assert(offsetof(Wisp_p_C_GetKey, Key) == 0x000000, "Member 'Wisp_p_C_GetKey::Key' has a wrong offset!");

// Function wisp_p.wisp_p_C.toolboxFix
// 0x0010 (0x0010 - 0x0000)
struct Wisp_p_C_ToolboxFix final
{
public:
	class AProp_toolbox_C*                        Toolbox;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wisp_p_C_ToolboxFix) == 0x000008, "Wrong alignment on Wisp_p_C_ToolboxFix");
static_assert(sizeof(Wisp_p_C_ToolboxFix) == 0x000010, "Wrong size on Wisp_p_C_ToolboxFix");
static_assert(offsetof(Wisp_p_C_ToolboxFix, Toolbox) == 0x000000, "Member 'Wisp_p_C_ToolboxFix::Toolbox' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_ToolboxFix, Return) == 0x000008, "Member 'Wisp_p_C_ToolboxFix::Return' has a wrong offset!");

// Function wisp_p.wisp_p_C.gascanFuel
// 0x0010 (0x0010 - 0x0000)
struct Wisp_p_C_GascanFuel final
{
public:
	class AProp_gascan_C*                         Gascan;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Fueled;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wisp_p_C_GascanFuel) == 0x000008, "Wrong alignment on Wisp_p_C_GascanFuel");
static_assert(sizeof(Wisp_p_C_GascanFuel) == 0x000010, "Wrong size on Wisp_p_C_GascanFuel");
static_assert(offsetof(Wisp_p_C_GascanFuel, Gascan) == 0x000000, "Member 'Wisp_p_C_GascanFuel::Gascan' has a wrong offset!");
static_assert(offsetof(Wisp_p_C_GascanFuel, Fueled) == 0x000008, "Member 'Wisp_p_C_GascanFuel::Fueled' has a wrong offset!");

// Function wisp_p.wisp_p_C.skipRadial
// 0x0001 (0x0001 - 0x0000)
struct Wisp_p_C_SkipRadial final
{
public:
	bool                                          Skip;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wisp_p_C_SkipRadial) == 0x000001, "Wrong alignment on Wisp_p_C_SkipRadial");
static_assert(sizeof(Wisp_p_C_SkipRadial) == 0x000001, "Wrong size on Wisp_p_C_SkipRadial");
static_assert(offsetof(Wisp_p_C_SkipRadial, Skip) == 0x000000, "Member 'Wisp_p_C_SkipRadial::Skip' has a wrong offset!");

}

