#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Prop_treasureChest

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Struct_save_structs.hpp"
#include "Struct_mBool_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Enum_interactionActions_structs.hpp"


namespace SDK::Params
{

// Function prop_treasureChest.prop_treasureChest_C.ExecuteUbergraph_prop_treasureChest
// 0x01F8 (0x01F8 - 0x0000)
struct Prop_treasureChest_C_ExecuteUbergraph_prop_treasureChest final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RLerp_ReturnValue;                        // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_38EC[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0030(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AProp_treasureKey_C*                    K2Node_DynamicCast_AsProp_Treasure_Key;            // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_38ED[0x3];                                     // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x00C4(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_38EE[0x4];                                     // 0x014C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player;                               // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit;                                  // 0x0158(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         K2Node_Event_index;                                // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_interactionActions                       K2Node_Event_action;                               // 0x01E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x01E5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x01E6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x01E7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class USceneComponent*                        CallFunc_K2_GetRootComponent_ReturnValue;          // 0x01E8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Prop_treasureChest_C_ExecuteUbergraph_prop_treasureChest) == 0x000008, "Wrong alignment on Prop_treasureChest_C_ExecuteUbergraph_prop_treasureChest");
static_assert(sizeof(Prop_treasureChest_C_ExecuteUbergraph_prop_treasureChest) == 0x0001F8, "Wrong size on Prop_treasureChest_C_ExecuteUbergraph_prop_treasureChest");
static_assert(offsetof(Prop_treasureChest_C_ExecuteUbergraph_prop_treasureChest, EntryPoint) == 0x000000, "Member 'Prop_treasureChest_C_ExecuteUbergraph_prop_treasureChest::EntryPoint' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_ExecuteUbergraph_prop_treasureChest, CallFunc_RLerp_ReturnValue) == 0x000004, "Member 'Prop_treasureChest_C_ExecuteUbergraph_prop_treasureChest::CallFunc_RLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_ExecuteUbergraph_prop_treasureChest, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000010, "Member 'Prop_treasureChest_C_ExecuteUbergraph_prop_treasureChest::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_ExecuteUbergraph_prop_treasureChest, K2Node_ComponentBoundEvent_OtherActor) == 0x000018, "Member 'Prop_treasureChest_C_ExecuteUbergraph_prop_treasureChest::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_ExecuteUbergraph_prop_treasureChest, K2Node_ComponentBoundEvent_OtherComp) == 0x000020, "Member 'Prop_treasureChest_C_ExecuteUbergraph_prop_treasureChest::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_ExecuteUbergraph_prop_treasureChest, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000028, "Member 'Prop_treasureChest_C_ExecuteUbergraph_prop_treasureChest::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_ExecuteUbergraph_prop_treasureChest, K2Node_ComponentBoundEvent_bFromSweep) == 0x00002C, "Member 'Prop_treasureChest_C_ExecuteUbergraph_prop_treasureChest::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_ExecuteUbergraph_prop_treasureChest, K2Node_ComponentBoundEvent_SweepResult) == 0x000030, "Member 'Prop_treasureChest_C_ExecuteUbergraph_prop_treasureChest::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_ExecuteUbergraph_prop_treasureChest, K2Node_DynamicCast_AsProp_Treasure_Key) == 0x0000B8, "Member 'Prop_treasureChest_C_ExecuteUbergraph_prop_treasureChest::K2Node_DynamicCast_AsProp_Treasure_Key' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_ExecuteUbergraph_prop_treasureChest, K2Node_DynamicCast_bSuccess) == 0x0000C0, "Member 'Prop_treasureChest_C_ExecuteUbergraph_prop_treasureChest::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_ExecuteUbergraph_prop_treasureChest, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x0000C4, "Member 'Prop_treasureChest_C_ExecuteUbergraph_prop_treasureChest::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_ExecuteUbergraph_prop_treasureChest, K2Node_Event_player) == 0x000150, "Member 'Prop_treasureChest_C_ExecuteUbergraph_prop_treasureChest::K2Node_Event_player' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_ExecuteUbergraph_prop_treasureChest, K2Node_Event_hit) == 0x000158, "Member 'Prop_treasureChest_C_ExecuteUbergraph_prop_treasureChest::K2Node_Event_hit' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_ExecuteUbergraph_prop_treasureChest, K2Node_Event_index) == 0x0001E0, "Member 'Prop_treasureChest_C_ExecuteUbergraph_prop_treasureChest::K2Node_Event_index' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_ExecuteUbergraph_prop_treasureChest, K2Node_Event_action) == 0x0001E4, "Member 'Prop_treasureChest_C_ExecuteUbergraph_prop_treasureChest::K2Node_Event_action' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_ExecuteUbergraph_prop_treasureChest, K2Node_SwitchEnum_CmpSuccess) == 0x0001E5, "Member 'Prop_treasureChest_C_ExecuteUbergraph_prop_treasureChest::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_ExecuteUbergraph_prop_treasureChest, CallFunc_Not_PreBool_ReturnValue) == 0x0001E6, "Member 'Prop_treasureChest_C_ExecuteUbergraph_prop_treasureChest::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_ExecuteUbergraph_prop_treasureChest, CallFunc_BooleanAND_ReturnValue) == 0x0001E7, "Member 'Prop_treasureChest_C_ExecuteUbergraph_prop_treasureChest::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_ExecuteUbergraph_prop_treasureChest, CallFunc_K2_GetRootComponent_ReturnValue) == 0x0001E8, "Member 'Prop_treasureChest_C_ExecuteUbergraph_prop_treasureChest::CallFunc_K2_GetRootComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_ExecuteUbergraph_prop_treasureChest, CallFunc_K2_AttachToComponent_ReturnValue) == 0x0001F0, "Member 'Prop_treasureChest_C_ExecuteUbergraph_prop_treasureChest::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");

// Function prop_treasureChest.prop_treasureChest_C.actionOptionIndex
// 0x0098 (0x0098 - 0x0000)
struct Prop_treasureChest_C_ActionOptionIndex final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Param_Hit;                                         // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         Param_Index;                                       // 0x0090(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_interactionActions                       Action;                                            // 0x0094(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_treasureChest_C_ActionOptionIndex) == 0x000008, "Wrong alignment on Prop_treasureChest_C_ActionOptionIndex");
static_assert(sizeof(Prop_treasureChest_C_ActionOptionIndex) == 0x000098, "Wrong size on Prop_treasureChest_C_ActionOptionIndex");
static_assert(offsetof(Prop_treasureChest_C_ActionOptionIndex, Player) == 0x000000, "Member 'Prop_treasureChest_C_ActionOptionIndex::Player' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_ActionOptionIndex, Param_Hit) == 0x000008, "Member 'Prop_treasureChest_C_ActionOptionIndex::Param_Hit' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_ActionOptionIndex, Param_Index) == 0x000090, "Member 'Prop_treasureChest_C_ActionOptionIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_ActionOptionIndex, Action) == 0x000094, "Member 'Prop_treasureChest_C_ActionOptionIndex::Action' has a wrong offset!");

// Function prop_treasureChest.prop_treasureChest_C.BndEvt__prop_treasureChest_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct Prop_treasureChest_C_BndEvt__prop_treasureChest_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_38EF[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Prop_treasureChest_C_BndEvt__prop_treasureChest_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on Prop_treasureChest_C_BndEvt__prop_treasureChest_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(Prop_treasureChest_C_BndEvt__prop_treasureChest_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on Prop_treasureChest_C_BndEvt__prop_treasureChest_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(Prop_treasureChest_C_BndEvt__prop_treasureChest_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'Prop_treasureChest_C_BndEvt__prop_treasureChest_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_BndEvt__prop_treasureChest_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'Prop_treasureChest_C_BndEvt__prop_treasureChest_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_BndEvt__prop_treasureChest_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'Prop_treasureChest_C_BndEvt__prop_treasureChest_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_BndEvt__prop_treasureChest_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'Prop_treasureChest_C_BndEvt__prop_treasureChest_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_BndEvt__prop_treasureChest_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'Prop_treasureChest_C_BndEvt__prop_treasureChest_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_BndEvt__prop_treasureChest_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'Prop_treasureChest_C_BndEvt__prop_treasureChest_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function prop_treasureChest.prop_treasureChest_C.upd
// 0x0008 (0x0008 - 0x0000)
struct Prop_treasureChest_C_Upd final
{
public:
	ECollisionEnabled                             Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECollisionEnabled                             Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             Temp_byte_Variable_2;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             Temp_byte_Variable_3;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECollisionEnabled                             K2Node_Select_Default;                             // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             K2Node_Select_Default_1;                           // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_treasureChest_C_Upd) == 0x000001, "Wrong alignment on Prop_treasureChest_C_Upd");
static_assert(sizeof(Prop_treasureChest_C_Upd) == 0x000008, "Wrong size on Prop_treasureChest_C_Upd");
static_assert(offsetof(Prop_treasureChest_C_Upd, Temp_byte_Variable) == 0x000000, "Member 'Prop_treasureChest_C_Upd::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_Upd, Temp_bool_Variable) == 0x000001, "Member 'Prop_treasureChest_C_Upd::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_Upd, Temp_byte_Variable_1) == 0x000002, "Member 'Prop_treasureChest_C_Upd::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_Upd, Temp_byte_Variable_2) == 0x000003, "Member 'Prop_treasureChest_C_Upd::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_Upd, Temp_byte_Variable_3) == 0x000004, "Member 'Prop_treasureChest_C_Upd::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_Upd, Temp_bool_Variable_1) == 0x000005, "Member 'Prop_treasureChest_C_Upd::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_Upd, K2Node_Select_Default) == 0x000006, "Member 'Prop_treasureChest_C_Upd::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_Upd, K2Node_Select_Default_1) == 0x000007, "Member 'Prop_treasureChest_C_Upd::K2Node_Select_Default_1' has a wrong offset!");

// Function prop_treasureChest.prop_treasureChest_C.loadData
// 0x00E0 (0x00E0 - 0x0000)
struct Prop_treasureChest_C_LoadData final
{
public:
	struct FStruct_save                           Data;                                              // 0x0000(0x00C0)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x00C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_loadData_return;                          // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_38F0[0x6];                                     // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_mBool                          CallFunc_Array_Get_Item;                           // 0x00C8(0x0010)(HasGetValueTypeHash)
	bool                                          CallFunc_Array_Get_Item_1;                         // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Get_Item_2;                         // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Get_Item_3;                         // 0x00DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Prop_treasureChest_C_LoadData) == 0x000010, "Wrong alignment on Prop_treasureChest_C_LoadData");
static_assert(sizeof(Prop_treasureChest_C_LoadData) == 0x0000E0, "Wrong size on Prop_treasureChest_C_LoadData");
static_assert(offsetof(Prop_treasureChest_C_LoadData, Data) == 0x000000, "Member 'Prop_treasureChest_C_LoadData::Data' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_LoadData, Return) == 0x0000C0, "Member 'Prop_treasureChest_C_LoadData::Return' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_LoadData, CallFunc_loadData_return) == 0x0000C1, "Member 'Prop_treasureChest_C_LoadData::CallFunc_loadData_return' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_LoadData, CallFunc_Array_Get_Item) == 0x0000C8, "Member 'Prop_treasureChest_C_LoadData::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_LoadData, CallFunc_Array_Get_Item_1) == 0x0000D8, "Member 'Prop_treasureChest_C_LoadData::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_LoadData, CallFunc_Array_Get_Item_2) == 0x0000D9, "Member 'Prop_treasureChest_C_LoadData::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_LoadData, CallFunc_Array_Get_Item_3) == 0x0000DA, "Member 'Prop_treasureChest_C_LoadData::CallFunc_Array_Get_Item_3' has a wrong offset!");

// Function prop_treasureChest.prop_treasureChest_C.getData
// 0x0280 (0x0280 - 0x0000)
struct Prop_treasureChest_C_GetData final
{
public:
	struct FStruct_save                           Data;                                              // 0x0000(0x00C0)(Parm, OutParm, HasGetValueTypeHash)
	struct FStruct_save                           CallFunc_getData_data;                             // 0x00C0(0x00C0)(HasGetValueTypeHash)
	TArray<bool>                                  K2Node_MakeArray_Array;                            // 0x0180(0x0010)(ReferenceParm)
	struct FStruct_mBool                          K2Node_MakeStruct_struct_mBool;                    // 0x0190(0x0010)(HasGetValueTypeHash)
	struct FStruct_mBool                          CallFunc_Array_Get_Item;                           // 0x01A0(0x0010)(HasGetValueTypeHash)
	TArray<struct FStruct_mBool>                  K2Node_MakeArray_Array_1;                          // 0x01B0(0x0010)(ReferenceParm)
	struct FStruct_save                           K2Node_SetFieldsInStruct_StructOut;                // 0x01C0(0x00C0)(HasGetValueTypeHash)
};
static_assert(alignof(Prop_treasureChest_C_GetData) == 0x000010, "Wrong alignment on Prop_treasureChest_C_GetData");
static_assert(sizeof(Prop_treasureChest_C_GetData) == 0x000280, "Wrong size on Prop_treasureChest_C_GetData");
static_assert(offsetof(Prop_treasureChest_C_GetData, Data) == 0x000000, "Member 'Prop_treasureChest_C_GetData::Data' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_GetData, CallFunc_getData_data) == 0x0000C0, "Member 'Prop_treasureChest_C_GetData::CallFunc_getData_data' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_GetData, K2Node_MakeArray_Array) == 0x000180, "Member 'Prop_treasureChest_C_GetData::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_GetData, K2Node_MakeStruct_struct_mBool) == 0x000190, "Member 'Prop_treasureChest_C_GetData::K2Node_MakeStruct_struct_mBool' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_GetData, CallFunc_Array_Get_Item) == 0x0001A0, "Member 'Prop_treasureChest_C_GetData::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_GetData, K2Node_MakeArray_Array_1) == 0x0001B0, "Member 'Prop_treasureChest_C_GetData::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_GetData, K2Node_SetFieldsInStruct_StructOut) == 0x0001C0, "Member 'Prop_treasureChest_C_GetData::K2Node_SetFieldsInStruct_StructOut' has a wrong offset!");

// Function prop_treasureChest.prop_treasureChest_C.getActionOptions
// 0x00A8 (0x00A8 - 0x0000)
struct Prop_treasureChest_C_GetActionOptions final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Component;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         Options;                                           // 0x0018(0x0010)(Parm, OutParm)
	TArray<Enum_interactionActions>               Options_enum;                                      // 0x0028(0x0010)(Parm, OutParm)
	TArray<class FText>                           OptionsNamesOverlay;                               // 0x0038(0x0010)(Parm, OutParm)
	int32                                         Temp_int_Variable;                                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38F1[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<Enum_interactionActions>               K2Node_MakeArray_Array;                            // 0x0050(0x0010)(ReferenceParm)
	TArray<Enum_interactionActions>               K2Node_MakeArray_Array_1;                          // 0x0060(0x0010)(ReferenceParm)
	TArray<Enum_interactionActions>               K2Node_MakeArray_Array_2;                          // 0x0070(0x0010)(ReferenceParm)
	TArray<class UPrimitiveComponent*>            K2Node_MakeArray_Array_3;                          // 0x0080(0x0010)(ConstParm, ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_38F2[0x3];                                     // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<Enum_interactionActions>               K2Node_Select_Default;                             // 0x0098(0x0010)(ReferenceParm)
};
static_assert(alignof(Prop_treasureChest_C_GetActionOptions) == 0x000008, "Wrong alignment on Prop_treasureChest_C_GetActionOptions");
static_assert(sizeof(Prop_treasureChest_C_GetActionOptions) == 0x0000A8, "Wrong size on Prop_treasureChest_C_GetActionOptions");
static_assert(offsetof(Prop_treasureChest_C_GetActionOptions, Player) == 0x000000, "Member 'Prop_treasureChest_C_GetActionOptions::Player' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_GetActionOptions, Component) == 0x000008, "Member 'Prop_treasureChest_C_GetActionOptions::Component' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_GetActionOptions, Actor) == 0x000010, "Member 'Prop_treasureChest_C_GetActionOptions::Actor' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_GetActionOptions, Options) == 0x000018, "Member 'Prop_treasureChest_C_GetActionOptions::Options' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_GetActionOptions, Options_enum) == 0x000028, "Member 'Prop_treasureChest_C_GetActionOptions::Options_enum' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_GetActionOptions, OptionsNamesOverlay) == 0x000038, "Member 'Prop_treasureChest_C_GetActionOptions::OptionsNamesOverlay' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_GetActionOptions, Temp_int_Variable) == 0x000048, "Member 'Prop_treasureChest_C_GetActionOptions::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_GetActionOptions, K2Node_MakeArray_Array) == 0x000050, "Member 'Prop_treasureChest_C_GetActionOptions::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_GetActionOptions, K2Node_MakeArray_Array_1) == 0x000060, "Member 'Prop_treasureChest_C_GetActionOptions::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_GetActionOptions, K2Node_MakeArray_Array_2) == 0x000070, "Member 'Prop_treasureChest_C_GetActionOptions::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_GetActionOptions, K2Node_MakeArray_Array_3) == 0x000080, "Member 'Prop_treasureChest_C_GetActionOptions::K2Node_MakeArray_Array_3' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_GetActionOptions, CallFunc_Array_Find_ReturnValue) == 0x000090, "Member 'Prop_treasureChest_C_GetActionOptions::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_GetActionOptions, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000094, "Member 'Prop_treasureChest_C_GetActionOptions::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_treasureChest_C_GetActionOptions, K2Node_Select_Default) == 0x000098, "Member 'Prop_treasureChest_C_GetActionOptions::K2Node_Select_Default' has a wrong offset!");

}

