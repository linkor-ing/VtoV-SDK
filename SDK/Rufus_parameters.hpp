#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Rufus

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Enum_interactionActions_structs.hpp"
#include "Struct_physSound_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "AIModule_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function rufus.rufus_C.ExecuteUbergraph_rufus
// 0x09C0 (0x09C0 - 0x0000)
struct Rufus_C_ExecuteUbergraph_rufus final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A26[0xC];                                     // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0010(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AProp_thiccfus_C*                       CallFunc_FinishSpawningActor_ReturnValue;          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A27[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0058(0x0010)(ConstParm, ReferenceParm)
	EPathFollowingResult                          K2Node_CustomEvent_MovementResult_1;               // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A28[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EPathFollowingResult MovementResult)> K2Node_CreateDelegate_OutputDelegate;              // 0x006C(0x0010)(ZeroConstructor, NoDestructor)
	EPathFollowingResult                          K2Node_CustomEvent_MovementResult;                 // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A29[0x3];                                     // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EPathFollowingResult MovementResult)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0080(0x0010)(ZeroConstructor, NoDestructor)
	EPathFollowingResult                          Temp_byte_Variable_1;                              // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A2A[0x7];                                     // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_11;                            // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_5;                                // 0x00A0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         K2Node_Event_damage_4;                             // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_fuel;                                 // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_10;                            // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_4;                                // 0x0138(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         K2Node_Event_index;                                // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_interactionActions                       K2Node_Event_action;                               // 0x01C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A2B[0x3];                                     // 0x01C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_9;                             // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_8;                             // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_3;                             // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_location_1;                           // 0x01DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_7;                             // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_6;                             // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_5;                             // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_wheelDelta;                           // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A2C[0x4];                                     // 0x0204(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_4;                             // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Event_mouse;                                // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_3;                             // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_Event_key_1;                                // 0x0220(0x0018)(HasGetValueTypeHash)
	bool                                          K2Node_Event_pressed;                              // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A2D[0x3];                                     // 0x0239(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_temperature_1;                        // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_temperature;                          // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_speed;                                // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_2;                             // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_3;                                // 0x0250(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class FString                                 K2Node_Event_name;                                 // 0x02D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         K2Node_Event_volume;                               // 0x02E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A2E[0x4];                                     // 0x02EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_1;                             // 0x02F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_location;                             // 0x02F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_2;                             // 0x0304(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_clean;                                // 0x0308(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A2F[0x7];                                     // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player;                               // 0x0310(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_2;                                // 0x0318(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AHook_C*                                K2Node_Event_hook;                                 // 0x03A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPathFollowingResult                          K2Node_CustomEvent_MovementResult_2;               // 0x03A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A30[0x7];                                     // 0x03A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x03B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAIAsyncTaskBlueprintProxy*             CallFunc_CreateMoveToProxyObject_ReturnValue;      // 0x03B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x03C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x03C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A31[0x2];                                     // 0x03C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x03C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x03D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SetVectorLength_ReturnValue;              // 0x03DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x03E8(0x0010)(ConstParm, ReferenceParm)
	TArray<class AActor*>                         CallFunc_SphereOverlapActors_OutActors;            // 0x03F8(0x0010)(ReferenceParm)
	bool                                          CallFunc_SphereOverlapActors_ReturnValue;          // 0x0408(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A32[0x3];                                     // 0x0409(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EPathFollowingResult MovementResult)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x040C(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x041C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0420(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0424(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0430(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x0438(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A33[0x4];                                     // 0x0444(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_Event_key;                                  // 0x0448(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_Vector_Distance_ReturnValue;              // 0x0458(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_static;                               // 0x045C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_frozen;                               // 0x045D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_active;                               // 0x045E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x045F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_activate;                             // 0x0460(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A34[0x3];                                     // 0x0461(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0464(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWaterVolume_C*                         K2Node_Event_water_3;                              // 0x0468(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0470(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A35[0x3];                                     // 0x0471(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0474(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue_1;     // 0x0478(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0480(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_3;        // 0x048C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      CallFunc_obj_statDyn_obj;                          // 0x0498(0x0010)(ReferenceParm)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x04A8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x0530(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A36[0x3];                                     // 0x0531(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_4;        // 0x0534(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_actor_1;                              // 0x0540(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_1;                             // 0x0548(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_1;                                // 0x054C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                K2Node_Event_impact_1;                             // 0x05D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_skipSetting;                          // 0x05E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A37[0x3];                                     // 0x05E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x05E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x05F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A38[0x3];                                     // 0x05F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_VSize_ReturnValue;                        // 0x05F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x05F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A39[0x3];                                     // 0x05F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x05FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x0608(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         K2Node_Event_damage;                               // 0x0690(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit;                                  // 0x0694(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_2A3A[0x4];                                     // 0x071C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_actor;                                // 0x0720(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_impact;                               // 0x0728(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_2;         // 0x0734(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A3B[0xB];                                     // 0x0735(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0740(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1; // 0x0770(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWaterVolume_C*                         K2Node_Event_water_2;                              // 0x0778(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARufusCorpse_C*                         CallFunc_FinishSpawningActor_ReturnValue_1;        // 0x0780(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0788(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0789(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A3C[0x6];                                     // 0x078A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AWaterVolume_C*                         K2Node_Event_water_1;                              // 0x0790(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0798(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A3D[0x3];                                     // 0x0799(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_5;        // 0x079C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A3E[0x8];                                     // 0x07A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x07B0(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_2; // 0x07E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AExplosion_C*                           CallFunc_FinishSpawningActor_ReturnValue_2;        // 0x07E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWaterVolume_C*                         K2Node_Event_water;                                // 0x07F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          CallFunc_getMainPlayer_AsMain_Player;              // 0x07F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          CallFunc_getMainPlayer_AsMain_Player_1;            // 0x0800(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_6;        // 0x0808(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A3F[0x4];                                     // 0x0814(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUmg_rufusHide_C*                       CallFunc_Create_ReturnValue;                       // 0x0818(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x0820(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x082C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VInterpTo_ReturnValue;                    // 0x0830(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x083C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x08C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A40[0x3];                                     // 0x08C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue;           // 0x08C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetTransform_ReturnValue_1;               // 0x08D0(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_RandomPointInBoundingBox_ReturnValue;     // 0x0900(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RandomRotator_ReturnValue;                // 0x090C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_TransformLocation_ReturnValue;            // 0x0918(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0924(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue;       // 0x0928(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0930(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A41[0x4];                                     // 0x0934(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          CallFunc_getMainPlayer_AsMain_Player_2;            // 0x0938(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0940(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IInt_objects_C>        K2Node_DynamicCast_AsInt_Objects;                  // 0x0948(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0958(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A42[0x7];                                     // 0x0959(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_DynamicCast_AsMain_Player;                  // 0x0960(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0968(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A43[0x7];                                     // 0x0969(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADoor_C*                                K2Node_DynamicCast_AsDoor;                         // 0x0970(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0978(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0979(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPathFollowingResult                          Temp_byte_Variable_3;                              // 0x097A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPathFollowingResult                          K2Node_CustomEvent_MovementResult_3;               // 0x097B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_7;        // 0x097C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x0988(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetRandomPointInNavigableRadius_RandomLocation; // 0x098C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_GetRandomPointInNavigableRadius_ReturnValue; // 0x0998(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A44[0x7];                                     // 0x0999(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAIAsyncTaskBlueprintProxy*             CallFunc_CreateMoveToProxyObject_ReturnValue_1;    // 0x09A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x09A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A45[0x3];                                     // 0x09A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EPathFollowingResult MovementResult)> K2Node_CreateDelegate_OutputDelegate_3;            // 0x09AC(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(Rufus_C_ExecuteUbergraph_rufus) == 0x000010, "Wrong alignment on Rufus_C_ExecuteUbergraph_rufus");
static_assert(sizeof(Rufus_C_ExecuteUbergraph_rufus) == 0x0009C0, "Wrong size on Rufus_C_ExecuteUbergraph_rufus");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, EntryPoint) == 0x000000, "Member 'Rufus_C_ExecuteUbergraph_rufus::EntryPoint' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_GetTransform_ReturnValue) == 0x000010, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000040, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_FinishSpawningActor_ReturnValue) == 0x000048, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, Temp_byte_Variable) == 0x000050, "Member 'Rufus_C_ExecuteUbergraph_rufus::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, Temp_object_Variable) == 0x000058, "Member 'Rufus_C_ExecuteUbergraph_rufus::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_CustomEvent_MovementResult_1) == 0x000068, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_CustomEvent_MovementResult_1' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_CreateDelegate_OutputDelegate) == 0x00006C, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_CustomEvent_MovementResult) == 0x00007C, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_CustomEvent_MovementResult' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_CreateDelegate_OutputDelegate_1) == 0x000080, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, Temp_byte_Variable_1) == 0x000090, "Member 'Rufus_C_ExecuteUbergraph_rufus::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_player_11) == 0x000098, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_player_11' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_hit_5) == 0x0000A0, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_hit_5' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_damage_4) == 0x000128, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_damage_4' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_fuel) == 0x00012C, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_fuel' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_player_10) == 0x000130, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_player_10' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_hit_4) == 0x000138, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_hit_4' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_index) == 0x0001C0, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_index' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_action) == 0x0001C4, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_action' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_player_9) == 0x0001C8, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_player_9' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_player_8) == 0x0001D0, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_player_8' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_damage_3) == 0x0001D8, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_damage_3' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_location_1) == 0x0001DC, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_location_1' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_player_7) == 0x0001E8, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_player_7' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_player_6) == 0x0001F0, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_player_6' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_player_5) == 0x0001F8, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_player_5' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_wheelDelta) == 0x000200, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_wheelDelta' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_player_4) == 0x000208, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_player_4' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_mouse) == 0x000210, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_mouse' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_player_3) == 0x000218, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_player_3' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_key_1) == 0x000220, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_key_1' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_pressed) == 0x000238, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_pressed' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_temperature_1) == 0x00023C, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_temperature_1' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_temperature) == 0x000240, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_temperature' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_speed) == 0x000244, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_speed' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_player_2) == 0x000248, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_player_2' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_hit_3) == 0x000250, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_hit_3' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_name) == 0x0002D8, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_name' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_volume) == 0x0002E8, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_volume' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_player_1) == 0x0002F0, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_player_1' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_location) == 0x0002F8, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_location' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_damage_2) == 0x000304, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_damage_2' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_clean) == 0x000308, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_clean' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_player) == 0x000310, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_player' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_hit_2) == 0x000318, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_hit_2' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_hook) == 0x0003A0, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_hook' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_CustomEvent_MovementResult_2) == 0x0003A8, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_CustomEvent_MovementResult_2' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x0003B0, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_CreateMoveToProxyObject_ReturnValue) == 0x0003B8, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_CreateMoveToProxyObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_IsValid_ReturnValue) == 0x0003C0, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_K2_AttachToComponent_ReturnValue) == 0x0003C1, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0003C4, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_GetActorForwardVector_ReturnValue) == 0x0003D0, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_SetVectorLength_ReturnValue) == 0x0003DC, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_SetVectorLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_MakeArray_Array) == 0x0003E8, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_SphereOverlapActors_OutActors) == 0x0003F8, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_SphereOverlapActors_OutActors' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_SphereOverlapActors_ReturnValue) == 0x000408, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_SphereOverlapActors_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_CreateDelegate_OutputDelegate_2) == 0x00040C, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_Array_Length_ReturnValue) == 0x00041C, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_DeltaSeconds) == 0x000420, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000424, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_GetPlayerPawn_ReturnValue) == 0x000430, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x000438, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_key) == 0x000448, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_key' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_Vector_Distance_ReturnValue) == 0x000458, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_static) == 0x00045C, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_static' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_frozen) == 0x00045D, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_frozen' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_active) == 0x00045E, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_active' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_Less_FloatFloat_ReturnValue) == 0x00045F, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_activate) == 0x000460, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_activate' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, Temp_int_Loop_Counter_Variable) == 0x000464, "Member 'Rufus_C_ExecuteUbergraph_rufus::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_water_3) == 0x000468, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_water_3' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_Less_IntInt_ReturnValue) == 0x000470, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_Add_IntInt_ReturnValue) == 0x000474, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_GetPlayerCameraManager_ReturnValue_1) == 0x000478, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_GetPlayerCameraManager_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000480, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_K2_GetActorLocation_ReturnValue_3) == 0x00048C, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_K2_GetActorLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_obj_statDyn_obj) == 0x000498, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_obj_statDyn_obj' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_LineTraceSingleForObjects_OutHit) == 0x0004A8, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x000530, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_K2_GetActorLocation_ReturnValue_4) == 0x000534, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_K2_GetActorLocation_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_actor_1) == 0x000540, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_actor_1' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_damage_1) == 0x000548, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_damage_1' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_hit_1) == 0x00054C, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_hit_1' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_impact_1) == 0x0005D4, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_impact_1' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_skipSetting) == 0x0005E0, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_skipSetting' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0005E4, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0005F0, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_VSize_ReturnValue) == 0x0005F4, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x0005F8, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x0005FC, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x000608, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_damage) == 0x000690, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_damage' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_hit) == 0x000694, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_hit' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_actor) == 0x000720, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_actor' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_impact) == 0x000728, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_impact' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_Greater_FloatFloat_ReturnValue_2) == 0x000734, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_Greater_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000740, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1) == 0x000770, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_water_2) == 0x000778, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_water_2' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_FinishSpawningActor_ReturnValue_1) == 0x000780, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_FinishSpawningActor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, Temp_byte_Variable_2) == 0x000788, "Member 'Rufus_C_ExecuteUbergraph_rufus::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, Temp_bool_Variable) == 0x000789, "Member 'Rufus_C_ExecuteUbergraph_rufus::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_water_1) == 0x000790, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_water_1' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Select_Default) == 0x000798, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_K2_GetActorLocation_ReturnValue_5) == 0x00079C, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_K2_GetActorLocation_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_MakeTransform_ReturnValue) == 0x0007B0, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_2) == 0x0007E0, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_FinishSpawningActor_ReturnValue_2) == 0x0007E8, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_FinishSpawningActor_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_Event_water) == 0x0007F0, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_Event_water' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_getMainPlayer_AsMain_Player) == 0x0007F8, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_getMainPlayer_AsMain_Player' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_getMainPlayer_AsMain_Player_1) == 0x000800, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_getMainPlayer_AsMain_Player_1' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_K2_GetActorLocation_ReturnValue_6) == 0x000808, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_K2_GetActorLocation_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_Create_ReturnValue) == 0x000818, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x000820, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x00082C, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_VInterpTo_ReturnValue) == 0x000830, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_VInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x00083C, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_K2_SetActorLocation_ReturnValue) == 0x0008C4, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_GetPlayerCharacter_ReturnValue) == 0x0008C8, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_GetTransform_ReturnValue_1) == 0x0008D0, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_GetTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_RandomPointInBoundingBox_ReturnValue) == 0x000900, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_RandomPointInBoundingBox_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_RandomRotator_ReturnValue) == 0x00090C, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_RandomRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_TransformLocation_ReturnValue) == 0x000918, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_TransformLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_RandomFloatInRange_ReturnValue) == 0x000924, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_SpawnEmitterAtLocation_ReturnValue) == 0x000928, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_SpawnEmitterAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, Temp_int_Array_Index_Variable) == 0x000930, "Member 'Rufus_C_ExecuteUbergraph_rufus::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_getMainPlayer_AsMain_Player_2) == 0x000938, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_getMainPlayer_AsMain_Player_2' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_Array_Get_Item) == 0x000940, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_DynamicCast_AsInt_Objects) == 0x000948, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_DynamicCast_AsInt_Objects' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_DynamicCast_bSuccess) == 0x000958, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_DynamicCast_AsMain_Player) == 0x000960, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_DynamicCast_AsMain_Player' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_DynamicCast_bSuccess_1) == 0x000968, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_DynamicCast_AsDoor) == 0x000970, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_DynamicCast_AsDoor' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_DynamicCast_bSuccess_2) == 0x000978, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_IsValid_ReturnValue_1) == 0x000979, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, Temp_byte_Variable_3) == 0x00097A, "Member 'Rufus_C_ExecuteUbergraph_rufus::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_CustomEvent_MovementResult_3) == 0x00097B, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_CustomEvent_MovementResult_3' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_K2_GetActorLocation_ReturnValue_7) == 0x00097C, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_K2_GetActorLocation_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x000988, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_K2_GetRandomPointInNavigableRadius_RandomLocation) == 0x00098C, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_K2_GetRandomPointInNavigableRadius_RandomLocation' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_K2_GetRandomPointInNavigableRadius_ReturnValue) == 0x000998, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_K2_GetRandomPointInNavigableRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_CreateMoveToProxyObject_ReturnValue_1) == 0x0009A0, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_CreateMoveToProxyObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, CallFunc_IsValid_ReturnValue_2) == 0x0009A8, "Member 'Rufus_C_ExecuteUbergraph_rufus::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Rufus_C_ExecuteUbergraph_rufus, K2Node_CreateDelegate_OutputDelegate_3) == 0x0009AC, "Member 'Rufus_C_ExecuteUbergraph_rufus::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");

// Function rufus.rufus_C.enterWater
// 0x0008 (0x0008 - 0x0000)
struct Rufus_C_EnterWater final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rufus_C_EnterWater) == 0x000008, "Wrong alignment on Rufus_C_EnterWater");
static_assert(sizeof(Rufus_C_EnterWater) == 0x000008, "Wrong size on Rufus_C_EnterWater");
static_assert(offsetof(Rufus_C_EnterWater, Water) == 0x000000, "Member 'Rufus_C_EnterWater::Water' has a wrong offset!");

// Function rufus.rufus_C.leaveWater
// 0x0008 (0x0008 - 0x0000)
struct Rufus_C_LeaveWater final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rufus_C_LeaveWater) == 0x000008, "Wrong alignment on Rufus_C_LeaveWater");
static_assert(sizeof(Rufus_C_LeaveWater) == 0x000008, "Wrong size on Rufus_C_LeaveWater");
static_assert(offsetof(Rufus_C_LeaveWater, Water) == 0x000000, "Member 'Rufus_C_LeaveWater::Water' has a wrong offset!");

// Function rufus.rufus_C.enterWaterOrigin
// 0x0008 (0x0008 - 0x0000)
struct Rufus_C_EnterWaterOrigin final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rufus_C_EnterWaterOrigin) == 0x000008, "Wrong alignment on Rufus_C_EnterWaterOrigin");
static_assert(sizeof(Rufus_C_EnterWaterOrigin) == 0x000008, "Wrong size on Rufus_C_EnterWaterOrigin");
static_assert(offsetof(Rufus_C_EnterWaterOrigin, Water) == 0x000000, "Member 'Rufus_C_EnterWaterOrigin::Water' has a wrong offset!");

// Function rufus.rufus_C.ImpactDamage
// 0x00A8 (0x00A8 - 0x0000)
struct Rufus_C_ImpactDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0004(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_2A46[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0090(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Impact;                                            // 0x0098(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rufus_C_ImpactDamage) == 0x000008, "Wrong alignment on Rufus_C_ImpactDamage");
static_assert(sizeof(Rufus_C_ImpactDamage) == 0x0000A8, "Wrong size on Rufus_C_ImpactDamage");
static_assert(offsetof(Rufus_C_ImpactDamage, Damage) == 0x000000, "Member 'Rufus_C_ImpactDamage::Damage' has a wrong offset!");
static_assert(offsetof(Rufus_C_ImpactDamage, Hit) == 0x000004, "Member 'Rufus_C_ImpactDamage::Hit' has a wrong offset!");
static_assert(offsetof(Rufus_C_ImpactDamage, Actor) == 0x000090, "Member 'Rufus_C_ImpactDamage::Actor' has a wrong offset!");
static_assert(offsetof(Rufus_C_ImpactDamage, Impact) == 0x000098, "Member 'Rufus_C_ImpactDamage::Impact' has a wrong offset!");

// Function rufus.rufus_C.addDamage
// 0x00A8 (0x00A8 - 0x0000)
struct Rufus_C_AddDamage final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x000C(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                Impact;                                            // 0x0094(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipSetting;                                       // 0x00A0(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Rufus_C_AddDamage) == 0x000008, "Wrong alignment on Rufus_C_AddDamage");
static_assert(sizeof(Rufus_C_AddDamage) == 0x0000A8, "Wrong size on Rufus_C_AddDamage");
static_assert(offsetof(Rufus_C_AddDamage, Actor) == 0x000000, "Member 'Rufus_C_AddDamage::Actor' has a wrong offset!");
static_assert(offsetof(Rufus_C_AddDamage, Damage) == 0x000008, "Member 'Rufus_C_AddDamage::Damage' has a wrong offset!");
static_assert(offsetof(Rufus_C_AddDamage, Hit) == 0x00000C, "Member 'Rufus_C_AddDamage::Hit' has a wrong offset!");
static_assert(offsetof(Rufus_C_AddDamage, Impact) == 0x000094, "Member 'Rufus_C_AddDamage::Impact' has a wrong offset!");
static_assert(offsetof(Rufus_C_AddDamage, SkipSetting) == 0x0000A0, "Member 'Rufus_C_AddDamage::SkipSetting' has a wrong offset!");

// Function rufus.rufus_C.leaveWaterOrigin
// 0x0008 (0x0008 - 0x0000)
struct Rufus_C_LeaveWaterOrigin final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rufus_C_LeaveWaterOrigin) == 0x000008, "Wrong alignment on Rufus_C_LeaveWaterOrigin");
static_assert(sizeof(Rufus_C_LeaveWaterOrigin) == 0x000008, "Wrong size on Rufus_C_LeaveWaterOrigin");
static_assert(offsetof(Rufus_C_LeaveWaterOrigin, Water) == 0x000000, "Member 'Rufus_C_LeaveWaterOrigin::Water' has a wrong offset!");

// Function rufus.rufus_C.virus
// 0x0001 (0x0001 - 0x0000)
struct Rufus_C_Virus final
{
public:
	bool                                          Activate;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Rufus_C_Virus) == 0x000001, "Wrong alignment on Rufus_C_Virus");
static_assert(sizeof(Rufus_C_Virus) == 0x000001, "Wrong size on Rufus_C_Virus");
static_assert(offsetof(Rufus_C_Virus, Activate) == 0x000000, "Member 'Rufus_C_Virus::Activate' has a wrong offset!");

// Function rufus.rufus_C.setPropProps
// 0x0003 (0x0003 - 0x0000)
struct Rufus_C_SetPropProps final
{
public:
	bool                                          Static;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Frozen;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Active;                                            // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Rufus_C_SetPropProps) == 0x000001, "Wrong alignment on Rufus_C_SetPropProps");
static_assert(sizeof(Rufus_C_SetPropProps) == 0x000003, "Wrong size on Rufus_C_SetPropProps");
static_assert(offsetof(Rufus_C_SetPropProps, Static) == 0x000000, "Member 'Rufus_C_SetPropProps::Static' has a wrong offset!");
static_assert(offsetof(Rufus_C_SetPropProps, Frozen) == 0x000001, "Member 'Rufus_C_SetPropProps::Frozen' has a wrong offset!");
static_assert(offsetof(Rufus_C_SetPropProps, Active) == 0x000002, "Member 'Rufus_C_SetPropProps::Active' has a wrong offset!");

// Function rufus.rufus_C.setKey
// 0x0010 (0x0010 - 0x0000)
struct Rufus_C_SetKey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Rufus_C_SetKey) == 0x000008, "Wrong alignment on Rufus_C_SetKey");
static_assert(sizeof(Rufus_C_SetKey) == 0x000010, "Wrong size on Rufus_C_SetKey");
static_assert(offsetof(Rufus_C_SetKey, Key) == 0x000000, "Member 'Rufus_C_SetKey::Key' has a wrong offset!");

// Function rufus.rufus_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct Rufus_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rufus_C_ReceiveTick) == 0x000004, "Wrong alignment on Rufus_C_ReceiveTick");
static_assert(sizeof(Rufus_C_ReceiveTick) == 0x000004, "Wrong size on Rufus_C_ReceiveTick");
static_assert(offsetof(Rufus_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'Rufus_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function rufus.rufus_C.hooked
// 0x0008 (0x0008 - 0x0000)
struct Rufus_C_Hooked final
{
public:
	class AHook_C*                                Hook;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rufus_C_Hooked) == 0x000008, "Wrong alignment on Rufus_C_Hooked");
static_assert(sizeof(Rufus_C_Hooked) == 0x000008, "Wrong size on Rufus_C_Hooked");
static_assert(offsetof(Rufus_C_Hooked, Hook) == 0x000000, "Member 'Rufus_C_Hooked::Hook' has a wrong offset!");

// Function rufus.rufus_C.playerUsedOn
// 0x0090 (0x0090 - 0x0000)
struct Rufus_C_PlayerUsedOn final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Rufus_C_PlayerUsedOn) == 0x000008, "Wrong alignment on Rufus_C_PlayerUsedOn");
static_assert(sizeof(Rufus_C_PlayerUsedOn) == 0x000090, "Wrong size on Rufus_C_PlayerUsedOn");
static_assert(offsetof(Rufus_C_PlayerUsedOn, Player) == 0x000000, "Member 'Rufus_C_PlayerUsedOn::Player' has a wrong offset!");
static_assert(offsetof(Rufus_C_PlayerUsedOn, Hit) == 0x000008, "Member 'Rufus_C_PlayerUsedOn::Hit' has a wrong offset!");

// Function rufus.rufus_C.slice
// 0x0001 (0x0001 - 0x0000)
struct Rufus_C_Slice final
{
public:
	bool                                          Clean;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Rufus_C_Slice) == 0x000001, "Wrong alignment on Rufus_C_Slice");
static_assert(sizeof(Rufus_C_Slice) == 0x000001, "Wrong size on Rufus_C_Slice");
static_assert(offsetof(Rufus_C_Slice, Clean) == 0x000000, "Member 'Rufus_C_Slice::Clean' has a wrong offset!");

// Function rufus.rufus_C.reachedByExplosion
// 0x0010 (0x0010 - 0x0000)
struct Rufus_C_ReachedByExplosion final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rufus_C_ReachedByExplosion) == 0x000004, "Wrong alignment on Rufus_C_ReachedByExplosion");
static_assert(sizeof(Rufus_C_ReachedByExplosion) == 0x000010, "Wrong size on Rufus_C_ReachedByExplosion");
static_assert(offsetof(Rufus_C_ReachedByExplosion, Location) == 0x000000, "Member 'Rufus_C_ReachedByExplosion::Location' has a wrong offset!");
static_assert(offsetof(Rufus_C_ReachedByExplosion, Damage) == 0x00000C, "Member 'Rufus_C_ReachedByExplosion::Damage' has a wrong offset!");

// Function rufus.rufus_C.playerLookAway
// 0x0008 (0x0008 - 0x0000)
struct Rufus_C_PlayerLookAway final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rufus_C_PlayerLookAway) == 0x000008, "Wrong alignment on Rufus_C_PlayerLookAway");
static_assert(sizeof(Rufus_C_PlayerLookAway) == 0x000008, "Wrong size on Rufus_C_PlayerLookAway");
static_assert(offsetof(Rufus_C_PlayerLookAway, Player) == 0x000000, "Member 'Rufus_C_PlayerLookAway::Player' has a wrong offset!");

// Function rufus.rufus_C.stepped
// 0x0004 (0x0004 - 0x0000)
struct Rufus_C_Stepped final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rufus_C_Stepped) == 0x000004, "Wrong alignment on Rufus_C_Stepped");
static_assert(sizeof(Rufus_C_Stepped) == 0x000004, "Wrong size on Rufus_C_Stepped");
static_assert(offsetof(Rufus_C_Stepped, Volume) == 0x000000, "Member 'Rufus_C_Stepped::Volume' has a wrong offset!");

// Function rufus.rufus_C.ActionName
// 0x00A0 (0x00A0 - 0x0000)
struct Rufus_C_ActionName final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class FString                                 Param_Name;                                        // 0x0090(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Rufus_C_ActionName) == 0x000008, "Wrong alignment on Rufus_C_ActionName");
static_assert(sizeof(Rufus_C_ActionName) == 0x0000A0, "Wrong size on Rufus_C_ActionName");
static_assert(offsetof(Rufus_C_ActionName, Player) == 0x000000, "Member 'Rufus_C_ActionName::Player' has a wrong offset!");
static_assert(offsetof(Rufus_C_ActionName, Hit) == 0x000008, "Member 'Rufus_C_ActionName::Hit' has a wrong offset!");
static_assert(offsetof(Rufus_C_ActionName, Param_Name) == 0x000090, "Member 'Rufus_C_ActionName::Param_Name' has a wrong offset!");

// Function rufus.rufus_C.accumulateTemperature
// 0x0008 (0x0008 - 0x0000)
struct Rufus_C_AccumulateTemperature final
{
public:
	float                                         Temperature;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rufus_C_AccumulateTemperature) == 0x000004, "Wrong alignment on Rufus_C_AccumulateTemperature");
static_assert(sizeof(Rufus_C_AccumulateTemperature) == 0x000008, "Wrong size on Rufus_C_AccumulateTemperature");
static_assert(offsetof(Rufus_C_AccumulateTemperature, Temperature) == 0x000000, "Member 'Rufus_C_AccumulateTemperature::Temperature' has a wrong offset!");
static_assert(offsetof(Rufus_C_AccumulateTemperature, Speed) == 0x000004, "Member 'Rufus_C_AccumulateTemperature::Speed' has a wrong offset!");

// Function rufus.rufus_C.addTemperature
// 0x0004 (0x0004 - 0x0000)
struct Rufus_C_AddTemperature final
{
public:
	float                                         Temperature;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rufus_C_AddTemperature) == 0x000004, "Wrong alignment on Rufus_C_AddTemperature");
static_assert(sizeof(Rufus_C_AddTemperature) == 0x000004, "Wrong size on Rufus_C_AddTemperature");
static_assert(offsetof(Rufus_C_AddTemperature, Temperature) == 0x000000, "Member 'Rufus_C_AddTemperature::Temperature' has a wrong offset!");

// Function rufus.rufus_C.playerHandAnyKey
// 0x0028 (0x0028 - 0x0000)
struct Rufus_C_PlayerHandAnyKey final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   Key;                                               // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Pressed;                                           // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Rufus_C_PlayerHandAnyKey) == 0x000008, "Wrong alignment on Rufus_C_PlayerHandAnyKey");
static_assert(sizeof(Rufus_C_PlayerHandAnyKey) == 0x000028, "Wrong size on Rufus_C_PlayerHandAnyKey");
static_assert(offsetof(Rufus_C_PlayerHandAnyKey, Player) == 0x000000, "Member 'Rufus_C_PlayerHandAnyKey::Player' has a wrong offset!");
static_assert(offsetof(Rufus_C_PlayerHandAnyKey, Key) == 0x000008, "Member 'Rufus_C_PlayerHandAnyKey::Key' has a wrong offset!");
static_assert(offsetof(Rufus_C_PlayerHandAnyKey, Pressed) == 0x000020, "Member 'Rufus_C_PlayerHandAnyKey::Pressed' has a wrong offset!");

// Function rufus.rufus_C.playerHandMouse
// 0x0010 (0x0010 - 0x0000)
struct Rufus_C_PlayerHandMouse final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Mouse;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rufus_C_PlayerHandMouse) == 0x000008, "Wrong alignment on Rufus_C_PlayerHandMouse");
static_assert(sizeof(Rufus_C_PlayerHandMouse) == 0x000010, "Wrong size on Rufus_C_PlayerHandMouse");
static_assert(offsetof(Rufus_C_PlayerHandMouse, Player) == 0x000000, "Member 'Rufus_C_PlayerHandMouse::Player' has a wrong offset!");
static_assert(offsetof(Rufus_C_PlayerHandMouse, Mouse) == 0x000008, "Member 'Rufus_C_PlayerHandMouse::Mouse' has a wrong offset!");

// Function rufus.rufus_C.playerHandMouseWheel
// 0x0010 (0x0010 - 0x0000)
struct Rufus_C_PlayerHandMouseWheel final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WheelDelta;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rufus_C_PlayerHandMouseWheel) == 0x000008, "Wrong alignment on Rufus_C_PlayerHandMouseWheel");
static_assert(sizeof(Rufus_C_PlayerHandMouseWheel) == 0x000010, "Wrong size on Rufus_C_PlayerHandMouseWheel");
static_assert(offsetof(Rufus_C_PlayerHandMouseWheel, Player) == 0x000000, "Member 'Rufus_C_PlayerHandMouseWheel::Player' has a wrong offset!");
static_assert(offsetof(Rufus_C_PlayerHandMouseWheel, WheelDelta) == 0x000008, "Member 'Rufus_C_PlayerHandMouseWheel::WheelDelta' has a wrong offset!");

// Function rufus.rufus_C.playerHandRelease_LMB
// 0x0008 (0x0008 - 0x0000)
struct Rufus_C_PlayerHandRelease_LMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rufus_C_PlayerHandRelease_LMB) == 0x000008, "Wrong alignment on Rufus_C_PlayerHandRelease_LMB");
static_assert(sizeof(Rufus_C_PlayerHandRelease_LMB) == 0x000008, "Wrong size on Rufus_C_PlayerHandRelease_LMB");
static_assert(offsetof(Rufus_C_PlayerHandRelease_LMB, Player) == 0x000000, "Member 'Rufus_C_PlayerHandRelease_LMB::Player' has a wrong offset!");

// Function rufus.rufus_C.playerHandRelease_RMB
// 0x0008 (0x0008 - 0x0000)
struct Rufus_C_PlayerHandRelease_RMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rufus_C_PlayerHandRelease_RMB) == 0x000008, "Wrong alignment on Rufus_C_PlayerHandRelease_RMB");
static_assert(sizeof(Rufus_C_PlayerHandRelease_RMB) == 0x000008, "Wrong size on Rufus_C_PlayerHandRelease_RMB");
static_assert(offsetof(Rufus_C_PlayerHandRelease_RMB, Player) == 0x000000, "Member 'Rufus_C_PlayerHandRelease_RMB::Player' has a wrong offset!");

// Function rufus.rufus_C.exploded
// 0x0010 (0x0010 - 0x0000)
struct Rufus_C_Exploded final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rufus_C_Exploded) == 0x000004, "Wrong alignment on Rufus_C_Exploded");
static_assert(sizeof(Rufus_C_Exploded) == 0x000010, "Wrong size on Rufus_C_Exploded");
static_assert(offsetof(Rufus_C_Exploded, Damage) == 0x000000, "Member 'Rufus_C_Exploded::Damage' has a wrong offset!");
static_assert(offsetof(Rufus_C_Exploded, Location) == 0x000004, "Member 'Rufus_C_Exploded::Location' has a wrong offset!");

// Function rufus.rufus_C.playerHandUse_LMB
// 0x0008 (0x0008 - 0x0000)
struct Rufus_C_PlayerHandUse_LMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rufus_C_PlayerHandUse_LMB) == 0x000008, "Wrong alignment on Rufus_C_PlayerHandUse_LMB");
static_assert(sizeof(Rufus_C_PlayerHandUse_LMB) == 0x000008, "Wrong size on Rufus_C_PlayerHandUse_LMB");
static_assert(offsetof(Rufus_C_PlayerHandUse_LMB, Player) == 0x000000, "Member 'Rufus_C_PlayerHandUse_LMB::Player' has a wrong offset!");

// Function rufus.rufus_C.playerHandUse_RMB
// 0x0008 (0x0008 - 0x0000)
struct Rufus_C_PlayerHandUse_RMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rufus_C_PlayerHandUse_RMB) == 0x000008, "Wrong alignment on Rufus_C_PlayerHandUse_RMB");
static_assert(sizeof(Rufus_C_PlayerHandUse_RMB) == 0x000008, "Wrong size on Rufus_C_PlayerHandUse_RMB");
static_assert(offsetof(Rufus_C_PlayerHandUse_RMB, Player) == 0x000000, "Member 'Rufus_C_PlayerHandUse_RMB::Player' has a wrong offset!");

// Function rufus.rufus_C.actionOptionIndex
// 0x0098 (0x0098 - 0x0000)
struct Rufus_C_ActionOptionIndex final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         Param_Index;                                       // 0x0090(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_interactionActions                       Action;                                            // 0x0094(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rufus_C_ActionOptionIndex) == 0x000008, "Wrong alignment on Rufus_C_ActionOptionIndex");
static_assert(sizeof(Rufus_C_ActionOptionIndex) == 0x000098, "Wrong size on Rufus_C_ActionOptionIndex");
static_assert(offsetof(Rufus_C_ActionOptionIndex, Player) == 0x000000, "Member 'Rufus_C_ActionOptionIndex::Player' has a wrong offset!");
static_assert(offsetof(Rufus_C_ActionOptionIndex, Hit) == 0x000008, "Member 'Rufus_C_ActionOptionIndex::Hit' has a wrong offset!");
static_assert(offsetof(Rufus_C_ActionOptionIndex, Param_Index) == 0x000090, "Member 'Rufus_C_ActionOptionIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(Rufus_C_ActionOptionIndex, Action) == 0x000094, "Member 'Rufus_C_ActionOptionIndex::Action' has a wrong offset!");

// Function rufus.rufus_C.ignite
// 0x0004 (0x0004 - 0x0000)
struct Rufus_C_Ignite final
{
public:
	float                                         Fuel;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rufus_C_Ignite) == 0x000004, "Wrong alignment on Rufus_C_Ignite");
static_assert(sizeof(Rufus_C_Ignite) == 0x000004, "Wrong size on Rufus_C_Ignite");
static_assert(offsetof(Rufus_C_Ignite, Fuel) == 0x000000, "Member 'Rufus_C_Ignite::Fuel' has a wrong offset!");

// Function rufus.rufus_C.fireDamage
// 0x0004 (0x0004 - 0x0000)
struct Rufus_C_FireDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rufus_C_FireDamage) == 0x000004, "Wrong alignment on Rufus_C_FireDamage");
static_assert(sizeof(Rufus_C_FireDamage) == 0x000004, "Wrong size on Rufus_C_FireDamage");
static_assert(offsetof(Rufus_C_FireDamage, Damage) == 0x000000, "Member 'Rufus_C_FireDamage::Damage' has a wrong offset!");

// Function rufus.rufus_C.steppedOn
// 0x0090 (0x0090 - 0x0000)
struct Rufus_C_SteppedOn final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Rufus_C_SteppedOn) == 0x000008, "Wrong alignment on Rufus_C_SteppedOn");
static_assert(sizeof(Rufus_C_SteppedOn) == 0x000090, "Wrong size on Rufus_C_SteppedOn");
static_assert(offsetof(Rufus_C_SteppedOn, Player) == 0x000000, "Member 'Rufus_C_SteppedOn::Player' has a wrong offset!");
static_assert(offsetof(Rufus_C_SteppedOn, Hit) == 0x000008, "Member 'Rufus_C_SteppedOn::Hit' has a wrong offset!");

// Function rufus.rufus_C.OnSuccess_1F7D9ADE470B0041A1C2409B8E5B8E12
// 0x0001 (0x0001 - 0x0000)
struct Rufus_C_OnSuccess_1F7D9ADE470B0041A1C2409B8E5B8E12 final
{
public:
	EPathFollowingResult                          MovementResult;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rufus_C_OnSuccess_1F7D9ADE470B0041A1C2409B8E5B8E12) == 0x000001, "Wrong alignment on Rufus_C_OnSuccess_1F7D9ADE470B0041A1C2409B8E5B8E12");
static_assert(sizeof(Rufus_C_OnSuccess_1F7D9ADE470B0041A1C2409B8E5B8E12) == 0x000001, "Wrong size on Rufus_C_OnSuccess_1F7D9ADE470B0041A1C2409B8E5B8E12");
static_assert(offsetof(Rufus_C_OnSuccess_1F7D9ADE470B0041A1C2409B8E5B8E12, MovementResult) == 0x000000, "Member 'Rufus_C_OnSuccess_1F7D9ADE470B0041A1C2409B8E5B8E12::MovementResult' has a wrong offset!");

// Function rufus.rufus_C.OnFail_1F7D9ADE470B0041A1C2409B8E5B8E12
// 0x0001 (0x0001 - 0x0000)
struct Rufus_C_OnFail_1F7D9ADE470B0041A1C2409B8E5B8E12 final
{
public:
	EPathFollowingResult                          MovementResult;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rufus_C_OnFail_1F7D9ADE470B0041A1C2409B8E5B8E12) == 0x000001, "Wrong alignment on Rufus_C_OnFail_1F7D9ADE470B0041A1C2409B8E5B8E12");
static_assert(sizeof(Rufus_C_OnFail_1F7D9ADE470B0041A1C2409B8E5B8E12) == 0x000001, "Wrong size on Rufus_C_OnFail_1F7D9ADE470B0041A1C2409B8E5B8E12");
static_assert(offsetof(Rufus_C_OnFail_1F7D9ADE470B0041A1C2409B8E5B8E12, MovementResult) == 0x000000, "Member 'Rufus_C_OnFail_1F7D9ADE470B0041A1C2409B8E5B8E12::MovementResult' has a wrong offset!");

// Function rufus.rufus_C.OnSuccess_FADCF23E4BAF14BB33124F926CAD3C77
// 0x0001 (0x0001 - 0x0000)
struct Rufus_C_OnSuccess_FADCF23E4BAF14BB33124F926CAD3C77 final
{
public:
	EPathFollowingResult                          MovementResult;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rufus_C_OnSuccess_FADCF23E4BAF14BB33124F926CAD3C77) == 0x000001, "Wrong alignment on Rufus_C_OnSuccess_FADCF23E4BAF14BB33124F926CAD3C77");
static_assert(sizeof(Rufus_C_OnSuccess_FADCF23E4BAF14BB33124F926CAD3C77) == 0x000001, "Wrong size on Rufus_C_OnSuccess_FADCF23E4BAF14BB33124F926CAD3C77");
static_assert(offsetof(Rufus_C_OnSuccess_FADCF23E4BAF14BB33124F926CAD3C77, MovementResult) == 0x000000, "Member 'Rufus_C_OnSuccess_FADCF23E4BAF14BB33124F926CAD3C77::MovementResult' has a wrong offset!");

// Function rufus.rufus_C.OnFail_FADCF23E4BAF14BB33124F926CAD3C77
// 0x0001 (0x0001 - 0x0000)
struct Rufus_C_OnFail_FADCF23E4BAF14BB33124F926CAD3C77 final
{
public:
	EPathFollowingResult                          MovementResult;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rufus_C_OnFail_FADCF23E4BAF14BB33124F926CAD3C77) == 0x000001, "Wrong alignment on Rufus_C_OnFail_FADCF23E4BAF14BB33124F926CAD3C77");
static_assert(sizeof(Rufus_C_OnFail_FADCF23E4BAF14BB33124F926CAD3C77) == 0x000001, "Wrong size on Rufus_C_OnFail_FADCF23E4BAF14BB33124F926CAD3C77");
static_assert(offsetof(Rufus_C_OnFail_FADCF23E4BAF14BB33124F926CAD3C77, MovementResult) == 0x000000, "Member 'Rufus_C_OnFail_FADCF23E4BAF14BB33124F926CAD3C77::MovementResult' has a wrong offset!");

// Function rufus.rufus_C.step
// 0x0198 (0x0198 - 0x0000)
struct Rufus_C_Step final
{
public:
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0000(0x0010)(ConstParm, ReferenceParm)
	TArray<EObjectTypeQuery>                      CallFunc_obj_static_obj;                           // 0x0010(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_SphereTraceSingleForObjects_OutHit;       // 0x0040(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingleForObjects_ReturnValue;  // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A47[0x3];                                     // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A48[0x2];                                     // 0x00D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A49[0x4];                                     // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0120(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A4A[0x4];                                     // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_physSound                      CallFunc_physSound_return;                         // 0x0158(0x0040)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rufus_C_Step) == 0x000008, "Wrong alignment on Rufus_C_Step");
static_assert(sizeof(Rufus_C_Step) == 0x000198, "Wrong size on Rufus_C_Step");
static_assert(offsetof(Rufus_C_Step, Temp_object_Variable) == 0x000000, "Member 'Rufus_C_Step::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(Rufus_C_Step, CallFunc_obj_static_obj) == 0x000010, "Member 'Rufus_C_Step::CallFunc_obj_static_obj' has a wrong offset!");
static_assert(offsetof(Rufus_C_Step, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000020, "Member 'Rufus_C_Step::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rufus_C_Step, CallFunc_VSize_ReturnValue) == 0x00002C, "Member 'Rufus_C_Step::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rufus_C_Step, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000030, "Member 'Rufus_C_Step::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rufus_C_Step, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00003C, "Member 'Rufus_C_Step::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rufus_C_Step, CallFunc_SphereTraceSingleForObjects_OutHit) == 0x000040, "Member 'Rufus_C_Step::CallFunc_SphereTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(Rufus_C_Step, CallFunc_SphereTraceSingleForObjects_ReturnValue) == 0x0000C8, "Member 'Rufus_C_Step::CallFunc_SphereTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rufus_C_Step, CallFunc_FClamp_ReturnValue) == 0x0000CC, "Member 'Rufus_C_Step::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rufus_C_Step, CallFunc_BreakHitResult_bBlockingHit) == 0x0000D0, "Member 'Rufus_C_Step::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(Rufus_C_Step, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000D1, "Member 'Rufus_C_Step::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(Rufus_C_Step, CallFunc_BreakHitResult_Time) == 0x0000D4, "Member 'Rufus_C_Step::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(Rufus_C_Step, CallFunc_BreakHitResult_Distance) == 0x0000D8, "Member 'Rufus_C_Step::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(Rufus_C_Step, CallFunc_BreakHitResult_Location) == 0x0000DC, "Member 'Rufus_C_Step::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(Rufus_C_Step, CallFunc_BreakHitResult_ImpactPoint) == 0x0000E8, "Member 'Rufus_C_Step::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(Rufus_C_Step, CallFunc_BreakHitResult_Normal) == 0x0000F4, "Member 'Rufus_C_Step::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(Rufus_C_Step, CallFunc_BreakHitResult_ImpactNormal) == 0x000100, "Member 'Rufus_C_Step::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(Rufus_C_Step, CallFunc_BreakHitResult_PhysMat) == 0x000110, "Member 'Rufus_C_Step::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(Rufus_C_Step, CallFunc_BreakHitResult_HitActor) == 0x000118, "Member 'Rufus_C_Step::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(Rufus_C_Step, CallFunc_BreakHitResult_HitComponent) == 0x000120, "Member 'Rufus_C_Step::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(Rufus_C_Step, CallFunc_BreakHitResult_HitBoneName) == 0x000128, "Member 'Rufus_C_Step::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(Rufus_C_Step, CallFunc_BreakHitResult_HitItem) == 0x000130, "Member 'Rufus_C_Step::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(Rufus_C_Step, CallFunc_BreakHitResult_ElementIndex) == 0x000134, "Member 'Rufus_C_Step::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(Rufus_C_Step, CallFunc_BreakHitResult_FaceIndex) == 0x000138, "Member 'Rufus_C_Step::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(Rufus_C_Step, CallFunc_BreakHitResult_TraceStart) == 0x00013C, "Member 'Rufus_C_Step::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(Rufus_C_Step, CallFunc_BreakHitResult_TraceEnd) == 0x000148, "Member 'Rufus_C_Step::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(Rufus_C_Step, CallFunc_physSound_return) == 0x000158, "Member 'Rufus_C_Step::CallFunc_physSound_return' has a wrong offset!");

// Function rufus.rufus_C.setPath
// 0x0018 (0x0018 - 0x0000)
struct Rufus_C_SetPath final
{
public:
	TArray<struct FVector>                        Path;                                              // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Return;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Rufus_C_SetPath) == 0x000008, "Wrong alignment on Rufus_C_SetPath");
static_assert(sizeof(Rufus_C_SetPath) == 0x000018, "Wrong size on Rufus_C_SetPath");
static_assert(offsetof(Rufus_C_SetPath, Path) == 0x000000, "Member 'Rufus_C_SetPath::Path' has a wrong offset!");
static_assert(offsetof(Rufus_C_SetPath, Return) == 0x000010, "Member 'Rufus_C_SetPath::Return' has a wrong offset!");

// Function rufus.rufus_C.getOnlyKey
// 0x0010 (0x0010 - 0x0000)
struct Rufus_C_GetOnlyKey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Rufus_C_GetOnlyKey) == 0x000008, "Wrong alignment on Rufus_C_GetOnlyKey");
static_assert(sizeof(Rufus_C_GetOnlyKey) == 0x000010, "Wrong size on Rufus_C_GetOnlyKey");
static_assert(offsetof(Rufus_C_GetOnlyKey, Key) == 0x000000, "Member 'Rufus_C_GetOnlyKey::Key' has a wrong offset!");

// Function rufus.rufus_C.processKeys
// 0x0001 (0x0001 - 0x0000)
struct Rufus_C_ProcessKeys final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Rufus_C_ProcessKeys) == 0x000001, "Wrong alignment on Rufus_C_ProcessKeys");
static_assert(sizeof(Rufus_C_ProcessKeys) == 0x000001, "Wrong size on Rufus_C_ProcessKeys");
static_assert(offsetof(Rufus_C_ProcessKeys, Return) == 0x000000, "Member 'Rufus_C_ProcessKeys::Return' has a wrong offset!");

// Function rufus.rufus_C.canBeUsedHold
// 0x0001 (0x0001 - 0x0000)
struct Rufus_C_CanBeUsedHold final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Rufus_C_CanBeUsedHold) == 0x000001, "Wrong alignment on Rufus_C_CanBeUsedHold");
static_assert(sizeof(Rufus_C_CanBeUsedHold) == 0x000001, "Wrong size on Rufus_C_CanBeUsedHold");
static_assert(offsetof(Rufus_C_CanBeUsedHold, Return) == 0x000000, "Member 'Rufus_C_CanBeUsedHold::Return' has a wrong offset!");

// Function rufus.rufus_C.GetKey
// 0x0010 (0x0010 - 0x0000)
struct Rufus_C_GetKey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Rufus_C_GetKey) == 0x000008, "Wrong alignment on Rufus_C_GetKey");
static_assert(sizeof(Rufus_C_GetKey) == 0x000010, "Wrong size on Rufus_C_GetKey");
static_assert(offsetof(Rufus_C_GetKey, Key) == 0x000000, "Member 'Rufus_C_GetKey::Key' has a wrong offset!");

// Function rufus.rufus_C.toolboxFix
// 0x0010 (0x0010 - 0x0000)
struct Rufus_C_ToolboxFix final
{
public:
	class AProp_toolbox_C*                        Toolbox;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Rufus_C_ToolboxFix) == 0x000008, "Wrong alignment on Rufus_C_ToolboxFix");
static_assert(sizeof(Rufus_C_ToolboxFix) == 0x000010, "Wrong size on Rufus_C_ToolboxFix");
static_assert(offsetof(Rufus_C_ToolboxFix, Toolbox) == 0x000000, "Member 'Rufus_C_ToolboxFix::Toolbox' has a wrong offset!");
static_assert(offsetof(Rufus_C_ToolboxFix, Return) == 0x000008, "Member 'Rufus_C_ToolboxFix::Return' has a wrong offset!");

// Function rufus.rufus_C.getActionOptions
// 0x0048 (0x0048 - 0x0000)
struct Rufus_C_GetActionOptions final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Component;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         Options;                                           // 0x0018(0x0010)(Parm, OutParm)
	TArray<Enum_interactionActions>               Options_enum;                                      // 0x0028(0x0010)(Parm, OutParm)
	TArray<class FText>                           OptionsNamesOverlay;                               // 0x0038(0x0010)(Parm, OutParm)
};
static_assert(alignof(Rufus_C_GetActionOptions) == 0x000008, "Wrong alignment on Rufus_C_GetActionOptions");
static_assert(sizeof(Rufus_C_GetActionOptions) == 0x000048, "Wrong size on Rufus_C_GetActionOptions");
static_assert(offsetof(Rufus_C_GetActionOptions, Player) == 0x000000, "Member 'Rufus_C_GetActionOptions::Player' has a wrong offset!");
static_assert(offsetof(Rufus_C_GetActionOptions, Component) == 0x000008, "Member 'Rufus_C_GetActionOptions::Component' has a wrong offset!");
static_assert(offsetof(Rufus_C_GetActionOptions, Actor) == 0x000010, "Member 'Rufus_C_GetActionOptions::Actor' has a wrong offset!");
static_assert(offsetof(Rufus_C_GetActionOptions, Options) == 0x000018, "Member 'Rufus_C_GetActionOptions::Options' has a wrong offset!");
static_assert(offsetof(Rufus_C_GetActionOptions, Options_enum) == 0x000028, "Member 'Rufus_C_GetActionOptions::Options_enum' has a wrong offset!");
static_assert(offsetof(Rufus_C_GetActionOptions, OptionsNamesOverlay) == 0x000038, "Member 'Rufus_C_GetActionOptions::OptionsNamesOverlay' has a wrong offset!");

// Function rufus.rufus_C.gascanFuel
// 0x0010 (0x0010 - 0x0000)
struct Rufus_C_GascanFuel final
{
public:
	class AProp_gascan_C*                         Gascan;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Fueled;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Rufus_C_GascanFuel) == 0x000008, "Wrong alignment on Rufus_C_GascanFuel");
static_assert(sizeof(Rufus_C_GascanFuel) == 0x000010, "Wrong size on Rufus_C_GascanFuel");
static_assert(offsetof(Rufus_C_GascanFuel, Gascan) == 0x000000, "Member 'Rufus_C_GascanFuel::Gascan' has a wrong offset!");
static_assert(offsetof(Rufus_C_GascanFuel, Fueled) == 0x000008, "Member 'Rufus_C_GascanFuel::Fueled' has a wrong offset!");

// Function rufus.rufus_C.skipRadial
// 0x0001 (0x0001 - 0x0000)
struct Rufus_C_SkipRadial final
{
public:
	bool                                          Skip;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Rufus_C_SkipRadial) == 0x000001, "Wrong alignment on Rufus_C_SkipRadial");
static_assert(sizeof(Rufus_C_SkipRadial) == 0x000001, "Wrong size on Rufus_C_SkipRadial");
static_assert(offsetof(Rufus_C_SkipRadial, Skip) == 0x000000, "Member 'Rufus_C_SkipRadial::Skip' has a wrong offset!");

}

