#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Treehouse

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Enum_interactionActions_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass treehouse.treehouse_C
// 0x02E0 (0x0500 - 0x0220)
class ATreehouse_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       AntiStealer;                                       // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Gift;                                              // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Vis;                                               // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Dyn;                                               // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Check;                                             // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Pos5_2;                                            // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Kn5_1;                                             // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Kn5_3;                                             // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Kn5_2;                                             // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        Decal;                                             // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Pos5_1;                                            // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Pos4_1;                                            // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Con6_1;                                            // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Con5_1;                                            // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Con4_1;                                            // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Con3_1;                                            // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Con2_1;                                            // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Con1_1;                                            // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   SpawnPW_1;                                         // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   SpawnPW_0;                                         // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Nav;                                               // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Heater6_1;                                         // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Heater5_1;                                         // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Heater4_1;                                         // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Heater3_1;                                         // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Heater2_1;                                         // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Heater1_1;                                         // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Lightk6_1;                                         // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Lightk5_1;                                         // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Lightk4_1;                                         // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Lightk3_1;                                         // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Lightk2_1;                                         // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Lightk1_1;                                         // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Climb;                                             // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   SpawnPillow4_6;                                    // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   SpawnPillow4_5;                                    // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    S6;                                                // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   SpawnShrimp2_6;                                    // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   SpawnPhone4_3;                                     // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   SpawnShrimp2_10;                                   // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   SpawnShrimp2_9;                                    // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   SpawnShrimp2_8;                                    // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   SpawnShrimp2_7;                                    // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   SpawnShrimp2_5;                                    // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   SpawnPhone4_2;                                     // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   SpawnPillow4_4;                                    // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   SpawnPillow4_3;                                    // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    S5;                                                // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   SpawnPhone4_1;                                     // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   SpawnPillow4_2;                                    // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   SpawnPillow4_1;                                    // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    S4;                                                // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   SpawnPillow3_2;                                    // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   SpawnPillow3_1;                                    // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    S3;                                                // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   SpawnGarb2_2;                                      // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   SpawnGarb2_7;                                      // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   SpawnGarb2_6;                                      // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   SpawnGarb2_5;                                      // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   SpawnGarb2_4;                                      // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   SpawnGarb2_3;                                      // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   SpawnShrimp2_2;                                    // 0x0418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   SpawnGarb2_1;                                      // 0x0420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   SpawnShrimp2_4;                                    // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   SpawnShrimp2_3;                                    // 0x0430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   SpawnShrimp2_1;                                    // 0x0438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   SpawnPillow2_2;                                    // 0x0440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   SpawnPillow2_1;                                    // 0x0448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    S2;                                                // 0x0450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   SpawnPillow1_2;                                    // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   SpawnPillow1_1;                                    // 0x0460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    S1;                                                // 0x0468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Ss;                                                // 0x0470(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    SpawnDoor;                                         // 0x0478(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   House;                                             // 0x0480(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0488(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         Stage;                                             // 0x0490(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_494[0x4];                                      // 0x0494(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APropSpawner_editor_C*>          SpawnedStuff;                                      // 0x0498(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	bool                                          Process;                                           // 0x04A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A9[0x7];                                      // 0x04A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Key;                                               // 0x04B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                ThrowLoc;                                          // 0x04C0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ThrowRot;                                          // 0x04CC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<class AActor*>                         DeleteArray;                                       // 0x04D8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          DetectSteal;                                       // 0x04E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E9[0x7];                                      // 0x04E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         OneTimeSpawned;                                    // 0x04F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_treehouse(int32 EntryPoint);
	void BndEvt__treehouse_antiStealer_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__treehouse_antiStealer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ReachedByExplosion(const struct FVector& Location, float Damage);
	void CheckSurroundings();
	void GamemodeBeginPlay();
	void Cont();
	void RunTrigger(class AActor* Param_Owner, int32 Param_Index);
	void ChangeStage();
	void ReceiveBeginPlay();
	void SetIgnoreSave(bool Ignore);
	void SetActiveTrigger(class AActor* SentFrom, bool Active);
	void CordUnplugged(class ACord_C* Cord, class ACordSocket_C* Socket);
	void CordPlugged(class ACord_C* Cord, class ACordSocket_C* Socket);
	void Set_ignoreSave_trigger(bool NewParam);
	void HookTension(class AHook_C* Hook);
	void CleanSponge(float Clean, class AMainPlayer_C* Player);
	void Crafted();
	void Hooked(class AHook_C* Hook);
	void AttemptIgnite();
	void PlayerUsedOn(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void Slice(bool Clean);
	void bitten();
	void PlayerLookAway(class AMainPlayer_C* Player);
	void Stepped(float Volume);
	void ActionName(class AMainPlayer_C* Player, const struct FHitResult& Hit, const class FString& Param_Name);
	void AccumulateTemperature(float Temperature, float Speed);
	void AddTemperature(float Temperature);
	void MicrowaveElec();
	void PlayerHandAnyKey(class AMainPlayer_C* Player, const struct FKey& Param_Key, bool Pressed);
	void PlayerHandMouse(class AMainPlayer_C* Player, const struct FVector2D& Mouse);
	void PlayerHandMouseWheel(class AMainPlayer_C* Player, float WheelDelta);
	void PlayerHandRelease_LMB(class AMainPlayer_C* Player);
	void PlayerHandRelease_RMB(class AMainPlayer_C* Player);
	void ExtinguishFire();
	void Exploded(float Damage, const struct FVector& Location);
	void PlayerHandUse_LMB(class AMainPlayer_C* Player);
	void PlayerHandUse_RMB(class AMainPlayer_C* Player);
	void ActionOptionIndex(class AMainPlayer_C* Player, const struct FHitResult& Hit, Enum_interactionActions Action);
	void ReceivedPhyiscsDamage(float Damage, const struct FHitResult& Hot);
	void Microwave();
	void Ignite(float Fuel);
	void FireDamage(float Damage);
	void SteppedOn(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void Unhook();
	void DigUp();
	void PhysPreDestroyed();
	void PhysDestroyed();
	void SetKey(const class FString& Param_Key);
	void AddDamage(class AActor* Actor, float Damage, const struct FHitResult& Hit, const struct FVector& Impact, bool SkipSetting);
	void SetPropProps(bool Static, bool Frozen, bool Active);
	void Virus(bool Activate);
	void Eaten();
	void LeaveWaterOrigin(class AWaterVolume_C* Water);
	void EnterWaterOrigin(class AWaterVolume_C* Water);
	void LeaveWater(class AWaterVolume_C* Water);
	void EnterWater(class AWaterVolume_C* Water);
	void ImpactDamage(float Damage, const struct FHitResult& Hit, class AActor* Actor, const struct FVector& Impact);
	void TexturePickerApply(class UUmg_texturePicker_C* Picker, class UTexture2D* Texture, int32 Param_Index);
	void ApplyColor(const struct FLinearColor& Color);
	void PropRenderer_finishProps();
	void GamemodeMakeKeys();
	void AnyKey(const struct FKey& Param_Key, bool Pressed);
	void GamemodePreLoad();
	void Unfocused();
	void SettingsApplied(const struct FStruct_settings& Settings);
	void Unfoc();
	void StuffUpgraded(class AMainGamemode_C* GameMode);
	void SignalSaved();
	void SignalDeleted();
	void UserConstructionScript();
	void SetStage(bool SpawnStuff, bool SaveSpawn);
	void Adds(TArray<class USceneComponent*>& Array);
	void SpawnGift();
	void IgnoreSave(bool* Param_IgnoreSave);
	void LoadData(const struct FStruct_save& Data, bool* Return);
	void GetData(struct FStruct_save* Data);
	void SkipPreDelete(bool* Skip);
	void GatherDataFromKey(bool* Gather);
	void GetTriggerData(struct FStruct_triggerSave* Data);
	void LoadTriggerData(const struct FStruct_triggerSave& Data, bool* Return);
	void IgnoreSave_trigger(bool* Ignore);
	void GatherDataFromKeyT(bool* Gather);
	void CanBeUsedHold(bool* Return);
	void GetKey(class FString* Param_Key);
	void ToolboxFix(class AProp_toolbox_C* Toolbox, bool* Return);
	void ProcessKeys(bool* Return);
	void GetOnlyKey(class FString* Param_Key);
	void SetPath(const TArray<struct FVector>& Path, bool* Return);
	void GetActionOptions(class AMainPlayer_C* Player, class UPrimitiveComponent* Component, class AActor* Actor, TArray<class FString>* Options, TArray<Enum_interactionActions>* Options_enum, TArray<class FText>* OptionsNamesOverlay, uint8* Number);
	void GascanFuel(class AProp_gascan_C* Gascan, bool* Fueled);
	void SkipRadial(bool* Skip);
	void GetPriceMultiplier(float* PriceMult);
	void DreamInv(TArray<struct FStruct_save>& Invv, class ADreamBase_C** Base);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"treehouse_C">();
	}
	static class ATreehouse_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATreehouse_C>();
	}
};
static_assert(alignof(ATreehouse_C) == 0x000008, "Wrong alignment on ATreehouse_C");
static_assert(sizeof(ATreehouse_C) == 0x000500, "Wrong size on ATreehouse_C");
static_assert(offsetof(ATreehouse_C, UberGraphFrame) == 0x000220, "Member 'ATreehouse_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, AntiStealer) == 0x000228, "Member 'ATreehouse_C::AntiStealer' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, Gift) == 0x000230, "Member 'ATreehouse_C::Gift' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, Vis) == 0x000238, "Member 'ATreehouse_C::Vis' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, Dyn) == 0x000240, "Member 'ATreehouse_C::Dyn' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, Check) == 0x000248, "Member 'ATreehouse_C::Check' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, Pos5_2) == 0x000250, "Member 'ATreehouse_C::Pos5_2' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, Kn5_1) == 0x000258, "Member 'ATreehouse_C::Kn5_1' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, Kn5_3) == 0x000260, "Member 'ATreehouse_C::Kn5_3' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, Kn5_2) == 0x000268, "Member 'ATreehouse_C::Kn5_2' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, Decal) == 0x000270, "Member 'ATreehouse_C::Decal' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, Pos5_1) == 0x000278, "Member 'ATreehouse_C::Pos5_1' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, Pos4_1) == 0x000280, "Member 'ATreehouse_C::Pos4_1' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, Con6_1) == 0x000288, "Member 'ATreehouse_C::Con6_1' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, Con5_1) == 0x000290, "Member 'ATreehouse_C::Con5_1' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, Con4_1) == 0x000298, "Member 'ATreehouse_C::Con4_1' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, Con3_1) == 0x0002A0, "Member 'ATreehouse_C::Con3_1' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, Con2_1) == 0x0002A8, "Member 'ATreehouse_C::Con2_1' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, Con1_1) == 0x0002B0, "Member 'ATreehouse_C::Con1_1' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, SpawnPW_1) == 0x0002B8, "Member 'ATreehouse_C::SpawnPW_1' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, SpawnPW_0) == 0x0002C0, "Member 'ATreehouse_C::SpawnPW_0' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, Nav) == 0x0002C8, "Member 'ATreehouse_C::Nav' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, Heater6_1) == 0x0002D0, "Member 'ATreehouse_C::Heater6_1' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, Heater5_1) == 0x0002D8, "Member 'ATreehouse_C::Heater5_1' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, Heater4_1) == 0x0002E0, "Member 'ATreehouse_C::Heater4_1' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, Heater3_1) == 0x0002E8, "Member 'ATreehouse_C::Heater3_1' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, Heater2_1) == 0x0002F0, "Member 'ATreehouse_C::Heater2_1' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, Heater1_1) == 0x0002F8, "Member 'ATreehouse_C::Heater1_1' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, Lightk6_1) == 0x000300, "Member 'ATreehouse_C::Lightk6_1' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, Lightk5_1) == 0x000308, "Member 'ATreehouse_C::Lightk5_1' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, Lightk4_1) == 0x000310, "Member 'ATreehouse_C::Lightk4_1' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, Lightk3_1) == 0x000318, "Member 'ATreehouse_C::Lightk3_1' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, Lightk2_1) == 0x000320, "Member 'ATreehouse_C::Lightk2_1' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, Lightk1_1) == 0x000328, "Member 'ATreehouse_C::Lightk1_1' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, Climb) == 0x000330, "Member 'ATreehouse_C::Climb' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, SpawnPillow4_6) == 0x000338, "Member 'ATreehouse_C::SpawnPillow4_6' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, SpawnPillow4_5) == 0x000340, "Member 'ATreehouse_C::SpawnPillow4_5' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, S6) == 0x000348, "Member 'ATreehouse_C::S6' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, Sphere) == 0x000350, "Member 'ATreehouse_C::Sphere' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, SpawnShrimp2_6) == 0x000358, "Member 'ATreehouse_C::SpawnShrimp2_6' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, SpawnPhone4_3) == 0x000360, "Member 'ATreehouse_C::SpawnPhone4_3' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, SpawnShrimp2_10) == 0x000368, "Member 'ATreehouse_C::SpawnShrimp2_10' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, SpawnShrimp2_9) == 0x000370, "Member 'ATreehouse_C::SpawnShrimp2_9' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, SpawnShrimp2_8) == 0x000378, "Member 'ATreehouse_C::SpawnShrimp2_8' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, SpawnShrimp2_7) == 0x000380, "Member 'ATreehouse_C::SpawnShrimp2_7' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, SpawnShrimp2_5) == 0x000388, "Member 'ATreehouse_C::SpawnShrimp2_5' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, SpawnPhone4_2) == 0x000390, "Member 'ATreehouse_C::SpawnPhone4_2' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, SpawnPillow4_4) == 0x000398, "Member 'ATreehouse_C::SpawnPillow4_4' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, SpawnPillow4_3) == 0x0003A0, "Member 'ATreehouse_C::SpawnPillow4_3' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, S5) == 0x0003A8, "Member 'ATreehouse_C::S5' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, SpawnPhone4_1) == 0x0003B0, "Member 'ATreehouse_C::SpawnPhone4_1' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, SpawnPillow4_2) == 0x0003B8, "Member 'ATreehouse_C::SpawnPillow4_2' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, SpawnPillow4_1) == 0x0003C0, "Member 'ATreehouse_C::SpawnPillow4_1' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, S4) == 0x0003C8, "Member 'ATreehouse_C::S4' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, SpawnPillow3_2) == 0x0003D0, "Member 'ATreehouse_C::SpawnPillow3_2' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, SpawnPillow3_1) == 0x0003D8, "Member 'ATreehouse_C::SpawnPillow3_1' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, S3) == 0x0003E0, "Member 'ATreehouse_C::S3' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, SpawnGarb2_2) == 0x0003E8, "Member 'ATreehouse_C::SpawnGarb2_2' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, SpawnGarb2_7) == 0x0003F0, "Member 'ATreehouse_C::SpawnGarb2_7' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, SpawnGarb2_6) == 0x0003F8, "Member 'ATreehouse_C::SpawnGarb2_6' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, SpawnGarb2_5) == 0x000400, "Member 'ATreehouse_C::SpawnGarb2_5' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, SpawnGarb2_4) == 0x000408, "Member 'ATreehouse_C::SpawnGarb2_4' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, SpawnGarb2_3) == 0x000410, "Member 'ATreehouse_C::SpawnGarb2_3' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, SpawnShrimp2_2) == 0x000418, "Member 'ATreehouse_C::SpawnShrimp2_2' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, SpawnGarb2_1) == 0x000420, "Member 'ATreehouse_C::SpawnGarb2_1' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, SpawnShrimp2_4) == 0x000428, "Member 'ATreehouse_C::SpawnShrimp2_4' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, SpawnShrimp2_3) == 0x000430, "Member 'ATreehouse_C::SpawnShrimp2_3' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, SpawnShrimp2_1) == 0x000438, "Member 'ATreehouse_C::SpawnShrimp2_1' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, SpawnPillow2_2) == 0x000440, "Member 'ATreehouse_C::SpawnPillow2_2' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, SpawnPillow2_1) == 0x000448, "Member 'ATreehouse_C::SpawnPillow2_1' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, S2) == 0x000450, "Member 'ATreehouse_C::S2' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, SpawnPillow1_2) == 0x000458, "Member 'ATreehouse_C::SpawnPillow1_2' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, SpawnPillow1_1) == 0x000460, "Member 'ATreehouse_C::SpawnPillow1_1' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, S1) == 0x000468, "Member 'ATreehouse_C::S1' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, Ss) == 0x000470, "Member 'ATreehouse_C::Ss' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, SpawnDoor) == 0x000478, "Member 'ATreehouse_C::SpawnDoor' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, House) == 0x000480, "Member 'ATreehouse_C::House' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, DefaultSceneRoot) == 0x000488, "Member 'ATreehouse_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, Stage) == 0x000490, "Member 'ATreehouse_C::Stage' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, SpawnedStuff) == 0x000498, "Member 'ATreehouse_C::SpawnedStuff' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, Process) == 0x0004A8, "Member 'ATreehouse_C::Process' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, Key) == 0x0004B0, "Member 'ATreehouse_C::Key' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, ThrowLoc) == 0x0004C0, "Member 'ATreehouse_C::ThrowLoc' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, ThrowRot) == 0x0004CC, "Member 'ATreehouse_C::ThrowRot' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, DeleteArray) == 0x0004D8, "Member 'ATreehouse_C::DeleteArray' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, DetectSteal) == 0x0004E8, "Member 'ATreehouse_C::DetectSteal' has a wrong offset!");
static_assert(offsetof(ATreehouse_C, OneTimeSpawned) == 0x0004F0, "Member 'ATreehouse_C::OneTimeSpawned' has a wrong offset!");

}

