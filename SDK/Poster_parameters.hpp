#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Poster

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Struct_save_structs.hpp"
#include "InputCore_structs.hpp"
#include "Struct_mInt_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Enum_interactionActions_structs.hpp"
#include "Struct_settings_structs.hpp"


namespace SDK::Params
{

// Function poster.poster_c.ExecuteUbergraph_poster
// 0x03F0 (0x03F0 - 0x0000)
struct Poster_c_ExecuteUbergraph_poster final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E4A[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainGamemode_C*                        K2Node_Event_gamemode;                             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_Event_key;                                  // 0x0010(0x0018)(HasGetValueTypeHash)
	bool                                          K2Node_Event_pressed;                              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E4B[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Event_color;                                // 0x002C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E4C[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_3;                             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_2;                                // 0x0048(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          K2Node_Event_kick;                                 // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E4D[0x3];                                     // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_name;                                 // 0x00D4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E4E[0x4];                                     // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_2;                             // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_1;                             // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_1;                                // 0x00F0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AMainPlayer_C*                          K2Node_Event_player;                               // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit;                                  // 0x0180(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         K2Node_Event_index;                                // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_interactionActions                       K2Node_Event_action;                               // 0x020C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x020D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E4F[0x2];                                     // 0x020E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0210(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x021C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E50[0x8];                                     // 0x0228(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0230(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode;          // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UTexture2D*>                     K2Node_LowEntry_LocalVariable_Value__Object;       // 0x0270(0x0010)(ReferenceParm)
	class AProp_poster_C*                         CallFunc_FinishSpawningActor_ReturnValue;          // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_MakeHitResult_ReturnValue;                // 0x028C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         CallFunc_VictoryIntPlusEquals_IntOut;              // 0x0314(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x0318(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x031C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E51[0x3];                                     // 0x031D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_settings                       K2Node_Event_settings;                             // 0x0320(0x00CC)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Poster_c_ExecuteUbergraph_poster) == 0x000010, "Wrong alignment on Poster_c_ExecuteUbergraph_poster");
static_assert(sizeof(Poster_c_ExecuteUbergraph_poster) == 0x0003F0, "Wrong size on Poster_c_ExecuteUbergraph_poster");
static_assert(offsetof(Poster_c_ExecuteUbergraph_poster, EntryPoint) == 0x000000, "Member 'Poster_c_ExecuteUbergraph_poster::EntryPoint' has a wrong offset!");
static_assert(offsetof(Poster_c_ExecuteUbergraph_poster, K2Node_Event_gamemode) == 0x000008, "Member 'Poster_c_ExecuteUbergraph_poster::K2Node_Event_gamemode' has a wrong offset!");
static_assert(offsetof(Poster_c_ExecuteUbergraph_poster, K2Node_Event_key) == 0x000010, "Member 'Poster_c_ExecuteUbergraph_poster::K2Node_Event_key' has a wrong offset!");
static_assert(offsetof(Poster_c_ExecuteUbergraph_poster, K2Node_Event_pressed) == 0x000028, "Member 'Poster_c_ExecuteUbergraph_poster::K2Node_Event_pressed' has a wrong offset!");
static_assert(offsetof(Poster_c_ExecuteUbergraph_poster, K2Node_Event_color) == 0x00002C, "Member 'Poster_c_ExecuteUbergraph_poster::K2Node_Event_color' has a wrong offset!");
static_assert(offsetof(Poster_c_ExecuteUbergraph_poster, K2Node_Event_player_3) == 0x000040, "Member 'Poster_c_ExecuteUbergraph_poster::K2Node_Event_player_3' has a wrong offset!");
static_assert(offsetof(Poster_c_ExecuteUbergraph_poster, K2Node_Event_hit_2) == 0x000048, "Member 'Poster_c_ExecuteUbergraph_poster::K2Node_Event_hit_2' has a wrong offset!");
static_assert(offsetof(Poster_c_ExecuteUbergraph_poster, K2Node_Event_kick) == 0x0000D0, "Member 'Poster_c_ExecuteUbergraph_poster::K2Node_Event_kick' has a wrong offset!");
static_assert(offsetof(Poster_c_ExecuteUbergraph_poster, K2Node_Event_name) == 0x0000D4, "Member 'Poster_c_ExecuteUbergraph_poster::K2Node_Event_name' has a wrong offset!");
static_assert(offsetof(Poster_c_ExecuteUbergraph_poster, K2Node_Event_player_2) == 0x0000E0, "Member 'Poster_c_ExecuteUbergraph_poster::K2Node_Event_player_2' has a wrong offset!");
static_assert(offsetof(Poster_c_ExecuteUbergraph_poster, K2Node_Event_player_1) == 0x0000E8, "Member 'Poster_c_ExecuteUbergraph_poster::K2Node_Event_player_1' has a wrong offset!");
static_assert(offsetof(Poster_c_ExecuteUbergraph_poster, K2Node_Event_hit_1) == 0x0000F0, "Member 'Poster_c_ExecuteUbergraph_poster::K2Node_Event_hit_1' has a wrong offset!");
static_assert(offsetof(Poster_c_ExecuteUbergraph_poster, K2Node_Event_player) == 0x000178, "Member 'Poster_c_ExecuteUbergraph_poster::K2Node_Event_player' has a wrong offset!");
static_assert(offsetof(Poster_c_ExecuteUbergraph_poster, K2Node_Event_hit) == 0x000180, "Member 'Poster_c_ExecuteUbergraph_poster::K2Node_Event_hit' has a wrong offset!");
static_assert(offsetof(Poster_c_ExecuteUbergraph_poster, K2Node_Event_index) == 0x000208, "Member 'Poster_c_ExecuteUbergraph_poster::K2Node_Event_index' has a wrong offset!");
static_assert(offsetof(Poster_c_ExecuteUbergraph_poster, K2Node_Event_action) == 0x00020C, "Member 'Poster_c_ExecuteUbergraph_poster::K2Node_Event_action' has a wrong offset!");
static_assert(offsetof(Poster_c_ExecuteUbergraph_poster, K2Node_SwitchEnum_CmpSuccess) == 0x00020D, "Member 'Poster_c_ExecuteUbergraph_poster::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(Poster_c_ExecuteUbergraph_poster, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000210, "Member 'Poster_c_ExecuteUbergraph_poster::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Poster_c_ExecuteUbergraph_poster, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00021C, "Member 'Poster_c_ExecuteUbergraph_poster::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Poster_c_ExecuteUbergraph_poster, CallFunc_MakeTransform_ReturnValue) == 0x000230, "Member 'Poster_c_ExecuteUbergraph_poster::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(Poster_c_ExecuteUbergraph_poster, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000260, "Member 'Poster_c_ExecuteUbergraph_poster::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(Poster_c_ExecuteUbergraph_poster, CallFunc_getMainGamemode_AsMain_Gamemode) == 0x000268, "Member 'Poster_c_ExecuteUbergraph_poster::CallFunc_getMainGamemode_AsMain_Gamemode' has a wrong offset!");
static_assert(offsetof(Poster_c_ExecuteUbergraph_poster, K2Node_LowEntry_LocalVariable_Value__Object) == 0x000270, "Member 'Poster_c_ExecuteUbergraph_poster::K2Node_LowEntry_LocalVariable_Value__Object' has a wrong offset!");
static_assert(offsetof(Poster_c_ExecuteUbergraph_poster, CallFunc_FinishSpawningActor_ReturnValue) == 0x000280, "Member 'Poster_c_ExecuteUbergraph_poster::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(Poster_c_ExecuteUbergraph_poster, CallFunc_Array_Length_ReturnValue) == 0x000288, "Member 'Poster_c_ExecuteUbergraph_poster::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Poster_c_ExecuteUbergraph_poster, CallFunc_MakeHitResult_ReturnValue) == 0x00028C, "Member 'Poster_c_ExecuteUbergraph_poster::CallFunc_MakeHitResult_ReturnValue' has a wrong offset!");
static_assert(offsetof(Poster_c_ExecuteUbergraph_poster, CallFunc_VictoryIntPlusEquals_IntOut) == 0x000314, "Member 'Poster_c_ExecuteUbergraph_poster::CallFunc_VictoryIntPlusEquals_IntOut' has a wrong offset!");
static_assert(offsetof(Poster_c_ExecuteUbergraph_poster, CallFunc_Percent_IntInt_ReturnValue) == 0x000318, "Member 'Poster_c_ExecuteUbergraph_poster::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Poster_c_ExecuteUbergraph_poster, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00031C, "Member 'Poster_c_ExecuteUbergraph_poster::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Poster_c_ExecuteUbergraph_poster, K2Node_Event_settings) == 0x000320, "Member 'Poster_c_ExecuteUbergraph_poster::K2Node_Event_settings' has a wrong offset!");

// Function poster.poster_c.settingsApplied
// 0x00CC (0x00CC - 0x0000)
struct Poster_c_SettingsApplied final
{
public:
	struct FStruct_settings                       Settings;                                          // 0x0000(0x00CC)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Poster_c_SettingsApplied) == 0x000004, "Wrong alignment on Poster_c_SettingsApplied");
static_assert(sizeof(Poster_c_SettingsApplied) == 0x0000CC, "Wrong size on Poster_c_SettingsApplied");
static_assert(offsetof(Poster_c_SettingsApplied, Settings) == 0x000000, "Member 'Poster_c_SettingsApplied::Settings' has a wrong offset!");

// Function poster.poster_c.damageByPlayer
// 0x0090 (0x0090 - 0x0000)
struct Poster_c_DamageByPlayer final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Poster_c_DamageByPlayer) == 0x000008, "Wrong alignment on Poster_c_DamageByPlayer");
static_assert(sizeof(Poster_c_DamageByPlayer) == 0x000090, "Wrong size on Poster_c_DamageByPlayer");
static_assert(offsetof(Poster_c_DamageByPlayer, Player) == 0x000000, "Member 'Poster_c_DamageByPlayer::Player' has a wrong offset!");
static_assert(offsetof(Poster_c_DamageByPlayer, Hit) == 0x000008, "Member 'Poster_c_DamageByPlayer::Hit' has a wrong offset!");

// Function poster.poster_c.thrown
// 0x0008 (0x0008 - 0x0000)
struct Poster_c_Thrown final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Poster_c_Thrown) == 0x000008, "Wrong alignment on Poster_c_Thrown");
static_assert(sizeof(Poster_c_Thrown) == 0x000008, "Wrong size on Poster_c_Thrown");
static_assert(offsetof(Poster_c_Thrown, Player) == 0x000000, "Member 'Poster_c_Thrown::Player' has a wrong offset!");

// Function poster.poster_c.sendName
// 0x0008 (0x0008 - 0x0000)
struct Poster_c_SendName final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Poster_c_SendName) == 0x000004, "Wrong alignment on Poster_c_SendName");
static_assert(sizeof(Poster_c_SendName) == 0x000008, "Wrong size on Poster_c_SendName");
static_assert(offsetof(Poster_c_SendName, Param_Name) == 0x000000, "Member 'Poster_c_SendName::Param_Name' has a wrong offset!");

// Function poster.poster_c.kicked
// 0x0001 (0x0001 - 0x0000)
struct Poster_c_Kicked final
{
public:
	bool                                          Kick;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Poster_c_Kicked) == 0x000001, "Wrong alignment on Poster_c_Kicked");
static_assert(sizeof(Poster_c_Kicked) == 0x000001, "Wrong size on Poster_c_Kicked");
static_assert(offsetof(Poster_c_Kicked, Kick) == 0x000000, "Member 'Poster_c_Kicked::Kick' has a wrong offset!");

// Function poster.poster_c.player_use
// 0x0090 (0x0090 - 0x0000)
struct Poster_c_Player_use final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Poster_c_Player_use) == 0x000008, "Wrong alignment on Poster_c_Player_use");
static_assert(sizeof(Poster_c_Player_use) == 0x000090, "Wrong size on Poster_c_Player_use");
static_assert(offsetof(Poster_c_Player_use, Player) == 0x000000, "Member 'Poster_c_Player_use::Player' has a wrong offset!");
static_assert(offsetof(Poster_c_Player_use, Hit) == 0x000008, "Member 'Poster_c_Player_use::Hit' has a wrong offset!");

// Function poster.poster_c.applyColor
// 0x0010 (0x0010 - 0x0000)
struct Poster_c_ApplyColor final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Poster_c_ApplyColor) == 0x000004, "Wrong alignment on Poster_c_ApplyColor");
static_assert(sizeof(Poster_c_ApplyColor) == 0x000010, "Wrong size on Poster_c_ApplyColor");
static_assert(offsetof(Poster_c_ApplyColor, Color) == 0x000000, "Member 'Poster_c_ApplyColor::Color' has a wrong offset!");

// Function poster.poster_c.AnyKey
// 0x0020 (0x0020 - 0x0000)
struct Poster_c_AnyKey final
{
public:
	struct FKey                                   Param_Key;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Pressed;                                           // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Poster_c_AnyKey) == 0x000008, "Wrong alignment on Poster_c_AnyKey");
static_assert(sizeof(Poster_c_AnyKey) == 0x000020, "Wrong size on Poster_c_AnyKey");
static_assert(offsetof(Poster_c_AnyKey, Param_Key) == 0x000000, "Member 'Poster_c_AnyKey::Param_Key' has a wrong offset!");
static_assert(offsetof(Poster_c_AnyKey, Pressed) == 0x000018, "Member 'Poster_c_AnyKey::Pressed' has a wrong offset!");

// Function poster.poster_c.stuffUpgraded
// 0x0008 (0x0008 - 0x0000)
struct Poster_c_StuffUpgraded final
{
public:
	class AMainGamemode_C*                        GameMode;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Poster_c_StuffUpgraded) == 0x000008, "Wrong alignment on Poster_c_StuffUpgraded");
static_assert(sizeof(Poster_c_StuffUpgraded) == 0x000008, "Wrong size on Poster_c_StuffUpgraded");
static_assert(offsetof(Poster_c_StuffUpgraded, GameMode) == 0x000000, "Member 'Poster_c_StuffUpgraded::GameMode' has a wrong offset!");

// Function poster.poster_c.setPoster
// 0x0028 (0x0028 - 0x0000)
struct Poster_c_SetPoster final
{
public:
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             CallFunc_getPosters_Output;                        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E52[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Poster_c_SetPoster) == 0x000008, "Wrong alignment on Poster_c_SetPoster");
static_assert(sizeof(Poster_c_SetPoster) == 0x000028, "Wrong size on Poster_c_SetPoster");
static_assert(offsetof(Poster_c_SetPoster, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000000, "Member 'Poster_c_SetPoster::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(Poster_c_SetPoster, CallFunc_getPosters_Output) == 0x000008, "Member 'Poster_c_SetPoster::CallFunc_getPosters_Output' has a wrong offset!");
static_assert(offsetof(Poster_c_SetPoster, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000010, "Member 'Poster_c_SetPoster::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Poster_c_SetPoster, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'Poster_c_SetPoster::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Poster_c_SetPoster, CallFunc_getMainGamemode_AsMain_Gamemode) == 0x000018, "Member 'Poster_c_SetPoster::CallFunc_getMainGamemode_AsMain_Gamemode' has a wrong offset!");
static_assert(offsetof(Poster_c_SetPoster, CallFunc_Array_Get_Item) == 0x000020, "Member 'Poster_c_SetPoster::CallFunc_Array_Get_Item' has a wrong offset!");

// Function poster.poster_c.canBePutInContainer
// 0x0001 (0x0001 - 0x0000)
struct Poster_c_CanBePutInContainer final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Poster_c_CanBePutInContainer) == 0x000001, "Wrong alignment on Poster_c_CanBePutInContainer");
static_assert(sizeof(Poster_c_CanBePutInContainer) == 0x000001, "Wrong size on Poster_c_CanBePutInContainer");
static_assert(offsetof(Poster_c_CanBePutInContainer, Return) == 0x000000, "Member 'Poster_c_CanBePutInContainer::Return' has a wrong offset!");

// Function poster.poster_c.asProp
// 0x0008 (0x0008 - 0x0000)
struct Poster_c_AsProp final
{
public:
	class AProp_C*                                Return;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Poster_c_AsProp) == 0x000008, "Wrong alignment on Poster_c_AsProp");
static_assert(sizeof(Poster_c_AsProp) == 0x000008, "Wrong size on Poster_c_AsProp");
static_assert(offsetof(Poster_c_AsProp, Return) == 0x000000, "Member 'Poster_c_AsProp::Return' has a wrong offset!");

// Function poster.poster_c.canPickup
// 0x0001 (0x0001 - 0x0000)
struct Poster_c_CanPickup final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Poster_c_CanPickup) == 0x000001, "Wrong alignment on Poster_c_CanPickup");
static_assert(sizeof(Poster_c_CanPickup) == 0x000001, "Wrong size on Poster_c_CanPickup");
static_assert(offsetof(Poster_c_CanPickup, Return) == 0x000000, "Member 'Poster_c_CanPickup::Return' has a wrong offset!");

// Function poster.poster_c.noRespawn
// 0x0002 (0x0002 - 0x0000)
struct Poster_c_NoRespawn final
{
public:
	bool                                          Param_NoRespawn;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Poster_c_NoRespawn) == 0x000001, "Wrong alignment on Poster_c_NoRespawn");
static_assert(sizeof(Poster_c_NoRespawn) == 0x000002, "Wrong size on Poster_c_NoRespawn");
static_assert(offsetof(Poster_c_NoRespawn, Param_NoRespawn) == 0x000000, "Member 'Poster_c_NoRespawn::Param_NoRespawn' has a wrong offset!");
static_assert(offsetof(Poster_c_NoRespawn, Return) == 0x000001, "Member 'Poster_c_NoRespawn::Return' has a wrong offset!");

// Function poster.poster_c.lookAt
// 0x00B0 (0x00B0 - 0x0000)
struct Poster_c_LookAt final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          Return;                                            // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E53[0x7];                                     // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Text;                                              // 0x0098(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    boundObjectReplace;                                // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Poster_c_LookAt) == 0x000008, "Wrong alignment on Poster_c_LookAt");
static_assert(sizeof(Poster_c_LookAt) == 0x0000B0, "Wrong size on Poster_c_LookAt");
static_assert(offsetof(Poster_c_LookAt, Player) == 0x000000, "Member 'Poster_c_LookAt::Player' has a wrong offset!");
static_assert(offsetof(Poster_c_LookAt, Hit) == 0x000008, "Member 'Poster_c_LookAt::Hit' has a wrong offset!");
static_assert(offsetof(Poster_c_LookAt, Return) == 0x000090, "Member 'Poster_c_LookAt::Return' has a wrong offset!");
static_assert(offsetof(Poster_c_LookAt, Text) == 0x000098, "Member 'Poster_c_LookAt::Text' has a wrong offset!");
static_assert(offsetof(Poster_c_LookAt, boundObjectReplace) == 0x0000A8, "Member 'Poster_c_LookAt::boundObjectReplace' has a wrong offset!");

// Function poster.poster_c.isButtonUsed
// 0x0001 (0x0001 - 0x0000)
struct Poster_c_IsButtonUsed final
{
public:
	bool                                          Failed;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Poster_c_IsButtonUsed) == 0x000001, "Wrong alignment on Poster_c_IsButtonUsed");
static_assert(sizeof(Poster_c_IsButtonUsed) == 0x000001, "Wrong size on Poster_c_IsButtonUsed");
static_assert(offsetof(Poster_c_IsButtonUsed, Failed) == 0x000000, "Member 'Poster_c_IsButtonUsed::Failed' has a wrong offset!");

// Function poster.poster_c.dreamInv
// 0x0018 (0x0018 - 0x0000)
struct Poster_c_DreamInv final
{
public:
	TArray<struct FStruct_save>                   Invv;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class ADreamBase_C*                           Base;                                              // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Poster_c_DreamInv) == 0x000008, "Wrong alignment on Poster_c_DreamInv");
static_assert(sizeof(Poster_c_DreamInv) == 0x000018, "Wrong size on Poster_c_DreamInv");
static_assert(offsetof(Poster_c_DreamInv, Invv) == 0x000000, "Member 'Poster_c_DreamInv::Invv' has a wrong offset!");
static_assert(offsetof(Poster_c_DreamInv, Base) == 0x000010, "Member 'Poster_c_DreamInv::Base' has a wrong offset!");

// Function poster.poster_c.actionOptionIndex
// 0x0098 (0x0098 - 0x0000)
struct Poster_c_ActionOptionIndex final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         Param_Index;                                       // 0x0090(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_interactionActions                       Action;                                            // 0x0094(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Poster_c_ActionOptionIndex) == 0x000008, "Wrong alignment on Poster_c_ActionOptionIndex");
static_assert(sizeof(Poster_c_ActionOptionIndex) == 0x000098, "Wrong size on Poster_c_ActionOptionIndex");
static_assert(offsetof(Poster_c_ActionOptionIndex, Player) == 0x000000, "Member 'Poster_c_ActionOptionIndex::Player' has a wrong offset!");
static_assert(offsetof(Poster_c_ActionOptionIndex, Hit) == 0x000008, "Member 'Poster_c_ActionOptionIndex::Hit' has a wrong offset!");
static_assert(offsetof(Poster_c_ActionOptionIndex, Param_Index) == 0x000090, "Member 'Poster_c_ActionOptionIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(Poster_c_ActionOptionIndex, Action) == 0x000094, "Member 'Poster_c_ActionOptionIndex::Action' has a wrong offset!");

// Function poster.poster_c.UserConstructionScript
// 0x0028 (0x0028 - 0x0000)
struct Poster_c_UserConstructionScript final
{
public:
	class UTexture2D*                             CallFunc_getPosters_Output;                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E54[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Poster_c_UserConstructionScript) == 0x000008, "Wrong alignment on Poster_c_UserConstructionScript");
static_assert(sizeof(Poster_c_UserConstructionScript) == 0x000028, "Wrong size on Poster_c_UserConstructionScript");
static_assert(offsetof(Poster_c_UserConstructionScript, CallFunc_getPosters_Output) == 0x000000, "Member 'Poster_c_UserConstructionScript::CallFunc_getPosters_Output' has a wrong offset!");
static_assert(offsetof(Poster_c_UserConstructionScript, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000008, "Member 'Poster_c_UserConstructionScript::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Poster_c_UserConstructionScript, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000010, "Member 'Poster_c_UserConstructionScript::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(Poster_c_UserConstructionScript, CallFunc_getMainGamemode_AsMain_Gamemode) == 0x000018, "Member 'Poster_c_UserConstructionScript::CallFunc_getMainGamemode_AsMain_Gamemode' has a wrong offset!");
static_assert(offsetof(Poster_c_UserConstructionScript, CallFunc_Array_Get_Item) == 0x000020, "Member 'Poster_c_UserConstructionScript::CallFunc_Array_Get_Item' has a wrong offset!");

// Function poster.poster_c.loadData
// 0x00E0 (0x00E0 - 0x0000)
struct Poster_c_LoadData final
{
public:
	struct FStruct_save                           Data;                                              // 0x0000(0x00C0)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x00C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_loadData_return;                          // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E55[0x6];                                     // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_mInt                           CallFunc_Array_Get_Item;                           // 0x00C8(0x0010)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_1;                         // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_2;                         // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Poster_c_LoadData) == 0x000010, "Wrong alignment on Poster_c_LoadData");
static_assert(sizeof(Poster_c_LoadData) == 0x0000E0, "Wrong size on Poster_c_LoadData");
static_assert(offsetof(Poster_c_LoadData, Data) == 0x000000, "Member 'Poster_c_LoadData::Data' has a wrong offset!");
static_assert(offsetof(Poster_c_LoadData, Return) == 0x0000C0, "Member 'Poster_c_LoadData::Return' has a wrong offset!");
static_assert(offsetof(Poster_c_LoadData, CallFunc_loadData_return) == 0x0000C1, "Member 'Poster_c_LoadData::CallFunc_loadData_return' has a wrong offset!");
static_assert(offsetof(Poster_c_LoadData, CallFunc_Array_Get_Item) == 0x0000C8, "Member 'Poster_c_LoadData::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Poster_c_LoadData, CallFunc_Array_Get_Item_1) == 0x0000D8, "Member 'Poster_c_LoadData::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(Poster_c_LoadData, CallFunc_Array_Get_Item_2) == 0x0000DC, "Member 'Poster_c_LoadData::CallFunc_Array_Get_Item_2' has a wrong offset!");

// Function poster.poster_c.getData
// 0x0270 (0x0270 - 0x0000)
struct Poster_c_GetData final
{
public:
	struct FStruct_save                           Data;                                              // 0x0000(0x00C0)(Parm, OutParm, HasGetValueTypeHash)
	struct FStruct_save                           CallFunc_getData_data;                             // 0x00C0(0x00C0)(HasGetValueTypeHash)
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x0180(0x0010)(ReferenceParm)
	struct FStruct_mInt                           K2Node_MakeStruct_struct_mInt;                     // 0x0190(0x0010)(HasGetValueTypeHash)
	TArray<struct FStruct_mInt>                   K2Node_MakeArray_Array_1;                          // 0x01A0(0x0010)(ReferenceParm)
	struct FStruct_save                           K2Node_SetFieldsInStruct_StructOut;                // 0x01B0(0x00C0)(HasGetValueTypeHash)
};
static_assert(alignof(Poster_c_GetData) == 0x000010, "Wrong alignment on Poster_c_GetData");
static_assert(sizeof(Poster_c_GetData) == 0x000270, "Wrong size on Poster_c_GetData");
static_assert(offsetof(Poster_c_GetData, Data) == 0x000000, "Member 'Poster_c_GetData::Data' has a wrong offset!");
static_assert(offsetof(Poster_c_GetData, CallFunc_getData_data) == 0x0000C0, "Member 'Poster_c_GetData::CallFunc_getData_data' has a wrong offset!");
static_assert(offsetof(Poster_c_GetData, K2Node_MakeArray_Array) == 0x000180, "Member 'Poster_c_GetData::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Poster_c_GetData, K2Node_MakeStruct_struct_mInt) == 0x000190, "Member 'Poster_c_GetData::K2Node_MakeStruct_struct_mInt' has a wrong offset!");
static_assert(offsetof(Poster_c_GetData, K2Node_MakeArray_Array_1) == 0x0001A0, "Member 'Poster_c_GetData::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(Poster_c_GetData, K2Node_SetFieldsInStruct_StructOut) == 0x0001B0, "Member 'Poster_c_GetData::K2Node_SetFieldsInStruct_StructOut' has a wrong offset!");

// Function poster.poster_c.getActionOptions
// 0x0088 (0x0088 - 0x0000)
struct Poster_c_GetActionOptions final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Component;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         Options;                                           // 0x0018(0x0010)(Parm, OutParm)
	TArray<Enum_interactionActions>               Options_enum;                                      // 0x0028(0x0010)(Parm, OutParm)
	TArray<class FText>                           OptionsNamesOverlay;                               // 0x0038(0x0010)(Parm, OutParm)
	bool                                          Temp_bool_Variable;                                // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E56[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<Enum_interactionActions>               K2Node_MakeArray_Array;                            // 0x0050(0x0010)(ReferenceParm)
	TArray<Enum_interactionActions>               K2Node_MakeArray_Array_1;                          // 0x0060(0x0010)(ReferenceParm)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E57[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<Enum_interactionActions>               K2Node_Select_Default;                             // 0x0078(0x0010)(ReferenceParm)
};
static_assert(alignof(Poster_c_GetActionOptions) == 0x000008, "Wrong alignment on Poster_c_GetActionOptions");
static_assert(sizeof(Poster_c_GetActionOptions) == 0x000088, "Wrong size on Poster_c_GetActionOptions");
static_assert(offsetof(Poster_c_GetActionOptions, Player) == 0x000000, "Member 'Poster_c_GetActionOptions::Player' has a wrong offset!");
static_assert(offsetof(Poster_c_GetActionOptions, Component) == 0x000008, "Member 'Poster_c_GetActionOptions::Component' has a wrong offset!");
static_assert(offsetof(Poster_c_GetActionOptions, Actor) == 0x000010, "Member 'Poster_c_GetActionOptions::Actor' has a wrong offset!");
static_assert(offsetof(Poster_c_GetActionOptions, Options) == 0x000018, "Member 'Poster_c_GetActionOptions::Options' has a wrong offset!");
static_assert(offsetof(Poster_c_GetActionOptions, Options_enum) == 0x000028, "Member 'Poster_c_GetActionOptions::Options_enum' has a wrong offset!");
static_assert(offsetof(Poster_c_GetActionOptions, OptionsNamesOverlay) == 0x000038, "Member 'Poster_c_GetActionOptions::OptionsNamesOverlay' has a wrong offset!");
static_assert(offsetof(Poster_c_GetActionOptions, Temp_bool_Variable) == 0x000048, "Member 'Poster_c_GetActionOptions::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Poster_c_GetActionOptions, K2Node_MakeArray_Array) == 0x000050, "Member 'Poster_c_GetActionOptions::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Poster_c_GetActionOptions, K2Node_MakeArray_Array_1) == 0x000060, "Member 'Poster_c_GetActionOptions::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(Poster_c_GetActionOptions, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000070, "Member 'Poster_c_GetActionOptions::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Poster_c_GetActionOptions, K2Node_Select_Default) == 0x000078, "Member 'Poster_c_GetActionOptions::K2Node_Select_Default' has a wrong offset!");

}

