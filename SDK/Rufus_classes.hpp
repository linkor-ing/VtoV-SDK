#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Rufus

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Enum_interactionActions_structs.hpp"
#include "UMG_structs.hpp"
#include "AIModule_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass rufus.rufus_C
// 0x0070 (0x0530 - 0x04C0)
class ARufus_C : public ACharacter
{
public:
	uint8                                         Pad_4B8[0x8];                                      // 0x04B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBillboardComponent*                    Grab;                                              // 0x04C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Billboard1;                                        // 0x04D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Fnf;                                               // 0x04D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Audio;                                             // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Billboard;                                         // 0x04E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow1;                                            // 0x04F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArm;                                         // 0x04F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      A;                                                 // 0x0500(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UUmg_rufusHide_C*                       Hide;                                              // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Loc;                                               // 0x0518(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Thicc;                                             // 0x0524(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Grabb;                                             // 0x0525(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_rufus(int32 EntryPoint);
	void LeaveWater(class AWaterVolume_C* Water);
	void EnterWaterOrigin(class AWaterVolume_C* Water);
	void ImpactDamage(float Damage, const struct FHitResult& Hit, class AActor* Actor, const struct FVector& Impact);
	void AddDamage(class AActor* Actor, float Damage, const struct FHitResult& Hit, const struct FVector& Impact, bool SkipSetting);
	void EnterWater(class AWaterVolume_C* Water);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveDestroyed();
	void ReceiveBeginPlay();
	void HookTension(class AHook_C* Hook);
	void CleanSponge(float Clean, class AMainPlayer_C* Player);
	void Crafted();
	void Hooked(class AHook_C* Hook);
	void AttemptIgnite();
	void PlayerUsedOn(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void Slice(bool Clean);
	void bitten();
	void ReachedByExplosion(const struct FVector& Location, float Damage);
	void PlayerLookAway(class AMainPlayer_C* Player);
	void Stepped(float Volume);
	void ActionName(class AMainPlayer_C* Player, const struct FHitResult& Hit, const class FString& Param_Name);
	void AccumulateTemperature(float Temperature, float Speed);
	void AddTemperature(float Temperature);
	void MicrowaveElec();
	void PlayerHandAnyKey(class AMainPlayer_C* Player, const struct FKey& Key, bool Pressed);
	void PlayerHandMouse(class AMainPlayer_C* Player, const struct FVector2D& Mouse);
	void PlayerHandMouseWheel(class AMainPlayer_C* Player, float WheelDelta);
	void PlayerHandRelease_LMB(class AMainPlayer_C* Player);
	void PlayerHandRelease_RMB(class AMainPlayer_C* Player);
	void ExtinguishFire();
	void Exploded(float Damage, const struct FVector& Location);
	void PlayerHandUse_LMB(class AMainPlayer_C* Player);
	void PlayerHandUse_RMB(class AMainPlayer_C* Player);
	void ActionOptionIndex(class AMainPlayer_C* Player, const struct FHitResult& Hit, Enum_interactionActions Action);
	void ReceivedPhyiscsDamage(float Damage, const struct FHitResult& Hot);
	void Microwave();
	void Ignite(float Fuel);
	void FireDamage(float Damage);
	void SteppedOn(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void Unhook();
	void DigUp();
	void PhysPreDestroyed();
	void PhysDestroyed();
	void SetKey(const class FString& Key);
	void SetPropProps(bool Static, bool Frozen, bool Active);
	void Virus(bool Activate);
	void Eaten();
	void LeaveWaterOrigin(class AWaterVolume_C* Water);
	void OnSuccess_1F7D9ADE470B0041A1C2409B8E5B8E12(EPathFollowingResult MovementResult);
	void OnFail_1F7D9ADE470B0041A1C2409B8E5B8E12(EPathFollowingResult MovementResult);
	void OnSuccess_FADCF23E4BAF14BB33124F926CAD3C77(EPathFollowingResult MovementResult);
	void OnFail_FADCF23E4BAF14BB33124F926CAD3C77(EPathFollowingResult MovementResult);
	void Step();
	void SetPath(const TArray<struct FVector>& Path, bool* Return);
	void GetOnlyKey(class FString* Key);
	void ProcessKeys(bool* Return);
	void CanBeUsedHold(bool* Return);
	void GetKey(class FString* Key);
	void ToolboxFix(class AProp_toolbox_C* Toolbox, bool* Return);
	void GetActionOptions(class AMainPlayer_C* Player, class UPrimitiveComponent* Component, class AActor* Actor, TArray<class FString>* Options, TArray<Enum_interactionActions>* Options_enum, TArray<class FText>* OptionsNamesOverlay, uint8* Number);
	void GascanFuel(class AProp_gascan_C* Gascan, bool* Fueled);
	void SkipRadial(bool* Skip);
	void GetPriceMultiplier(float* PriceMult);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"rufus_C">();
	}
	static class ARufus_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARufus_C>();
	}
};
static_assert(alignof(ARufus_C) == 0x000010, "Wrong alignment on ARufus_C");
static_assert(sizeof(ARufus_C) == 0x000530, "Wrong size on ARufus_C");
static_assert(offsetof(ARufus_C, UberGraphFrame) == 0x0004C0, "Member 'ARufus_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ARufus_C, Grab) == 0x0004C8, "Member 'ARufus_C::Grab' has a wrong offset!");
static_assert(offsetof(ARufus_C, Billboard1) == 0x0004D0, "Member 'ARufus_C::Billboard1' has a wrong offset!");
static_assert(offsetof(ARufus_C, Fnf) == 0x0004D8, "Member 'ARufus_C::Fnf' has a wrong offset!");
static_assert(offsetof(ARufus_C, Audio) == 0x0004E0, "Member 'ARufus_C::Audio' has a wrong offset!");
static_assert(offsetof(ARufus_C, Billboard) == 0x0004E8, "Member 'ARufus_C::Billboard' has a wrong offset!");
static_assert(offsetof(ARufus_C, Arrow1) == 0x0004F0, "Member 'ARufus_C::Arrow1' has a wrong offset!");
static_assert(offsetof(ARufus_C, SpringArm) == 0x0004F8, "Member 'ARufus_C::SpringArm' has a wrong offset!");
static_assert(offsetof(ARufus_C, A) == 0x000500, "Member 'ARufus_C::A' has a wrong offset!");
static_assert(offsetof(ARufus_C, Hide) == 0x000510, "Member 'ARufus_C::Hide' has a wrong offset!");
static_assert(offsetof(ARufus_C, Loc) == 0x000518, "Member 'ARufus_C::Loc' has a wrong offset!");
static_assert(offsetof(ARufus_C, Thicc) == 0x000524, "Member 'ARufus_C::Thicc' has a wrong offset!");
static_assert(offsetof(ARufus_C, Grabb) == 0x000525, "Member 'ARufus_C::Grabb' has a wrong offset!");

}

