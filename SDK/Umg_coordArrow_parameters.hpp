#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Umg_coordArrow

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function umg_coordArrow.umg_coordArrow_C.ExecuteUbergraph_umg_coordArrow
// 0x0098 (0x0098 - 0x0000)
struct Umg_coordArrow_C_ExecuteUbergraph_umg_coordArrow final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0004(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_Vector2DToVector_ReturnValue;        // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VictoryFloatMinusEquals_FloatOut;         // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_GetAbs_ReturnValue;                // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_LowEntry_LocalVariable_Value__Object;       // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Vector_Distance_ReturnValue;              // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Umg_coordArrow_C_ExecuteUbergraph_umg_coordArrow) == 0x000004, "Wrong alignment on Umg_coordArrow_C_ExecuteUbergraph_umg_coordArrow");
static_assert(sizeof(Umg_coordArrow_C_ExecuteUbergraph_umg_coordArrow) == 0x000098, "Wrong size on Umg_coordArrow_C_ExecuteUbergraph_umg_coordArrow");
static_assert(offsetof(Umg_coordArrow_C_ExecuteUbergraph_umg_coordArrow, EntryPoint) == 0x000000, "Member 'Umg_coordArrow_C_ExecuteUbergraph_umg_coordArrow::EntryPoint' has a wrong offset!");
static_assert(offsetof(Umg_coordArrow_C_ExecuteUbergraph_umg_coordArrow, K2Node_Event_MyGeometry) == 0x000004, "Member 'Umg_coordArrow_C_ExecuteUbergraph_umg_coordArrow::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(Umg_coordArrow_C_ExecuteUbergraph_umg_coordArrow, K2Node_Event_InDeltaTime) == 0x00003C, "Member 'Umg_coordArrow_C_ExecuteUbergraph_umg_coordArrow::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(Umg_coordArrow_C_ExecuteUbergraph_umg_coordArrow, CallFunc_Conv_Vector2DToVector_ReturnValue) == 0x000040, "Member 'Umg_coordArrow_C_ExecuteUbergraph_umg_coordArrow::CallFunc_Conv_Vector2DToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_coordArrow_C_ExecuteUbergraph_umg_coordArrow, CallFunc_VictoryFloatMinusEquals_FloatOut) == 0x00004C, "Member 'Umg_coordArrow_C_ExecuteUbergraph_umg_coordArrow::CallFunc_VictoryFloatMinusEquals_FloatOut' has a wrong offset!");
static_assert(offsetof(Umg_coordArrow_C_ExecuteUbergraph_umg_coordArrow, CallFunc_Vector_GetAbs_ReturnValue) == 0x000050, "Member 'Umg_coordArrow_C_ExecuteUbergraph_umg_coordArrow::CallFunc_Vector_GetAbs_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_coordArrow_C_ExecuteUbergraph_umg_coordArrow, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00005C, "Member 'Umg_coordArrow_C_ExecuteUbergraph_umg_coordArrow::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_coordArrow_C_ExecuteUbergraph_umg_coordArrow, K2Node_LowEntry_LocalVariable_Value__Object) == 0x000060, "Member 'Umg_coordArrow_C_ExecuteUbergraph_umg_coordArrow::K2Node_LowEntry_LocalVariable_Value__Object' has a wrong offset!");
static_assert(offsetof(Umg_coordArrow_C_ExecuteUbergraph_umg_coordArrow, CallFunc_FindLookAtRotation_ReturnValue) == 0x00006C, "Member 'Umg_coordArrow_C_ExecuteUbergraph_umg_coordArrow::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_coordArrow_C_ExecuteUbergraph_umg_coordArrow, CallFunc_BreakRotator_Roll) == 0x000078, "Member 'Umg_coordArrow_C_ExecuteUbergraph_umg_coordArrow::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(Umg_coordArrow_C_ExecuteUbergraph_umg_coordArrow, CallFunc_BreakRotator_Pitch) == 0x00007C, "Member 'Umg_coordArrow_C_ExecuteUbergraph_umg_coordArrow::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(Umg_coordArrow_C_ExecuteUbergraph_umg_coordArrow, CallFunc_BreakRotator_Yaw) == 0x000080, "Member 'Umg_coordArrow_C_ExecuteUbergraph_umg_coordArrow::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(Umg_coordArrow_C_ExecuteUbergraph_umg_coordArrow, CallFunc_Vector_Distance_ReturnValue) == 0x000084, "Member 'Umg_coordArrow_C_ExecuteUbergraph_umg_coordArrow::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_coordArrow_C_ExecuteUbergraph_umg_coordArrow, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000088, "Member 'Umg_coordArrow_C_ExecuteUbergraph_umg_coordArrow::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_coordArrow_C_ExecuteUbergraph_umg_coordArrow, CallFunc_FClamp_ReturnValue) == 0x00008C, "Member 'Umg_coordArrow_C_ExecuteUbergraph_umg_coordArrow::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_coordArrow_C_ExecuteUbergraph_umg_coordArrow, CallFunc_MakeVector2D_ReturnValue) == 0x000090, "Member 'Umg_coordArrow_C_ExecuteUbergraph_umg_coordArrow::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function umg_coordArrow.umg_coordArrow_C.Tick
// 0x003C (0x003C - 0x0000)
struct Umg_coordArrow_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Umg_coordArrow_C_Tick) == 0x000004, "Wrong alignment on Umg_coordArrow_C_Tick");
static_assert(sizeof(Umg_coordArrow_C_Tick) == 0x00003C, "Wrong size on Umg_coordArrow_C_Tick");
static_assert(offsetof(Umg_coordArrow_C_Tick, MyGeometry) == 0x000000, "Member 'Umg_coordArrow_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(Umg_coordArrow_C_Tick, InDeltaTime) == 0x000038, "Member 'Umg_coordArrow_C_Tick::InDeltaTime' has a wrong offset!");

}

