#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LaserEmitter

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function laserEmitter.laserEmitter_C.ExecuteUbergraph_laserEmitter
// 0x0098 (0x0098 - 0x0000)
struct LaserEmitter_C_ExecuteUbergraph_laserEmitter final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0018(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AA5[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPointLightComponent*                   CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AA6[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_daamgedActor;                   // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2AA7[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_Array_Get_Item_1;                         // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2AA8[0x3];                                     // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0060(0x0008)(NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item_2;                         // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2AA9[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IInt_objects_C>        K2Node_DynamicCast_AsInt_Objects;                  // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2AAA[0x3];                                     // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(LaserEmitter_C_ExecuteUbergraph_laserEmitter) == 0x000008, "Wrong alignment on LaserEmitter_C_ExecuteUbergraph_laserEmitter");
static_assert(sizeof(LaserEmitter_C_ExecuteUbergraph_laserEmitter) == 0x000098, "Wrong size on LaserEmitter_C_ExecuteUbergraph_laserEmitter");
static_assert(offsetof(LaserEmitter_C_ExecuteUbergraph_laserEmitter, EntryPoint) == 0x000000, "Member 'LaserEmitter_C_ExecuteUbergraph_laserEmitter::EntryPoint' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_ExecuteUbergraph_laserEmitter, Temp_int_Variable) == 0x000004, "Member 'LaserEmitter_C_ExecuteUbergraph_laserEmitter::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_ExecuteUbergraph_laserEmitter, Temp_int_Variable_1) == 0x000008, "Member 'LaserEmitter_C_ExecuteUbergraph_laserEmitter::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_ExecuteUbergraph_laserEmitter, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'LaserEmitter_C_ExecuteUbergraph_laserEmitter::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_ExecuteUbergraph_laserEmitter, CallFunc_Add_IntInt_ReturnValue_1) == 0x000010, "Member 'LaserEmitter_C_ExecuteUbergraph_laserEmitter::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_ExecuteUbergraph_laserEmitter, Temp_int_Variable_2) == 0x000014, "Member 'LaserEmitter_C_ExecuteUbergraph_laserEmitter::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_ExecuteUbergraph_laserEmitter, K2Node_CreateDelegate_OutputDelegate) == 0x000018, "Member 'LaserEmitter_C_ExecuteUbergraph_laserEmitter::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_ExecuteUbergraph_laserEmitter, CallFunc_Add_IntInt_ReturnValue_2) == 0x000028, "Member 'LaserEmitter_C_ExecuteUbergraph_laserEmitter::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_ExecuteUbergraph_laserEmitter, CallFunc_Array_Get_Item) == 0x000030, "Member 'LaserEmitter_C_ExecuteUbergraph_laserEmitter::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_ExecuteUbergraph_laserEmitter, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'LaserEmitter_C_ExecuteUbergraph_laserEmitter::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_ExecuteUbergraph_laserEmitter, K2Node_CustomEvent_daamgedActor) == 0x000040, "Member 'LaserEmitter_C_ExecuteUbergraph_laserEmitter::K2Node_CustomEvent_daamgedActor' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_ExecuteUbergraph_laserEmitter, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'LaserEmitter_C_ExecuteUbergraph_laserEmitter::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_ExecuteUbergraph_laserEmitter, K2Node_Event_DeltaSeconds) == 0x00004C, "Member 'LaserEmitter_C_ExecuteUbergraph_laserEmitter::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_ExecuteUbergraph_laserEmitter, CallFunc_Array_Get_Item_1) == 0x000050, "Member 'LaserEmitter_C_ExecuteUbergraph_laserEmitter::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_ExecuteUbergraph_laserEmitter, CallFunc_Array_Length_ReturnValue_1) == 0x000058, "Member 'LaserEmitter_C_ExecuteUbergraph_laserEmitter::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_ExecuteUbergraph_laserEmitter, CallFunc_Less_IntInt_ReturnValue_1) == 0x00005C, "Member 'LaserEmitter_C_ExecuteUbergraph_laserEmitter::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_ExecuteUbergraph_laserEmitter, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000060, "Member 'LaserEmitter_C_ExecuteUbergraph_laserEmitter::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_ExecuteUbergraph_laserEmitter, CallFunc_Array_Get_Item_2) == 0x000068, "Member 'LaserEmitter_C_ExecuteUbergraph_laserEmitter::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_ExecuteUbergraph_laserEmitter, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000070, "Member 'LaserEmitter_C_ExecuteUbergraph_laserEmitter::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_ExecuteUbergraph_laserEmitter, K2Node_DynamicCast_AsInt_Objects) == 0x000078, "Member 'LaserEmitter_C_ExecuteUbergraph_laserEmitter::K2Node_DynamicCast_AsInt_Objects' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_ExecuteUbergraph_laserEmitter, K2Node_DynamicCast_bSuccess) == 0x000088, "Member 'LaserEmitter_C_ExecuteUbergraph_laserEmitter::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_ExecuteUbergraph_laserEmitter, CallFunc_Array_Length_ReturnValue_2) == 0x00008C, "Member 'LaserEmitter_C_ExecuteUbergraph_laserEmitter::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_ExecuteUbergraph_laserEmitter, CallFunc_Less_IntInt_ReturnValue_2) == 0x000090, "Member 'LaserEmitter_C_ExecuteUbergraph_laserEmitter::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");

// Function laserEmitter.laserEmitter_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct LaserEmitter_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(LaserEmitter_C_ReceiveTick) == 0x000004, "Wrong alignment on LaserEmitter_C_ReceiveTick");
static_assert(sizeof(LaserEmitter_C_ReceiveTick) == 0x000004, "Wrong size on LaserEmitter_C_ReceiveTick");
static_assert(offsetof(LaserEmitter_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'LaserEmitter_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function laserEmitter.laserEmitter_C.damageActor
// 0x0008 (0x0008 - 0x0000)
struct LaserEmitter_C_DamageActor final
{
public:
	class AActor*                                 Param_DaamgedActor;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(LaserEmitter_C_DamageActor) == 0x000008, "Wrong alignment on LaserEmitter_C_DamageActor");
static_assert(sizeof(LaserEmitter_C_DamageActor) == 0x000008, "Wrong size on LaserEmitter_C_DamageActor");
static_assert(offsetof(LaserEmitter_C_DamageActor, Param_DaamgedActor) == 0x000000, "Member 'LaserEmitter_C_DamageActor::Param_DaamgedActor' has a wrong offset!");

// Function laserEmitter.laserEmitter_C.fireLaser
// 0x0720 (0x0720 - 0x0000)
struct LaserEmitter_C_FireLaser final
{
public:
	TArray<EObjectTypeQuery>                      Obj;                                               // 0x0000(0x0010)(Edit, BlueprintVisible)
	bool                                          Fin;                                               // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2AAB[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                S2;                                                // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                S1;                                                // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AAC[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         DisintArray;                                       // 0x0030(0x0010)(Edit, BlueprintVisible)
	struct FVector                                End;                                               // 0x0040(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AAD[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        Hits;                                              // 0x0050(0x0010)(Edit, BlueprintVisible)
	struct FVector                                Dir;                                               // 0x0060(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Lastloc;                                           // 0x006C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Len;                                               // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UClass*>                         K2Node_MakeArray_Array;                            // 0x00A0(0x0010)(ReferenceParm)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2AAE[0x2];                                     // 0x00B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x00B4(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_2AAF[0x4];                                     // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitResult>                     CallFunc_SphereTraceMulti_OutHits;                 // 0x0140(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceMulti_ReturnValue;             // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2AB0[0x3];                                     // 0x0151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_Array_Get_Item;                           // 0x0154(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x01E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2AB1[0x2];                                     // 0x01E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x01EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x01F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0204(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0210(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AB2[0x4];                                     // 0x021C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0230(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x024C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0258(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0264(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2AB3[0x3];                                     // 0x0265(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0268(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AB4[0x4];                                     // 0x0274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_K2_GetRootComponent_ReturnValue;          // 0x0278(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2AB5[0x3];                                     // 0x0281(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetComponentBounds_Origin;                // 0x0284(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentBounds_BoxExtent;             // 0x0290(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetComponentBounds_SphereRadius;          // 0x029C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ProjectPointOnLine_ReturnValue;           // 0x02A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesImplementInterface_ReturnValue;       // 0x02AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2AB6[0x3];                                     // 0x02AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x02B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x02BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x02C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AB7[0x4];                                     // 0x02CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_DynamicCast_AsMain_Player;                  // 0x02D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2AB8[0x7];                                     // 0x02D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x02E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_ClassDynamicCast_AsProp;                    // 0x02E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x02F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2AB9[0x7];                                     // 0x02F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array_1;                          // 0x02F8(0x0010)(ReferenceParm)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0308(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2ABA[0x3];                                     // 0x0309(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x030C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0310(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2ABB[0x3];                                     // 0x0311(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0314(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2ABC[0x8];                                     // 0x0318(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Temp_struct_Variable;                              // 0x0320(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0350(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2ABD[0x4];                                     // 0x0354(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDisintegrateComponent_C*               CallFunc_AddComponent_ReturnValue;                 // 0x0358(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0360(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x036C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0370(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x037C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2ABE[0x3];                                     // 0x037D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0380(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x038C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x0398(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x0420(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_1;            // 0x0421(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_1;         // 0x0422(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2ABF[0x1];                                     // 0x0423(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_1;                    // 0x0424(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_1;                // 0x0428(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_1;                // 0x042C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_1;             // 0x0438(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_1;                  // 0x0444(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_1;            // 0x0450(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AC0[0x4];                                     // 0x045C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_1;                 // 0x0460(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_1;                // 0x0468(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_1;            // 0x0470(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_1;             // 0x0478(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_1;                 // 0x0480(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_1;            // 0x0484(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_1;               // 0x0488(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_1;              // 0x048C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_1;                // 0x0498(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_VectorVector_ReturnValue;        // 0x04A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2AC1[0x3];                                     // 0x04A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IInt_wire_C>           K2Node_DynamicCast_AsInt_Wire;                     // 0x04A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x04B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2AC2[0x3];                                     // 0x04B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x04BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorUpVector_ReturnValue;             // 0x04C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AC3[0x4];                                     // 0x04D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue_1;             // 0x04D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x04E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AC4[0x4];                                     // 0x04EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsProp_Wire_Component_Laser_Receiver; // 0x04F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_1;                // 0x04F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2AC5[0x3];                                     // 0x04F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_3;           // 0x04FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_ClassDynamicCast_AsProp_Wire_Component_Laser_Dir; // 0x0508(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_2;                // 0x0510(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2AC6[0x3];                                     // 0x0511(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x0514(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_3;                  // 0x0520(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0524(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x0525(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2AC7[0x2];                                     // 0x0526(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_3;       // 0x0528(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MirrorVectorByNormal_ReturnValue;         // 0x0534(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_slerp_res;                                // 0x0540(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MirrorVectorByNormal_ReturnValue_1;       // 0x054C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_4;       // 0x0558(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_4;                  // 0x0564(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_4;           // 0x0568(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_5;                  // 0x0574(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_LineTraceComponent_HitLocation;        // 0x0578(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_LineTraceComponent_HitNormal;          // 0x0584(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_K2_LineTraceComponent_BoneName;           // 0x0590(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_LineTraceComponent_OutHit;             // 0x0598(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_LineTraceComponent_ReturnValue;        // 0x0620(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2AC8[0x3];                                     // 0x0621(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_6;                  // 0x0624(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_2;            // 0x0628(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_2;         // 0x0629(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2AC9[0x2];                                     // 0x062A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_2;                    // 0x062C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_2;                // 0x0630(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_2;                // 0x0634(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_2;             // 0x0640(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_2;                  // 0x064C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_2;            // 0x0658(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2ACA[0x4];                                     // 0x0664(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_2;                 // 0x0668(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_2;                // 0x0670(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_2;            // 0x0678(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_2;             // 0x0680(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_2;                 // 0x0688(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_2;            // 0x068C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_2;               // 0x0690(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_2;              // 0x0694(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_2;                // 0x06A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_5;       // 0x06AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_VectorVector_ReturnValue_1;      // 0x06B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2ACB[0x3];                                     // 0x06B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_slerp_res_1;                              // 0x06BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x06C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2ACC[0x3];                                     // 0x06C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MirrorVectorByNormal_ReturnValue_2;       // 0x06CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_6;       // 0x06D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MirrorVectorByNormal_ReturnValue_3;       // 0x06E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_7;                  // 0x06F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_7;       // 0x06F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_5;           // 0x0700(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x070C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VictoryFloatMinusEquals_FloatOut;         // 0x0710(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VictoryFloatMinusEquals_FloatOut_1;       // 0x0714(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VictoryFloatMinusEquals_FloatOut_2;       // 0x0718(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(LaserEmitter_C_FireLaser) == 0x000010, "Wrong alignment on LaserEmitter_C_FireLaser");
static_assert(sizeof(LaserEmitter_C_FireLaser) == 0x000720, "Wrong size on LaserEmitter_C_FireLaser");
static_assert(offsetof(LaserEmitter_C_FireLaser, Obj) == 0x000000, "Member 'LaserEmitter_C_FireLaser::Obj' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, Fin) == 0x000010, "Member 'LaserEmitter_C_FireLaser::Fin' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, S2) == 0x000014, "Member 'LaserEmitter_C_FireLaser::S2' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, S1) == 0x000020, "Member 'LaserEmitter_C_FireLaser::S1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, DisintArray) == 0x000030, "Member 'LaserEmitter_C_FireLaser::DisintArray' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, End) == 0x000040, "Member 'LaserEmitter_C_FireLaser::End' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, Hits) == 0x000050, "Member 'LaserEmitter_C_FireLaser::Hits' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, Dir) == 0x000060, "Member 'LaserEmitter_C_FireLaser::Dir' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, Lastloc) == 0x00006C, "Member 'LaserEmitter_C_FireLaser::Lastloc' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, Len) == 0x000078, "Member 'LaserEmitter_C_FireLaser::Len' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, Temp_int_Loop_Counter_Variable) == 0x00007C, "Member 'LaserEmitter_C_FireLaser::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, Temp_int_Array_Index_Variable) == 0x000080, "Member 'LaserEmitter_C_FireLaser::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_Add_IntInt_ReturnValue) == 0x000084, "Member 'LaserEmitter_C_FireLaser::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_Add_VectorVector_ReturnValue) == 0x000088, "Member 'LaserEmitter_C_FireLaser::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000094, "Member 'LaserEmitter_C_FireLaser::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, K2Node_MakeArray_Array) == 0x0000A0, "Member 'LaserEmitter_C_FireLaser::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x0000B0, "Member 'LaserEmitter_C_FireLaser::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_Less_FloatFloat_ReturnValue) == 0x0000B1, "Member 'LaserEmitter_C_FireLaser::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x0000B4, "Member 'LaserEmitter_C_FireLaser::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_SphereTraceMulti_OutHits) == 0x000140, "Member 'LaserEmitter_C_FireLaser::CallFunc_SphereTraceMulti_OutHits' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_SphereTraceMulti_ReturnValue) == 0x000150, "Member 'LaserEmitter_C_FireLaser::CallFunc_SphereTraceMulti_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_Array_Get_Item) == 0x000154, "Member 'LaserEmitter_C_FireLaser::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_Array_Length_ReturnValue) == 0x0001DC, "Member 'LaserEmitter_C_FireLaser::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_bBlockingHit) == 0x0001E0, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_bInitialOverlap) == 0x0001E1, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_Time) == 0x0001E4, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_Distance) == 0x0001E8, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_Location) == 0x0001EC, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_ImpactPoint) == 0x0001F8, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_Normal) == 0x000204, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_ImpactNormal) == 0x000210, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_PhysMat) == 0x000220, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_HitActor) == 0x000228, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_HitComponent) == 0x000230, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_HitBoneName) == 0x000238, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_HitItem) == 0x000240, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_ElementIndex) == 0x000244, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_FaceIndex) == 0x000248, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_TraceStart) == 0x00024C, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_TraceEnd) == 0x000258, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_Less_IntInt_ReturnValue) == 0x000264, "Member 'LaserEmitter_C_FireLaser::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000268, "Member 'LaserEmitter_C_FireLaser::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_K2_GetRootComponent_ReturnValue) == 0x000278, "Member 'LaserEmitter_C_FireLaser::CallFunc_K2_GetRootComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_IsValid_ReturnValue) == 0x000280, "Member 'LaserEmitter_C_FireLaser::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_GetComponentBounds_Origin) == 0x000284, "Member 'LaserEmitter_C_FireLaser::CallFunc_GetComponentBounds_Origin' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_GetComponentBounds_BoxExtent) == 0x000290, "Member 'LaserEmitter_C_FireLaser::CallFunc_GetComponentBounds_BoxExtent' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_GetComponentBounds_SphereRadius) == 0x00029C, "Member 'LaserEmitter_C_FireLaser::CallFunc_GetComponentBounds_SphereRadius' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_ProjectPointOnLine_ReturnValue) == 0x0002A0, "Member 'LaserEmitter_C_FireLaser::CallFunc_ProjectPointOnLine_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_DoesImplementInterface_ReturnValue) == 0x0002AC, "Member 'LaserEmitter_C_FireLaser::CallFunc_DoesImplementInterface_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x0002B0, "Member 'LaserEmitter_C_FireLaser::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_Normal_ReturnValue) == 0x0002BC, "Member 'LaserEmitter_C_FireLaser::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_Array_Add_ReturnValue) == 0x0002C8, "Member 'LaserEmitter_C_FireLaser::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, K2Node_DynamicCast_AsMain_Player) == 0x0002D0, "Member 'LaserEmitter_C_FireLaser::K2Node_DynamicCast_AsMain_Player' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, K2Node_DynamicCast_bSuccess) == 0x0002D8, "Member 'LaserEmitter_C_FireLaser::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_GetObjectClass_ReturnValue) == 0x0002E0, "Member 'LaserEmitter_C_FireLaser::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, K2Node_ClassDynamicCast_AsProp) == 0x0002E8, "Member 'LaserEmitter_C_FireLaser::K2Node_ClassDynamicCast_AsProp' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, K2Node_ClassDynamicCast_bSuccess) == 0x0002F0, "Member 'LaserEmitter_C_FireLaser::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, K2Node_MakeArray_Array_1) == 0x0002F8, "Member 'LaserEmitter_C_FireLaser::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BooleanOR_ReturnValue) == 0x000308, "Member 'LaserEmitter_C_FireLaser::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, Temp_int_Variable) == 0x00030C, "Member 'LaserEmitter_C_FireLaser::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000310, "Member 'LaserEmitter_C_FireLaser::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_Add_IntInt_ReturnValue_1) == 0x000314, "Member 'LaserEmitter_C_FireLaser::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, Temp_struct_Variable) == 0x000320, "Member 'LaserEmitter_C_FireLaser::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_Array_Add_ReturnValue_1) == 0x000350, "Member 'LaserEmitter_C_FireLaser::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_AddComponent_ReturnValue) == 0x000358, "Member 'LaserEmitter_C_FireLaser::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_GetActorForwardVector_ReturnValue) == 0x000360, "Member 'LaserEmitter_C_FireLaser::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_Array_Add_ReturnValue_2) == 0x00036C, "Member 'LaserEmitter_C_FireLaser::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000370, "Member 'LaserEmitter_C_FireLaser::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00037C, "Member 'LaserEmitter_C_FireLaser::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000380, "Member 'LaserEmitter_C_FireLaser::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_Add_VectorVector_ReturnValue_2) == 0x00038C, "Member 'LaserEmitter_C_FireLaser::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_LineTraceSingleForObjects_OutHit) == 0x000398, "Member 'LaserEmitter_C_FireLaser::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x000420, "Member 'LaserEmitter_C_FireLaser::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_bBlockingHit_1) == 0x000421, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_bBlockingHit_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_bInitialOverlap_1) == 0x000422, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_bInitialOverlap_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_Time_1) == 0x000424, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_Time_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_Distance_1) == 0x000428, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_Distance_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_Location_1) == 0x00042C, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_Location_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_ImpactPoint_1) == 0x000438, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_ImpactPoint_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_Normal_1) == 0x000444, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_Normal_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_ImpactNormal_1) == 0x000450, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_ImpactNormal_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_PhysMat_1) == 0x000460, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_PhysMat_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_HitActor_1) == 0x000468, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_HitActor_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_HitComponent_1) == 0x000470, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_HitComponent_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_HitBoneName_1) == 0x000478, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_HitBoneName_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_HitItem_1) == 0x000480, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_HitItem_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_ElementIndex_1) == 0x000484, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_ElementIndex_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_FaceIndex_1) == 0x000488, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_FaceIndex_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_TraceStart_1) == 0x00048C, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_TraceStart_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_TraceEnd_1) == 0x000498, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_TraceEnd_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_NotEqual_VectorVector_ReturnValue) == 0x0004A4, "Member 'LaserEmitter_C_FireLaser::CallFunc_NotEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, K2Node_DynamicCast_AsInt_Wire) == 0x0004A8, "Member 'LaserEmitter_C_FireLaser::K2Node_DynamicCast_AsInt_Wire' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, K2Node_DynamicCast_bSuccess_1) == 0x0004B8, "Member 'LaserEmitter_C_FireLaser::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x0004BC, "Member 'LaserEmitter_C_FireLaser::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_GetActorUpVector_ReturnValue) == 0x0004C8, "Member 'LaserEmitter_C_FireLaser::CallFunc_GetActorUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_GetObjectClass_ReturnValue_1) == 0x0004D8, "Member 'LaserEmitter_C_FireLaser::CallFunc_GetObjectClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x0004E0, "Member 'LaserEmitter_C_FireLaser::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, K2Node_ClassDynamicCast_AsProp_Wire_Component_Laser_Receiver) == 0x0004F0, "Member 'LaserEmitter_C_FireLaser::K2Node_ClassDynamicCast_AsProp_Wire_Component_Laser_Receiver' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, K2Node_ClassDynamicCast_bSuccess_1) == 0x0004F8, "Member 'LaserEmitter_C_FireLaser::K2Node_ClassDynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_Add_VectorVector_ReturnValue_3) == 0x0004FC, "Member 'LaserEmitter_C_FireLaser::CallFunc_Add_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, K2Node_ClassDynamicCast_AsProp_Wire_Component_Laser_Dir) == 0x000508, "Member 'LaserEmitter_C_FireLaser::K2Node_ClassDynamicCast_AsProp_Wire_Component_Laser_Dir' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, K2Node_ClassDynamicCast_bSuccess_2) == 0x000510, "Member 'LaserEmitter_C_FireLaser::K2Node_ClassDynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x000514, "Member 'LaserEmitter_C_FireLaser::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_Array_Add_ReturnValue_3) == 0x000520, "Member 'LaserEmitter_C_FireLaser::CallFunc_Array_Add_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000524, "Member 'LaserEmitter_C_FireLaser::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x000525, "Member 'LaserEmitter_C_FireLaser::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_Multiply_VectorFloat_ReturnValue_3) == 0x000528, "Member 'LaserEmitter_C_FireLaser::CallFunc_Multiply_VectorFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_MirrorVectorByNormal_ReturnValue) == 0x000534, "Member 'LaserEmitter_C_FireLaser::CallFunc_MirrorVectorByNormal_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_slerp_res) == 0x000540, "Member 'LaserEmitter_C_FireLaser::CallFunc_slerp_res' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_MirrorVectorByNormal_ReturnValue_1) == 0x00054C, "Member 'LaserEmitter_C_FireLaser::CallFunc_MirrorVectorByNormal_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_Multiply_VectorFloat_ReturnValue_4) == 0x000558, "Member 'LaserEmitter_C_FireLaser::CallFunc_Multiply_VectorFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_Array_Add_ReturnValue_4) == 0x000564, "Member 'LaserEmitter_C_FireLaser::CallFunc_Array_Add_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_Add_VectorVector_ReturnValue_4) == 0x000568, "Member 'LaserEmitter_C_FireLaser::CallFunc_Add_VectorVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_Array_Add_ReturnValue_5) == 0x000574, "Member 'LaserEmitter_C_FireLaser::CallFunc_Array_Add_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_K2_LineTraceComponent_HitLocation) == 0x000578, "Member 'LaserEmitter_C_FireLaser::CallFunc_K2_LineTraceComponent_HitLocation' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_K2_LineTraceComponent_HitNormal) == 0x000584, "Member 'LaserEmitter_C_FireLaser::CallFunc_K2_LineTraceComponent_HitNormal' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_K2_LineTraceComponent_BoneName) == 0x000590, "Member 'LaserEmitter_C_FireLaser::CallFunc_K2_LineTraceComponent_BoneName' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_K2_LineTraceComponent_OutHit) == 0x000598, "Member 'LaserEmitter_C_FireLaser::CallFunc_K2_LineTraceComponent_OutHit' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_K2_LineTraceComponent_ReturnValue) == 0x000620, "Member 'LaserEmitter_C_FireLaser::CallFunc_K2_LineTraceComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_Array_Add_ReturnValue_6) == 0x000624, "Member 'LaserEmitter_C_FireLaser::CallFunc_Array_Add_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_bBlockingHit_2) == 0x000628, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_bBlockingHit_2' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_bInitialOverlap_2) == 0x000629, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_bInitialOverlap_2' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_Time_2) == 0x00062C, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_Time_2' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_Distance_2) == 0x000630, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_Distance_2' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_Location_2) == 0x000634, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_Location_2' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_ImpactPoint_2) == 0x000640, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_ImpactPoint_2' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_Normal_2) == 0x00064C, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_Normal_2' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_ImpactNormal_2) == 0x000658, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_ImpactNormal_2' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_PhysMat_2) == 0x000668, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_PhysMat_2' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_HitActor_2) == 0x000670, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_HitActor_2' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_HitComponent_2) == 0x000678, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_HitComponent_2' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_HitBoneName_2) == 0x000680, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_HitBoneName_2' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_HitItem_2) == 0x000688, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_HitItem_2' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_ElementIndex_2) == 0x00068C, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_ElementIndex_2' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_FaceIndex_2) == 0x000690, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_FaceIndex_2' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_TraceStart_2) == 0x000694, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_TraceStart_2' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BreakHitResult_TraceEnd_2) == 0x0006A0, "Member 'LaserEmitter_C_FireLaser::CallFunc_BreakHitResult_TraceEnd_2' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_Multiply_VectorFloat_ReturnValue_5) == 0x0006AC, "Member 'LaserEmitter_C_FireLaser::CallFunc_Multiply_VectorFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_NotEqual_VectorVector_ReturnValue_1) == 0x0006B8, "Member 'LaserEmitter_C_FireLaser::CallFunc_NotEqual_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_slerp_res_1) == 0x0006BC, "Member 'LaserEmitter_C_FireLaser::CallFunc_slerp_res_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_BooleanAND_ReturnValue) == 0x0006C8, "Member 'LaserEmitter_C_FireLaser::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_MirrorVectorByNormal_ReturnValue_2) == 0x0006CC, "Member 'LaserEmitter_C_FireLaser::CallFunc_MirrorVectorByNormal_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_Multiply_VectorFloat_ReturnValue_6) == 0x0006D8, "Member 'LaserEmitter_C_FireLaser::CallFunc_Multiply_VectorFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_MirrorVectorByNormal_ReturnValue_3) == 0x0006E4, "Member 'LaserEmitter_C_FireLaser::CallFunc_MirrorVectorByNormal_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_Array_Add_ReturnValue_7) == 0x0006F0, "Member 'LaserEmitter_C_FireLaser::CallFunc_Array_Add_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_Multiply_VectorFloat_ReturnValue_7) == 0x0006F4, "Member 'LaserEmitter_C_FireLaser::CallFunc_Multiply_VectorFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_Add_VectorVector_ReturnValue_5) == 0x000700, "Member 'LaserEmitter_C_FireLaser::CallFunc_Add_VectorVector_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_Add_FloatFloat_ReturnValue) == 0x00070C, "Member 'LaserEmitter_C_FireLaser::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_VictoryFloatMinusEquals_FloatOut) == 0x000710, "Member 'LaserEmitter_C_FireLaser::CallFunc_VictoryFloatMinusEquals_FloatOut' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_VictoryFloatMinusEquals_FloatOut_1) == 0x000714, "Member 'LaserEmitter_C_FireLaser::CallFunc_VictoryFloatMinusEquals_FloatOut_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FireLaser, CallFunc_VictoryFloatMinusEquals_FloatOut_2) == 0x000718, "Member 'LaserEmitter_C_FireLaser::CallFunc_VictoryFloatMinusEquals_FloatOut_2' has a wrong offset!");

// Function laserEmitter.laserEmitter_C.generateEffect
// 0x0240 (0x0240 - 0x0000)
struct LaserEmitter_C_GenerateEffect final
{
public:
	TArray<struct FVector>                        Hits;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         Temp_int_Variable;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue_1;            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item;                           // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2ACD[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item_1;                         // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2ACE[0x3];                                     // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorScale3D_ReturnValue;              // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item_2;                         // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_1;            // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2ACF[0x3];                                     // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Array_Get_Item_3;                         // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AD0[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue;       // 0x0090(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x0098(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FTransform                             Temp_struct_Variable;                              // 0x0120(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AD1[0x4];                                     // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPointLightComponent*                   CallFunc_AddComponent_ReturnValue;                 // 0x0158(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   CallFunc_Array_Get_Item_4;                         // 0x0160(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2AD2[0x3];                                     // 0x0179(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   CallFunc_Array_Get_Item_5;                         // 0x0180(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2AD3[0x7];                                     // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               CallFunc_Array_Get_Item_6;                         // 0x0190(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult_1;     // 0x019C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_2AD4[0x4];                                     // 0x0224(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               CallFunc_Array_Get_Item_7;                         // 0x0228(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x0234(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_2;            // 0x0235(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(LaserEmitter_C_GenerateEffect) == 0x000010, "Wrong alignment on LaserEmitter_C_GenerateEffect");
static_assert(sizeof(LaserEmitter_C_GenerateEffect) == 0x000240, "Wrong size on LaserEmitter_C_GenerateEffect");
static_assert(offsetof(LaserEmitter_C_GenerateEffect, Hits) == 0x000000, "Member 'LaserEmitter_C_GenerateEffect::Hits' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_GenerateEffect, Temp_int_Variable) == 0x000010, "Member 'LaserEmitter_C_GenerateEffect::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_GenerateEffect, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'LaserEmitter_C_GenerateEffect::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_GenerateEffect, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'LaserEmitter_C_GenerateEffect::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_GenerateEffect, CallFunc_Array_Length_ReturnValue_1) == 0x00001C, "Member 'LaserEmitter_C_GenerateEffect::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_GenerateEffect, CallFunc_Array_LastIndex_ReturnValue) == 0x000020, "Member 'LaserEmitter_C_GenerateEffect::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_GenerateEffect, CallFunc_Array_LastIndex_ReturnValue_1) == 0x000024, "Member 'LaserEmitter_C_GenerateEffect::CallFunc_Array_LastIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_GenerateEffect, CallFunc_Array_Length_ReturnValue_2) == 0x000028, "Member 'LaserEmitter_C_GenerateEffect::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_GenerateEffect, Temp_int_Array_Index_Variable) == 0x00002C, "Member 'LaserEmitter_C_GenerateEffect::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_GenerateEffect, CallFunc_Array_Get_Item) == 0x000030, "Member 'LaserEmitter_C_GenerateEffect::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_GenerateEffect, CallFunc_NotEqual_IntInt_ReturnValue) == 0x00003C, "Member 'LaserEmitter_C_GenerateEffect::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_GenerateEffect, CallFunc_Add_IntInt_ReturnValue_1) == 0x000040, "Member 'LaserEmitter_C_GenerateEffect::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_GenerateEffect, CallFunc_Array_Get_Item_1) == 0x000044, "Member 'LaserEmitter_C_GenerateEffect::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_GenerateEffect, Temp_int_Loop_Counter_Variable) == 0x000050, "Member 'LaserEmitter_C_GenerateEffect::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_GenerateEffect, CallFunc_Less_IntInt_ReturnValue) == 0x000054, "Member 'LaserEmitter_C_GenerateEffect::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_GenerateEffect, CallFunc_Add_IntInt_ReturnValue_2) == 0x000058, "Member 'LaserEmitter_C_GenerateEffect::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_GenerateEffect, Temp_int_Array_Index_Variable_1) == 0x00005C, "Member 'LaserEmitter_C_GenerateEffect::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_GenerateEffect, CallFunc_GetActorScale3D_ReturnValue) == 0x000060, "Member 'LaserEmitter_C_GenerateEffect::CallFunc_GetActorScale3D_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_GenerateEffect, CallFunc_Array_Get_Item_2) == 0x00006C, "Member 'LaserEmitter_C_GenerateEffect::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_GenerateEffect, CallFunc_Add_IntInt_ReturnValue_3) == 0x000078, "Member 'LaserEmitter_C_GenerateEffect::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_GenerateEffect, CallFunc_NotEqual_IntInt_ReturnValue_1) == 0x00007C, "Member 'LaserEmitter_C_GenerateEffect::CallFunc_NotEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_GenerateEffect, CallFunc_Array_Get_Item_3) == 0x000080, "Member 'LaserEmitter_C_GenerateEffect::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_GenerateEffect, CallFunc_SpawnEmitterAtLocation_ReturnValue) == 0x000090, "Member 'LaserEmitter_C_GenerateEffect::CallFunc_SpawnEmitterAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_GenerateEffect, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x000098, "Member 'LaserEmitter_C_GenerateEffect::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_GenerateEffect, Temp_struct_Variable) == 0x000120, "Member 'LaserEmitter_C_GenerateEffect::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_GenerateEffect, CallFunc_Array_Length_ReturnValue_3) == 0x000150, "Member 'LaserEmitter_C_GenerateEffect::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_GenerateEffect, CallFunc_AddComponent_ReturnValue) == 0x000158, "Member 'LaserEmitter_C_GenerateEffect::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_GenerateEffect, CallFunc_Array_Get_Item_4) == 0x000160, "Member 'LaserEmitter_C_GenerateEffect::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_GenerateEffect, CallFunc_Array_Add_ReturnValue) == 0x000168, "Member 'LaserEmitter_C_GenerateEffect::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_GenerateEffect, Temp_int_Variable_1) == 0x00016C, "Member 'LaserEmitter_C_GenerateEffect::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_GenerateEffect, Temp_int_Loop_Counter_Variable_1) == 0x000170, "Member 'LaserEmitter_C_GenerateEffect::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_GenerateEffect, CallFunc_Add_IntInt_ReturnValue_4) == 0x000174, "Member 'LaserEmitter_C_GenerateEffect::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_GenerateEffect, CallFunc_Less_IntInt_ReturnValue_1) == 0x000178, "Member 'LaserEmitter_C_GenerateEffect::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_GenerateEffect, CallFunc_Add_IntInt_ReturnValue_5) == 0x00017C, "Member 'LaserEmitter_C_GenerateEffect::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_GenerateEffect, CallFunc_Array_Get_Item_5) == 0x000180, "Member 'LaserEmitter_C_GenerateEffect::CallFunc_Array_Get_Item_5' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_GenerateEffect, CallFunc_Less_IntInt_ReturnValue_2) == 0x000188, "Member 'LaserEmitter_C_GenerateEffect::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_GenerateEffect, CallFunc_Array_Get_Item_6) == 0x000190, "Member 'LaserEmitter_C_GenerateEffect::CallFunc_Array_Get_Item_6' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_GenerateEffect, CallFunc_Array_Add_ReturnValue_1) == 0x000198, "Member 'LaserEmitter_C_GenerateEffect::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_GenerateEffect, CallFunc_K2_SetWorldLocation_SweepHitResult_1) == 0x00019C, "Member 'LaserEmitter_C_GenerateEffect::CallFunc_K2_SetWorldLocation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_GenerateEffect, CallFunc_Array_Get_Item_7) == 0x000228, "Member 'LaserEmitter_C_GenerateEffect::CallFunc_Array_Get_Item_7' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_GenerateEffect, CallFunc_Array_Length_ReturnValue_4) == 0x000230, "Member 'LaserEmitter_C_GenerateEffect::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_GenerateEffect, CallFunc_Less_IntInt_ReturnValue_3) == 0x000234, "Member 'LaserEmitter_C_GenerateEffect::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_GenerateEffect, CallFunc_NotEqual_IntInt_ReturnValue_2) == 0x000235, "Member 'LaserEmitter_C_GenerateEffect::CallFunc_NotEqual_IntInt_ReturnValue_2' has a wrong offset!");

// Function laserEmitter.laserEmitter_C.updateLightElement
// 0x0170 (0x0170 - 0x0000)
struct LaserEmitter_C_UpdateLightElement final
{
public:
	class UPointLightComponent*                   InputPin;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InputPin2;                                         // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InputPin3;                                         // 0x0014(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorFloat_ReturnValue;           // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromZ_ReturnValue;                 // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x0050(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x00D8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_Vector_Distance_ReturnValue;              // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(LaserEmitter_C_UpdateLightElement) == 0x000008, "Wrong alignment on LaserEmitter_C_UpdateLightElement");
static_assert(sizeof(LaserEmitter_C_UpdateLightElement) == 0x000170, "Wrong size on LaserEmitter_C_UpdateLightElement");
static_assert(offsetof(LaserEmitter_C_UpdateLightElement, InputPin) == 0x000000, "Member 'LaserEmitter_C_UpdateLightElement::InputPin' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_UpdateLightElement, InputPin2) == 0x000008, "Member 'LaserEmitter_C_UpdateLightElement::InputPin2' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_UpdateLightElement, InputPin3) == 0x000014, "Member 'LaserEmitter_C_UpdateLightElement::InputPin3' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_UpdateLightElement, CallFunc_Add_VectorVector_ReturnValue) == 0x000020, "Member 'LaserEmitter_C_UpdateLightElement::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_UpdateLightElement, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00002C, "Member 'LaserEmitter_C_UpdateLightElement::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_UpdateLightElement, CallFunc_Divide_VectorFloat_ReturnValue) == 0x000038, "Member 'LaserEmitter_C_UpdateLightElement::CallFunc_Divide_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_UpdateLightElement, CallFunc_MakeRotFromZ_ReturnValue) == 0x000044, "Member 'LaserEmitter_C_UpdateLightElement::CallFunc_MakeRotFromZ_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_UpdateLightElement, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x000050, "Member 'LaserEmitter_C_UpdateLightElement::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_UpdateLightElement, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x0000D8, "Member 'LaserEmitter_C_UpdateLightElement::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_UpdateLightElement, CallFunc_Vector_Distance_ReturnValue) == 0x000160, "Member 'LaserEmitter_C_UpdateLightElement::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_UpdateLightElement, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000164, "Member 'LaserEmitter_C_UpdateLightElement::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_UpdateLightElement, CallFunc_Add_FloatFloat_ReturnValue) == 0x000168, "Member 'LaserEmitter_C_UpdateLightElement::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function laserEmitter.laserEmitter_C.finishLaser
// 0x0038 (0x0038 - 0x0000)
struct LaserEmitter_C_FinishLaser final
{
public:
	int32                                         Temp_int_Variable;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2AD5[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AD6[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               CallFunc_Array_Get_Item_1;                         // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(LaserEmitter_C_FinishLaser) == 0x000008, "Wrong alignment on LaserEmitter_C_FinishLaser");
static_assert(sizeof(LaserEmitter_C_FinishLaser) == 0x000038, "Wrong size on LaserEmitter_C_FinishLaser");
static_assert(offsetof(LaserEmitter_C_FinishLaser, Temp_int_Variable) == 0x000000, "Member 'LaserEmitter_C_FinishLaser::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FinishLaser, Temp_int_Variable_1) == 0x000004, "Member 'LaserEmitter_C_FinishLaser::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FinishLaser, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'LaserEmitter_C_FinishLaser::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FinishLaser, CallFunc_Add_IntInt_ReturnValue_1) == 0x00000C, "Member 'LaserEmitter_C_FinishLaser::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FinishLaser, CallFunc_Array_Get_Item) == 0x000010, "Member 'LaserEmitter_C_FinishLaser::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FinishLaser, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'LaserEmitter_C_FinishLaser::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FinishLaser, CallFunc_Less_IntInt_ReturnValue) == 0x00001C, "Member 'LaserEmitter_C_FinishLaser::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FinishLaser, CallFunc_Array_Length_ReturnValue_1) == 0x000020, "Member 'LaserEmitter_C_FinishLaser::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FinishLaser, CallFunc_Array_Get_Item_1) == 0x000028, "Member 'LaserEmitter_C_FinishLaser::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_FinishLaser, CallFunc_Less_IntInt_ReturnValue_1) == 0x000030, "Member 'LaserEmitter_C_FinishLaser::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

// Function laserEmitter.laserEmitter_C.resetIgnores
// 0x0018 (0x0018 - 0x0000)
struct LaserEmitter_C_ResetIgnores final
{
public:
	class AActor*                                 CallFunc_GetParentActor_ReturnValue;               // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0008(0x0010)(ReferenceParm)
};
static_assert(alignof(LaserEmitter_C_ResetIgnores) == 0x000008, "Wrong alignment on LaserEmitter_C_ResetIgnores");
static_assert(sizeof(LaserEmitter_C_ResetIgnores) == 0x000018, "Wrong size on LaserEmitter_C_ResetIgnores");
static_assert(offsetof(LaserEmitter_C_ResetIgnores, CallFunc_GetParentActor_ReturnValue) == 0x000000, "Member 'LaserEmitter_C_ResetIgnores::CallFunc_GetParentActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_ResetIgnores, K2Node_MakeArray_Array) == 0x000008, "Member 'LaserEmitter_C_ResetIgnores::K2Node_MakeArray_Array' has a wrong offset!");

// Function laserEmitter.laserEmitter_C.slerp
// 0x0088 (0x0088 - 0x0000)
struct LaserEmitter_C_Slerp final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Normal;                                            // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Alpha;                                             // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Res;                                               // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Th;                                                // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Rel;                                               // 0x002C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegSin_ReturnValue;                       // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegCos_ReturnValue;                       // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegAcos_ReturnValue;                      // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(LaserEmitter_C_Slerp) == 0x000004, "Wrong alignment on LaserEmitter_C_Slerp");
static_assert(sizeof(LaserEmitter_C_Slerp) == 0x000088, "Wrong size on LaserEmitter_C_Slerp");
static_assert(offsetof(LaserEmitter_C_Slerp, Direction) == 0x000000, "Member 'LaserEmitter_C_Slerp::Direction' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_Slerp, Normal) == 0x00000C, "Member 'LaserEmitter_C_Slerp::Normal' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_Slerp, Alpha) == 0x000018, "Member 'LaserEmitter_C_Slerp::Alpha' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_Slerp, Res) == 0x00001C, "Member 'LaserEmitter_C_Slerp::Res' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_Slerp, Th) == 0x000028, "Member 'LaserEmitter_C_Slerp::Th' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_Slerp, Rel) == 0x00002C, "Member 'LaserEmitter_C_Slerp::Rel' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_Slerp, CallFunc_Dot_VectorVector_ReturnValue) == 0x000038, "Member 'LaserEmitter_C_Slerp::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_Slerp, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00003C, "Member 'LaserEmitter_C_Slerp::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_Slerp, CallFunc_DegSin_ReturnValue) == 0x000048, "Member 'LaserEmitter_C_Slerp::CallFunc_DegSin_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_Slerp, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00004C, "Member 'LaserEmitter_C_Slerp::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_Slerp, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000058, "Member 'LaserEmitter_C_Slerp::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_Slerp, CallFunc_DegCos_ReturnValue) == 0x000064, "Member 'LaserEmitter_C_Slerp::CallFunc_DegCos_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_Slerp, CallFunc_DegAcos_ReturnValue) == 0x000068, "Member 'LaserEmitter_C_Slerp::CallFunc_DegAcos_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_Slerp, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x00006C, "Member 'LaserEmitter_C_Slerp::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_Slerp, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000078, "Member 'LaserEmitter_C_Slerp::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(LaserEmitter_C_Slerp, CallFunc_Add_VectorVector_ReturnValue) == 0x00007C, "Member 'LaserEmitter_C_Slerp::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

}

