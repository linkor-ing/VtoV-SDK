#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Prop_fridge

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Prop_classes.hpp"
#include "Enum_interactionActions_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass prop_fridge.prop_fridge_C
// 0x00A8 (0x0420 - 0x0378)
class AProp_fridge_C final : public AProp_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_Prop_fridge_C;                      // 0x0378(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UChildActorComponent*                   Cord;                                              // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Freezer;                                           // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Fridge;                                            // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        FridgeLoop1;                                       // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Fridge_open;                                       // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Fridge_close;                                      // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            Nocoll;                                            // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            DoorBAx;                                           // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Door_b;                                            // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            DoorTAx;                                           // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Door_t;                                            // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          OpenedTop;                                         // 0x03E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          OpenedBottom;                                      // 0x03E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Active;                                            // 0x03E2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E3[0x1];                                      // 0x03E3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Time;                                              // 0x03E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanCloseTop;                                       // 0x03E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CanCloseBottom;                                    // 0x03E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3EA[0x6];                                      // 0x03EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         FrdigeObjects;                                     // 0x03F0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class AActor*>                         FreezerObjects;                                    // 0x0400(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	bool                                          Powered;                                           // 0x0410(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_411[0x7];                                      // 0x0411(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACord_C*                                ObjCord;                                           // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_prop_fridge(int32 EntryPoint);
	void CordUnplugged(class ACord_C* Param_Cord, class ACordSocket_C* Socket);
	void CordPlugged(class ACord_C* Param_Cord, class ACordSocket_C* Socket);
	void BndEvt__prop_fridge_freezer_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__prop_fridge_freezer_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__prop_fridge_fridge_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__prop_fridge_fridge_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void SetCanOpenBottom();
	void SetCanOpenTop();
	void ReceiveTick(float DeltaSeconds);
	void SetActiveTrigger(class AActor* SentFrom, bool Param_Active);
	void Set_ignoreSave_trigger(bool NewParam);
	void RunTrigger(class AActor* Param_Owner, int32 Param_Index);
	void CloseDoorTop();
	void OpenDoorTop();
	void CloseDoorBottom();
	void OpenDoorBottom();
	void Set_Light();
	void IgnoreSave_trigger(bool* Ignore);
	void LoadTriggerData(const struct FStruct_triggerSave& Data, bool* Return);
	void GetTriggerData(struct FStruct_triggerSave* Data);
	void GatherDataFromKeyT(bool* Gather);
	void ReceiveBeginPlay();
	void LoadData(const struct FStruct_save& Data, bool* Return);
	void GetData(struct FStruct_save* Data);
	void IgnoreSave(bool* Param_IgnoreSave);
	void GatherDataFromKey(bool* Gather);
	void GetActionOptions(class AMainPlayer_C* Player, class UPrimitiveComponent* Component, class AActor* Actor, TArray<class FString>* Options, TArray<Enum_interactionActions>* Options_enum, TArray<class FText>* OptionsNamesOverlay, uint8* Number);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"prop_fridge_C">();
	}
	static class AProp_fridge_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AProp_fridge_C>();
	}
};
static_assert(alignof(AProp_fridge_C) == 0x000008, "Wrong alignment on AProp_fridge_C");
static_assert(sizeof(AProp_fridge_C) == 0x000420, "Wrong size on AProp_fridge_C");
static_assert(offsetof(AProp_fridge_C, UberGraphFrame_Prop_fridge_C) == 0x000378, "Member 'AProp_fridge_C::UberGraphFrame_Prop_fridge_C' has a wrong offset!");
static_assert(offsetof(AProp_fridge_C, Cord) == 0x000380, "Member 'AProp_fridge_C::Cord' has a wrong offset!");
static_assert(offsetof(AProp_fridge_C, Freezer) == 0x000388, "Member 'AProp_fridge_C::Freezer' has a wrong offset!");
static_assert(offsetof(AProp_fridge_C, Fridge) == 0x000390, "Member 'AProp_fridge_C::Fridge' has a wrong offset!");
static_assert(offsetof(AProp_fridge_C, FridgeLoop1) == 0x000398, "Member 'AProp_fridge_C::FridgeLoop1' has a wrong offset!");
static_assert(offsetof(AProp_fridge_C, Fridge_open) == 0x0003A0, "Member 'AProp_fridge_C::Fridge_open' has a wrong offset!");
static_assert(offsetof(AProp_fridge_C, Fridge_close) == 0x0003A8, "Member 'AProp_fridge_C::Fridge_close' has a wrong offset!");
static_assert(offsetof(AProp_fridge_C, Nocoll) == 0x0003B0, "Member 'AProp_fridge_C::Nocoll' has a wrong offset!");
static_assert(offsetof(AProp_fridge_C, DoorBAx) == 0x0003B8, "Member 'AProp_fridge_C::DoorBAx' has a wrong offset!");
static_assert(offsetof(AProp_fridge_C, Door_b) == 0x0003C0, "Member 'AProp_fridge_C::Door_b' has a wrong offset!");
static_assert(offsetof(AProp_fridge_C, DoorTAx) == 0x0003C8, "Member 'AProp_fridge_C::DoorTAx' has a wrong offset!");
static_assert(offsetof(AProp_fridge_C, Door_t) == 0x0003D0, "Member 'AProp_fridge_C::Door_t' has a wrong offset!");
static_assert(offsetof(AProp_fridge_C, PointLight) == 0x0003D8, "Member 'AProp_fridge_C::PointLight' has a wrong offset!");
static_assert(offsetof(AProp_fridge_C, OpenedTop) == 0x0003E0, "Member 'AProp_fridge_C::OpenedTop' has a wrong offset!");
static_assert(offsetof(AProp_fridge_C, OpenedBottom) == 0x0003E1, "Member 'AProp_fridge_C::OpenedBottom' has a wrong offset!");
static_assert(offsetof(AProp_fridge_C, Active) == 0x0003E2, "Member 'AProp_fridge_C::Active' has a wrong offset!");
static_assert(offsetof(AProp_fridge_C, Time) == 0x0003E4, "Member 'AProp_fridge_C::Time' has a wrong offset!");
static_assert(offsetof(AProp_fridge_C, CanCloseTop) == 0x0003E8, "Member 'AProp_fridge_C::CanCloseTop' has a wrong offset!");
static_assert(offsetof(AProp_fridge_C, CanCloseBottom) == 0x0003E9, "Member 'AProp_fridge_C::CanCloseBottom' has a wrong offset!");
static_assert(offsetof(AProp_fridge_C, FrdigeObjects) == 0x0003F0, "Member 'AProp_fridge_C::FrdigeObjects' has a wrong offset!");
static_assert(offsetof(AProp_fridge_C, FreezerObjects) == 0x000400, "Member 'AProp_fridge_C::FreezerObjects' has a wrong offset!");
static_assert(offsetof(AProp_fridge_C, Powered) == 0x000410, "Member 'AProp_fridge_C::Powered' has a wrong offset!");
static_assert(offsetof(AProp_fridge_C, ObjCord) == 0x000418, "Member 'AProp_fridge_C::ObjCord' has a wrong offset!");

}

