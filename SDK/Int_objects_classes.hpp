#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Int_objects

#include "Basic.hpp"

#include "Enum_interactionActions_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass int_objects.int_objects_C
// 0x0000 (0x0028 - 0x0028)
class IInt_objects_C final : public IInterface
{
public:
	void ImpactDamage(float Damage, const struct FHitResult& Hit, class AActor* Actor, const struct FVector& Impact);
	void ToolboxFix(class AProp_toolbox_C* Toolbox, bool* Return);
	void GetKey(class FString* Key);
	void EnterWater(class AWaterVolume_C* Water);
	void LeaveWater(class AWaterVolume_C* Water);
	void EnterWaterOrigin(class AWaterVolume_C* Water);
	void LeaveWaterOrigin(class AWaterVolume_C* Water);
	void Eaten();
	void Virus(bool Activate);
	void SetPropProps(bool Static, bool Frozen, bool Active);
	void AddDamage(class AActor* Actor, float Damage, const struct FHitResult& Hit, const struct FVector& Impact, bool SkipSetting);
	void CanBeUsedHold(bool* Return);
	void SetKey(const class FString& Key);
	void ProcessKeys(bool* Return);
	void GetOnlyKey(class FString* Key);
	void PhysDestroyed();
	void PhysPreDestroyed();
	void DigUp();
	void Unhook();
	void SetPath(const TArray<struct FVector>& Path, bool* Return);
	void SteppedOn(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void FireDamage(float Damage);
	void Ignite(float Fuel);
	void Microwave();
	void ReceivedPhyiscsDamage();
	void GetActionOptions(class AMainPlayer_C* Player, class UPrimitiveComponent* Component, class AActor* Actor, TArray<class FString>* Options, TArray<Enum_interactionActions>* Options_enum, TArray<class FText>* OptionsNamesOverlay);
	void ActionOptionIndex(class AMainPlayer_C* Player, const struct FHitResult& Hit, int32 Param_Index, Enum_interactionActions Action);
	void PlayerHandUse_RMB(class AMainPlayer_C* Player);
	void PlayerHandUse_LMB(class AMainPlayer_C* Player);
	void Exploded(float Damage, const struct FVector& Location);
	void ExtinguishFire();
	void PlayerHandRelease_RMB(class AMainPlayer_C* Player);
	void PlayerHandRelease_LMB(class AMainPlayer_C* Player);
	void PlayerHandMouseWheel(class AMainPlayer_C* Player, float WheelDelta);
	void PlayerHandMouse(class AMainPlayer_C* Player, const struct FVector2D& Mouse);
	void PlayerHandAnyKey(class AMainPlayer_C* Player, const struct FKey& Key, bool Pressed);
	void MicrowaveElec();
	void AddTemperature(float Temperature);
	void AccumulateTemperature(float Temperature, float Speed);
	void ActionName(class AMainPlayer_C* Player, const struct FHitResult& Hit, const class FString& Param_Name);
	void Stepped(float Volume);
	void PlayerLookAway(class AMainPlayer_C* Player);
	void ReachedByExplosion(const struct FVector& Location, float Damage);
	void bitten();
	void Slice(bool Clean);
	void GascanFuel(class AProp_gascan_C* Gascan, bool* Fueled);
	void PlayerUsedOn(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void AttemptIgnite();
	void Hooked(class AHook_C* Hook);
	void SkipRadial(bool* Skip);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"int_objects_C">();
	}
	static class IInt_objects_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<IInt_objects_C>();
	}
};
static_assert(alignof(IInt_objects_C) == 0x000008, "Wrong alignment on IInt_objects_C");
static_assert(sizeof(IInt_objects_C) == 0x000028, "Wrong size on IInt_objects_C");

}

