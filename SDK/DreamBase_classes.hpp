#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DreamBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Struct_save_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass dreamBase.dreamBase_C
// 0x0050 (0x0270 - 0x0220)
class ADreamBase_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBillboardComponent*                    PlayerSpawn;                                       // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  PostProcess;                                       // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkyLightComponent*                     SkyLight;                                          // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Dream;                                             // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Sky;                                               // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Billboard;                                         // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Duration;                                          // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25C[0x4];                                      // 0x025C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStruct_save>                   Inventory;                                         // 0x0260(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_dreamBase(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveDestroyed();
	void ReceiveBeginPlay();
	void TexturePickerApply(class UUmg_texturePicker_C* Picker, class UTexture2D* Texture, int32 Param_Index);
	void ApplyColor(const struct FLinearColor& Color);
	void PropRenderer_finishProps();
	void GamemodeMakeKeys();
	void AnyKey(const struct FKey& Key, bool Pressed);
	void GamemodePreLoad();
	void Unfocused();
	void SettingsApplied(const struct FStruct_settings& Settings);
	void Unfoc();
	void StuffUpgraded(class AMainGamemode_C* GameMode);
	void GamemodeBeginPlay();
	void SignalSaved();
	void SignalDeleted();
	void Awoken();
	void NaturalWakeup();
	void DreamInv(TArray<struct FStruct_save>& Invv, class ADreamBase_C** Base);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"dreamBase_C">();
	}
	static class ADreamBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADreamBase_C>();
	}
};
static_assert(alignof(ADreamBase_C) == 0x000008, "Wrong alignment on ADreamBase_C");
static_assert(sizeof(ADreamBase_C) == 0x000270, "Wrong size on ADreamBase_C");
static_assert(offsetof(ADreamBase_C, UberGraphFrame) == 0x000220, "Member 'ADreamBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ADreamBase_C, PlayerSpawn) == 0x000228, "Member 'ADreamBase_C::PlayerSpawn' has a wrong offset!");
static_assert(offsetof(ADreamBase_C, PostProcess) == 0x000230, "Member 'ADreamBase_C::PostProcess' has a wrong offset!");
static_assert(offsetof(ADreamBase_C, SkyLight) == 0x000238, "Member 'ADreamBase_C::SkyLight' has a wrong offset!");
static_assert(offsetof(ADreamBase_C, Dream) == 0x000240, "Member 'ADreamBase_C::Dream' has a wrong offset!");
static_assert(offsetof(ADreamBase_C, Sky) == 0x000248, "Member 'ADreamBase_C::Sky' has a wrong offset!");
static_assert(offsetof(ADreamBase_C, Billboard) == 0x000250, "Member 'ADreamBase_C::Billboard' has a wrong offset!");
static_assert(offsetof(ADreamBase_C, Duration) == 0x000258, "Member 'ADreamBase_C::Duration' has a wrong offset!");
static_assert(offsetof(ADreamBase_C, Inventory) == 0x000260, "Member 'ADreamBase_C::Inventory' has a wrong offset!");

}

