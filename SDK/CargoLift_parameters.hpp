#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CargoLift

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Enum_interactionActions_structs.hpp"


namespace SDK::Params
{

// Function cargoLift.cargoLift_C.landedOn
// 0x0010 (0x0010 - 0x0000)
struct CargoLift_C_LandedOn final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreFallDamage;                                  // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CargoLift_C_LandedOn) == 0x000008, "Wrong alignment on CargoLift_C_LandedOn");
static_assert(sizeof(CargoLift_C_LandedOn) == 0x000010, "Wrong size on CargoLift_C_LandedOn");
static_assert(offsetof(CargoLift_C_LandedOn, Player) == 0x000000, "Member 'CargoLift_C_LandedOn::Player' has a wrong offset!");
static_assert(offsetof(CargoLift_C_LandedOn, IgnoreFallDamage) == 0x000008, "Member 'CargoLift_C_LandedOn::IgnoreFallDamage' has a wrong offset!");

// Function cargoLift.cargoLift_C.isButtonUsed
// 0x0001 (0x0001 - 0x0000)
struct CargoLift_C_IsButtonUsed final
{
public:
	bool                                          Failed;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CargoLift_C_IsButtonUsed) == 0x000001, "Wrong alignment on CargoLift_C_IsButtonUsed");
static_assert(sizeof(CargoLift_C_IsButtonUsed) == 0x000001, "Wrong size on CargoLift_C_IsButtonUsed");
static_assert(offsetof(CargoLift_C_IsButtonUsed, Failed) == 0x000000, "Member 'CargoLift_C_IsButtonUsed::Failed' has a wrong offset!");

// Function cargoLift.cargoLift_C.lookAt
// 0x0168 (0x0168 - 0x0000)
struct CargoLift_C_LookAt final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          Return;                                            // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Text;                                              // 0x0098(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    boundObjectReplace;                                // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Number;                                            // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00B3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x00E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0100(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x011C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0128(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0135(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_136[0x2];                                      // 0x0136(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_SelectString_ReturnValue;                 // 0x0138(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_Select_Default;                             // 0x0148(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_2;    // 0x0151(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0152(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_153[0x5];                                      // 0x0153(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_Select_Default_1;                           // 0x0158(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CargoLift_C_LookAt) == 0x000008, "Wrong alignment on CargoLift_C_LookAt");
static_assert(sizeof(CargoLift_C_LookAt) == 0x000168, "Wrong size on CargoLift_C_LookAt");
static_assert(offsetof(CargoLift_C_LookAt, Player) == 0x000000, "Member 'CargoLift_C_LookAt::Player' has a wrong offset!");
static_assert(offsetof(CargoLift_C_LookAt, Hit) == 0x000008, "Member 'CargoLift_C_LookAt::Hit' has a wrong offset!");
static_assert(offsetof(CargoLift_C_LookAt, Return) == 0x000090, "Member 'CargoLift_C_LookAt::Return' has a wrong offset!");
static_assert(offsetof(CargoLift_C_LookAt, Text) == 0x000098, "Member 'CargoLift_C_LookAt::Text' has a wrong offset!");
static_assert(offsetof(CargoLift_C_LookAt, boundObjectReplace) == 0x0000A8, "Member 'CargoLift_C_LookAt::boundObjectReplace' has a wrong offset!");
static_assert(offsetof(CargoLift_C_LookAt, Number) == 0x0000B0, "Member 'CargoLift_C_LookAt::Number' has a wrong offset!");
static_assert(offsetof(CargoLift_C_LookAt, Temp_bool_Variable) == 0x0000B1, "Member 'CargoLift_C_LookAt::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(CargoLift_C_LookAt, CallFunc_BreakHitResult_bBlockingHit) == 0x0000B2, "Member 'CargoLift_C_LookAt::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(CargoLift_C_LookAt, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000B3, "Member 'CargoLift_C_LookAt::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(CargoLift_C_LookAt, CallFunc_BreakHitResult_Time) == 0x0000B4, "Member 'CargoLift_C_LookAt::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(CargoLift_C_LookAt, CallFunc_BreakHitResult_Distance) == 0x0000B8, "Member 'CargoLift_C_LookAt::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(CargoLift_C_LookAt, CallFunc_BreakHitResult_Location) == 0x0000BC, "Member 'CargoLift_C_LookAt::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(CargoLift_C_LookAt, CallFunc_BreakHitResult_ImpactPoint) == 0x0000C8, "Member 'CargoLift_C_LookAt::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(CargoLift_C_LookAt, CallFunc_BreakHitResult_Normal) == 0x0000D4, "Member 'CargoLift_C_LookAt::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(CargoLift_C_LookAt, CallFunc_BreakHitResult_ImpactNormal) == 0x0000E0, "Member 'CargoLift_C_LookAt::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(CargoLift_C_LookAt, CallFunc_BreakHitResult_PhysMat) == 0x0000F0, "Member 'CargoLift_C_LookAt::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(CargoLift_C_LookAt, CallFunc_BreakHitResult_HitActor) == 0x0000F8, "Member 'CargoLift_C_LookAt::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(CargoLift_C_LookAt, CallFunc_BreakHitResult_HitComponent) == 0x000100, "Member 'CargoLift_C_LookAt::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(CargoLift_C_LookAt, CallFunc_BreakHitResult_HitBoneName) == 0x000108, "Member 'CargoLift_C_LookAt::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(CargoLift_C_LookAt, CallFunc_BreakHitResult_HitItem) == 0x000110, "Member 'CargoLift_C_LookAt::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(CargoLift_C_LookAt, CallFunc_BreakHitResult_ElementIndex) == 0x000114, "Member 'CargoLift_C_LookAt::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(CargoLift_C_LookAt, CallFunc_BreakHitResult_FaceIndex) == 0x000118, "Member 'CargoLift_C_LookAt::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(CargoLift_C_LookAt, CallFunc_BreakHitResult_TraceStart) == 0x00011C, "Member 'CargoLift_C_LookAt::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(CargoLift_C_LookAt, CallFunc_BreakHitResult_TraceEnd) == 0x000128, "Member 'CargoLift_C_LookAt::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(CargoLift_C_LookAt, Temp_bool_Variable_1) == 0x000134, "Member 'CargoLift_C_LookAt::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(CargoLift_C_LookAt, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000135, "Member 'CargoLift_C_LookAt::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(CargoLift_C_LookAt, CallFunc_SelectString_ReturnValue) == 0x000138, "Member 'CargoLift_C_LookAt::CallFunc_SelectString_ReturnValue' has a wrong offset!");
static_assert(offsetof(CargoLift_C_LookAt, K2Node_Select_Default) == 0x000148, "Member 'CargoLift_C_LookAt::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(CargoLift_C_LookAt, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x000150, "Member 'CargoLift_C_LookAt::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CargoLift_C_LookAt, CallFunc_EqualEqual_ObjectObject_ReturnValue_2) == 0x000151, "Member 'CargoLift_C_LookAt::CallFunc_EqualEqual_ObjectObject_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CargoLift_C_LookAt, CallFunc_BooleanOR_ReturnValue) == 0x000152, "Member 'CargoLift_C_LookAt::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(CargoLift_C_LookAt, K2Node_Select_Default_1) == 0x000158, "Member 'CargoLift_C_LookAt::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(CargoLift_C_LookAt, CallFunc_BooleanOR_ReturnValue_1) == 0x000160, "Member 'CargoLift_C_LookAt::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");

// Function cargoLift.cargoLift_C.noRespawn
// 0x0002 (0x0002 - 0x0000)
struct CargoLift_C_NoRespawn final
{
public:
	bool                                          Param_NoRespawn;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CargoLift_C_NoRespawn) == 0x000001, "Wrong alignment on CargoLift_C_NoRespawn");
static_assert(sizeof(CargoLift_C_NoRespawn) == 0x000002, "Wrong size on CargoLift_C_NoRespawn");
static_assert(offsetof(CargoLift_C_NoRespawn, Param_NoRespawn) == 0x000000, "Member 'CargoLift_C_NoRespawn::Param_NoRespawn' has a wrong offset!");
static_assert(offsetof(CargoLift_C_NoRespawn, Return) == 0x000001, "Member 'CargoLift_C_NoRespawn::Return' has a wrong offset!");

// Function cargoLift.cargoLift_C.canPickup
// 0x0001 (0x0001 - 0x0000)
struct CargoLift_C_CanPickup final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CargoLift_C_CanPickup) == 0x000001, "Wrong alignment on CargoLift_C_CanPickup");
static_assert(sizeof(CargoLift_C_CanPickup) == 0x000001, "Wrong size on CargoLift_C_CanPickup");
static_assert(offsetof(CargoLift_C_CanPickup, Return) == 0x000000, "Member 'CargoLift_C_CanPickup::Return' has a wrong offset!");

// Function cargoLift.cargoLift_C.asProp
// 0x0008 (0x0008 - 0x0000)
struct CargoLift_C_AsProp final
{
public:
	class AProp_C*                                Return;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CargoLift_C_AsProp) == 0x000008, "Wrong alignment on CargoLift_C_AsProp");
static_assert(sizeof(CargoLift_C_AsProp) == 0x000008, "Wrong size on CargoLift_C_AsProp");
static_assert(offsetof(CargoLift_C_AsProp, Return) == 0x000000, "Member 'CargoLift_C_AsProp::Return' has a wrong offset!");

// Function cargoLift.cargoLift_C.canBePutInContainer
// 0x0001 (0x0001 - 0x0000)
struct CargoLift_C_CanBePutInContainer final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CargoLift_C_CanBePutInContainer) == 0x000001, "Wrong alignment on CargoLift_C_CanBePutInContainer");
static_assert(sizeof(CargoLift_C_CanBePutInContainer) == 0x000001, "Wrong size on CargoLift_C_CanBePutInContainer");
static_assert(offsetof(CargoLift_C_CanBePutInContainer, Return) == 0x000000, "Member 'CargoLift_C_CanBePutInContainer::Return' has a wrong offset!");

// Function cargoLift.cargoLift_C.skipPreDelete
// 0x0001 (0x0001 - 0x0000)
struct CargoLift_C_SkipPreDelete final
{
public:
	bool                                          Skip;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CargoLift_C_SkipPreDelete) == 0x000001, "Wrong alignment on CargoLift_C_SkipPreDelete");
static_assert(sizeof(CargoLift_C_SkipPreDelete) == 0x000001, "Wrong size on CargoLift_C_SkipPreDelete");
static_assert(offsetof(CargoLift_C_SkipPreDelete, Skip) == 0x000000, "Member 'CargoLift_C_SkipPreDelete::Skip' has a wrong offset!");

// Function cargoLift.cargoLift_C.ignoreSave
// 0x0001 (0x0001 - 0x0000)
struct CargoLift_C_IgnoreSave final
{
public:
	bool                                          Param_IgnoreSave;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CargoLift_C_IgnoreSave) == 0x000001, "Wrong alignment on CargoLift_C_IgnoreSave");
static_assert(sizeof(CargoLift_C_IgnoreSave) == 0x000001, "Wrong size on CargoLift_C_IgnoreSave");
static_assert(offsetof(CargoLift_C_IgnoreSave, Param_IgnoreSave) == 0x000000, "Member 'CargoLift_C_IgnoreSave::Param_IgnoreSave' has a wrong offset!");

// Function cargoLift.cargoLift_C.getActionOptions
// 0x0090 (0x0090 - 0x0000)
struct CargoLift_C_GetActionOptions final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Component;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         Options;                                           // 0x0018(0x0010)(Parm, OutParm)
	TArray<Enum_interactionActions>               Options_enum;                                      // 0x0028(0x0010)(Parm, OutParm)
	TArray<class FText>                           OptionsNamesOverlay;                               // 0x0038(0x0010)(Parm, OutParm)
	uint8                                         Number;                                            // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<Enum_interactionActions>               Temp_byte_Variable;                                // 0x0050(0x0010)(ReferenceParm)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<Enum_interactionActions>               K2Node_MakeArray_Array;                            // 0x0068(0x0010)(ReferenceParm)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_2;    // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B[0x5];                                       // 0x007B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<Enum_interactionActions>               K2Node_Select_Default;                             // 0x0080(0x0010)(ReferenceParm)
};
static_assert(alignof(CargoLift_C_GetActionOptions) == 0x000008, "Wrong alignment on CargoLift_C_GetActionOptions");
static_assert(sizeof(CargoLift_C_GetActionOptions) == 0x000090, "Wrong size on CargoLift_C_GetActionOptions");
static_assert(offsetof(CargoLift_C_GetActionOptions, Player) == 0x000000, "Member 'CargoLift_C_GetActionOptions::Player' has a wrong offset!");
static_assert(offsetof(CargoLift_C_GetActionOptions, Component) == 0x000008, "Member 'CargoLift_C_GetActionOptions::Component' has a wrong offset!");
static_assert(offsetof(CargoLift_C_GetActionOptions, Actor) == 0x000010, "Member 'CargoLift_C_GetActionOptions::Actor' has a wrong offset!");
static_assert(offsetof(CargoLift_C_GetActionOptions, Options) == 0x000018, "Member 'CargoLift_C_GetActionOptions::Options' has a wrong offset!");
static_assert(offsetof(CargoLift_C_GetActionOptions, Options_enum) == 0x000028, "Member 'CargoLift_C_GetActionOptions::Options_enum' has a wrong offset!");
static_assert(offsetof(CargoLift_C_GetActionOptions, OptionsNamesOverlay) == 0x000038, "Member 'CargoLift_C_GetActionOptions::OptionsNamesOverlay' has a wrong offset!");
static_assert(offsetof(CargoLift_C_GetActionOptions, Number) == 0x000048, "Member 'CargoLift_C_GetActionOptions::Number' has a wrong offset!");
static_assert(offsetof(CargoLift_C_GetActionOptions, Temp_bool_Variable) == 0x000049, "Member 'CargoLift_C_GetActionOptions::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(CargoLift_C_GetActionOptions, Temp_byte_Variable) == 0x000050, "Member 'CargoLift_C_GetActionOptions::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(CargoLift_C_GetActionOptions, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000060, "Member 'CargoLift_C_GetActionOptions::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(CargoLift_C_GetActionOptions, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x000061, "Member 'CargoLift_C_GetActionOptions::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CargoLift_C_GetActionOptions, K2Node_MakeArray_Array) == 0x000068, "Member 'CargoLift_C_GetActionOptions::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(CargoLift_C_GetActionOptions, CallFunc_EqualEqual_ObjectObject_ReturnValue_2) == 0x000078, "Member 'CargoLift_C_GetActionOptions::CallFunc_EqualEqual_ObjectObject_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CargoLift_C_GetActionOptions, CallFunc_BooleanOR_ReturnValue) == 0x000079, "Member 'CargoLift_C_GetActionOptions::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(CargoLift_C_GetActionOptions, CallFunc_BooleanOR_ReturnValue_1) == 0x00007A, "Member 'CargoLift_C_GetActionOptions::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CargoLift_C_GetActionOptions, K2Node_Select_Default) == 0x000080, "Member 'CargoLift_C_GetActionOptions::K2Node_Select_Default' has a wrong offset!");

// Function cargoLift.cargoLift_C.actionOptionIndex
// 0x0098 (0x0098 - 0x0000)
struct CargoLift_C_ActionOptionIndex final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	Enum_interactionActions                       Action;                                            // 0x0090(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CargoLift_C_ActionOptionIndex) == 0x000008, "Wrong alignment on CargoLift_C_ActionOptionIndex");
static_assert(sizeof(CargoLift_C_ActionOptionIndex) == 0x000098, "Wrong size on CargoLift_C_ActionOptionIndex");
static_assert(offsetof(CargoLift_C_ActionOptionIndex, Player) == 0x000000, "Member 'CargoLift_C_ActionOptionIndex::Player' has a wrong offset!");
static_assert(offsetof(CargoLift_C_ActionOptionIndex, Hit) == 0x000008, "Member 'CargoLift_C_ActionOptionIndex::Hit' has a wrong offset!");
static_assert(offsetof(CargoLift_C_ActionOptionIndex, Action) == 0x000090, "Member 'CargoLift_C_ActionOptionIndex::Action' has a wrong offset!");

// Function cargoLift.cargoLift_C.playerR
// 0x0008 (0x0008 - 0x0000)
struct CargoLift_C_PlayerR final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CargoLift_C_PlayerR) == 0x000008, "Wrong alignment on CargoLift_C_PlayerR");
static_assert(sizeof(CargoLift_C_PlayerR) == 0x000008, "Wrong size on CargoLift_C_PlayerR");
static_assert(offsetof(CargoLift_C_PlayerR, Player) == 0x000000, "Member 'CargoLift_C_PlayerR::Player' has a wrong offset!");

// Function cargoLift.cargoLift_C.playerHold
// 0x0008 (0x0008 - 0x0000)
struct CargoLift_C_PlayerHold final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CargoLift_C_PlayerHold) == 0x000008, "Wrong alignment on CargoLift_C_PlayerHold");
static_assert(sizeof(CargoLift_C_PlayerHold) == 0x000008, "Wrong size on CargoLift_C_PlayerHold");
static_assert(offsetof(CargoLift_C_PlayerHold, Player) == 0x000000, "Member 'CargoLift_C_PlayerHold::Player' has a wrong offset!");

// Function cargoLift.cargoLift_C.playerUnequip
// 0x0008 (0x0008 - 0x0000)
struct CargoLift_C_PlayerUnequip final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CargoLift_C_PlayerUnequip) == 0x000008, "Wrong alignment on CargoLift_C_PlayerUnequip");
static_assert(sizeof(CargoLift_C_PlayerUnequip) == 0x000008, "Wrong size on CargoLift_C_PlayerUnequip");
static_assert(offsetof(CargoLift_C_PlayerUnequip, Player) == 0x000000, "Member 'CargoLift_C_PlayerUnequip::Player' has a wrong offset!");

// Function cargoLift.cargoLift_C.damageByPlayer
// 0x0098 (0x0098 - 0x0000)
struct CargoLift_C_DamageByPlayer final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         Damage;                                            // 0x0090(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CargoLift_C_DamageByPlayer) == 0x000008, "Wrong alignment on CargoLift_C_DamageByPlayer");
static_assert(sizeof(CargoLift_C_DamageByPlayer) == 0x000098, "Wrong size on CargoLift_C_DamageByPlayer");
static_assert(offsetof(CargoLift_C_DamageByPlayer, Player) == 0x000000, "Member 'CargoLift_C_DamageByPlayer::Player' has a wrong offset!");
static_assert(offsetof(CargoLift_C_DamageByPlayer, Hit) == 0x000008, "Member 'CargoLift_C_DamageByPlayer::Hit' has a wrong offset!");
static_assert(offsetof(CargoLift_C_DamageByPlayer, Damage) == 0x000090, "Member 'CargoLift_C_DamageByPlayer::Damage' has a wrong offset!");

// Function cargoLift.cargoLift_C.thrown
// 0x0008 (0x0008 - 0x0000)
struct CargoLift_C_Thrown final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CargoLift_C_Thrown) == 0x000008, "Wrong alignment on CargoLift_C_Thrown");
static_assert(sizeof(CargoLift_C_Thrown) == 0x000008, "Wrong size on CargoLift_C_Thrown");
static_assert(offsetof(CargoLift_C_Thrown, Player) == 0x000000, "Member 'CargoLift_C_Thrown::Player' has a wrong offset!");

// Function cargoLift.cargoLift_C.sendName
// 0x0008 (0x0008 - 0x0000)
struct CargoLift_C_SendName final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CargoLift_C_SendName) == 0x000004, "Wrong alignment on CargoLift_C_SendName");
static_assert(sizeof(CargoLift_C_SendName) == 0x000008, "Wrong size on CargoLift_C_SendName");
static_assert(offsetof(CargoLift_C_SendName, Param_Name) == 0x000000, "Member 'CargoLift_C_SendName::Param_Name' has a wrong offset!");

// Function cargoLift.cargoLift_C.kicked
// 0x0001 (0x0001 - 0x0000)
struct CargoLift_C_Kicked final
{
public:
	bool                                          Kick;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CargoLift_C_Kicked) == 0x000001, "Wrong alignment on CargoLift_C_Kicked");
static_assert(sizeof(CargoLift_C_Kicked) == 0x000001, "Wrong size on CargoLift_C_Kicked");
static_assert(offsetof(CargoLift_C_Kicked, Kick) == 0x000000, "Member 'CargoLift_C_Kicked::Kick' has a wrong offset!");

// Function cargoLift.cargoLift_C.player_use
// 0x0090 (0x0090 - 0x0000)
struct CargoLift_C_Player_use final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(CargoLift_C_Player_use) == 0x000008, "Wrong alignment on CargoLift_C_Player_use");
static_assert(sizeof(CargoLift_C_Player_use) == 0x000090, "Wrong size on CargoLift_C_Player_use");
static_assert(offsetof(CargoLift_C_Player_use, Player) == 0x000000, "Member 'CargoLift_C_Player_use::Player' has a wrong offset!");
static_assert(offsetof(CargoLift_C_Player_use, Hit) == 0x000008, "Member 'CargoLift_C_Player_use::Hit' has a wrong offset!");

// Function cargoLift.cargoLift_C.Hit
// 0x00B0 (0x00B0 - 0x0000)
struct CargoLift_C_Hit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Param_Hit;                                         // 0x0024(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(CargoLift_C_Hit) == 0x000008, "Wrong alignment on CargoLift_C_Hit");
static_assert(sizeof(CargoLift_C_Hit) == 0x0000B0, "Wrong size on CargoLift_C_Hit");
static_assert(offsetof(CargoLift_C_Hit, HitComponent) == 0x000000, "Member 'CargoLift_C_Hit::HitComponent' has a wrong offset!");
static_assert(offsetof(CargoLift_C_Hit, OtherActor) == 0x000008, "Member 'CargoLift_C_Hit::OtherActor' has a wrong offset!");
static_assert(offsetof(CargoLift_C_Hit, OtherComp) == 0x000010, "Member 'CargoLift_C_Hit::OtherComp' has a wrong offset!");
static_assert(offsetof(CargoLift_C_Hit, NormalImpulse) == 0x000018, "Member 'CargoLift_C_Hit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(CargoLift_C_Hit, Param_Hit) == 0x000024, "Member 'CargoLift_C_Hit::Param_Hit' has a wrong offset!");

// Function cargoLift.cargoLift_C.ExecuteUbergraph_cargoLift
// 0x03A8 (0x03A8 - 0x0000)
struct CargoLift_C_ExecuteUbergraph_cargoLift final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, struct FHitResult& Hit)> K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	float                                         CallFunc_Ease_ReturnValue;                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_6;                             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_2;                                // 0x0040(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	Enum_interactionActions                       K2Node_Event_action;                               // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CA[0x6];                                       // 0x00CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_5;                             // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_4;                             // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_3;                             // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_2;                             // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_1;                                // 0x00F0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         K2Node_Event_damage;                               // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17C[0x4];                                      // 0x017C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_1;                             // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Event_name;                                 // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_kick;                                 // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_191[0x3];                                      // 0x0191(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0194(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x021C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21D[0x3];                                      // 0x021D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player;                               // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit;                                  // 0x0228(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_VictoryFloatPlusEquals_FloatOut;          // 0x02B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x02B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x02B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x02BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BB[0x5];                                      // 0x02BB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_CustomEvent_HitComponent;                   // 0x02C0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_OtherActor;                     // 0x02C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_CustomEvent_OtherComp;                      // 0x02D0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_NormalImpulse;                  // 0x02D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_CustomEvent_Hit;                            // 0x02E4(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_36C[0x4];                                      // 0x036C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_K2_GetRootComponent_ReturnValue;          // 0x0370(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_DynamicCast_AsPrimitive_Component;          // 0x0378(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0380(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x0381(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_382[0x2];                                      // 0x0382(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0384(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x0390(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x039C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39D[0x3];                                      // 0x039D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Vector_Distance_ReturnValue;              // 0x03A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x03A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x03A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CargoLift_C_ExecuteUbergraph_cargoLift) == 0x000008, "Wrong alignment on CargoLift_C_ExecuteUbergraph_cargoLift");
static_assert(sizeof(CargoLift_C_ExecuteUbergraph_cargoLift) == 0x0003A8, "Wrong size on CargoLift_C_ExecuteUbergraph_cargoLift");
static_assert(offsetof(CargoLift_C_ExecuteUbergraph_cargoLift, EntryPoint) == 0x000000, "Member 'CargoLift_C_ExecuteUbergraph_cargoLift::EntryPoint' has a wrong offset!");
static_assert(offsetof(CargoLift_C_ExecuteUbergraph_cargoLift, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000004, "Member 'CargoLift_C_ExecuteUbergraph_cargoLift::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CargoLift_C_ExecuteUbergraph_cargoLift, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'CargoLift_C_ExecuteUbergraph_cargoLift::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(CargoLift_C_ExecuteUbergraph_cargoLift, CallFunc_Ease_ReturnValue) == 0x000018, "Member 'CargoLift_C_ExecuteUbergraph_cargoLift::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(CargoLift_C_ExecuteUbergraph_cargoLift, CallFunc_VLerp_ReturnValue) == 0x00001C, "Member 'CargoLift_C_ExecuteUbergraph_cargoLift::CallFunc_VLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(CargoLift_C_ExecuteUbergraph_cargoLift, CallFunc_SelectFloat_ReturnValue) == 0x000028, "Member 'CargoLift_C_ExecuteUbergraph_cargoLift::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CargoLift_C_ExecuteUbergraph_cargoLift, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00002C, "Member 'CargoLift_C_ExecuteUbergraph_cargoLift::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CargoLift_C_ExecuteUbergraph_cargoLift, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000030, "Member 'CargoLift_C_ExecuteUbergraph_cargoLift::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CargoLift_C_ExecuteUbergraph_cargoLift, K2Node_Event_player_6) == 0x000038, "Member 'CargoLift_C_ExecuteUbergraph_cargoLift::K2Node_Event_player_6' has a wrong offset!");
static_assert(offsetof(CargoLift_C_ExecuteUbergraph_cargoLift, K2Node_Event_hit_2) == 0x000040, "Member 'CargoLift_C_ExecuteUbergraph_cargoLift::K2Node_Event_hit_2' has a wrong offset!");
static_assert(offsetof(CargoLift_C_ExecuteUbergraph_cargoLift, K2Node_Event_action) == 0x0000C8, "Member 'CargoLift_C_ExecuteUbergraph_cargoLift::K2Node_Event_action' has a wrong offset!");
static_assert(offsetof(CargoLift_C_ExecuteUbergraph_cargoLift, K2Node_SwitchEnum_CmpSuccess) == 0x0000C9, "Member 'CargoLift_C_ExecuteUbergraph_cargoLift::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(CargoLift_C_ExecuteUbergraph_cargoLift, K2Node_Event_player_5) == 0x0000D0, "Member 'CargoLift_C_ExecuteUbergraph_cargoLift::K2Node_Event_player_5' has a wrong offset!");
static_assert(offsetof(CargoLift_C_ExecuteUbergraph_cargoLift, K2Node_Event_player_4) == 0x0000D8, "Member 'CargoLift_C_ExecuteUbergraph_cargoLift::K2Node_Event_player_4' has a wrong offset!");
static_assert(offsetof(CargoLift_C_ExecuteUbergraph_cargoLift, K2Node_Event_player_3) == 0x0000E0, "Member 'CargoLift_C_ExecuteUbergraph_cargoLift::K2Node_Event_player_3' has a wrong offset!");
static_assert(offsetof(CargoLift_C_ExecuteUbergraph_cargoLift, K2Node_Event_player_2) == 0x0000E8, "Member 'CargoLift_C_ExecuteUbergraph_cargoLift::K2Node_Event_player_2' has a wrong offset!");
static_assert(offsetof(CargoLift_C_ExecuteUbergraph_cargoLift, K2Node_Event_hit_1) == 0x0000F0, "Member 'CargoLift_C_ExecuteUbergraph_cargoLift::K2Node_Event_hit_1' has a wrong offset!");
static_assert(offsetof(CargoLift_C_ExecuteUbergraph_cargoLift, K2Node_Event_damage) == 0x000178, "Member 'CargoLift_C_ExecuteUbergraph_cargoLift::K2Node_Event_damage' has a wrong offset!");
static_assert(offsetof(CargoLift_C_ExecuteUbergraph_cargoLift, K2Node_Event_player_1) == 0x000180, "Member 'CargoLift_C_ExecuteUbergraph_cargoLift::K2Node_Event_player_1' has a wrong offset!");
static_assert(offsetof(CargoLift_C_ExecuteUbergraph_cargoLift, K2Node_Event_name) == 0x000188, "Member 'CargoLift_C_ExecuteUbergraph_cargoLift::K2Node_Event_name' has a wrong offset!");
static_assert(offsetof(CargoLift_C_ExecuteUbergraph_cargoLift, K2Node_Event_kick) == 0x000190, "Member 'CargoLift_C_ExecuteUbergraph_cargoLift::K2Node_Event_kick' has a wrong offset!");
static_assert(offsetof(CargoLift_C_ExecuteUbergraph_cargoLift, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000194, "Member 'CargoLift_C_ExecuteUbergraph_cargoLift::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(CargoLift_C_ExecuteUbergraph_cargoLift, CallFunc_Not_PreBool_ReturnValue) == 0x00021C, "Member 'CargoLift_C_ExecuteUbergraph_cargoLift::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(CargoLift_C_ExecuteUbergraph_cargoLift, K2Node_Event_player) == 0x000220, "Member 'CargoLift_C_ExecuteUbergraph_cargoLift::K2Node_Event_player' has a wrong offset!");
static_assert(offsetof(CargoLift_C_ExecuteUbergraph_cargoLift, K2Node_Event_hit) == 0x000228, "Member 'CargoLift_C_ExecuteUbergraph_cargoLift::K2Node_Event_hit' has a wrong offset!");
static_assert(offsetof(CargoLift_C_ExecuteUbergraph_cargoLift, CallFunc_VictoryFloatPlusEquals_FloatOut) == 0x0002B0, "Member 'CargoLift_C_ExecuteUbergraph_cargoLift::CallFunc_VictoryFloatPlusEquals_FloatOut' has a wrong offset!");
static_assert(offsetof(CargoLift_C_ExecuteUbergraph_cargoLift, CallFunc_FClamp_ReturnValue) == 0x0002B4, "Member 'CargoLift_C_ExecuteUbergraph_cargoLift::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(CargoLift_C_ExecuteUbergraph_cargoLift, CallFunc_Less_FloatFloat_ReturnValue) == 0x0002B8, "Member 'CargoLift_C_ExecuteUbergraph_cargoLift::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CargoLift_C_ExecuteUbergraph_cargoLift, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0002B9, "Member 'CargoLift_C_ExecuteUbergraph_cargoLift::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CargoLift_C_ExecuteUbergraph_cargoLift, CallFunc_BooleanOR_ReturnValue) == 0x0002BA, "Member 'CargoLift_C_ExecuteUbergraph_cargoLift::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(CargoLift_C_ExecuteUbergraph_cargoLift, K2Node_CustomEvent_HitComponent) == 0x0002C0, "Member 'CargoLift_C_ExecuteUbergraph_cargoLift::K2Node_CustomEvent_HitComponent' has a wrong offset!");
static_assert(offsetof(CargoLift_C_ExecuteUbergraph_cargoLift, K2Node_CustomEvent_OtherActor) == 0x0002C8, "Member 'CargoLift_C_ExecuteUbergraph_cargoLift::K2Node_CustomEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(CargoLift_C_ExecuteUbergraph_cargoLift, K2Node_CustomEvent_OtherComp) == 0x0002D0, "Member 'CargoLift_C_ExecuteUbergraph_cargoLift::K2Node_CustomEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(CargoLift_C_ExecuteUbergraph_cargoLift, K2Node_CustomEvent_NormalImpulse) == 0x0002D8, "Member 'CargoLift_C_ExecuteUbergraph_cargoLift::K2Node_CustomEvent_NormalImpulse' has a wrong offset!");
static_assert(offsetof(CargoLift_C_ExecuteUbergraph_cargoLift, K2Node_CustomEvent_Hit) == 0x0002E4, "Member 'CargoLift_C_ExecuteUbergraph_cargoLift::K2Node_CustomEvent_Hit' has a wrong offset!");
static_assert(offsetof(CargoLift_C_ExecuteUbergraph_cargoLift, CallFunc_K2_GetRootComponent_ReturnValue) == 0x000370, "Member 'CargoLift_C_ExecuteUbergraph_cargoLift::CallFunc_K2_GetRootComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(CargoLift_C_ExecuteUbergraph_cargoLift, K2Node_DynamicCast_AsPrimitive_Component) == 0x000378, "Member 'CargoLift_C_ExecuteUbergraph_cargoLift::K2Node_DynamicCast_AsPrimitive_Component' has a wrong offset!");
static_assert(offsetof(CargoLift_C_ExecuteUbergraph_cargoLift, K2Node_DynamicCast_bSuccess) == 0x000380, "Member 'CargoLift_C_ExecuteUbergraph_cargoLift::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CargoLift_C_ExecuteUbergraph_cargoLift, CallFunc_K2_AttachToComponent_ReturnValue) == 0x000381, "Member 'CargoLift_C_ExecuteUbergraph_cargoLift::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(CargoLift_C_ExecuteUbergraph_cargoLift, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000384, "Member 'CargoLift_C_ExecuteUbergraph_cargoLift::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CargoLift_C_ExecuteUbergraph_cargoLift, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x000390, "Member 'CargoLift_C_ExecuteUbergraph_cargoLift::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CargoLift_C_ExecuteUbergraph_cargoLift, CallFunc_Not_PreBool_ReturnValue_1) == 0x00039C, "Member 'CargoLift_C_ExecuteUbergraph_cargoLift::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CargoLift_C_ExecuteUbergraph_cargoLift, CallFunc_Vector_Distance_ReturnValue) == 0x0003A0, "Member 'CargoLift_C_ExecuteUbergraph_cargoLift::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(CargoLift_C_ExecuteUbergraph_cargoLift, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x0003A4, "Member 'CargoLift_C_ExecuteUbergraph_cargoLift::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CargoLift_C_ExecuteUbergraph_cargoLift, CallFunc_BooleanOR_ReturnValue_1) == 0x0003A5, "Member 'CargoLift_C_ExecuteUbergraph_cargoLift::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");

}

