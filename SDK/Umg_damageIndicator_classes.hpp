#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Umg_damageIndicator

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass umg_damageIndicator.umg_damageIndicator_C
// 0x0080 (0x02E0 - 0x0260)
class UUmg_damageIndicator_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 Dmg_down;                                          // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Dmg_full;                                          // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Dmg_heal;                                          // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Dmg_left;                                          // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Dmg_right;                                         // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Dmg_tunnel;                                        // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Dmg_up;                                            // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	float                                         Damage_right;                                      // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage_left;                                       // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage_up;                                         // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage_down;                                       // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Dynmat_right;                                      // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Dynmat_left;                                       // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Dynmat_up;                                         // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Dynmat_down;                                       // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Dynmat_tunnel;                                     // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage_heal;                                       // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HealOpacity;                                       // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_umg_damageIndicator(int32 EntryPoint);
	void Construct();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"umg_damageIndicator_C">();
	}
	static class UUmg_damageIndicator_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUmg_damageIndicator_C>();
	}
};
static_assert(alignof(UUmg_damageIndicator_C) == 0x000008, "Wrong alignment on UUmg_damageIndicator_C");
static_assert(sizeof(UUmg_damageIndicator_C) == 0x0002E0, "Wrong size on UUmg_damageIndicator_C");
static_assert(offsetof(UUmg_damageIndicator_C, UberGraphFrame) == 0x000260, "Member 'UUmg_damageIndicator_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUmg_damageIndicator_C, Dmg_down) == 0x000268, "Member 'UUmg_damageIndicator_C::Dmg_down' has a wrong offset!");
static_assert(offsetof(UUmg_damageIndicator_C, Dmg_full) == 0x000270, "Member 'UUmg_damageIndicator_C::Dmg_full' has a wrong offset!");
static_assert(offsetof(UUmg_damageIndicator_C, Dmg_heal) == 0x000278, "Member 'UUmg_damageIndicator_C::Dmg_heal' has a wrong offset!");
static_assert(offsetof(UUmg_damageIndicator_C, Dmg_left) == 0x000280, "Member 'UUmg_damageIndicator_C::Dmg_left' has a wrong offset!");
static_assert(offsetof(UUmg_damageIndicator_C, Dmg_right) == 0x000288, "Member 'UUmg_damageIndicator_C::Dmg_right' has a wrong offset!");
static_assert(offsetof(UUmg_damageIndicator_C, Dmg_tunnel) == 0x000290, "Member 'UUmg_damageIndicator_C::Dmg_tunnel' has a wrong offset!");
static_assert(offsetof(UUmg_damageIndicator_C, Dmg_up) == 0x000298, "Member 'UUmg_damageIndicator_C::Dmg_up' has a wrong offset!");
static_assert(offsetof(UUmg_damageIndicator_C, Damage_right) == 0x0002A0, "Member 'UUmg_damageIndicator_C::Damage_right' has a wrong offset!");
static_assert(offsetof(UUmg_damageIndicator_C, Damage_left) == 0x0002A4, "Member 'UUmg_damageIndicator_C::Damage_left' has a wrong offset!");
static_assert(offsetof(UUmg_damageIndicator_C, Damage_up) == 0x0002A8, "Member 'UUmg_damageIndicator_C::Damage_up' has a wrong offset!");
static_assert(offsetof(UUmg_damageIndicator_C, Damage_down) == 0x0002AC, "Member 'UUmg_damageIndicator_C::Damage_down' has a wrong offset!");
static_assert(offsetof(UUmg_damageIndicator_C, Dynmat_right) == 0x0002B0, "Member 'UUmg_damageIndicator_C::Dynmat_right' has a wrong offset!");
static_assert(offsetof(UUmg_damageIndicator_C, Dynmat_left) == 0x0002B8, "Member 'UUmg_damageIndicator_C::Dynmat_left' has a wrong offset!");
static_assert(offsetof(UUmg_damageIndicator_C, Dynmat_up) == 0x0002C0, "Member 'UUmg_damageIndicator_C::Dynmat_up' has a wrong offset!");
static_assert(offsetof(UUmg_damageIndicator_C, Dynmat_down) == 0x0002C8, "Member 'UUmg_damageIndicator_C::Dynmat_down' has a wrong offset!");
static_assert(offsetof(UUmg_damageIndicator_C, Dynmat_tunnel) == 0x0002D0, "Member 'UUmg_damageIndicator_C::Dynmat_tunnel' has a wrong offset!");
static_assert(offsetof(UUmg_damageIndicator_C, Damage_heal) == 0x0002D8, "Member 'UUmg_damageIndicator_C::Damage_heal' has a wrong offset!");
static_assert(offsetof(UUmg_damageIndicator_C, HealOpacity) == 0x0002DC, "Member 'UUmg_damageIndicator_C::HealOpacity' has a wrong offset!");

}

