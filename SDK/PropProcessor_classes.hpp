#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PropProcessor

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass propProcessor.propProcessor_C
// 0x0170 (0x0390 - 0x0220)
class APropProcessor_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Vol;                                               // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneCaptureComponent2D*               SceneCaptureComponent2D;                           // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    CamRot;                                            // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           PropsNames;                                        // 0x0258(0x0010)(Edit, BlueprintVisible)
	TArray<class UTextureRenderTarget2D*>         RTs;                                               // 0x0268(0x0010)(Edit, BlueprintVisible)
	TArray<class FString>                         Names;                                             // 0x0278(0x0010)(Edit, BlueprintVisible)
	TArray<class UTexture2D*>                     ToTex;                                             // 0x0288(0x0010)(Edit, BlueprintVisible)
	class UUmg_spawnmenu_C*                       Spawnmenu;                                         // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URuntimeAudioImporterLibrary*           AudioImport;                                       // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         AudiosToImport;                                    // 0x02A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FString                                 CurrAudio;                                         // 0x02B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class FString>                         AudiosNames;                                       // 0x02C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AMainGamemode_C*                        GameMode;                                          // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NrtLoadId;                                         // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3365[0x4];                                     // 0x02E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                UrrSoft;                                           // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Fins;                                              // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3366[0x4];                                     // 0x02F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ObjectsNames;                                      // 0x02F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         ObjNames;                                          // 0x0308(0x0010)(Edit, BlueprintVisible)
	TArray<class UTextureRenderTarget2D*>         ObjRTs;                                            // 0x0318(0x0010)(Edit, BlueprintVisible)
	TArray<class UTexture2D*>                     ObjToTex;                                          // 0x0328(0x0010)(Edit, BlueprintVisible)
	TArray<class UStaticMesh*>                    Objs;                                              // 0x0338(0x0010)(Edit, BlueprintVisible)
	bool                                          IgnoreVolumes;                                     // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3367[0x7];                                     // 0x0349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ObjectDispNames;                                   // 0x0350(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FText>                           ObjectDispNames_d;                                 // 0x0360(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             Finished;                                          // 0x0370(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<float>                                 Mass;                                              // 0x0380(0x0010)(Edit, BlueprintVisible)

public:
	void Finished__DelegateSignature();
	void ExecuteUbergraph_propProcessor(int32 EntryPoint);
	void Finish();
	void ImportAudio();
	void ReceiveBeginPlay();
	void NameToDisplayName(const class FString& Param_Name, class FText* DisplayName);
	void GenDispNames();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"propProcessor_C">();
	}
	static class APropProcessor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<APropProcessor_C>();
	}
};
static_assert(alignof(APropProcessor_C) == 0x000008, "Wrong alignment on APropProcessor_C");
static_assert(sizeof(APropProcessor_C) == 0x000390, "Wrong size on APropProcessor_C");
static_assert(offsetof(APropProcessor_C, UberGraphFrame) == 0x000220, "Member 'APropProcessor_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(APropProcessor_C, Vol) == 0x000228, "Member 'APropProcessor_C::Vol' has a wrong offset!");
static_assert(offsetof(APropProcessor_C, PointLight) == 0x000230, "Member 'APropProcessor_C::PointLight' has a wrong offset!");
static_assert(offsetof(APropProcessor_C, SceneCaptureComponent2D) == 0x000238, "Member 'APropProcessor_C::SceneCaptureComponent2D' has a wrong offset!");
static_assert(offsetof(APropProcessor_C, CamRot) == 0x000240, "Member 'APropProcessor_C::CamRot' has a wrong offset!");
static_assert(offsetof(APropProcessor_C, StaticMesh) == 0x000248, "Member 'APropProcessor_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(APropProcessor_C, DefaultSceneRoot) == 0x000250, "Member 'APropProcessor_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(APropProcessor_C, PropsNames) == 0x000258, "Member 'APropProcessor_C::PropsNames' has a wrong offset!");
static_assert(offsetof(APropProcessor_C, RTs) == 0x000268, "Member 'APropProcessor_C::RTs' has a wrong offset!");
static_assert(offsetof(APropProcessor_C, Names) == 0x000278, "Member 'APropProcessor_C::Names' has a wrong offset!");
static_assert(offsetof(APropProcessor_C, ToTex) == 0x000288, "Member 'APropProcessor_C::ToTex' has a wrong offset!");
static_assert(offsetof(APropProcessor_C, Spawnmenu) == 0x000298, "Member 'APropProcessor_C::Spawnmenu' has a wrong offset!");
static_assert(offsetof(APropProcessor_C, AudioImport) == 0x0002A0, "Member 'APropProcessor_C::AudioImport' has a wrong offset!");
static_assert(offsetof(APropProcessor_C, AudiosToImport) == 0x0002A8, "Member 'APropProcessor_C::AudiosToImport' has a wrong offset!");
static_assert(offsetof(APropProcessor_C, CurrAudio) == 0x0002B8, "Member 'APropProcessor_C::CurrAudio' has a wrong offset!");
static_assert(offsetof(APropProcessor_C, AudiosNames) == 0x0002C8, "Member 'APropProcessor_C::AudiosNames' has a wrong offset!");
static_assert(offsetof(APropProcessor_C, GameMode) == 0x0002D8, "Member 'APropProcessor_C::GameMode' has a wrong offset!");
static_assert(offsetof(APropProcessor_C, NrtLoadId) == 0x0002E0, "Member 'APropProcessor_C::NrtLoadId' has a wrong offset!");
static_assert(offsetof(APropProcessor_C, UrrSoft) == 0x0002E8, "Member 'APropProcessor_C::UrrSoft' has a wrong offset!");
static_assert(offsetof(APropProcessor_C, Fins) == 0x0002F0, "Member 'APropProcessor_C::Fins' has a wrong offset!");
static_assert(offsetof(APropProcessor_C, ObjectsNames) == 0x0002F8, "Member 'APropProcessor_C::ObjectsNames' has a wrong offset!");
static_assert(offsetof(APropProcessor_C, ObjNames) == 0x000308, "Member 'APropProcessor_C::ObjNames' has a wrong offset!");
static_assert(offsetof(APropProcessor_C, ObjRTs) == 0x000318, "Member 'APropProcessor_C::ObjRTs' has a wrong offset!");
static_assert(offsetof(APropProcessor_C, ObjToTex) == 0x000328, "Member 'APropProcessor_C::ObjToTex' has a wrong offset!");
static_assert(offsetof(APropProcessor_C, Objs) == 0x000338, "Member 'APropProcessor_C::Objs' has a wrong offset!");
static_assert(offsetof(APropProcessor_C, IgnoreVolumes) == 0x000348, "Member 'APropProcessor_C::IgnoreVolumes' has a wrong offset!");
static_assert(offsetof(APropProcessor_C, ObjectDispNames) == 0x000350, "Member 'APropProcessor_C::ObjectDispNames' has a wrong offset!");
static_assert(offsetof(APropProcessor_C, ObjectDispNames_d) == 0x000360, "Member 'APropProcessor_C::ObjectDispNames_d' has a wrong offset!");
static_assert(offsetof(APropProcessor_C, Finished) == 0x000370, "Member 'APropProcessor_C::Finished' has a wrong offset!");
static_assert(offsetof(APropProcessor_C, Mass) == 0x000380, "Member 'APropProcessor_C::Mass' has a wrong offset!");

}

