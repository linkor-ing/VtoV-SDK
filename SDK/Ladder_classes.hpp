#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Ladder

#include "Basic.hpp"

#include "Enum_interactionActions_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "InputCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass ladder.ladder_C
// 0x00A0 (0x02C0 - 0x0220)
class ALadder_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          Look;                                              // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Ladder_base;                                       // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UInstancedStaticMeshComponent*          LadderMesh;                                        // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    b_off;                                             // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Floor;                                             // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    B;                                                 // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    A;                                                 // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         Length;                                            // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Alpha;                                             // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FKey>                           Key;                                               // 0x0278(0x0010)(Edit, BlueprintVisible)
	class AMainPlayer_C*                          Player;                                            // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Loc;                                               // 0x0290(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Dist;                                              // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Snd;                                               // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33A6[0x4];                                     // 0x02A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      Obj;                                               // 0x02A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          NoTop;                                             // 0x02B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_ladder(int32 EntryPoint);
	void ActionOptionIndex(class AMainPlayer_C* Param_Player, const struct FHitResult& Hit, int32 Param_Index, Enum_interactionActions Action);
	void ImpactDamage(float Damage, const struct FHitResult& Hit, class AActor* Actor, const struct FVector& Impact);
	void EnterWater(class AWaterVolume_C* Water);
	void LeaveWater(class AWaterVolume_C* Water);
	void EnterWaterOrigin(class AWaterVolume_C* Water);
	void ReceiveTick(float DeltaSeconds);
	void AnyKey(const struct FKey& Param_Key, bool Pressed);
	void ApplyColor(const struct FLinearColor& Color);
	void PropRenderer_finishProps();
	void GamemodeMakeKeys();
	void GamemodePreLoad();
	void Unfocused();
	void SettingsApplied(const struct FStruct_settings& Settings);
	void Unfoc();
	void StuffUpgraded(class AMainGamemode_C* GameMode);
	void GamemodeBeginPlay();
	void SignalSaved();
	void SignalDeleted();
	void UpdateStrAgl();
	void DamageByPlayer(class AMainPlayer_C* Param_Player, const struct FHitResult& Hit);
	void Thrown(class AMainPlayer_C* Param_Player);
	void broken_fire();
	void broken();
	void SendName(class FName Param_Name);
	void Kicked(bool Kick);
	void Player_use(class AMainPlayer_C* Param_Player, const struct FHitResult& Hit);
	void DriveDetached();
	void Hooked(class AHook_C* Hook);
	void AttemptIgnite();
	void PlayerUsedOn(class AMainPlayer_C* Param_Player, const struct FHitResult& Hit);
	void Slice(bool Clean);
	void bitten();
	void ReachedByExplosion(const struct FVector& Location, float Damage);
	void PlayerLookAway(class AMainPlayer_C* Param_Player);
	void Stepped(float Volume);
	void ActionName(class AMainPlayer_C* Param_Player, const struct FHitResult& Hit, const class FString& Param_Name);
	void AccumulateTemperature(float Temperature, float Speed);
	void AddTemperature(float Temperature);
	void MicrowaveElec();
	void PlayerHandAnyKey(class AMainPlayer_C* Param_Player, const struct FKey& Param_Key, bool Pressed);
	void PlayerHandMouse(class AMainPlayer_C* Param_Player, const struct FVector2D& Mouse);
	void PlayerHandMouseWheel(class AMainPlayer_C* Param_Player, float WheelDelta);
	void PlayerHandRelease_LMB(class AMainPlayer_C* Param_Player);
	void PlayerHandRelease_RMB(class AMainPlayer_C* Param_Player);
	void ExtinguishFire();
	void Exploded(float Damage, const struct FVector& Location);
	void PlayerHandUse_LMB(class AMainPlayer_C* Param_Player);
	void PlayerHandUse_RMB(class AMainPlayer_C* Param_Player);
	void ReceivedPhyiscsDamage();
	void Microwave();
	void Ignite(float Fuel);
	void FireDamage(float Damage);
	void SteppedOn(class AMainPlayer_C* Param_Player, const struct FHitResult& Hit);
	void Unhook();
	void DigUp();
	void PhysPreDestroyed();
	void PhysDestroyed();
	void SetKey(const class FString& Param_Key);
	void AddDamage(class AActor* Actor, float Damage, const struct FHitResult& Hit, const struct FVector& Impact, bool SkipSetting);
	void SetPropProps(bool Static, bool Frozen, bool Active);
	void Virus(bool Activate);
	void Eaten();
	void LeaveWaterOrigin(class AWaterVolume_C* Water);
	void UserConstructionScript();
	void Upd();
	bool SeLoc();
	void Drop();
	void DreamInv(TArray<struct FStruct_save>& Invv, class ADreamBase_C** Base);
	void CanBePutInContainer(bool* Return);
	void AsProp(class AProp_C** Return);
	void CanPickup(bool* Return);
	void NoRespawn(bool Param_NoRespawn, bool* Return);
	void LookAt(class AMainPlayer_C* Param_Player, const struct FHitResult& Hit, bool* Return, class FString* Text, class UPrimitiveComponent** boundObjectReplace);
	void IsButtonUsed(bool* Failed);
	void GetActionOptions(class AMainPlayer_C* Param_Player, class UPrimitiveComponent* Component, class AActor* Actor, TArray<class FString>* Options, TArray<Enum_interactionActions>* Options_enum, TArray<class FText>* OptionsNamesOverlay);
	void SetPath(const TArray<struct FVector>& Path, bool* Return);
	void GetOnlyKey(class FString* Param_Key);
	void ProcessKeys(bool* Return);
	void CanBeUsedHold(bool* Return);
	void GetKey(class FString* Param_Key);
	void ToolboxFix(class AProp_toolbox_C* Toolbox, bool* Return);
	void GascanFuel(class AProp_gascan_C* Gascan, bool* Fueled);
	void SkipRadial(bool* Skip);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ladder_C">();
	}
	static class ALadder_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALadder_C>();
	}
};
static_assert(alignof(ALadder_C) == 0x000008, "Wrong alignment on ALadder_C");
static_assert(sizeof(ALadder_C) == 0x0002C0, "Wrong size on ALadder_C");
static_assert(offsetof(ALadder_C, UberGraphFrame) == 0x000220, "Member 'ALadder_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ALadder_C, Look) == 0x000228, "Member 'ALadder_C::Look' has a wrong offset!");
static_assert(offsetof(ALadder_C, Ladder_base) == 0x000230, "Member 'ALadder_C::Ladder_base' has a wrong offset!");
static_assert(offsetof(ALadder_C, LadderMesh) == 0x000238, "Member 'ALadder_C::LadderMesh' has a wrong offset!");
static_assert(offsetof(ALadder_C, b_off) == 0x000240, "Member 'ALadder_C::b_off' has a wrong offset!");
static_assert(offsetof(ALadder_C, Floor) == 0x000248, "Member 'ALadder_C::Floor' has a wrong offset!");
static_assert(offsetof(ALadder_C, B) == 0x000250, "Member 'ALadder_C::B' has a wrong offset!");
static_assert(offsetof(ALadder_C, A) == 0x000258, "Member 'ALadder_C::A' has a wrong offset!");
static_assert(offsetof(ALadder_C, Box) == 0x000260, "Member 'ALadder_C::Box' has a wrong offset!");
static_assert(offsetof(ALadder_C, DefaultSceneRoot) == 0x000268, "Member 'ALadder_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ALadder_C, Length) == 0x000270, "Member 'ALadder_C::Length' has a wrong offset!");
static_assert(offsetof(ALadder_C, Alpha) == 0x000274, "Member 'ALadder_C::Alpha' has a wrong offset!");
static_assert(offsetof(ALadder_C, Key) == 0x000278, "Member 'ALadder_C::Key' has a wrong offset!");
static_assert(offsetof(ALadder_C, Player) == 0x000288, "Member 'ALadder_C::Player' has a wrong offset!");
static_assert(offsetof(ALadder_C, Loc) == 0x000290, "Member 'ALadder_C::Loc' has a wrong offset!");
static_assert(offsetof(ALadder_C, Dist) == 0x00029C, "Member 'ALadder_C::Dist' has a wrong offset!");
static_assert(offsetof(ALadder_C, Snd) == 0x0002A0, "Member 'ALadder_C::Snd' has a wrong offset!");
static_assert(offsetof(ALadder_C, Obj) == 0x0002A8, "Member 'ALadder_C::Obj' has a wrong offset!");
static_assert(offsetof(ALadder_C, NoTop) == 0x0002B8, "Member 'ALadder_C::NoTop' has a wrong offset!");

}

