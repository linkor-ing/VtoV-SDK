#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RealTimeImport

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum RealTimeImport.ERTITextureType
// NumValues: 0x0015
enum class ERTITextureType : uint8
{
	E_none                                   = 0,
	E_un                                     = 1,
	E_Kd                                     = 2,
	E_Ks                                     = 3,
	E_Ns                                     = 4,
	E_d                                      = 5,
	E_bump                                   = 6,
	E_disp                                   = 7,
	E_decal                                  = 8,
	E_refl                                   = 9,
	E_Pr                                     = 10,
	E_Pm                                     = 11,
	E_Ps                                     = 12,
	E_Pc                                     = 13,
	E_Pcr                                    = 14,
	E_Ke                                     = 15,
	E_aniso                                  = 16,
	E_anisor                                 = 17,
	E_norm                                   = 18,
	E_RMA                                    = 19,
	E_MAX                                    = 20,
};

// Enum RealTimeImport.ERTISoundFileType
// NumValues: 0x0003
enum class ERTISoundFileType : uint8
{
	E_wav                                    = 0,
	E_ogg                                    = 1,
	E_MAX                                    = 2,
};

// Enum RealTimeImport.ERTIDirectoryType
// NumValues: 0x0003
enum class ERTIDirectoryType : uint8
{
	E_gd                                     = 0,
	E_ad                                     = 1,
	E_MAX                                    = 2,
};

// Enum RealTimeImport.ERTIFileType
// NumValues: 0x000B
enum class ERTIFileType : uint8
{
	E_wav                                    = 0,
	E_ogg                                    = 1,
	E_png                                    = 2,
	E_bmp                                    = 3,
	E_jpg                                    = 4,
	E_exr                                    = 5,
	E_obj                                    = 6,
	E_fbx                                    = 7,
	E_stl                                    = 8,
	E_all                                    = 9,
	E_MAX                                    = 10,
};

// Enum RealTimeImport.ERTIERGBFormat
// NumValues: 0x0005
enum class ERTIERGBFormat : uint8
{
	E_auto                                   = 0,
	E_RGBA                                   = 1,
	E_BGRA                                   = 2,
	E_Gray                                   = 3,
	E_MAX                                    = 4,
};

// Enum RealTimeImport.ERTICoordinateSystem
// NumValues: 0x0003
enum class ERTICoordinateSystem : uint8
{
	E_RightHanded                            = 0,
	E_LeftHanded                             = 1,
	E_MAX                                    = 2,
};

// Enum RealTimeImport.ERTIMeshType
// NumValues: 0x0005
enum class ERTIMeshType : uint8
{
	E_obj                                    = 0,
	E_fbx                                    = 1,
	E_fbxUV                                  = 2,
	E_stl                                    = 3,
	E_MAX                                    = 4,
};

// Enum RealTimeImport.ERTIExportImageType
// NumValues: 0x0005
enum class ERTIExportImageType : uint8
{
	E_png                                    = 0,
	E_bmp                                    = 1,
	E_jpg                                    = 2,
	E_exr                                    = 3,
	E_MAX                                    = 4,
};

// Enum RealTimeImport.ERTIMeshExportType
// NumValues: 0x0002
enum class ERTIMeshExportType : uint8
{
	E_obj                                    = 0,
	E_MAX                                    = 1,
};

// Enum RealTimeImport.ERTIReferenceInformationType
// NumValues: 0x0004
enum class ERTIReferenceInformationType : uint8
{
	E_none                                   = 0,
	E_Direct                                 = 1,
	E_IndexToDirect                          = 2,
	E_MAX                                    = 3,
};

// Enum RealTimeImport.ERTIInformationType
// NumValues: 0x0007
enum class ERTIInformationType : uint8
{
	E_none                                   = 0,
	E_ByPolygonVertex                        = 1,
	E_ByVertex                               = 2,
	E_ByPolygon                              = 3,
	E_ByEdge                                 = 4,
	E_AllSame                                = 5,
	E_MAX                                    = 6,
};

// ScriptStruct RealTimeImport.RTIFBXGeometryStruct
// 0x00B8 (0x00B8 - 0x0000)
struct alignas(0x08) FRTIFBXGeometryStruct final
{
public:
	uint8                                         Pad_0[0xB8];                                       // 0x0000(0x00B8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRTIFBXGeometryStruct) == 0x000008, "Wrong alignment on FRTIFBXGeometryStruct");
static_assert(sizeof(FRTIFBXGeometryStruct) == 0x0000B8, "Wrong size on FRTIFBXGeometryStruct");

// ScriptStruct RealTimeImport.RTITextureStruct
// 0x0028 (0x0028 - 0x0000)
struct FRTITextureStruct final
{
public:
	class FString                                 TextureName;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	ERTITextureType                               TextureType;                                       // 0x0018(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         FbxID;                                             // 0x0020(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRTITextureStruct) == 0x000008, "Wrong alignment on FRTITextureStruct");
static_assert(sizeof(FRTITextureStruct) == 0x000028, "Wrong size on FRTITextureStruct");
static_assert(offsetof(FRTITextureStruct, TextureName) == 0x000000, "Member 'FRTITextureStruct::TextureName' has a wrong offset!");
static_assert(offsetof(FRTITextureStruct, TextureType) == 0x000018, "Member 'FRTITextureStruct::TextureType' has a wrong offset!");
static_assert(offsetof(FRTITextureStruct, FbxID) == 0x000020, "Member 'FRTITextureStruct::FbxID' has a wrong offset!");

// ScriptStruct RealTimeImport.RTIMaterialStruct
// 0x00A8 (0x00A8 - 0x0000)
struct FRTIMaterialStruct final
{
public:
	bool                                          IsEmpty;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MaterialName;                                      // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TextureName;                                       // 0x0018(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FRTITextureStruct> Textures;                                          // 0x0028(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
	TArray<class FString>                         TexturesFileNames;                                 // 0x0078(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	struct FColor                                 Ambient;                                           // 0x0088(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Diffuse;                                           // 0x008C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Specular;                                          // 0x0090(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpecularExponent;                                  // 0x0094(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dissolved;                                         // 0x0098(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DissolvedInverted;                                 // 0x009C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         FbxID;                                             // 0x00A0(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRTIMaterialStruct) == 0x000008, "Wrong alignment on FRTIMaterialStruct");
static_assert(sizeof(FRTIMaterialStruct) == 0x0000A8, "Wrong size on FRTIMaterialStruct");
static_assert(offsetof(FRTIMaterialStruct, IsEmpty) == 0x000000, "Member 'FRTIMaterialStruct::IsEmpty' has a wrong offset!");
static_assert(offsetof(FRTIMaterialStruct, MaterialName) == 0x000008, "Member 'FRTIMaterialStruct::MaterialName' has a wrong offset!");
static_assert(offsetof(FRTIMaterialStruct, TextureName) == 0x000018, "Member 'FRTIMaterialStruct::TextureName' has a wrong offset!");
static_assert(offsetof(FRTIMaterialStruct, Textures) == 0x000028, "Member 'FRTIMaterialStruct::Textures' has a wrong offset!");
static_assert(offsetof(FRTIMaterialStruct, TexturesFileNames) == 0x000078, "Member 'FRTIMaterialStruct::TexturesFileNames' has a wrong offset!");
static_assert(offsetof(FRTIMaterialStruct, Ambient) == 0x000088, "Member 'FRTIMaterialStruct::Ambient' has a wrong offset!");
static_assert(offsetof(FRTIMaterialStruct, Diffuse) == 0x00008C, "Member 'FRTIMaterialStruct::Diffuse' has a wrong offset!");
static_assert(offsetof(FRTIMaterialStruct, Specular) == 0x000090, "Member 'FRTIMaterialStruct::Specular' has a wrong offset!");
static_assert(offsetof(FRTIMaterialStruct, SpecularExponent) == 0x000094, "Member 'FRTIMaterialStruct::SpecularExponent' has a wrong offset!");
static_assert(offsetof(FRTIMaterialStruct, Dissolved) == 0x000098, "Member 'FRTIMaterialStruct::Dissolved' has a wrong offset!");
static_assert(offsetof(FRTIMaterialStruct, DissolvedInverted) == 0x00009C, "Member 'FRTIMaterialStruct::DissolvedInverted' has a wrong offset!");
static_assert(offsetof(FRTIMaterialStruct, FbxID) == 0x0000A0, "Member 'FRTIMaterialStruct::FbxID' has a wrong offset!");

// ScriptStruct RealTimeImport.RTISoundDataStruct
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FRTISoundDataStruct final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRTISoundDataStruct) == 0x000008, "Wrong alignment on FRTISoundDataStruct");
static_assert(sizeof(FRTISoundDataStruct) == 0x000038, "Wrong size on FRTISoundDataStruct");

// ScriptStruct RealTimeImport.RTITextureToDeleteStruct
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FRTITextureToDeleteStruct final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRTITextureToDeleteStruct) == 0x000008, "Wrong alignment on FRTITextureToDeleteStruct");
static_assert(sizeof(FRTITextureToDeleteStruct) == 0x000010, "Wrong size on FRTITextureToDeleteStruct");

// ScriptStruct RealTimeImport.RTIMeshStruct
// 0x0118 (0x0118 - 0x0000)
struct FRTIMeshStruct final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GeometryName;                                      // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Triangles;                                         // 0x0018(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        Vertices;                                          // 0x0028(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        Normals;                                           // 0x0038(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      UV0;                                               // 0x0048(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                   VertexColors;                                      // 0x0058(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	bool                                          HasMaterialData;                                   // 0x0068(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRTIMaterialStruct                     MaterialData;                                      // 0x0070(0x00A8)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRTIMeshStruct) == 0x000008, "Wrong alignment on FRTIMeshStruct");
static_assert(sizeof(FRTIMeshStruct) == 0x000118, "Wrong size on FRTIMeshStruct");
static_assert(offsetof(FRTIMeshStruct, GeometryName) == 0x000008, "Member 'FRTIMeshStruct::GeometryName' has a wrong offset!");
static_assert(offsetof(FRTIMeshStruct, Triangles) == 0x000018, "Member 'FRTIMeshStruct::Triangles' has a wrong offset!");
static_assert(offsetof(FRTIMeshStruct, Vertices) == 0x000028, "Member 'FRTIMeshStruct::Vertices' has a wrong offset!");
static_assert(offsetof(FRTIMeshStruct, Normals) == 0x000038, "Member 'FRTIMeshStruct::Normals' has a wrong offset!");
static_assert(offsetof(FRTIMeshStruct, UV0) == 0x000048, "Member 'FRTIMeshStruct::UV0' has a wrong offset!");
static_assert(offsetof(FRTIMeshStruct, VertexColors) == 0x000058, "Member 'FRTIMeshStruct::VertexColors' has a wrong offset!");
static_assert(offsetof(FRTIMeshStruct, HasMaterialData) == 0x000068, "Member 'FRTIMeshStruct::HasMaterialData' has a wrong offset!");
static_assert(offsetof(FRTIMeshStruct, MaterialData) == 0x000070, "Member 'FRTIMeshStruct::MaterialData' has a wrong offset!");

// ScriptStruct RealTimeImport.RTIModelStruct
// 0x0050 (0x0050 - 0x0000)
struct FRTIModelStruct final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             RelativeTransform;                                 // 0x0010(0x0030)(Edit, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FRTIMeshStruct>                 MeshStructs;                                       // 0x0040(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRTIModelStruct) == 0x000010, "Wrong alignment on FRTIModelStruct");
static_assert(sizeof(FRTIModelStruct) == 0x000050, "Wrong size on FRTIModelStruct");
static_assert(offsetof(FRTIModelStruct, Name) == 0x000000, "Member 'FRTIModelStruct::Name' has a wrong offset!");
static_assert(offsetof(FRTIModelStruct, RelativeTransform) == 0x000010, "Member 'FRTIModelStruct::RelativeTransform' has a wrong offset!");
static_assert(offsetof(FRTIModelStruct, MeshStructs) == 0x000040, "Member 'FRTIModelStruct::MeshStructs' has a wrong offset!");

// ScriptStruct RealTimeImport.SRealtimeImportThreadJobData
// 0x0090 (0x0090 - 0x0000)
struct alignas(0x08) FSRealtimeImportThreadJobData final
{
public:
	uint8                                         Pad_0[0x90];                                       // 0x0000(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSRealtimeImportThreadJobData) == 0x000008, "Wrong alignment on FSRealtimeImportThreadJobData");
static_assert(sizeof(FSRealtimeImportThreadJobData) == 0x000090, "Wrong size on FSRealtimeImportThreadJobData");

// ScriptStruct RealTimeImport.RTIWavPlayAsyncStruct
// 0x0068 (0x0068 - 0x0000)
struct alignas(0x08) FRTIWavPlayAsyncStruct final
{
public:
	uint8                                         Pad_0[0x68];                                       // 0x0000(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRTIWavPlayAsyncStruct) == 0x000008, "Wrong alignment on FRTIWavPlayAsyncStruct");
static_assert(sizeof(FRTIWavPlayAsyncStruct) == 0x000068, "Wrong size on FRTIWavPlayAsyncStruct");

// ScriptStruct RealTimeImport.RTIFBXConnections
// 0x0190 (0x0190 - 0x0000)
struct alignas(0x08) FRTIFBXConnections final
{
public:
	uint8                                         Pad_0[0x190];                                      // 0x0000(0x0190)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRTIFBXConnections) == 0x000008, "Wrong alignment on FRTIFBXConnections");
static_assert(sizeof(FRTIFBXConnections) == 0x000190, "Wrong size on FRTIFBXConnections");

// ScriptStruct RealTimeImport.RTIFBXModelStruct
// 0x00B0 (0x00B0 - 0x0000)
struct alignas(0x10) FRTIFBXModelStruct final
{
public:
	uint8                                         Pad_0[0xB0];                                       // 0x0000(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRTIFBXModelStruct) == 0x000010, "Wrong alignment on FRTIFBXModelStruct");
static_assert(sizeof(FRTIFBXModelStruct) == 0x0000B0, "Wrong size on FRTIFBXModelStruct");

// ScriptStruct RealTimeImport.RTIFBXArmatureStruct
// 0x0001 (0x0001 - 0x0000)
struct FRTIFBXArmatureStruct final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRTIFBXArmatureStruct) == 0x000001, "Wrong alignment on FRTIFBXArmatureStruct");
static_assert(sizeof(FRTIFBXArmatureStruct) == 0x000001, "Wrong size on FRTIFBXArmatureStruct");

// ScriptStruct RealTimeImport.RTIFBXMaterialStruct
// 0x0098 (0x0098 - 0x0000)
struct alignas(0x08) FRTIFBXMaterialStruct final
{
public:
	uint8                                         Pad_0[0x98];                                       // 0x0000(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRTIFBXMaterialStruct) == 0x000008, "Wrong alignment on FRTIFBXMaterialStruct");
static_assert(sizeof(FRTIFBXMaterialStruct) == 0x000098, "Wrong size on FRTIFBXMaterialStruct");

// ScriptStruct RealTimeImport.RTIFBXTextureStruct
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x08) FRTIFBXTextureStruct final
{
public:
	uint8                                         Pad_0[0x60];                                       // 0x0000(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRTIFBXTextureStruct) == 0x000008, "Wrong alignment on FRTIFBXTextureStruct");
static_assert(sizeof(FRTIFBXTextureStruct) == 0x000060, "Wrong size on FRTIFBXTextureStruct");

// ScriptStruct RealTimeImport.RTIFBXVideoStruct
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FRTIFBXVideoStruct final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRTIFBXVideoStruct) == 0x000008, "Wrong alignment on FRTIFBXVideoStruct");
static_assert(sizeof(FRTIFBXVideoStruct) == 0x000028, "Wrong size on FRTIFBXVideoStruct");

}

