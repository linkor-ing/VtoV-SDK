#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Trigger_forestMoan

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function trigger_forestMoan.trigger_forestMoan_C.BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct Trigger_forestMoan_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Trigger_forestMoan_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on Trigger_forestMoan_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(Trigger_forestMoan_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on Trigger_forestMoan_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(Trigger_forestMoan_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'Trigger_forestMoan_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Trigger_forestMoan_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'Trigger_forestMoan_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(Trigger_forestMoan_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'Trigger_forestMoan_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(Trigger_forestMoan_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'Trigger_forestMoan_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Trigger_forestMoan_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'Trigger_forestMoan_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(Trigger_forestMoan_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'Trigger_forestMoan_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function trigger_forestMoan.trigger_forestMoan_C.ExecuteUbergraph_trigger_forestMoan
// 0x00E8 (0x00E8 - 0x0000)
struct Trigger_forestMoan_C_ExecuteUbergraph_trigger_forestMoan final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInst_C*                            CallFunc_getMainGameInstance_AsGame_Inst;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0030(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_ClassDynamicCast_AsCar_1;                   // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsMain_Player;             // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_1;                // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Trigger_forestMoan_C_ExecuteUbergraph_trigger_forestMoan) == 0x000008, "Wrong alignment on Trigger_forestMoan_C_ExecuteUbergraph_trigger_forestMoan");
static_assert(sizeof(Trigger_forestMoan_C_ExecuteUbergraph_trigger_forestMoan) == 0x0000E8, "Wrong size on Trigger_forestMoan_C_ExecuteUbergraph_trigger_forestMoan");
static_assert(offsetof(Trigger_forestMoan_C_ExecuteUbergraph_trigger_forestMoan, EntryPoint) == 0x000000, "Member 'Trigger_forestMoan_C_ExecuteUbergraph_trigger_forestMoan::EntryPoint' has a wrong offset!");
static_assert(offsetof(Trigger_forestMoan_C_ExecuteUbergraph_trigger_forestMoan, CallFunc_getMainGameInstance_AsGame_Inst) == 0x000008, "Member 'Trigger_forestMoan_C_ExecuteUbergraph_trigger_forestMoan::CallFunc_getMainGameInstance_AsGame_Inst' has a wrong offset!");
static_assert(offsetof(Trigger_forestMoan_C_ExecuteUbergraph_trigger_forestMoan, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000010, "Member 'Trigger_forestMoan_C_ExecuteUbergraph_trigger_forestMoan::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Trigger_forestMoan_C_ExecuteUbergraph_trigger_forestMoan, K2Node_ComponentBoundEvent_OtherActor) == 0x000018, "Member 'Trigger_forestMoan_C_ExecuteUbergraph_trigger_forestMoan::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(Trigger_forestMoan_C_ExecuteUbergraph_trigger_forestMoan, K2Node_ComponentBoundEvent_OtherComp) == 0x000020, "Member 'Trigger_forestMoan_C_ExecuteUbergraph_trigger_forestMoan::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(Trigger_forestMoan_C_ExecuteUbergraph_trigger_forestMoan, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000028, "Member 'Trigger_forestMoan_C_ExecuteUbergraph_trigger_forestMoan::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Trigger_forestMoan_C_ExecuteUbergraph_trigger_forestMoan, K2Node_ComponentBoundEvent_bFromSweep) == 0x00002C, "Member 'Trigger_forestMoan_C_ExecuteUbergraph_trigger_forestMoan::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(Trigger_forestMoan_C_ExecuteUbergraph_trigger_forestMoan, K2Node_ComponentBoundEvent_SweepResult) == 0x000030, "Member 'Trigger_forestMoan_C_ExecuteUbergraph_trigger_forestMoan::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(Trigger_forestMoan_C_ExecuteUbergraph_trigger_forestMoan, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000B8, "Member 'Trigger_forestMoan_C_ExecuteUbergraph_trigger_forestMoan::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(Trigger_forestMoan_C_ExecuteUbergraph_trigger_forestMoan, CallFunc_GetObjectClass_ReturnValue) == 0x0000C0, "Member 'Trigger_forestMoan_C_ExecuteUbergraph_trigger_forestMoan::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(Trigger_forestMoan_C_ExecuteUbergraph_trigger_forestMoan, K2Node_ClassDynamicCast_AsCar_1) == 0x0000C8, "Member 'Trigger_forestMoan_C_ExecuteUbergraph_trigger_forestMoan::K2Node_ClassDynamicCast_AsCar_1' has a wrong offset!");
static_assert(offsetof(Trigger_forestMoan_C_ExecuteUbergraph_trigger_forestMoan, K2Node_ClassDynamicCast_bSuccess) == 0x0000D0, "Member 'Trigger_forestMoan_C_ExecuteUbergraph_trigger_forestMoan::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Trigger_forestMoan_C_ExecuteUbergraph_trigger_forestMoan, K2Node_ClassDynamicCast_AsMain_Player) == 0x0000D8, "Member 'Trigger_forestMoan_C_ExecuteUbergraph_trigger_forestMoan::K2Node_ClassDynamicCast_AsMain_Player' has a wrong offset!");
static_assert(offsetof(Trigger_forestMoan_C_ExecuteUbergraph_trigger_forestMoan, K2Node_ClassDynamicCast_bSuccess_1) == 0x0000E0, "Member 'Trigger_forestMoan_C_ExecuteUbergraph_trigger_forestMoan::K2Node_ClassDynamicCast_bSuccess_1' has a wrong offset!");

}

