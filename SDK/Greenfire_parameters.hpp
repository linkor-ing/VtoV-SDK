#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Greenfire

#include "Basic.hpp"

#include "Enum_interactionActions_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function greenfire.greenfire_C.steppedOn
// 0x0090 (0x0090 - 0x0000)
struct Greenfire_C_SteppedOn final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Greenfire_C_SteppedOn) == 0x000008, "Wrong alignment on Greenfire_C_SteppedOn");
static_assert(sizeof(Greenfire_C_SteppedOn) == 0x000090, "Wrong size on Greenfire_C_SteppedOn");
static_assert(offsetof(Greenfire_C_SteppedOn, Player) == 0x000000, "Member 'Greenfire_C_SteppedOn::Player' has a wrong offset!");
static_assert(offsetof(Greenfire_C_SteppedOn, Hit) == 0x000008, "Member 'Greenfire_C_SteppedOn::Hit' has a wrong offset!");

// Function greenfire.greenfire_C.fireDamage
// 0x0004 (0x0004 - 0x0000)
struct Greenfire_C_FireDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Greenfire_C_FireDamage) == 0x000004, "Wrong alignment on Greenfire_C_FireDamage");
static_assert(sizeof(Greenfire_C_FireDamage) == 0x000004, "Wrong size on Greenfire_C_FireDamage");
static_assert(offsetof(Greenfire_C_FireDamage, Damage) == 0x000000, "Member 'Greenfire_C_FireDamage::Damage' has a wrong offset!");

// Function greenfire.greenfire_C.ignite
// 0x0004 (0x0004 - 0x0000)
struct Greenfire_C_Ignite final
{
public:
	float                                         Fuel;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Greenfire_C_Ignite) == 0x000004, "Wrong alignment on Greenfire_C_Ignite");
static_assert(sizeof(Greenfire_C_Ignite) == 0x000004, "Wrong size on Greenfire_C_Ignite");
static_assert(offsetof(Greenfire_C_Ignite, Fuel) == 0x000000, "Member 'Greenfire_C_Ignite::Fuel' has a wrong offset!");

// Function greenfire.greenfire_C.actionOptionIndex
// 0x0098 (0x0098 - 0x0000)
struct Greenfire_C_ActionOptionIndex final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         Param_Index;                                       // 0x0090(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_interactionActions                       Action;                                            // 0x0094(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Greenfire_C_ActionOptionIndex) == 0x000008, "Wrong alignment on Greenfire_C_ActionOptionIndex");
static_assert(sizeof(Greenfire_C_ActionOptionIndex) == 0x000098, "Wrong size on Greenfire_C_ActionOptionIndex");
static_assert(offsetof(Greenfire_C_ActionOptionIndex, Player) == 0x000000, "Member 'Greenfire_C_ActionOptionIndex::Player' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ActionOptionIndex, Hit) == 0x000008, "Member 'Greenfire_C_ActionOptionIndex::Hit' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ActionOptionIndex, Param_Index) == 0x000090, "Member 'Greenfire_C_ActionOptionIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ActionOptionIndex, Action) == 0x000094, "Member 'Greenfire_C_ActionOptionIndex::Action' has a wrong offset!");

// Function greenfire.greenfire_C.playerHandUse_RMB
// 0x0008 (0x0008 - 0x0000)
struct Greenfire_C_PlayerHandUse_RMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Greenfire_C_PlayerHandUse_RMB) == 0x000008, "Wrong alignment on Greenfire_C_PlayerHandUse_RMB");
static_assert(sizeof(Greenfire_C_PlayerHandUse_RMB) == 0x000008, "Wrong size on Greenfire_C_PlayerHandUse_RMB");
static_assert(offsetof(Greenfire_C_PlayerHandUse_RMB, Player) == 0x000000, "Member 'Greenfire_C_PlayerHandUse_RMB::Player' has a wrong offset!");

// Function greenfire.greenfire_C.playerHandUse_LMB
// 0x0008 (0x0008 - 0x0000)
struct Greenfire_C_PlayerHandUse_LMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Greenfire_C_PlayerHandUse_LMB) == 0x000008, "Wrong alignment on Greenfire_C_PlayerHandUse_LMB");
static_assert(sizeof(Greenfire_C_PlayerHandUse_LMB) == 0x000008, "Wrong size on Greenfire_C_PlayerHandUse_LMB");
static_assert(offsetof(Greenfire_C_PlayerHandUse_LMB, Player) == 0x000000, "Member 'Greenfire_C_PlayerHandUse_LMB::Player' has a wrong offset!");

// Function greenfire.greenfire_C.exploded
// 0x0010 (0x0010 - 0x0000)
struct Greenfire_C_Exploded final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Greenfire_C_Exploded) == 0x000004, "Wrong alignment on Greenfire_C_Exploded");
static_assert(sizeof(Greenfire_C_Exploded) == 0x000010, "Wrong size on Greenfire_C_Exploded");
static_assert(offsetof(Greenfire_C_Exploded, Damage) == 0x000000, "Member 'Greenfire_C_Exploded::Damage' has a wrong offset!");
static_assert(offsetof(Greenfire_C_Exploded, Location) == 0x000004, "Member 'Greenfire_C_Exploded::Location' has a wrong offset!");

// Function greenfire.greenfire_C.playerHandRelease_RMB
// 0x0008 (0x0008 - 0x0000)
struct Greenfire_C_PlayerHandRelease_RMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Greenfire_C_PlayerHandRelease_RMB) == 0x000008, "Wrong alignment on Greenfire_C_PlayerHandRelease_RMB");
static_assert(sizeof(Greenfire_C_PlayerHandRelease_RMB) == 0x000008, "Wrong size on Greenfire_C_PlayerHandRelease_RMB");
static_assert(offsetof(Greenfire_C_PlayerHandRelease_RMB, Player) == 0x000000, "Member 'Greenfire_C_PlayerHandRelease_RMB::Player' has a wrong offset!");

// Function greenfire.greenfire_C.playerHandRelease_LMB
// 0x0008 (0x0008 - 0x0000)
struct Greenfire_C_PlayerHandRelease_LMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Greenfire_C_PlayerHandRelease_LMB) == 0x000008, "Wrong alignment on Greenfire_C_PlayerHandRelease_LMB");
static_assert(sizeof(Greenfire_C_PlayerHandRelease_LMB) == 0x000008, "Wrong size on Greenfire_C_PlayerHandRelease_LMB");
static_assert(offsetof(Greenfire_C_PlayerHandRelease_LMB, Player) == 0x000000, "Member 'Greenfire_C_PlayerHandRelease_LMB::Player' has a wrong offset!");

// Function greenfire.greenfire_C.playerHandMouseWheel
// 0x0010 (0x0010 - 0x0000)
struct Greenfire_C_PlayerHandMouseWheel final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WheelDelta;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Greenfire_C_PlayerHandMouseWheel) == 0x000008, "Wrong alignment on Greenfire_C_PlayerHandMouseWheel");
static_assert(sizeof(Greenfire_C_PlayerHandMouseWheel) == 0x000010, "Wrong size on Greenfire_C_PlayerHandMouseWheel");
static_assert(offsetof(Greenfire_C_PlayerHandMouseWheel, Player) == 0x000000, "Member 'Greenfire_C_PlayerHandMouseWheel::Player' has a wrong offset!");
static_assert(offsetof(Greenfire_C_PlayerHandMouseWheel, WheelDelta) == 0x000008, "Member 'Greenfire_C_PlayerHandMouseWheel::WheelDelta' has a wrong offset!");

// Function greenfire.greenfire_C.playerHandMouse
// 0x0010 (0x0010 - 0x0000)
struct Greenfire_C_PlayerHandMouse final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Mouse;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Greenfire_C_PlayerHandMouse) == 0x000008, "Wrong alignment on Greenfire_C_PlayerHandMouse");
static_assert(sizeof(Greenfire_C_PlayerHandMouse) == 0x000010, "Wrong size on Greenfire_C_PlayerHandMouse");
static_assert(offsetof(Greenfire_C_PlayerHandMouse, Player) == 0x000000, "Member 'Greenfire_C_PlayerHandMouse::Player' has a wrong offset!");
static_assert(offsetof(Greenfire_C_PlayerHandMouse, Mouse) == 0x000008, "Member 'Greenfire_C_PlayerHandMouse::Mouse' has a wrong offset!");

// Function greenfire.greenfire_C.playerHandAnyKey
// 0x0028 (0x0028 - 0x0000)
struct Greenfire_C_PlayerHandAnyKey final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   Key;                                               // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Pressed;                                           // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Greenfire_C_PlayerHandAnyKey) == 0x000008, "Wrong alignment on Greenfire_C_PlayerHandAnyKey");
static_assert(sizeof(Greenfire_C_PlayerHandAnyKey) == 0x000028, "Wrong size on Greenfire_C_PlayerHandAnyKey");
static_assert(offsetof(Greenfire_C_PlayerHandAnyKey, Player) == 0x000000, "Member 'Greenfire_C_PlayerHandAnyKey::Player' has a wrong offset!");
static_assert(offsetof(Greenfire_C_PlayerHandAnyKey, Key) == 0x000008, "Member 'Greenfire_C_PlayerHandAnyKey::Key' has a wrong offset!");
static_assert(offsetof(Greenfire_C_PlayerHandAnyKey, Pressed) == 0x000020, "Member 'Greenfire_C_PlayerHandAnyKey::Pressed' has a wrong offset!");

// Function greenfire.greenfire_C.addTemperature
// 0x0004 (0x0004 - 0x0000)
struct Greenfire_C_AddTemperature final
{
public:
	float                                         Temperature;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Greenfire_C_AddTemperature) == 0x000004, "Wrong alignment on Greenfire_C_AddTemperature");
static_assert(sizeof(Greenfire_C_AddTemperature) == 0x000004, "Wrong size on Greenfire_C_AddTemperature");
static_assert(offsetof(Greenfire_C_AddTemperature, Temperature) == 0x000000, "Member 'Greenfire_C_AddTemperature::Temperature' has a wrong offset!");

// Function greenfire.greenfire_C.accumulateTemperature
// 0x0008 (0x0008 - 0x0000)
struct Greenfire_C_AccumulateTemperature final
{
public:
	float                                         Temperature;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Greenfire_C_AccumulateTemperature) == 0x000004, "Wrong alignment on Greenfire_C_AccumulateTemperature");
static_assert(sizeof(Greenfire_C_AccumulateTemperature) == 0x000008, "Wrong size on Greenfire_C_AccumulateTemperature");
static_assert(offsetof(Greenfire_C_AccumulateTemperature, Temperature) == 0x000000, "Member 'Greenfire_C_AccumulateTemperature::Temperature' has a wrong offset!");
static_assert(offsetof(Greenfire_C_AccumulateTemperature, Speed) == 0x000004, "Member 'Greenfire_C_AccumulateTemperature::Speed' has a wrong offset!");

// Function greenfire.greenfire_C.ActionName
// 0x00A0 (0x00A0 - 0x0000)
struct Greenfire_C_ActionName final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class FString                                 Param_Name;                                        // 0x0090(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Greenfire_C_ActionName) == 0x000008, "Wrong alignment on Greenfire_C_ActionName");
static_assert(sizeof(Greenfire_C_ActionName) == 0x0000A0, "Wrong size on Greenfire_C_ActionName");
static_assert(offsetof(Greenfire_C_ActionName, Player) == 0x000000, "Member 'Greenfire_C_ActionName::Player' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ActionName, Hit) == 0x000008, "Member 'Greenfire_C_ActionName::Hit' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ActionName, Param_Name) == 0x000090, "Member 'Greenfire_C_ActionName::Param_Name' has a wrong offset!");

// Function greenfire.greenfire_C.stepped
// 0x0004 (0x0004 - 0x0000)
struct Greenfire_C_Stepped final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Greenfire_C_Stepped) == 0x000004, "Wrong alignment on Greenfire_C_Stepped");
static_assert(sizeof(Greenfire_C_Stepped) == 0x000004, "Wrong size on Greenfire_C_Stepped");
static_assert(offsetof(Greenfire_C_Stepped, Volume) == 0x000000, "Member 'Greenfire_C_Stepped::Volume' has a wrong offset!");

// Function greenfire.greenfire_C.playerLookAway
// 0x0008 (0x0008 - 0x0000)
struct Greenfire_C_PlayerLookAway final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Greenfire_C_PlayerLookAway) == 0x000008, "Wrong alignment on Greenfire_C_PlayerLookAway");
static_assert(sizeof(Greenfire_C_PlayerLookAway) == 0x000008, "Wrong size on Greenfire_C_PlayerLookAway");
static_assert(offsetof(Greenfire_C_PlayerLookAway, Player) == 0x000000, "Member 'Greenfire_C_PlayerLookAway::Player' has a wrong offset!");

// Function greenfire.greenfire_C.reachedByExplosion
// 0x0010 (0x0010 - 0x0000)
struct Greenfire_C_ReachedByExplosion final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Greenfire_C_ReachedByExplosion) == 0x000004, "Wrong alignment on Greenfire_C_ReachedByExplosion");
static_assert(sizeof(Greenfire_C_ReachedByExplosion) == 0x000010, "Wrong size on Greenfire_C_ReachedByExplosion");
static_assert(offsetof(Greenfire_C_ReachedByExplosion, Location) == 0x000000, "Member 'Greenfire_C_ReachedByExplosion::Location' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ReachedByExplosion, Damage) == 0x00000C, "Member 'Greenfire_C_ReachedByExplosion::Damage' has a wrong offset!");

// Function greenfire.greenfire_C.slice
// 0x0001 (0x0001 - 0x0000)
struct Greenfire_C_Slice final
{
public:
	bool                                          Clean;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Greenfire_C_Slice) == 0x000001, "Wrong alignment on Greenfire_C_Slice");
static_assert(sizeof(Greenfire_C_Slice) == 0x000001, "Wrong size on Greenfire_C_Slice");
static_assert(offsetof(Greenfire_C_Slice, Clean) == 0x000000, "Member 'Greenfire_C_Slice::Clean' has a wrong offset!");

// Function greenfire.greenfire_C.playerUsedOn
// 0x0090 (0x0090 - 0x0000)
struct Greenfire_C_PlayerUsedOn final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Greenfire_C_PlayerUsedOn) == 0x000008, "Wrong alignment on Greenfire_C_PlayerUsedOn");
static_assert(sizeof(Greenfire_C_PlayerUsedOn) == 0x000090, "Wrong size on Greenfire_C_PlayerUsedOn");
static_assert(offsetof(Greenfire_C_PlayerUsedOn, Player) == 0x000000, "Member 'Greenfire_C_PlayerUsedOn::Player' has a wrong offset!");
static_assert(offsetof(Greenfire_C_PlayerUsedOn, Hit) == 0x000008, "Member 'Greenfire_C_PlayerUsedOn::Hit' has a wrong offset!");

// Function greenfire.greenfire_C.hooked
// 0x0008 (0x0008 - 0x0000)
struct Greenfire_C_Hooked final
{
public:
	class AHook_C*                                Hook;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Greenfire_C_Hooked) == 0x000008, "Wrong alignment on Greenfire_C_Hooked");
static_assert(sizeof(Greenfire_C_Hooked) == 0x000008, "Wrong size on Greenfire_C_Hooked");
static_assert(offsetof(Greenfire_C_Hooked, Hook) == 0x000000, "Member 'Greenfire_C_Hooked::Hook' has a wrong offset!");

// Function greenfire.greenfire_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct Greenfire_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Greenfire_C_ReceiveTick) == 0x000004, "Wrong alignment on Greenfire_C_ReceiveTick");
static_assert(sizeof(Greenfire_C_ReceiveTick) == 0x000004, "Wrong size on Greenfire_C_ReceiveTick");
static_assert(offsetof(Greenfire_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'Greenfire_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function greenfire.greenfire_C.ExecuteUbergraph_greenfire
// 0x0710 (0x0710 - 0x0000)
struct Greenfire_C_ExecuteUbergraph_greenfire final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_1;               // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_1;                     // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C30[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_FloatToVector_ReturnValue;           // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C31[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C32[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_FloatToVector_ReturnValue_1;         // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C33[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_damage_4;                             // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_5;                                // 0x0060(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AActor*                                 K2Node_Event_actor_1;                              // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_impact_1;                             // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C34[0x4];                                     // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AWaterVolume_C*                         K2Node_Event_water_3;                              // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWaterVolume_C*                         K2Node_Event_water_2;                              // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWaterVolume_C*                         K2Node_Event_water_1;                              // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWaterVolume_C*                         K2Node_Event_water;                                // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_activate;                             // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_static;                               // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_frozen;                               // 0x0122(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_active;                               // 0x0123(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C35[0x4];                                     // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_actor;                                // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_3;                             // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_4;                                // 0x0134(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                K2Node_Event_impact;                               // 0x01BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_skipSetting;                          // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C36[0x7];                                     // 0x01C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_Event_key_1;                                // 0x01D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_11;                            // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_3;                                // 0x01E8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         K2Node_Event_damage_2;                             // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_fuel;                                 // 0x0274(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_10;                            // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_2;                                // 0x0280(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         K2Node_Event_index;                                // 0x0308(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_interactionActions                       K2Node_Event_action;                               // 0x030C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C37[0x3];                                     // 0x030D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_9;                             // 0x0310(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_8;                             // 0x0318(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_1;                             // 0x0320(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_location_1;                           // 0x0324(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_7;                             // 0x0330(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_6;                             // 0x0338(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_5;                             // 0x0340(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_wheelDelta;                           // 0x0348(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C38[0x4];                                     // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_4;                             // 0x0350(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Event_mouse;                                // 0x0358(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_3;                             // 0x0360(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_Event_key;                                  // 0x0368(0x0018)(HasGetValueTypeHash)
	bool                                          K2Node_Event_pressed;                              // 0x0380(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C39[0x3];                                     // 0x0381(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_temperature_1;                        // 0x0384(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_temperature;                          // 0x0388(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_speed;                                // 0x038C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_2;                             // 0x0390(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_1;                                // 0x0398(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class FString                                 K2Node_Event_name;                                 // 0x0420(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         K2Node_Event_volume;                               // 0x0430(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C3A[0x4];                                     // 0x0434(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_1;                             // 0x0438(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_location;                             // 0x0440(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage;                               // 0x044C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_clean;                                // 0x0450(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C3B[0x7];                                     // 0x0451(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player;                               // 0x0458(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit;                                  // 0x0460(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AHook_C*                                K2Node_Event_hook;                                 // 0x04E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x04F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C3C[0x4];                                     // 0x04F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x04F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDistanceTo_ReturnValue;                // 0x0500(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C3D[0x4];                                     // 0x0504(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0508(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0510(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue;           // 0x0514(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0520(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C3E[0x4];                                     // 0x0524(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue_1;     // 0x0528(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0530(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0534(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0540(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0544(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0550(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue;  // 0x055C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_RotatorToVector_ReturnValue;         // 0x0560(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x056C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0570(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x057C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0580(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RLerp_ReturnValue;                        // 0x058C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0598(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_1; // 0x05A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x05A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_GetOverlappingActors_OverlappingActors;   // 0x05A8(0x0010)(ReferenceParm)
	int32                                         Temp_int_Variable_2;                               // 0x05B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C3F[0x4];                                     // 0x05BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x05C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x05C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C40[0x7];                                     // 0x05C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IInt_objects_C>        K2Node_DynamicCast_AsInt_Objects;                  // 0x05D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x05E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoesImplementInterface_ReturnValue;       // 0x05E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C41[0x2];                                     // 0x05E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x05E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x05E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C42[0x3];                                     // 0x05E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x05EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WasRecentlyRendered_ReturnValue;          // 0x05F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x05F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C43[0x2];                                     // 0x05F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x05F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x05F8(0x0010)(ZeroConstructor, NoDestructor)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x0608(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C44[0x4];                                     // 0x0614(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0618(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0620(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0650(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AExplosion_C*                           CallFunc_FinishSpawningActor_ReturnValue;          // 0x0658(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0660(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C45[0x3];                                     // 0x0661(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_2;    // 0x0664(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x0670(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_2;              // 0x06A0(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1; // 0x06D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_2; // 0x06D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AProp_greenfireStone_C*                 CallFunc_FinishSpawningActor_ReturnValue_1;        // 0x06E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AExplosion_C*                           CallFunc_FinishSpawningActor_ReturnValue_2;        // 0x06E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_2;            // 0x06F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_2;          // 0x06F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_2; // 0x06F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_1;                       // 0x06FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_FloatToVector_ReturnValue_2;         // 0x0700(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Greenfire_C_ExecuteUbergraph_greenfire) == 0x000010, "Wrong alignment on Greenfire_C_ExecuteUbergraph_greenfire");
static_assert(sizeof(Greenfire_C_ExecuteUbergraph_greenfire) == 0x000710, "Wrong size on Greenfire_C_ExecuteUbergraph_greenfire");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, EntryPoint) == 0x000000, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::EntryPoint' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, Temp_bool_IsClosed_Variable) == 0x000004, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, Temp_bool_Has_Been_Initd_Variable) == 0x000005, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, Temp_bool_Has_Been_Initd_Variable_1) == 0x000006, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::Temp_bool_Has_Been_Initd_Variable_1' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, Temp_bool_IsClosed_Variable_1) == 0x000007, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::Temp_bool_IsClosed_Variable_1' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, Temp_int_Array_Index_Variable) == 0x000010, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, Temp_int_Variable) == 0x000014, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000018, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00001C, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000020, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_Add_FloatFloat_ReturnValue) == 0x000024, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_Add_IntInt_ReturnValue_1) == 0x000028, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_Conv_FloatToVector_ReturnValue) == 0x00002C, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_Conv_FloatToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, Temp_int_Variable_1) == 0x00003C, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000040, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x000044, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_Conv_FloatToVector_ReturnValue_1) == 0x000048, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_Conv_FloatToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_Add_IntInt_ReturnValue_2) == 0x000054, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_Less_IntInt_ReturnValue_1) == 0x000058, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_damage_4) == 0x00005C, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_damage_4' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_hit_5) == 0x000060, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_hit_5' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_actor_1) == 0x0000E8, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_actor_1' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_impact_1) == 0x0000F0, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_impact_1' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_water_3) == 0x000100, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_water_3' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_water_2) == 0x000108, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_water_2' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_water_1) == 0x000110, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_water_1' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_water) == 0x000118, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_water' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_activate) == 0x000120, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_activate' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_static) == 0x000121, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_static' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_frozen) == 0x000122, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_frozen' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_active) == 0x000123, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_active' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_actor) == 0x000128, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_actor' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_damage_3) == 0x000130, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_damage_3' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_hit_4) == 0x000134, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_hit_4' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_impact) == 0x0001BC, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_impact' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_skipSetting) == 0x0001C8, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_skipSetting' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_key_1) == 0x0001D0, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_key_1' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_player_11) == 0x0001E0, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_player_11' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_hit_3) == 0x0001E8, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_hit_3' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_damage_2) == 0x000270, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_damage_2' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_fuel) == 0x000274, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_fuel' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_player_10) == 0x000278, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_player_10' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_hit_2) == 0x000280, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_hit_2' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_index) == 0x000308, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_index' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_action) == 0x00030C, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_action' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_player_9) == 0x000310, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_player_9' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_player_8) == 0x000318, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_player_8' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_damage_1) == 0x000320, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_damage_1' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_location_1) == 0x000324, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_location_1' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_player_7) == 0x000330, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_player_7' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_player_6) == 0x000338, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_player_6' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_player_5) == 0x000340, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_player_5' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_wheelDelta) == 0x000348, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_wheelDelta' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_player_4) == 0x000350, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_player_4' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_mouse) == 0x000358, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_mouse' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_player_3) == 0x000360, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_player_3' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_key) == 0x000368, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_key' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_pressed) == 0x000380, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_pressed' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_temperature_1) == 0x000384, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_temperature_1' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_temperature) == 0x000388, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_temperature' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_speed) == 0x00038C, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_speed' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_player_2) == 0x000390, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_player_2' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_hit_1) == 0x000398, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_hit_1' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_name) == 0x000420, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_name' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_volume) == 0x000430, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_volume' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_player_1) == 0x000438, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_player_1' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_location) == 0x000440, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_location' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_damage) == 0x00044C, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_damage' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_clean) == 0x000450, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_clean' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_player) == 0x000458, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_player' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_hit) == 0x000460, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_hit' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_hook) == 0x0004E8, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_hook' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_Event_DeltaSeconds) == 0x0004F0, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x0004F8, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_GetDistanceTo_ReturnValue) == 0x000500, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_GetDistanceTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_GetPlayerController_ReturnValue) == 0x000508, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_FClamp_ReturnValue) == 0x000510, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_GetControlRotation_ReturnValue) == 0x000514, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_GetControlRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000520, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_GetPlayerCameraManager_ReturnValue_1) == 0x000528, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_GetPlayerCameraManager_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000530, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000534, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000540, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000544, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_FindLookAtRotation_ReturnValue) == 0x000550, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue) == 0x00055C, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_Conv_RotatorToVector_ReturnValue) == 0x000560, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_Conv_RotatorToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_Lerp_ReturnValue) == 0x00056C, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000570, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00057C, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_Normal_ReturnValue) == 0x000580, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_RLerp_ReturnValue) == 0x00058C, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_RLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_GetPlayerPawn_ReturnValue) == 0x000598, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_1) == 0x0005A0, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_MapRangeClamped_ReturnValue) == 0x0005A4, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_GetOverlappingActors_OverlappingActors) == 0x0005A8, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_GetOverlappingActors_OverlappingActors' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, Temp_int_Variable_2) == 0x0005B8, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_Array_Get_Item) == 0x0005C0, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0005C8, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_DynamicCast_AsInt_Objects) == 0x0005D0, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_DynamicCast_AsInt_Objects' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_DynamicCast_bSuccess) == 0x0005E0, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_DoesImplementInterface_ReturnValue) == 0x0005E1, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_DoesImplementInterface_ReturnValue' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_Array_Length_ReturnValue) == 0x0005E4, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_Less_IntInt_ReturnValue_2) == 0x0005E8, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_RandomFloatInRange_ReturnValue) == 0x0005EC, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_WasRecentlyRendered_ReturnValue) == 0x0005F0, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_WasRecentlyRendered_ReturnValue' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_Greater_IntInt_ReturnValue) == 0x0005F1, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_Subtract_IntInt_ReturnValue) == 0x0005F4, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, K2Node_CreateDelegate_OutputDelegate) == 0x0005F8, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x000608, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000618, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_MakeTransform_ReturnValue) == 0x000620, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000650, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_FinishSpawningActor_ReturnValue) == 0x000658, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000660, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_K2_GetComponentLocation_ReturnValue_2) == 0x000664, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_K2_GetComponentLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_MakeTransform_ReturnValue_1) == 0x000670, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_MakeTransform_ReturnValue_2) == 0x0006A0, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_MakeTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1) == 0x0006D0, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_2) == 0x0006D8, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_FinishSpawningActor_ReturnValue_1) == 0x0006E0, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_FinishSpawningActor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_FinishSpawningActor_ReturnValue_2) == 0x0006E8, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_FinishSpawningActor_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_Conv_IntToFloat_ReturnValue_2) == 0x0006F0, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_Conv_IntToFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_Divide_FloatFloat_ReturnValue_2) == 0x0006F4, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_Divide_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_2) == 0x0006F8, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_Lerp_ReturnValue_1) == 0x0006FC, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ExecuteUbergraph_greenfire, CallFunc_Conv_FloatToVector_ReturnValue_2) == 0x000700, "Member 'Greenfire_C_ExecuteUbergraph_greenfire::CallFunc_Conv_FloatToVector_ReturnValue_2' has a wrong offset!");

// Function greenfire.greenfire_C.skipRadial
// 0x0001 (0x0001 - 0x0000)
struct Greenfire_C_SkipRadial final
{
public:
	bool                                          Skip;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Greenfire_C_SkipRadial) == 0x000001, "Wrong alignment on Greenfire_C_SkipRadial");
static_assert(sizeof(Greenfire_C_SkipRadial) == 0x000001, "Wrong size on Greenfire_C_SkipRadial");
static_assert(offsetof(Greenfire_C_SkipRadial, Skip) == 0x000000, "Member 'Greenfire_C_SkipRadial::Skip' has a wrong offset!");

// Function greenfire.greenfire_C.toolboxFix
// 0x0010 (0x0010 - 0x0000)
struct Greenfire_C_ToolboxFix final
{
public:
	class AProp_toolbox_C*                        Toolbox;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Greenfire_C_ToolboxFix) == 0x000008, "Wrong alignment on Greenfire_C_ToolboxFix");
static_assert(sizeof(Greenfire_C_ToolboxFix) == 0x000010, "Wrong size on Greenfire_C_ToolboxFix");
static_assert(offsetof(Greenfire_C_ToolboxFix, Toolbox) == 0x000000, "Member 'Greenfire_C_ToolboxFix::Toolbox' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ToolboxFix, Return) == 0x000008, "Member 'Greenfire_C_ToolboxFix::Return' has a wrong offset!");

// Function greenfire.greenfire_C.GetKey
// 0x0010 (0x0010 - 0x0000)
struct Greenfire_C_GetKey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Greenfire_C_GetKey) == 0x000008, "Wrong alignment on Greenfire_C_GetKey");
static_assert(sizeof(Greenfire_C_GetKey) == 0x000010, "Wrong size on Greenfire_C_GetKey");
static_assert(offsetof(Greenfire_C_GetKey, Key) == 0x000000, "Member 'Greenfire_C_GetKey::Key' has a wrong offset!");

// Function greenfire.greenfire_C.canBeUsedHold
// 0x0001 (0x0001 - 0x0000)
struct Greenfire_C_CanBeUsedHold final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Greenfire_C_CanBeUsedHold) == 0x000001, "Wrong alignment on Greenfire_C_CanBeUsedHold");
static_assert(sizeof(Greenfire_C_CanBeUsedHold) == 0x000001, "Wrong size on Greenfire_C_CanBeUsedHold");
static_assert(offsetof(Greenfire_C_CanBeUsedHold, Return) == 0x000000, "Member 'Greenfire_C_CanBeUsedHold::Return' has a wrong offset!");

// Function greenfire.greenfire_C.processKeys
// 0x0001 (0x0001 - 0x0000)
struct Greenfire_C_ProcessKeys final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Greenfire_C_ProcessKeys) == 0x000001, "Wrong alignment on Greenfire_C_ProcessKeys");
static_assert(sizeof(Greenfire_C_ProcessKeys) == 0x000001, "Wrong size on Greenfire_C_ProcessKeys");
static_assert(offsetof(Greenfire_C_ProcessKeys, Return) == 0x000000, "Member 'Greenfire_C_ProcessKeys::Return' has a wrong offset!");

// Function greenfire.greenfire_C.getOnlyKey
// 0x0010 (0x0010 - 0x0000)
struct Greenfire_C_GetOnlyKey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Greenfire_C_GetOnlyKey) == 0x000008, "Wrong alignment on Greenfire_C_GetOnlyKey");
static_assert(sizeof(Greenfire_C_GetOnlyKey) == 0x000010, "Wrong size on Greenfire_C_GetOnlyKey");
static_assert(offsetof(Greenfire_C_GetOnlyKey, Key) == 0x000000, "Member 'Greenfire_C_GetOnlyKey::Key' has a wrong offset!");

// Function greenfire.greenfire_C.setPath
// 0x0018 (0x0018 - 0x0000)
struct Greenfire_C_SetPath final
{
public:
	TArray<struct FVector>                        Path;                                              // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Return;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Greenfire_C_SetPath) == 0x000008, "Wrong alignment on Greenfire_C_SetPath");
static_assert(sizeof(Greenfire_C_SetPath) == 0x000018, "Wrong size on Greenfire_C_SetPath");
static_assert(offsetof(Greenfire_C_SetPath, Path) == 0x000000, "Member 'Greenfire_C_SetPath::Path' has a wrong offset!");
static_assert(offsetof(Greenfire_C_SetPath, Return) == 0x000010, "Member 'Greenfire_C_SetPath::Return' has a wrong offset!");

// Function greenfire.greenfire_C.getActionOptions
// 0x0048 (0x0048 - 0x0000)
struct Greenfire_C_GetActionOptions final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Component;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         Options;                                           // 0x0018(0x0010)(Parm, OutParm)
	TArray<Enum_interactionActions>               Options_enum;                                      // 0x0028(0x0010)(Parm, OutParm)
	TArray<class FText>                           OptionsNamesOverlay;                               // 0x0038(0x0010)(Parm, OutParm)
};
static_assert(alignof(Greenfire_C_GetActionOptions) == 0x000008, "Wrong alignment on Greenfire_C_GetActionOptions");
static_assert(sizeof(Greenfire_C_GetActionOptions) == 0x000048, "Wrong size on Greenfire_C_GetActionOptions");
static_assert(offsetof(Greenfire_C_GetActionOptions, Player) == 0x000000, "Member 'Greenfire_C_GetActionOptions::Player' has a wrong offset!");
static_assert(offsetof(Greenfire_C_GetActionOptions, Component) == 0x000008, "Member 'Greenfire_C_GetActionOptions::Component' has a wrong offset!");
static_assert(offsetof(Greenfire_C_GetActionOptions, Actor) == 0x000010, "Member 'Greenfire_C_GetActionOptions::Actor' has a wrong offset!");
static_assert(offsetof(Greenfire_C_GetActionOptions, Options) == 0x000018, "Member 'Greenfire_C_GetActionOptions::Options' has a wrong offset!");
static_assert(offsetof(Greenfire_C_GetActionOptions, Options_enum) == 0x000028, "Member 'Greenfire_C_GetActionOptions::Options_enum' has a wrong offset!");
static_assert(offsetof(Greenfire_C_GetActionOptions, OptionsNamesOverlay) == 0x000038, "Member 'Greenfire_C_GetActionOptions::OptionsNamesOverlay' has a wrong offset!");

// Function greenfire.greenfire_C.gascanFuel
// 0x0010 (0x0010 - 0x0000)
struct Greenfire_C_GascanFuel final
{
public:
	class AProp_gascan_C*                         Gascan;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Fueled;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Greenfire_C_GascanFuel) == 0x000008, "Wrong alignment on Greenfire_C_GascanFuel");
static_assert(sizeof(Greenfire_C_GascanFuel) == 0x000010, "Wrong size on Greenfire_C_GascanFuel");
static_assert(offsetof(Greenfire_C_GascanFuel, Gascan) == 0x000000, "Member 'Greenfire_C_GascanFuel::Gascan' has a wrong offset!");
static_assert(offsetof(Greenfire_C_GascanFuel, Fueled) == 0x000008, "Member 'Greenfire_C_GascanFuel::Fueled' has a wrong offset!");

// Function greenfire.greenfire_C.ImpactDamage
// 0x00A8 (0x00A8 - 0x0000)
struct Greenfire_C_ImpactDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0004(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_3C46[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0090(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Impact;                                            // 0x0098(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Greenfire_C_ImpactDamage) == 0x000008, "Wrong alignment on Greenfire_C_ImpactDamage");
static_assert(sizeof(Greenfire_C_ImpactDamage) == 0x0000A8, "Wrong size on Greenfire_C_ImpactDamage");
static_assert(offsetof(Greenfire_C_ImpactDamage, Damage) == 0x000000, "Member 'Greenfire_C_ImpactDamage::Damage' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ImpactDamage, Hit) == 0x000004, "Member 'Greenfire_C_ImpactDamage::Hit' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ImpactDamage, Actor) == 0x000090, "Member 'Greenfire_C_ImpactDamage::Actor' has a wrong offset!");
static_assert(offsetof(Greenfire_C_ImpactDamage, Impact) == 0x000098, "Member 'Greenfire_C_ImpactDamage::Impact' has a wrong offset!");

// Function greenfire.greenfire_C.enterWater
// 0x0008 (0x0008 - 0x0000)
struct Greenfire_C_EnterWater final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Greenfire_C_EnterWater) == 0x000008, "Wrong alignment on Greenfire_C_EnterWater");
static_assert(sizeof(Greenfire_C_EnterWater) == 0x000008, "Wrong size on Greenfire_C_EnterWater");
static_assert(offsetof(Greenfire_C_EnterWater, Water) == 0x000000, "Member 'Greenfire_C_EnterWater::Water' has a wrong offset!");

// Function greenfire.greenfire_C.leaveWater
// 0x0008 (0x0008 - 0x0000)
struct Greenfire_C_LeaveWater final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Greenfire_C_LeaveWater) == 0x000008, "Wrong alignment on Greenfire_C_LeaveWater");
static_assert(sizeof(Greenfire_C_LeaveWater) == 0x000008, "Wrong size on Greenfire_C_LeaveWater");
static_assert(offsetof(Greenfire_C_LeaveWater, Water) == 0x000000, "Member 'Greenfire_C_LeaveWater::Water' has a wrong offset!");

// Function greenfire.greenfire_C.enterWaterOrigin
// 0x0008 (0x0008 - 0x0000)
struct Greenfire_C_EnterWaterOrigin final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Greenfire_C_EnterWaterOrigin) == 0x000008, "Wrong alignment on Greenfire_C_EnterWaterOrigin");
static_assert(sizeof(Greenfire_C_EnterWaterOrigin) == 0x000008, "Wrong size on Greenfire_C_EnterWaterOrigin");
static_assert(offsetof(Greenfire_C_EnterWaterOrigin, Water) == 0x000000, "Member 'Greenfire_C_EnterWaterOrigin::Water' has a wrong offset!");

// Function greenfire.greenfire_C.leaveWaterOrigin
// 0x0008 (0x0008 - 0x0000)
struct Greenfire_C_LeaveWaterOrigin final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Greenfire_C_LeaveWaterOrigin) == 0x000008, "Wrong alignment on Greenfire_C_LeaveWaterOrigin");
static_assert(sizeof(Greenfire_C_LeaveWaterOrigin) == 0x000008, "Wrong size on Greenfire_C_LeaveWaterOrigin");
static_assert(offsetof(Greenfire_C_LeaveWaterOrigin, Water) == 0x000000, "Member 'Greenfire_C_LeaveWaterOrigin::Water' has a wrong offset!");

// Function greenfire.greenfire_C.virus
// 0x0001 (0x0001 - 0x0000)
struct Greenfire_C_Virus final
{
public:
	bool                                          Activate;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Greenfire_C_Virus) == 0x000001, "Wrong alignment on Greenfire_C_Virus");
static_assert(sizeof(Greenfire_C_Virus) == 0x000001, "Wrong size on Greenfire_C_Virus");
static_assert(offsetof(Greenfire_C_Virus, Activate) == 0x000000, "Member 'Greenfire_C_Virus::Activate' has a wrong offset!");

// Function greenfire.greenfire_C.setPropProps
// 0x0003 (0x0003 - 0x0000)
struct Greenfire_C_SetPropProps final
{
public:
	bool                                          Static;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Frozen;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Active;                                            // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Greenfire_C_SetPropProps) == 0x000001, "Wrong alignment on Greenfire_C_SetPropProps");
static_assert(sizeof(Greenfire_C_SetPropProps) == 0x000003, "Wrong size on Greenfire_C_SetPropProps");
static_assert(offsetof(Greenfire_C_SetPropProps, Static) == 0x000000, "Member 'Greenfire_C_SetPropProps::Static' has a wrong offset!");
static_assert(offsetof(Greenfire_C_SetPropProps, Frozen) == 0x000001, "Member 'Greenfire_C_SetPropProps::Frozen' has a wrong offset!");
static_assert(offsetof(Greenfire_C_SetPropProps, Active) == 0x000002, "Member 'Greenfire_C_SetPropProps::Active' has a wrong offset!");

// Function greenfire.greenfire_C.addDamage
// 0x00A8 (0x00A8 - 0x0000)
struct Greenfire_C_AddDamage final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x000C(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                Impact;                                            // 0x0094(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipSetting;                                       // 0x00A0(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Greenfire_C_AddDamage) == 0x000008, "Wrong alignment on Greenfire_C_AddDamage");
static_assert(sizeof(Greenfire_C_AddDamage) == 0x0000A8, "Wrong size on Greenfire_C_AddDamage");
static_assert(offsetof(Greenfire_C_AddDamage, Actor) == 0x000000, "Member 'Greenfire_C_AddDamage::Actor' has a wrong offset!");
static_assert(offsetof(Greenfire_C_AddDamage, Damage) == 0x000008, "Member 'Greenfire_C_AddDamage::Damage' has a wrong offset!");
static_assert(offsetof(Greenfire_C_AddDamage, Hit) == 0x00000C, "Member 'Greenfire_C_AddDamage::Hit' has a wrong offset!");
static_assert(offsetof(Greenfire_C_AddDamage, Impact) == 0x000094, "Member 'Greenfire_C_AddDamage::Impact' has a wrong offset!");
static_assert(offsetof(Greenfire_C_AddDamage, SkipSetting) == 0x0000A0, "Member 'Greenfire_C_AddDamage::SkipSetting' has a wrong offset!");

// Function greenfire.greenfire_C.setKey
// 0x0010 (0x0010 - 0x0000)
struct Greenfire_C_SetKey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Greenfire_C_SetKey) == 0x000008, "Wrong alignment on Greenfire_C_SetKey");
static_assert(sizeof(Greenfire_C_SetKey) == 0x000010, "Wrong size on Greenfire_C_SetKey");
static_assert(offsetof(Greenfire_C_SetKey, Key) == 0x000000, "Member 'Greenfire_C_SetKey::Key' has a wrong offset!");

}

