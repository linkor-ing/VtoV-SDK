#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FiretankCorpse

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Prop_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass firetankCorpse.firetankCorpse_C
// 0x0100 (0x0478 - 0x0378)
class AFiretankCorpse_C final : public AProp_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_FiretankCorpse_C;                   // 0x0378(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UArrowComponent*                        Forward;                                           // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    ThreadsVelocityPoint_R;                            // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    ThreadsVelocityPoint_L;                            // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Thread_R;                                          // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Thread_L;                                          // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class UPhysicsConstraintComponent*>    Constraints_right;                                 // 0x03B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UPhysicsConstraintComponent*>    Constraints_left;                                  // 0x03C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UStaticMeshComponent*>           Wheels_right;                                      // 0x03D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UStaticMeshComponent*>           Wheels_left;                                       // 0x03E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	float                                         Threads_R;                                         // 0x03F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Threads_L;                                         // 0x03F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Dynmat_thread_R;                                   // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Dynmat_thread_L;                                   // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFiretank_thread_Skeleton_AnimBlueprint_C* Anim_thread_R;                                     // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFiretank_thread_Skeleton_AnimBlueprint_C* Anim_thread_L;                                     // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UPhysicsConstraintComponent*>    ConstraintsSus_right;                              // 0x0418(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UPhysicsConstraintComponent*>    ConstraintsSus_left;                               // 0x0428(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FVector                                ThreadsOffset;                                     // 0x0438(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_444[0x4];                                      // 0x0444(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPhysicsConstraintComponent*>    AllSus;                                            // 0x0448(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UPhysicsConstraintComponent*>    AllWheels;                                         // 0x0458(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class FName>                           Gibs;                                              // 0x0468(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_firetankCorpse(int32 EntryPoint);
	void Explode();
	void ReceiveTick(float DeltaSeconds);
	void ConstructWheels();
	void UpdThreads();
	void SetThreadsOffset();
	void Exp(const struct FTransform& SpawnTransform);
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"firetankCorpse_C">();
	}
	static class AFiretankCorpse_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFiretankCorpse_C>();
	}
};
static_assert(alignof(AFiretankCorpse_C) == 0x000008, "Wrong alignment on AFiretankCorpse_C");
static_assert(sizeof(AFiretankCorpse_C) == 0x000478, "Wrong size on AFiretankCorpse_C");
static_assert(offsetof(AFiretankCorpse_C, UberGraphFrame_FiretankCorpse_C) == 0x000378, "Member 'AFiretankCorpse_C::UberGraphFrame_FiretankCorpse_C' has a wrong offset!");
static_assert(offsetof(AFiretankCorpse_C, Forward) == 0x000380, "Member 'AFiretankCorpse_C::Forward' has a wrong offset!");
static_assert(offsetof(AFiretankCorpse_C, ThreadsVelocityPoint_R) == 0x000388, "Member 'AFiretankCorpse_C::ThreadsVelocityPoint_R' has a wrong offset!");
static_assert(offsetof(AFiretankCorpse_C, ThreadsVelocityPoint_L) == 0x000390, "Member 'AFiretankCorpse_C::ThreadsVelocityPoint_L' has a wrong offset!");
static_assert(offsetof(AFiretankCorpse_C, Box) == 0x000398, "Member 'AFiretankCorpse_C::Box' has a wrong offset!");
static_assert(offsetof(AFiretankCorpse_C, Thread_R) == 0x0003A0, "Member 'AFiretankCorpse_C::Thread_R' has a wrong offset!");
static_assert(offsetof(AFiretankCorpse_C, Thread_L) == 0x0003A8, "Member 'AFiretankCorpse_C::Thread_L' has a wrong offset!");
static_assert(offsetof(AFiretankCorpse_C, Constraints_right) == 0x0003B0, "Member 'AFiretankCorpse_C::Constraints_right' has a wrong offset!");
static_assert(offsetof(AFiretankCorpse_C, Constraints_left) == 0x0003C0, "Member 'AFiretankCorpse_C::Constraints_left' has a wrong offset!");
static_assert(offsetof(AFiretankCorpse_C, Wheels_right) == 0x0003D0, "Member 'AFiretankCorpse_C::Wheels_right' has a wrong offset!");
static_assert(offsetof(AFiretankCorpse_C, Wheels_left) == 0x0003E0, "Member 'AFiretankCorpse_C::Wheels_left' has a wrong offset!");
static_assert(offsetof(AFiretankCorpse_C, Threads_R) == 0x0003F0, "Member 'AFiretankCorpse_C::Threads_R' has a wrong offset!");
static_assert(offsetof(AFiretankCorpse_C, Threads_L) == 0x0003F4, "Member 'AFiretankCorpse_C::Threads_L' has a wrong offset!");
static_assert(offsetof(AFiretankCorpse_C, Dynmat_thread_R) == 0x0003F8, "Member 'AFiretankCorpse_C::Dynmat_thread_R' has a wrong offset!");
static_assert(offsetof(AFiretankCorpse_C, Dynmat_thread_L) == 0x000400, "Member 'AFiretankCorpse_C::Dynmat_thread_L' has a wrong offset!");
static_assert(offsetof(AFiretankCorpse_C, Anim_thread_R) == 0x000408, "Member 'AFiretankCorpse_C::Anim_thread_R' has a wrong offset!");
static_assert(offsetof(AFiretankCorpse_C, Anim_thread_L) == 0x000410, "Member 'AFiretankCorpse_C::Anim_thread_L' has a wrong offset!");
static_assert(offsetof(AFiretankCorpse_C, ConstraintsSus_right) == 0x000418, "Member 'AFiretankCorpse_C::ConstraintsSus_right' has a wrong offset!");
static_assert(offsetof(AFiretankCorpse_C, ConstraintsSus_left) == 0x000428, "Member 'AFiretankCorpse_C::ConstraintsSus_left' has a wrong offset!");
static_assert(offsetof(AFiretankCorpse_C, ThreadsOffset) == 0x000438, "Member 'AFiretankCorpse_C::ThreadsOffset' has a wrong offset!");
static_assert(offsetof(AFiretankCorpse_C, AllSus) == 0x000448, "Member 'AFiretankCorpse_C::AllSus' has a wrong offset!");
static_assert(offsetof(AFiretankCorpse_C, AllWheels) == 0x000458, "Member 'AFiretankCorpse_C::AllWheels' has a wrong offset!");
static_assert(offsetof(AFiretankCorpse_C, Gibs) == 0x000468, "Member 'AFiretankCorpse_C::Gibs' has a wrong offset!");

}

