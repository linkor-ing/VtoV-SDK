#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Goat

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function goat.goat_C.isButtonUsed
// 0x0001 (0x0001 - 0x0000)
struct Goat_C_IsButtonUsed final
{
public:
	bool                                          Failed;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Goat_C_IsButtonUsed) == 0x000001, "Wrong alignment on Goat_C_IsButtonUsed");
static_assert(sizeof(Goat_C_IsButtonUsed) == 0x000001, "Wrong size on Goat_C_IsButtonUsed");
static_assert(offsetof(Goat_C_IsButtonUsed, Failed) == 0x000000, "Member 'Goat_C_IsButtonUsed::Failed' has a wrong offset!");

// Function goat.goat_C.lookAt
// 0x0170 (0x0170 - 0x0000)
struct Goat_C_LookAt final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          Return;                                            // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Text;                                              // 0x0098(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    boundObjectReplace;                                // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Number;                                            // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_MakeLiteralText_ReturnValue;              // 0x00B8(0x0018)()
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D2[0x2];                                       // 0x00D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0120(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0158(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Goat_C_LookAt) == 0x000008, "Wrong alignment on Goat_C_LookAt");
static_assert(sizeof(Goat_C_LookAt) == 0x000170, "Wrong size on Goat_C_LookAt");
static_assert(offsetof(Goat_C_LookAt, Player) == 0x000000, "Member 'Goat_C_LookAt::Player' has a wrong offset!");
static_assert(offsetof(Goat_C_LookAt, Hit) == 0x000008, "Member 'Goat_C_LookAt::Hit' has a wrong offset!");
static_assert(offsetof(Goat_C_LookAt, Return) == 0x000090, "Member 'Goat_C_LookAt::Return' has a wrong offset!");
static_assert(offsetof(Goat_C_LookAt, Text) == 0x000098, "Member 'Goat_C_LookAt::Text' has a wrong offset!");
static_assert(offsetof(Goat_C_LookAt, boundObjectReplace) == 0x0000A8, "Member 'Goat_C_LookAt::boundObjectReplace' has a wrong offset!");
static_assert(offsetof(Goat_C_LookAt, Number) == 0x0000B0, "Member 'Goat_C_LookAt::Number' has a wrong offset!");
static_assert(offsetof(Goat_C_LookAt, CallFunc_MakeLiteralText_ReturnValue) == 0x0000B8, "Member 'Goat_C_LookAt::CallFunc_MakeLiteralText_ReturnValue' has a wrong offset!");
static_assert(offsetof(Goat_C_LookAt, CallFunc_BreakHitResult_bBlockingHit) == 0x0000D0, "Member 'Goat_C_LookAt::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(Goat_C_LookAt, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000D1, "Member 'Goat_C_LookAt::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(Goat_C_LookAt, CallFunc_BreakHitResult_Time) == 0x0000D4, "Member 'Goat_C_LookAt::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(Goat_C_LookAt, CallFunc_BreakHitResult_Distance) == 0x0000D8, "Member 'Goat_C_LookAt::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(Goat_C_LookAt, CallFunc_BreakHitResult_Location) == 0x0000DC, "Member 'Goat_C_LookAt::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(Goat_C_LookAt, CallFunc_BreakHitResult_ImpactPoint) == 0x0000E8, "Member 'Goat_C_LookAt::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(Goat_C_LookAt, CallFunc_BreakHitResult_Normal) == 0x0000F4, "Member 'Goat_C_LookAt::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(Goat_C_LookAt, CallFunc_BreakHitResult_ImpactNormal) == 0x000100, "Member 'Goat_C_LookAt::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(Goat_C_LookAt, CallFunc_BreakHitResult_PhysMat) == 0x000110, "Member 'Goat_C_LookAt::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(Goat_C_LookAt, CallFunc_BreakHitResult_HitActor) == 0x000118, "Member 'Goat_C_LookAt::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(Goat_C_LookAt, CallFunc_BreakHitResult_HitComponent) == 0x000120, "Member 'Goat_C_LookAt::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(Goat_C_LookAt, CallFunc_BreakHitResult_HitBoneName) == 0x000128, "Member 'Goat_C_LookAt::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(Goat_C_LookAt, CallFunc_BreakHitResult_HitItem) == 0x000130, "Member 'Goat_C_LookAt::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(Goat_C_LookAt, CallFunc_BreakHitResult_ElementIndex) == 0x000134, "Member 'Goat_C_LookAt::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(Goat_C_LookAt, CallFunc_BreakHitResult_FaceIndex) == 0x000138, "Member 'Goat_C_LookAt::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(Goat_C_LookAt, CallFunc_BreakHitResult_TraceStart) == 0x00013C, "Member 'Goat_C_LookAt::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(Goat_C_LookAt, CallFunc_BreakHitResult_TraceEnd) == 0x000148, "Member 'Goat_C_LookAt::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(Goat_C_LookAt, CallFunc_Conv_TextToString_ReturnValue) == 0x000158, "Member 'Goat_C_LookAt::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(Goat_C_LookAt, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000168, "Member 'Goat_C_LookAt::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function goat.goat_C.noRespawn
// 0x0002 (0x0002 - 0x0000)
struct Goat_C_NoRespawn final
{
public:
	bool                                          Param_NoRespawn;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Goat_C_NoRespawn) == 0x000001, "Wrong alignment on Goat_C_NoRespawn");
static_assert(sizeof(Goat_C_NoRespawn) == 0x000002, "Wrong size on Goat_C_NoRespawn");
static_assert(offsetof(Goat_C_NoRespawn, Param_NoRespawn) == 0x000000, "Member 'Goat_C_NoRespawn::Param_NoRespawn' has a wrong offset!");
static_assert(offsetof(Goat_C_NoRespawn, Return) == 0x000001, "Member 'Goat_C_NoRespawn::Return' has a wrong offset!");

// Function goat.goat_C.canPickup
// 0x0001 (0x0001 - 0x0000)
struct Goat_C_CanPickup final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Goat_C_CanPickup) == 0x000001, "Wrong alignment on Goat_C_CanPickup");
static_assert(sizeof(Goat_C_CanPickup) == 0x000001, "Wrong size on Goat_C_CanPickup");
static_assert(offsetof(Goat_C_CanPickup, Return) == 0x000000, "Member 'Goat_C_CanPickup::Return' has a wrong offset!");

// Function goat.goat_C.asProp
// 0x0008 (0x0008 - 0x0000)
struct Goat_C_AsProp final
{
public:
	class AProp_C*                                Return;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Goat_C_AsProp) == 0x000008, "Wrong alignment on Goat_C_AsProp");
static_assert(sizeof(Goat_C_AsProp) == 0x000008, "Wrong size on Goat_C_AsProp");
static_assert(offsetof(Goat_C_AsProp, Return) == 0x000000, "Member 'Goat_C_AsProp::Return' has a wrong offset!");

// Function goat.goat_C.canBePutInContainer
// 0x0001 (0x0001 - 0x0000)
struct Goat_C_CanBePutInContainer final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Goat_C_CanBePutInContainer) == 0x000001, "Wrong alignment on Goat_C_CanBePutInContainer");
static_assert(sizeof(Goat_C_CanBePutInContainer) == 0x000001, "Wrong size on Goat_C_CanBePutInContainer");
static_assert(offsetof(Goat_C_CanBePutInContainer, Return) == 0x000000, "Member 'Goat_C_CanBePutInContainer::Return' has a wrong offset!");

// Function goat.goat_C.landedOn
// 0x0010 (0x0010 - 0x0000)
struct Goat_C_LandedOn final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreFallDamage;                                  // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Goat_C_LandedOn) == 0x000008, "Wrong alignment on Goat_C_LandedOn");
static_assert(sizeof(Goat_C_LandedOn) == 0x000010, "Wrong size on Goat_C_LandedOn");
static_assert(offsetof(Goat_C_LandedOn, Player) == 0x000000, "Member 'Goat_C_LandedOn::Player' has a wrong offset!");
static_assert(offsetof(Goat_C_LandedOn, IgnoreFallDamage) == 0x000008, "Member 'Goat_C_LandedOn::IgnoreFallDamage' has a wrong offset!");

// Function goat.goat_C.lookPlace
// 0x0230 (0x0230 - 0x0000)
struct Goat_C_LookPlace final
{
public:
	struct FVector                                Rotated;                                           // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Loc;                                               // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RandomBoolWithWeight_ReturnValue;         // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_WasRecentlyRendered_ReturnValue;          // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0030(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RandomPointInBoundingBox_ReturnValue;     // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      CallFunc_obj_statDyn_obj;                          // 0x0058(0x0010)(ReferenceParm)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x0068(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F3[0x1];                                       // 0x00F3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0114(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0140(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x015C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0168(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0174(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_175[0x3];                                      // 0x0175(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x0178(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue_1;         // 0x0184(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotationFromAxes_ReturnValue;         // 0x0194(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A1[0x3];                                      // 0x01A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult; // 0x01A4(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Goat_C_LookPlace) == 0x000008, "Wrong alignment on Goat_C_LookPlace");
static_assert(sizeof(Goat_C_LookPlace) == 0x000230, "Wrong size on Goat_C_LookPlace");
static_assert(offsetof(Goat_C_LookPlace, Rotated) == 0x000000, "Member 'Goat_C_LookPlace::Rotated' has a wrong offset!");
static_assert(offsetof(Goat_C_LookPlace, Loc) == 0x00000C, "Member 'Goat_C_LookPlace::Loc' has a wrong offset!");
static_assert(offsetof(Goat_C_LookPlace, CallFunc_RandomBoolWithWeight_ReturnValue) == 0x000018, "Member 'Goat_C_LookPlace::CallFunc_RandomBoolWithWeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(Goat_C_LookPlace, CallFunc_WasRecentlyRendered_ReturnValue) == 0x000019, "Member 'Goat_C_LookPlace::CallFunc_WasRecentlyRendered_ReturnValue' has a wrong offset!");
static_assert(offsetof(Goat_C_LookPlace, CallFunc_RandomFloatInRange_ReturnValue) == 0x00001C, "Member 'Goat_C_LookPlace::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(Goat_C_LookPlace, CallFunc_RotateAngleAxis_ReturnValue) == 0x000020, "Member 'Goat_C_LookPlace::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(Goat_C_LookPlace, Temp_object_Variable) == 0x000030, "Member 'Goat_C_LookPlace::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(Goat_C_LookPlace, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000040, "Member 'Goat_C_LookPlace::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Goat_C_LookPlace, CallFunc_RandomPointInBoundingBox_ReturnValue) == 0x00004C, "Member 'Goat_C_LookPlace::CallFunc_RandomPointInBoundingBox_ReturnValue' has a wrong offset!");
static_assert(offsetof(Goat_C_LookPlace, CallFunc_obj_statDyn_obj) == 0x000058, "Member 'Goat_C_LookPlace::CallFunc_obj_statDyn_obj' has a wrong offset!");
static_assert(offsetof(Goat_C_LookPlace, CallFunc_LineTraceSingleForObjects_OutHit) == 0x000068, "Member 'Goat_C_LookPlace::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(Goat_C_LookPlace, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x0000F0, "Member 'Goat_C_LookPlace::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(Goat_C_LookPlace, CallFunc_BreakHitResult_bBlockingHit) == 0x0000F1, "Member 'Goat_C_LookPlace::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(Goat_C_LookPlace, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000F2, "Member 'Goat_C_LookPlace::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(Goat_C_LookPlace, CallFunc_BreakHitResult_Time) == 0x0000F4, "Member 'Goat_C_LookPlace::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(Goat_C_LookPlace, CallFunc_BreakHitResult_Distance) == 0x0000F8, "Member 'Goat_C_LookPlace::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(Goat_C_LookPlace, CallFunc_BreakHitResult_Location) == 0x0000FC, "Member 'Goat_C_LookPlace::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(Goat_C_LookPlace, CallFunc_BreakHitResult_ImpactPoint) == 0x000108, "Member 'Goat_C_LookPlace::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(Goat_C_LookPlace, CallFunc_BreakHitResult_Normal) == 0x000114, "Member 'Goat_C_LookPlace::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(Goat_C_LookPlace, CallFunc_BreakHitResult_ImpactNormal) == 0x000120, "Member 'Goat_C_LookPlace::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(Goat_C_LookPlace, CallFunc_BreakHitResult_PhysMat) == 0x000130, "Member 'Goat_C_LookPlace::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(Goat_C_LookPlace, CallFunc_BreakHitResult_HitActor) == 0x000138, "Member 'Goat_C_LookPlace::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(Goat_C_LookPlace, CallFunc_BreakHitResult_HitComponent) == 0x000140, "Member 'Goat_C_LookPlace::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(Goat_C_LookPlace, CallFunc_BreakHitResult_HitBoneName) == 0x000148, "Member 'Goat_C_LookPlace::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(Goat_C_LookPlace, CallFunc_BreakHitResult_HitItem) == 0x000150, "Member 'Goat_C_LookPlace::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(Goat_C_LookPlace, CallFunc_BreakHitResult_ElementIndex) == 0x000154, "Member 'Goat_C_LookPlace::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(Goat_C_LookPlace, CallFunc_BreakHitResult_FaceIndex) == 0x000158, "Member 'Goat_C_LookPlace::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(Goat_C_LookPlace, CallFunc_BreakHitResult_TraceStart) == 0x00015C, "Member 'Goat_C_LookPlace::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(Goat_C_LookPlace, CallFunc_BreakHitResult_TraceEnd) == 0x000168, "Member 'Goat_C_LookPlace::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(Goat_C_LookPlace, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000174, "Member 'Goat_C_LookPlace::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(Goat_C_LookPlace, CallFunc_Cross_VectorVector_ReturnValue) == 0x000178, "Member 'Goat_C_LookPlace::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Goat_C_LookPlace, CallFunc_Cross_VectorVector_ReturnValue_1) == 0x000184, "Member 'Goat_C_LookPlace::CallFunc_Cross_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Goat_C_LookPlace, CallFunc_Dot_VectorVector_ReturnValue) == 0x000190, "Member 'Goat_C_LookPlace::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Goat_C_LookPlace, CallFunc_MakeRotationFromAxes_ReturnValue) == 0x000194, "Member 'Goat_C_LookPlace::CallFunc_MakeRotationFromAxes_ReturnValue' has a wrong offset!");
static_assert(offsetof(Goat_C_LookPlace, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0001A0, "Member 'Goat_C_LookPlace::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Goat_C_LookPlace, CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult) == 0x0001A4, "Member 'Goat_C_LookPlace::CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult' has a wrong offset!");

// Function goat.goat_C.player_use
// 0x0090 (0x0090 - 0x0000)
struct Goat_C_Player_use final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Goat_C_Player_use) == 0x000008, "Wrong alignment on Goat_C_Player_use");
static_assert(sizeof(Goat_C_Player_use) == 0x000090, "Wrong size on Goat_C_Player_use");
static_assert(offsetof(Goat_C_Player_use, Player) == 0x000000, "Member 'Goat_C_Player_use::Player' has a wrong offset!");
static_assert(offsetof(Goat_C_Player_use, Hit) == 0x000008, "Member 'Goat_C_Player_use::Hit' has a wrong offset!");

// Function goat.goat_C.kicked
// 0x0001 (0x0001 - 0x0000)
struct Goat_C_Kicked final
{
public:
	bool                                          Kick;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Goat_C_Kicked) == 0x000001, "Wrong alignment on Goat_C_Kicked");
static_assert(sizeof(Goat_C_Kicked) == 0x000001, "Wrong size on Goat_C_Kicked");
static_assert(offsetof(Goat_C_Kicked, Kick) == 0x000000, "Member 'Goat_C_Kicked::Kick' has a wrong offset!");

// Function goat.goat_C.sendName
// 0x0008 (0x0008 - 0x0000)
struct Goat_C_SendName final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Goat_C_SendName) == 0x000004, "Wrong alignment on Goat_C_SendName");
static_assert(sizeof(Goat_C_SendName) == 0x000008, "Wrong size on Goat_C_SendName");
static_assert(offsetof(Goat_C_SendName, Param_Name) == 0x000000, "Member 'Goat_C_SendName::Param_Name' has a wrong offset!");

// Function goat.goat_C.thrown
// 0x0008 (0x0008 - 0x0000)
struct Goat_C_Thrown final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Goat_C_Thrown) == 0x000008, "Wrong alignment on Goat_C_Thrown");
static_assert(sizeof(Goat_C_Thrown) == 0x000008, "Wrong size on Goat_C_Thrown");
static_assert(offsetof(Goat_C_Thrown, Player) == 0x000000, "Member 'Goat_C_Thrown::Player' has a wrong offset!");

// Function goat.goat_C.damageByPlayer
// 0x0098 (0x0098 - 0x0000)
struct Goat_C_DamageByPlayer final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         Damage;                                            // 0x0090(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Goat_C_DamageByPlayer) == 0x000008, "Wrong alignment on Goat_C_DamageByPlayer");
static_assert(sizeof(Goat_C_DamageByPlayer) == 0x000098, "Wrong size on Goat_C_DamageByPlayer");
static_assert(offsetof(Goat_C_DamageByPlayer, Player) == 0x000000, "Member 'Goat_C_DamageByPlayer::Player' has a wrong offset!");
static_assert(offsetof(Goat_C_DamageByPlayer, Hit) == 0x000008, "Member 'Goat_C_DamageByPlayer::Hit' has a wrong offset!");
static_assert(offsetof(Goat_C_DamageByPlayer, Damage) == 0x000090, "Member 'Goat_C_DamageByPlayer::Damage' has a wrong offset!");

// Function goat.goat_C.playerUnequip
// 0x0008 (0x0008 - 0x0000)
struct Goat_C_PlayerUnequip final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Goat_C_PlayerUnequip) == 0x000008, "Wrong alignment on Goat_C_PlayerUnequip");
static_assert(sizeof(Goat_C_PlayerUnequip) == 0x000008, "Wrong size on Goat_C_PlayerUnequip");
static_assert(offsetof(Goat_C_PlayerUnequip, Player) == 0x000000, "Member 'Goat_C_PlayerUnequip::Player' has a wrong offset!");

// Function goat.goat_C.playerHold
// 0x0008 (0x0008 - 0x0000)
struct Goat_C_PlayerHold final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Goat_C_PlayerHold) == 0x000008, "Wrong alignment on Goat_C_PlayerHold");
static_assert(sizeof(Goat_C_PlayerHold) == 0x000008, "Wrong size on Goat_C_PlayerHold");
static_assert(offsetof(Goat_C_PlayerHold, Player) == 0x000000, "Member 'Goat_C_PlayerHold::Player' has a wrong offset!");

// Function goat.goat_C.playerR
// 0x0008 (0x0008 - 0x0000)
struct Goat_C_PlayerR final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Goat_C_PlayerR) == 0x000008, "Wrong alignment on Goat_C_PlayerR");
static_assert(sizeof(Goat_C_PlayerR) == 0x000008, "Wrong size on Goat_C_PlayerR");
static_assert(offsetof(Goat_C_PlayerR, Player) == 0x000000, "Member 'Goat_C_PlayerR::Player' has a wrong offset!");

// Function goat.goat_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct Goat_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Goat_C_ReceiveTick) == 0x000004, "Wrong alignment on Goat_C_ReceiveTick");
static_assert(sizeof(Goat_C_ReceiveTick) == 0x000004, "Wrong size on Goat_C_ReceiveTick");
static_assert(offsetof(Goat_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'Goat_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function goat.goat_C.BndEvt__goat_nosave1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct Goat_C_BndEvt__goat_nosave1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Goat_C_BndEvt__goat_nosave1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on Goat_C_BndEvt__goat_nosave1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(Goat_C_BndEvt__goat_nosave1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on Goat_C_BndEvt__goat_nosave1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(Goat_C_BndEvt__goat_nosave1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'Goat_C_BndEvt__goat_nosave1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Goat_C_BndEvt__goat_nosave1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'Goat_C_BndEvt__goat_nosave1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(Goat_C_BndEvt__goat_nosave1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'Goat_C_BndEvt__goat_nosave1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(Goat_C_BndEvt__goat_nosave1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'Goat_C_BndEvt__goat_nosave1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Goat_C_BndEvt__goat_nosave1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'Goat_C_BndEvt__goat_nosave1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(Goat_C_BndEvt__goat_nosave1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'Goat_C_BndEvt__goat_nosave1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function goat.goat_C.BndEvt__goat_nosave1_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct Goat_C_BndEvt__goat_nosave1_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Goat_C_BndEvt__goat_nosave1_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on Goat_C_BndEvt__goat_nosave1_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(Goat_C_BndEvt__goat_nosave1_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on Goat_C_BndEvt__goat_nosave1_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(Goat_C_BndEvt__goat_nosave1_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'Goat_C_BndEvt__goat_nosave1_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Goat_C_BndEvt__goat_nosave1_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'Goat_C_BndEvt__goat_nosave1_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(Goat_C_BndEvt__goat_nosave1_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'Goat_C_BndEvt__goat_nosave1_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(Goat_C_BndEvt__goat_nosave1_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'Goat_C_BndEvt__goat_nosave1_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function goat.goat_C.BndEvt__goat_nosave2_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct Goat_C_BndEvt__goat_nosave2_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Goat_C_BndEvt__goat_nosave2_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on Goat_C_BndEvt__goat_nosave2_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(Goat_C_BndEvt__goat_nosave2_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on Goat_C_BndEvt__goat_nosave2_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(Goat_C_BndEvt__goat_nosave2_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'Goat_C_BndEvt__goat_nosave2_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Goat_C_BndEvt__goat_nosave2_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'Goat_C_BndEvt__goat_nosave2_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(Goat_C_BndEvt__goat_nosave2_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'Goat_C_BndEvt__goat_nosave2_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(Goat_C_BndEvt__goat_nosave2_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'Goat_C_BndEvt__goat_nosave2_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Goat_C_BndEvt__goat_nosave2_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'Goat_C_BndEvt__goat_nosave2_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(Goat_C_BndEvt__goat_nosave2_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'Goat_C_BndEvt__goat_nosave2_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function goat.goat_C.BndEvt__goat_nosave2_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct Goat_C_BndEvt__goat_nosave2_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Goat_C_BndEvt__goat_nosave2_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on Goat_C_BndEvt__goat_nosave2_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(Goat_C_BndEvt__goat_nosave2_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on Goat_C_BndEvt__goat_nosave2_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(Goat_C_BndEvt__goat_nosave2_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'Goat_C_BndEvt__goat_nosave2_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Goat_C_BndEvt__goat_nosave2_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'Goat_C_BndEvt__goat_nosave2_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(Goat_C_BndEvt__goat_nosave2_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'Goat_C_BndEvt__goat_nosave2_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(Goat_C_BndEvt__goat_nosave2_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'Goat_C_BndEvt__goat_nosave2_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function goat.goat_C.ExecuteUbergraph_goat
// 0x0350 (0x0350 - 0x0000)
struct Goat_C_ExecuteUbergraph_goat final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_5;                             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_1;                                // 0x0010(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          K2Node_Event_kick;                                 // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_name;                                 // 0x009C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_4;                             // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_3;                             // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit;                                  // 0x00B8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         K2Node_Event_damage;                               // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_2;                             // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_1;                             // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player;                               // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode;          // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_3;  // 0x0178(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_3;           // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_3;            // 0x0188(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_3;       // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep_1;           // 0x0194(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_195[0x3];                                      // 0x0195(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult_1;          // 0x0198(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_221[0x7];                                      // 0x0221(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_DynamicCast_AsMain_Player;                  // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_231[0x7];                                      // 0x0231(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_2;  // 0x0238(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_2;           // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_2;            // 0x0248(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_2;       // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_254[0x4];                                      // 0x0254(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_DynamicCast_AsMain_Player_1;                // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0260(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_261[0x7];                                      // 0x0261(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_1;  // 0x0268(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_1;           // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_1;            // 0x0278(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_1;       // 0x0280(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x0284(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_285[0x3];                                      // 0x0285(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0288(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0310(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0318(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0320(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0328(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32C[0x4];                                      // 0x032C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_DynamicCast_AsMain_Player_2;                // 0x0330(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0338(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_339[0x7];                                      // 0x0339(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_DynamicCast_AsMain_Player_3;                // 0x0340(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0348(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Goat_C_ExecuteUbergraph_goat) == 0x000008, "Wrong alignment on Goat_C_ExecuteUbergraph_goat");
static_assert(sizeof(Goat_C_ExecuteUbergraph_goat) == 0x000350, "Wrong size on Goat_C_ExecuteUbergraph_goat");
static_assert(offsetof(Goat_C_ExecuteUbergraph_goat, EntryPoint) == 0x000000, "Member 'Goat_C_ExecuteUbergraph_goat::EntryPoint' has a wrong offset!");
static_assert(offsetof(Goat_C_ExecuteUbergraph_goat, K2Node_Event_player_5) == 0x000008, "Member 'Goat_C_ExecuteUbergraph_goat::K2Node_Event_player_5' has a wrong offset!");
static_assert(offsetof(Goat_C_ExecuteUbergraph_goat, K2Node_Event_hit_1) == 0x000010, "Member 'Goat_C_ExecuteUbergraph_goat::K2Node_Event_hit_1' has a wrong offset!");
static_assert(offsetof(Goat_C_ExecuteUbergraph_goat, K2Node_Event_kick) == 0x000098, "Member 'Goat_C_ExecuteUbergraph_goat::K2Node_Event_kick' has a wrong offset!");
static_assert(offsetof(Goat_C_ExecuteUbergraph_goat, K2Node_Event_name) == 0x00009C, "Member 'Goat_C_ExecuteUbergraph_goat::K2Node_Event_name' has a wrong offset!");
static_assert(offsetof(Goat_C_ExecuteUbergraph_goat, K2Node_Event_player_4) == 0x0000A8, "Member 'Goat_C_ExecuteUbergraph_goat::K2Node_Event_player_4' has a wrong offset!");
static_assert(offsetof(Goat_C_ExecuteUbergraph_goat, K2Node_Event_player_3) == 0x0000B0, "Member 'Goat_C_ExecuteUbergraph_goat::K2Node_Event_player_3' has a wrong offset!");
static_assert(offsetof(Goat_C_ExecuteUbergraph_goat, K2Node_Event_hit) == 0x0000B8, "Member 'Goat_C_ExecuteUbergraph_goat::K2Node_Event_hit' has a wrong offset!");
static_assert(offsetof(Goat_C_ExecuteUbergraph_goat, K2Node_Event_damage) == 0x000140, "Member 'Goat_C_ExecuteUbergraph_goat::K2Node_Event_damage' has a wrong offset!");
static_assert(offsetof(Goat_C_ExecuteUbergraph_goat, K2Node_Event_player_2) == 0x000148, "Member 'Goat_C_ExecuteUbergraph_goat::K2Node_Event_player_2' has a wrong offset!");
static_assert(offsetof(Goat_C_ExecuteUbergraph_goat, K2Node_Event_player_1) == 0x000150, "Member 'Goat_C_ExecuteUbergraph_goat::K2Node_Event_player_1' has a wrong offset!");
static_assert(offsetof(Goat_C_ExecuteUbergraph_goat, K2Node_Event_player) == 0x000158, "Member 'Goat_C_ExecuteUbergraph_goat::K2Node_Event_player' has a wrong offset!");
static_assert(offsetof(Goat_C_ExecuteUbergraph_goat, K2Node_Event_DeltaSeconds) == 0x000160, "Member 'Goat_C_ExecuteUbergraph_goat::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(Goat_C_ExecuteUbergraph_goat, CallFunc_getMainGamemode_AsMain_Gamemode) == 0x000168, "Member 'Goat_C_ExecuteUbergraph_goat::CallFunc_getMainGamemode_AsMain_Gamemode' has a wrong offset!");
static_assert(offsetof(Goat_C_ExecuteUbergraph_goat, CallFunc_RandomFloatInRange_ReturnValue) == 0x000170, "Member 'Goat_C_ExecuteUbergraph_goat::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(Goat_C_ExecuteUbergraph_goat, K2Node_ComponentBoundEvent_OverlappedComponent_3) == 0x000178, "Member 'Goat_C_ExecuteUbergraph_goat::K2Node_ComponentBoundEvent_OverlappedComponent_3' has a wrong offset!");
static_assert(offsetof(Goat_C_ExecuteUbergraph_goat, K2Node_ComponentBoundEvent_OtherActor_3) == 0x000180, "Member 'Goat_C_ExecuteUbergraph_goat::K2Node_ComponentBoundEvent_OtherActor_3' has a wrong offset!");
static_assert(offsetof(Goat_C_ExecuteUbergraph_goat, K2Node_ComponentBoundEvent_OtherComp_3) == 0x000188, "Member 'Goat_C_ExecuteUbergraph_goat::K2Node_ComponentBoundEvent_OtherComp_3' has a wrong offset!");
static_assert(offsetof(Goat_C_ExecuteUbergraph_goat, K2Node_ComponentBoundEvent_OtherBodyIndex_3) == 0x000190, "Member 'Goat_C_ExecuteUbergraph_goat::K2Node_ComponentBoundEvent_OtherBodyIndex_3' has a wrong offset!");
static_assert(offsetof(Goat_C_ExecuteUbergraph_goat, K2Node_ComponentBoundEvent_bFromSweep_1) == 0x000194, "Member 'Goat_C_ExecuteUbergraph_goat::K2Node_ComponentBoundEvent_bFromSweep_1' has a wrong offset!");
static_assert(offsetof(Goat_C_ExecuteUbergraph_goat, K2Node_ComponentBoundEvent_SweepResult_1) == 0x000198, "Member 'Goat_C_ExecuteUbergraph_goat::K2Node_ComponentBoundEvent_SweepResult_1' has a wrong offset!");
static_assert(offsetof(Goat_C_ExecuteUbergraph_goat, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000220, "Member 'Goat_C_ExecuteUbergraph_goat::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Goat_C_ExecuteUbergraph_goat, K2Node_DynamicCast_AsMain_Player) == 0x000228, "Member 'Goat_C_ExecuteUbergraph_goat::K2Node_DynamicCast_AsMain_Player' has a wrong offset!");
static_assert(offsetof(Goat_C_ExecuteUbergraph_goat, K2Node_DynamicCast_bSuccess) == 0x000230, "Member 'Goat_C_ExecuteUbergraph_goat::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Goat_C_ExecuteUbergraph_goat, K2Node_ComponentBoundEvent_OverlappedComponent_2) == 0x000238, "Member 'Goat_C_ExecuteUbergraph_goat::K2Node_ComponentBoundEvent_OverlappedComponent_2' has a wrong offset!");
static_assert(offsetof(Goat_C_ExecuteUbergraph_goat, K2Node_ComponentBoundEvent_OtherActor_2) == 0x000240, "Member 'Goat_C_ExecuteUbergraph_goat::K2Node_ComponentBoundEvent_OtherActor_2' has a wrong offset!");
static_assert(offsetof(Goat_C_ExecuteUbergraph_goat, K2Node_ComponentBoundEvent_OtherComp_2) == 0x000248, "Member 'Goat_C_ExecuteUbergraph_goat::K2Node_ComponentBoundEvent_OtherComp_2' has a wrong offset!");
static_assert(offsetof(Goat_C_ExecuteUbergraph_goat, K2Node_ComponentBoundEvent_OtherBodyIndex_2) == 0x000250, "Member 'Goat_C_ExecuteUbergraph_goat::K2Node_ComponentBoundEvent_OtherBodyIndex_2' has a wrong offset!");
static_assert(offsetof(Goat_C_ExecuteUbergraph_goat, K2Node_DynamicCast_AsMain_Player_1) == 0x000258, "Member 'Goat_C_ExecuteUbergraph_goat::K2Node_DynamicCast_AsMain_Player_1' has a wrong offset!");
static_assert(offsetof(Goat_C_ExecuteUbergraph_goat, K2Node_DynamicCast_bSuccess_1) == 0x000260, "Member 'Goat_C_ExecuteUbergraph_goat::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(Goat_C_ExecuteUbergraph_goat, K2Node_ComponentBoundEvent_OverlappedComponent_1) == 0x000268, "Member 'Goat_C_ExecuteUbergraph_goat::K2Node_ComponentBoundEvent_OverlappedComponent_1' has a wrong offset!");
static_assert(offsetof(Goat_C_ExecuteUbergraph_goat, K2Node_ComponentBoundEvent_OtherActor_1) == 0x000270, "Member 'Goat_C_ExecuteUbergraph_goat::K2Node_ComponentBoundEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(Goat_C_ExecuteUbergraph_goat, K2Node_ComponentBoundEvent_OtherComp_1) == 0x000278, "Member 'Goat_C_ExecuteUbergraph_goat::K2Node_ComponentBoundEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(Goat_C_ExecuteUbergraph_goat, K2Node_ComponentBoundEvent_OtherBodyIndex_1) == 0x000280, "Member 'Goat_C_ExecuteUbergraph_goat::K2Node_ComponentBoundEvent_OtherBodyIndex_1' has a wrong offset!");
static_assert(offsetof(Goat_C_ExecuteUbergraph_goat, K2Node_ComponentBoundEvent_bFromSweep) == 0x000284, "Member 'Goat_C_ExecuteUbergraph_goat::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(Goat_C_ExecuteUbergraph_goat, K2Node_ComponentBoundEvent_SweepResult) == 0x000288, "Member 'Goat_C_ExecuteUbergraph_goat::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(Goat_C_ExecuteUbergraph_goat, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000310, "Member 'Goat_C_ExecuteUbergraph_goat::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Goat_C_ExecuteUbergraph_goat, K2Node_ComponentBoundEvent_OtherActor) == 0x000318, "Member 'Goat_C_ExecuteUbergraph_goat::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(Goat_C_ExecuteUbergraph_goat, K2Node_ComponentBoundEvent_OtherComp) == 0x000320, "Member 'Goat_C_ExecuteUbergraph_goat::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(Goat_C_ExecuteUbergraph_goat, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000328, "Member 'Goat_C_ExecuteUbergraph_goat::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Goat_C_ExecuteUbergraph_goat, K2Node_DynamicCast_AsMain_Player_2) == 0x000330, "Member 'Goat_C_ExecuteUbergraph_goat::K2Node_DynamicCast_AsMain_Player_2' has a wrong offset!");
static_assert(offsetof(Goat_C_ExecuteUbergraph_goat, K2Node_DynamicCast_bSuccess_2) == 0x000338, "Member 'Goat_C_ExecuteUbergraph_goat::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(Goat_C_ExecuteUbergraph_goat, K2Node_DynamicCast_AsMain_Player_3) == 0x000340, "Member 'Goat_C_ExecuteUbergraph_goat::K2Node_DynamicCast_AsMain_Player_3' has a wrong offset!");
static_assert(offsetof(Goat_C_ExecuteUbergraph_goat, K2Node_DynamicCast_bSuccess_3) == 0x000348, "Member 'Goat_C_ExecuteUbergraph_goat::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");

}

