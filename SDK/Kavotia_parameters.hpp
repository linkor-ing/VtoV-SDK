#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Kavotia

#include "Basic.hpp"

#include "Enum_interactionActions_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "AIModule_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function kavotia.kavotia_C.ExecuteUbergraph_kavotia
// 0x0A00 (0x0A00 - 0x0000)
struct Kavotia_C_ExecuteUbergraph_kavotia final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NotifyName_9;                   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate;              // 0x0018(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   K2Node_CustomEvent_NotifyName_8;                   // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_1;            // 0x0030(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   K2Node_CustomEvent_NotifyName_7;                   // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_2;            // 0x0048(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   K2Node_CustomEvent_NotifyName_6;                   // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_3;            // 0x0060(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   K2Node_CustomEvent_NotifyName_5;                   // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_4;            // 0x0078(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   Temp_name_Variable;                                // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_1;                              // 0x0094(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_2;                              // 0x009C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_3;                              // 0x00A4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_5;            // 0x00AC(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   K2Node_CustomEvent_NotifyName_4;                   // 0x00BC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NotifyName_3;                   // 0x00C4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_6;            // 0x00CC(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   K2Node_CustomEvent_NotifyName_2;                   // 0x00DC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_7;            // 0x00E4(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   K2Node_CustomEvent_NotifyName_1;                   // 0x00F4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_8;            // 0x00FC(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   K2Node_CustomEvent_NotifyName;                     // 0x010C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_9;            // 0x0114(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   Temp_name_Variable_4;                              // 0x0124(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EPathFollowingResult MovementResult)> K2Node_CreateDelegate_OutputDelegate_10;           // 0x012C(0x0010)(ZeroConstructor, NoDestructor)
	EPathFollowingResult                          K2Node_CustomEvent_MovementResult_1;               // 0x013C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPathFollowingResult                          K2Node_CustomEvent_MovementResult;                 // 0x013D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A68[0x2];                                     // 0x013E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EPathFollowingResult MovementResult)> K2Node_CreateDelegate_OutputDelegate_11;           // 0x0140(0x0010)(ZeroConstructor, NoDestructor)
	EPathFollowingResult                          Temp_byte_Variable;                                // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A69[0x3];                                     // 0x0151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_12;           // 0x0154(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         Temp_int_Variable_1;                               // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_13;           // 0x016C(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_2A6A[0x4];                                     // 0x017C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0180(0x0008)(NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0188(0x0010)(ConstParm, ReferenceParm)
	int32                                         Temp_int_Variable_2;                               // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_14;           // 0x019C(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPathFollowingResult                          K2Node_CustomEvent_MovementResult_2;               // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A6B[0x3];                                     // 0x01B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_3;                               // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable_1;                            // 0x01B8(0x0010)(ConstParm, ReferenceParm)
	TDelegate<void(EPathFollowingResult MovementResult)> K2Node_CreateDelegate_OutputDelegate_15;           // 0x01C8(0x0010)(ZeroConstructor, NoDestructor)
	EPathFollowingResult                          K2Node_CustomEvent_MovementResult_3;               // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A6C[0x3];                                     // 0x01D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_4;                             // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_5;                                // 0x01EC(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_2A6D[0x4];                                     // 0x0274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_actor_1;                              // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_impact_1;                             // 0x0280(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A6E[0x4];                                     // 0x028C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AWaterVolume_C*                         K2Node_Event_water_3;                              // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWaterVolume_C*                         K2Node_Event_water_2;                              // 0x0298(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWaterVolume_C*                         K2Node_Event_water_1;                              // 0x02A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWaterVolume_C*                         K2Node_Event_water;                                // 0x02A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_activate;                             // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_static;                               // 0x02B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_frozen;                               // 0x02B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_active;                               // 0x02B3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A6F[0x4];                                     // 0x02B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_Event_key_1;                                // 0x02B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_11;                            // 0x02C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_4;                                // 0x02D0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         K2Node_Event_damage_3;                             // 0x0358(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_fuel;                                 // 0x035C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_10;                            // 0x0360(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_3;                                // 0x0368(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         K2Node_Event_index;                                // 0x03F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_interactionActions                       K2Node_Event_action;                               // 0x03F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A70[0x3];                                     // 0x03F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_9;                             // 0x03F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_8;                             // 0x0400(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_2;                             // 0x0408(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_location_1;                           // 0x040C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_7;                             // 0x0418(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_6;                             // 0x0420(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_5;                             // 0x0428(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_wheelDelta;                           // 0x0430(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A71[0x4];                                     // 0x0434(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_4;                             // 0x0438(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Event_mouse;                                // 0x0440(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_3;                             // 0x0448(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_Event_key;                                  // 0x0450(0x0018)(HasGetValueTypeHash)
	bool                                          K2Node_Event_pressed;                              // 0x0468(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A72[0x3];                                     // 0x0469(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_temperature_1;                        // 0x046C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_temperature;                          // 0x0470(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_speed;                                // 0x0474(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_2;                             // 0x0478(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_2;                                // 0x0480(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class FString                                 K2Node_Event_name;                                 // 0x0508(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         K2Node_Event_volume;                               // 0x0518(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A73[0x4];                                     // 0x051C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_1;                             // 0x0520(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_location;                             // 0x0528(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_1;                             // 0x0534(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_clean;                                // 0x0538(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A74[0x7];                                     // 0x0539(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player;                               // 0x0540(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_1;                                // 0x0548(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AHook_C*                                K2Node_Event_hook;                                 // 0x05D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x05D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A75[0x7];                                     // 0x05D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x05E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UKavotia_Skeleton_AnimBlueprint_C*      K2Node_DynamicCast_AsKavotia_Skeleton_Anim_Blueprint; // 0x05E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x05F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A76[0x3];                                     // 0x05F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EPathFollowingResult MovementResult)> K2Node_CreateDelegate_OutputDelegate_16;           // 0x05F4(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0604(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A77[0x3];                                     // 0x0605(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0608(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x060C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A78[0x3];                                     // 0x060D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0610(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x061C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A79[0x3];                                     // 0x061D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_17;           // 0x0620(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0630(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A7A[0x7];                                     // 0x0631(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_sensePawns_OutputPin;                     // 0x0638(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0640(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A7B[0xF];                                     // 0x0641(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0650(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0680(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x068C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0698(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A7C[0x4];                                     // 0x06A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_K2_GetRootComponent_ReturnValue;          // 0x06A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue;  // 0x06B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentBounds_Origin;                // 0x06B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentBounds_BoxExtent;             // 0x06C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetComponentBounds_SphereRadius;          // 0x06CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x06D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RandomPointInBoundingBox_ReturnValue;     // 0x06D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x06E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A7D[0x3];                                     // 0x06E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_18;           // 0x06E4(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_2A7E[0x4];                                     // 0x06F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_1;        // 0x06F8(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0700(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RandomUnitVector_ReturnValue;             // 0x070C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0718(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A7F[0x3];                                     // 0x0719(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x071C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x0728(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A80[0xC];                                     // 0x0734(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0740(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0770(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AKavotiaShot_C*                         CallFunc_FinishSpawningActor_ReturnValue;          // 0x0778(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      CallFunc_obj_statDyn_obj;                          // 0x0780(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_walkLoc_RandomLocation;                   // 0x0790(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_19;           // 0x079C(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_2A81[0x4];                                     // 0x07AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAIAsyncTaskBlueprintProxy*             CallFunc_CreateMoveToProxyObject_ReturnValue;      // 0x07B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_2;        // 0x07B8(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x07C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_RandomBoolWithWeight_ReturnValue;         // 0x07C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A82[0x2];                                     // 0x07C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x07C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Select_Default;                             // 0x07C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x07D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A83[0x4];                                     // 0x07D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayMontageCallbackProxy*              CallFunc_CreateProxyObjectForPlayMontage_ReturnValue; // 0x07D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_3;        // 0x07E0(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x07E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_RandomBoolWithWeight_ReturnValue_1;       // 0x07E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x07EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A84[0x5];                                     // 0x07EB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayMontageCallbackProxy*              CallFunc_CreateProxyObjectForPlayMontage_ReturnValue_1; // 0x07F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x07F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A85[0x3];                                     // 0x07F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x07FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAIAsyncTaskBlueprintProxy*             CallFunc_CreateMoveToProxyObject_ReturnValue_1;    // 0x0800(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_4;        // 0x0808(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x0810(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0811(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A86[0x2];                                     // 0x0812(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0814(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_2;         // 0x0818(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_3;         // 0x081C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_5;        // 0x0820(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue_1;       // 0x0828(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x082C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A87[0x3];                                     // 0x082D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0830(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0834(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A88[0x3];                                     // 0x0835(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0838(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x0844(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x08CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x08CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A89[0x2];                                     // 0x08CE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RandomFloatInRange_ReturnValue_4;         // 0x08D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A8A[0x4];                                     // 0x08D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_actor;                                // 0x08D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage;                               // 0x08E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit;                                  // 0x08E4(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                K2Node_Event_impact;                               // 0x096C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_skipSetting;                          // 0x0978(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_9;                    // 0x0979(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_10;                   // 0x097A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x097B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPathFollowingResult                          Temp_byte_Variable_1;                              // 0x097C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A8B[0x3];                                     // 0x097D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RandomFloatInRange_ReturnValue_5;         // 0x0980(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A8C[0x4];                                     // 0x0984(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue;           // 0x0988(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AKavotia_C*                             CallFunc_Array_Get_Item;                           // 0x0990(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0998(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x099C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A8D[0x3];                                     // 0x099D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x09A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A8E[0x4];                                     // 0x09AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      CallFunc_obj_statDyn_obj_1;                        // 0x09B0(0x0010)(ReferenceParm)
	TArray<class AActor*>                         CallFunc_SphereOverlapActors_OutActors;            // 0x09C0(0x0010)(ReferenceParm)
	bool                                          CallFunc_SphereOverlapActors_ReturnValue;          // 0x09D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A8F[0x3];                                     // 0x09D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x09D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x09D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A90[0x7];                                     // 0x09D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item_1;                         // 0x09E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADoor_C*                                K2Node_DynamicCast_AsDoor;                         // 0x09E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x09F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Kavotia_C_ExecuteUbergraph_kavotia) == 0x000010, "Wrong alignment on Kavotia_C_ExecuteUbergraph_kavotia");
static_assert(sizeof(Kavotia_C_ExecuteUbergraph_kavotia) == 0x000A00, "Wrong size on Kavotia_C_ExecuteUbergraph_kavotia");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, EntryPoint) == 0x000000, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::EntryPoint' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000004, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_CustomEvent_NotifyName_9) == 0x000010, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_CustomEvent_NotifyName_9' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_CreateDelegate_OutputDelegate) == 0x000018, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_CustomEvent_NotifyName_8) == 0x000028, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_CustomEvent_NotifyName_8' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_CreateDelegate_OutputDelegate_1) == 0x000030, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_CustomEvent_NotifyName_7) == 0x000040, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_CustomEvent_NotifyName_7' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_CreateDelegate_OutputDelegate_2) == 0x000048, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_CustomEvent_NotifyName_6) == 0x000058, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_CustomEvent_NotifyName_6' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_CreateDelegate_OutputDelegate_3) == 0x000060, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_CustomEvent_NotifyName_5) == 0x000070, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_CustomEvent_NotifyName_5' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_CreateDelegate_OutputDelegate_4) == 0x000078, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, Temp_name_Variable) == 0x000088, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, Temp_int_Variable) == 0x000090, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, Temp_name_Variable_1) == 0x000094, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::Temp_name_Variable_1' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, Temp_name_Variable_2) == 0x00009C, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::Temp_name_Variable_2' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, Temp_name_Variable_3) == 0x0000A4, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::Temp_name_Variable_3' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_CreateDelegate_OutputDelegate_5) == 0x0000AC, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_CustomEvent_NotifyName_4) == 0x0000BC, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_CustomEvent_NotifyName_4' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_CustomEvent_NotifyName_3) == 0x0000C4, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_CustomEvent_NotifyName_3' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_CreateDelegate_OutputDelegate_6) == 0x0000CC, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_CreateDelegate_OutputDelegate_6' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_CustomEvent_NotifyName_2) == 0x0000DC, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_CustomEvent_NotifyName_2' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_CreateDelegate_OutputDelegate_7) == 0x0000E4, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_CreateDelegate_OutputDelegate_7' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_CustomEvent_NotifyName_1) == 0x0000F4, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_CustomEvent_NotifyName_1' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_CreateDelegate_OutputDelegate_8) == 0x0000FC, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_CreateDelegate_OutputDelegate_8' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_CustomEvent_NotifyName) == 0x00010C, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_CustomEvent_NotifyName' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_CreateDelegate_OutputDelegate_9) == 0x000114, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_CreateDelegate_OutputDelegate_9' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, Temp_name_Variable_4) == 0x000124, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::Temp_name_Variable_4' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_CreateDelegate_OutputDelegate_10) == 0x00012C, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_CreateDelegate_OutputDelegate_10' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_CustomEvent_MovementResult_1) == 0x00013C, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_CustomEvent_MovementResult_1' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_CustomEvent_MovementResult) == 0x00013D, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_CustomEvent_MovementResult' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_CreateDelegate_OutputDelegate_11) == 0x000140, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_CreateDelegate_OutputDelegate_11' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, Temp_byte_Variable) == 0x000150, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_CreateDelegate_OutputDelegate_12) == 0x000154, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_CreateDelegate_OutputDelegate_12' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, Temp_int_Variable_1) == 0x000164, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_Add_IntInt_ReturnValue) == 0x000168, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_CreateDelegate_OutputDelegate_13) == 0x00016C, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_CreateDelegate_OutputDelegate_13' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000180, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, Temp_object_Variable) == 0x000188, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, Temp_int_Variable_2) == 0x000198, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_CreateDelegate_OutputDelegate_14) == 0x00019C, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_CreateDelegate_OutputDelegate_14' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_Add_IntInt_ReturnValue_1) == 0x0001AC, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_CustomEvent_MovementResult_2) == 0x0001B0, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_CustomEvent_MovementResult_2' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, Temp_int_Variable_3) == 0x0001B4, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, Temp_object_Variable_1) == 0x0001B8, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_CreateDelegate_OutputDelegate_15) == 0x0001C8, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_CreateDelegate_OutputDelegate_15' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_CustomEvent_MovementResult_3) == 0x0001D8, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_CustomEvent_MovementResult_3' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, Temp_int_Loop_Counter_Variable) == 0x0001DC, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_Add_IntInt_ReturnValue_2) == 0x0001E0, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, Temp_int_Array_Index_Variable) == 0x0001E4, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_damage_4) == 0x0001E8, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_damage_4' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_hit_5) == 0x0001EC, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_hit_5' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_actor_1) == 0x000278, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_actor_1' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_impact_1) == 0x000280, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_impact_1' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_water_3) == 0x000290, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_water_3' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_water_2) == 0x000298, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_water_2' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_water_1) == 0x0002A0, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_water_1' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_water) == 0x0002A8, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_water' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_activate) == 0x0002B0, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_activate' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_static) == 0x0002B1, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_static' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_frozen) == 0x0002B2, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_frozen' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_active) == 0x0002B3, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_active' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_key_1) == 0x0002B8, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_key_1' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_player_11) == 0x0002C8, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_player_11' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_hit_4) == 0x0002D0, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_hit_4' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_damage_3) == 0x000358, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_damage_3' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_fuel) == 0x00035C, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_fuel' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_player_10) == 0x000360, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_player_10' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_hit_3) == 0x000368, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_hit_3' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_index) == 0x0003F0, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_index' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_action) == 0x0003F4, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_action' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_player_9) == 0x0003F8, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_player_9' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_player_8) == 0x000400, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_player_8' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_damage_2) == 0x000408, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_damage_2' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_location_1) == 0x00040C, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_location_1' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_player_7) == 0x000418, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_player_7' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_player_6) == 0x000420, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_player_6' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_player_5) == 0x000428, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_player_5' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_wheelDelta) == 0x000430, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_wheelDelta' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_player_4) == 0x000438, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_player_4' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_mouse) == 0x000440, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_mouse' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_player_3) == 0x000448, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_player_3' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_key) == 0x000450, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_key' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_pressed) == 0x000468, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_pressed' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_temperature_1) == 0x00046C, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_temperature_1' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_temperature) == 0x000470, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_temperature' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_speed) == 0x000474, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_speed' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_player_2) == 0x000478, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_player_2' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_hit_2) == 0x000480, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_hit_2' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_name) == 0x000508, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_name' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_volume) == 0x000518, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_volume' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_player_1) == 0x000520, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_player_1' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_location) == 0x000528, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_location' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_damage_1) == 0x000534, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_damage_1' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_clean) == 0x000538, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_clean' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_player) == 0x000540, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_player' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_hit_1) == 0x000548, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_hit_1' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_hook) == 0x0005D0, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_hook' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_K2_AttachToComponent_ReturnValue) == 0x0005D8, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_GetAnimInstance_ReturnValue) == 0x0005E0, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_DynamicCast_AsKavotia_Skeleton_Anim_Blueprint) == 0x0005E8, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_DynamicCast_AsKavotia_Skeleton_Anim_Blueprint' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_DynamicCast_bSuccess) == 0x0005F0, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_CreateDelegate_OutputDelegate_16) == 0x0005F4, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_CreateDelegate_OutputDelegate_16' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_Not_PreBool_ReturnValue) == 0x000604, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_DeltaSeconds) == 0x000608, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_IsValid_ReturnValue) == 0x00060C, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000610, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_IsValid_ReturnValue_1) == 0x00061C, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_CreateDelegate_OutputDelegate_17) == 0x000620, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_CreateDelegate_OutputDelegate_17' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_IsValid_ReturnValue_2) == 0x000630, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_sensePawns_OutputPin) == 0x000638, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_sensePawns_OutputPin' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_IsValid_ReturnValue_3) == 0x000640, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000650, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_BreakTransform_Location) == 0x000680, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_BreakTransform_Rotation) == 0x00068C, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_BreakTransform_Scale) == 0x000698, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_K2_GetRootComponent_ReturnValue) == 0x0006A8, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_K2_GetRootComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue) == 0x0006B0, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_GetComponentBounds_Origin) == 0x0006B4, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_GetComponentBounds_Origin' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_GetComponentBounds_BoxExtent) == 0x0006C0, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_GetComponentBounds_BoxExtent' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_GetComponentBounds_SphereRadius) == 0x0006CC, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_GetComponentBounds_SphereRadius' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_Lerp_ReturnValue) == 0x0006D0, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_RandomPointInBoundingBox_ReturnValue) == 0x0006D4, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_RandomPointInBoundingBox_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_IsValid_ReturnValue_4) == 0x0006E0, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_CreateDelegate_OutputDelegate_18) == 0x0006E4, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_CreateDelegate_OutputDelegate_18' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_K2_SetTimerDelegate_ReturnValue_1) == 0x0006F8, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_K2_SetTimerDelegate_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_GetForwardVector_ReturnValue) == 0x000700, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_RandomUnitVector_ReturnValue) == 0x00070C, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_RandomUnitVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, Temp_bool_Has_Been_Initd_Variable) == 0x000718, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_VLerp_ReturnValue) == 0x00071C, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_VLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x000728, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_MakeTransform_ReturnValue) == 0x000740, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000770, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_FinishSpawningActor_ReturnValue) == 0x000778, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_obj_statDyn_obj) == 0x000780, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_obj_statDyn_obj' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_walkLoc_RandomLocation) == 0x000790, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_walkLoc_RandomLocation' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_CreateDelegate_OutputDelegate_19) == 0x00079C, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_CreateDelegate_OutputDelegate_19' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_CreateMoveToProxyObject_ReturnValue) == 0x0007B0, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_CreateMoveToProxyObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_K2_SetTimerDelegate_ReturnValue_2) == 0x0007B8, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_K2_SetTimerDelegate_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_IsValid_ReturnValue_5) == 0x0007C0, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_RandomBoolWithWeight_ReturnValue) == 0x0007C1, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_RandomBoolWithWeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_RandomIntegerInRange_ReturnValue) == 0x0007C4, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Select_Default) == 0x0007C8, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_RandomFloatInRange_ReturnValue) == 0x0007D0, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_CreateProxyObjectForPlayMontage_ReturnValue) == 0x0007D8, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_CreateProxyObjectForPlayMontage_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_K2_SetTimerDelegate_ReturnValue_3) == 0x0007E0, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_K2_SetTimerDelegate_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_IsValid_ReturnValue_6) == 0x0007E8, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_RandomBoolWithWeight_ReturnValue_1) == 0x0007E9, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_RandomBoolWithWeight_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_BooleanAND_ReturnValue) == 0x0007EA, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_CreateProxyObjectForPlayMontage_ReturnValue_1) == 0x0007F0, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_CreateProxyObjectForPlayMontage_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_IsValid_ReturnValue_7) == 0x0007F8, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x0007FC, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_CreateMoveToProxyObject_ReturnValue_1) == 0x000800, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_CreateMoveToProxyObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_K2_SetTimerDelegate_ReturnValue_4) == 0x000808, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_K2_SetTimerDelegate_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_IsValid_ReturnValue_8) == 0x000810, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_Greater_IntInt_ReturnValue) == 0x000811, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_Subtract_IntInt_ReturnValue) == 0x000814, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_RandomFloatInRange_ReturnValue_2) == 0x000818, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_RandomFloatInRange_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_RandomFloatInRange_ReturnValue_3) == 0x00081C, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_RandomFloatInRange_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_K2_SetTimerDelegate_ReturnValue_5) == 0x000820, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_K2_SetTimerDelegate_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_RandomIntegerInRange_ReturnValue_1) == 0x000828, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_RandomIntegerInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00082C, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_MakeLiteralInt_ReturnValue) == 0x000830, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_Less_IntInt_ReturnValue) == 0x000834, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000838, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_LineTraceSingleForObjects_OutHit) == 0x000844, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x0008CC, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0008CD, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_RandomFloatInRange_ReturnValue_4) == 0x0008D0, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_RandomFloatInRange_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_actor) == 0x0008D8, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_actor' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_damage) == 0x0008E0, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_damage' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_hit) == 0x0008E4, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_hit' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_impact) == 0x00096C, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_impact' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_Event_skipSetting) == 0x000978, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_Event_skipSetting' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_IsValid_ReturnValue_9) == 0x000979, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_IsValid_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_IsValid_ReturnValue_10) == 0x00097A, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_IsValid_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, Temp_bool_IsClosed_Variable) == 0x00097B, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, Temp_byte_Variable_1) == 0x00097C, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_RandomFloatInRange_ReturnValue_5) == 0x000980, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_RandomFloatInRange_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_GetPlayerCharacter_ReturnValue) == 0x000988, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_Array_Get_Item) == 0x000990, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_Array_Length_ReturnValue) == 0x000998, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_Less_IntInt_ReturnValue_1) == 0x00099C, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x0009A0, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_obj_statDyn_obj_1) == 0x0009B0, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_obj_statDyn_obj_1' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_SphereOverlapActors_OutActors) == 0x0009C0, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_SphereOverlapActors_OutActors' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_SphereOverlapActors_ReturnValue) == 0x0009D0, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_SphereOverlapActors_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_Array_Length_ReturnValue_1) == 0x0009D4, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_Less_IntInt_ReturnValue_2) == 0x0009D8, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, CallFunc_Array_Get_Item_1) == 0x0009E0, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_DynamicCast_AsDoor) == 0x0009E8, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_DynamicCast_AsDoor' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ExecuteUbergraph_kavotia, K2Node_DynamicCast_bSuccess_1) == 0x0009F0, "Member 'Kavotia_C_ExecuteUbergraph_kavotia::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function kavotia.kavotia_C.addDamage
// 0x00A8 (0x00A8 - 0x0000)
struct Kavotia_C_AddDamage final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x000C(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                Impact;                                            // 0x0094(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipSetting;                                       // 0x00A0(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Kavotia_C_AddDamage) == 0x000008, "Wrong alignment on Kavotia_C_AddDamage");
static_assert(sizeof(Kavotia_C_AddDamage) == 0x0000A8, "Wrong size on Kavotia_C_AddDamage");
static_assert(offsetof(Kavotia_C_AddDamage, Actor) == 0x000000, "Member 'Kavotia_C_AddDamage::Actor' has a wrong offset!");
static_assert(offsetof(Kavotia_C_AddDamage, Damage) == 0x000008, "Member 'Kavotia_C_AddDamage::Damage' has a wrong offset!");
static_assert(offsetof(Kavotia_C_AddDamage, Hit) == 0x00000C, "Member 'Kavotia_C_AddDamage::Hit' has a wrong offset!");
static_assert(offsetof(Kavotia_C_AddDamage, Impact) == 0x000094, "Member 'Kavotia_C_AddDamage::Impact' has a wrong offset!");
static_assert(offsetof(Kavotia_C_AddDamage, SkipSetting) == 0x0000A0, "Member 'Kavotia_C_AddDamage::SkipSetting' has a wrong offset!");

// Function kavotia.kavotia_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct Kavotia_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Kavotia_C_ReceiveTick) == 0x000004, "Wrong alignment on Kavotia_C_ReceiveTick");
static_assert(sizeof(Kavotia_C_ReceiveTick) == 0x000004, "Wrong size on Kavotia_C_ReceiveTick");
static_assert(offsetof(Kavotia_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'Kavotia_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function kavotia.kavotia_C.hooked
// 0x0008 (0x0008 - 0x0000)
struct Kavotia_C_Hooked final
{
public:
	class AHook_C*                                Hook;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Kavotia_C_Hooked) == 0x000008, "Wrong alignment on Kavotia_C_Hooked");
static_assert(sizeof(Kavotia_C_Hooked) == 0x000008, "Wrong size on Kavotia_C_Hooked");
static_assert(offsetof(Kavotia_C_Hooked, Hook) == 0x000000, "Member 'Kavotia_C_Hooked::Hook' has a wrong offset!");

// Function kavotia.kavotia_C.playerUsedOn
// 0x0090 (0x0090 - 0x0000)
struct Kavotia_C_PlayerUsedOn final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Kavotia_C_PlayerUsedOn) == 0x000008, "Wrong alignment on Kavotia_C_PlayerUsedOn");
static_assert(sizeof(Kavotia_C_PlayerUsedOn) == 0x000090, "Wrong size on Kavotia_C_PlayerUsedOn");
static_assert(offsetof(Kavotia_C_PlayerUsedOn, Player) == 0x000000, "Member 'Kavotia_C_PlayerUsedOn::Player' has a wrong offset!");
static_assert(offsetof(Kavotia_C_PlayerUsedOn, Hit) == 0x000008, "Member 'Kavotia_C_PlayerUsedOn::Hit' has a wrong offset!");

// Function kavotia.kavotia_C.slice
// 0x0001 (0x0001 - 0x0000)
struct Kavotia_C_Slice final
{
public:
	bool                                          Clean;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Kavotia_C_Slice) == 0x000001, "Wrong alignment on Kavotia_C_Slice");
static_assert(sizeof(Kavotia_C_Slice) == 0x000001, "Wrong size on Kavotia_C_Slice");
static_assert(offsetof(Kavotia_C_Slice, Clean) == 0x000000, "Member 'Kavotia_C_Slice::Clean' has a wrong offset!");

// Function kavotia.kavotia_C.reachedByExplosion
// 0x0010 (0x0010 - 0x0000)
struct Kavotia_C_ReachedByExplosion final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Kavotia_C_ReachedByExplosion) == 0x000004, "Wrong alignment on Kavotia_C_ReachedByExplosion");
static_assert(sizeof(Kavotia_C_ReachedByExplosion) == 0x000010, "Wrong size on Kavotia_C_ReachedByExplosion");
static_assert(offsetof(Kavotia_C_ReachedByExplosion, Location) == 0x000000, "Member 'Kavotia_C_ReachedByExplosion::Location' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ReachedByExplosion, Damage) == 0x00000C, "Member 'Kavotia_C_ReachedByExplosion::Damage' has a wrong offset!");

// Function kavotia.kavotia_C.playerLookAway
// 0x0008 (0x0008 - 0x0000)
struct Kavotia_C_PlayerLookAway final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Kavotia_C_PlayerLookAway) == 0x000008, "Wrong alignment on Kavotia_C_PlayerLookAway");
static_assert(sizeof(Kavotia_C_PlayerLookAway) == 0x000008, "Wrong size on Kavotia_C_PlayerLookAway");
static_assert(offsetof(Kavotia_C_PlayerLookAway, Player) == 0x000000, "Member 'Kavotia_C_PlayerLookAway::Player' has a wrong offset!");

// Function kavotia.kavotia_C.stepped
// 0x0004 (0x0004 - 0x0000)
struct Kavotia_C_Stepped final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Kavotia_C_Stepped) == 0x000004, "Wrong alignment on Kavotia_C_Stepped");
static_assert(sizeof(Kavotia_C_Stepped) == 0x000004, "Wrong size on Kavotia_C_Stepped");
static_assert(offsetof(Kavotia_C_Stepped, Volume) == 0x000000, "Member 'Kavotia_C_Stepped::Volume' has a wrong offset!");

// Function kavotia.kavotia_C.ActionName
// 0x00A0 (0x00A0 - 0x0000)
struct Kavotia_C_ActionName final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class FString                                 Param_Name;                                        // 0x0090(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Kavotia_C_ActionName) == 0x000008, "Wrong alignment on Kavotia_C_ActionName");
static_assert(sizeof(Kavotia_C_ActionName) == 0x0000A0, "Wrong size on Kavotia_C_ActionName");
static_assert(offsetof(Kavotia_C_ActionName, Player) == 0x000000, "Member 'Kavotia_C_ActionName::Player' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ActionName, Hit) == 0x000008, "Member 'Kavotia_C_ActionName::Hit' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ActionName, Param_Name) == 0x000090, "Member 'Kavotia_C_ActionName::Param_Name' has a wrong offset!");

// Function kavotia.kavotia_C.accumulateTemperature
// 0x0008 (0x0008 - 0x0000)
struct Kavotia_C_AccumulateTemperature final
{
public:
	float                                         Temperature;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Kavotia_C_AccumulateTemperature) == 0x000004, "Wrong alignment on Kavotia_C_AccumulateTemperature");
static_assert(sizeof(Kavotia_C_AccumulateTemperature) == 0x000008, "Wrong size on Kavotia_C_AccumulateTemperature");
static_assert(offsetof(Kavotia_C_AccumulateTemperature, Temperature) == 0x000000, "Member 'Kavotia_C_AccumulateTemperature::Temperature' has a wrong offset!");
static_assert(offsetof(Kavotia_C_AccumulateTemperature, Speed) == 0x000004, "Member 'Kavotia_C_AccumulateTemperature::Speed' has a wrong offset!");

// Function kavotia.kavotia_C.addTemperature
// 0x0004 (0x0004 - 0x0000)
struct Kavotia_C_AddTemperature final
{
public:
	float                                         Temperature;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Kavotia_C_AddTemperature) == 0x000004, "Wrong alignment on Kavotia_C_AddTemperature");
static_assert(sizeof(Kavotia_C_AddTemperature) == 0x000004, "Wrong size on Kavotia_C_AddTemperature");
static_assert(offsetof(Kavotia_C_AddTemperature, Temperature) == 0x000000, "Member 'Kavotia_C_AddTemperature::Temperature' has a wrong offset!");

// Function kavotia.kavotia_C.playerHandAnyKey
// 0x0028 (0x0028 - 0x0000)
struct Kavotia_C_PlayerHandAnyKey final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   Key;                                               // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Pressed;                                           // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Kavotia_C_PlayerHandAnyKey) == 0x000008, "Wrong alignment on Kavotia_C_PlayerHandAnyKey");
static_assert(sizeof(Kavotia_C_PlayerHandAnyKey) == 0x000028, "Wrong size on Kavotia_C_PlayerHandAnyKey");
static_assert(offsetof(Kavotia_C_PlayerHandAnyKey, Player) == 0x000000, "Member 'Kavotia_C_PlayerHandAnyKey::Player' has a wrong offset!");
static_assert(offsetof(Kavotia_C_PlayerHandAnyKey, Key) == 0x000008, "Member 'Kavotia_C_PlayerHandAnyKey::Key' has a wrong offset!");
static_assert(offsetof(Kavotia_C_PlayerHandAnyKey, Pressed) == 0x000020, "Member 'Kavotia_C_PlayerHandAnyKey::Pressed' has a wrong offset!");

// Function kavotia.kavotia_C.playerHandMouse
// 0x0010 (0x0010 - 0x0000)
struct Kavotia_C_PlayerHandMouse final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Mouse;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Kavotia_C_PlayerHandMouse) == 0x000008, "Wrong alignment on Kavotia_C_PlayerHandMouse");
static_assert(sizeof(Kavotia_C_PlayerHandMouse) == 0x000010, "Wrong size on Kavotia_C_PlayerHandMouse");
static_assert(offsetof(Kavotia_C_PlayerHandMouse, Player) == 0x000000, "Member 'Kavotia_C_PlayerHandMouse::Player' has a wrong offset!");
static_assert(offsetof(Kavotia_C_PlayerHandMouse, Mouse) == 0x000008, "Member 'Kavotia_C_PlayerHandMouse::Mouse' has a wrong offset!");

// Function kavotia.kavotia_C.playerHandMouseWheel
// 0x0010 (0x0010 - 0x0000)
struct Kavotia_C_PlayerHandMouseWheel final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WheelDelta;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Kavotia_C_PlayerHandMouseWheel) == 0x000008, "Wrong alignment on Kavotia_C_PlayerHandMouseWheel");
static_assert(sizeof(Kavotia_C_PlayerHandMouseWheel) == 0x000010, "Wrong size on Kavotia_C_PlayerHandMouseWheel");
static_assert(offsetof(Kavotia_C_PlayerHandMouseWheel, Player) == 0x000000, "Member 'Kavotia_C_PlayerHandMouseWheel::Player' has a wrong offset!");
static_assert(offsetof(Kavotia_C_PlayerHandMouseWheel, WheelDelta) == 0x000008, "Member 'Kavotia_C_PlayerHandMouseWheel::WheelDelta' has a wrong offset!");

// Function kavotia.kavotia_C.playerHandRelease_LMB
// 0x0008 (0x0008 - 0x0000)
struct Kavotia_C_PlayerHandRelease_LMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Kavotia_C_PlayerHandRelease_LMB) == 0x000008, "Wrong alignment on Kavotia_C_PlayerHandRelease_LMB");
static_assert(sizeof(Kavotia_C_PlayerHandRelease_LMB) == 0x000008, "Wrong size on Kavotia_C_PlayerHandRelease_LMB");
static_assert(offsetof(Kavotia_C_PlayerHandRelease_LMB, Player) == 0x000000, "Member 'Kavotia_C_PlayerHandRelease_LMB::Player' has a wrong offset!");

// Function kavotia.kavotia_C.playerHandRelease_RMB
// 0x0008 (0x0008 - 0x0000)
struct Kavotia_C_PlayerHandRelease_RMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Kavotia_C_PlayerHandRelease_RMB) == 0x000008, "Wrong alignment on Kavotia_C_PlayerHandRelease_RMB");
static_assert(sizeof(Kavotia_C_PlayerHandRelease_RMB) == 0x000008, "Wrong size on Kavotia_C_PlayerHandRelease_RMB");
static_assert(offsetof(Kavotia_C_PlayerHandRelease_RMB, Player) == 0x000000, "Member 'Kavotia_C_PlayerHandRelease_RMB::Player' has a wrong offset!");

// Function kavotia.kavotia_C.exploded
// 0x0010 (0x0010 - 0x0000)
struct Kavotia_C_Exploded final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Kavotia_C_Exploded) == 0x000004, "Wrong alignment on Kavotia_C_Exploded");
static_assert(sizeof(Kavotia_C_Exploded) == 0x000010, "Wrong size on Kavotia_C_Exploded");
static_assert(offsetof(Kavotia_C_Exploded, Damage) == 0x000000, "Member 'Kavotia_C_Exploded::Damage' has a wrong offset!");
static_assert(offsetof(Kavotia_C_Exploded, Location) == 0x000004, "Member 'Kavotia_C_Exploded::Location' has a wrong offset!");

// Function kavotia.kavotia_C.playerHandUse_LMB
// 0x0008 (0x0008 - 0x0000)
struct Kavotia_C_PlayerHandUse_LMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Kavotia_C_PlayerHandUse_LMB) == 0x000008, "Wrong alignment on Kavotia_C_PlayerHandUse_LMB");
static_assert(sizeof(Kavotia_C_PlayerHandUse_LMB) == 0x000008, "Wrong size on Kavotia_C_PlayerHandUse_LMB");
static_assert(offsetof(Kavotia_C_PlayerHandUse_LMB, Player) == 0x000000, "Member 'Kavotia_C_PlayerHandUse_LMB::Player' has a wrong offset!");

// Function kavotia.kavotia_C.playerHandUse_RMB
// 0x0008 (0x0008 - 0x0000)
struct Kavotia_C_PlayerHandUse_RMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Kavotia_C_PlayerHandUse_RMB) == 0x000008, "Wrong alignment on Kavotia_C_PlayerHandUse_RMB");
static_assert(sizeof(Kavotia_C_PlayerHandUse_RMB) == 0x000008, "Wrong size on Kavotia_C_PlayerHandUse_RMB");
static_assert(offsetof(Kavotia_C_PlayerHandUse_RMB, Player) == 0x000000, "Member 'Kavotia_C_PlayerHandUse_RMB::Player' has a wrong offset!");

// Function kavotia.kavotia_C.actionOptionIndex
// 0x0098 (0x0098 - 0x0000)
struct Kavotia_C_ActionOptionIndex final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         Param_Index;                                       // 0x0090(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_interactionActions                       Action;                                            // 0x0094(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Kavotia_C_ActionOptionIndex) == 0x000008, "Wrong alignment on Kavotia_C_ActionOptionIndex");
static_assert(sizeof(Kavotia_C_ActionOptionIndex) == 0x000098, "Wrong size on Kavotia_C_ActionOptionIndex");
static_assert(offsetof(Kavotia_C_ActionOptionIndex, Player) == 0x000000, "Member 'Kavotia_C_ActionOptionIndex::Player' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ActionOptionIndex, Hit) == 0x000008, "Member 'Kavotia_C_ActionOptionIndex::Hit' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ActionOptionIndex, Param_Index) == 0x000090, "Member 'Kavotia_C_ActionOptionIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ActionOptionIndex, Action) == 0x000094, "Member 'Kavotia_C_ActionOptionIndex::Action' has a wrong offset!");

// Function kavotia.kavotia_C.ignite
// 0x0004 (0x0004 - 0x0000)
struct Kavotia_C_Ignite final
{
public:
	float                                         Fuel;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Kavotia_C_Ignite) == 0x000004, "Wrong alignment on Kavotia_C_Ignite");
static_assert(sizeof(Kavotia_C_Ignite) == 0x000004, "Wrong size on Kavotia_C_Ignite");
static_assert(offsetof(Kavotia_C_Ignite, Fuel) == 0x000000, "Member 'Kavotia_C_Ignite::Fuel' has a wrong offset!");

// Function kavotia.kavotia_C.fireDamage
// 0x0004 (0x0004 - 0x0000)
struct Kavotia_C_FireDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Kavotia_C_FireDamage) == 0x000004, "Wrong alignment on Kavotia_C_FireDamage");
static_assert(sizeof(Kavotia_C_FireDamage) == 0x000004, "Wrong size on Kavotia_C_FireDamage");
static_assert(offsetof(Kavotia_C_FireDamage, Damage) == 0x000000, "Member 'Kavotia_C_FireDamage::Damage' has a wrong offset!");

// Function kavotia.kavotia_C.steppedOn
// 0x0090 (0x0090 - 0x0000)
struct Kavotia_C_SteppedOn final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Kavotia_C_SteppedOn) == 0x000008, "Wrong alignment on Kavotia_C_SteppedOn");
static_assert(sizeof(Kavotia_C_SteppedOn) == 0x000090, "Wrong size on Kavotia_C_SteppedOn");
static_assert(offsetof(Kavotia_C_SteppedOn, Player) == 0x000000, "Member 'Kavotia_C_SteppedOn::Player' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SteppedOn, Hit) == 0x000008, "Member 'Kavotia_C_SteppedOn::Hit' has a wrong offset!");

// Function kavotia.kavotia_C.setKey
// 0x0010 (0x0010 - 0x0000)
struct Kavotia_C_SetKey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Kavotia_C_SetKey) == 0x000008, "Wrong alignment on Kavotia_C_SetKey");
static_assert(sizeof(Kavotia_C_SetKey) == 0x000010, "Wrong size on Kavotia_C_SetKey");
static_assert(offsetof(Kavotia_C_SetKey, Key) == 0x000000, "Member 'Kavotia_C_SetKey::Key' has a wrong offset!");

// Function kavotia.kavotia_C.setPropProps
// 0x0003 (0x0003 - 0x0000)
struct Kavotia_C_SetPropProps final
{
public:
	bool                                          Static;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Frozen;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Active;                                            // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Kavotia_C_SetPropProps) == 0x000001, "Wrong alignment on Kavotia_C_SetPropProps");
static_assert(sizeof(Kavotia_C_SetPropProps) == 0x000003, "Wrong size on Kavotia_C_SetPropProps");
static_assert(offsetof(Kavotia_C_SetPropProps, Static) == 0x000000, "Member 'Kavotia_C_SetPropProps::Static' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SetPropProps, Frozen) == 0x000001, "Member 'Kavotia_C_SetPropProps::Frozen' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SetPropProps, Active) == 0x000002, "Member 'Kavotia_C_SetPropProps::Active' has a wrong offset!");

// Function kavotia.kavotia_C.virus
// 0x0001 (0x0001 - 0x0000)
struct Kavotia_C_Virus final
{
public:
	bool                                          Activate;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Kavotia_C_Virus) == 0x000001, "Wrong alignment on Kavotia_C_Virus");
static_assert(sizeof(Kavotia_C_Virus) == 0x000001, "Wrong size on Kavotia_C_Virus");
static_assert(offsetof(Kavotia_C_Virus, Activate) == 0x000000, "Member 'Kavotia_C_Virus::Activate' has a wrong offset!");

// Function kavotia.kavotia_C.leaveWaterOrigin
// 0x0008 (0x0008 - 0x0000)
struct Kavotia_C_LeaveWaterOrigin final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Kavotia_C_LeaveWaterOrigin) == 0x000008, "Wrong alignment on Kavotia_C_LeaveWaterOrigin");
static_assert(sizeof(Kavotia_C_LeaveWaterOrigin) == 0x000008, "Wrong size on Kavotia_C_LeaveWaterOrigin");
static_assert(offsetof(Kavotia_C_LeaveWaterOrigin, Water) == 0x000000, "Member 'Kavotia_C_LeaveWaterOrigin::Water' has a wrong offset!");

// Function kavotia.kavotia_C.enterWaterOrigin
// 0x0008 (0x0008 - 0x0000)
struct Kavotia_C_EnterWaterOrigin final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Kavotia_C_EnterWaterOrigin) == 0x000008, "Wrong alignment on Kavotia_C_EnterWaterOrigin");
static_assert(sizeof(Kavotia_C_EnterWaterOrigin) == 0x000008, "Wrong size on Kavotia_C_EnterWaterOrigin");
static_assert(offsetof(Kavotia_C_EnterWaterOrigin, Water) == 0x000000, "Member 'Kavotia_C_EnterWaterOrigin::Water' has a wrong offset!");

// Function kavotia.kavotia_C.leaveWater
// 0x0008 (0x0008 - 0x0000)
struct Kavotia_C_LeaveWater final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Kavotia_C_LeaveWater) == 0x000008, "Wrong alignment on Kavotia_C_LeaveWater");
static_assert(sizeof(Kavotia_C_LeaveWater) == 0x000008, "Wrong size on Kavotia_C_LeaveWater");
static_assert(offsetof(Kavotia_C_LeaveWater, Water) == 0x000000, "Member 'Kavotia_C_LeaveWater::Water' has a wrong offset!");

// Function kavotia.kavotia_C.enterWater
// 0x0008 (0x0008 - 0x0000)
struct Kavotia_C_EnterWater final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Kavotia_C_EnterWater) == 0x000008, "Wrong alignment on Kavotia_C_EnterWater");
static_assert(sizeof(Kavotia_C_EnterWater) == 0x000008, "Wrong size on Kavotia_C_EnterWater");
static_assert(offsetof(Kavotia_C_EnterWater, Water) == 0x000000, "Member 'Kavotia_C_EnterWater::Water' has a wrong offset!");

// Function kavotia.kavotia_C.ImpactDamage
// 0x00A8 (0x00A8 - 0x0000)
struct Kavotia_C_ImpactDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0004(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_2A91[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0090(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Impact;                                            // 0x0098(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Kavotia_C_ImpactDamage) == 0x000008, "Wrong alignment on Kavotia_C_ImpactDamage");
static_assert(sizeof(Kavotia_C_ImpactDamage) == 0x0000A8, "Wrong size on Kavotia_C_ImpactDamage");
static_assert(offsetof(Kavotia_C_ImpactDamage, Damage) == 0x000000, "Member 'Kavotia_C_ImpactDamage::Damage' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ImpactDamage, Hit) == 0x000004, "Member 'Kavotia_C_ImpactDamage::Hit' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ImpactDamage, Actor) == 0x000090, "Member 'Kavotia_C_ImpactDamage::Actor' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ImpactDamage, Impact) == 0x000098, "Member 'Kavotia_C_ImpactDamage::Impact' has a wrong offset!");

// Function kavotia.kavotia_C.OnSuccess_D3BAAC524A6477CC38D5F8B2F4C4058D
// 0x0001 (0x0001 - 0x0000)
struct Kavotia_C_OnSuccess_D3BAAC524A6477CC38D5F8B2F4C4058D final
{
public:
	EPathFollowingResult                          MovementResult;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Kavotia_C_OnSuccess_D3BAAC524A6477CC38D5F8B2F4C4058D) == 0x000001, "Wrong alignment on Kavotia_C_OnSuccess_D3BAAC524A6477CC38D5F8B2F4C4058D");
static_assert(sizeof(Kavotia_C_OnSuccess_D3BAAC524A6477CC38D5F8B2F4C4058D) == 0x000001, "Wrong size on Kavotia_C_OnSuccess_D3BAAC524A6477CC38D5F8B2F4C4058D");
static_assert(offsetof(Kavotia_C_OnSuccess_D3BAAC524A6477CC38D5F8B2F4C4058D, MovementResult) == 0x000000, "Member 'Kavotia_C_OnSuccess_D3BAAC524A6477CC38D5F8B2F4C4058D::MovementResult' has a wrong offset!");

// Function kavotia.kavotia_C.OnFail_D3BAAC524A6477CC38D5F8B2F4C4058D
// 0x0001 (0x0001 - 0x0000)
struct Kavotia_C_OnFail_D3BAAC524A6477CC38D5F8B2F4C4058D final
{
public:
	EPathFollowingResult                          MovementResult;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Kavotia_C_OnFail_D3BAAC524A6477CC38D5F8B2F4C4058D) == 0x000001, "Wrong alignment on Kavotia_C_OnFail_D3BAAC524A6477CC38D5F8B2F4C4058D");
static_assert(sizeof(Kavotia_C_OnFail_D3BAAC524A6477CC38D5F8B2F4C4058D) == 0x000001, "Wrong size on Kavotia_C_OnFail_D3BAAC524A6477CC38D5F8B2F4C4058D");
static_assert(offsetof(Kavotia_C_OnFail_D3BAAC524A6477CC38D5F8B2F4C4058D, MovementResult) == 0x000000, "Member 'Kavotia_C_OnFail_D3BAAC524A6477CC38D5F8B2F4C4058D::MovementResult' has a wrong offset!");

// Function kavotia.kavotia_C.OnCompleted_7446BBA34E6333FAAF6EF2BEF3744423
// 0x0008 (0x0008 - 0x0000)
struct Kavotia_C_OnCompleted_7446BBA34E6333FAAF6EF2BEF3744423 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Kavotia_C_OnCompleted_7446BBA34E6333FAAF6EF2BEF3744423) == 0x000004, "Wrong alignment on Kavotia_C_OnCompleted_7446BBA34E6333FAAF6EF2BEF3744423");
static_assert(sizeof(Kavotia_C_OnCompleted_7446BBA34E6333FAAF6EF2BEF3744423) == 0x000008, "Wrong size on Kavotia_C_OnCompleted_7446BBA34E6333FAAF6EF2BEF3744423");
static_assert(offsetof(Kavotia_C_OnCompleted_7446BBA34E6333FAAF6EF2BEF3744423, NotifyName) == 0x000000, "Member 'Kavotia_C_OnCompleted_7446BBA34E6333FAAF6EF2BEF3744423::NotifyName' has a wrong offset!");

// Function kavotia.kavotia_C.OnBlendOut_7446BBA34E6333FAAF6EF2BEF3744423
// 0x0008 (0x0008 - 0x0000)
struct Kavotia_C_OnBlendOut_7446BBA34E6333FAAF6EF2BEF3744423 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Kavotia_C_OnBlendOut_7446BBA34E6333FAAF6EF2BEF3744423) == 0x000004, "Wrong alignment on Kavotia_C_OnBlendOut_7446BBA34E6333FAAF6EF2BEF3744423");
static_assert(sizeof(Kavotia_C_OnBlendOut_7446BBA34E6333FAAF6EF2BEF3744423) == 0x000008, "Wrong size on Kavotia_C_OnBlendOut_7446BBA34E6333FAAF6EF2BEF3744423");
static_assert(offsetof(Kavotia_C_OnBlendOut_7446BBA34E6333FAAF6EF2BEF3744423, NotifyName) == 0x000000, "Member 'Kavotia_C_OnBlendOut_7446BBA34E6333FAAF6EF2BEF3744423::NotifyName' has a wrong offset!");

// Function kavotia.kavotia_C.OnInterrupted_7446BBA34E6333FAAF6EF2BEF3744423
// 0x0008 (0x0008 - 0x0000)
struct Kavotia_C_OnInterrupted_7446BBA34E6333FAAF6EF2BEF3744423 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Kavotia_C_OnInterrupted_7446BBA34E6333FAAF6EF2BEF3744423) == 0x000004, "Wrong alignment on Kavotia_C_OnInterrupted_7446BBA34E6333FAAF6EF2BEF3744423");
static_assert(sizeof(Kavotia_C_OnInterrupted_7446BBA34E6333FAAF6EF2BEF3744423) == 0x000008, "Wrong size on Kavotia_C_OnInterrupted_7446BBA34E6333FAAF6EF2BEF3744423");
static_assert(offsetof(Kavotia_C_OnInterrupted_7446BBA34E6333FAAF6EF2BEF3744423, NotifyName) == 0x000000, "Member 'Kavotia_C_OnInterrupted_7446BBA34E6333FAAF6EF2BEF3744423::NotifyName' has a wrong offset!");

// Function kavotia.kavotia_C.OnNotifyBegin_7446BBA34E6333FAAF6EF2BEF3744423
// 0x0008 (0x0008 - 0x0000)
struct Kavotia_C_OnNotifyBegin_7446BBA34E6333FAAF6EF2BEF3744423 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Kavotia_C_OnNotifyBegin_7446BBA34E6333FAAF6EF2BEF3744423) == 0x000004, "Wrong alignment on Kavotia_C_OnNotifyBegin_7446BBA34E6333FAAF6EF2BEF3744423");
static_assert(sizeof(Kavotia_C_OnNotifyBegin_7446BBA34E6333FAAF6EF2BEF3744423) == 0x000008, "Wrong size on Kavotia_C_OnNotifyBegin_7446BBA34E6333FAAF6EF2BEF3744423");
static_assert(offsetof(Kavotia_C_OnNotifyBegin_7446BBA34E6333FAAF6EF2BEF3744423, NotifyName) == 0x000000, "Member 'Kavotia_C_OnNotifyBegin_7446BBA34E6333FAAF6EF2BEF3744423::NotifyName' has a wrong offset!");

// Function kavotia.kavotia_C.OnNotifyEnd_7446BBA34E6333FAAF6EF2BEF3744423
// 0x0008 (0x0008 - 0x0000)
struct Kavotia_C_OnNotifyEnd_7446BBA34E6333FAAF6EF2BEF3744423 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Kavotia_C_OnNotifyEnd_7446BBA34E6333FAAF6EF2BEF3744423) == 0x000004, "Wrong alignment on Kavotia_C_OnNotifyEnd_7446BBA34E6333FAAF6EF2BEF3744423");
static_assert(sizeof(Kavotia_C_OnNotifyEnd_7446BBA34E6333FAAF6EF2BEF3744423) == 0x000008, "Wrong size on Kavotia_C_OnNotifyEnd_7446BBA34E6333FAAF6EF2BEF3744423");
static_assert(offsetof(Kavotia_C_OnNotifyEnd_7446BBA34E6333FAAF6EF2BEF3744423, NotifyName) == 0x000000, "Member 'Kavotia_C_OnNotifyEnd_7446BBA34E6333FAAF6EF2BEF3744423::NotifyName' has a wrong offset!");

// Function kavotia.kavotia_C.OnCompleted_8A6E6C9B4584D995E2F1F99BEB392865
// 0x0008 (0x0008 - 0x0000)
struct Kavotia_C_OnCompleted_8A6E6C9B4584D995E2F1F99BEB392865 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Kavotia_C_OnCompleted_8A6E6C9B4584D995E2F1F99BEB392865) == 0x000004, "Wrong alignment on Kavotia_C_OnCompleted_8A6E6C9B4584D995E2F1F99BEB392865");
static_assert(sizeof(Kavotia_C_OnCompleted_8A6E6C9B4584D995E2F1F99BEB392865) == 0x000008, "Wrong size on Kavotia_C_OnCompleted_8A6E6C9B4584D995E2F1F99BEB392865");
static_assert(offsetof(Kavotia_C_OnCompleted_8A6E6C9B4584D995E2F1F99BEB392865, NotifyName) == 0x000000, "Member 'Kavotia_C_OnCompleted_8A6E6C9B4584D995E2F1F99BEB392865::NotifyName' has a wrong offset!");

// Function kavotia.kavotia_C.OnBlendOut_8A6E6C9B4584D995E2F1F99BEB392865
// 0x0008 (0x0008 - 0x0000)
struct Kavotia_C_OnBlendOut_8A6E6C9B4584D995E2F1F99BEB392865 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Kavotia_C_OnBlendOut_8A6E6C9B4584D995E2F1F99BEB392865) == 0x000004, "Wrong alignment on Kavotia_C_OnBlendOut_8A6E6C9B4584D995E2F1F99BEB392865");
static_assert(sizeof(Kavotia_C_OnBlendOut_8A6E6C9B4584D995E2F1F99BEB392865) == 0x000008, "Wrong size on Kavotia_C_OnBlendOut_8A6E6C9B4584D995E2F1F99BEB392865");
static_assert(offsetof(Kavotia_C_OnBlendOut_8A6E6C9B4584D995E2F1F99BEB392865, NotifyName) == 0x000000, "Member 'Kavotia_C_OnBlendOut_8A6E6C9B4584D995E2F1F99BEB392865::NotifyName' has a wrong offset!");

// Function kavotia.kavotia_C.OnInterrupted_8A6E6C9B4584D995E2F1F99BEB392865
// 0x0008 (0x0008 - 0x0000)
struct Kavotia_C_OnInterrupted_8A6E6C9B4584D995E2F1F99BEB392865 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Kavotia_C_OnInterrupted_8A6E6C9B4584D995E2F1F99BEB392865) == 0x000004, "Wrong alignment on Kavotia_C_OnInterrupted_8A6E6C9B4584D995E2F1F99BEB392865");
static_assert(sizeof(Kavotia_C_OnInterrupted_8A6E6C9B4584D995E2F1F99BEB392865) == 0x000008, "Wrong size on Kavotia_C_OnInterrupted_8A6E6C9B4584D995E2F1F99BEB392865");
static_assert(offsetof(Kavotia_C_OnInterrupted_8A6E6C9B4584D995E2F1F99BEB392865, NotifyName) == 0x000000, "Member 'Kavotia_C_OnInterrupted_8A6E6C9B4584D995E2F1F99BEB392865::NotifyName' has a wrong offset!");

// Function kavotia.kavotia_C.OnNotifyBegin_8A6E6C9B4584D995E2F1F99BEB392865
// 0x0008 (0x0008 - 0x0000)
struct Kavotia_C_OnNotifyBegin_8A6E6C9B4584D995E2F1F99BEB392865 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Kavotia_C_OnNotifyBegin_8A6E6C9B4584D995E2F1F99BEB392865) == 0x000004, "Wrong alignment on Kavotia_C_OnNotifyBegin_8A6E6C9B4584D995E2F1F99BEB392865");
static_assert(sizeof(Kavotia_C_OnNotifyBegin_8A6E6C9B4584D995E2F1F99BEB392865) == 0x000008, "Wrong size on Kavotia_C_OnNotifyBegin_8A6E6C9B4584D995E2F1F99BEB392865");
static_assert(offsetof(Kavotia_C_OnNotifyBegin_8A6E6C9B4584D995E2F1F99BEB392865, NotifyName) == 0x000000, "Member 'Kavotia_C_OnNotifyBegin_8A6E6C9B4584D995E2F1F99BEB392865::NotifyName' has a wrong offset!");

// Function kavotia.kavotia_C.OnNotifyEnd_8A6E6C9B4584D995E2F1F99BEB392865
// 0x0008 (0x0008 - 0x0000)
struct Kavotia_C_OnNotifyEnd_8A6E6C9B4584D995E2F1F99BEB392865 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Kavotia_C_OnNotifyEnd_8A6E6C9B4584D995E2F1F99BEB392865) == 0x000004, "Wrong alignment on Kavotia_C_OnNotifyEnd_8A6E6C9B4584D995E2F1F99BEB392865");
static_assert(sizeof(Kavotia_C_OnNotifyEnd_8A6E6C9B4584D995E2F1F99BEB392865) == 0x000008, "Wrong size on Kavotia_C_OnNotifyEnd_8A6E6C9B4584D995E2F1F99BEB392865");
static_assert(offsetof(Kavotia_C_OnNotifyEnd_8A6E6C9B4584D995E2F1F99BEB392865, NotifyName) == 0x000000, "Member 'Kavotia_C_OnNotifyEnd_8A6E6C9B4584D995E2F1F99BEB392865::NotifyName' has a wrong offset!");

// Function kavotia.kavotia_C.OnSuccess_09A2354C485D4386CB2E13BC61C68416
// 0x0001 (0x0001 - 0x0000)
struct Kavotia_C_OnSuccess_09A2354C485D4386CB2E13BC61C68416 final
{
public:
	EPathFollowingResult                          MovementResult;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Kavotia_C_OnSuccess_09A2354C485D4386CB2E13BC61C68416) == 0x000001, "Wrong alignment on Kavotia_C_OnSuccess_09A2354C485D4386CB2E13BC61C68416");
static_assert(sizeof(Kavotia_C_OnSuccess_09A2354C485D4386CB2E13BC61C68416) == 0x000001, "Wrong size on Kavotia_C_OnSuccess_09A2354C485D4386CB2E13BC61C68416");
static_assert(offsetof(Kavotia_C_OnSuccess_09A2354C485D4386CB2E13BC61C68416, MovementResult) == 0x000000, "Member 'Kavotia_C_OnSuccess_09A2354C485D4386CB2E13BC61C68416::MovementResult' has a wrong offset!");

// Function kavotia.kavotia_C.OnFail_09A2354C485D4386CB2E13BC61C68416
// 0x0001 (0x0001 - 0x0000)
struct Kavotia_C_OnFail_09A2354C485D4386CB2E13BC61C68416 final
{
public:
	EPathFollowingResult                          MovementResult;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Kavotia_C_OnFail_09A2354C485D4386CB2E13BC61C68416) == 0x000001, "Wrong alignment on Kavotia_C_OnFail_09A2354C485D4386CB2E13BC61C68416");
static_assert(sizeof(Kavotia_C_OnFail_09A2354C485D4386CB2E13BC61C68416) == 0x000001, "Wrong size on Kavotia_C_OnFail_09A2354C485D4386CB2E13BC61C68416");
static_assert(offsetof(Kavotia_C_OnFail_09A2354C485D4386CB2E13BC61C68416, MovementResult) == 0x000000, "Member 'Kavotia_C_OnFail_09A2354C485D4386CB2E13BC61C68416::MovementResult' has a wrong offset!");

// Function kavotia.kavotia_C.updateTarget
// 0x0010 (0x0010 - 0x0000)
struct Kavotia_C_UpdateTarget final
{
public:
	class APawn*                                  Param_LookingAt;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A92[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Kavotia_C_UpdateTarget) == 0x000008, "Wrong alignment on Kavotia_C_UpdateTarget");
static_assert(sizeof(Kavotia_C_UpdateTarget) == 0x000010, "Wrong size on Kavotia_C_UpdateTarget");
static_assert(offsetof(Kavotia_C_UpdateTarget, Param_LookingAt) == 0x000000, "Member 'Kavotia_C_UpdateTarget::Param_LookingAt' has a wrong offset!");
static_assert(offsetof(Kavotia_C_UpdateTarget, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'Kavotia_C_UpdateTarget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_UpdateTarget, CallFunc_SelectFloat_ReturnValue) == 0x00000C, "Member 'Kavotia_C_UpdateTarget::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");

// Function kavotia.kavotia_C.sensePawns
// 0x0298 (0x0298 - 0x0000)
struct Kavotia_C_SensePawns final
{
public:
	class APawn*                                  OutputPin;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      Obj;                                               // 0x0008(0x0010)(Edit, BlueprintVisible)
	TArray<class UClass*>                         Filter;                                            // 0x0018(0x0010)(Edit, BlueprintVisible)
	TArray<class AActor*>                         Objs;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A93[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         K2Node_MakeArray_Array;                            // 0x0048(0x0010)(ReferenceParm)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A94[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetDistanceTo_ReturnValue;                // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A95[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array_1;                          // 0x0070(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0098(0x0010)(ConstParm, ReferenceParm)
	TArray<class AActor*>                         Temp_object_Variable_1;                            // 0x00A8(0x0010)(ConstParm, ReferenceParm)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A96[0x4];                                     // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_K2_GetRootComponent_ReturnValue;          // 0x00C8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A97[0x3];                                     // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetComponentBounds_Origin;                // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentBounds_BoxExtent;             // 0x00E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetComponentBounds_SphereRadius;          // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_DynamicCast_AsPawn;                         // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A98[0x3];                                     // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDistanceTo_ReturnValue_1;              // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A99[0x3];                                     // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RandomPointInBoundingBox_ReturnValue;     // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x0154(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x01DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x01DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x01DE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x01DF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakHitResult_Time;                      // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x01E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x01F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0200(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x020C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0228(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0244(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0250(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A9A[0x4];                                     // 0x025C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      CallFunc_obj_pawn_obj;                             // 0x0260(0x0010)(ReferenceParm)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A9B[0x3];                                     // 0x0271(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0274(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_SphereOverlapActors_OutActors;            // 0x0280(0x0010)(ReferenceParm)
	bool                                          CallFunc_SphereOverlapActors_ReturnValue;          // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Kavotia_C_SensePawns) == 0x000008, "Wrong alignment on Kavotia_C_SensePawns");
static_assert(sizeof(Kavotia_C_SensePawns) == 0x000298, "Wrong size on Kavotia_C_SensePawns");
static_assert(offsetof(Kavotia_C_SensePawns, OutputPin) == 0x000000, "Member 'Kavotia_C_SensePawns::OutputPin' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, Obj) == 0x000008, "Member 'Kavotia_C_SensePawns::Obj' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, Filter) == 0x000018, "Member 'Kavotia_C_SensePawns::Filter' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, Objs) == 0x000028, "Member 'Kavotia_C_SensePawns::Objs' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, Temp_int_Loop_Counter_Variable) == 0x000038, "Member 'Kavotia_C_SensePawns::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_Add_IntInt_ReturnValue) == 0x00003C, "Member 'Kavotia_C_SensePawns::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, Temp_int_Array_Index_Variable) == 0x000040, "Member 'Kavotia_C_SensePawns::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, K2Node_MakeArray_Array) == 0x000048, "Member 'Kavotia_C_SensePawns::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_GetPlayerPawn_ReturnValue) == 0x000058, "Member 'Kavotia_C_SensePawns::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_IsValid_ReturnValue) == 0x000060, "Member 'Kavotia_C_SensePawns::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_GetDistanceTo_ReturnValue) == 0x000064, "Member 'Kavotia_C_SensePawns::CallFunc_GetDistanceTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000068, "Member 'Kavotia_C_SensePawns::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, K2Node_MakeArray_Array_1) == 0x000070, "Member 'Kavotia_C_SensePawns::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000080, "Member 'Kavotia_C_SensePawns::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_GetForwardVector_ReturnValue) == 0x00008C, "Member 'Kavotia_C_SensePawns::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, Temp_object_Variable) == 0x000098, "Member 'Kavotia_C_SensePawns::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, Temp_object_Variable_1) == 0x0000A8, "Member 'Kavotia_C_SensePawns::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_Array_Get_Item) == 0x0000B8, "Member 'Kavotia_C_SensePawns::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_Array_Length_ReturnValue) == 0x0000C0, "Member 'Kavotia_C_SensePawns::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_K2_GetRootComponent_ReturnValue) == 0x0000C8, "Member 'Kavotia_C_SensePawns::CallFunc_K2_GetRootComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_Less_IntInt_ReturnValue) == 0x0000D0, "Member 'Kavotia_C_SensePawns::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_GetComponentBounds_Origin) == 0x0000D4, "Member 'Kavotia_C_SensePawns::CallFunc_GetComponentBounds_Origin' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_GetComponentBounds_BoxExtent) == 0x0000E0, "Member 'Kavotia_C_SensePawns::CallFunc_GetComponentBounds_BoxExtent' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_GetComponentBounds_SphereRadius) == 0x0000EC, "Member 'Kavotia_C_SensePawns::CallFunc_GetComponentBounds_SphereRadius' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, K2Node_DynamicCast_AsPawn) == 0x0000F0, "Member 'Kavotia_C_SensePawns::K2Node_DynamicCast_AsPawn' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, K2Node_DynamicCast_bSuccess) == 0x0000F8, "Member 'Kavotia_C_SensePawns::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000FC, "Member 'Kavotia_C_SensePawns::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000108, "Member 'Kavotia_C_SensePawns::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_GetDistanceTo_ReturnValue_1) == 0x000114, "Member 'Kavotia_C_SensePawns::CallFunc_GetDistanceTo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_Normal_ReturnValue) == 0x000118, "Member 'Kavotia_C_SensePawns::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000124, "Member 'Kavotia_C_SensePawns::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_Dot_VectorVector_ReturnValue) == 0x000128, "Member 'Kavotia_C_SensePawns::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00012C, "Member 'Kavotia_C_SensePawns::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000138, "Member 'Kavotia_C_SensePawns::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_Add_VectorVector_ReturnValue) == 0x00013C, "Member 'Kavotia_C_SensePawns::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_RandomPointInBoundingBox_ReturnValue) == 0x000148, "Member 'Kavotia_C_SensePawns::CallFunc_RandomPointInBoundingBox_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_LineTraceSingleForObjects_OutHit) == 0x000154, "Member 'Kavotia_C_SensePawns::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x0001DC, "Member 'Kavotia_C_SensePawns::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_Array_RemoveItem_ReturnValue) == 0x0001DD, "Member 'Kavotia_C_SensePawns::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_BreakHitResult_bBlockingHit) == 0x0001DE, "Member 'Kavotia_C_SensePawns::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_BreakHitResult_bInitialOverlap) == 0x0001DF, "Member 'Kavotia_C_SensePawns::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_BreakHitResult_Time) == 0x0001E0, "Member 'Kavotia_C_SensePawns::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_BreakHitResult_Distance) == 0x0001E4, "Member 'Kavotia_C_SensePawns::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_BreakHitResult_Location) == 0x0001E8, "Member 'Kavotia_C_SensePawns::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_BreakHitResult_ImpactPoint) == 0x0001F4, "Member 'Kavotia_C_SensePawns::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_BreakHitResult_Normal) == 0x000200, "Member 'Kavotia_C_SensePawns::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_BreakHitResult_ImpactNormal) == 0x00020C, "Member 'Kavotia_C_SensePawns::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_BreakHitResult_PhysMat) == 0x000218, "Member 'Kavotia_C_SensePawns::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_BreakHitResult_HitActor) == 0x000220, "Member 'Kavotia_C_SensePawns::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_BreakHitResult_HitComponent) == 0x000228, "Member 'Kavotia_C_SensePawns::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_BreakHitResult_HitBoneName) == 0x000230, "Member 'Kavotia_C_SensePawns::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_BreakHitResult_HitItem) == 0x000238, "Member 'Kavotia_C_SensePawns::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_BreakHitResult_ElementIndex) == 0x00023C, "Member 'Kavotia_C_SensePawns::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_BreakHitResult_FaceIndex) == 0x000240, "Member 'Kavotia_C_SensePawns::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_BreakHitResult_TraceStart) == 0x000244, "Member 'Kavotia_C_SensePawns::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_BreakHitResult_TraceEnd) == 0x000250, "Member 'Kavotia_C_SensePawns::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_obj_pawn_obj) == 0x000260, "Member 'Kavotia_C_SensePawns::CallFunc_obj_pawn_obj' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000270, "Member 'Kavotia_C_SensePawns::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000274, "Member 'Kavotia_C_SensePawns::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_SphereOverlapActors_OutActors) == 0x000280, "Member 'Kavotia_C_SensePawns::CallFunc_SphereOverlapActors_OutActors' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SensePawns, CallFunc_SphereOverlapActors_ReturnValue) == 0x000290, "Member 'Kavotia_C_SensePawns::CallFunc_SphereOverlapActors_ReturnValue' has a wrong offset!");

// Function kavotia.kavotia_C.walkLoc
// 0x01E0 (0x01E0 - 0x0000)
struct Kavotia_C_WalkLoc final
{
public:
	struct FVector                                RandomLocation;                                    // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RandomBoolWithWeight_ReturnValue;         // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A9C[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloat_ReturnValue;                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SignOfFloat_ReturnValue;                  // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue;                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_2;         // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A9D[0x4];                                     // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0060(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A9E[0x3];                                     // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegAtan2_ReturnValue;                     // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_3;        // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue_1;            // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_4;        // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetRandomReachablePointInRadius_RandomLocation; // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_GetRandomReachablePointInRadius_ReturnValue; // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A9F[0x3];                                     // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_ProjectPointToNavigation_ProjectedLocation; // 0x00F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_ProjectPointToNavigation_ReturnValue;  // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2AA0[0x3];                                     // 0x0105(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_5;        // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AA1[0x4];                                     // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      CallFunc_obj_statDyn_obj;                          // 0x0118(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_6;        // 0x0128(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x0134(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x01BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x01BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2AA2[0x2];                                     // 0x01BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_7;        // 0x01C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetRandomReachablePointInRadius_RandomLocation_1; // 0x01CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_GetRandomReachablePointInRadius_ReturnValue_1; // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Kavotia_C_WalkLoc) == 0x000008, "Wrong alignment on Kavotia_C_WalkLoc");
static_assert(sizeof(Kavotia_C_WalkLoc) == 0x0001E0, "Wrong size on Kavotia_C_WalkLoc");
static_assert(offsetof(Kavotia_C_WalkLoc, RandomLocation) == 0x000000, "Member 'Kavotia_C_WalkLoc::RandomLocation' has a wrong offset!");
static_assert(offsetof(Kavotia_C_WalkLoc, CallFunc_RandomBoolWithWeight_ReturnValue) == 0x00000C, "Member 'Kavotia_C_WalkLoc::CallFunc_RandomBoolWithWeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_WalkLoc, CallFunc_MakeVector_ReturnValue) == 0x000010, "Member 'Kavotia_C_WalkLoc::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_WalkLoc, CallFunc_RandomFloatInRange_ReturnValue) == 0x00001C, "Member 'Kavotia_C_WalkLoc::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_WalkLoc, CallFunc_RandomFloat_ReturnValue) == 0x000020, "Member 'Kavotia_C_WalkLoc::CallFunc_RandomFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_WalkLoc, CallFunc_SignOfFloat_ReturnValue) == 0x000024, "Member 'Kavotia_C_WalkLoc::CallFunc_SignOfFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_WalkLoc, CallFunc_Ease_ReturnValue) == 0x000028, "Member 'Kavotia_C_WalkLoc::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_WalkLoc, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x00002C, "Member 'Kavotia_C_WalkLoc::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Kavotia_C_WalkLoc, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000030, "Member 'Kavotia_C_WalkLoc::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_WalkLoc, CallFunc_MakeVector_ReturnValue_1) == 0x000034, "Member 'Kavotia_C_WalkLoc::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Kavotia_C_WalkLoc, CallFunc_RandomFloatInRange_ReturnValue_2) == 0x000040, "Member 'Kavotia_C_WalkLoc::CallFunc_RandomFloatInRange_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Kavotia_C_WalkLoc, CallFunc_RotateAngleAxis_ReturnValue) == 0x000044, "Member 'Kavotia_C_WalkLoc::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_WalkLoc, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000050, "Member 'Kavotia_C_WalkLoc::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_WalkLoc, Temp_object_Variable) == 0x000060, "Member 'Kavotia_C_WalkLoc::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(Kavotia_C_WalkLoc, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000070, "Member 'Kavotia_C_WalkLoc::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Kavotia_C_WalkLoc, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x00007C, "Member 'Kavotia_C_WalkLoc::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Kavotia_C_WalkLoc, CallFunc_IsValid_ReturnValue) == 0x000088, "Member 'Kavotia_C_WalkLoc::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_WalkLoc, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00008C, "Member 'Kavotia_C_WalkLoc::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_WalkLoc, CallFunc_BreakVector_X) == 0x000098, "Member 'Kavotia_C_WalkLoc::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(Kavotia_C_WalkLoc, CallFunc_BreakVector_Y) == 0x00009C, "Member 'Kavotia_C_WalkLoc::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(Kavotia_C_WalkLoc, CallFunc_BreakVector_Z) == 0x0000A0, "Member 'Kavotia_C_WalkLoc::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(Kavotia_C_WalkLoc, CallFunc_DegAtan2_ReturnValue) == 0x0000A4, "Member 'Kavotia_C_WalkLoc::CallFunc_DegAtan2_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_WalkLoc, CallFunc_K2_GetActorLocation_ReturnValue_3) == 0x0000A8, "Member 'Kavotia_C_WalkLoc::CallFunc_K2_GetActorLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Kavotia_C_WalkLoc, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000B4, "Member 'Kavotia_C_WalkLoc::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_WalkLoc, CallFunc_RotateAngleAxis_ReturnValue_1) == 0x0000B8, "Member 'Kavotia_C_WalkLoc::CallFunc_RotateAngleAxis_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Kavotia_C_WalkLoc, CallFunc_Add_VectorVector_ReturnValue) == 0x0000C4, "Member 'Kavotia_C_WalkLoc::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_WalkLoc, CallFunc_K2_GetActorLocation_ReturnValue_4) == 0x0000D0, "Member 'Kavotia_C_WalkLoc::CallFunc_K2_GetActorLocation_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(Kavotia_C_WalkLoc, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0000DC, "Member 'Kavotia_C_WalkLoc::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Kavotia_C_WalkLoc, CallFunc_K2_GetRandomReachablePointInRadius_RandomLocation) == 0x0000E8, "Member 'Kavotia_C_WalkLoc::CallFunc_K2_GetRandomReachablePointInRadius_RandomLocation' has a wrong offset!");
static_assert(offsetof(Kavotia_C_WalkLoc, CallFunc_K2_GetRandomReachablePointInRadius_ReturnValue) == 0x0000F4, "Member 'Kavotia_C_WalkLoc::CallFunc_K2_GetRandomReachablePointInRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_WalkLoc, CallFunc_K2_ProjectPointToNavigation_ProjectedLocation) == 0x0000F8, "Member 'Kavotia_C_WalkLoc::CallFunc_K2_ProjectPointToNavigation_ProjectedLocation' has a wrong offset!");
static_assert(offsetof(Kavotia_C_WalkLoc, CallFunc_K2_ProjectPointToNavigation_ReturnValue) == 0x000104, "Member 'Kavotia_C_WalkLoc::CallFunc_K2_ProjectPointToNavigation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_WalkLoc, CallFunc_K2_GetActorLocation_ReturnValue_5) == 0x000108, "Member 'Kavotia_C_WalkLoc::CallFunc_K2_GetActorLocation_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(Kavotia_C_WalkLoc, CallFunc_obj_statDyn_obj) == 0x000118, "Member 'Kavotia_C_WalkLoc::CallFunc_obj_statDyn_obj' has a wrong offset!");
static_assert(offsetof(Kavotia_C_WalkLoc, CallFunc_K2_GetActorLocation_ReturnValue_6) == 0x000128, "Member 'Kavotia_C_WalkLoc::CallFunc_K2_GetActorLocation_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(Kavotia_C_WalkLoc, CallFunc_LineTraceSingleForObjects_OutHit) == 0x000134, "Member 'Kavotia_C_WalkLoc::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(Kavotia_C_WalkLoc, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x0001BC, "Member 'Kavotia_C_WalkLoc::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(Kavotia_C_WalkLoc, CallFunc_IsValid_ReturnValue_1) == 0x0001BD, "Member 'Kavotia_C_WalkLoc::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Kavotia_C_WalkLoc, CallFunc_K2_GetActorLocation_ReturnValue_7) == 0x0001C0, "Member 'Kavotia_C_WalkLoc::CallFunc_K2_GetActorLocation_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(Kavotia_C_WalkLoc, CallFunc_K2_GetRandomReachablePointInRadius_RandomLocation_1) == 0x0001CC, "Member 'Kavotia_C_WalkLoc::CallFunc_K2_GetRandomReachablePointInRadius_RandomLocation_1' has a wrong offset!");
static_assert(offsetof(Kavotia_C_WalkLoc, CallFunc_K2_GetRandomReachablePointInRadius_ReturnValue_1) == 0x0001D8, "Member 'Kavotia_C_WalkLoc::CallFunc_K2_GetRandomReachablePointInRadius_ReturnValue_1' has a wrong offset!");

// Function kavotia.kavotia_C.alert
// 0x0010 (0x0010 - 0x0000)
struct Kavotia_C_Alert final
{
public:
	class APawn*                                  Param_LookingAt;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Kavotia_C_Alert) == 0x000008, "Wrong alignment on Kavotia_C_Alert");
static_assert(sizeof(Kavotia_C_Alert) == 0x000010, "Wrong size on Kavotia_C_Alert");
static_assert(offsetof(Kavotia_C_Alert, Param_LookingAt) == 0x000000, "Member 'Kavotia_C_Alert::Param_LookingAt' has a wrong offset!");
static_assert(offsetof(Kavotia_C_Alert, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'Kavotia_C_Alert::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function kavotia.kavotia_C.getActionOptions
// 0x0048 (0x0048 - 0x0000)
struct Kavotia_C_GetActionOptions final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Component;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         Options;                                           // 0x0018(0x0010)(Parm, OutParm)
	TArray<Enum_interactionActions>               Options_enum;                                      // 0x0028(0x0010)(Parm, OutParm)
	TArray<class FText>                           OptionsNamesOverlay;                               // 0x0038(0x0010)(Parm, OutParm)
};
static_assert(alignof(Kavotia_C_GetActionOptions) == 0x000008, "Wrong alignment on Kavotia_C_GetActionOptions");
static_assert(sizeof(Kavotia_C_GetActionOptions) == 0x000048, "Wrong size on Kavotia_C_GetActionOptions");
static_assert(offsetof(Kavotia_C_GetActionOptions, Player) == 0x000000, "Member 'Kavotia_C_GetActionOptions::Player' has a wrong offset!");
static_assert(offsetof(Kavotia_C_GetActionOptions, Component) == 0x000008, "Member 'Kavotia_C_GetActionOptions::Component' has a wrong offset!");
static_assert(offsetof(Kavotia_C_GetActionOptions, Actor) == 0x000010, "Member 'Kavotia_C_GetActionOptions::Actor' has a wrong offset!");
static_assert(offsetof(Kavotia_C_GetActionOptions, Options) == 0x000018, "Member 'Kavotia_C_GetActionOptions::Options' has a wrong offset!");
static_assert(offsetof(Kavotia_C_GetActionOptions, Options_enum) == 0x000028, "Member 'Kavotia_C_GetActionOptions::Options_enum' has a wrong offset!");
static_assert(offsetof(Kavotia_C_GetActionOptions, OptionsNamesOverlay) == 0x000038, "Member 'Kavotia_C_GetActionOptions::OptionsNamesOverlay' has a wrong offset!");

// Function kavotia.kavotia_C.setPath
// 0x0018 (0x0018 - 0x0000)
struct Kavotia_C_SetPath final
{
public:
	TArray<struct FVector>                        Path;                                              // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Return;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Kavotia_C_SetPath) == 0x000008, "Wrong alignment on Kavotia_C_SetPath");
static_assert(sizeof(Kavotia_C_SetPath) == 0x000018, "Wrong size on Kavotia_C_SetPath");
static_assert(offsetof(Kavotia_C_SetPath, Path) == 0x000000, "Member 'Kavotia_C_SetPath::Path' has a wrong offset!");
static_assert(offsetof(Kavotia_C_SetPath, Return) == 0x000010, "Member 'Kavotia_C_SetPath::Return' has a wrong offset!");

// Function kavotia.kavotia_C.getOnlyKey
// 0x0010 (0x0010 - 0x0000)
struct Kavotia_C_GetOnlyKey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Kavotia_C_GetOnlyKey) == 0x000008, "Wrong alignment on Kavotia_C_GetOnlyKey");
static_assert(sizeof(Kavotia_C_GetOnlyKey) == 0x000010, "Wrong size on Kavotia_C_GetOnlyKey");
static_assert(offsetof(Kavotia_C_GetOnlyKey, Key) == 0x000000, "Member 'Kavotia_C_GetOnlyKey::Key' has a wrong offset!");

// Function kavotia.kavotia_C.processKeys
// 0x0001 (0x0001 - 0x0000)
struct Kavotia_C_ProcessKeys final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Kavotia_C_ProcessKeys) == 0x000001, "Wrong alignment on Kavotia_C_ProcessKeys");
static_assert(sizeof(Kavotia_C_ProcessKeys) == 0x000001, "Wrong size on Kavotia_C_ProcessKeys");
static_assert(offsetof(Kavotia_C_ProcessKeys, Return) == 0x000000, "Member 'Kavotia_C_ProcessKeys::Return' has a wrong offset!");

// Function kavotia.kavotia_C.canBeUsedHold
// 0x0001 (0x0001 - 0x0000)
struct Kavotia_C_CanBeUsedHold final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Kavotia_C_CanBeUsedHold) == 0x000001, "Wrong alignment on Kavotia_C_CanBeUsedHold");
static_assert(sizeof(Kavotia_C_CanBeUsedHold) == 0x000001, "Wrong size on Kavotia_C_CanBeUsedHold");
static_assert(offsetof(Kavotia_C_CanBeUsedHold, Return) == 0x000000, "Member 'Kavotia_C_CanBeUsedHold::Return' has a wrong offset!");

// Function kavotia.kavotia_C.GetKey
// 0x0010 (0x0010 - 0x0000)
struct Kavotia_C_GetKey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Kavotia_C_GetKey) == 0x000008, "Wrong alignment on Kavotia_C_GetKey");
static_assert(sizeof(Kavotia_C_GetKey) == 0x000010, "Wrong size on Kavotia_C_GetKey");
static_assert(offsetof(Kavotia_C_GetKey, Key) == 0x000000, "Member 'Kavotia_C_GetKey::Key' has a wrong offset!");

// Function kavotia.kavotia_C.toolboxFix
// 0x0010 (0x0010 - 0x0000)
struct Kavotia_C_ToolboxFix final
{
public:
	class AProp_toolbox_C*                        Toolbox;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Kavotia_C_ToolboxFix) == 0x000008, "Wrong alignment on Kavotia_C_ToolboxFix");
static_assert(sizeof(Kavotia_C_ToolboxFix) == 0x000010, "Wrong size on Kavotia_C_ToolboxFix");
static_assert(offsetof(Kavotia_C_ToolboxFix, Toolbox) == 0x000000, "Member 'Kavotia_C_ToolboxFix::Toolbox' has a wrong offset!");
static_assert(offsetof(Kavotia_C_ToolboxFix, Return) == 0x000008, "Member 'Kavotia_C_ToolboxFix::Return' has a wrong offset!");

// Function kavotia.kavotia_C.gascanFuel
// 0x0010 (0x0010 - 0x0000)
struct Kavotia_C_GascanFuel final
{
public:
	class AProp_gascan_C*                         Gascan;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Fueled;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Kavotia_C_GascanFuel) == 0x000008, "Wrong alignment on Kavotia_C_GascanFuel");
static_assert(sizeof(Kavotia_C_GascanFuel) == 0x000010, "Wrong size on Kavotia_C_GascanFuel");
static_assert(offsetof(Kavotia_C_GascanFuel, Gascan) == 0x000000, "Member 'Kavotia_C_GascanFuel::Gascan' has a wrong offset!");
static_assert(offsetof(Kavotia_C_GascanFuel, Fueled) == 0x000008, "Member 'Kavotia_C_GascanFuel::Fueled' has a wrong offset!");

// Function kavotia.kavotia_C.skipRadial
// 0x0001 (0x0001 - 0x0000)
struct Kavotia_C_SkipRadial final
{
public:
	bool                                          Skip;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Kavotia_C_SkipRadial) == 0x000001, "Wrong alignment on Kavotia_C_SkipRadial");
static_assert(sizeof(Kavotia_C_SkipRadial) == 0x000001, "Wrong size on Kavotia_C_SkipRadial");
static_assert(offsetof(Kavotia_C_SkipRadial, Skip) == 0x000000, "Member 'Kavotia_C_SkipRadial::Skip' has a wrong offset!");

}

