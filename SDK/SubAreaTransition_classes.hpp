#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SubAreaTransition

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Enum_interactionActions_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass subAreaTransition.subAreaTransition_C
// 0x0038 (0x0258 - 0x0220)
class ASubAreaTransition_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          Look;                                              // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FName                                   SubArea;                                           // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           RequiredItems;                                     // 0x0248(0x0010)(Edit, BlueprintVisible)

public:
	void LandedOn(class AMainPlayer_C* Player, bool* IgnoreFallDamage);
	void IsButtonUsed(bool* Failed);
	void LookAt(class AMainPlayer_C* Player, const struct FHitResult& Hit, bool* Return, class FString* Text, class UPrimitiveComponent** boundObjectReplace, uint8* Number);
	void NoRespawn(bool Param_NoRespawn, bool* Return);
	void CanPickup(bool* Return);
	void AsProp(class AProp_C** Return);
	void CanBePutInContainer(bool* Return);
	void DreamInv(TArray<struct FStruct_save>& Invv, class ADreamBase_C** Base);
	void GetPriceMultiplier(float* PriceMult);
	void SkipRadial(bool* Skip);
	void GascanFuel(class AProp_gascan_C* Gascan, bool* Fueled);
	void ToolboxFix(class AProp_toolbox_C* Toolbox, bool* Return);
	void GetKey(class FString* Key);
	void CanBeUsedHold(bool* Return);
	void ProcessKeys(bool* Return);
	void GetOnlyKey(class FString* Key);
	void SetPath(const TArray<struct FVector>& Path, bool* Return);
	void GetActionOptions(class AMainPlayer_C* Player, class UPrimitiveComponent* Component, class AActor* Actor, TArray<class FString>* Options, TArray<Enum_interactionActions>* Options_enum, TArray<class FText>* OptionsNamesOverlay, uint8* Number);
	void HasItems(bool* Return);
	void DriveDetached();
	void Player_use(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void Kicked(bool Kick);
	void SendName(class FName Param_Name);
	void broken();
	void broken_fire();
	void Thrown(class AMainPlayer_C* Player);
	void DamageByPlayer(class AMainPlayer_C* Player, const struct FHitResult& Hit, float Damage);
	void UpdateStrAgl();
	void PlayerUnequip(class AMainPlayer_C* Player);
	void PlayerHold(class AMainPlayer_C* Player);
	void PlayerR(class AMainPlayer_C* Player);
	void SignalDeleted();
	void SignalSaved();
	void GamemodeBeginPlay();
	void StuffUpgraded(class AMainGamemode_C* GameMode);
	void Unfoc();
	void SettingsApplied(const struct FStruct_settings& Settings);
	void Unfocused();
	void GamemodePreLoad();
	void AnyKey(const struct FKey& Key, bool Pressed);
	void GamemodeMakeKeys();
	void PropRenderer_finishProps();
	void ApplyColor(const struct FLinearColor& Color);
	void TexturePickerApply(class UUmg_texturePicker_C* Picker, class UTexture2D* Texture, int32 Param_Index);
	void ImpactDamage(float Damage, const struct FHitResult& Hit, class AActor* Actor, const struct FVector& Impact);
	void EnterWater(class AWaterVolume_C* Water);
	void LeaveWater(class AWaterVolume_C* Water);
	void EnterWaterOrigin(class AWaterVolume_C* Water);
	void LeaveWaterOrigin(class AWaterVolume_C* Water);
	void Eaten();
	void Virus(bool Activate);
	void SetPropProps(bool Static, bool Frozen, bool Active);
	void AddDamage(class AActor* Actor, float Damage, const struct FHitResult& Hit, const struct FVector& Impact, bool SkipSetting);
	void SetKey(const class FString& Key);
	void PhysDestroyed();
	void PhysPreDestroyed();
	void DigUp();
	void Unhook();
	void SteppedOn(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void FireDamage(float Damage);
	void Ignite(float Fuel);
	void Microwave();
	void ReceivedPhyiscsDamage(float Damage, const struct FHitResult& Hot);
	void ActionOptionIndex(class AMainPlayer_C* Player, const struct FHitResult& Hit, Enum_interactionActions Action);
	void PlayerHandUse_RMB(class AMainPlayer_C* Player);
	void PlayerHandUse_LMB(class AMainPlayer_C* Player);
	void Exploded(float Damage, const struct FVector& Location);
	void ExtinguishFire();
	void PlayerHandRelease_RMB(class AMainPlayer_C* Player);
	void PlayerHandRelease_LMB(class AMainPlayer_C* Player);
	void PlayerHandMouseWheel(class AMainPlayer_C* Player, float WheelDelta);
	void PlayerHandMouse(class AMainPlayer_C* Player, const struct FVector2D& Mouse);
	void PlayerHandAnyKey(class AMainPlayer_C* Player, const struct FKey& Key, bool Pressed);
	void MicrowaveElec();
	void AddTemperature(float Temperature);
	void AccumulateTemperature(float Temperature, float Speed);
	void Stepped(float Volume);
	void PlayerLookAway(class AMainPlayer_C* Player);
	void ReachedByExplosion(const struct FVector& Location, float Damage);
	void bitten();
	void Slice(bool Clean);
	void PlayerUsedOn(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void AttemptIgnite();
	void Hooked(class AHook_C* Hook);
	void Crafted();
	void CleanSponge(float Clean, class AMainPlayer_C* Player);
	void HookTension(class AHook_C* Hook);
	void ActionName(class AMainPlayer_C* Player, const struct FHitResult& Hit, const class FString& Param_Name);
	void ExecuteUbergraph_subAreaTransition(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"subAreaTransition_C">();
	}
	static class ASubAreaTransition_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASubAreaTransition_C>();
	}
};
static_assert(alignof(ASubAreaTransition_C) == 0x000008, "Wrong alignment on ASubAreaTransition_C");
static_assert(sizeof(ASubAreaTransition_C) == 0x000258, "Wrong size on ASubAreaTransition_C");
static_assert(offsetof(ASubAreaTransition_C, UberGraphFrame) == 0x000220, "Member 'ASubAreaTransition_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ASubAreaTransition_C, Look) == 0x000228, "Member 'ASubAreaTransition_C::Look' has a wrong offset!");
static_assert(offsetof(ASubAreaTransition_C, Box) == 0x000230, "Member 'ASubAreaTransition_C::Box' has a wrong offset!");
static_assert(offsetof(ASubAreaTransition_C, DefaultSceneRoot) == 0x000238, "Member 'ASubAreaTransition_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ASubAreaTransition_C, SubArea) == 0x000240, "Member 'ASubAreaTransition_C::SubArea' has a wrong offset!");
static_assert(offsetof(ASubAreaTransition_C, RequiredItems) == 0x000248, "Member 'ASubAreaTransition_C::RequiredItems' has a wrong offset!");

}

