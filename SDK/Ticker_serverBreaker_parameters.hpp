#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Ticker_serverBreaker

#include "Basic.hpp"

#include "Enum_difficulty_structs.hpp"


namespace SDK::Params
{

// Function ticker_serverBreaker.ticker_serverBreaker_C.ExecuteUbergraph_ticker_serverBreaker
// 0x0068 (0x0068 - 0x0000)
struct Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_difficulty                               Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_4;                             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInst_C*                            CallFunc_getMainGameInstance_AsGame_Inst;          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AServerBox_C*                           CallFunc_Array_Random_OutItem;                     // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Random_OutIndex;                    // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_1;                       // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RandomBoolWithWeight_ReturnValue;         // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker) == 0x000008, "Wrong alignment on Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker");
static_assert(sizeof(Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker) == 0x000068, "Wrong size on Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker");
static_assert(offsetof(Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker, EntryPoint) == 0x000000, "Member 'Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker::EntryPoint' has a wrong offset!");
static_assert(offsetof(Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker, Temp_byte_Variable) == 0x000004, "Member 'Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker, Temp_float_Variable) == 0x000008, "Member 'Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00000C, "Member 'Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker, Temp_float_Variable_1) == 0x000010, "Member 'Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker, CallFunc_FClamp_ReturnValue) == 0x000014, "Member 'Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker, CallFunc_Lerp_ReturnValue) == 0x000018, "Member 'Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker, Temp_float_Variable_2) == 0x00001C, "Member 'Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker, Temp_float_Variable_3) == 0x000020, "Member 'Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker, Temp_float_Variable_4) == 0x000024, "Member 'Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker::Temp_float_Variable_4' has a wrong offset!");
static_assert(offsetof(Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker, K2Node_Event_DeltaSeconds) == 0x000028, "Member 'Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker, CallFunc_getMainGameInstance_AsGame_Inst) == 0x000030, "Member 'Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker::CallFunc_getMainGameInstance_AsGame_Inst' has a wrong offset!");
static_assert(offsetof(Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000038, "Member 'Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000039, "Member 'Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker, K2Node_Select_Default) == 0x00003C, "Member 'Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker, CallFunc_BooleanOR_ReturnValue) == 0x000040, "Member 'Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker, CallFunc_Less_IntInt_ReturnValue) == 0x000041, "Member 'Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker, CallFunc_Subtract_IntInt_ReturnValue) == 0x000044, "Member 'Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker, CallFunc_Array_Random_OutItem) == 0x000048, "Member 'Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker::CallFunc_Array_Random_OutItem' has a wrong offset!");
static_assert(offsetof(Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker, CallFunc_Array_Random_OutIndex) == 0x000050, "Member 'Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker::CallFunc_Array_Random_OutIndex' has a wrong offset!");
static_assert(offsetof(Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000054, "Member 'Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000058, "Member 'Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker, CallFunc_Lerp_ReturnValue_1) == 0x00005C, "Member 'Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000060, "Member 'Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker, CallFunc_RandomBoolWithWeight_ReturnValue) == 0x000064, "Member 'Ticker_serverBreaker_C_ExecuteUbergraph_ticker_serverBreaker::CallFunc_RandomBoolWithWeight_ReturnValue' has a wrong offset!");

// Function ticker_serverBreaker.ticker_serverBreaker_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct Ticker_serverBreaker_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ticker_serverBreaker_C_ReceiveTick) == 0x000004, "Wrong alignment on Ticker_serverBreaker_C_ReceiveTick");
static_assert(sizeof(Ticker_serverBreaker_C_ReceiveTick) == 0x000004, "Wrong size on Ticker_serverBreaker_C_ReceiveTick");
static_assert(offsetof(Ticker_serverBreaker_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'Ticker_serverBreaker_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

}

