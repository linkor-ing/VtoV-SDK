#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Mg_invaders

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "MinigameRoot_pawn_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass mg_invaders.mg_invaders_C
// 0x0160 (0x03E8 - 0x0288)
class AMg_invaders_C final : public AMinigameRoot_pawn_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0288(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        beep;                                              // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneCaptureComponent2D*               Capture;                                           // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UInstancedStaticMeshComponent*          Inst_ship;                                         // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UInstancedStaticMeshComponent*          Inst_invBullets;                                   // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UInstancedStaticMeshComponent*          Inst_shipBullets;                                  // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Ships_ints;                                        // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       Widget;                                            // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       Camera;                                            // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FIntVector>                     Ships;                                             // 0x02D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UMaterialInstanceDynamic*>       Dynmat_inv;                                        // 0x02E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UInstancedStaticMeshComponent*>  Invaders;                                          // 0x02F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          Dir;                                               // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2667[0x7];                                     // 0x0301(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUmg_invaders_C*                        InvWidget;                                         // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Upd_time;                                          // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Upd_delay;                                         // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Playing;                                           // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Frame;                                             // 0x0319(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2668[0x6];                                     // 0x031A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FIntVector>                     bullets_pos;                                       // 0x0320(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FIntVector>                     bullets_inv_pos;                                   // 0x0330(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FIntVector                             Ship;                                              // 0x0340(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2669[0x4];                                     // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FIntVector>                     barriers_pos;                                      // 0x0350(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UInstancedStaticMeshComponent*>  barriers;                                          // 0x0360(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UMaterialInstanceDynamic*>       Dynmat_barriers;                                   // 0x0370(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         bull_time;                                         // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         bull_delay;                                        // 0x0384(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FIntVector>                     Ships_buff;                                        // 0x0388(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          MoveDown;                                          // 0x0398(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Shot;                                              // 0x0399(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_266A[0x6];                                     // 0x039A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FIntVector>                     barriers_buff_pos;                                 // 0x03A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         Score;                                             // 0x03B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Hscore;                                            // 0x03B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Possess;                                           // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_266B[0x7];                                     // 0x03B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUi_arcade_invaders_C*                  ScreenWidget;                                      // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Wave;                                              // 0x03C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_266C[0x4];                                     // 0x03CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             beepBoop;                                          // 0x03D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Par;                                               // 0x03E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void beepBoop__DelegateSignature(class USoundBase* Sound, float Volume, float Pitch);
	void ExecuteUbergraph_mg_invaders(int32 EntryPoint);
	void Enter();
	void Up();
	void Left();
	void Right();
	void Step_bullets();
	void ReceiveTick(float DeltaSeconds);
	void Step_ships();
	void ReceiveBeginPlay();
	void InpActEvt_Up_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_Left_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_Right_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void InpActEvt_Enter_K2Node_InputKeyEvent_3(const struct FKey& Key);
	void UserConstructionScript();
	void Gen();
	void Init();
	void Move();
	void Play();
	void bullets();
	void Died();
	void Win();
	void PlaySound(class USoundBase* NewSound, float NewVolumeMultiplier, float NewPitchMultiplier);
	void GenerateBullets();
	void GenerateInvBullets();
	void GenerateBarriers();
	void GenerateShips();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"mg_invaders_C">();
	}
	static class AMg_invaders_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMg_invaders_C>();
	}
};
static_assert(alignof(AMg_invaders_C) == 0x000008, "Wrong alignment on AMg_invaders_C");
static_assert(sizeof(AMg_invaders_C) == 0x0003E8, "Wrong size on AMg_invaders_C");
static_assert(offsetof(AMg_invaders_C, UberGraphFrame) == 0x000288, "Member 'AMg_invaders_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AMg_invaders_C, beep) == 0x000290, "Member 'AMg_invaders_C::beep' has a wrong offset!");
static_assert(offsetof(AMg_invaders_C, Capture) == 0x000298, "Member 'AMg_invaders_C::Capture' has a wrong offset!");
static_assert(offsetof(AMg_invaders_C, Inst_ship) == 0x0002A0, "Member 'AMg_invaders_C::Inst_ship' has a wrong offset!");
static_assert(offsetof(AMg_invaders_C, Inst_invBullets) == 0x0002A8, "Member 'AMg_invaders_C::Inst_invBullets' has a wrong offset!");
static_assert(offsetof(AMg_invaders_C, Inst_shipBullets) == 0x0002B0, "Member 'AMg_invaders_C::Inst_shipBullets' has a wrong offset!");
static_assert(offsetof(AMg_invaders_C, Ships_ints) == 0x0002B8, "Member 'AMg_invaders_C::Ships_ints' has a wrong offset!");
static_assert(offsetof(AMg_invaders_C, Widget) == 0x0002C0, "Member 'AMg_invaders_C::Widget' has a wrong offset!");
static_assert(offsetof(AMg_invaders_C, Camera) == 0x0002C8, "Member 'AMg_invaders_C::Camera' has a wrong offset!");
static_assert(offsetof(AMg_invaders_C, Ships) == 0x0002D0, "Member 'AMg_invaders_C::Ships' has a wrong offset!");
static_assert(offsetof(AMg_invaders_C, Dynmat_inv) == 0x0002E0, "Member 'AMg_invaders_C::Dynmat_inv' has a wrong offset!");
static_assert(offsetof(AMg_invaders_C, Invaders) == 0x0002F0, "Member 'AMg_invaders_C::Invaders' has a wrong offset!");
static_assert(offsetof(AMg_invaders_C, Dir) == 0x000300, "Member 'AMg_invaders_C::Dir' has a wrong offset!");
static_assert(offsetof(AMg_invaders_C, InvWidget) == 0x000308, "Member 'AMg_invaders_C::InvWidget' has a wrong offset!");
static_assert(offsetof(AMg_invaders_C, Upd_time) == 0x000310, "Member 'AMg_invaders_C::Upd_time' has a wrong offset!");
static_assert(offsetof(AMg_invaders_C, Upd_delay) == 0x000314, "Member 'AMg_invaders_C::Upd_delay' has a wrong offset!");
static_assert(offsetof(AMg_invaders_C, Playing) == 0x000318, "Member 'AMg_invaders_C::Playing' has a wrong offset!");
static_assert(offsetof(AMg_invaders_C, Frame) == 0x000319, "Member 'AMg_invaders_C::Frame' has a wrong offset!");
static_assert(offsetof(AMg_invaders_C, bullets_pos) == 0x000320, "Member 'AMg_invaders_C::bullets_pos' has a wrong offset!");
static_assert(offsetof(AMg_invaders_C, bullets_inv_pos) == 0x000330, "Member 'AMg_invaders_C::bullets_inv_pos' has a wrong offset!");
static_assert(offsetof(AMg_invaders_C, Ship) == 0x000340, "Member 'AMg_invaders_C::Ship' has a wrong offset!");
static_assert(offsetof(AMg_invaders_C, barriers_pos) == 0x000350, "Member 'AMg_invaders_C::barriers_pos' has a wrong offset!");
static_assert(offsetof(AMg_invaders_C, barriers) == 0x000360, "Member 'AMg_invaders_C::barriers' has a wrong offset!");
static_assert(offsetof(AMg_invaders_C, Dynmat_barriers) == 0x000370, "Member 'AMg_invaders_C::Dynmat_barriers' has a wrong offset!");
static_assert(offsetof(AMg_invaders_C, bull_time) == 0x000380, "Member 'AMg_invaders_C::bull_time' has a wrong offset!");
static_assert(offsetof(AMg_invaders_C, bull_delay) == 0x000384, "Member 'AMg_invaders_C::bull_delay' has a wrong offset!");
static_assert(offsetof(AMg_invaders_C, Ships_buff) == 0x000388, "Member 'AMg_invaders_C::Ships_buff' has a wrong offset!");
static_assert(offsetof(AMg_invaders_C, MoveDown) == 0x000398, "Member 'AMg_invaders_C::MoveDown' has a wrong offset!");
static_assert(offsetof(AMg_invaders_C, Shot) == 0x000399, "Member 'AMg_invaders_C::Shot' has a wrong offset!");
static_assert(offsetof(AMg_invaders_C, barriers_buff_pos) == 0x0003A0, "Member 'AMg_invaders_C::barriers_buff_pos' has a wrong offset!");
static_assert(offsetof(AMg_invaders_C, Score) == 0x0003B0, "Member 'AMg_invaders_C::Score' has a wrong offset!");
static_assert(offsetof(AMg_invaders_C, Hscore) == 0x0003B4, "Member 'AMg_invaders_C::Hscore' has a wrong offset!");
static_assert(offsetof(AMg_invaders_C, Possess) == 0x0003B8, "Member 'AMg_invaders_C::Possess' has a wrong offset!");
static_assert(offsetof(AMg_invaders_C, ScreenWidget) == 0x0003C0, "Member 'AMg_invaders_C::ScreenWidget' has a wrong offset!");
static_assert(offsetof(AMg_invaders_C, Wave) == 0x0003C8, "Member 'AMg_invaders_C::Wave' has a wrong offset!");
static_assert(offsetof(AMg_invaders_C, beepBoop) == 0x0003D0, "Member 'AMg_invaders_C::beepBoop' has a wrong offset!");
static_assert(offsetof(AMg_invaders_C, Par) == 0x0003E0, "Member 'AMg_invaders_C::Par' has a wrong offset!");

}

