#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VictoryBPLibrary

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "VictoryBPLibrary_structs.hpp"
#include "Slate_structs.hpp"
#include "SlateCore_structs.hpp"
#include "InputCore_structs.hpp"
#include "Engine_structs.hpp"
#include "AIModule_structs.hpp"


namespace SDK::Params
{

// Function VictoryBPLibrary.VictoryPC.OnVictorySubtitlesQueued
// 0x0018 (0x0018 - 0x0000)
struct VictoryPC_OnVictorySubtitlesQueued final
{
public:
	TArray<struct FVictorySubtitleCue>            VictorySubtitles;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         CueDuration;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D48[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryPC_OnVictorySubtitlesQueued) == 0x000008, "Wrong alignment on VictoryPC_OnVictorySubtitlesQueued");
static_assert(sizeof(VictoryPC_OnVictorySubtitlesQueued) == 0x000018, "Wrong size on VictoryPC_OnVictorySubtitlesQueued");
static_assert(offsetof(VictoryPC_OnVictorySubtitlesQueued, VictorySubtitles) == 0x000000, "Member 'VictoryPC_OnVictorySubtitlesQueued::VictorySubtitles' has a wrong offset!");
static_assert(offsetof(VictoryPC_OnVictorySubtitlesQueued, CueDuration) == 0x000010, "Member 'VictoryPC_OnVictorySubtitlesQueued::CueDuration' has a wrong offset!");

// Function VictoryBPLibrary.VictoryPC.Subtitles_CPPDelegate
// 0x0018 (0x0018 - 0x0000)
struct VictoryPC_Subtitles_CPPDelegate final
{
public:
	TArray<struct FSubtitleCue>                   VictorySubtitles;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         CueDuration;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D49[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryPC_Subtitles_CPPDelegate) == 0x000008, "Wrong alignment on VictoryPC_Subtitles_CPPDelegate");
static_assert(sizeof(VictoryPC_Subtitles_CPPDelegate) == 0x000018, "Wrong size on VictoryPC_Subtitles_CPPDelegate");
static_assert(offsetof(VictoryPC_Subtitles_CPPDelegate, VictorySubtitles) == 0x000000, "Member 'VictoryPC_Subtitles_CPPDelegate::VictorySubtitles' has a wrong offset!");
static_assert(offsetof(VictoryPC_Subtitles_CPPDelegate, CueDuration) == 0x000010, "Member 'VictoryPC_Subtitles_CPPDelegate::CueDuration' has a wrong offset!");

// Function VictoryBPLibrary.VictoryPC.VictoryPC_GetMyIP_DataReceived
// 0x0010 (0x0010 - 0x0000)
struct VictoryPC_VictoryPC_GetMyIP_DataReceived final
{
public:
	class FString                                 YourIP;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryPC_VictoryPC_GetMyIP_DataReceived) == 0x000008, "Wrong alignment on VictoryPC_VictoryPC_GetMyIP_DataReceived");
static_assert(sizeof(VictoryPC_VictoryPC_GetMyIP_DataReceived) == 0x000010, "Wrong size on VictoryPC_VictoryPC_GetMyIP_DataReceived");
static_assert(offsetof(VictoryPC_VictoryPC_GetMyIP_DataReceived, YourIP) == 0x000000, "Member 'VictoryPC_VictoryPC_GetMyIP_DataReceived::YourIP' has a wrong offset!");

// Function VictoryBPLibrary.VictoryPC.VictoryPC_GetMyIP_SendRequest
// 0x0001 (0x0001 - 0x0000)
struct VictoryPC_VictoryPC_GetMyIP_SendRequest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryPC_VictoryPC_GetMyIP_SendRequest) == 0x000001, "Wrong alignment on VictoryPC_VictoryPC_GetMyIP_SendRequest");
static_assert(sizeof(VictoryPC_VictoryPC_GetMyIP_SendRequest) == 0x000001, "Wrong size on VictoryPC_VictoryPC_GetMyIP_SendRequest");
static_assert(offsetof(VictoryPC_VictoryPC_GetMyIP_SendRequest, ReturnValue) == 0x000000, "Member 'VictoryPC_VictoryPC_GetMyIP_SendRequest::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryPC.VictoryPlaySpeechSound
// 0x0020 (0x0020 - 0x0000)
struct VictoryPC_VictoryPlaySpeechSound final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4A[0x4];                                      // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryPC_VictoryPlaySpeechSound) == 0x000008, "Wrong alignment on VictoryPC_VictoryPlaySpeechSound");
static_assert(sizeof(VictoryPC_VictoryPlaySpeechSound) == 0x000020, "Wrong size on VictoryPC_VictoryPlaySpeechSound");
static_assert(offsetof(VictoryPC_VictoryPlaySpeechSound, Sound) == 0x000000, "Member 'VictoryPC_VictoryPlaySpeechSound::Sound' has a wrong offset!");
static_assert(offsetof(VictoryPC_VictoryPlaySpeechSound, VolumeMultiplier) == 0x000008, "Member 'VictoryPC_VictoryPlaySpeechSound::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(VictoryPC_VictoryPlaySpeechSound, PitchMultiplier) == 0x00000C, "Member 'VictoryPC_VictoryPlaySpeechSound::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(VictoryPC_VictoryPlaySpeechSound, StartTime) == 0x000010, "Member 'VictoryPC_VictoryPlaySpeechSound::StartTime' has a wrong offset!");
static_assert(offsetof(VictoryPC_VictoryPlaySpeechSound, ReturnValue) == 0x000018, "Member 'VictoryPC_VictoryPlaySpeechSound::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.TKMathFunctionLibrary.AreLineSegmentsCrossing
// 0x0034 (0x0034 - 0x0000)
struct TKMathFunctionLibrary_AreLineSegmentsCrossing final
{
public:
	struct FVector                                PointA1;                                           // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PointA2;                                           // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PointB1;                                           // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PointB2;                                           // 0x0024(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4B[0x3];                                      // 0x0031(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TKMathFunctionLibrary_AreLineSegmentsCrossing) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_AreLineSegmentsCrossing");
static_assert(sizeof(TKMathFunctionLibrary_AreLineSegmentsCrossing) == 0x000034, "Wrong size on TKMathFunctionLibrary_AreLineSegmentsCrossing");
static_assert(offsetof(TKMathFunctionLibrary_AreLineSegmentsCrossing, PointA1) == 0x000000, "Member 'TKMathFunctionLibrary_AreLineSegmentsCrossing::PointA1' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_AreLineSegmentsCrossing, PointA2) == 0x00000C, "Member 'TKMathFunctionLibrary_AreLineSegmentsCrossing::PointA2' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_AreLineSegmentsCrossing, PointB1) == 0x000018, "Member 'TKMathFunctionLibrary_AreLineSegmentsCrossing::PointB1' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_AreLineSegmentsCrossing, PointB2) == 0x000024, "Member 'TKMathFunctionLibrary_AreLineSegmentsCrossing::PointB2' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_AreLineSegmentsCrossing, ReturnValue) == 0x000030, "Member 'TKMathFunctionLibrary_AreLineSegmentsCrossing::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.TKMathFunctionLibrary.ClosestPointOnLineSeqment
// 0x0030 (0x0030 - 0x0000)
struct TKMathFunctionLibrary_ClosestPointOnLineSeqment final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LineStart;                                         // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LineEnd;                                           // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0024(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TKMathFunctionLibrary_ClosestPointOnLineSeqment) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_ClosestPointOnLineSeqment");
static_assert(sizeof(TKMathFunctionLibrary_ClosestPointOnLineSeqment) == 0x000030, "Wrong size on TKMathFunctionLibrary_ClosestPointOnLineSeqment");
static_assert(offsetof(TKMathFunctionLibrary_ClosestPointOnLineSeqment, Point) == 0x000000, "Member 'TKMathFunctionLibrary_ClosestPointOnLineSeqment::Point' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ClosestPointOnLineSeqment, LineStart) == 0x00000C, "Member 'TKMathFunctionLibrary_ClosestPointOnLineSeqment::LineStart' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ClosestPointOnLineSeqment, LineEnd) == 0x000018, "Member 'TKMathFunctionLibrary_ClosestPointOnLineSeqment::LineEnd' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ClosestPointOnLineSeqment, ReturnValue) == 0x000024, "Member 'TKMathFunctionLibrary_ClosestPointOnLineSeqment::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.TKMathFunctionLibrary.ClosestPointOnSphereToLine
// 0x0034 (0x0034 - 0x0000)
struct TKMathFunctionLibrary_ClosestPointOnSphereToLine final
{
public:
	struct FVector                                SphereOrigin;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereRadius;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LineOrigin;                                        // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LineDir;                                           // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0028(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TKMathFunctionLibrary_ClosestPointOnSphereToLine) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_ClosestPointOnSphereToLine");
static_assert(sizeof(TKMathFunctionLibrary_ClosestPointOnSphereToLine) == 0x000034, "Wrong size on TKMathFunctionLibrary_ClosestPointOnSphereToLine");
static_assert(offsetof(TKMathFunctionLibrary_ClosestPointOnSphereToLine, SphereOrigin) == 0x000000, "Member 'TKMathFunctionLibrary_ClosestPointOnSphereToLine::SphereOrigin' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ClosestPointOnSphereToLine, SphereRadius) == 0x00000C, "Member 'TKMathFunctionLibrary_ClosestPointOnSphereToLine::SphereRadius' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ClosestPointOnSphereToLine, LineOrigin) == 0x000010, "Member 'TKMathFunctionLibrary_ClosestPointOnSphereToLine::LineOrigin' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ClosestPointOnSphereToLine, LineDir) == 0x00001C, "Member 'TKMathFunctionLibrary_ClosestPointOnSphereToLine::LineDir' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ClosestPointOnSphereToLine, ReturnValue) == 0x000028, "Member 'TKMathFunctionLibrary_ClosestPointOnSphereToLine::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.TKMathFunctionLibrary.ClosestPointsOfLineSegments
// 0x0048 (0x0048 - 0x0000)
struct TKMathFunctionLibrary_ClosestPointsOfLineSegments final
{
public:
	struct FVector                                Line1Start;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Line1End;                                          // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Line2Start;                                        // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Line2End;                                          // 0x0024(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LinePoint1;                                        // 0x0030(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LinePoint2;                                        // 0x003C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TKMathFunctionLibrary_ClosestPointsOfLineSegments) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_ClosestPointsOfLineSegments");
static_assert(sizeof(TKMathFunctionLibrary_ClosestPointsOfLineSegments) == 0x000048, "Wrong size on TKMathFunctionLibrary_ClosestPointsOfLineSegments");
static_assert(offsetof(TKMathFunctionLibrary_ClosestPointsOfLineSegments, Line1Start) == 0x000000, "Member 'TKMathFunctionLibrary_ClosestPointsOfLineSegments::Line1Start' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ClosestPointsOfLineSegments, Line1End) == 0x00000C, "Member 'TKMathFunctionLibrary_ClosestPointsOfLineSegments::Line1End' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ClosestPointsOfLineSegments, Line2Start) == 0x000018, "Member 'TKMathFunctionLibrary_ClosestPointsOfLineSegments::Line2Start' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ClosestPointsOfLineSegments, Line2End) == 0x000024, "Member 'TKMathFunctionLibrary_ClosestPointsOfLineSegments::Line2End' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ClosestPointsOfLineSegments, LinePoint1) == 0x000030, "Member 'TKMathFunctionLibrary_ClosestPointsOfLineSegments::LinePoint1' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ClosestPointsOfLineSegments, LinePoint2) == 0x00003C, "Member 'TKMathFunctionLibrary_ClosestPointsOfLineSegments::LinePoint2' has a wrong offset!");

// Function VictoryBPLibrary.TKMathFunctionLibrary.ClosestPointsOnTwoLines
// 0x004C (0x004C - 0x0000)
struct TKMathFunctionLibrary_ClosestPointsOnTwoLines final
{
public:
	struct FVector                                ClosestPointLine1;                                 // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ClosestPointLine2;                                 // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LinePoint1;                                        // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LineVec1;                                          // 0x0024(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LinePoint2;                                        // 0x0030(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LineVec2;                                          // 0x003C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4C[0x3];                                      // 0x0049(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TKMathFunctionLibrary_ClosestPointsOnTwoLines) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_ClosestPointsOnTwoLines");
static_assert(sizeof(TKMathFunctionLibrary_ClosestPointsOnTwoLines) == 0x00004C, "Wrong size on TKMathFunctionLibrary_ClosestPointsOnTwoLines");
static_assert(offsetof(TKMathFunctionLibrary_ClosestPointsOnTwoLines, ClosestPointLine1) == 0x000000, "Member 'TKMathFunctionLibrary_ClosestPointsOnTwoLines::ClosestPointLine1' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ClosestPointsOnTwoLines, ClosestPointLine2) == 0x00000C, "Member 'TKMathFunctionLibrary_ClosestPointsOnTwoLines::ClosestPointLine2' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ClosestPointsOnTwoLines, LinePoint1) == 0x000018, "Member 'TKMathFunctionLibrary_ClosestPointsOnTwoLines::LinePoint1' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ClosestPointsOnTwoLines, LineVec1) == 0x000024, "Member 'TKMathFunctionLibrary_ClosestPointsOnTwoLines::LineVec1' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ClosestPointsOnTwoLines, LinePoint2) == 0x000030, "Member 'TKMathFunctionLibrary_ClosestPointsOnTwoLines::LinePoint2' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ClosestPointsOnTwoLines, LineVec2) == 0x00003C, "Member 'TKMathFunctionLibrary_ClosestPointsOnTwoLines::LineVec2' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ClosestPointsOnTwoLines, ReturnValue) == 0x000048, "Member 'TKMathFunctionLibrary_ClosestPointsOnTwoLines::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.TKMathFunctionLibrary.ConvertAnchorToAnchor
// 0x0048 (0x0048 - 0x0000)
struct TKMathFunctionLibrary_ConvertAnchorToAnchor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAnchors                               CurrentAnchor;                                     // 0x0008(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                Offsets;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FAnchors                               TargetAnchor;                                      // 0x0028(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                ConvertedOffsets;                                  // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TKMathFunctionLibrary_ConvertAnchorToAnchor) == 0x000008, "Wrong alignment on TKMathFunctionLibrary_ConvertAnchorToAnchor");
static_assert(sizeof(TKMathFunctionLibrary_ConvertAnchorToAnchor) == 0x000048, "Wrong size on TKMathFunctionLibrary_ConvertAnchorToAnchor");
static_assert(offsetof(TKMathFunctionLibrary_ConvertAnchorToAnchor, WorldContextObject) == 0x000000, "Member 'TKMathFunctionLibrary_ConvertAnchorToAnchor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ConvertAnchorToAnchor, CurrentAnchor) == 0x000008, "Member 'TKMathFunctionLibrary_ConvertAnchorToAnchor::CurrentAnchor' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ConvertAnchorToAnchor, Offsets) == 0x000018, "Member 'TKMathFunctionLibrary_ConvertAnchorToAnchor::Offsets' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ConvertAnchorToAnchor, TargetAnchor) == 0x000028, "Member 'TKMathFunctionLibrary_ConvertAnchorToAnchor::TargetAnchor' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ConvertAnchorToAnchor, ConvertedOffsets) == 0x000038, "Member 'TKMathFunctionLibrary_ConvertAnchorToAnchor::ConvertedOffsets' has a wrong offset!");

// Function VictoryBPLibrary.TKMathFunctionLibrary.ConvertPhysicsLinearVelocity
// 0x0014 (0x0014 - 0x0000)
struct TKMathFunctionLibrary_ConvertPhysicsLinearVelocity final
{
public:
	struct FVector                                Velocity;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpeedUnit                                    SpeedUnit;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4D[0x3];                                      // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TKMathFunctionLibrary_ConvertPhysicsLinearVelocity) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_ConvertPhysicsLinearVelocity");
static_assert(sizeof(TKMathFunctionLibrary_ConvertPhysicsLinearVelocity) == 0x000014, "Wrong size on TKMathFunctionLibrary_ConvertPhysicsLinearVelocity");
static_assert(offsetof(TKMathFunctionLibrary_ConvertPhysicsLinearVelocity, Velocity) == 0x000000, "Member 'TKMathFunctionLibrary_ConvertPhysicsLinearVelocity::Velocity' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ConvertPhysicsLinearVelocity, SpeedUnit) == 0x00000C, "Member 'TKMathFunctionLibrary_ConvertPhysicsLinearVelocity::SpeedUnit' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ConvertPhysicsLinearVelocity, ReturnValue) == 0x000010, "Member 'TKMathFunctionLibrary_ConvertPhysicsLinearVelocity::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.TKMathFunctionLibrary.GetConsoleVariableFloat
// 0x0018 (0x0018 - 0x0000)
struct TKMathFunctionLibrary_GetConsoleVariableFloat final
{
public:
	class FString                                 VariableName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4E[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TKMathFunctionLibrary_GetConsoleVariableFloat) == 0x000008, "Wrong alignment on TKMathFunctionLibrary_GetConsoleVariableFloat");
static_assert(sizeof(TKMathFunctionLibrary_GetConsoleVariableFloat) == 0x000018, "Wrong size on TKMathFunctionLibrary_GetConsoleVariableFloat");
static_assert(offsetof(TKMathFunctionLibrary_GetConsoleVariableFloat, VariableName) == 0x000000, "Member 'TKMathFunctionLibrary_GetConsoleVariableFloat::VariableName' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_GetConsoleVariableFloat, ReturnValue) == 0x000010, "Member 'TKMathFunctionLibrary_GetConsoleVariableFloat::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.TKMathFunctionLibrary.GetConsoleVariableInt
// 0x0018 (0x0018 - 0x0000)
struct TKMathFunctionLibrary_GetConsoleVariableInt final
{
public:
	class FString                                 VariableName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4F[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TKMathFunctionLibrary_GetConsoleVariableInt) == 0x000008, "Wrong alignment on TKMathFunctionLibrary_GetConsoleVariableInt");
static_assert(sizeof(TKMathFunctionLibrary_GetConsoleVariableInt) == 0x000018, "Wrong size on TKMathFunctionLibrary_GetConsoleVariableInt");
static_assert(offsetof(TKMathFunctionLibrary_GetConsoleVariableInt, VariableName) == 0x000000, "Member 'TKMathFunctionLibrary_GetConsoleVariableInt::VariableName' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_GetConsoleVariableInt, ReturnValue) == 0x000010, "Member 'TKMathFunctionLibrary_GetConsoleVariableInt::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.TKMathFunctionLibrary.GetVelocityAtPoint
// 0x0030 (0x0030 - 0x0000)
struct TKMathFunctionLibrary_GetVelocityAtPoint final
{
public:
	class UPrimitiveComponent*                    Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DrawDebugInfo;                                     // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D50[0x3];                                      // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D51[0x4];                                      // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TKMathFunctionLibrary_GetVelocityAtPoint) == 0x000008, "Wrong alignment on TKMathFunctionLibrary_GetVelocityAtPoint");
static_assert(sizeof(TKMathFunctionLibrary_GetVelocityAtPoint) == 0x000030, "Wrong size on TKMathFunctionLibrary_GetVelocityAtPoint");
static_assert(offsetof(TKMathFunctionLibrary_GetVelocityAtPoint, Target) == 0x000000, "Member 'TKMathFunctionLibrary_GetVelocityAtPoint::Target' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_GetVelocityAtPoint, Point) == 0x000008, "Member 'TKMathFunctionLibrary_GetVelocityAtPoint::Point' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_GetVelocityAtPoint, BoneName) == 0x000014, "Member 'TKMathFunctionLibrary_GetVelocityAtPoint::BoneName' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_GetVelocityAtPoint, DrawDebugInfo) == 0x00001C, "Member 'TKMathFunctionLibrary_GetVelocityAtPoint::DrawDebugInfo' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_GetVelocityAtPoint, ReturnValue) == 0x000020, "Member 'TKMathFunctionLibrary_GetVelocityAtPoint::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.TKMathFunctionLibrary.GridSnap
// 0x001C (0x001C - 0x0000)
struct TKMathFunctionLibrary_GridSnap final
{
public:
	struct FVector                                A;                                                 // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Grid;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TKMathFunctionLibrary_GridSnap) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_GridSnap");
static_assert(sizeof(TKMathFunctionLibrary_GridSnap) == 0x00001C, "Wrong size on TKMathFunctionLibrary_GridSnap");
static_assert(offsetof(TKMathFunctionLibrary_GridSnap, A) == 0x000000, "Member 'TKMathFunctionLibrary_GridSnap::A' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_GridSnap, Grid) == 0x00000C, "Member 'TKMathFunctionLibrary_GridSnap::Grid' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_GridSnap, ReturnValue) == 0x000010, "Member 'TKMathFunctionLibrary_GridSnap::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.TKMathFunctionLibrary.IsEvenNumber
// 0x0008 (0x0008 - 0x0000)
struct TKMathFunctionLibrary_IsEvenNumber final
{
public:
	float                                         A;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D52[0x3];                                      // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TKMathFunctionLibrary_IsEvenNumber) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_IsEvenNumber");
static_assert(sizeof(TKMathFunctionLibrary_IsEvenNumber) == 0x000008, "Wrong size on TKMathFunctionLibrary_IsEvenNumber");
static_assert(offsetof(TKMathFunctionLibrary_IsEvenNumber, A) == 0x000000, "Member 'TKMathFunctionLibrary_IsEvenNumber::A' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_IsEvenNumber, ReturnValue) == 0x000004, "Member 'TKMathFunctionLibrary_IsEvenNumber::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.TKMathFunctionLibrary.IsLineInsideSphere
// 0x0030 (0x0030 - 0x0000)
struct TKMathFunctionLibrary_IsLineInsideSphere final
{
public:
	struct FVector                                LineStart;                                         // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LineDir;                                           // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LineLength;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SphereOrigin;                                      // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereRadius;                                      // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D53[0x3];                                      // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TKMathFunctionLibrary_IsLineInsideSphere) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_IsLineInsideSphere");
static_assert(sizeof(TKMathFunctionLibrary_IsLineInsideSphere) == 0x000030, "Wrong size on TKMathFunctionLibrary_IsLineInsideSphere");
static_assert(offsetof(TKMathFunctionLibrary_IsLineInsideSphere, LineStart) == 0x000000, "Member 'TKMathFunctionLibrary_IsLineInsideSphere::LineStart' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_IsLineInsideSphere, LineDir) == 0x00000C, "Member 'TKMathFunctionLibrary_IsLineInsideSphere::LineDir' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_IsLineInsideSphere, LineLength) == 0x000018, "Member 'TKMathFunctionLibrary_IsLineInsideSphere::LineLength' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_IsLineInsideSphere, SphereOrigin) == 0x00001C, "Member 'TKMathFunctionLibrary_IsLineInsideSphere::SphereOrigin' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_IsLineInsideSphere, SphereRadius) == 0x000028, "Member 'TKMathFunctionLibrary_IsLineInsideSphere::SphereRadius' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_IsLineInsideSphere, ReturnValue) == 0x00002C, "Member 'TKMathFunctionLibrary_IsLineInsideSphere::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.TKMathFunctionLibrary.IsMultipleOf
// 0x000C (0x000C - 0x0000)
struct TKMathFunctionLibrary_IsMultipleOf final
{
public:
	int32                                         A;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Multiple;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D54[0x3];                                      // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TKMathFunctionLibrary_IsMultipleOf) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_IsMultipleOf");
static_assert(sizeof(TKMathFunctionLibrary_IsMultipleOf) == 0x00000C, "Wrong size on TKMathFunctionLibrary_IsMultipleOf");
static_assert(offsetof(TKMathFunctionLibrary_IsMultipleOf, A) == 0x000000, "Member 'TKMathFunctionLibrary_IsMultipleOf::A' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_IsMultipleOf, Multiple) == 0x000004, "Member 'TKMathFunctionLibrary_IsMultipleOf::Multiple' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_IsMultipleOf, ReturnValue) == 0x000008, "Member 'TKMathFunctionLibrary_IsMultipleOf::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.TKMathFunctionLibrary.IsPointInsideBox
// 0x0028 (0x0028 - 0x0000)
struct TKMathFunctionLibrary_IsPointInsideBox final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoxOrigin;                                         // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoxExtent;                                         // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D55[0x3];                                      // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TKMathFunctionLibrary_IsPointInsideBox) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_IsPointInsideBox");
static_assert(sizeof(TKMathFunctionLibrary_IsPointInsideBox) == 0x000028, "Wrong size on TKMathFunctionLibrary_IsPointInsideBox");
static_assert(offsetof(TKMathFunctionLibrary_IsPointInsideBox, Point) == 0x000000, "Member 'TKMathFunctionLibrary_IsPointInsideBox::Point' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_IsPointInsideBox, BoxOrigin) == 0x00000C, "Member 'TKMathFunctionLibrary_IsPointInsideBox::BoxOrigin' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_IsPointInsideBox, BoxExtent) == 0x000018, "Member 'TKMathFunctionLibrary_IsPointInsideBox::BoxExtent' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_IsPointInsideBox, ReturnValue) == 0x000024, "Member 'TKMathFunctionLibrary_IsPointInsideBox::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.TKMathFunctionLibrary.IsPowerOfTwo
// 0x0008 (0x0008 - 0x0000)
struct TKMathFunctionLibrary_IsPowerOfTwo final
{
public:
	int32                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D56[0x3];                                      // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TKMathFunctionLibrary_IsPowerOfTwo) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_IsPowerOfTwo");
static_assert(sizeof(TKMathFunctionLibrary_IsPowerOfTwo) == 0x000008, "Wrong size on TKMathFunctionLibrary_IsPowerOfTwo");
static_assert(offsetof(TKMathFunctionLibrary_IsPowerOfTwo, X) == 0x000000, "Member 'TKMathFunctionLibrary_IsPowerOfTwo::X' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_IsPowerOfTwo, ReturnValue) == 0x000004, "Member 'TKMathFunctionLibrary_IsPowerOfTwo::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.TKMathFunctionLibrary.LineExtentBoxIntersection
// 0x0060 (0x0060 - 0x0000)
struct TKMathFunctionLibrary_LineExtentBoxIntersection final
{
public:
	struct FBox                                   InBox;                                             // 0x0000(0x001C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Start;                                             // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0028(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Extent;                                            // 0x0034(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0040(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitNormal;                                         // 0x004C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitTime;                                           // 0x0058(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x005C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D57[0x3];                                      // 0x005D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TKMathFunctionLibrary_LineExtentBoxIntersection) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_LineExtentBoxIntersection");
static_assert(sizeof(TKMathFunctionLibrary_LineExtentBoxIntersection) == 0x000060, "Wrong size on TKMathFunctionLibrary_LineExtentBoxIntersection");
static_assert(offsetof(TKMathFunctionLibrary_LineExtentBoxIntersection, InBox) == 0x000000, "Member 'TKMathFunctionLibrary_LineExtentBoxIntersection::InBox' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_LineExtentBoxIntersection, Start) == 0x00001C, "Member 'TKMathFunctionLibrary_LineExtentBoxIntersection::Start' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_LineExtentBoxIntersection, End) == 0x000028, "Member 'TKMathFunctionLibrary_LineExtentBoxIntersection::End' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_LineExtentBoxIntersection, Extent) == 0x000034, "Member 'TKMathFunctionLibrary_LineExtentBoxIntersection::Extent' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_LineExtentBoxIntersection, HitLocation) == 0x000040, "Member 'TKMathFunctionLibrary_LineExtentBoxIntersection::HitLocation' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_LineExtentBoxIntersection, HitNormal) == 0x00004C, "Member 'TKMathFunctionLibrary_LineExtentBoxIntersection::HitNormal' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_LineExtentBoxIntersection, HitTime) == 0x000058, "Member 'TKMathFunctionLibrary_LineExtentBoxIntersection::HitTime' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_LineExtentBoxIntersection, ReturnValue) == 0x00005C, "Member 'TKMathFunctionLibrary_LineExtentBoxIntersection::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.TKMathFunctionLibrary.LineToLineIntersection
// 0x0040 (0x0040 - 0x0000)
struct TKMathFunctionLibrary_LineToLineIntersection final
{
public:
	struct FVector                                IntersectionPoint;                                 // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LinePoint1;                                        // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LineDir1;                                          // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LinePoint2;                                        // 0x0024(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LineDir2;                                          // 0x0030(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x003C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D58[0x3];                                      // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TKMathFunctionLibrary_LineToLineIntersection) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_LineToLineIntersection");
static_assert(sizeof(TKMathFunctionLibrary_LineToLineIntersection) == 0x000040, "Wrong size on TKMathFunctionLibrary_LineToLineIntersection");
static_assert(offsetof(TKMathFunctionLibrary_LineToLineIntersection, IntersectionPoint) == 0x000000, "Member 'TKMathFunctionLibrary_LineToLineIntersection::IntersectionPoint' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_LineToLineIntersection, LinePoint1) == 0x00000C, "Member 'TKMathFunctionLibrary_LineToLineIntersection::LinePoint1' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_LineToLineIntersection, LineDir1) == 0x000018, "Member 'TKMathFunctionLibrary_LineToLineIntersection::LineDir1' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_LineToLineIntersection, LinePoint2) == 0x000024, "Member 'TKMathFunctionLibrary_LineToLineIntersection::LinePoint2' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_LineToLineIntersection, LineDir2) == 0x000030, "Member 'TKMathFunctionLibrary_LineToLineIntersection::LineDir2' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_LineToLineIntersection, ReturnValue) == 0x00003C, "Member 'TKMathFunctionLibrary_LineToLineIntersection::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.TKMathFunctionLibrary.NegateFloat
// 0x0008 (0x0008 - 0x0000)
struct TKMathFunctionLibrary_NegateFloat final
{
public:
	float                                         A;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TKMathFunctionLibrary_NegateFloat) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_NegateFloat");
static_assert(sizeof(TKMathFunctionLibrary_NegateFloat) == 0x000008, "Wrong size on TKMathFunctionLibrary_NegateFloat");
static_assert(offsetof(TKMathFunctionLibrary_NegateFloat, A) == 0x000000, "Member 'TKMathFunctionLibrary_NegateFloat::A' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_NegateFloat, ReturnValue) == 0x000004, "Member 'TKMathFunctionLibrary_NegateFloat::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.TKMathFunctionLibrary.NegateInt
// 0x0008 (0x0008 - 0x0000)
struct TKMathFunctionLibrary_NegateInt final
{
public:
	int32                                         A;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TKMathFunctionLibrary_NegateInt) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_NegateInt");
static_assert(sizeof(TKMathFunctionLibrary_NegateInt) == 0x000008, "Wrong size on TKMathFunctionLibrary_NegateInt");
static_assert(offsetof(TKMathFunctionLibrary_NegateInt, A) == 0x000000, "Member 'TKMathFunctionLibrary_NegateInt::A' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_NegateInt, ReturnValue) == 0x000004, "Member 'TKMathFunctionLibrary_NegateInt::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.TKMathFunctionLibrary.NegateVector2D
// 0x0010 (0x0010 - 0x0000)
struct TKMathFunctionLibrary_NegateVector2D final
{
public:
	struct FVector2D                              A;                                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TKMathFunctionLibrary_NegateVector2D) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_NegateVector2D");
static_assert(sizeof(TKMathFunctionLibrary_NegateVector2D) == 0x000010, "Wrong size on TKMathFunctionLibrary_NegateVector2D");
static_assert(offsetof(TKMathFunctionLibrary_NegateVector2D, A) == 0x000000, "Member 'TKMathFunctionLibrary_NegateVector2D::A' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_NegateVector2D, ReturnValue) == 0x000008, "Member 'TKMathFunctionLibrary_NegateVector2D::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.TKMathFunctionLibrary.PointOnWhichSideOfLineSegment
// 0x0028 (0x0028 - 0x0000)
struct TKMathFunctionLibrary_PointOnWhichSideOfLineSegment final
{
public:
	struct FVector                                LinePoint1;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LinePoint2;                                        // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TKMathFunctionLibrary_PointOnWhichSideOfLineSegment) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_PointOnWhichSideOfLineSegment");
static_assert(sizeof(TKMathFunctionLibrary_PointOnWhichSideOfLineSegment) == 0x000028, "Wrong size on TKMathFunctionLibrary_PointOnWhichSideOfLineSegment");
static_assert(offsetof(TKMathFunctionLibrary_PointOnWhichSideOfLineSegment, LinePoint1) == 0x000000, "Member 'TKMathFunctionLibrary_PointOnWhichSideOfLineSegment::LinePoint1' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_PointOnWhichSideOfLineSegment, LinePoint2) == 0x00000C, "Member 'TKMathFunctionLibrary_PointOnWhichSideOfLineSegment::LinePoint2' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_PointOnWhichSideOfLineSegment, Point) == 0x000018, "Member 'TKMathFunctionLibrary_PointOnWhichSideOfLineSegment::Point' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_PointOnWhichSideOfLineSegment, ReturnValue) == 0x000024, "Member 'TKMathFunctionLibrary_PointOnWhichSideOfLineSegment::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.TKMathFunctionLibrary.ProjectPointOnLine
// 0x0030 (0x0030 - 0x0000)
struct TKMathFunctionLibrary_ProjectPointOnLine final
{
public:
	struct FVector                                LineOrigin;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LineDirection;                                     // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0024(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TKMathFunctionLibrary_ProjectPointOnLine) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_ProjectPointOnLine");
static_assert(sizeof(TKMathFunctionLibrary_ProjectPointOnLine) == 0x000030, "Wrong size on TKMathFunctionLibrary_ProjectPointOnLine");
static_assert(offsetof(TKMathFunctionLibrary_ProjectPointOnLine, LineOrigin) == 0x000000, "Member 'TKMathFunctionLibrary_ProjectPointOnLine::LineOrigin' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ProjectPointOnLine, LineDirection) == 0x00000C, "Member 'TKMathFunctionLibrary_ProjectPointOnLine::LineDirection' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ProjectPointOnLine, Point) == 0x000018, "Member 'TKMathFunctionLibrary_ProjectPointOnLine::Point' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ProjectPointOnLine, ReturnValue) == 0x000024, "Member 'TKMathFunctionLibrary_ProjectPointOnLine::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.TKMathFunctionLibrary.RoundToLowerMultiple
// 0x0010 (0x0010 - 0x0000)
struct TKMathFunctionLibrary_RoundToLowerMultiple final
{
public:
	int32                                         A;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Multiple;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SkipSelf;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D59[0x3];                                      // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TKMathFunctionLibrary_RoundToLowerMultiple) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_RoundToLowerMultiple");
static_assert(sizeof(TKMathFunctionLibrary_RoundToLowerMultiple) == 0x000010, "Wrong size on TKMathFunctionLibrary_RoundToLowerMultiple");
static_assert(offsetof(TKMathFunctionLibrary_RoundToLowerMultiple, A) == 0x000000, "Member 'TKMathFunctionLibrary_RoundToLowerMultiple::A' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_RoundToLowerMultiple, Multiple) == 0x000004, "Member 'TKMathFunctionLibrary_RoundToLowerMultiple::Multiple' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_RoundToLowerMultiple, SkipSelf) == 0x000008, "Member 'TKMathFunctionLibrary_RoundToLowerMultiple::SkipSelf' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_RoundToLowerMultiple, ReturnValue) == 0x00000C, "Member 'TKMathFunctionLibrary_RoundToLowerMultiple::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.TKMathFunctionLibrary.RoundToNearestMultiple
// 0x000C (0x000C - 0x0000)
struct TKMathFunctionLibrary_RoundToNearestMultiple final
{
public:
	int32                                         A;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Multiple;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TKMathFunctionLibrary_RoundToNearestMultiple) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_RoundToNearestMultiple");
static_assert(sizeof(TKMathFunctionLibrary_RoundToNearestMultiple) == 0x00000C, "Wrong size on TKMathFunctionLibrary_RoundToNearestMultiple");
static_assert(offsetof(TKMathFunctionLibrary_RoundToNearestMultiple, A) == 0x000000, "Member 'TKMathFunctionLibrary_RoundToNearestMultiple::A' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_RoundToNearestMultiple, Multiple) == 0x000004, "Member 'TKMathFunctionLibrary_RoundToNearestMultiple::Multiple' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_RoundToNearestMultiple, ReturnValue) == 0x000008, "Member 'TKMathFunctionLibrary_RoundToNearestMultiple::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.TKMathFunctionLibrary.RoundToUpperMultiple
// 0x0010 (0x0010 - 0x0000)
struct TKMathFunctionLibrary_RoundToUpperMultiple final
{
public:
	int32                                         A;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Multiple;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SkipSelf;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D5A[0x3];                                      // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TKMathFunctionLibrary_RoundToUpperMultiple) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_RoundToUpperMultiple");
static_assert(sizeof(TKMathFunctionLibrary_RoundToUpperMultiple) == 0x000010, "Wrong size on TKMathFunctionLibrary_RoundToUpperMultiple");
static_assert(offsetof(TKMathFunctionLibrary_RoundToUpperMultiple, A) == 0x000000, "Member 'TKMathFunctionLibrary_RoundToUpperMultiple::A' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_RoundToUpperMultiple, Multiple) == 0x000004, "Member 'TKMathFunctionLibrary_RoundToUpperMultiple::Multiple' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_RoundToUpperMultiple, SkipSelf) == 0x000008, "Member 'TKMathFunctionLibrary_RoundToUpperMultiple::SkipSelf' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_RoundToUpperMultiple, ReturnValue) == 0x00000C, "Member 'TKMathFunctionLibrary_RoundToUpperMultiple::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.TKMathFunctionLibrary.SetCenterOfMassOffset
// 0x0020 (0x0020 - 0x0000)
struct TKMathFunctionLibrary_SetCenterOfMassOffset final
{
public:
	class UPrimitiveComponent*                    Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D5B[0x4];                                      // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TKMathFunctionLibrary_SetCenterOfMassOffset) == 0x000008, "Wrong alignment on TKMathFunctionLibrary_SetCenterOfMassOffset");
static_assert(sizeof(TKMathFunctionLibrary_SetCenterOfMassOffset) == 0x000020, "Wrong size on TKMathFunctionLibrary_SetCenterOfMassOffset");
static_assert(offsetof(TKMathFunctionLibrary_SetCenterOfMassOffset, Target) == 0x000000, "Member 'TKMathFunctionLibrary_SetCenterOfMassOffset::Target' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_SetCenterOfMassOffset, Offset) == 0x000008, "Member 'TKMathFunctionLibrary_SetCenterOfMassOffset::Offset' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_SetCenterOfMassOffset, BoneName) == 0x000014, "Member 'TKMathFunctionLibrary_SetCenterOfMassOffset::BoneName' has a wrong offset!");

// Function VictoryBPLibrary.TKMathFunctionLibrary.SetVectorLength
// 0x001C (0x001C - 0x0000)
struct TKMathFunctionLibrary_SetVectorLength final
{
public:
	struct FVector                                A;                                                 // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Size;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TKMathFunctionLibrary_SetVectorLength) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_SetVectorLength");
static_assert(sizeof(TKMathFunctionLibrary_SetVectorLength) == 0x00001C, "Wrong size on TKMathFunctionLibrary_SetVectorLength");
static_assert(offsetof(TKMathFunctionLibrary_SetVectorLength, A) == 0x000000, "Member 'TKMathFunctionLibrary_SetVectorLength::A' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_SetVectorLength, Size) == 0x00000C, "Member 'TKMathFunctionLibrary_SetVectorLength::Size' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_SetVectorLength, ReturnValue) == 0x000010, "Member 'TKMathFunctionLibrary_SetVectorLength::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.TKMathFunctionLibrary.SignedDistancePlanePoint
// 0x0028 (0x0028 - 0x0000)
struct TKMathFunctionLibrary_SignedDistancePlanePoint final
{
public:
	struct FVector                                PlaneNormal;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PlanePoint;                                        // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TKMathFunctionLibrary_SignedDistancePlanePoint) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_SignedDistancePlanePoint");
static_assert(sizeof(TKMathFunctionLibrary_SignedDistancePlanePoint) == 0x000028, "Wrong size on TKMathFunctionLibrary_SignedDistancePlanePoint");
static_assert(offsetof(TKMathFunctionLibrary_SignedDistancePlanePoint, PlaneNormal) == 0x000000, "Member 'TKMathFunctionLibrary_SignedDistancePlanePoint::PlaneNormal' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_SignedDistancePlanePoint, PlanePoint) == 0x00000C, "Member 'TKMathFunctionLibrary_SignedDistancePlanePoint::PlanePoint' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_SignedDistancePlanePoint, Point) == 0x000018, "Member 'TKMathFunctionLibrary_SignedDistancePlanePoint::Point' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_SignedDistancePlanePoint, ReturnValue) == 0x000024, "Member 'TKMathFunctionLibrary_SignedDistancePlanePoint::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.TKMathFunctionLibrary.SphereBoxIntersection
// 0x002C (0x002C - 0x0000)
struct TKMathFunctionLibrary_SphereBoxIntersection final
{
public:
	struct FVector                                SphereOrigin;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereRadius;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoxOrigin;                                         // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoxExtent;                                         // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D5C[0x3];                                      // 0x0029(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TKMathFunctionLibrary_SphereBoxIntersection) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_SphereBoxIntersection");
static_assert(sizeof(TKMathFunctionLibrary_SphereBoxIntersection) == 0x00002C, "Wrong size on TKMathFunctionLibrary_SphereBoxIntersection");
static_assert(offsetof(TKMathFunctionLibrary_SphereBoxIntersection, SphereOrigin) == 0x000000, "Member 'TKMathFunctionLibrary_SphereBoxIntersection::SphereOrigin' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_SphereBoxIntersection, SphereRadius) == 0x00000C, "Member 'TKMathFunctionLibrary_SphereBoxIntersection::SphereRadius' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_SphereBoxIntersection, BoxOrigin) == 0x000010, "Member 'TKMathFunctionLibrary_SphereBoxIntersection::BoxOrigin' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_SphereBoxIntersection, BoxExtent) == 0x00001C, "Member 'TKMathFunctionLibrary_SphereBoxIntersection::BoxExtent' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_SphereBoxIntersection, ReturnValue) == 0x000028, "Member 'TKMathFunctionLibrary_SphereBoxIntersection::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.TKMathFunctionLibrary.VectorDegreesToRadians
// 0x0018 (0x0018 - 0x0000)
struct TKMathFunctionLibrary_VectorDegreesToRadians final
{
public:
	struct FVector                                DegVector;                                         // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TKMathFunctionLibrary_VectorDegreesToRadians) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_VectorDegreesToRadians");
static_assert(sizeof(TKMathFunctionLibrary_VectorDegreesToRadians) == 0x000018, "Wrong size on TKMathFunctionLibrary_VectorDegreesToRadians");
static_assert(offsetof(TKMathFunctionLibrary_VectorDegreesToRadians, DegVector) == 0x000000, "Member 'TKMathFunctionLibrary_VectorDegreesToRadians::DegVector' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_VectorDegreesToRadians, ReturnValue) == 0x00000C, "Member 'TKMathFunctionLibrary_VectorDegreesToRadians::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.TKMathFunctionLibrary.VectorRadiansToDegrees
// 0x0018 (0x0018 - 0x0000)
struct TKMathFunctionLibrary_VectorRadiansToDegrees final
{
public:
	struct FVector                                RadVector;                                         // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TKMathFunctionLibrary_VectorRadiansToDegrees) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_VectorRadiansToDegrees");
static_assert(sizeof(TKMathFunctionLibrary_VectorRadiansToDegrees) == 0x000018, "Wrong size on TKMathFunctionLibrary_VectorRadiansToDegrees");
static_assert(offsetof(TKMathFunctionLibrary_VectorRadiansToDegrees, RadVector) == 0x000000, "Member 'TKMathFunctionLibrary_VectorRadiansToDegrees::RadVector' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_VectorRadiansToDegrees, ReturnValue) == 0x00000C, "Member 'TKMathFunctionLibrary_VectorRadiansToDegrees::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.RamaVictoryPluginCreateProcessPipe.CreatePipe
// 0x0001 (0x0001 - 0x0000)
struct RamaVictoryPluginCreateProcessPipe_CreatePipe final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RamaVictoryPluginCreateProcessPipe_CreatePipe) == 0x000001, "Wrong alignment on RamaVictoryPluginCreateProcessPipe_CreatePipe");
static_assert(sizeof(RamaVictoryPluginCreateProcessPipe_CreatePipe) == 0x000001, "Wrong size on RamaVictoryPluginCreateProcessPipe_CreatePipe");
static_assert(offsetof(RamaVictoryPluginCreateProcessPipe_CreatePipe, ReturnValue) == 0x000000, "Member 'RamaVictoryPluginCreateProcessPipe_CreatePipe::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.RamaVictoryPluginCreateProcessPipe.PipeIsValid
// 0x0001 (0x0001 - 0x0000)
struct RamaVictoryPluginCreateProcessPipe_PipeIsValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RamaVictoryPluginCreateProcessPipe_PipeIsValid) == 0x000001, "Wrong alignment on RamaVictoryPluginCreateProcessPipe_PipeIsValid");
static_assert(sizeof(RamaVictoryPluginCreateProcessPipe_PipeIsValid) == 0x000001, "Wrong size on RamaVictoryPluginCreateProcessPipe_PipeIsValid");
static_assert(offsetof(RamaVictoryPluginCreateProcessPipe_PipeIsValid, ReturnValue) == 0x000000, "Member 'RamaVictoryPluginCreateProcessPipe_PipeIsValid::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.RamaVictoryPluginCreateProcessPipe.ReadFromPipe
// 0x0018 (0x0018 - 0x0000)
struct RamaVictoryPluginCreateProcessPipe_ReadFromPipe final
{
public:
	class FString                                 PipeContents;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D5E[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RamaVictoryPluginCreateProcessPipe_ReadFromPipe) == 0x000008, "Wrong alignment on RamaVictoryPluginCreateProcessPipe_ReadFromPipe");
static_assert(sizeof(RamaVictoryPluginCreateProcessPipe_ReadFromPipe) == 0x000018, "Wrong size on RamaVictoryPluginCreateProcessPipe_ReadFromPipe");
static_assert(offsetof(RamaVictoryPluginCreateProcessPipe_ReadFromPipe, PipeContents) == 0x000000, "Member 'RamaVictoryPluginCreateProcessPipe_ReadFromPipe::PipeContents' has a wrong offset!");
static_assert(offsetof(RamaVictoryPluginCreateProcessPipe_ReadFromPipe, ReturnValue) == 0x000010, "Member 'RamaVictoryPluginCreateProcessPipe_ReadFromPipe::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryTMapComp.Int_Float__AddPair
// 0x0008 (0x0008 - 0x0000)
struct VictoryTMapComp_Int_Float__AddPair final
{
public:
	int32                                         Key;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryTMapComp_Int_Float__AddPair) == 0x000004, "Wrong alignment on VictoryTMapComp_Int_Float__AddPair");
static_assert(sizeof(VictoryTMapComp_Int_Float__AddPair) == 0x000008, "Wrong size on VictoryTMapComp_Int_Float__AddPair");
static_assert(offsetof(VictoryTMapComp_Int_Float__AddPair, Key) == 0x000000, "Member 'VictoryTMapComp_Int_Float__AddPair::Key' has a wrong offset!");
static_assert(offsetof(VictoryTMapComp_Int_Float__AddPair, Value) == 0x000004, "Member 'VictoryTMapComp_Int_Float__AddPair::Value' has a wrong offset!");

// Function VictoryBPLibrary.VictoryTMapComp.Int_Float__Get
// 0x000C (0x000C - 0x0000)
struct VictoryTMapComp_Int_Float__Get final
{
public:
	int32                                         Key;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D60[0x3];                                      // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryTMapComp_Int_Float__Get) == 0x000004, "Wrong alignment on VictoryTMapComp_Int_Float__Get");
static_assert(sizeof(VictoryTMapComp_Int_Float__Get) == 0x00000C, "Wrong size on VictoryTMapComp_Int_Float__Get");
static_assert(offsetof(VictoryTMapComp_Int_Float__Get, Key) == 0x000000, "Member 'VictoryTMapComp_Int_Float__Get::Key' has a wrong offset!");
static_assert(offsetof(VictoryTMapComp_Int_Float__Get, IsValid) == 0x000004, "Member 'VictoryTMapComp_Int_Float__Get::IsValid' has a wrong offset!");
static_assert(offsetof(VictoryTMapComp_Int_Float__Get, ReturnValue) == 0x000008, "Member 'VictoryTMapComp_Int_Float__Get::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryTMapComp.Int_Float__Remove
// 0x0008 (0x0008 - 0x0000)
struct VictoryTMapComp_Int_Float__Remove final
{
public:
	int32                                         Key;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryTMapComp_Int_Float__Remove) == 0x000004, "Wrong alignment on VictoryTMapComp_Int_Float__Remove");
static_assert(sizeof(VictoryTMapComp_Int_Float__Remove) == 0x000008, "Wrong size on VictoryTMapComp_Int_Float__Remove");
static_assert(offsetof(VictoryTMapComp_Int_Float__Remove, Key) == 0x000000, "Member 'VictoryTMapComp_Int_Float__Remove::Key' has a wrong offset!");
static_assert(offsetof(VictoryTMapComp_Int_Float__Remove, Value) == 0x000004, "Member 'VictoryTMapComp_Int_Float__Remove::Value' has a wrong offset!");

// Function VictoryBPLibrary.VictoryTMapComp.Int_Vector__AddPair
// 0x0010 (0x0010 - 0x0000)
struct VictoryTMapComp_Int_Vector__AddPair final
{
public:
	int32                                         Key;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Value;                                             // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryTMapComp_Int_Vector__AddPair) == 0x000004, "Wrong alignment on VictoryTMapComp_Int_Vector__AddPair");
static_assert(sizeof(VictoryTMapComp_Int_Vector__AddPair) == 0x000010, "Wrong size on VictoryTMapComp_Int_Vector__AddPair");
static_assert(offsetof(VictoryTMapComp_Int_Vector__AddPair, Key) == 0x000000, "Member 'VictoryTMapComp_Int_Vector__AddPair::Key' has a wrong offset!");
static_assert(offsetof(VictoryTMapComp_Int_Vector__AddPair, Value) == 0x000004, "Member 'VictoryTMapComp_Int_Vector__AddPair::Value' has a wrong offset!");

// Function VictoryBPLibrary.VictoryTMapComp.Int_Vector__Get
// 0x0014 (0x0014 - 0x0000)
struct VictoryTMapComp_Int_Vector__Get final
{
public:
	int32                                         Key;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D61[0x3];                                      // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryTMapComp_Int_Vector__Get) == 0x000004, "Wrong alignment on VictoryTMapComp_Int_Vector__Get");
static_assert(sizeof(VictoryTMapComp_Int_Vector__Get) == 0x000014, "Wrong size on VictoryTMapComp_Int_Vector__Get");
static_assert(offsetof(VictoryTMapComp_Int_Vector__Get, Key) == 0x000000, "Member 'VictoryTMapComp_Int_Vector__Get::Key' has a wrong offset!");
static_assert(offsetof(VictoryTMapComp_Int_Vector__Get, IsValid) == 0x000004, "Member 'VictoryTMapComp_Int_Vector__Get::IsValid' has a wrong offset!");
static_assert(offsetof(VictoryTMapComp_Int_Vector__Get, ReturnValue) == 0x000008, "Member 'VictoryTMapComp_Int_Vector__Get::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryTMapComp.Int_Vector__Remove
// 0x0004 (0x0004 - 0x0000)
struct VictoryTMapComp_Int_Vector__Remove final
{
public:
	int32                                         Key;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryTMapComp_Int_Vector__Remove) == 0x000004, "Wrong alignment on VictoryTMapComp_Int_Vector__Remove");
static_assert(sizeof(VictoryTMapComp_Int_Vector__Remove) == 0x000004, "Wrong size on VictoryTMapComp_Int_Vector__Remove");
static_assert(offsetof(VictoryTMapComp_Int_Vector__Remove, Key) == 0x000000, "Member 'VictoryTMapComp_Int_Vector__Remove::Key' has a wrong offset!");

// Function VictoryBPLibrary.VictoryTMapComp.String_Actor__AddPair
// 0x0018 (0x0018 - 0x0000)
struct VictoryTMapComp_String_Actor__AddPair final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Value;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryTMapComp_String_Actor__AddPair) == 0x000008, "Wrong alignment on VictoryTMapComp_String_Actor__AddPair");
static_assert(sizeof(VictoryTMapComp_String_Actor__AddPair) == 0x000018, "Wrong size on VictoryTMapComp_String_Actor__AddPair");
static_assert(offsetof(VictoryTMapComp_String_Actor__AddPair, Key) == 0x000000, "Member 'VictoryTMapComp_String_Actor__AddPair::Key' has a wrong offset!");
static_assert(offsetof(VictoryTMapComp_String_Actor__AddPair, Value) == 0x000010, "Member 'VictoryTMapComp_String_Actor__AddPair::Value' has a wrong offset!");

// Function VictoryBPLibrary.VictoryTMapComp.String_Actor__Get
// 0x0020 (0x0020 - 0x0000)
struct VictoryTMapComp_String_Actor__Get final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D62[0x7];                                      // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryTMapComp_String_Actor__Get) == 0x000008, "Wrong alignment on VictoryTMapComp_String_Actor__Get");
static_assert(sizeof(VictoryTMapComp_String_Actor__Get) == 0x000020, "Wrong size on VictoryTMapComp_String_Actor__Get");
static_assert(offsetof(VictoryTMapComp_String_Actor__Get, Key) == 0x000000, "Member 'VictoryTMapComp_String_Actor__Get::Key' has a wrong offset!");
static_assert(offsetof(VictoryTMapComp_String_Actor__Get, IsValid) == 0x000010, "Member 'VictoryTMapComp_String_Actor__Get::IsValid' has a wrong offset!");
static_assert(offsetof(VictoryTMapComp_String_Actor__Get, ReturnValue) == 0x000018, "Member 'VictoryTMapComp_String_Actor__Get::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryTMapComp.String_Actor__Remove
// 0x0010 (0x0010 - 0x0000)
struct VictoryTMapComp_String_Actor__Remove final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryTMapComp_String_Actor__Remove) == 0x000008, "Wrong alignment on VictoryTMapComp_String_Actor__Remove");
static_assert(sizeof(VictoryTMapComp_String_Actor__Remove) == 0x000010, "Wrong size on VictoryTMapComp_String_Actor__Remove");
static_assert(offsetof(VictoryTMapComp_String_Actor__Remove, Key) == 0x000000, "Member 'VictoryTMapComp_String_Actor__Remove::Key' has a wrong offset!");

// Function VictoryBPLibrary.VictoryTMapComp.String_Int__AddPair
// 0x0018 (0x0018 - 0x0000)
struct VictoryTMapComp_String_Int__AddPair final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D63[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryTMapComp_String_Int__AddPair) == 0x000008, "Wrong alignment on VictoryTMapComp_String_Int__AddPair");
static_assert(sizeof(VictoryTMapComp_String_Int__AddPair) == 0x000018, "Wrong size on VictoryTMapComp_String_Int__AddPair");
static_assert(offsetof(VictoryTMapComp_String_Int__AddPair, Key) == 0x000000, "Member 'VictoryTMapComp_String_Int__AddPair::Key' has a wrong offset!");
static_assert(offsetof(VictoryTMapComp_String_Int__AddPair, Value) == 0x000010, "Member 'VictoryTMapComp_String_Int__AddPair::Value' has a wrong offset!");

// Function VictoryBPLibrary.VictoryTMapComp.String_Int__Get
// 0x0018 (0x0018 - 0x0000)
struct VictoryTMapComp_String_Int__Get final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D64[0x3];                                      // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryTMapComp_String_Int__Get) == 0x000008, "Wrong alignment on VictoryTMapComp_String_Int__Get");
static_assert(sizeof(VictoryTMapComp_String_Int__Get) == 0x000018, "Wrong size on VictoryTMapComp_String_Int__Get");
static_assert(offsetof(VictoryTMapComp_String_Int__Get, Key) == 0x000000, "Member 'VictoryTMapComp_String_Int__Get::Key' has a wrong offset!");
static_assert(offsetof(VictoryTMapComp_String_Int__Get, IsValid) == 0x000010, "Member 'VictoryTMapComp_String_Int__Get::IsValid' has a wrong offset!");
static_assert(offsetof(VictoryTMapComp_String_Int__Get, ReturnValue) == 0x000014, "Member 'VictoryTMapComp_String_Int__Get::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryTMapComp.String_Int__Remove
// 0x0010 (0x0010 - 0x0000)
struct VictoryTMapComp_String_Int__Remove final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryTMapComp_String_Int__Remove) == 0x000008, "Wrong alignment on VictoryTMapComp_String_Int__Remove");
static_assert(sizeof(VictoryTMapComp_String_Int__Remove) == 0x000010, "Wrong size on VictoryTMapComp_String_Int__Remove");
static_assert(offsetof(VictoryTMapComp_String_Int__Remove, Key) == 0x000000, "Member 'VictoryTMapComp_String_Int__Remove::Key' has a wrong offset!");

// Function VictoryBPLibrary.VictoryTMapComp.String_Rotator__AddPair
// 0x0020 (0x0020 - 0x0000)
struct VictoryTMapComp_String_Rotator__AddPair final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Value;                                             // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D65[0x4];                                      // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryTMapComp_String_Rotator__AddPair) == 0x000008, "Wrong alignment on VictoryTMapComp_String_Rotator__AddPair");
static_assert(sizeof(VictoryTMapComp_String_Rotator__AddPair) == 0x000020, "Wrong size on VictoryTMapComp_String_Rotator__AddPair");
static_assert(offsetof(VictoryTMapComp_String_Rotator__AddPair, Key) == 0x000000, "Member 'VictoryTMapComp_String_Rotator__AddPair::Key' has a wrong offset!");
static_assert(offsetof(VictoryTMapComp_String_Rotator__AddPair, Value) == 0x000010, "Member 'VictoryTMapComp_String_Rotator__AddPair::Value' has a wrong offset!");

// Function VictoryBPLibrary.VictoryTMapComp.String_Rotator__Get
// 0x0020 (0x0020 - 0x0000)
struct VictoryTMapComp_String_Rotator__Get final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D66[0x3];                                      // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               ReturnValue;                                       // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryTMapComp_String_Rotator__Get) == 0x000008, "Wrong alignment on VictoryTMapComp_String_Rotator__Get");
static_assert(sizeof(VictoryTMapComp_String_Rotator__Get) == 0x000020, "Wrong size on VictoryTMapComp_String_Rotator__Get");
static_assert(offsetof(VictoryTMapComp_String_Rotator__Get, Key) == 0x000000, "Member 'VictoryTMapComp_String_Rotator__Get::Key' has a wrong offset!");
static_assert(offsetof(VictoryTMapComp_String_Rotator__Get, IsValid) == 0x000010, "Member 'VictoryTMapComp_String_Rotator__Get::IsValid' has a wrong offset!");
static_assert(offsetof(VictoryTMapComp_String_Rotator__Get, ReturnValue) == 0x000014, "Member 'VictoryTMapComp_String_Rotator__Get::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryTMapComp.String_Rotator__Remove
// 0x0010 (0x0010 - 0x0000)
struct VictoryTMapComp_String_Rotator__Remove final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryTMapComp_String_Rotator__Remove) == 0x000008, "Wrong alignment on VictoryTMapComp_String_Rotator__Remove");
static_assert(sizeof(VictoryTMapComp_String_Rotator__Remove) == 0x000010, "Wrong size on VictoryTMapComp_String_Rotator__Remove");
static_assert(offsetof(VictoryTMapComp_String_Rotator__Remove, Key) == 0x000000, "Member 'VictoryTMapComp_String_Rotator__Remove::Key' has a wrong offset!");

// Function VictoryBPLibrary.VictoryTMapComp.String_String__AddPair
// 0x0020 (0x0020 - 0x0000)
struct VictoryTMapComp_String_String__AddPair final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryTMapComp_String_String__AddPair) == 0x000008, "Wrong alignment on VictoryTMapComp_String_String__AddPair");
static_assert(sizeof(VictoryTMapComp_String_String__AddPair) == 0x000020, "Wrong size on VictoryTMapComp_String_String__AddPair");
static_assert(offsetof(VictoryTMapComp_String_String__AddPair, Key) == 0x000000, "Member 'VictoryTMapComp_String_String__AddPair::Key' has a wrong offset!");
static_assert(offsetof(VictoryTMapComp_String_String__AddPair, Value) == 0x000010, "Member 'VictoryTMapComp_String_String__AddPair::Value' has a wrong offset!");

// Function VictoryBPLibrary.VictoryTMapComp.String_String__Get
// 0x0028 (0x0028 - 0x0000)
struct VictoryTMapComp_String_String__Get final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D67[0x7];                                      // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryTMapComp_String_String__Get) == 0x000008, "Wrong alignment on VictoryTMapComp_String_String__Get");
static_assert(sizeof(VictoryTMapComp_String_String__Get) == 0x000028, "Wrong size on VictoryTMapComp_String_String__Get");
static_assert(offsetof(VictoryTMapComp_String_String__Get, Key) == 0x000000, "Member 'VictoryTMapComp_String_String__Get::Key' has a wrong offset!");
static_assert(offsetof(VictoryTMapComp_String_String__Get, IsValid) == 0x000010, "Member 'VictoryTMapComp_String_String__Get::IsValid' has a wrong offset!");
static_assert(offsetof(VictoryTMapComp_String_String__Get, ReturnValue) == 0x000018, "Member 'VictoryTMapComp_String_String__Get::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryTMapComp.String_String__Remove
// 0x0010 (0x0010 - 0x0000)
struct VictoryTMapComp_String_String__Remove final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryTMapComp_String_String__Remove) == 0x000008, "Wrong alignment on VictoryTMapComp_String_String__Remove");
static_assert(sizeof(VictoryTMapComp_String_String__Remove) == 0x000010, "Wrong size on VictoryTMapComp_String_String__Remove");
static_assert(offsetof(VictoryTMapComp_String_String__Remove, Key) == 0x000000, "Member 'VictoryTMapComp_String_String__Remove::Key' has a wrong offset!");

// Function VictoryBPLibrary.VictoryTMapComp.String_Vector__AddPair
// 0x0020 (0x0020 - 0x0000)
struct VictoryTMapComp_String_Vector__AddPair final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Value;                                             // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D68[0x4];                                      // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryTMapComp_String_Vector__AddPair) == 0x000008, "Wrong alignment on VictoryTMapComp_String_Vector__AddPair");
static_assert(sizeof(VictoryTMapComp_String_Vector__AddPair) == 0x000020, "Wrong size on VictoryTMapComp_String_Vector__AddPair");
static_assert(offsetof(VictoryTMapComp_String_Vector__AddPair, Key) == 0x000000, "Member 'VictoryTMapComp_String_Vector__AddPair::Key' has a wrong offset!");
static_assert(offsetof(VictoryTMapComp_String_Vector__AddPair, Value) == 0x000010, "Member 'VictoryTMapComp_String_Vector__AddPair::Value' has a wrong offset!");

// Function VictoryBPLibrary.VictoryTMapComp.String_Vector__Get
// 0x0020 (0x0020 - 0x0000)
struct VictoryTMapComp_String_Vector__Get final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D69[0x3];                                      // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryTMapComp_String_Vector__Get) == 0x000008, "Wrong alignment on VictoryTMapComp_String_Vector__Get");
static_assert(sizeof(VictoryTMapComp_String_Vector__Get) == 0x000020, "Wrong size on VictoryTMapComp_String_Vector__Get");
static_assert(offsetof(VictoryTMapComp_String_Vector__Get, Key) == 0x000000, "Member 'VictoryTMapComp_String_Vector__Get::Key' has a wrong offset!");
static_assert(offsetof(VictoryTMapComp_String_Vector__Get, IsValid) == 0x000010, "Member 'VictoryTMapComp_String_Vector__Get::IsValid' has a wrong offset!");
static_assert(offsetof(VictoryTMapComp_String_Vector__Get, ReturnValue) == 0x000014, "Member 'VictoryTMapComp_String_Vector__Get::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryTMapComp.String_Vector__Remove
// 0x0010 (0x0010 - 0x0000)
struct VictoryTMapComp_String_Vector__Remove final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryTMapComp_String_Vector__Remove) == 0x000008, "Wrong alignment on VictoryTMapComp_String_Vector__Remove");
static_assert(sizeof(VictoryTMapComp_String_Vector__Remove) == 0x000010, "Wrong size on VictoryTMapComp_String_Vector__Remove");
static_assert(offsetof(VictoryTMapComp_String_Vector__Remove, Key) == 0x000000, "Member 'VictoryTMapComp_String_Vector__Remove::Key' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Accessor__GetCharacterSkeletalMesh
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_Accessor__GetCharacterSkeletalMesh final
{
public:
	class AActor*                                 TheCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D6A[0x7];                                      // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_Accessor__GetCharacterSkeletalMesh) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Accessor__GetCharacterSkeletalMesh");
static_assert(sizeof(VictoryBPFunctionLibrary_Accessor__GetCharacterSkeletalMesh) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_Accessor__GetCharacterSkeletalMesh");
static_assert(offsetof(VictoryBPFunctionLibrary_Accessor__GetCharacterSkeletalMesh, TheCharacter) == 0x000000, "Member 'VictoryBPFunctionLibrary_Accessor__GetCharacterSkeletalMesh::TheCharacter' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Accessor__GetCharacterSkeletalMesh, IsValid) == 0x000008, "Member 'VictoryBPFunctionLibrary_Accessor__GetCharacterSkeletalMesh::IsValid' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Accessor__GetCharacterSkeletalMesh, ReturnValue) == 0x000010, "Member 'VictoryBPFunctionLibrary_Accessor__GetCharacterSkeletalMesh::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Accessor__GetNameAsString
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_Accessor__GetNameAsString final
{
public:
	const class UObject*                          TheObject;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_Accessor__GetNameAsString) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Accessor__GetNameAsString");
static_assert(sizeof(VictoryBPFunctionLibrary_Accessor__GetNameAsString) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_Accessor__GetNameAsString");
static_assert(offsetof(VictoryBPFunctionLibrary_Accessor__GetNameAsString, TheObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_Accessor__GetNameAsString::TheObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Accessor__GetNameAsString, ReturnValue) == 0x000008, "Member 'VictoryBPFunctionLibrary_Accessor__GetNameAsString::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Accessor__GetPlayerController
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_Accessor__GetPlayerController final
{
public:
	class AActor*                                 TheCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D6B[0x7];                                      // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_Accessor__GetPlayerController) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Accessor__GetPlayerController");
static_assert(sizeof(VictoryBPFunctionLibrary_Accessor__GetPlayerController) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_Accessor__GetPlayerController");
static_assert(offsetof(VictoryBPFunctionLibrary_Accessor__GetPlayerController, TheCharacter) == 0x000000, "Member 'VictoryBPFunctionLibrary_Accessor__GetPlayerController::TheCharacter' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Accessor__GetPlayerController, IsValid) == 0x000008, "Member 'VictoryBPFunctionLibrary_Accessor__GetPlayerController::IsValid' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Accessor__GetPlayerController, ReturnValue) == 0x000010, "Member 'VictoryBPFunctionLibrary_Accessor__GetPlayerController::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Actor__GetAttachedActors
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_Actor__GetAttachedActors final
{
public:
	class AActor*                                 ParentActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ActorsArray;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_Actor__GetAttachedActors) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Actor__GetAttachedActors");
static_assert(sizeof(VictoryBPFunctionLibrary_Actor__GetAttachedActors) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_Actor__GetAttachedActors");
static_assert(offsetof(VictoryBPFunctionLibrary_Actor__GetAttachedActors, ParentActor) == 0x000000, "Member 'VictoryBPFunctionLibrary_Actor__GetAttachedActors::ParentActor' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Actor__GetAttachedActors, ActorsArray) == 0x000008, "Member 'VictoryBPFunctionLibrary_Actor__GetAttachedActors::ActorsArray' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Actor__TeleportToActor
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_Actor__TeleportToActor final
{
public:
	class AActor*                                 ActorToTeleport;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DestinationActor;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D6C[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Actor__TeleportToActor) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Actor__TeleportToActor");
static_assert(sizeof(VictoryBPFunctionLibrary_Actor__TeleportToActor) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_Actor__TeleportToActor");
static_assert(offsetof(VictoryBPFunctionLibrary_Actor__TeleportToActor, ActorToTeleport) == 0x000000, "Member 'VictoryBPFunctionLibrary_Actor__TeleportToActor::ActorToTeleport' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Actor__TeleportToActor, DestinationActor) == 0x000008, "Member 'VictoryBPFunctionLibrary_Actor__TeleportToActor::DestinationActor' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Actor__TeleportToActor, ReturnValue) == 0x000010, "Member 'VictoryBPFunctionLibrary_Actor__TeleportToActor::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Actor_PrestreamTextures
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_Actor_PrestreamTextures final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Seconds;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableStreaming;                                  // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D6D[0x3];                                      // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CinematicTextureGroups;                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D6E[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Actor_PrestreamTextures) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Actor_PrestreamTextures");
static_assert(sizeof(VictoryBPFunctionLibrary_Actor_PrestreamTextures) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_Actor_PrestreamTextures");
static_assert(offsetof(VictoryBPFunctionLibrary_Actor_PrestreamTextures, Target) == 0x000000, "Member 'VictoryBPFunctionLibrary_Actor_PrestreamTextures::Target' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Actor_PrestreamTextures, Seconds) == 0x000008, "Member 'VictoryBPFunctionLibrary_Actor_PrestreamTextures::Seconds' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Actor_PrestreamTextures, bEnableStreaming) == 0x00000C, "Member 'VictoryBPFunctionLibrary_Actor_PrestreamTextures::bEnableStreaming' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Actor_PrestreamTextures, CinematicTextureGroups) == 0x000010, "Member 'VictoryBPFunctionLibrary_Actor_PrestreamTextures::CinematicTextureGroups' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.AddToActorRotation
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_AddToActorRotation final
{
public:
	class AActor*                                 TheActor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               AddRot;                                            // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D6F[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_AddToActorRotation) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_AddToActorRotation");
static_assert(sizeof(VictoryBPFunctionLibrary_AddToActorRotation) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_AddToActorRotation");
static_assert(offsetof(VictoryBPFunctionLibrary_AddToActorRotation, TheActor) == 0x000000, "Member 'VictoryBPFunctionLibrary_AddToActorRotation::TheActor' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_AddToActorRotation, AddRot) == 0x000008, "Member 'VictoryBPFunctionLibrary_AddToActorRotation::AddRot' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.AddToStreamingLevels
// 0x0038 (0x0038 - 0x0000)
struct VictoryBPFunctionLibrary_AddToStreamingLevels final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLevelStreamInstanceInfo               LevelInstanceInfo;                                 // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_AddToStreamingLevels) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_AddToStreamingLevels");
static_assert(sizeof(VictoryBPFunctionLibrary_AddToStreamingLevels) == 0x000038, "Wrong size on VictoryBPFunctionLibrary_AddToStreamingLevels");
static_assert(offsetof(VictoryBPFunctionLibrary_AddToStreamingLevels, WorldContextObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_AddToStreamingLevels::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_AddToStreamingLevels, LevelInstanceInfo) == 0x000008, "Member 'VictoryBPFunctionLibrary_AddToStreamingLevels::LevelInstanceInfo' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Animation__GetAimOffsets
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_Animation__GetAimOffsets final
{
public:
	class AActor*                                 AnimBPOwner;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pitch;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D70[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Animation__GetAimOffsets) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Animation__GetAimOffsets");
static_assert(sizeof(VictoryBPFunctionLibrary_Animation__GetAimOffsets) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_Animation__GetAimOffsets");
static_assert(offsetof(VictoryBPFunctionLibrary_Animation__GetAimOffsets, AnimBPOwner) == 0x000000, "Member 'VictoryBPFunctionLibrary_Animation__GetAimOffsets::AnimBPOwner' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Animation__GetAimOffsets, Pitch) == 0x000008, "Member 'VictoryBPFunctionLibrary_Animation__GetAimOffsets::Pitch' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Animation__GetAimOffsets, Yaw) == 0x00000C, "Member 'VictoryBPFunctionLibrary_Animation__GetAimOffsets::Yaw' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Animation__GetAimOffsets, ReturnValue) == 0x000010, "Member 'VictoryBPFunctionLibrary_Animation__GetAimOffsets::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Animation__GetAimOffsetsFromRotation
// 0x0020 (0x0020 - 0x0000)
struct VictoryBPFunctionLibrary_Animation__GetAimOffsetsFromRotation final
{
public:
	class AActor*                                 AnimBPOwner;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               TheRotation;                                       // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Pitch;                                             // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D71[0x3];                                      // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Animation__GetAimOffsetsFromRotation) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Animation__GetAimOffsetsFromRotation");
static_assert(sizeof(VictoryBPFunctionLibrary_Animation__GetAimOffsetsFromRotation) == 0x000020, "Wrong size on VictoryBPFunctionLibrary_Animation__GetAimOffsetsFromRotation");
static_assert(offsetof(VictoryBPFunctionLibrary_Animation__GetAimOffsetsFromRotation, AnimBPOwner) == 0x000000, "Member 'VictoryBPFunctionLibrary_Animation__GetAimOffsetsFromRotation::AnimBPOwner' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Animation__GetAimOffsetsFromRotation, TheRotation) == 0x000008, "Member 'VictoryBPFunctionLibrary_Animation__GetAimOffsetsFromRotation::TheRotation' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Animation__GetAimOffsetsFromRotation, Pitch) == 0x000014, "Member 'VictoryBPFunctionLibrary_Animation__GetAimOffsetsFromRotation::Pitch' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Animation__GetAimOffsetsFromRotation, Yaw) == 0x000018, "Member 'VictoryBPFunctionLibrary_Animation__GetAimOffsetsFromRotation::Yaw' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Animation__GetAimOffsetsFromRotation, ReturnValue) == 0x00001C, "Member 'VictoryBPFunctionLibrary_Animation__GetAimOffsetsFromRotation::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.AppendMultiple
// 0x0030 (0x0030 - 0x0000)
struct VictoryBPFunctionLibrary_AppendMultiple final
{
public:
	class FString                                 A;                                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 B;                                                 // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_AppendMultiple) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_AppendMultiple");
static_assert(sizeof(VictoryBPFunctionLibrary_AppendMultiple) == 0x000030, "Wrong size on VictoryBPFunctionLibrary_AppendMultiple");
static_assert(offsetof(VictoryBPFunctionLibrary_AppendMultiple, A) == 0x000000, "Member 'VictoryBPFunctionLibrary_AppendMultiple::A' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_AppendMultiple, B) == 0x000010, "Member 'VictoryBPFunctionLibrary_AppendMultiple::B' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_AppendMultiple, ReturnValue) == 0x000020, "Member 'VictoryBPFunctionLibrary_AppendMultiple::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Array_IsValidIndex
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_Array_IsValidIndex final
{
public:
	TArray<int32>                                 TargetArray;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D72[0x3];                                      // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Array_IsValidIndex) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Array_IsValidIndex");
static_assert(sizeof(VictoryBPFunctionLibrary_Array_IsValidIndex) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_Array_IsValidIndex");
static_assert(offsetof(VictoryBPFunctionLibrary_Array_IsValidIndex, TargetArray) == 0x000000, "Member 'VictoryBPFunctionLibrary_Array_IsValidIndex::TargetArray' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Array_IsValidIndex, Param_Index) == 0x000010, "Member 'VictoryBPFunctionLibrary_Array_IsValidIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Array_IsValidIndex, ReturnValue) == 0x000014, "Member 'VictoryBPFunctionLibrary_Array_IsValidIndex::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Array_Sort
// 0x0020 (0x0020 - 0x0000)
struct VictoryBPFunctionLibrary_Array_Sort final
{
public:
	TArray<int32>                                 TargetArray;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bAscendingOrder;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D73[0x3];                                      // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   VariableName;                                      // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D74[0x4];                                      // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Array_Sort) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Array_Sort");
static_assert(sizeof(VictoryBPFunctionLibrary_Array_Sort) == 0x000020, "Wrong size on VictoryBPFunctionLibrary_Array_Sort");
static_assert(offsetof(VictoryBPFunctionLibrary_Array_Sort, TargetArray) == 0x000000, "Member 'VictoryBPFunctionLibrary_Array_Sort::TargetArray' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Array_Sort, bAscendingOrder) == 0x000010, "Member 'VictoryBPFunctionLibrary_Array_Sort::bAscendingOrder' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Array_Sort, VariableName) == 0x000014, "Member 'VictoryBPFunctionLibrary_Array_Sort::VariableName' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Calcs__ClosestPointToSourcePoint
// 0x0030 (0x0030 - 0x0000)
struct VictoryBPFunctionLibrary_Calcs__ClosestPointToSourcePoint final
{
public:
	struct FVector                                Source;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D75[0x4];                                      // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        OtherPoints;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                ClosestPoint;                                      // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_Calcs__ClosestPointToSourcePoint) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Calcs__ClosestPointToSourcePoint");
static_assert(sizeof(VictoryBPFunctionLibrary_Calcs__ClosestPointToSourcePoint) == 0x000030, "Wrong size on VictoryBPFunctionLibrary_Calcs__ClosestPointToSourcePoint");
static_assert(offsetof(VictoryBPFunctionLibrary_Calcs__ClosestPointToSourcePoint, Source) == 0x000000, "Member 'VictoryBPFunctionLibrary_Calcs__ClosestPointToSourcePoint::Source' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Calcs__ClosestPointToSourcePoint, OtherPoints) == 0x000010, "Member 'VictoryBPFunctionLibrary_Calcs__ClosestPointToSourcePoint::OtherPoints' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Calcs__ClosestPointToSourcePoint, ClosestPoint) == 0x000020, "Member 'VictoryBPFunctionLibrary_Calcs__ClosestPointToSourcePoint::ClosestPoint' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Calcs__ClosestPointToSourcePoint, ReturnValue) == 0x00002C, "Member 'VictoryBPFunctionLibrary_Calcs__ClosestPointToSourcePoint::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Capture2D_Project
// 0x0020 (0x0020 - 0x0000)
struct VictoryBPFunctionLibrary_Capture2D_Project final
{
public:
	class ASceneCapture2D*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutPixelLocation;                                  // 0x0014(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D76[0x3];                                      // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Capture2D_Project) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Capture2D_Project");
static_assert(sizeof(VictoryBPFunctionLibrary_Capture2D_Project) == 0x000020, "Wrong size on VictoryBPFunctionLibrary_Capture2D_Project");
static_assert(offsetof(VictoryBPFunctionLibrary_Capture2D_Project, Target) == 0x000000, "Member 'VictoryBPFunctionLibrary_Capture2D_Project::Target' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Capture2D_Project, Location) == 0x000008, "Member 'VictoryBPFunctionLibrary_Capture2D_Project::Location' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Capture2D_Project, OutPixelLocation) == 0x000014, "Member 'VictoryBPFunctionLibrary_Capture2D_Project::OutPixelLocation' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Capture2D_Project, ReturnValue) == 0x00001C, "Member 'VictoryBPFunctionLibrary_Capture2D_Project::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Capture2D_SaveImage
// 0x0030 (0x0030 - 0x0000)
struct VictoryBPFunctionLibrary_Capture2D_SaveImage final
{
public:
	class ASceneCapture2D*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ImagePath;                                         // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ClearColour;                                       // 0x0018(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D77[0x7];                                      // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Capture2D_SaveImage) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Capture2D_SaveImage");
static_assert(sizeof(VictoryBPFunctionLibrary_Capture2D_SaveImage) == 0x000030, "Wrong size on VictoryBPFunctionLibrary_Capture2D_SaveImage");
static_assert(offsetof(VictoryBPFunctionLibrary_Capture2D_SaveImage, Target) == 0x000000, "Member 'VictoryBPFunctionLibrary_Capture2D_SaveImage::Target' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Capture2D_SaveImage, ImagePath) == 0x000008, "Member 'VictoryBPFunctionLibrary_Capture2D_SaveImage::ImagePath' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Capture2D_SaveImage, ClearColour) == 0x000018, "Member 'VictoryBPFunctionLibrary_Capture2D_SaveImage::ClearColour' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Capture2D_SaveImage, ReturnValue) == 0x000028, "Member 'VictoryBPFunctionLibrary_Capture2D_SaveImage::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.CaptureComponent2D_Project
// 0x0020 (0x0020 - 0x0000)
struct VictoryBPFunctionLibrary_CaptureComponent2D_Project final
{
public:
	class USceneCaptureComponent2D*               Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutPixelLocation;                                  // 0x0014(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D78[0x3];                                      // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_CaptureComponent2D_Project) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_CaptureComponent2D_Project");
static_assert(sizeof(VictoryBPFunctionLibrary_CaptureComponent2D_Project) == 0x000020, "Wrong size on VictoryBPFunctionLibrary_CaptureComponent2D_Project");
static_assert(offsetof(VictoryBPFunctionLibrary_CaptureComponent2D_Project, Target) == 0x000000, "Member 'VictoryBPFunctionLibrary_CaptureComponent2D_Project::Target' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_CaptureComponent2D_Project, Location) == 0x000008, "Member 'VictoryBPFunctionLibrary_CaptureComponent2D_Project::Location' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_CaptureComponent2D_Project, OutPixelLocation) == 0x000014, "Member 'VictoryBPFunctionLibrary_CaptureComponent2D_Project::OutPixelLocation' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_CaptureComponent2D_Project, ReturnValue) == 0x00001C, "Member 'VictoryBPFunctionLibrary_CaptureComponent2D_Project::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.CaptureComponent2D_SaveImage
// 0x0030 (0x0030 - 0x0000)
struct VictoryBPFunctionLibrary_CaptureComponent2D_SaveImage final
{
public:
	class USceneCaptureComponent2D*               Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ImagePath;                                         // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ClearColour;                                       // 0x0018(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D79[0x7];                                      // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_CaptureComponent2D_SaveImage) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_CaptureComponent2D_SaveImage");
static_assert(sizeof(VictoryBPFunctionLibrary_CaptureComponent2D_SaveImage) == 0x000030, "Wrong size on VictoryBPFunctionLibrary_CaptureComponent2D_SaveImage");
static_assert(offsetof(VictoryBPFunctionLibrary_CaptureComponent2D_SaveImage, Target) == 0x000000, "Member 'VictoryBPFunctionLibrary_CaptureComponent2D_SaveImage::Target' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_CaptureComponent2D_SaveImage, ImagePath) == 0x000008, "Member 'VictoryBPFunctionLibrary_CaptureComponent2D_SaveImage::ImagePath' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_CaptureComponent2D_SaveImage, ClearColour) == 0x000018, "Member 'VictoryBPFunctionLibrary_CaptureComponent2D_SaveImage::ClearColour' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_CaptureComponent2D_SaveImage, ReturnValue) == 0x000028, "Member 'VictoryBPFunctionLibrary_CaptureComponent2D_SaveImage::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Character__GetControllerRotation
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_Character__GetControllerRotation final
{
public:
	class AActor*                                 TheCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D7A[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Character__GetControllerRotation) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Character__GetControllerRotation");
static_assert(sizeof(VictoryBPFunctionLibrary_Character__GetControllerRotation) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_Character__GetControllerRotation");
static_assert(offsetof(VictoryBPFunctionLibrary_Character__GetControllerRotation, TheCharacter) == 0x000000, "Member 'VictoryBPFunctionLibrary_Character__GetControllerRotation::TheCharacter' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Character__GetControllerRotation, ReturnValue) == 0x000008, "Member 'VictoryBPFunctionLibrary_Character__GetControllerRotation::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.CharacterMovement__SetMaxMoveSpeed
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_CharacterMovement__SetMaxMoveSpeed final
{
public:
	class ACharacter*                             TheCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewMaxMoveSpeed;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D7B[0x3];                                      // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_CharacterMovement__SetMaxMoveSpeed) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_CharacterMovement__SetMaxMoveSpeed");
static_assert(sizeof(VictoryBPFunctionLibrary_CharacterMovement__SetMaxMoveSpeed) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_CharacterMovement__SetMaxMoveSpeed");
static_assert(offsetof(VictoryBPFunctionLibrary_CharacterMovement__SetMaxMoveSpeed, TheCharacter) == 0x000000, "Member 'VictoryBPFunctionLibrary_CharacterMovement__SetMaxMoveSpeed::TheCharacter' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_CharacterMovement__SetMaxMoveSpeed, NewMaxMoveSpeed) == 0x000008, "Member 'VictoryBPFunctionLibrary_CharacterMovement__SetMaxMoveSpeed::NewMaxMoveSpeed' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_CharacterMovement__SetMaxMoveSpeed, ReturnValue) == 0x00000C, "Member 'VictoryBPFunctionLibrary_CharacterMovement__SetMaxMoveSpeed::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.ClientWindow__GameWindowIsForeGroundInOS
// 0x0001 (0x0001 - 0x0000)
struct VictoryBPFunctionLibrary_ClientWindow__GameWindowIsForeGroundInOS final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_ClientWindow__GameWindowIsForeGroundInOS) == 0x000001, "Wrong alignment on VictoryBPFunctionLibrary_ClientWindow__GameWindowIsForeGroundInOS");
static_assert(sizeof(VictoryBPFunctionLibrary_ClientWindow__GameWindowIsForeGroundInOS) == 0x000001, "Wrong size on VictoryBPFunctionLibrary_ClientWindow__GameWindowIsForeGroundInOS");
static_assert(offsetof(VictoryBPFunctionLibrary_ClientWindow__GameWindowIsForeGroundInOS, ReturnValue) == 0x000000, "Member 'VictoryBPFunctionLibrary_ClientWindow__GameWindowIsForeGroundInOS::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Clone__StaticMeshActor
// 0x0038 (0x0038 - 0x0000)
struct VictoryBPFunctionLibrary_Clone__StaticMeshActor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D7C[0x7];                                      // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AStaticMeshActor*                       ToClone;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationOffset;                                    // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationOffset;                                    // 0x0024(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AStaticMeshActor*                       ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_Clone__StaticMeshActor) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Clone__StaticMeshActor");
static_assert(sizeof(VictoryBPFunctionLibrary_Clone__StaticMeshActor) == 0x000038, "Wrong size on VictoryBPFunctionLibrary_Clone__StaticMeshActor");
static_assert(offsetof(VictoryBPFunctionLibrary_Clone__StaticMeshActor, WorldContextObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_Clone__StaticMeshActor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Clone__StaticMeshActor, IsValid) == 0x000008, "Member 'VictoryBPFunctionLibrary_Clone__StaticMeshActor::IsValid' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Clone__StaticMeshActor, ToClone) == 0x000010, "Member 'VictoryBPFunctionLibrary_Clone__StaticMeshActor::ToClone' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Clone__StaticMeshActor, LocationOffset) == 0x000018, "Member 'VictoryBPFunctionLibrary_Clone__StaticMeshActor::LocationOffset' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Clone__StaticMeshActor, RotationOffset) == 0x000024, "Member 'VictoryBPFunctionLibrary_Clone__StaticMeshActor::RotationOffset' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Clone__StaticMeshActor, ReturnValue) == 0x000030, "Member 'VictoryBPFunctionLibrary_Clone__StaticMeshActor::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.CompareMD5Hash
// 0x0028 (0x0028 - 0x0000)
struct VictoryBPFunctionLibrary_CompareMD5Hash final
{
public:
	class FString                                 MD5HashFile1;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MD5HashFile2;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D7D[0x7];                                      // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_CompareMD5Hash) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_CompareMD5Hash");
static_assert(sizeof(VictoryBPFunctionLibrary_CompareMD5Hash) == 0x000028, "Wrong size on VictoryBPFunctionLibrary_CompareMD5Hash");
static_assert(offsetof(VictoryBPFunctionLibrary_CompareMD5Hash, MD5HashFile1) == 0x000000, "Member 'VictoryBPFunctionLibrary_CompareMD5Hash::MD5HashFile1' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_CompareMD5Hash, MD5HashFile2) == 0x000010, "Member 'VictoryBPFunctionLibrary_CompareMD5Hash::MD5HashFile2' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_CompareMD5Hash, ReturnValue) == 0x000020, "Member 'VictoryBPFunctionLibrary_CompareMD5Hash::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Component_PrestreamTextures
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_Component_PrestreamTextures final
{
public:
	class UMeshComponent*                         Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Seconds;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableStreaming;                                  // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D7E[0x3];                                      // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CinematicTextureGroups;                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D7F[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Component_PrestreamTextures) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Component_PrestreamTextures");
static_assert(sizeof(VictoryBPFunctionLibrary_Component_PrestreamTextures) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_Component_PrestreamTextures");
static_assert(offsetof(VictoryBPFunctionLibrary_Component_PrestreamTextures, Target) == 0x000000, "Member 'VictoryBPFunctionLibrary_Component_PrestreamTextures::Target' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Component_PrestreamTextures, Seconds) == 0x000008, "Member 'VictoryBPFunctionLibrary_Component_PrestreamTextures::Seconds' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Component_PrestreamTextures, bEnableStreaming) == 0x00000C, "Member 'VictoryBPFunctionLibrary_Component_PrestreamTextures::bEnableStreaming' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Component_PrestreamTextures, CinematicTextureGroups) == 0x000010, "Member 'VictoryBPFunctionLibrary_Component_PrestreamTextures::CinematicTextureGroups' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Conversion__FloatToRoundedInteger
// 0x0008 (0x0008 - 0x0000)
struct VictoryBPFunctionLibrary_Conversion__FloatToRoundedInteger final
{
public:
	float                                         IN_Float;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_Conversion__FloatToRoundedInteger) == 0x000004, "Wrong alignment on VictoryBPFunctionLibrary_Conversion__FloatToRoundedInteger");
static_assert(sizeof(VictoryBPFunctionLibrary_Conversion__FloatToRoundedInteger) == 0x000008, "Wrong size on VictoryBPFunctionLibrary_Conversion__FloatToRoundedInteger");
static_assert(offsetof(VictoryBPFunctionLibrary_Conversion__FloatToRoundedInteger, IN_Float) == 0x000000, "Member 'VictoryBPFunctionLibrary_Conversion__FloatToRoundedInteger::IN_Float' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Conversion__FloatToRoundedInteger, ReturnValue) == 0x000004, "Member 'VictoryBPFunctionLibrary_Conversion__FloatToRoundedInteger::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Conversions__ColorToString
// 0x0020 (0x0020 - 0x0000)
struct VictoryBPFunctionLibrary_Conversions__ColorToString final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ColorAsString;                                     // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_Conversions__ColorToString) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Conversions__ColorToString");
static_assert(sizeof(VictoryBPFunctionLibrary_Conversions__ColorToString) == 0x000020, "Wrong size on VictoryBPFunctionLibrary_Conversions__ColorToString");
static_assert(offsetof(VictoryBPFunctionLibrary_Conversions__ColorToString, Color) == 0x000000, "Member 'VictoryBPFunctionLibrary_Conversions__ColorToString::Color' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Conversions__ColorToString, ColorAsString) == 0x000010, "Member 'VictoryBPFunctionLibrary_Conversions__ColorToString::ColorAsString' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Conversions__RotatorToVector
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_Conversions__RotatorToVector final
{
public:
	struct FRotator                               TheRotator;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_Conversions__RotatorToVector) == 0x000004, "Wrong alignment on VictoryBPFunctionLibrary_Conversions__RotatorToVector");
static_assert(sizeof(VictoryBPFunctionLibrary_Conversions__RotatorToVector) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_Conversions__RotatorToVector");
static_assert(offsetof(VictoryBPFunctionLibrary_Conversions__RotatorToVector, TheRotator) == 0x000000, "Member 'VictoryBPFunctionLibrary_Conversions__RotatorToVector::TheRotator' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Conversions__RotatorToVector, ReturnValue) == 0x00000C, "Member 'VictoryBPFunctionLibrary_Conversions__RotatorToVector::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Conversions__StringToColor
// 0x0028 (0x0028 - 0x0000)
struct VictoryBPFunctionLibrary_Conversions__StringToColor final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ConvertedColor;                                    // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D80[0x7];                                      // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Conversions__StringToColor) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Conversions__StringToColor");
static_assert(sizeof(VictoryBPFunctionLibrary_Conversions__StringToColor) == 0x000028, "Wrong size on VictoryBPFunctionLibrary_Conversions__StringToColor");
static_assert(offsetof(VictoryBPFunctionLibrary_Conversions__StringToColor, String) == 0x000000, "Member 'VictoryBPFunctionLibrary_Conversions__StringToColor::String' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Conversions__StringToColor, ConvertedColor) == 0x000010, "Member 'VictoryBPFunctionLibrary_Conversions__StringToColor::ConvertedColor' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Conversions__StringToColor, IsValid) == 0x000020, "Member 'VictoryBPFunctionLibrary_Conversions__StringToColor::IsValid' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Conversions__StringToRotator
// 0x0020 (0x0020 - 0x0000)
struct VictoryBPFunctionLibrary_Conversions__StringToRotator final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ConvertedRotator;                                  // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D81[0x3];                                      // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Conversions__StringToRotator) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Conversions__StringToRotator");
static_assert(sizeof(VictoryBPFunctionLibrary_Conversions__StringToRotator) == 0x000020, "Wrong size on VictoryBPFunctionLibrary_Conversions__StringToRotator");
static_assert(offsetof(VictoryBPFunctionLibrary_Conversions__StringToRotator, String) == 0x000000, "Member 'VictoryBPFunctionLibrary_Conversions__StringToRotator::String' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Conversions__StringToRotator, ConvertedRotator) == 0x000010, "Member 'VictoryBPFunctionLibrary_Conversions__StringToRotator::ConvertedRotator' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Conversions__StringToRotator, IsValid) == 0x00001C, "Member 'VictoryBPFunctionLibrary_Conversions__StringToRotator::IsValid' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Conversions__StringToVector
// 0x0020 (0x0020 - 0x0000)
struct VictoryBPFunctionLibrary_Conversions__StringToVector final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ConvertedVector;                                   // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D82[0x3];                                      // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Conversions__StringToVector) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Conversions__StringToVector");
static_assert(sizeof(VictoryBPFunctionLibrary_Conversions__StringToVector) == 0x000020, "Wrong size on VictoryBPFunctionLibrary_Conversions__StringToVector");
static_assert(offsetof(VictoryBPFunctionLibrary_Conversions__StringToVector, String) == 0x000000, "Member 'VictoryBPFunctionLibrary_Conversions__StringToVector::String' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Conversions__StringToVector, ConvertedVector) == 0x000010, "Member 'VictoryBPFunctionLibrary_Conversions__StringToVector::ConvertedVector' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Conversions__StringToVector, IsValid) == 0x00001C, "Member 'VictoryBPFunctionLibrary_Conversions__StringToVector::IsValid' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Conversions__VectorToRotator
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_Conversions__VectorToRotator final
{
public:
	struct FVector                                TheVector;                                         // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_Conversions__VectorToRotator) == 0x000004, "Wrong alignment on VictoryBPFunctionLibrary_Conversions__VectorToRotator");
static_assert(sizeof(VictoryBPFunctionLibrary_Conversions__VectorToRotator) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_Conversions__VectorToRotator");
static_assert(offsetof(VictoryBPFunctionLibrary_Conversions__VectorToRotator, TheVector) == 0x000000, "Member 'VictoryBPFunctionLibrary_Conversions__VectorToRotator::TheVector' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Conversions__VectorToRotator, ReturnValue) == 0x00000C, "Member 'VictoryBPFunctionLibrary_Conversions__VectorToRotator::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.CountOccurrancesOfSubString
// 0x0028 (0x0028 - 0x0000)
struct VictoryBPFunctionLibrary_CountOccurrancesOfSubString final
{
public:
	class FString                                 Source;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubString;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESearchCase                                   SearchCase;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D83[0x3];                                      // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_CountOccurrancesOfSubString) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_CountOccurrancesOfSubString");
static_assert(sizeof(VictoryBPFunctionLibrary_CountOccurrancesOfSubString) == 0x000028, "Wrong size on VictoryBPFunctionLibrary_CountOccurrancesOfSubString");
static_assert(offsetof(VictoryBPFunctionLibrary_CountOccurrancesOfSubString, Source) == 0x000000, "Member 'VictoryBPFunctionLibrary_CountOccurrancesOfSubString::Source' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_CountOccurrancesOfSubString, SubString) == 0x000010, "Member 'VictoryBPFunctionLibrary_CountOccurrancesOfSubString::SubString' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_CountOccurrancesOfSubString, SearchCase) == 0x000020, "Member 'VictoryBPFunctionLibrary_CountOccurrancesOfSubString::SearchCase' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_CountOccurrancesOfSubString, ReturnValue) == 0x000024, "Member 'VictoryBPFunctionLibrary_CountOccurrancesOfSubString::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.CreateMD5Hash
// 0x0028 (0x0028 - 0x0000)
struct VictoryBPFunctionLibrary_CreateMD5Hash final
{
public:
	class FString                                 FileToHash;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FileToStoreHashTo;                                 // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D84[0x7];                                      // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_CreateMD5Hash) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_CreateMD5Hash");
static_assert(sizeof(VictoryBPFunctionLibrary_CreateMD5Hash) == 0x000028, "Wrong size on VictoryBPFunctionLibrary_CreateMD5Hash");
static_assert(offsetof(VictoryBPFunctionLibrary_CreateMD5Hash, FileToHash) == 0x000000, "Member 'VictoryBPFunctionLibrary_CreateMD5Hash::FileToHash' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_CreateMD5Hash, FileToStoreHashTo) == 0x000010, "Member 'VictoryBPFunctionLibrary_CreateMD5Hash::FileToStoreHashTo' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_CreateMD5Hash, ReturnValue) == 0x000020, "Member 'VictoryBPFunctionLibrary_CreateMD5Hash::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.CreateObject
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_CreateObject final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 TheObjectClass;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_CreateObject) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_CreateObject");
static_assert(sizeof(VictoryBPFunctionLibrary_CreateObject) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_CreateObject");
static_assert(offsetof(VictoryBPFunctionLibrary_CreateObject, WorldContextObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_CreateObject::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_CreateObject, TheObjectClass) == 0x000008, "Member 'VictoryBPFunctionLibrary_CreateObject::TheObjectClass' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_CreateObject, ReturnValue) == 0x000010, "Member 'VictoryBPFunctionLibrary_CreateObject::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.CreatePlane
// 0x0030 (0x0030 - 0x0000)
struct VictoryBPFunctionLibrary_CreatePlane final
{
public:
	struct FVector                                Center;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D85[0x8];                                      // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlane                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_CreatePlane) == 0x000010, "Wrong alignment on VictoryBPFunctionLibrary_CreatePlane");
static_assert(sizeof(VictoryBPFunctionLibrary_CreatePlane) == 0x000030, "Wrong size on VictoryBPFunctionLibrary_CreatePlane");
static_assert(offsetof(VictoryBPFunctionLibrary_CreatePlane, Center) == 0x000000, "Member 'VictoryBPFunctionLibrary_CreatePlane::Center' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_CreatePlane, Normal) == 0x00000C, "Member 'VictoryBPFunctionLibrary_CreatePlane::Normal' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_CreatePlane, ReturnValue) == 0x000020, "Member 'VictoryBPFunctionLibrary_CreatePlane::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.CreatePrimitiveComponent
// 0x0038 (0x0038 - 0x0000)
struct VictoryBPFunctionLibrary_CreatePrimitiveComponent final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UPrimitiveComponent>        CompClass;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Param_Name;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0024(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0030(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_CreatePrimitiveComponent) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_CreatePrimitiveComponent");
static_assert(sizeof(VictoryBPFunctionLibrary_CreatePrimitiveComponent) == 0x000038, "Wrong size on VictoryBPFunctionLibrary_CreatePrimitiveComponent");
static_assert(offsetof(VictoryBPFunctionLibrary_CreatePrimitiveComponent, WorldContextObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_CreatePrimitiveComponent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_CreatePrimitiveComponent, CompClass) == 0x000008, "Member 'VictoryBPFunctionLibrary_CreatePrimitiveComponent::CompClass' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_CreatePrimitiveComponent, Param_Name) == 0x000010, "Member 'VictoryBPFunctionLibrary_CreatePrimitiveComponent::Param_Name' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_CreatePrimitiveComponent, Location) == 0x000018, "Member 'VictoryBPFunctionLibrary_CreatePrimitiveComponent::Location' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_CreatePrimitiveComponent, Rotation) == 0x000024, "Member 'VictoryBPFunctionLibrary_CreatePrimitiveComponent::Rotation' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_CreatePrimitiveComponent, ReturnValue) == 0x000030, "Member 'VictoryBPFunctionLibrary_CreatePrimitiveComponent::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.CreateTextureRenderTarget2D
// 0x0028 (0x0028 - 0x0000)
struct VictoryBPFunctionLibrary_CreateTextureRenderTarget2D final
{
public:
	int32                                         Width;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ClearColor;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Gamma;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D86[0x4];                                      // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_CreateTextureRenderTarget2D) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_CreateTextureRenderTarget2D");
static_assert(sizeof(VictoryBPFunctionLibrary_CreateTextureRenderTarget2D) == 0x000028, "Wrong size on VictoryBPFunctionLibrary_CreateTextureRenderTarget2D");
static_assert(offsetof(VictoryBPFunctionLibrary_CreateTextureRenderTarget2D, Width) == 0x000000, "Member 'VictoryBPFunctionLibrary_CreateTextureRenderTarget2D::Width' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_CreateTextureRenderTarget2D, Height) == 0x000004, "Member 'VictoryBPFunctionLibrary_CreateTextureRenderTarget2D::Height' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_CreateTextureRenderTarget2D, ClearColor) == 0x000008, "Member 'VictoryBPFunctionLibrary_CreateTextureRenderTarget2D::ClearColor' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_CreateTextureRenderTarget2D, Gamma) == 0x000018, "Member 'VictoryBPFunctionLibrary_CreateTextureRenderTarget2D::Gamma' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_CreateTextureRenderTarget2D, ReturnValue) == 0x000020, "Member 'VictoryBPFunctionLibrary_CreateTextureRenderTarget2D::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Data__GetCharacterBoneLocations
// 0x0020 (0x0020 - 0x0000)
struct VictoryBPFunctionLibrary_Data__GetCharacterBoneLocations final
{
public:
	class AActor*                                 TheCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        BoneLocations;                                     // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D87[0x7];                                      // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Data__GetCharacterBoneLocations) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Data__GetCharacterBoneLocations");
static_assert(sizeof(VictoryBPFunctionLibrary_Data__GetCharacterBoneLocations) == 0x000020, "Wrong size on VictoryBPFunctionLibrary_Data__GetCharacterBoneLocations");
static_assert(offsetof(VictoryBPFunctionLibrary_Data__GetCharacterBoneLocations, TheCharacter) == 0x000000, "Member 'VictoryBPFunctionLibrary_Data__GetCharacterBoneLocations::TheCharacter' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Data__GetCharacterBoneLocations, BoneLocations) == 0x000008, "Member 'VictoryBPFunctionLibrary_Data__GetCharacterBoneLocations::BoneLocations' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Data__GetCharacterBoneLocations, ReturnValue) == 0x000018, "Member 'VictoryBPFunctionLibrary_Data__GetCharacterBoneLocations::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.DistanceToSurface__DistaceOfPointToMeshSurface
// 0x0028 (0x0028 - 0x0000)
struct VictoryBPFunctionLibrary_DistanceToSurface__DistaceOfPointToMeshSurface final
{
public:
	class AStaticMeshActor*                       TheSMA;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TestPoint;                                         // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ClosestSurfacePoint;                               // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D88[0x4];                                      // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_DistanceToSurface__DistaceOfPointToMeshSurface) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_DistanceToSurface__DistaceOfPointToMeshSurface");
static_assert(sizeof(VictoryBPFunctionLibrary_DistanceToSurface__DistaceOfPointToMeshSurface) == 0x000028, "Wrong size on VictoryBPFunctionLibrary_DistanceToSurface__DistaceOfPointToMeshSurface");
static_assert(offsetof(VictoryBPFunctionLibrary_DistanceToSurface__DistaceOfPointToMeshSurface, TheSMA) == 0x000000, "Member 'VictoryBPFunctionLibrary_DistanceToSurface__DistaceOfPointToMeshSurface::TheSMA' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_DistanceToSurface__DistaceOfPointToMeshSurface, TestPoint) == 0x000008, "Member 'VictoryBPFunctionLibrary_DistanceToSurface__DistaceOfPointToMeshSurface::TestPoint' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_DistanceToSurface__DistaceOfPointToMeshSurface, ClosestSurfacePoint) == 0x000014, "Member 'VictoryBPFunctionLibrary_DistanceToSurface__DistaceOfPointToMeshSurface::ClosestSurfacePoint' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_DistanceToSurface__DistaceOfPointToMeshSurface, ReturnValue) == 0x000020, "Member 'VictoryBPFunctionLibrary_DistanceToSurface__DistaceOfPointToMeshSurface::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.DoesMaterialHaveParameter
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_DoesMaterialHaveParameter final
{
public:
	class UMaterialInterface*                     Mat;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Parameter;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D89[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_DoesMaterialHaveParameter) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_DoesMaterialHaveParameter");
static_assert(sizeof(VictoryBPFunctionLibrary_DoesMaterialHaveParameter) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_DoesMaterialHaveParameter");
static_assert(offsetof(VictoryBPFunctionLibrary_DoesMaterialHaveParameter, Mat) == 0x000000, "Member 'VictoryBPFunctionLibrary_DoesMaterialHaveParameter::Mat' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_DoesMaterialHaveParameter, Parameter) == 0x000008, "Member 'VictoryBPFunctionLibrary_DoesMaterialHaveParameter::Parameter' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_DoesMaterialHaveParameter, ReturnValue) == 0x000010, "Member 'VictoryBPFunctionLibrary_DoesMaterialHaveParameter::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Draw__Thick3DLineBetweenActors
// 0x0028 (0x0028 - 0x0000)
struct VictoryBPFunctionLibrary_Draw__Thick3DLineBetweenActors final
{
public:
	class AActor*                                 StartActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 EndActor;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LineColor;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_Draw__Thick3DLineBetweenActors) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Draw__Thick3DLineBetweenActors");
static_assert(sizeof(VictoryBPFunctionLibrary_Draw__Thick3DLineBetweenActors) == 0x000028, "Wrong size on VictoryBPFunctionLibrary_Draw__Thick3DLineBetweenActors");
static_assert(offsetof(VictoryBPFunctionLibrary_Draw__Thick3DLineBetweenActors, StartActor) == 0x000000, "Member 'VictoryBPFunctionLibrary_Draw__Thick3DLineBetweenActors::StartActor' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Draw__Thick3DLineBetweenActors, EndActor) == 0x000008, "Member 'VictoryBPFunctionLibrary_Draw__Thick3DLineBetweenActors::EndActor' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Draw__Thick3DLineBetweenActors, LineColor) == 0x000010, "Member 'VictoryBPFunctionLibrary_Draw__Thick3DLineBetweenActors::LineColor' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Draw__Thick3DLineBetweenActors, Thickness) == 0x000020, "Member 'VictoryBPFunctionLibrary_Draw__Thick3DLineBetweenActors::Thickness' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Draw__Thick3DLineBetweenActors, Duration) == 0x000024, "Member 'VictoryBPFunctionLibrary_Draw__Thick3DLineBetweenActors::Duration' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Draw__Thick3DLineFromCharacterSocket
// 0x0038 (0x0038 - 0x0000)
struct VictoryBPFunctionLibrary_Draw__Thick3DLineFromCharacterSocket final
{
public:
	class AActor*                                 TheCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndPoint;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Socket;                                            // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LineColor;                                         // 0x001C(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8A[0x4];                                      // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Draw__Thick3DLineFromCharacterSocket) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Draw__Thick3DLineFromCharacterSocket");
static_assert(sizeof(VictoryBPFunctionLibrary_Draw__Thick3DLineFromCharacterSocket) == 0x000038, "Wrong size on VictoryBPFunctionLibrary_Draw__Thick3DLineFromCharacterSocket");
static_assert(offsetof(VictoryBPFunctionLibrary_Draw__Thick3DLineFromCharacterSocket, TheCharacter) == 0x000000, "Member 'VictoryBPFunctionLibrary_Draw__Thick3DLineFromCharacterSocket::TheCharacter' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Draw__Thick3DLineFromCharacterSocket, EndPoint) == 0x000008, "Member 'VictoryBPFunctionLibrary_Draw__Thick3DLineFromCharacterSocket::EndPoint' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Draw__Thick3DLineFromCharacterSocket, Socket) == 0x000014, "Member 'VictoryBPFunctionLibrary_Draw__Thick3DLineFromCharacterSocket::Socket' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Draw__Thick3DLineFromCharacterSocket, LineColor) == 0x00001C, "Member 'VictoryBPFunctionLibrary_Draw__Thick3DLineFromCharacterSocket::LineColor' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Draw__Thick3DLineFromCharacterSocket, Thickness) == 0x00002C, "Member 'VictoryBPFunctionLibrary_Draw__Thick3DLineFromCharacterSocket::Thickness' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Draw__Thick3DLineFromCharacterSocket, Duration) == 0x000030, "Member 'VictoryBPFunctionLibrary_Draw__Thick3DLineFromCharacterSocket::Duration' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Draw__Thick3DLineFromSocket
// 0x0038 (0x0038 - 0x0000)
struct VictoryBPFunctionLibrary_Draw__Thick3DLineFromSocket final
{
public:
	class USkeletalMeshComponent*                 Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndPoint;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Socket;                                            // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LineColor;                                         // 0x001C(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8B[0x4];                                      // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Draw__Thick3DLineFromSocket) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Draw__Thick3DLineFromSocket");
static_assert(sizeof(VictoryBPFunctionLibrary_Draw__Thick3DLineFromSocket) == 0x000038, "Wrong size on VictoryBPFunctionLibrary_Draw__Thick3DLineFromSocket");
static_assert(offsetof(VictoryBPFunctionLibrary_Draw__Thick3DLineFromSocket, Mesh) == 0x000000, "Member 'VictoryBPFunctionLibrary_Draw__Thick3DLineFromSocket::Mesh' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Draw__Thick3DLineFromSocket, EndPoint) == 0x000008, "Member 'VictoryBPFunctionLibrary_Draw__Thick3DLineFromSocket::EndPoint' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Draw__Thick3DLineFromSocket, Socket) == 0x000014, "Member 'VictoryBPFunctionLibrary_Draw__Thick3DLineFromSocket::Socket' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Draw__Thick3DLineFromSocket, LineColor) == 0x00001C, "Member 'VictoryBPFunctionLibrary_Draw__Thick3DLineFromSocket::LineColor' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Draw__Thick3DLineFromSocket, Thickness) == 0x00002C, "Member 'VictoryBPFunctionLibrary_Draw__Thick3DLineFromSocket::Thickness' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Draw__Thick3DLineFromSocket, Duration) == 0x000030, "Member 'VictoryBPFunctionLibrary_Draw__Thick3DLineFromSocket::Duration' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.DrawCircle
// 0x0050 (0x0050 - 0x0000)
struct VictoryBPFunctionLibrary_DrawCircle final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Center;                                            // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumPoints;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LineColor;                                         // 0x0020(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                YAxis;                                             // 0x0030(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ZAxis;                                             // 0x003C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PersistentLines;                                   // 0x004C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8C[0x3];                                      // 0x004D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_DrawCircle) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_DrawCircle");
static_assert(sizeof(VictoryBPFunctionLibrary_DrawCircle) == 0x000050, "Wrong size on VictoryBPFunctionLibrary_DrawCircle");
static_assert(offsetof(VictoryBPFunctionLibrary_DrawCircle, WorldContextObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_DrawCircle::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_DrawCircle, Center) == 0x000008, "Member 'VictoryBPFunctionLibrary_DrawCircle::Center' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_DrawCircle, Radius) == 0x000014, "Member 'VictoryBPFunctionLibrary_DrawCircle::Radius' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_DrawCircle, NumPoints) == 0x000018, "Member 'VictoryBPFunctionLibrary_DrawCircle::NumPoints' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_DrawCircle, Thickness) == 0x00001C, "Member 'VictoryBPFunctionLibrary_DrawCircle::Thickness' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_DrawCircle, LineColor) == 0x000020, "Member 'VictoryBPFunctionLibrary_DrawCircle::LineColor' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_DrawCircle, YAxis) == 0x000030, "Member 'VictoryBPFunctionLibrary_DrawCircle::YAxis' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_DrawCircle, ZAxis) == 0x00003C, "Member 'VictoryBPFunctionLibrary_DrawCircle::ZAxis' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_DrawCircle, Duration) == 0x000048, "Member 'VictoryBPFunctionLibrary_DrawCircle::Duration' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_DrawCircle, PersistentLines) == 0x00004C, "Member 'VictoryBPFunctionLibrary_DrawCircle::PersistentLines' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.EqualEqual_Vector2DVector2D
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_EqualEqual_Vector2DVector2D final
{
public:
	struct FVector2D                              A;                                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              B;                                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ErrorTolerance;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8D[0x3];                                      // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_EqualEqual_Vector2DVector2D) == 0x000004, "Wrong alignment on VictoryBPFunctionLibrary_EqualEqual_Vector2DVector2D");
static_assert(sizeof(VictoryBPFunctionLibrary_EqualEqual_Vector2DVector2D) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_EqualEqual_Vector2DVector2D");
static_assert(offsetof(VictoryBPFunctionLibrary_EqualEqual_Vector2DVector2D, A) == 0x000000, "Member 'VictoryBPFunctionLibrary_EqualEqual_Vector2DVector2D::A' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_EqualEqual_Vector2DVector2D, B) == 0x000008, "Member 'VictoryBPFunctionLibrary_EqualEqual_Vector2DVector2D::B' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_EqualEqual_Vector2DVector2D, ErrorTolerance) == 0x000010, "Member 'VictoryBPFunctionLibrary_EqualEqual_Vector2DVector2D::ErrorTolerance' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_EqualEqual_Vector2DVector2D, ReturnValue) == 0x000014, "Member 'VictoryBPFunctionLibrary_EqualEqual_Vector2DVector2D::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.FileIO__SaveStringArrayToFile
// 0x0038 (0x0038 - 0x0000)
struct VictoryBPFunctionLibrary_FileIO__SaveStringArrayToFile final
{
public:
	class FString                                 SaveDirectory;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 JoyfulFileName;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         SaveText;                                          // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          AllowOverWriting;                                  // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowAppend;                                       // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0032(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8E[0x5];                                      // 0x0033(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_FileIO__SaveStringArrayToFile) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_FileIO__SaveStringArrayToFile");
static_assert(sizeof(VictoryBPFunctionLibrary_FileIO__SaveStringArrayToFile) == 0x000038, "Wrong size on VictoryBPFunctionLibrary_FileIO__SaveStringArrayToFile");
static_assert(offsetof(VictoryBPFunctionLibrary_FileIO__SaveStringArrayToFile, SaveDirectory) == 0x000000, "Member 'VictoryBPFunctionLibrary_FileIO__SaveStringArrayToFile::SaveDirectory' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_FileIO__SaveStringArrayToFile, JoyfulFileName) == 0x000010, "Member 'VictoryBPFunctionLibrary_FileIO__SaveStringArrayToFile::JoyfulFileName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_FileIO__SaveStringArrayToFile, SaveText) == 0x000020, "Member 'VictoryBPFunctionLibrary_FileIO__SaveStringArrayToFile::SaveText' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_FileIO__SaveStringArrayToFile, AllowOverWriting) == 0x000030, "Member 'VictoryBPFunctionLibrary_FileIO__SaveStringArrayToFile::AllowOverWriting' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_FileIO__SaveStringArrayToFile, AllowAppend) == 0x000031, "Member 'VictoryBPFunctionLibrary_FileIO__SaveStringArrayToFile::AllowAppend' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_FileIO__SaveStringArrayToFile, ReturnValue) == 0x000032, "Member 'VictoryBPFunctionLibrary_FileIO__SaveStringArrayToFile::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.FileIO__SaveStringTextToFile
// 0x0038 (0x0038 - 0x0000)
struct VictoryBPFunctionLibrary_FileIO__SaveStringTextToFile final
{
public:
	class FString                                 SaveDirectory;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 JoyfulFileName;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SaveText;                                          // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowOverWriting;                                  // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowAppend;                                       // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0032(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8F[0x5];                                      // 0x0033(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_FileIO__SaveStringTextToFile) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_FileIO__SaveStringTextToFile");
static_assert(sizeof(VictoryBPFunctionLibrary_FileIO__SaveStringTextToFile) == 0x000038, "Wrong size on VictoryBPFunctionLibrary_FileIO__SaveStringTextToFile");
static_assert(offsetof(VictoryBPFunctionLibrary_FileIO__SaveStringTextToFile, SaveDirectory) == 0x000000, "Member 'VictoryBPFunctionLibrary_FileIO__SaveStringTextToFile::SaveDirectory' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_FileIO__SaveStringTextToFile, JoyfulFileName) == 0x000010, "Member 'VictoryBPFunctionLibrary_FileIO__SaveStringTextToFile::JoyfulFileName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_FileIO__SaveStringTextToFile, SaveText) == 0x000020, "Member 'VictoryBPFunctionLibrary_FileIO__SaveStringTextToFile::SaveText' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_FileIO__SaveStringTextToFile, AllowOverWriting) == 0x000030, "Member 'VictoryBPFunctionLibrary_FileIO__SaveStringTextToFile::AllowOverWriting' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_FileIO__SaveStringTextToFile, AllowAppend) == 0x000031, "Member 'VictoryBPFunctionLibrary_FileIO__SaveStringTextToFile::AllowAppend' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_FileIO__SaveStringTextToFile, ReturnValue) == 0x000032, "Member 'VictoryBPFunctionLibrary_FileIO__SaveStringTextToFile::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.FlashGameOnTaskBar
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_FlashGameOnTaskBar final
{
public:
	class APlayerController*                      PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FlashContinuous;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D90[0x3];                                      // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxFlashCount;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FlashFrequencyMilliseconds;                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D91[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_FlashGameOnTaskBar) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_FlashGameOnTaskBar");
static_assert(sizeof(VictoryBPFunctionLibrary_FlashGameOnTaskBar) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_FlashGameOnTaskBar");
static_assert(offsetof(VictoryBPFunctionLibrary_FlashGameOnTaskBar, PC) == 0x000000, "Member 'VictoryBPFunctionLibrary_FlashGameOnTaskBar::PC' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_FlashGameOnTaskBar, FlashContinuous) == 0x000008, "Member 'VictoryBPFunctionLibrary_FlashGameOnTaskBar::FlashContinuous' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_FlashGameOnTaskBar, MaxFlashCount) == 0x00000C, "Member 'VictoryBPFunctionLibrary_FlashGameOnTaskBar::MaxFlashCount' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_FlashGameOnTaskBar, FlashFrequencyMilliseconds) == 0x000010, "Member 'VictoryBPFunctionLibrary_FlashGameOnTaskBar::FlashFrequencyMilliseconds' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.FlushPressedKeys
// 0x0008 (0x0008 - 0x0000)
struct VictoryBPFunctionLibrary_FlushPressedKeys final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_FlushPressedKeys) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_FlushPressedKeys");
static_assert(sizeof(VictoryBPFunctionLibrary_FlushPressedKeys) == 0x000008, "Wrong size on VictoryBPFunctionLibrary_FlushPressedKeys");
static_assert(offsetof(VictoryBPFunctionLibrary_FlushPressedKeys, PlayerController) == 0x000000, "Member 'VictoryBPFunctionLibrary_FlushPressedKeys::PlayerController' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetActorRelativeLocation
// 0x0020 (0x0020 - 0x0000)
struct VictoryBPFunctionLibrary_GetActorRelativeLocation final
{
public:
	class AActor*                                 ParentActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ChildActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D92[0x4];                                      // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_GetActorRelativeLocation) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_GetActorRelativeLocation");
static_assert(sizeof(VictoryBPFunctionLibrary_GetActorRelativeLocation) == 0x000020, "Wrong size on VictoryBPFunctionLibrary_GetActorRelativeLocation");
static_assert(offsetof(VictoryBPFunctionLibrary_GetActorRelativeLocation, ParentActor) == 0x000000, "Member 'VictoryBPFunctionLibrary_GetActorRelativeLocation::ParentActor' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetActorRelativeLocation, ChildActor) == 0x000008, "Member 'VictoryBPFunctionLibrary_GetActorRelativeLocation::ChildActor' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetActorRelativeLocation, ReturnValue) == 0x000010, "Member 'VictoryBPFunctionLibrary_GetActorRelativeLocation::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetActorRelativeRotation
// 0x0020 (0x0020 - 0x0000)
struct VictoryBPFunctionLibrary_GetActorRelativeRotation final
{
public:
	class AActor*                                 ParentActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ChildActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D93[0x4];                                      // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_GetActorRelativeRotation) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_GetActorRelativeRotation");
static_assert(sizeof(VictoryBPFunctionLibrary_GetActorRelativeRotation) == 0x000020, "Wrong size on VictoryBPFunctionLibrary_GetActorRelativeRotation");
static_assert(offsetof(VictoryBPFunctionLibrary_GetActorRelativeRotation, ParentActor) == 0x000000, "Member 'VictoryBPFunctionLibrary_GetActorRelativeRotation::ParentActor' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetActorRelativeRotation, ChildActor) == 0x000008, "Member 'VictoryBPFunctionLibrary_GetActorRelativeRotation::ChildActor' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetActorRelativeRotation, ReturnValue) == 0x000010, "Member 'VictoryBPFunctionLibrary_GetActorRelativeRotation::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetAllBoneNamesBelowBone
// 0x0028 (0x0028 - 0x0000)
struct VictoryBPFunctionLibrary_GetAllBoneNamesBelowBone final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComp;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartingBoneName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           BoneNames;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D94[0x4];                                      // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_GetAllBoneNamesBelowBone) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_GetAllBoneNamesBelowBone");
static_assert(sizeof(VictoryBPFunctionLibrary_GetAllBoneNamesBelowBone) == 0x000028, "Wrong size on VictoryBPFunctionLibrary_GetAllBoneNamesBelowBone");
static_assert(offsetof(VictoryBPFunctionLibrary_GetAllBoneNamesBelowBone, SkeletalMeshComp) == 0x000000, "Member 'VictoryBPFunctionLibrary_GetAllBoneNamesBelowBone::SkeletalMeshComp' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetAllBoneNamesBelowBone, StartingBoneName) == 0x000008, "Member 'VictoryBPFunctionLibrary_GetAllBoneNamesBelowBone::StartingBoneName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetAllBoneNamesBelowBone, BoneNames) == 0x000010, "Member 'VictoryBPFunctionLibrary_GetAllBoneNamesBelowBone::BoneNames' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetAllBoneNamesBelowBone, ReturnValue) == 0x000020, "Member 'VictoryBPFunctionLibrary_GetAllBoneNamesBelowBone::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetAllWidgetsOfClass
// 0x0028 (0x0028 - 0x0000)
struct VictoryBPFunctionLibrary_GetAllWidgetsOfClass final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                WidgetClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UUserWidget*>                    FoundWidgets;                                      // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          TopLevelOnly;                                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D95[0x7];                                      // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_GetAllWidgetsOfClass) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_GetAllWidgetsOfClass");
static_assert(sizeof(VictoryBPFunctionLibrary_GetAllWidgetsOfClass) == 0x000028, "Wrong size on VictoryBPFunctionLibrary_GetAllWidgetsOfClass");
static_assert(offsetof(VictoryBPFunctionLibrary_GetAllWidgetsOfClass, WorldContextObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_GetAllWidgetsOfClass::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetAllWidgetsOfClass, WidgetClass) == 0x000008, "Member 'VictoryBPFunctionLibrary_GetAllWidgetsOfClass::WidgetClass' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetAllWidgetsOfClass, FoundWidgets) == 0x000010, "Member 'VictoryBPFunctionLibrary_GetAllWidgetsOfClass::FoundWidgets' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetAllWidgetsOfClass, TopLevelOnly) == 0x000020, "Member 'VictoryBPFunctionLibrary_GetAllWidgetsOfClass::TopLevelOnly' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetBoxContainingWorldPoints
// 0x0028 (0x0028 - 0x0000)
struct VictoryBPFunctionLibrary_GetBoxContainingWorldPoints final
{
public:
	TArray<struct FVector>                        Points;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                Center;                                            // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Extent;                                            // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_GetBoxContainingWorldPoints) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_GetBoxContainingWorldPoints");
static_assert(sizeof(VictoryBPFunctionLibrary_GetBoxContainingWorldPoints) == 0x000028, "Wrong size on VictoryBPFunctionLibrary_GetBoxContainingWorldPoints");
static_assert(offsetof(VictoryBPFunctionLibrary_GetBoxContainingWorldPoints, Points) == 0x000000, "Member 'VictoryBPFunctionLibrary_GetBoxContainingWorldPoints::Points' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetBoxContainingWorldPoints, Center) == 0x000010, "Member 'VictoryBPFunctionLibrary_GetBoxContainingWorldPoints::Center' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetBoxContainingWorldPoints, Extent) == 0x00001C, "Member 'VictoryBPFunctionLibrary_GetBoxContainingWorldPoints::Extent' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetClosestActorOfClassInRadiusOfActor
// 0x0028 (0x0028 - 0x0000)
struct VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfActor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ActorCenter;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D96[0x3];                                      // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfActor) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfActor");
static_assert(sizeof(VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfActor) == 0x000028, "Wrong size on VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfActor");
static_assert(offsetof(VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfActor, WorldContextObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfActor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfActor, ActorClass) == 0x000008, "Member 'VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfActor::ActorClass' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfActor, ActorCenter) == 0x000010, "Member 'VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfActor::ActorCenter' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfActor, Radius) == 0x000018, "Member 'VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfActor::Radius' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfActor, IsValid) == 0x00001C, "Member 'VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfActor::IsValid' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfActor, ReturnValue) == 0x000020, "Member 'VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfActor::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetClosestActorOfClassInRadiusOfLocation
// 0x0030 (0x0030 - 0x0000)
struct VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfLocation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Center;                                            // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D97[0x7];                                      // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfLocation) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfLocation");
static_assert(sizeof(VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfLocation) == 0x000030, "Wrong size on VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfLocation");
static_assert(offsetof(VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfLocation, WorldContextObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfLocation, ActorClass) == 0x000008, "Member 'VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfLocation::ActorClass' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfLocation, Center) == 0x000010, "Member 'VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfLocation::Center' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfLocation, Radius) == 0x00001C, "Member 'VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfLocation::Radius' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfLocation, IsValid) == 0x000020, "Member 'VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfLocation::IsValid' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfLocation, ReturnValue) == 0x000028, "Member 'VictoryBPFunctionLibrary_GetClosestActorOfClassInRadiusOfLocation::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetCommandLine
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_GetCommandLine final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_GetCommandLine) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_GetCommandLine");
static_assert(sizeof(VictoryBPFunctionLibrary_GetCommandLine) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_GetCommandLine");
static_assert(offsetof(VictoryBPFunctionLibrary_GetCommandLine, ReturnValue) == 0x000000, "Member 'VictoryBPFunctionLibrary_GetCommandLine::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetComponentRelativeLocation
// 0x0020 (0x0020 - 0x0000)
struct VictoryBPFunctionLibrary_GetComponentRelativeLocation final
{
public:
	class USceneComponent*                        ParentComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        ChildComponent;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D98[0x4];                                      // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_GetComponentRelativeLocation) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_GetComponentRelativeLocation");
static_assert(sizeof(VictoryBPFunctionLibrary_GetComponentRelativeLocation) == 0x000020, "Wrong size on VictoryBPFunctionLibrary_GetComponentRelativeLocation");
static_assert(offsetof(VictoryBPFunctionLibrary_GetComponentRelativeLocation, ParentComponent) == 0x000000, "Member 'VictoryBPFunctionLibrary_GetComponentRelativeLocation::ParentComponent' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetComponentRelativeLocation, ChildComponent) == 0x000008, "Member 'VictoryBPFunctionLibrary_GetComponentRelativeLocation::ChildComponent' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetComponentRelativeLocation, ReturnValue) == 0x000010, "Member 'VictoryBPFunctionLibrary_GetComponentRelativeLocation::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetComponentRelativeRotation
// 0x0020 (0x0020 - 0x0000)
struct VictoryBPFunctionLibrary_GetComponentRelativeRotation final
{
public:
	class USceneComponent*                        ParentComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        ChildComponent;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D99[0x4];                                      // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_GetComponentRelativeRotation) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_GetComponentRelativeRotation");
static_assert(sizeof(VictoryBPFunctionLibrary_GetComponentRelativeRotation) == 0x000020, "Wrong size on VictoryBPFunctionLibrary_GetComponentRelativeRotation");
static_assert(offsetof(VictoryBPFunctionLibrary_GetComponentRelativeRotation, ParentComponent) == 0x000000, "Member 'VictoryBPFunctionLibrary_GetComponentRelativeRotation::ParentComponent' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetComponentRelativeRotation, ChildComponent) == 0x000008, "Member 'VictoryBPFunctionLibrary_GetComponentRelativeRotation::ChildComponent' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetComponentRelativeRotation, ReturnValue) == 0x000010, "Member 'VictoryBPFunctionLibrary_GetComponentRelativeRotation::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetCreationTime
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_GetCreationTime final
{
public:
	const class AActor*                           Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9A[0x4];                                      // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_GetCreationTime) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_GetCreationTime");
static_assert(sizeof(VictoryBPFunctionLibrary_GetCreationTime) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_GetCreationTime");
static_assert(offsetof(VictoryBPFunctionLibrary_GetCreationTime, Target) == 0x000000, "Member 'VictoryBPFunctionLibrary_GetCreationTime::Target' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetCreationTime, ReturnValue) == 0x000008, "Member 'VictoryBPFunctionLibrary_GetCreationTime::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetDistanceBetweenComponentSurfaces
// 0x0030 (0x0030 - 0x0000)
struct VictoryBPFunctionLibrary_GetDistanceBetweenComponentSurfaces final
{
public:
	class UPrimitiveComponent*                    CollisionComponent1;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    CollisionComponent2;                               // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PointOnSurface1;                                   // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PointOnSurface2;                                   // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9B[0x4];                                      // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_GetDistanceBetweenComponentSurfaces) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_GetDistanceBetweenComponentSurfaces");
static_assert(sizeof(VictoryBPFunctionLibrary_GetDistanceBetweenComponentSurfaces) == 0x000030, "Wrong size on VictoryBPFunctionLibrary_GetDistanceBetweenComponentSurfaces");
static_assert(offsetof(VictoryBPFunctionLibrary_GetDistanceBetweenComponentSurfaces, CollisionComponent1) == 0x000000, "Member 'VictoryBPFunctionLibrary_GetDistanceBetweenComponentSurfaces::CollisionComponent1' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetDistanceBetweenComponentSurfaces, CollisionComponent2) == 0x000008, "Member 'VictoryBPFunctionLibrary_GetDistanceBetweenComponentSurfaces::CollisionComponent2' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetDistanceBetweenComponentSurfaces, PointOnSurface1) == 0x000010, "Member 'VictoryBPFunctionLibrary_GetDistanceBetweenComponentSurfaces::PointOnSurface1' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetDistanceBetweenComponentSurfaces, PointOnSurface2) == 0x00001C, "Member 'VictoryBPFunctionLibrary_GetDistanceBetweenComponentSurfaces::PointOnSurface2' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetDistanceBetweenComponentSurfaces, ReturnValue) == 0x000028, "Member 'VictoryBPFunctionLibrary_GetDistanceBetweenComponentSurfaces::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetDistanceToCollision
// 0x0028 (0x0028 - 0x0000)
struct VictoryBPFunctionLibrary_GetDistanceToCollision final
{
public:
	class UPrimitiveComponent*                    CollisionComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ClosestPointOnCollision;                           // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9C[0x4];                                      // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_GetDistanceToCollision) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_GetDistanceToCollision");
static_assert(sizeof(VictoryBPFunctionLibrary_GetDistanceToCollision) == 0x000028, "Wrong size on VictoryBPFunctionLibrary_GetDistanceToCollision");
static_assert(offsetof(VictoryBPFunctionLibrary_GetDistanceToCollision, CollisionComponent) == 0x000000, "Member 'VictoryBPFunctionLibrary_GetDistanceToCollision::CollisionComponent' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetDistanceToCollision, Point) == 0x000008, "Member 'VictoryBPFunctionLibrary_GetDistanceToCollision::Point' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetDistanceToCollision, ClosestPointOnCollision) == 0x000014, "Member 'VictoryBPFunctionLibrary_GetDistanceToCollision::ClosestPointOnCollision' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetDistanceToCollision, ReturnValue) == 0x000020, "Member 'VictoryBPFunctionLibrary_GetDistanceToCollision::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetFirstWidgetOfClass
// 0x0020 (0x0020 - 0x0000)
struct VictoryBPFunctionLibrary_GetFirstWidgetOfClass final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                WidgetClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TopLevelOnly;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9D[0x7];                                      // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_GetFirstWidgetOfClass) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_GetFirstWidgetOfClass");
static_assert(sizeof(VictoryBPFunctionLibrary_GetFirstWidgetOfClass) == 0x000020, "Wrong size on VictoryBPFunctionLibrary_GetFirstWidgetOfClass");
static_assert(offsetof(VictoryBPFunctionLibrary_GetFirstWidgetOfClass, WorldContextObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_GetFirstWidgetOfClass::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetFirstWidgetOfClass, WidgetClass) == 0x000008, "Member 'VictoryBPFunctionLibrary_GetFirstWidgetOfClass::WidgetClass' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetFirstWidgetOfClass, TopLevelOnly) == 0x000010, "Member 'VictoryBPFunctionLibrary_GetFirstWidgetOfClass::TopLevelOnly' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetFirstWidgetOfClass, ReturnValue) == 0x000018, "Member 'VictoryBPFunctionLibrary_GetFirstWidgetOfClass::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetGenericTeamId
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_GetGenericTeamId final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9E[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_GetGenericTeamId) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_GetGenericTeamId");
static_assert(sizeof(VictoryBPFunctionLibrary_GetGenericTeamId) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_GetGenericTeamId");
static_assert(offsetof(VictoryBPFunctionLibrary_GetGenericTeamId, Target) == 0x000000, "Member 'VictoryBPFunctionLibrary_GetGenericTeamId::Target' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetGenericTeamId, ReturnValue) == 0x000008, "Member 'VictoryBPFunctionLibrary_GetGenericTeamId::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetHeadMountedDisplayDeviceType
// 0x0008 (0x0008 - 0x0000)
struct VictoryBPFunctionLibrary_GetHeadMountedDisplayDeviceType final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_GetHeadMountedDisplayDeviceType) == 0x000004, "Wrong alignment on VictoryBPFunctionLibrary_GetHeadMountedDisplayDeviceType");
static_assert(sizeof(VictoryBPFunctionLibrary_GetHeadMountedDisplayDeviceType) == 0x000008, "Wrong size on VictoryBPFunctionLibrary_GetHeadMountedDisplayDeviceType");
static_assert(offsetof(VictoryBPFunctionLibrary_GetHeadMountedDisplayDeviceType, ReturnValue) == 0x000000, "Member 'VictoryBPFunctionLibrary_GetHeadMountedDisplayDeviceType::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetLevelInstanceInfo
// 0x0038 (0x0038 - 0x0000)
struct VictoryBPFunctionLibrary_GetLevelInstanceInfo final
{
public:
	class ULevelStreamingDynamic*                 LevelInstance;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLevelStreamInstanceInfo               ReturnValue;                                       // 0x0008(0x0030)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_GetLevelInstanceInfo) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_GetLevelInstanceInfo");
static_assert(sizeof(VictoryBPFunctionLibrary_GetLevelInstanceInfo) == 0x000038, "Wrong size on VictoryBPFunctionLibrary_GetLevelInstanceInfo");
static_assert(offsetof(VictoryBPFunctionLibrary_GetLevelInstanceInfo, LevelInstance) == 0x000000, "Member 'VictoryBPFunctionLibrary_GetLevelInstanceInfo::LevelInstance' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetLevelInstanceInfo, ReturnValue) == 0x000008, "Member 'VictoryBPFunctionLibrary_GetLevelInstanceInfo::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetNamesOfLoadedLevels
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_GetNamesOfLoadedLevels final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         NamesOfLoadedLevels;                               // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_GetNamesOfLoadedLevels) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_GetNamesOfLoadedLevels");
static_assert(sizeof(VictoryBPFunctionLibrary_GetNamesOfLoadedLevels) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_GetNamesOfLoadedLevels");
static_assert(offsetof(VictoryBPFunctionLibrary_GetNamesOfLoadedLevels, WorldContextObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_GetNamesOfLoadedLevels::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetNamesOfLoadedLevels, NamesOfLoadedLevels) == 0x000008, "Member 'VictoryBPFunctionLibrary_GetNamesOfLoadedLevels::NamesOfLoadedLevels' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetObjectPath
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_GetObjectPath final
{
public:
	class UObject*                                Obj;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_GetObjectPath) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_GetObjectPath");
static_assert(sizeof(VictoryBPFunctionLibrary_GetObjectPath) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_GetObjectPath");
static_assert(offsetof(VictoryBPFunctionLibrary_GetObjectPath, Obj) == 0x000000, "Member 'VictoryBPFunctionLibrary_GetObjectPath::Obj' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetObjectPath, ReturnValue) == 0x000008, "Member 'VictoryBPFunctionLibrary_GetObjectPath::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetPlayerStart
// 0x0020 (0x0020 - 0x0000)
struct VictoryBPFunctionLibrary_GetPlayerStart final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerStartName;                                   // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerStart*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_GetPlayerStart) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_GetPlayerStart");
static_assert(sizeof(VictoryBPFunctionLibrary_GetPlayerStart) == 0x000020, "Wrong size on VictoryBPFunctionLibrary_GetPlayerStart");
static_assert(offsetof(VictoryBPFunctionLibrary_GetPlayerStart, WorldContextObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_GetPlayerStart::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetPlayerStart, PlayerStartName) == 0x000008, "Member 'VictoryBPFunctionLibrary_GetPlayerStart::PlayerStartName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetPlayerStart, ReturnValue) == 0x000018, "Member 'VictoryBPFunctionLibrary_GetPlayerStart::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetPlayerUniqueNetID
// 0x0004 (0x0004 - 0x0000)
struct VictoryBPFunctionLibrary_GetPlayerUniqueNetID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_GetPlayerUniqueNetID) == 0x000004, "Wrong alignment on VictoryBPFunctionLibrary_GetPlayerUniqueNetID");
static_assert(sizeof(VictoryBPFunctionLibrary_GetPlayerUniqueNetID) == 0x000004, "Wrong size on VictoryBPFunctionLibrary_GetPlayerUniqueNetID");
static_assert(offsetof(VictoryBPFunctionLibrary_GetPlayerUniqueNetID, ReturnValue) == 0x000000, "Member 'VictoryBPFunctionLibrary_GetPlayerUniqueNetID::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetRotatorRelativeRotation
// 0x0024 (0x0024 - 0x0000)
struct VictoryBPFunctionLibrary_GetRotatorRelativeRotation final
{
public:
	struct FRotator                               ParentRotation;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               ChildRotation;                                     // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_GetRotatorRelativeRotation) == 0x000004, "Wrong alignment on VictoryBPFunctionLibrary_GetRotatorRelativeRotation");
static_assert(sizeof(VictoryBPFunctionLibrary_GetRotatorRelativeRotation) == 0x000024, "Wrong size on VictoryBPFunctionLibrary_GetRotatorRelativeRotation");
static_assert(offsetof(VictoryBPFunctionLibrary_GetRotatorRelativeRotation, ParentRotation) == 0x000000, "Member 'VictoryBPFunctionLibrary_GetRotatorRelativeRotation::ParentRotation' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetRotatorRelativeRotation, ChildRotation) == 0x00000C, "Member 'VictoryBPFunctionLibrary_GetRotatorRelativeRotation::ChildRotation' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetRotatorRelativeRotation, ReturnValue) == 0x000018, "Member 'VictoryBPFunctionLibrary_GetRotatorRelativeRotation::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetSoundWaveFromFile
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_GetSoundWaveFromFile final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundWave*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_GetSoundWaveFromFile) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_GetSoundWaveFromFile");
static_assert(sizeof(VictoryBPFunctionLibrary_GetSoundWaveFromFile) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_GetSoundWaveFromFile");
static_assert(offsetof(VictoryBPFunctionLibrary_GetSoundWaveFromFile, FilePath) == 0x000000, "Member 'VictoryBPFunctionLibrary_GetSoundWaveFromFile::FilePath' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetSoundWaveFromFile, ReturnValue) == 0x000010, "Member 'VictoryBPFunctionLibrary_GetSoundWaveFromFile::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetStaticMeshVertexLocations
// 0x0020 (0x0020 - 0x0000)
struct VictoryBPFunctionLibrary_GetStaticMeshVertexLocations final
{
public:
	class UStaticMeshComponent*                   Comp;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        VertexPositions;                                   // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9F[0x7];                                      // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_GetStaticMeshVertexLocations) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_GetStaticMeshVertexLocations");
static_assert(sizeof(VictoryBPFunctionLibrary_GetStaticMeshVertexLocations) == 0x000020, "Wrong size on VictoryBPFunctionLibrary_GetStaticMeshVertexLocations");
static_assert(offsetof(VictoryBPFunctionLibrary_GetStaticMeshVertexLocations, Comp) == 0x000000, "Member 'VictoryBPFunctionLibrary_GetStaticMeshVertexLocations::Comp' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetStaticMeshVertexLocations, VertexPositions) == 0x000008, "Member 'VictoryBPFunctionLibrary_GetStaticMeshVertexLocations::VertexPositions' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetStaticMeshVertexLocations, ReturnValue) == 0x000018, "Member 'VictoryBPFunctionLibrary_GetStaticMeshVertexLocations::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetTimeAlive
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_GetTimeAlive final
{
public:
	const class AActor*                           Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DA0[0x4];                                      // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_GetTimeAlive) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_GetTimeAlive");
static_assert(sizeof(VictoryBPFunctionLibrary_GetTimeAlive) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_GetTimeAlive");
static_assert(offsetof(VictoryBPFunctionLibrary_GetTimeAlive, Target) == 0x000000, "Member 'VictoryBPFunctionLibrary_GetTimeAlive::Target' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetTimeAlive, ReturnValue) == 0x000008, "Member 'VictoryBPFunctionLibrary_GetTimeAlive::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetTimeInPlay
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_GetTimeInPlay final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DA1[0x4];                                      // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_GetTimeInPlay) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_GetTimeInPlay");
static_assert(sizeof(VictoryBPFunctionLibrary_GetTimeInPlay) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_GetTimeInPlay");
static_assert(offsetof(VictoryBPFunctionLibrary_GetTimeInPlay, Actor) == 0x000000, "Member 'VictoryBPFunctionLibrary_GetTimeInPlay::Actor' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetTimeInPlay, ReturnValue) == 0x000008, "Member 'VictoryBPFunctionLibrary_GetTimeInPlay::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetUnixTimeStamp
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_GetUnixTimeStamp final
{
public:
	struct FDateTime                              UTCTime;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_GetUnixTimeStamp) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_GetUnixTimeStamp");
static_assert(sizeof(VictoryBPFunctionLibrary_GetUnixTimeStamp) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_GetUnixTimeStamp");
static_assert(offsetof(VictoryBPFunctionLibrary_GetUnixTimeStamp, UTCTime) == 0x000000, "Member 'VictoryBPFunctionLibrary_GetUnixTimeStamp::UTCTime' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetUnixTimeStamp, ReturnValue) == 0x000008, "Member 'VictoryBPFunctionLibrary_GetUnixTimeStamp::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetUserDisplayAdapterBrand
// 0x0008 (0x0008 - 0x0000)
struct VictoryBPFunctionLibrary_GetUserDisplayAdapterBrand final
{
public:
	bool                                          IsAMD;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNvidia;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsIntel;                                           // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUnknown;                                         // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnknownId;                                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_GetUserDisplayAdapterBrand) == 0x000004, "Wrong alignment on VictoryBPFunctionLibrary_GetUserDisplayAdapterBrand");
static_assert(sizeof(VictoryBPFunctionLibrary_GetUserDisplayAdapterBrand) == 0x000008, "Wrong size on VictoryBPFunctionLibrary_GetUserDisplayAdapterBrand");
static_assert(offsetof(VictoryBPFunctionLibrary_GetUserDisplayAdapterBrand, IsAMD) == 0x000000, "Member 'VictoryBPFunctionLibrary_GetUserDisplayAdapterBrand::IsAMD' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetUserDisplayAdapterBrand, IsNvidia) == 0x000001, "Member 'VictoryBPFunctionLibrary_GetUserDisplayAdapterBrand::IsNvidia' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetUserDisplayAdapterBrand, IsIntel) == 0x000002, "Member 'VictoryBPFunctionLibrary_GetUserDisplayAdapterBrand::IsIntel' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetUserDisplayAdapterBrand, IsUnknown) == 0x000003, "Member 'VictoryBPFunctionLibrary_GetUserDisplayAdapterBrand::IsUnknown' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetUserDisplayAdapterBrand, UnknownId) == 0x000004, "Member 'VictoryBPFunctionLibrary_GetUserDisplayAdapterBrand::UnknownId' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetUTCFromUnixTimeStamp
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_GetUTCFromUnixTimeStamp final
{
public:
	int64                                         UnixTimeStamp;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UTCTime;                                           // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_GetUTCFromUnixTimeStamp) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_GetUTCFromUnixTimeStamp");
static_assert(sizeof(VictoryBPFunctionLibrary_GetUTCFromUnixTimeStamp) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_GetUTCFromUnixTimeStamp");
static_assert(offsetof(VictoryBPFunctionLibrary_GetUTCFromUnixTimeStamp, UnixTimeStamp) == 0x000000, "Member 'VictoryBPFunctionLibrary_GetUTCFromUnixTimeStamp::UnixTimeStamp' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetUTCFromUnixTimeStamp, UTCTime) == 0x000008, "Member 'VictoryBPFunctionLibrary_GetUTCFromUnixTimeStamp::UTCTime' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetVectorRelativeLocation
// 0x0030 (0x0030 - 0x0000)
struct VictoryBPFunctionLibrary_GetVectorRelativeLocation final
{
public:
	struct FVector                                ParentLocation;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ParentRotation;                                    // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ChildLocation;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0024(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_GetVectorRelativeLocation) == 0x000004, "Wrong alignment on VictoryBPFunctionLibrary_GetVectorRelativeLocation");
static_assert(sizeof(VictoryBPFunctionLibrary_GetVectorRelativeLocation) == 0x000030, "Wrong size on VictoryBPFunctionLibrary_GetVectorRelativeLocation");
static_assert(offsetof(VictoryBPFunctionLibrary_GetVectorRelativeLocation, ParentLocation) == 0x000000, "Member 'VictoryBPFunctionLibrary_GetVectorRelativeLocation::ParentLocation' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetVectorRelativeLocation, ParentRotation) == 0x00000C, "Member 'VictoryBPFunctionLibrary_GetVectorRelativeLocation::ParentRotation' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetVectorRelativeLocation, ChildLocation) == 0x000018, "Member 'VictoryBPFunctionLibrary_GetVectorRelativeLocation::ChildLocation' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetVectorRelativeLocation, ReturnValue) == 0x000024, "Member 'VictoryBPFunctionLibrary_GetVectorRelativeLocation::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetViewportPosition
// 0x0020 (0x0020 - 0x0000)
struct VictoryBPFunctionLibrary_GetViewportPosition final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ScreenPosition;                                    // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutViewportPosition;                               // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DA2[0x7];                                      // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_GetViewportPosition) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_GetViewportPosition");
static_assert(sizeof(VictoryBPFunctionLibrary_GetViewportPosition) == 0x000020, "Wrong size on VictoryBPFunctionLibrary_GetViewportPosition");
static_assert(offsetof(VictoryBPFunctionLibrary_GetViewportPosition, WorldContextObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_GetViewportPosition::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetViewportPosition, ScreenPosition) == 0x000008, "Member 'VictoryBPFunctionLibrary_GetViewportPosition::ScreenPosition' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetViewportPosition, OutViewportPosition) == 0x000010, "Member 'VictoryBPFunctionLibrary_GetViewportPosition::OutViewportPosition' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetViewportPosition, ReturnValue) == 0x000018, "Member 'VictoryBPFunctionLibrary_GetViewportPosition::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetViewportPositionHitResultByChannel
// 0x00A0 (0x00A0 - 0x0000)
struct VictoryBPFunctionLibrary_GetViewportPositionHitResultByChannel final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ViewportPosition;                                  // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             TraceChannel;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceComplex;                                     // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DA3[0x2];                                      // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             OutHitResult;                                      // 0x0014(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x009C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DA4[0x3];                                      // 0x009D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_GetViewportPositionHitResultByChannel) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_GetViewportPositionHitResultByChannel");
static_assert(sizeof(VictoryBPFunctionLibrary_GetViewportPositionHitResultByChannel) == 0x0000A0, "Wrong size on VictoryBPFunctionLibrary_GetViewportPositionHitResultByChannel");
static_assert(offsetof(VictoryBPFunctionLibrary_GetViewportPositionHitResultByChannel, WorldContextObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_GetViewportPositionHitResultByChannel::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetViewportPositionHitResultByChannel, ViewportPosition) == 0x000008, "Member 'VictoryBPFunctionLibrary_GetViewportPositionHitResultByChannel::ViewportPosition' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetViewportPositionHitResultByChannel, TraceChannel) == 0x000010, "Member 'VictoryBPFunctionLibrary_GetViewportPositionHitResultByChannel::TraceChannel' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetViewportPositionHitResultByChannel, bTraceComplex) == 0x000011, "Member 'VictoryBPFunctionLibrary_GetViewportPositionHitResultByChannel::bTraceComplex' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetViewportPositionHitResultByChannel, OutHitResult) == 0x000014, "Member 'VictoryBPFunctionLibrary_GetViewportPositionHitResultByChannel::OutHitResult' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetViewportPositionHitResultByChannel, ReturnValue) == 0x00009C, "Member 'VictoryBPFunctionLibrary_GetViewportPositionHitResultByChannel::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.GetWidgetFromName
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_GetWidgetFromName final
{
public:
	class UUserWidget*                            ParentUserWidget;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Param_Name;                                        // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_GetWidgetFromName) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_GetWidgetFromName");
static_assert(sizeof(VictoryBPFunctionLibrary_GetWidgetFromName) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_GetWidgetFromName");
static_assert(offsetof(VictoryBPFunctionLibrary_GetWidgetFromName, ParentUserWidget) == 0x000000, "Member 'VictoryBPFunctionLibrary_GetWidgetFromName::ParentUserWidget' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetWidgetFromName, Param_Name) == 0x000008, "Member 'VictoryBPFunctionLibrary_GetWidgetFromName::Param_Name' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetWidgetFromName, ReturnValue) == 0x000010, "Member 'VictoryBPFunctionLibrary_GetWidgetFromName::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.GraphicsSettings__SetFrameRateCap
// 0x0004 (0x0004 - 0x0000)
struct VictoryBPFunctionLibrary_GraphicsSettings__SetFrameRateCap final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_GraphicsSettings__SetFrameRateCap) == 0x000004, "Wrong alignment on VictoryBPFunctionLibrary_GraphicsSettings__SetFrameRateCap");
static_assert(sizeof(VictoryBPFunctionLibrary_GraphicsSettings__SetFrameRateCap) == 0x000004, "Wrong size on VictoryBPFunctionLibrary_GraphicsSettings__SetFrameRateCap");
static_assert(offsetof(VictoryBPFunctionLibrary_GraphicsSettings__SetFrameRateCap, NewValue) == 0x000000, "Member 'VictoryBPFunctionLibrary_GraphicsSettings__SetFrameRateCap::NewValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.HasSubstring
// 0x0028 (0x0028 - 0x0000)
struct VictoryBPFunctionLibrary_HasSubstring final
{
public:
	class FString                                 SearchIn;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubString;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESearchCase                                   SearchCase;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESearchDir                                    SearchDir;                                         // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0022(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DA5[0x5];                                      // 0x0023(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_HasSubstring) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_HasSubstring");
static_assert(sizeof(VictoryBPFunctionLibrary_HasSubstring) == 0x000028, "Wrong size on VictoryBPFunctionLibrary_HasSubstring");
static_assert(offsetof(VictoryBPFunctionLibrary_HasSubstring, SearchIn) == 0x000000, "Member 'VictoryBPFunctionLibrary_HasSubstring::SearchIn' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_HasSubstring, SubString) == 0x000010, "Member 'VictoryBPFunctionLibrary_HasSubstring::SubString' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_HasSubstring, SearchCase) == 0x000020, "Member 'VictoryBPFunctionLibrary_HasSubstring::SearchCase' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_HasSubstring, SearchDir) == 0x000021, "Member 'VictoryBPFunctionLibrary_HasSubstring::SearchDir' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_HasSubstring, ReturnValue) == 0x000022, "Member 'VictoryBPFunctionLibrary_HasSubstring::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.HideStreamingLevel
// 0x0008 (0x0008 - 0x0000)
struct VictoryBPFunctionLibrary_HideStreamingLevel final
{
public:
	class ULevelStreamingDynamic*                 LevelInstance;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_HideStreamingLevel) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_HideStreamingLevel");
static_assert(sizeof(VictoryBPFunctionLibrary_HideStreamingLevel) == 0x000008, "Wrong size on VictoryBPFunctionLibrary_HideStreamingLevel");
static_assert(offsetof(VictoryBPFunctionLibrary_HideStreamingLevel, LevelInstance) == 0x000000, "Member 'VictoryBPFunctionLibrary_HideStreamingLevel::LevelInstance' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.HorizontalFOV
// 0x000C (0x000C - 0x0000)
struct VictoryBPFunctionLibrary_HorizontalFOV final
{
public:
	float                                         Param_VerticalFOV;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AspectRatio;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_HorizontalFOV) == 0x000004, "Wrong alignment on VictoryBPFunctionLibrary_HorizontalFOV");
static_assert(sizeof(VictoryBPFunctionLibrary_HorizontalFOV) == 0x00000C, "Wrong size on VictoryBPFunctionLibrary_HorizontalFOV");
static_assert(offsetof(VictoryBPFunctionLibrary_HorizontalFOV, Param_VerticalFOV) == 0x000000, "Member 'VictoryBPFunctionLibrary_HorizontalFOV::Param_VerticalFOV' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_HorizontalFOV, AspectRatio) == 0x000004, "Member 'VictoryBPFunctionLibrary_HorizontalFOV::AspectRatio' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_HorizontalFOV, ReturnValue) == 0x000008, "Member 'VictoryBPFunctionLibrary_HorizontalFOV::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.InsertChildAt
// 0x0020 (0x0020 - 0x0000)
struct VictoryBPFunctionLibrary_InsertChildAt final
{
public:
	class UWidget*                                Parent;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DA6[0x4];                                      // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                Content;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPanelSlot*                             ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_InsertChildAt) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_InsertChildAt");
static_assert(sizeof(VictoryBPFunctionLibrary_InsertChildAt) == 0x000020, "Wrong size on VictoryBPFunctionLibrary_InsertChildAt");
static_assert(offsetof(VictoryBPFunctionLibrary_InsertChildAt, Parent) == 0x000000, "Member 'VictoryBPFunctionLibrary_InsertChildAt::Parent' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_InsertChildAt, Param_Index) == 0x000008, "Member 'VictoryBPFunctionLibrary_InsertChildAt::Param_Index' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_InsertChildAt, Content) == 0x000010, "Member 'VictoryBPFunctionLibrary_InsertChildAt::Content' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_InsertChildAt, ReturnValue) == 0x000018, "Member 'VictoryBPFunctionLibrary_InsertChildAt::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.IsAlphaNumeric
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_IsAlphaNumeric final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DA7[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_IsAlphaNumeric) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_IsAlphaNumeric");
static_assert(sizeof(VictoryBPFunctionLibrary_IsAlphaNumeric) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_IsAlphaNumeric");
static_assert(offsetof(VictoryBPFunctionLibrary_IsAlphaNumeric, String) == 0x000000, "Member 'VictoryBPFunctionLibrary_IsAlphaNumeric::String' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_IsAlphaNumeric, ReturnValue) == 0x000010, "Member 'VictoryBPFunctionLibrary_IsAlphaNumeric::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.IsPointOnPlane
// 0x0030 (0x0030 - 0x0000)
struct VictoryBPFunctionLibrary_IsPointOnPlane final
{
public:
	struct FPlane                                 Plane;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tolerance;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DA8[0xF];                                      // 0x0021(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_IsPointOnPlane) == 0x000010, "Wrong alignment on VictoryBPFunctionLibrary_IsPointOnPlane");
static_assert(sizeof(VictoryBPFunctionLibrary_IsPointOnPlane) == 0x000030, "Wrong size on VictoryBPFunctionLibrary_IsPointOnPlane");
static_assert(offsetof(VictoryBPFunctionLibrary_IsPointOnPlane, Plane) == 0x000000, "Member 'VictoryBPFunctionLibrary_IsPointOnPlane::Plane' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_IsPointOnPlane, Point) == 0x000010, "Member 'VictoryBPFunctionLibrary_IsPointOnPlane::Point' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_IsPointOnPlane, Tolerance) == 0x00001C, "Member 'VictoryBPFunctionLibrary_IsPointOnPlane::Tolerance' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_IsPointOnPlane, ReturnValue) == 0x000020, "Member 'VictoryBPFunctionLibrary_IsPointOnPlane::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.IsStandAlone
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_IsStandAlone final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DA9[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_IsStandAlone) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_IsStandAlone");
static_assert(sizeof(VictoryBPFunctionLibrary_IsStandAlone) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_IsStandAlone");
static_assert(offsetof(VictoryBPFunctionLibrary_IsStandAlone, WorldContextObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_IsStandAlone::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_IsStandAlone, ReturnValue) == 0x000008, "Member 'VictoryBPFunctionLibrary_IsStandAlone::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.IsWidgetOfClassInViewport
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_IsWidgetOfClassInViewport final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                WidgetClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DAA[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_IsWidgetOfClassInViewport) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_IsWidgetOfClassInViewport");
static_assert(sizeof(VictoryBPFunctionLibrary_IsWidgetOfClassInViewport) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_IsWidgetOfClassInViewport");
static_assert(offsetof(VictoryBPFunctionLibrary_IsWidgetOfClassInViewport, WorldContextObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_IsWidgetOfClassInViewport::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_IsWidgetOfClassInViewport, WidgetClass) == 0x000008, "Member 'VictoryBPFunctionLibrary_IsWidgetOfClassInViewport::WidgetClass' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_IsWidgetOfClassInViewport, ReturnValue) == 0x000010, "Member 'VictoryBPFunctionLibrary_IsWidgetOfClassInViewport::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.JoyFileIO_GetFiles
// 0x0038 (0x0038 - 0x0000)
struct VictoryBPFunctionLibrary_JoyFileIO_GetFiles final
{
public:
	TArray<class FString>                         Files;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 RootFolderFullPath;                                // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ext;                                               // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DAB[0x7];                                      // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_JoyFileIO_GetFiles) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_JoyFileIO_GetFiles");
static_assert(sizeof(VictoryBPFunctionLibrary_JoyFileIO_GetFiles) == 0x000038, "Wrong size on VictoryBPFunctionLibrary_JoyFileIO_GetFiles");
static_assert(offsetof(VictoryBPFunctionLibrary_JoyFileIO_GetFiles, Files) == 0x000000, "Member 'VictoryBPFunctionLibrary_JoyFileIO_GetFiles::Files' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_JoyFileIO_GetFiles, RootFolderFullPath) == 0x000010, "Member 'VictoryBPFunctionLibrary_JoyFileIO_GetFiles::RootFolderFullPath' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_JoyFileIO_GetFiles, Ext) == 0x000020, "Member 'VictoryBPFunctionLibrary_JoyFileIO_GetFiles::Ext' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_JoyFileIO_GetFiles, ReturnValue) == 0x000030, "Member 'VictoryBPFunctionLibrary_JoyFileIO_GetFiles::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.JoyFileIO_GetFilesInRootAndAllSubFolders
// 0x0038 (0x0038 - 0x0000)
struct VictoryBPFunctionLibrary_JoyFileIO_GetFilesInRootAndAllSubFolders final
{
public:
	TArray<class FString>                         Files;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 RootFolderFullPath;                                // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ext;                                               // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DAC[0x7];                                      // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_JoyFileIO_GetFilesInRootAndAllSubFolders) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_JoyFileIO_GetFilesInRootAndAllSubFolders");
static_assert(sizeof(VictoryBPFunctionLibrary_JoyFileIO_GetFilesInRootAndAllSubFolders) == 0x000038, "Wrong size on VictoryBPFunctionLibrary_JoyFileIO_GetFilesInRootAndAllSubFolders");
static_assert(offsetof(VictoryBPFunctionLibrary_JoyFileIO_GetFilesInRootAndAllSubFolders, Files) == 0x000000, "Member 'VictoryBPFunctionLibrary_JoyFileIO_GetFilesInRootAndAllSubFolders::Files' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_JoyFileIO_GetFilesInRootAndAllSubFolders, RootFolderFullPath) == 0x000010, "Member 'VictoryBPFunctionLibrary_JoyFileIO_GetFilesInRootAndAllSubFolders::RootFolderFullPath' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_JoyFileIO_GetFilesInRootAndAllSubFolders, Ext) == 0x000020, "Member 'VictoryBPFunctionLibrary_JoyFileIO_GetFilesInRootAndAllSubFolders::Ext' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_JoyFileIO_GetFilesInRootAndAllSubFolders, ReturnValue) == 0x000030, "Member 'VictoryBPFunctionLibrary_JoyFileIO_GetFilesInRootAndAllSubFolders::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.JoyGraphicsSettings__FullScreen_Get
// 0x0001 (0x0001 - 0x0000)
struct VictoryBPFunctionLibrary_JoyGraphicsSettings__FullScreen_Get final
{
public:
	EJoyGraphicsFullScreen                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_JoyGraphicsSettings__FullScreen_Get) == 0x000001, "Wrong alignment on VictoryBPFunctionLibrary_JoyGraphicsSettings__FullScreen_Get");
static_assert(sizeof(VictoryBPFunctionLibrary_JoyGraphicsSettings__FullScreen_Get) == 0x000001, "Wrong size on VictoryBPFunctionLibrary_JoyGraphicsSettings__FullScreen_Get");
static_assert(offsetof(VictoryBPFunctionLibrary_JoyGraphicsSettings__FullScreen_Get, ReturnValue) == 0x000000, "Member 'VictoryBPFunctionLibrary_JoyGraphicsSettings__FullScreen_Get::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.JoyGraphicsSettings__FullScreen_Set
// 0x0001 (0x0001 - 0x0000)
struct VictoryBPFunctionLibrary_JoyGraphicsSettings__FullScreen_Set final
{
public:
	EJoyGraphicsFullScreen                        NewSetting;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_JoyGraphicsSettings__FullScreen_Set) == 0x000001, "Wrong alignment on VictoryBPFunctionLibrary_JoyGraphicsSettings__FullScreen_Set");
static_assert(sizeof(VictoryBPFunctionLibrary_JoyGraphicsSettings__FullScreen_Set) == 0x000001, "Wrong size on VictoryBPFunctionLibrary_JoyGraphicsSettings__FullScreen_Set");
static_assert(offsetof(VictoryBPFunctionLibrary_JoyGraphicsSettings__FullScreen_Set, NewSetting) == 0x000000, "Member 'VictoryBPFunctionLibrary_JoyGraphicsSettings__FullScreen_Set::NewSetting' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.JoyIsKey
// 0x0058 (0x0058 - 0x0000)
struct VictoryBPFunctionLibrary_JoyIsKey final
{
public:
	struct FKeyEvent                              KeyEvent;                                          // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FKey                                   Key;                                               // 0x0038(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ctrl;                                              // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Shift;                                             // 0x0051(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Alt;                                               // 0x0052(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Cmd;                                               // 0x0053(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Match;                                             // 0x0054(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DAD[0x3];                                      // 0x0055(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_JoyIsKey) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_JoyIsKey");
static_assert(sizeof(VictoryBPFunctionLibrary_JoyIsKey) == 0x000058, "Wrong size on VictoryBPFunctionLibrary_JoyIsKey");
static_assert(offsetof(VictoryBPFunctionLibrary_JoyIsKey, KeyEvent) == 0x000000, "Member 'VictoryBPFunctionLibrary_JoyIsKey::KeyEvent' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_JoyIsKey, Key) == 0x000038, "Member 'VictoryBPFunctionLibrary_JoyIsKey::Key' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_JoyIsKey, Ctrl) == 0x000050, "Member 'VictoryBPFunctionLibrary_JoyIsKey::Ctrl' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_JoyIsKey, Shift) == 0x000051, "Member 'VictoryBPFunctionLibrary_JoyIsKey::Shift' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_JoyIsKey, Alt) == 0x000052, "Member 'VictoryBPFunctionLibrary_JoyIsKey::Alt' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_JoyIsKey, Cmd) == 0x000053, "Member 'VictoryBPFunctionLibrary_JoyIsKey::Cmd' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_JoyIsKey, Match) == 0x000054, "Member 'VictoryBPFunctionLibrary_JoyIsKey::Match' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.LensFlare__GetLensFlareOffsets
// 0x0020 (0x0020 - 0x0000)
struct VictoryBPFunctionLibrary_LensFlare__GetLensFlareOffsets final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 LightSource;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchOffset;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawOffset;                                         // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RollOffset;                                        // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DAE[0x3];                                      // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_LensFlare__GetLensFlareOffsets) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_LensFlare__GetLensFlareOffsets");
static_assert(sizeof(VictoryBPFunctionLibrary_LensFlare__GetLensFlareOffsets) == 0x000020, "Wrong size on VictoryBPFunctionLibrary_LensFlare__GetLensFlareOffsets");
static_assert(offsetof(VictoryBPFunctionLibrary_LensFlare__GetLensFlareOffsets, PlayerController) == 0x000000, "Member 'VictoryBPFunctionLibrary_LensFlare__GetLensFlareOffsets::PlayerController' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_LensFlare__GetLensFlareOffsets, LightSource) == 0x000008, "Member 'VictoryBPFunctionLibrary_LensFlare__GetLensFlareOffsets::LightSource' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_LensFlare__GetLensFlareOffsets, PitchOffset) == 0x000010, "Member 'VictoryBPFunctionLibrary_LensFlare__GetLensFlareOffsets::PitchOffset' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_LensFlare__GetLensFlareOffsets, YawOffset) == 0x000014, "Member 'VictoryBPFunctionLibrary_LensFlare__GetLensFlareOffsets::YawOffset' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_LensFlare__GetLensFlareOffsets, RollOffset) == 0x000018, "Member 'VictoryBPFunctionLibrary_LensFlare__GetLensFlareOffsets::RollOffset' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_LensFlare__GetLensFlareOffsets, ReturnValue) == 0x00001C, "Member 'VictoryBPFunctionLibrary_LensFlare__GetLensFlareOffsets::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.LoadObjectFromAssetPath
// 0x0020 (0x0020 - 0x0000)
struct VictoryBPFunctionLibrary_LoadObjectFromAssetPath final
{
public:
	TSubclassOf<class UObject>                    ObjectClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Path;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DAF[0x7];                                      // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_LoadObjectFromAssetPath) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_LoadObjectFromAssetPath");
static_assert(sizeof(VictoryBPFunctionLibrary_LoadObjectFromAssetPath) == 0x000020, "Wrong size on VictoryBPFunctionLibrary_LoadObjectFromAssetPath");
static_assert(offsetof(VictoryBPFunctionLibrary_LoadObjectFromAssetPath, ObjectClass) == 0x000000, "Member 'VictoryBPFunctionLibrary_LoadObjectFromAssetPath::ObjectClass' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_LoadObjectFromAssetPath, Path) == 0x000008, "Member 'VictoryBPFunctionLibrary_LoadObjectFromAssetPath::Path' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_LoadObjectFromAssetPath, IsValid) == 0x000010, "Member 'VictoryBPFunctionLibrary_LoadObjectFromAssetPath::IsValid' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_LoadObjectFromAssetPath, ReturnValue) == 0x000018, "Member 'VictoryBPFunctionLibrary_LoadObjectFromAssetPath::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.LoadStringArrayFromFile
// 0x0030 (0x0030 - 0x0000)
struct VictoryBPFunctionLibrary_LoadStringArrayFromFile final
{
public:
	TArray<class FString>                         StringArray;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ArraySize;                                         // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DB0[0x4];                                      // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FullFilePath;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExcludeEmptyLines;                                 // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DB1[0x6];                                      // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_LoadStringArrayFromFile) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_LoadStringArrayFromFile");
static_assert(sizeof(VictoryBPFunctionLibrary_LoadStringArrayFromFile) == 0x000030, "Wrong size on VictoryBPFunctionLibrary_LoadStringArrayFromFile");
static_assert(offsetof(VictoryBPFunctionLibrary_LoadStringArrayFromFile, StringArray) == 0x000000, "Member 'VictoryBPFunctionLibrary_LoadStringArrayFromFile::StringArray' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_LoadStringArrayFromFile, ArraySize) == 0x000010, "Member 'VictoryBPFunctionLibrary_LoadStringArrayFromFile::ArraySize' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_LoadStringArrayFromFile, FullFilePath) == 0x000018, "Member 'VictoryBPFunctionLibrary_LoadStringArrayFromFile::FullFilePath' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_LoadStringArrayFromFile, ExcludeEmptyLines) == 0x000028, "Member 'VictoryBPFunctionLibrary_LoadStringArrayFromFile::ExcludeEmptyLines' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_LoadStringArrayFromFile, ReturnValue) == 0x000029, "Member 'VictoryBPFunctionLibrary_LoadStringArrayFromFile::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.LoadStringFromFile
// 0x0028 (0x0028 - 0x0000)
struct VictoryBPFunctionLibrary_LoadStringFromFile final
{
public:
	class FString                                 Result;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FullFilePath;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DB2[0x7];                                      // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_LoadStringFromFile) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_LoadStringFromFile");
static_assert(sizeof(VictoryBPFunctionLibrary_LoadStringFromFile) == 0x000028, "Wrong size on VictoryBPFunctionLibrary_LoadStringFromFile");
static_assert(offsetof(VictoryBPFunctionLibrary_LoadStringFromFile, Result) == 0x000000, "Member 'VictoryBPFunctionLibrary_LoadStringFromFile::Result' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_LoadStringFromFile, FullFilePath) == 0x000010, "Member 'VictoryBPFunctionLibrary_LoadStringFromFile::FullFilePath' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_LoadStringFromFile, ReturnValue) == 0x000020, "Member 'VictoryBPFunctionLibrary_LoadStringFromFile::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.LoadTexture2D_FromDDSFile
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_LoadTexture2D_FromDDSFile final
{
public:
	class FString                                 FullFilePath;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_LoadTexture2D_FromDDSFile) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_LoadTexture2D_FromDDSFile");
static_assert(sizeof(VictoryBPFunctionLibrary_LoadTexture2D_FromDDSFile) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_LoadTexture2D_FromDDSFile");
static_assert(offsetof(VictoryBPFunctionLibrary_LoadTexture2D_FromDDSFile, FullFilePath) == 0x000000, "Member 'VictoryBPFunctionLibrary_LoadTexture2D_FromDDSFile::FullFilePath' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_LoadTexture2D_FromDDSFile, ReturnValue) == 0x000010, "Member 'VictoryBPFunctionLibrary_LoadTexture2D_FromDDSFile::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.LoadTexture2D_FromFileByExtension
// 0x0028 (0x0028 - 0x0000)
struct VictoryBPFunctionLibrary_LoadTexture2D_FromFileByExtension final
{
public:
	class FString                                 ImagePath;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DB3[0x3];                                      // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OutWidth;                                          // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutHeight;                                         // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DB4[0x4];                                      // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_LoadTexture2D_FromFileByExtension) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_LoadTexture2D_FromFileByExtension");
static_assert(sizeof(VictoryBPFunctionLibrary_LoadTexture2D_FromFileByExtension) == 0x000028, "Wrong size on VictoryBPFunctionLibrary_LoadTexture2D_FromFileByExtension");
static_assert(offsetof(VictoryBPFunctionLibrary_LoadTexture2D_FromFileByExtension, ImagePath) == 0x000000, "Member 'VictoryBPFunctionLibrary_LoadTexture2D_FromFileByExtension::ImagePath' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_LoadTexture2D_FromFileByExtension, IsValid) == 0x000010, "Member 'VictoryBPFunctionLibrary_LoadTexture2D_FromFileByExtension::IsValid' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_LoadTexture2D_FromFileByExtension, OutWidth) == 0x000014, "Member 'VictoryBPFunctionLibrary_LoadTexture2D_FromFileByExtension::OutWidth' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_LoadTexture2D_FromFileByExtension, OutHeight) == 0x000018, "Member 'VictoryBPFunctionLibrary_LoadTexture2D_FromFileByExtension::OutHeight' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_LoadTexture2D_FromFileByExtension, ReturnValue) == 0x000020, "Member 'VictoryBPFunctionLibrary_LoadTexture2D_FromFileByExtension::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.MapRangeClamped
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_MapRangeClamped final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRangeA;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRangeB;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutRangeA;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutRangeB;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_MapRangeClamped) == 0x000004, "Wrong alignment on VictoryBPFunctionLibrary_MapRangeClamped");
static_assert(sizeof(VictoryBPFunctionLibrary_MapRangeClamped) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_MapRangeClamped");
static_assert(offsetof(VictoryBPFunctionLibrary_MapRangeClamped, Value) == 0x000000, "Member 'VictoryBPFunctionLibrary_MapRangeClamped::Value' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_MapRangeClamped, InRangeA) == 0x000004, "Member 'VictoryBPFunctionLibrary_MapRangeClamped::InRangeA' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_MapRangeClamped, InRangeB) == 0x000008, "Member 'VictoryBPFunctionLibrary_MapRangeClamped::InRangeB' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_MapRangeClamped, OutRangeA) == 0x00000C, "Member 'VictoryBPFunctionLibrary_MapRangeClamped::OutRangeA' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_MapRangeClamped, OutRangeB) == 0x000010, "Member 'VictoryBPFunctionLibrary_MapRangeClamped::OutRangeB' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_MapRangeClamped, ReturnValue) == 0x000014, "Member 'VictoryBPFunctionLibrary_MapRangeClamped::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.MaxOfFloatArray
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_MaxOfFloatArray final
{
public:
	TArray<float>                                 FloatArray;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         IndexOfMaxValue;                                   // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxValue;                                          // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_MaxOfFloatArray) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_MaxOfFloatArray");
static_assert(sizeof(VictoryBPFunctionLibrary_MaxOfFloatArray) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_MaxOfFloatArray");
static_assert(offsetof(VictoryBPFunctionLibrary_MaxOfFloatArray, FloatArray) == 0x000000, "Member 'VictoryBPFunctionLibrary_MaxOfFloatArray::FloatArray' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_MaxOfFloatArray, IndexOfMaxValue) == 0x000010, "Member 'VictoryBPFunctionLibrary_MaxOfFloatArray::IndexOfMaxValue' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_MaxOfFloatArray, MaxValue) == 0x000014, "Member 'VictoryBPFunctionLibrary_MaxOfFloatArray::MaxValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.MaxOfIntArray
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_MaxOfIntArray final
{
public:
	TArray<int32>                                 IntArray;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         IndexOfMaxValue;                                   // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxValue;                                          // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_MaxOfIntArray) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_MaxOfIntArray");
static_assert(sizeof(VictoryBPFunctionLibrary_MaxOfIntArray) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_MaxOfIntArray");
static_assert(offsetof(VictoryBPFunctionLibrary_MaxOfIntArray, IntArray) == 0x000000, "Member 'VictoryBPFunctionLibrary_MaxOfIntArray::IntArray' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_MaxOfIntArray, IndexOfMaxValue) == 0x000010, "Member 'VictoryBPFunctionLibrary_MaxOfIntArray::IndexOfMaxValue' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_MaxOfIntArray, MaxValue) == 0x000014, "Member 'VictoryBPFunctionLibrary_MaxOfIntArray::MaxValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.MinOfFloatArray
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_MinOfFloatArray final
{
public:
	TArray<float>                                 FloatArray;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         IndexOfMinValue;                                   // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinValue;                                          // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_MinOfFloatArray) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_MinOfFloatArray");
static_assert(sizeof(VictoryBPFunctionLibrary_MinOfFloatArray) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_MinOfFloatArray");
static_assert(offsetof(VictoryBPFunctionLibrary_MinOfFloatArray, FloatArray) == 0x000000, "Member 'VictoryBPFunctionLibrary_MinOfFloatArray::FloatArray' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_MinOfFloatArray, IndexOfMinValue) == 0x000010, "Member 'VictoryBPFunctionLibrary_MinOfFloatArray::IndexOfMinValue' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_MinOfFloatArray, MinValue) == 0x000014, "Member 'VictoryBPFunctionLibrary_MinOfFloatArray::MinValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.MinOfIntArray
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_MinOfIntArray final
{
public:
	TArray<int32>                                 IntArray;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         IndexOfMinValue;                                   // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinValue;                                          // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_MinOfIntArray) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_MinOfIntArray");
static_assert(sizeof(VictoryBPFunctionLibrary_MinOfIntArray) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_MinOfIntArray");
static_assert(offsetof(VictoryBPFunctionLibrary_MinOfIntArray, IntArray) == 0x000000, "Member 'VictoryBPFunctionLibrary_MinOfIntArray::IntArray' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_MinOfIntArray, IndexOfMinValue) == 0x000010, "Member 'VictoryBPFunctionLibrary_MinOfIntArray::IndexOfMinValue' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_MinOfIntArray, MinValue) == 0x000014, "Member 'VictoryBPFunctionLibrary_MinOfIntArray::MinValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Mobility__SetSceneCompMobility
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_Mobility__SetSceneCompMobility final
{
public:
	class USceneComponent*                        SceneComp;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComponentMobility                            NewMobility;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DB5[0x6];                                      // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Mobility__SetSceneCompMobility) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Mobility__SetSceneCompMobility");
static_assert(sizeof(VictoryBPFunctionLibrary_Mobility__SetSceneCompMobility) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_Mobility__SetSceneCompMobility");
static_assert(offsetof(VictoryBPFunctionLibrary_Mobility__SetSceneCompMobility, SceneComp) == 0x000000, "Member 'VictoryBPFunctionLibrary_Mobility__SetSceneCompMobility::SceneComp' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Mobility__SetSceneCompMobility, NewMobility) == 0x000008, "Member 'VictoryBPFunctionLibrary_Mobility__SetSceneCompMobility::NewMobility' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Mobility__SetSceneCompMobility, ReturnValue) == 0x000009, "Member 'VictoryBPFunctionLibrary_Mobility__SetSceneCompMobility::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.NotEqual_Vector2DVector2D
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_NotEqual_Vector2DVector2D final
{
public:
	struct FVector2D                              A;                                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              B;                                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ErrorTolerance;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DB6[0x3];                                      // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_NotEqual_Vector2DVector2D) == 0x000004, "Wrong alignment on VictoryBPFunctionLibrary_NotEqual_Vector2DVector2D");
static_assert(sizeof(VictoryBPFunctionLibrary_NotEqual_Vector2DVector2D) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_NotEqual_Vector2DVector2D");
static_assert(offsetof(VictoryBPFunctionLibrary_NotEqual_Vector2DVector2D, A) == 0x000000, "Member 'VictoryBPFunctionLibrary_NotEqual_Vector2DVector2D::A' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_NotEqual_Vector2DVector2D, B) == 0x000008, "Member 'VictoryBPFunctionLibrary_NotEqual_Vector2DVector2D::B' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_NotEqual_Vector2DVector2D, ErrorTolerance) == 0x000010, "Member 'VictoryBPFunctionLibrary_NotEqual_Vector2DVector2D::ErrorTolerance' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_NotEqual_Vector2DVector2D, ReturnValue) == 0x000014, "Member 'VictoryBPFunctionLibrary_NotEqual_Vector2DVector2D::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Open_URL_In_Web_Browser
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_Open_URL_In_Web_Browser final
{
public:
	class FString                                 TheURL;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_Open_URL_In_Web_Browser) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Open_URL_In_Web_Browser");
static_assert(sizeof(VictoryBPFunctionLibrary_Open_URL_In_Web_Browser) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_Open_URL_In_Web_Browser");
static_assert(offsetof(VictoryBPFunctionLibrary_Open_URL_In_Web_Browser, TheURL) == 0x000000, "Member 'VictoryBPFunctionLibrary_Open_URL_In_Web_Browser::TheURL' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.OperatingSystem__GetCurrentPlatform
// 0x000B (0x000B - 0x0000)
struct VictoryBPFunctionLibrary_OperatingSystem__GetCurrentPlatform final
{
public:
	bool                                          Windows_;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Mac;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Linux;                                             // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IOS;                                               // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Android;                                           // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Android_ARM;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Android_Vulkan;                                    // 0x0006(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PS4;                                               // 0x0007(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          XboxOne;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HTML5;                                             // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          APPLE;                                             // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_OperatingSystem__GetCurrentPlatform) == 0x000001, "Wrong alignment on VictoryBPFunctionLibrary_OperatingSystem__GetCurrentPlatform");
static_assert(sizeof(VictoryBPFunctionLibrary_OperatingSystem__GetCurrentPlatform) == 0x00000B, "Wrong size on VictoryBPFunctionLibrary_OperatingSystem__GetCurrentPlatform");
static_assert(offsetof(VictoryBPFunctionLibrary_OperatingSystem__GetCurrentPlatform, Windows_) == 0x000000, "Member 'VictoryBPFunctionLibrary_OperatingSystem__GetCurrentPlatform::Windows_' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_OperatingSystem__GetCurrentPlatform, Mac) == 0x000001, "Member 'VictoryBPFunctionLibrary_OperatingSystem__GetCurrentPlatform::Mac' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_OperatingSystem__GetCurrentPlatform, Linux) == 0x000002, "Member 'VictoryBPFunctionLibrary_OperatingSystem__GetCurrentPlatform::Linux' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_OperatingSystem__GetCurrentPlatform, IOS) == 0x000003, "Member 'VictoryBPFunctionLibrary_OperatingSystem__GetCurrentPlatform::IOS' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_OperatingSystem__GetCurrentPlatform, Android) == 0x000004, "Member 'VictoryBPFunctionLibrary_OperatingSystem__GetCurrentPlatform::Android' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_OperatingSystem__GetCurrentPlatform, Android_ARM) == 0x000005, "Member 'VictoryBPFunctionLibrary_OperatingSystem__GetCurrentPlatform::Android_ARM' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_OperatingSystem__GetCurrentPlatform, Android_Vulkan) == 0x000006, "Member 'VictoryBPFunctionLibrary_OperatingSystem__GetCurrentPlatform::Android_Vulkan' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_OperatingSystem__GetCurrentPlatform, PS4) == 0x000007, "Member 'VictoryBPFunctionLibrary_OperatingSystem__GetCurrentPlatform::PS4' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_OperatingSystem__GetCurrentPlatform, XboxOne) == 0x000008, "Member 'VictoryBPFunctionLibrary_OperatingSystem__GetCurrentPlatform::XboxOne' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_OperatingSystem__GetCurrentPlatform, HTML5) == 0x000009, "Member 'VictoryBPFunctionLibrary_OperatingSystem__GetCurrentPlatform::HTML5' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_OperatingSystem__GetCurrentPlatform, APPLE) == 0x00000A, "Member 'VictoryBPFunctionLibrary_OperatingSystem__GetCurrentPlatform::APPLE' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.OptionsMenu__GetDisplayAdapterScreenResolutions
// 0x0038 (0x0038 - 0x0000)
struct VictoryBPFunctionLibrary_OptionsMenu__GetDisplayAdapterScreenResolutions final
{
public:
	TArray<int32>                                 Widths;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Heights;                                           // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 RefreshRates;                                      // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          IncludeRefreshRates;                               // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DB7[0x6];                                      // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_OptionsMenu__GetDisplayAdapterScreenResolutions) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_OptionsMenu__GetDisplayAdapterScreenResolutions");
static_assert(sizeof(VictoryBPFunctionLibrary_OptionsMenu__GetDisplayAdapterScreenResolutions) == 0x000038, "Wrong size on VictoryBPFunctionLibrary_OptionsMenu__GetDisplayAdapterScreenResolutions");
static_assert(offsetof(VictoryBPFunctionLibrary_OptionsMenu__GetDisplayAdapterScreenResolutions, Widths) == 0x000000, "Member 'VictoryBPFunctionLibrary_OptionsMenu__GetDisplayAdapterScreenResolutions::Widths' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_OptionsMenu__GetDisplayAdapterScreenResolutions, Heights) == 0x000010, "Member 'VictoryBPFunctionLibrary_OptionsMenu__GetDisplayAdapterScreenResolutions::Heights' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_OptionsMenu__GetDisplayAdapterScreenResolutions, RefreshRates) == 0x000020, "Member 'VictoryBPFunctionLibrary_OptionsMenu__GetDisplayAdapterScreenResolutions::RefreshRates' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_OptionsMenu__GetDisplayAdapterScreenResolutions, IncludeRefreshRates) == 0x000030, "Member 'VictoryBPFunctionLibrary_OptionsMenu__GetDisplayAdapterScreenResolutions::IncludeRefreshRates' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_OptionsMenu__GetDisplayAdapterScreenResolutions, ReturnValue) == 0x000031, "Member 'VictoryBPFunctionLibrary_OptionsMenu__GetDisplayAdapterScreenResolutions::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Physics__EnterRagDoll
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_Physics__EnterRagDoll final
{
public:
	class AActor*                                 TheCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DB8[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Physics__EnterRagDoll) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Physics__EnterRagDoll");
static_assert(sizeof(VictoryBPFunctionLibrary_Physics__EnterRagDoll) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_Physics__EnterRagDoll");
static_assert(offsetof(VictoryBPFunctionLibrary_Physics__EnterRagDoll, TheCharacter) == 0x000000, "Member 'VictoryBPFunctionLibrary_Physics__EnterRagDoll::TheCharacter' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Physics__EnterRagDoll, ReturnValue) == 0x000008, "Member 'VictoryBPFunctionLibrary_Physics__EnterRagDoll::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Physics__GetLocationofRagDoll
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_Physics__GetLocationofRagDoll final
{
public:
	class AActor*                                 TheCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RagdollLocation;                                   // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DB9[0x3];                                      // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Physics__GetLocationofRagDoll) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Physics__GetLocationofRagDoll");
static_assert(sizeof(VictoryBPFunctionLibrary_Physics__GetLocationofRagDoll) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_Physics__GetLocationofRagDoll");
static_assert(offsetof(VictoryBPFunctionLibrary_Physics__GetLocationofRagDoll, TheCharacter) == 0x000000, "Member 'VictoryBPFunctionLibrary_Physics__GetLocationofRagDoll::TheCharacter' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Physics__GetLocationofRagDoll, RagdollLocation) == 0x000008, "Member 'VictoryBPFunctionLibrary_Physics__GetLocationofRagDoll::RagdollLocation' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Physics__GetLocationofRagDoll, ReturnValue) == 0x000014, "Member 'VictoryBPFunctionLibrary_Physics__GetLocationofRagDoll::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Physics__InitializeVictoryRagDoll
// 0x0028 (0x0028 - 0x0000)
struct VictoryBPFunctionLibrary_Physics__InitializeVictoryRagDoll final
{
public:
	class AActor*                                 TheCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InitLocation;                                      // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InitRotation;                                      // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DBA[0x7];                                      // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Physics__InitializeVictoryRagDoll) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Physics__InitializeVictoryRagDoll");
static_assert(sizeof(VictoryBPFunctionLibrary_Physics__InitializeVictoryRagDoll) == 0x000028, "Wrong size on VictoryBPFunctionLibrary_Physics__InitializeVictoryRagDoll");
static_assert(offsetof(VictoryBPFunctionLibrary_Physics__InitializeVictoryRagDoll, TheCharacter) == 0x000000, "Member 'VictoryBPFunctionLibrary_Physics__InitializeVictoryRagDoll::TheCharacter' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Physics__InitializeVictoryRagDoll, InitLocation) == 0x000008, "Member 'VictoryBPFunctionLibrary_Physics__InitializeVictoryRagDoll::InitLocation' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Physics__InitializeVictoryRagDoll, InitRotation) == 0x000014, "Member 'VictoryBPFunctionLibrary_Physics__InitializeVictoryRagDoll::InitRotation' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Physics__InitializeVictoryRagDoll, ReturnValue) == 0x000020, "Member 'VictoryBPFunctionLibrary_Physics__InitializeVictoryRagDoll::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Physics__IsRagDoll
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_Physics__IsRagDoll final
{
public:
	class AActor*                                 TheCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DBB[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Physics__IsRagDoll) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Physics__IsRagDoll");
static_assert(sizeof(VictoryBPFunctionLibrary_Physics__IsRagDoll) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_Physics__IsRagDoll");
static_assert(offsetof(VictoryBPFunctionLibrary_Physics__IsRagDoll, TheCharacter) == 0x000000, "Member 'VictoryBPFunctionLibrary_Physics__IsRagDoll::TheCharacter' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Physics__IsRagDoll, ReturnValue) == 0x000008, "Member 'VictoryBPFunctionLibrary_Physics__IsRagDoll::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Physics__LeaveRagDoll
// 0x0030 (0x0030 - 0x0000)
struct VictoryBPFunctionLibrary_Physics__LeaveRagDoll final
{
public:
	class AActor*                                 TheCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SetToFallingMovementMode;                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DBC[0x3];                                      // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HeightAboveRBMesh;                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InitLocation;                                      // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InitRotation;                                      // 0x001C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DBD[0x7];                                      // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Physics__LeaveRagDoll) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Physics__LeaveRagDoll");
static_assert(sizeof(VictoryBPFunctionLibrary_Physics__LeaveRagDoll) == 0x000030, "Wrong size on VictoryBPFunctionLibrary_Physics__LeaveRagDoll");
static_assert(offsetof(VictoryBPFunctionLibrary_Physics__LeaveRagDoll, TheCharacter) == 0x000000, "Member 'VictoryBPFunctionLibrary_Physics__LeaveRagDoll::TheCharacter' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Physics__LeaveRagDoll, SetToFallingMovementMode) == 0x000008, "Member 'VictoryBPFunctionLibrary_Physics__LeaveRagDoll::SetToFallingMovementMode' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Physics__LeaveRagDoll, HeightAboveRBMesh) == 0x00000C, "Member 'VictoryBPFunctionLibrary_Physics__LeaveRagDoll::HeightAboveRBMesh' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Physics__LeaveRagDoll, InitLocation) == 0x000010, "Member 'VictoryBPFunctionLibrary_Physics__LeaveRagDoll::InitLocation' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Physics__LeaveRagDoll, InitRotation) == 0x00001C, "Member 'VictoryBPFunctionLibrary_Physics__LeaveRagDoll::InitRotation' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Physics__LeaveRagDoll, ReturnValue) == 0x000028, "Member 'VictoryBPFunctionLibrary_Physics__LeaveRagDoll::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Physics__UpdateCharacterCameraToRagdollLocation
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_Physics__UpdateCharacterCameraToRagdollLocation final
{
public:
	class AActor*                                 TheCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightOffset;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpSpeed;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DBE[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Physics__UpdateCharacterCameraToRagdollLocation) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Physics__UpdateCharacterCameraToRagdollLocation");
static_assert(sizeof(VictoryBPFunctionLibrary_Physics__UpdateCharacterCameraToRagdollLocation) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_Physics__UpdateCharacterCameraToRagdollLocation");
static_assert(offsetof(VictoryBPFunctionLibrary_Physics__UpdateCharacterCameraToRagdollLocation, TheCharacter) == 0x000000, "Member 'VictoryBPFunctionLibrary_Physics__UpdateCharacterCameraToRagdollLocation::TheCharacter' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Physics__UpdateCharacterCameraToRagdollLocation, HeightOffset) == 0x000008, "Member 'VictoryBPFunctionLibrary_Physics__UpdateCharacterCameraToRagdollLocation::HeightOffset' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Physics__UpdateCharacterCameraToRagdollLocation, InterpSpeed) == 0x00000C, "Member 'VictoryBPFunctionLibrary_Physics__UpdateCharacterCameraToRagdollLocation::InterpSpeed' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Physics__UpdateCharacterCameraToRagdollLocation, ReturnValue) == 0x000010, "Member 'VictoryBPFunctionLibrary_Physics__UpdateCharacterCameraToRagdollLocation::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.PlayerController_GetControllerID
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_PlayerController_GetControllerID final
{
public:
	class APlayerController*                      ThePC;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ControllerId;                                      // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DBF[0x3];                                      // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_PlayerController_GetControllerID) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_PlayerController_GetControllerID");
static_assert(sizeof(VictoryBPFunctionLibrary_PlayerController_GetControllerID) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_PlayerController_GetControllerID");
static_assert(offsetof(VictoryBPFunctionLibrary_PlayerController_GetControllerID, ThePC) == 0x000000, "Member 'VictoryBPFunctionLibrary_PlayerController_GetControllerID::ThePC' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_PlayerController_GetControllerID, ControllerId) == 0x000008, "Member 'VictoryBPFunctionLibrary_PlayerController_GetControllerID::ControllerId' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_PlayerController_GetControllerID, ReturnValue) == 0x00000C, "Member 'VictoryBPFunctionLibrary_PlayerController_GetControllerID::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.PlayerState_GetPlayerID
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_PlayerState_GetPlayerID final
{
public:
	class APlayerController*                      ThePC;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerID;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC0[0x3];                                      // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_PlayerState_GetPlayerID) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_PlayerState_GetPlayerID");
static_assert(sizeof(VictoryBPFunctionLibrary_PlayerState_GetPlayerID) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_PlayerState_GetPlayerID");
static_assert(offsetof(VictoryBPFunctionLibrary_PlayerState_GetPlayerID, ThePC) == 0x000000, "Member 'VictoryBPFunctionLibrary_PlayerState_GetPlayerID::ThePC' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_PlayerState_GetPlayerID, PlayerID) == 0x000008, "Member 'VictoryBPFunctionLibrary_PlayerState_GetPlayerID::PlayerID' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_PlayerState_GetPlayerID, ReturnValue) == 0x00000C, "Member 'VictoryBPFunctionLibrary_PlayerState_GetPlayerID::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.PlaySoundAtLocationFromFile
// 0x0038 (0x0038 - 0x0000)
struct VictoryBPFunctionLibrary_PlaySoundAtLocationFromFile final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAttenuation*                      AttenuationSettings;                               // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_PlaySoundAtLocationFromFile) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_PlaySoundAtLocationFromFile");
static_assert(sizeof(VictoryBPFunctionLibrary_PlaySoundAtLocationFromFile) == 0x000038, "Wrong size on VictoryBPFunctionLibrary_PlaySoundAtLocationFromFile");
static_assert(offsetof(VictoryBPFunctionLibrary_PlaySoundAtLocationFromFile, WorldContextObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_PlaySoundAtLocationFromFile::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_PlaySoundAtLocationFromFile, FilePath) == 0x000008, "Member 'VictoryBPFunctionLibrary_PlaySoundAtLocationFromFile::FilePath' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_PlaySoundAtLocationFromFile, Location) == 0x000018, "Member 'VictoryBPFunctionLibrary_PlaySoundAtLocationFromFile::Location' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_PlaySoundAtLocationFromFile, VolumeMultiplier) == 0x000024, "Member 'VictoryBPFunctionLibrary_PlaySoundAtLocationFromFile::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_PlaySoundAtLocationFromFile, PitchMultiplier) == 0x000028, "Member 'VictoryBPFunctionLibrary_PlaySoundAtLocationFromFile::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_PlaySoundAtLocationFromFile, StartTime) == 0x00002C, "Member 'VictoryBPFunctionLibrary_PlaySoundAtLocationFromFile::StartTime' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_PlaySoundAtLocationFromFile, AttenuationSettings) == 0x000030, "Member 'VictoryBPFunctionLibrary_PlaySoundAtLocationFromFile::AttenuationSettings' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.PlaySoundAttachedFromFile
// 0x0050 (0x0050 - 0x0000)
struct VictoryBPFunctionLibrary_PlaySoundAttachedFromFile final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        AttachToComponent;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachPointName;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachLocation                               LocationType;                                      // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhenAttachedToDestroyed;                      // 0x002D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC1[0x2];                                      // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VolumeMultiplier;                                  // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC2[0x4];                                      // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      AttenuationSettings;                               // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        ReturnValue;                                       // 0x0048(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_PlaySoundAttachedFromFile) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_PlaySoundAttachedFromFile");
static_assert(sizeof(VictoryBPFunctionLibrary_PlaySoundAttachedFromFile) == 0x000050, "Wrong size on VictoryBPFunctionLibrary_PlaySoundAttachedFromFile");
static_assert(offsetof(VictoryBPFunctionLibrary_PlaySoundAttachedFromFile, FilePath) == 0x000000, "Member 'VictoryBPFunctionLibrary_PlaySoundAttachedFromFile::FilePath' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_PlaySoundAttachedFromFile, AttachToComponent) == 0x000010, "Member 'VictoryBPFunctionLibrary_PlaySoundAttachedFromFile::AttachToComponent' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_PlaySoundAttachedFromFile, AttachPointName) == 0x000018, "Member 'VictoryBPFunctionLibrary_PlaySoundAttachedFromFile::AttachPointName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_PlaySoundAttachedFromFile, Location) == 0x000020, "Member 'VictoryBPFunctionLibrary_PlaySoundAttachedFromFile::Location' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_PlaySoundAttachedFromFile, LocationType) == 0x00002C, "Member 'VictoryBPFunctionLibrary_PlaySoundAttachedFromFile::LocationType' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_PlaySoundAttachedFromFile, bStopWhenAttachedToDestroyed) == 0x00002D, "Member 'VictoryBPFunctionLibrary_PlaySoundAttachedFromFile::bStopWhenAttachedToDestroyed' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_PlaySoundAttachedFromFile, VolumeMultiplier) == 0x000030, "Member 'VictoryBPFunctionLibrary_PlaySoundAttachedFromFile::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_PlaySoundAttachedFromFile, PitchMultiplier) == 0x000034, "Member 'VictoryBPFunctionLibrary_PlaySoundAttachedFromFile::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_PlaySoundAttachedFromFile, StartTime) == 0x000038, "Member 'VictoryBPFunctionLibrary_PlaySoundAttachedFromFile::StartTime' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_PlaySoundAttachedFromFile, AttenuationSettings) == 0x000040, "Member 'VictoryBPFunctionLibrary_PlaySoundAttachedFromFile::AttenuationSettings' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_PlaySoundAttachedFromFile, ReturnValue) == 0x000048, "Member 'VictoryBPFunctionLibrary_PlaySoundAttachedFromFile::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.PointDistanceToPlane
// 0x0020 (0x0020 - 0x0000)
struct VictoryBPFunctionLibrary_PointDistanceToPlane final
{
public:
	struct FPlane                                 Plane;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_PointDistanceToPlane) == 0x000010, "Wrong alignment on VictoryBPFunctionLibrary_PointDistanceToPlane");
static_assert(sizeof(VictoryBPFunctionLibrary_PointDistanceToPlane) == 0x000020, "Wrong size on VictoryBPFunctionLibrary_PointDistanceToPlane");
static_assert(offsetof(VictoryBPFunctionLibrary_PointDistanceToPlane, Plane) == 0x000000, "Member 'VictoryBPFunctionLibrary_PointDistanceToPlane::Plane' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_PointDistanceToPlane, Point) == 0x000010, "Member 'VictoryBPFunctionLibrary_PointDistanceToPlane::Point' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_PointDistanceToPlane, Distance) == 0x00001C, "Member 'VictoryBPFunctionLibrary_PointDistanceToPlane::Distance' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.ProjectWorldToScreenPosition
// 0x0014 (0x0014 - 0x0000)
struct VictoryBPFunctionLibrary_ProjectWorldToScreenPosition final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_ProjectWorldToScreenPosition) == 0x000004, "Wrong alignment on VictoryBPFunctionLibrary_ProjectWorldToScreenPosition");
static_assert(sizeof(VictoryBPFunctionLibrary_ProjectWorldToScreenPosition) == 0x000014, "Wrong size on VictoryBPFunctionLibrary_ProjectWorldToScreenPosition");
static_assert(offsetof(VictoryBPFunctionLibrary_ProjectWorldToScreenPosition, WorldLocation) == 0x000000, "Member 'VictoryBPFunctionLibrary_ProjectWorldToScreenPosition::WorldLocation' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_ProjectWorldToScreenPosition, ReturnValue) == 0x00000C, "Member 'VictoryBPFunctionLibrary_ProjectWorldToScreenPosition::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.RandBool_Bernoulli
// 0x0008 (0x0008 - 0x0000)
struct VictoryBPFunctionLibrary_RandBool_Bernoulli final
{
public:
	float                                         FBias;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC3[0x3];                                      // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_RandBool_Bernoulli) == 0x000004, "Wrong alignment on VictoryBPFunctionLibrary_RandBool_Bernoulli");
static_assert(sizeof(VictoryBPFunctionLibrary_RandBool_Bernoulli) == 0x000008, "Wrong size on VictoryBPFunctionLibrary_RandBool_Bernoulli");
static_assert(offsetof(VictoryBPFunctionLibrary_RandBool_Bernoulli, FBias) == 0x000000, "Member 'VictoryBPFunctionLibrary_RandBool_Bernoulli::FBias' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_RandBool_Bernoulli, ReturnValue) == 0x000004, "Member 'VictoryBPFunctionLibrary_RandBool_Bernoulli::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.RandBool_Bernoulli_MT
// 0x0008 (0x0008 - 0x0000)
struct VictoryBPFunctionLibrary_RandBool_Bernoulli_MT final
{
public:
	float                                         FBias;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC4[0x3];                                      // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_RandBool_Bernoulli_MT) == 0x000004, "Wrong alignment on VictoryBPFunctionLibrary_RandBool_Bernoulli_MT");
static_assert(sizeof(VictoryBPFunctionLibrary_RandBool_Bernoulli_MT) == 0x000008, "Wrong size on VictoryBPFunctionLibrary_RandBool_Bernoulli_MT");
static_assert(offsetof(VictoryBPFunctionLibrary_RandBool_Bernoulli_MT, FBias) == 0x000000, "Member 'VictoryBPFunctionLibrary_RandBool_Bernoulli_MT::FBias' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_RandBool_Bernoulli_MT, ReturnValue) == 0x000004, "Member 'VictoryBPFunctionLibrary_RandBool_Bernoulli_MT::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.RandFloat_MINMAX_uniDis
// 0x000C (0x000C - 0x0000)
struct VictoryBPFunctionLibrary_RandFloat_MINMAX_uniDis final
{
public:
	float                                         IMin;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IMax;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_RandFloat_MINMAX_uniDis) == 0x000004, "Wrong alignment on VictoryBPFunctionLibrary_RandFloat_MINMAX_uniDis");
static_assert(sizeof(VictoryBPFunctionLibrary_RandFloat_MINMAX_uniDis) == 0x00000C, "Wrong size on VictoryBPFunctionLibrary_RandFloat_MINMAX_uniDis");
static_assert(offsetof(VictoryBPFunctionLibrary_RandFloat_MINMAX_uniDis, IMin) == 0x000000, "Member 'VictoryBPFunctionLibrary_RandFloat_MINMAX_uniDis::IMin' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_RandFloat_MINMAX_uniDis, IMax) == 0x000004, "Member 'VictoryBPFunctionLibrary_RandFloat_MINMAX_uniDis::IMax' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_RandFloat_MINMAX_uniDis, ReturnValue) == 0x000008, "Member 'VictoryBPFunctionLibrary_RandFloat_MINMAX_uniDis::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.RandFloat_MINMAX_uniDis_MT
// 0x000C (0x000C - 0x0000)
struct VictoryBPFunctionLibrary_RandFloat_MINMAX_uniDis_MT final
{
public:
	float                                         IMin;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IMax;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_RandFloat_MINMAX_uniDis_MT) == 0x000004, "Wrong alignment on VictoryBPFunctionLibrary_RandFloat_MINMAX_uniDis_MT");
static_assert(sizeof(VictoryBPFunctionLibrary_RandFloat_MINMAX_uniDis_MT) == 0x00000C, "Wrong size on VictoryBPFunctionLibrary_RandFloat_MINMAX_uniDis_MT");
static_assert(offsetof(VictoryBPFunctionLibrary_RandFloat_MINMAX_uniDis_MT, IMin) == 0x000000, "Member 'VictoryBPFunctionLibrary_RandFloat_MINMAX_uniDis_MT::IMin' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_RandFloat_MINMAX_uniDis_MT, IMax) == 0x000004, "Member 'VictoryBPFunctionLibrary_RandFloat_MINMAX_uniDis_MT::IMax' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_RandFloat_MINMAX_uniDis_MT, ReturnValue) == 0x000008, "Member 'VictoryBPFunctionLibrary_RandFloat_MINMAX_uniDis_MT::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.RandFloat_uniDis
// 0x0004 (0x0004 - 0x0000)
struct VictoryBPFunctionLibrary_RandFloat_uniDis final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_RandFloat_uniDis) == 0x000004, "Wrong alignment on VictoryBPFunctionLibrary_RandFloat_uniDis");
static_assert(sizeof(VictoryBPFunctionLibrary_RandFloat_uniDis) == 0x000004, "Wrong size on VictoryBPFunctionLibrary_RandFloat_uniDis");
static_assert(offsetof(VictoryBPFunctionLibrary_RandFloat_uniDis, ReturnValue) == 0x000000, "Member 'VictoryBPFunctionLibrary_RandFloat_uniDis::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.RandFloat_uniDis_MT
// 0x0004 (0x0004 - 0x0000)
struct VictoryBPFunctionLibrary_RandFloat_uniDis_MT final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_RandFloat_uniDis_MT) == 0x000004, "Wrong alignment on VictoryBPFunctionLibrary_RandFloat_uniDis_MT");
static_assert(sizeof(VictoryBPFunctionLibrary_RandFloat_uniDis_MT) == 0x000004, "Wrong size on VictoryBPFunctionLibrary_RandFloat_uniDis_MT");
static_assert(offsetof(VictoryBPFunctionLibrary_RandFloat_uniDis_MT, ReturnValue) == 0x000000, "Member 'VictoryBPFunctionLibrary_RandFloat_uniDis_MT::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.RandInt_MINMAX_uniDis
// 0x000C (0x000C - 0x0000)
struct VictoryBPFunctionLibrary_RandInt_MINMAX_uniDis final
{
public:
	int32                                         IMin;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IMax;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_RandInt_MINMAX_uniDis) == 0x000004, "Wrong alignment on VictoryBPFunctionLibrary_RandInt_MINMAX_uniDis");
static_assert(sizeof(VictoryBPFunctionLibrary_RandInt_MINMAX_uniDis) == 0x00000C, "Wrong size on VictoryBPFunctionLibrary_RandInt_MINMAX_uniDis");
static_assert(offsetof(VictoryBPFunctionLibrary_RandInt_MINMAX_uniDis, IMin) == 0x000000, "Member 'VictoryBPFunctionLibrary_RandInt_MINMAX_uniDis::IMin' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_RandInt_MINMAX_uniDis, IMax) == 0x000004, "Member 'VictoryBPFunctionLibrary_RandInt_MINMAX_uniDis::IMax' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_RandInt_MINMAX_uniDis, ReturnValue) == 0x000008, "Member 'VictoryBPFunctionLibrary_RandInt_MINMAX_uniDis::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.RandInt_MINMAX_uniDis_MT
// 0x000C (0x000C - 0x0000)
struct VictoryBPFunctionLibrary_RandInt_MINMAX_uniDis_MT final
{
public:
	int32                                         IMin;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IMax;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_RandInt_MINMAX_uniDis_MT) == 0x000004, "Wrong alignment on VictoryBPFunctionLibrary_RandInt_MINMAX_uniDis_MT");
static_assert(sizeof(VictoryBPFunctionLibrary_RandInt_MINMAX_uniDis_MT) == 0x00000C, "Wrong size on VictoryBPFunctionLibrary_RandInt_MINMAX_uniDis_MT");
static_assert(offsetof(VictoryBPFunctionLibrary_RandInt_MINMAX_uniDis_MT, IMin) == 0x000000, "Member 'VictoryBPFunctionLibrary_RandInt_MINMAX_uniDis_MT::IMin' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_RandInt_MINMAX_uniDis_MT, IMax) == 0x000004, "Member 'VictoryBPFunctionLibrary_RandInt_MINMAX_uniDis_MT::IMax' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_RandInt_MINMAX_uniDis_MT, ReturnValue) == 0x000008, "Member 'VictoryBPFunctionLibrary_RandInt_MINMAX_uniDis_MT::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.RandInt_uniDis
// 0x0004 (0x0004 - 0x0000)
struct VictoryBPFunctionLibrary_RandInt_uniDis final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_RandInt_uniDis) == 0x000004, "Wrong alignment on VictoryBPFunctionLibrary_RandInt_uniDis");
static_assert(sizeof(VictoryBPFunctionLibrary_RandInt_uniDis) == 0x000004, "Wrong size on VictoryBPFunctionLibrary_RandInt_uniDis");
static_assert(offsetof(VictoryBPFunctionLibrary_RandInt_uniDis, ReturnValue) == 0x000000, "Member 'VictoryBPFunctionLibrary_RandInt_uniDis::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.RandInt_uniDis_MT
// 0x0004 (0x0004 - 0x0000)
struct VictoryBPFunctionLibrary_RandInt_uniDis_MT final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_RandInt_uniDis_MT) == 0x000004, "Wrong alignment on VictoryBPFunctionLibrary_RandInt_uniDis_MT");
static_assert(sizeof(VictoryBPFunctionLibrary_RandInt_uniDis_MT) == 0x000004, "Wrong size on VictoryBPFunctionLibrary_RandInt_uniDis_MT");
static_assert(offsetof(VictoryBPFunctionLibrary_RandInt_uniDis_MT, ReturnValue) == 0x000000, "Member 'VictoryBPFunctionLibrary_RandInt_uniDis_MT::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.RealWorldTime__GetCurrentOSTime
// 0x0030 (0x0030 - 0x0000)
struct VictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime final
{
public:
	int32                                         MilliSeconds;                                      // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Seconds;                                           // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minutes;                                           // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Hours12;                                           // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Hours24;                                           // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Day;                                               // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Month;                                             // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Year;                                              // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime");
static_assert(sizeof(VictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime) == 0x000030, "Wrong size on VictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime");
static_assert(offsetof(VictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime, MilliSeconds) == 0x000000, "Member 'VictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime::MilliSeconds' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime, Seconds) == 0x000004, "Member 'VictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime::Seconds' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime, Minutes) == 0x000008, "Member 'VictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime::Minutes' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime, Hours12) == 0x00000C, "Member 'VictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime::Hours12' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime, Hours24) == 0x000010, "Member 'VictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime::Hours24' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime, Day) == 0x000014, "Member 'VictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime::Day' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime, Month) == 0x000018, "Member 'VictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime::Month' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime, Year) == 0x00001C, "Member 'VictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime::Year' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime, ReturnValue) == 0x000020, "Member 'VictoryBPFunctionLibrary_RealWorldTime__GetCurrentOSTime::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.RealWorldTime__GetDifferenceBetweenTimes
// 0x0030 (0x0030 - 0x0000)
struct VictoryBPFunctionLibrary_RealWorldTime__GetDifferenceBetweenTimes final
{
public:
	class FString                                 PreviousTime1;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PreviousTime2;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MilliSeconds;                                      // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Seconds;                                           // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Minutes;                                           // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Hours;                                             // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_RealWorldTime__GetDifferenceBetweenTimes) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_RealWorldTime__GetDifferenceBetweenTimes");
static_assert(sizeof(VictoryBPFunctionLibrary_RealWorldTime__GetDifferenceBetweenTimes) == 0x000030, "Wrong size on VictoryBPFunctionLibrary_RealWorldTime__GetDifferenceBetweenTimes");
static_assert(offsetof(VictoryBPFunctionLibrary_RealWorldTime__GetDifferenceBetweenTimes, PreviousTime1) == 0x000000, "Member 'VictoryBPFunctionLibrary_RealWorldTime__GetDifferenceBetweenTimes::PreviousTime1' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_RealWorldTime__GetDifferenceBetweenTimes, PreviousTime2) == 0x000010, "Member 'VictoryBPFunctionLibrary_RealWorldTime__GetDifferenceBetweenTimes::PreviousTime2' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_RealWorldTime__GetDifferenceBetweenTimes, MilliSeconds) == 0x000020, "Member 'VictoryBPFunctionLibrary_RealWorldTime__GetDifferenceBetweenTimes::MilliSeconds' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_RealWorldTime__GetDifferenceBetweenTimes, Seconds) == 0x000024, "Member 'VictoryBPFunctionLibrary_RealWorldTime__GetDifferenceBetweenTimes::Seconds' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_RealWorldTime__GetDifferenceBetweenTimes, Minutes) == 0x000028, "Member 'VictoryBPFunctionLibrary_RealWorldTime__GetDifferenceBetweenTimes::Minutes' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_RealWorldTime__GetDifferenceBetweenTimes, Hours) == 0x00002C, "Member 'VictoryBPFunctionLibrary_RealWorldTime__GetDifferenceBetweenTimes::Hours' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.RealWorldTime__GetTimePassedSincePreviousTime
// 0x0020 (0x0020 - 0x0000)
struct VictoryBPFunctionLibrary_RealWorldTime__GetTimePassedSincePreviousTime final
{
public:
	class FString                                 PreviousTime;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MilliSeconds;                                      // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Seconds;                                           // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Minutes;                                           // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Hours;                                             // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_RealWorldTime__GetTimePassedSincePreviousTime) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_RealWorldTime__GetTimePassedSincePreviousTime");
static_assert(sizeof(VictoryBPFunctionLibrary_RealWorldTime__GetTimePassedSincePreviousTime) == 0x000020, "Wrong size on VictoryBPFunctionLibrary_RealWorldTime__GetTimePassedSincePreviousTime");
static_assert(offsetof(VictoryBPFunctionLibrary_RealWorldTime__GetTimePassedSincePreviousTime, PreviousTime) == 0x000000, "Member 'VictoryBPFunctionLibrary_RealWorldTime__GetTimePassedSincePreviousTime::PreviousTime' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_RealWorldTime__GetTimePassedSincePreviousTime, MilliSeconds) == 0x000010, "Member 'VictoryBPFunctionLibrary_RealWorldTime__GetTimePassedSincePreviousTime::MilliSeconds' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_RealWorldTime__GetTimePassedSincePreviousTime, Seconds) == 0x000014, "Member 'VictoryBPFunctionLibrary_RealWorldTime__GetTimePassedSincePreviousTime::Seconds' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_RealWorldTime__GetTimePassedSincePreviousTime, Minutes) == 0x000018, "Member 'VictoryBPFunctionLibrary_RealWorldTime__GetTimePassedSincePreviousTime::Minutes' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_RealWorldTime__GetTimePassedSincePreviousTime, Hours) == 0x00001C, "Member 'VictoryBPFunctionLibrary_RealWorldTime__GetTimePassedSincePreviousTime::Hours' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.RemoveAllWidgetsOfClass
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_RemoveAllWidgetsOfClass final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                WidgetClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_RemoveAllWidgetsOfClass) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_RemoveAllWidgetsOfClass");
static_assert(sizeof(VictoryBPFunctionLibrary_RemoveAllWidgetsOfClass) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_RemoveAllWidgetsOfClass");
static_assert(offsetof(VictoryBPFunctionLibrary_RemoveAllWidgetsOfClass, WorldContextObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_RemoveAllWidgetsOfClass::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_RemoveAllWidgetsOfClass, WidgetClass) == 0x000008, "Member 'VictoryBPFunctionLibrary_RemoveAllWidgetsOfClass::WidgetClass' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.RemoveFromStreamingLevels
// 0x0038 (0x0038 - 0x0000)
struct VictoryBPFunctionLibrary_RemoveFromStreamingLevels final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLevelStreamInstanceInfo               LevelInstanceInfo;                                 // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_RemoveFromStreamingLevels) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_RemoveFromStreamingLevels");
static_assert(sizeof(VictoryBPFunctionLibrary_RemoveFromStreamingLevels) == 0x000038, "Wrong size on VictoryBPFunctionLibrary_RemoveFromStreamingLevels");
static_assert(offsetof(VictoryBPFunctionLibrary_RemoveFromStreamingLevels, WorldContextObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_RemoveFromStreamingLevels::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_RemoveFromStreamingLevels, LevelInstanceInfo) == 0x000008, "Member 'VictoryBPFunctionLibrary_RemoveFromStreamingLevels::LevelInstanceInfo' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.SaveGameObject_GetAllSaveSlotFileNames
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_SaveGameObject_GetAllSaveSlotFileNames final
{
public:
	TArray<class FString>                         FileNames;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_SaveGameObject_GetAllSaveSlotFileNames) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_SaveGameObject_GetAllSaveSlotFileNames");
static_assert(sizeof(VictoryBPFunctionLibrary_SaveGameObject_GetAllSaveSlotFileNames) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_SaveGameObject_GetAllSaveSlotFileNames");
static_assert(offsetof(VictoryBPFunctionLibrary_SaveGameObject_GetAllSaveSlotFileNames, FileNames) == 0x000000, "Member 'VictoryBPFunctionLibrary_SaveGameObject_GetAllSaveSlotFileNames::FileNames' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.SaveGameObject_GetMostRecentSaveSlotFileName
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_SaveGameObject_GetMostRecentSaveSlotFileName final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFound;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC5[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_SaveGameObject_GetMostRecentSaveSlotFileName) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_SaveGameObject_GetMostRecentSaveSlotFileName");
static_assert(sizeof(VictoryBPFunctionLibrary_SaveGameObject_GetMostRecentSaveSlotFileName) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_SaveGameObject_GetMostRecentSaveSlotFileName");
static_assert(offsetof(VictoryBPFunctionLibrary_SaveGameObject_GetMostRecentSaveSlotFileName, Filename) == 0x000000, "Member 'VictoryBPFunctionLibrary_SaveGameObject_GetMostRecentSaveSlotFileName::Filename' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_SaveGameObject_GetMostRecentSaveSlotFileName, bFound) == 0x000010, "Member 'VictoryBPFunctionLibrary_SaveGameObject_GetMostRecentSaveSlotFileName::bFound' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.ScreenShots_Rename_Move_Most_Recent
// 0x0038 (0x0038 - 0x0000)
struct VictoryBPFunctionLibrary_ScreenShots_Rename_Move_Most_Recent final
{
public:
	class FString                                 OriginalFileName;                                  // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewName;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewAbsoluteFolderPath;                             // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HighResolution;                                    // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC6[0x6];                                      // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_ScreenShots_Rename_Move_Most_Recent) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_ScreenShots_Rename_Move_Most_Recent");
static_assert(sizeof(VictoryBPFunctionLibrary_ScreenShots_Rename_Move_Most_Recent) == 0x000038, "Wrong size on VictoryBPFunctionLibrary_ScreenShots_Rename_Move_Most_Recent");
static_assert(offsetof(VictoryBPFunctionLibrary_ScreenShots_Rename_Move_Most_Recent, OriginalFileName) == 0x000000, "Member 'VictoryBPFunctionLibrary_ScreenShots_Rename_Move_Most_Recent::OriginalFileName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_ScreenShots_Rename_Move_Most_Recent, NewName) == 0x000010, "Member 'VictoryBPFunctionLibrary_ScreenShots_Rename_Move_Most_Recent::NewName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_ScreenShots_Rename_Move_Most_Recent, NewAbsoluteFolderPath) == 0x000020, "Member 'VictoryBPFunctionLibrary_ScreenShots_Rename_Move_Most_Recent::NewAbsoluteFolderPath' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_ScreenShots_Rename_Move_Most_Recent, HighResolution) == 0x000030, "Member 'VictoryBPFunctionLibrary_ScreenShots_Rename_Move_Most_Recent::HighResolution' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_ScreenShots_Rename_Move_Most_Recent, ReturnValue) == 0x000031, "Member 'VictoryBPFunctionLibrary_ScreenShots_Rename_Move_Most_Recent::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.seedRand
// 0x0004 (0x0004 - 0x0000)
struct VictoryBPFunctionLibrary_SeedRand final
{
public:
	int32                                         Seed;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_SeedRand) == 0x000004, "Wrong alignment on VictoryBPFunctionLibrary_SeedRand");
static_assert(sizeof(VictoryBPFunctionLibrary_SeedRand) == 0x000004, "Wrong size on VictoryBPFunctionLibrary_SeedRand");
static_assert(offsetof(VictoryBPFunctionLibrary_SeedRand, Seed) == 0x000000, "Member 'VictoryBPFunctionLibrary_SeedRand::Seed' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Selection_SelectionBox
// 0x0030 (0x0030 - 0x0000)
struct VictoryBPFunctionLibrary_Selection_SelectionBox final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         SelectedActors;                                    // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector2D                              AnchorPoint;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              DraggedPoint;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ClassFilter;                                       // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_Selection_SelectionBox) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Selection_SelectionBox");
static_assert(sizeof(VictoryBPFunctionLibrary_Selection_SelectionBox) == 0x000030, "Wrong size on VictoryBPFunctionLibrary_Selection_SelectionBox");
static_assert(offsetof(VictoryBPFunctionLibrary_Selection_SelectionBox, WorldContextObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_Selection_SelectionBox::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Selection_SelectionBox, SelectedActors) == 0x000008, "Member 'VictoryBPFunctionLibrary_Selection_SelectionBox::SelectedActors' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Selection_SelectionBox, AnchorPoint) == 0x000018, "Member 'VictoryBPFunctionLibrary_Selection_SelectionBox::AnchorPoint' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Selection_SelectionBox, DraggedPoint) == 0x000020, "Member 'VictoryBPFunctionLibrary_Selection_SelectionBox::DraggedPoint' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Selection_SelectionBox, ClassFilter) == 0x000028, "Member 'VictoryBPFunctionLibrary_Selection_SelectionBox::ClassFilter' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.ServerTravel
// 0x0020 (0x0020 - 0x0000)
struct VictoryBPFunctionLibrary_ServerTravel final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapName;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipNotifyPlayers;                                // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC7[0x7];                                      // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_ServerTravel) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_ServerTravel");
static_assert(sizeof(VictoryBPFunctionLibrary_ServerTravel) == 0x000020, "Wrong size on VictoryBPFunctionLibrary_ServerTravel");
static_assert(offsetof(VictoryBPFunctionLibrary_ServerTravel, WorldContextObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_ServerTravel::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_ServerTravel, MapName) == 0x000008, "Member 'VictoryBPFunctionLibrary_ServerTravel::MapName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_ServerTravel, bSkipNotifyPlayers) == 0x000018, "Member 'VictoryBPFunctionLibrary_ServerTravel::bSkipNotifyPlayers' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.SetBloomIntensity
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_SetBloomIntensity final
{
public:
	class APostProcessVolume*                     PostProcessVolume;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Intensity;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC8[0x4];                                      // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_SetBloomIntensity) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_SetBloomIntensity");
static_assert(sizeof(VictoryBPFunctionLibrary_SetBloomIntensity) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_SetBloomIntensity");
static_assert(offsetof(VictoryBPFunctionLibrary_SetBloomIntensity, PostProcessVolume) == 0x000000, "Member 'VictoryBPFunctionLibrary_SetBloomIntensity::PostProcessVolume' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_SetBloomIntensity, Intensity) == 0x000008, "Member 'VictoryBPFunctionLibrary_SetBloomIntensity::Intensity' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.SetComponentTickRate
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_SetComponentTickRate final
{
public:
	class UActorComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Seconds;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC9[0x4];                                      // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_SetComponentTickRate) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_SetComponentTickRate");
static_assert(sizeof(VictoryBPFunctionLibrary_SetComponentTickRate) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_SetComponentTickRate");
static_assert(offsetof(VictoryBPFunctionLibrary_SetComponentTickRate, Component) == 0x000000, "Member 'VictoryBPFunctionLibrary_SetComponentTickRate::Component' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_SetComponentTickRate, Seconds) == 0x000008, "Member 'VictoryBPFunctionLibrary_SetComponentTickRate::Seconds' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.SetGenericTeamId
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_SetGenericTeamId final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NewTeamId;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DCA[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_SetGenericTeamId) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_SetGenericTeamId");
static_assert(sizeof(VictoryBPFunctionLibrary_SetGenericTeamId) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_SetGenericTeamId");
static_assert(offsetof(VictoryBPFunctionLibrary_SetGenericTeamId, Target) == 0x000000, "Member 'VictoryBPFunctionLibrary_SetGenericTeamId::Target' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_SetGenericTeamId, NewTeamId) == 0x000008, "Member 'VictoryBPFunctionLibrary_SetGenericTeamId::NewTeamId' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.SpawnActorIntoLevel
// 0x0040 (0x0040 - 0x0000)
struct VictoryBPFunctionLibrary_SpawnActorIntoLevel final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Level;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0024(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          SpawnEvenIfColliding;                              // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DCB[0x7];                                      // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_SpawnActorIntoLevel) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_SpawnActorIntoLevel");
static_assert(sizeof(VictoryBPFunctionLibrary_SpawnActorIntoLevel) == 0x000040, "Wrong size on VictoryBPFunctionLibrary_SpawnActorIntoLevel");
static_assert(offsetof(VictoryBPFunctionLibrary_SpawnActorIntoLevel, WorldContextObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_SpawnActorIntoLevel::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_SpawnActorIntoLevel, ActorClass) == 0x000008, "Member 'VictoryBPFunctionLibrary_SpawnActorIntoLevel::ActorClass' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_SpawnActorIntoLevel, Level) == 0x000010, "Member 'VictoryBPFunctionLibrary_SpawnActorIntoLevel::Level' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_SpawnActorIntoLevel, Location) == 0x000018, "Member 'VictoryBPFunctionLibrary_SpawnActorIntoLevel::Location' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_SpawnActorIntoLevel, Rotation) == 0x000024, "Member 'VictoryBPFunctionLibrary_SpawnActorIntoLevel::Rotation' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_SpawnActorIntoLevel, SpawnEvenIfColliding) == 0x000030, "Member 'VictoryBPFunctionLibrary_SpawnActorIntoLevel::SpawnEvenIfColliding' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_SpawnActorIntoLevel, ReturnValue) == 0x000038, "Member 'VictoryBPFunctionLibrary_SpawnActorIntoLevel::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.String__CombineStrings
// 0x0060 (0x0060 - 0x0000)
struct VictoryBPFunctionLibrary_String__CombineStrings final
{
public:
	class FString                                 StringFirst;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringSecond;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Separator;                                         // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringFirstLabel;                                  // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringSecondLabel;                                 // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_String__CombineStrings) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_String__CombineStrings");
static_assert(sizeof(VictoryBPFunctionLibrary_String__CombineStrings) == 0x000060, "Wrong size on VictoryBPFunctionLibrary_String__CombineStrings");
static_assert(offsetof(VictoryBPFunctionLibrary_String__CombineStrings, StringFirst) == 0x000000, "Member 'VictoryBPFunctionLibrary_String__CombineStrings::StringFirst' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_String__CombineStrings, StringSecond) == 0x000010, "Member 'VictoryBPFunctionLibrary_String__CombineStrings::StringSecond' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_String__CombineStrings, Separator) == 0x000020, "Member 'VictoryBPFunctionLibrary_String__CombineStrings::Separator' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_String__CombineStrings, StringFirstLabel) == 0x000030, "Member 'VictoryBPFunctionLibrary_String__CombineStrings::StringFirstLabel' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_String__CombineStrings, StringSecondLabel) == 0x000040, "Member 'VictoryBPFunctionLibrary_String__CombineStrings::StringSecondLabel' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_String__CombineStrings, ReturnValue) == 0x000050, "Member 'VictoryBPFunctionLibrary_String__CombineStrings::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.String__CombineStrings_Multi
// 0x0030 (0x0030 - 0x0000)
struct VictoryBPFunctionLibrary_String__CombineStrings_Multi final
{
public:
	class FString                                 A;                                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 B;                                                 // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_String__CombineStrings_Multi) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_String__CombineStrings_Multi");
static_assert(sizeof(VictoryBPFunctionLibrary_String__CombineStrings_Multi) == 0x000030, "Wrong size on VictoryBPFunctionLibrary_String__CombineStrings_Multi");
static_assert(offsetof(VictoryBPFunctionLibrary_String__CombineStrings_Multi, A) == 0x000000, "Member 'VictoryBPFunctionLibrary_String__CombineStrings_Multi::A' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_String__CombineStrings_Multi, B) == 0x000010, "Member 'VictoryBPFunctionLibrary_String__CombineStrings_Multi::B' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_String__CombineStrings_Multi, ReturnValue) == 0x000020, "Member 'VictoryBPFunctionLibrary_String__CombineStrings_Multi::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.String__ExplodeString
// 0x0038 (0x0038 - 0x0000)
struct VictoryBPFunctionLibrary_String__ExplodeString final
{
public:
	TArray<class FString>                         OutputStrings;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 InputString;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Separator;                                         // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTrimElements;                                     // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DCC[0x3];                                      // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_String__ExplodeString) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_String__ExplodeString");
static_assert(sizeof(VictoryBPFunctionLibrary_String__ExplodeString) == 0x000038, "Wrong size on VictoryBPFunctionLibrary_String__ExplodeString");
static_assert(offsetof(VictoryBPFunctionLibrary_String__ExplodeString, OutputStrings) == 0x000000, "Member 'VictoryBPFunctionLibrary_String__ExplodeString::OutputStrings' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_String__ExplodeString, InputString) == 0x000010, "Member 'VictoryBPFunctionLibrary_String__ExplodeString::InputString' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_String__ExplodeString, Separator) == 0x000020, "Member 'VictoryBPFunctionLibrary_String__ExplodeString::Separator' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_String__ExplodeString, Limit) == 0x000030, "Member 'VictoryBPFunctionLibrary_String__ExplodeString::Limit' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_String__ExplodeString, bTrimElements) == 0x000034, "Member 'VictoryBPFunctionLibrary_String__ExplodeString::bTrimElements' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.StringConversion__GetFloatAsStringWithPrecision
// 0x0020 (0x0020 - 0x0000)
struct VictoryBPFunctionLibrary_StringConversion__GetFloatAsStringWithPrecision final
{
public:
	float                                         TheFloat;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DCD[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TheString;                                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Precision;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeLeadingZero;                                // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DCE[0x3];                                      // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_StringConversion__GetFloatAsStringWithPrecision) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_StringConversion__GetFloatAsStringWithPrecision");
static_assert(sizeof(VictoryBPFunctionLibrary_StringConversion__GetFloatAsStringWithPrecision) == 0x000020, "Wrong size on VictoryBPFunctionLibrary_StringConversion__GetFloatAsStringWithPrecision");
static_assert(offsetof(VictoryBPFunctionLibrary_StringConversion__GetFloatAsStringWithPrecision, TheFloat) == 0x000000, "Member 'VictoryBPFunctionLibrary_StringConversion__GetFloatAsStringWithPrecision::TheFloat' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_StringConversion__GetFloatAsStringWithPrecision, TheString) == 0x000008, "Member 'VictoryBPFunctionLibrary_StringConversion__GetFloatAsStringWithPrecision::TheString' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_StringConversion__GetFloatAsStringWithPrecision, Precision) == 0x000018, "Member 'VictoryBPFunctionLibrary_StringConversion__GetFloatAsStringWithPrecision::Precision' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_StringConversion__GetFloatAsStringWithPrecision, IncludeLeadingZero) == 0x00001C, "Member 'VictoryBPFunctionLibrary_StringConversion__GetFloatAsStringWithPrecision::IncludeLeadingZero' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.StringIsEmpty
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_StringIsEmpty final
{
public:
	class FString                                 Target;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DCF[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_StringIsEmpty) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_StringIsEmpty");
static_assert(sizeof(VictoryBPFunctionLibrary_StringIsEmpty) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_StringIsEmpty");
static_assert(offsetof(VictoryBPFunctionLibrary_StringIsEmpty, Target) == 0x000000, "Member 'VictoryBPFunctionLibrary_StringIsEmpty::Target' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_StringIsEmpty, ReturnValue) == 0x000010, "Member 'VictoryBPFunctionLibrary_StringIsEmpty::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Text_IsNumeric
// 0x0020 (0x0020 - 0x0000)
struct VictoryBPFunctionLibrary_Text_IsNumeric final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD0[0x7];                                      // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Text_IsNumeric) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Text_IsNumeric");
static_assert(sizeof(VictoryBPFunctionLibrary_Text_IsNumeric) == 0x000020, "Wrong size on VictoryBPFunctionLibrary_Text_IsNumeric");
static_assert(offsetof(VictoryBPFunctionLibrary_Text_IsNumeric, Text) == 0x000000, "Member 'VictoryBPFunctionLibrary_Text_IsNumeric::Text' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Text_IsNumeric, ReturnValue) == 0x000018, "Member 'VictoryBPFunctionLibrary_Text_IsNumeric::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Text_ToFloat
// 0x0020 (0x0020 - 0x0000)
struct VictoryBPFunctionLibrary_Text_ToFloat final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          UseDotForThousands;                                // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD1[0x3];                                      // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_Text_ToFloat) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Text_ToFloat");
static_assert(sizeof(VictoryBPFunctionLibrary_Text_ToFloat) == 0x000020, "Wrong size on VictoryBPFunctionLibrary_Text_ToFloat");
static_assert(offsetof(VictoryBPFunctionLibrary_Text_ToFloat, Text) == 0x000000, "Member 'VictoryBPFunctionLibrary_Text_ToFloat::Text' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Text_ToFloat, UseDotForThousands) == 0x000018, "Member 'VictoryBPFunctionLibrary_Text_ToFloat::UseDotForThousands' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Text_ToFloat, ReturnValue) == 0x00001C, "Member 'VictoryBPFunctionLibrary_Text_ToFloat::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Text_ToInt
// 0x0020 (0x0020 - 0x0000)
struct VictoryBPFunctionLibrary_Text_ToInt final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          UseDotForThousands;                                // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD2[0x3];                                      // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_Text_ToInt) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Text_ToInt");
static_assert(sizeof(VictoryBPFunctionLibrary_Text_ToInt) == 0x000020, "Wrong size on VictoryBPFunctionLibrary_Text_ToInt");
static_assert(offsetof(VictoryBPFunctionLibrary_Text_ToInt, Text) == 0x000000, "Member 'VictoryBPFunctionLibrary_Text_ToInt::Text' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Text_ToInt, UseDotForThousands) == 0x000018, "Member 'VictoryBPFunctionLibrary_Text_ToInt::UseDotForThousands' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Text_ToInt, ReturnValue) == 0x00001C, "Member 'VictoryBPFunctionLibrary_Text_ToInt::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.TraceData__GetTraceDataFromCharacterSocket
// 0x0058 (0x0058 - 0x0000)
struct VictoryBPFunctionLibrary_TraceData__GetTraceDataFromCharacterSocket final
{
public:
	struct FVector                                TraceStart;                                        // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TraceEnd;                                          // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TheCharacter;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               TraceRotation;                                     // 0x0020(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TraceLength;                                       // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Socket;                                            // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DrawTraceData;                                     // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD3[0x3];                                      // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TraceDataColor;                                    // 0x003C(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceDataThickness;                                // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD4[0x7];                                      // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_TraceData__GetTraceDataFromCharacterSocket) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_TraceData__GetTraceDataFromCharacterSocket");
static_assert(sizeof(VictoryBPFunctionLibrary_TraceData__GetTraceDataFromCharacterSocket) == 0x000058, "Wrong size on VictoryBPFunctionLibrary_TraceData__GetTraceDataFromCharacterSocket");
static_assert(offsetof(VictoryBPFunctionLibrary_TraceData__GetTraceDataFromCharacterSocket, TraceStart) == 0x000000, "Member 'VictoryBPFunctionLibrary_TraceData__GetTraceDataFromCharacterSocket::TraceStart' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_TraceData__GetTraceDataFromCharacterSocket, TraceEnd) == 0x00000C, "Member 'VictoryBPFunctionLibrary_TraceData__GetTraceDataFromCharacterSocket::TraceEnd' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_TraceData__GetTraceDataFromCharacterSocket, TheCharacter) == 0x000018, "Member 'VictoryBPFunctionLibrary_TraceData__GetTraceDataFromCharacterSocket::TheCharacter' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_TraceData__GetTraceDataFromCharacterSocket, TraceRotation) == 0x000020, "Member 'VictoryBPFunctionLibrary_TraceData__GetTraceDataFromCharacterSocket::TraceRotation' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_TraceData__GetTraceDataFromCharacterSocket, TraceLength) == 0x00002C, "Member 'VictoryBPFunctionLibrary_TraceData__GetTraceDataFromCharacterSocket::TraceLength' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_TraceData__GetTraceDataFromCharacterSocket, Socket) == 0x000030, "Member 'VictoryBPFunctionLibrary_TraceData__GetTraceDataFromCharacterSocket::Socket' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_TraceData__GetTraceDataFromCharacterSocket, DrawTraceData) == 0x000038, "Member 'VictoryBPFunctionLibrary_TraceData__GetTraceDataFromCharacterSocket::DrawTraceData' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_TraceData__GetTraceDataFromCharacterSocket, TraceDataColor) == 0x00003C, "Member 'VictoryBPFunctionLibrary_TraceData__GetTraceDataFromCharacterSocket::TraceDataColor' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_TraceData__GetTraceDataFromCharacterSocket, TraceDataThickness) == 0x00004C, "Member 'VictoryBPFunctionLibrary_TraceData__GetTraceDataFromCharacterSocket::TraceDataThickness' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_TraceData__GetTraceDataFromCharacterSocket, ReturnValue) == 0x000050, "Member 'VictoryBPFunctionLibrary_TraceData__GetTraceDataFromCharacterSocket::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.TraceData__GetTraceDataFromSkeletalMeshSocket
// 0x0058 (0x0058 - 0x0000)
struct VictoryBPFunctionLibrary_TraceData__GetTraceDataFromSkeletalMeshSocket final
{
public:
	struct FVector                                TraceStart;                                        // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TraceEnd;                                          // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 Mesh;                                              // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               TraceRotation;                                     // 0x0020(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TraceLength;                                       // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Socket;                                            // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DrawTraceData;                                     // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD5[0x3];                                      // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TraceDataColor;                                    // 0x003C(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceDataThickness;                                // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD6[0x7];                                      // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_TraceData__GetTraceDataFromSkeletalMeshSocket) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_TraceData__GetTraceDataFromSkeletalMeshSocket");
static_assert(sizeof(VictoryBPFunctionLibrary_TraceData__GetTraceDataFromSkeletalMeshSocket) == 0x000058, "Wrong size on VictoryBPFunctionLibrary_TraceData__GetTraceDataFromSkeletalMeshSocket");
static_assert(offsetof(VictoryBPFunctionLibrary_TraceData__GetTraceDataFromSkeletalMeshSocket, TraceStart) == 0x000000, "Member 'VictoryBPFunctionLibrary_TraceData__GetTraceDataFromSkeletalMeshSocket::TraceStart' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_TraceData__GetTraceDataFromSkeletalMeshSocket, TraceEnd) == 0x00000C, "Member 'VictoryBPFunctionLibrary_TraceData__GetTraceDataFromSkeletalMeshSocket::TraceEnd' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_TraceData__GetTraceDataFromSkeletalMeshSocket, Mesh) == 0x000018, "Member 'VictoryBPFunctionLibrary_TraceData__GetTraceDataFromSkeletalMeshSocket::Mesh' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_TraceData__GetTraceDataFromSkeletalMeshSocket, TraceRotation) == 0x000020, "Member 'VictoryBPFunctionLibrary_TraceData__GetTraceDataFromSkeletalMeshSocket::TraceRotation' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_TraceData__GetTraceDataFromSkeletalMeshSocket, TraceLength) == 0x00002C, "Member 'VictoryBPFunctionLibrary_TraceData__GetTraceDataFromSkeletalMeshSocket::TraceLength' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_TraceData__GetTraceDataFromSkeletalMeshSocket, Socket) == 0x000030, "Member 'VictoryBPFunctionLibrary_TraceData__GetTraceDataFromSkeletalMeshSocket::Socket' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_TraceData__GetTraceDataFromSkeletalMeshSocket, DrawTraceData) == 0x000038, "Member 'VictoryBPFunctionLibrary_TraceData__GetTraceDataFromSkeletalMeshSocket::DrawTraceData' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_TraceData__GetTraceDataFromSkeletalMeshSocket, TraceDataColor) == 0x00003C, "Member 'VictoryBPFunctionLibrary_TraceData__GetTraceDataFromSkeletalMeshSocket::TraceDataColor' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_TraceData__GetTraceDataFromSkeletalMeshSocket, TraceDataThickness) == 0x00004C, "Member 'VictoryBPFunctionLibrary_TraceData__GetTraceDataFromSkeletalMeshSocket::TraceDataThickness' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_TraceData__GetTraceDataFromSkeletalMeshSocket, ReturnValue) == 0x000050, "Member 'VictoryBPFunctionLibrary_TraceData__GetTraceDataFromSkeletalMeshSocket::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Traces__CharacterMeshTrace___ClosestBone
// 0x0058 (0x0058 - 0x0000)
struct VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestBone final
{
public:
	class AActor*                                 TraceOwner;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TraceStart;                                        // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TraceEnd;                                          // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutImpactPoint;                                    // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutImpactNormal;                                   // 0x002C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ClosestBoneName;                                   // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ClosestBoneLocation;                               // 0x0040(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x004C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD7[0x3];                                      // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestBone) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestBone");
static_assert(sizeof(VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestBone) == 0x000058, "Wrong size on VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestBone");
static_assert(offsetof(VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestBone, TraceOwner) == 0x000000, "Member 'VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestBone::TraceOwner' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestBone, TraceStart) == 0x000008, "Member 'VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestBone::TraceStart' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestBone, TraceEnd) == 0x000014, "Member 'VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestBone::TraceEnd' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestBone, OutImpactPoint) == 0x000020, "Member 'VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestBone::OutImpactPoint' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestBone, OutImpactNormal) == 0x00002C, "Member 'VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestBone::OutImpactNormal' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestBone, ClosestBoneName) == 0x000038, "Member 'VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestBone::ClosestBoneName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestBone, ClosestBoneLocation) == 0x000040, "Member 'VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestBone::ClosestBoneLocation' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestBone, IsValid) == 0x00004C, "Member 'VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestBone::IsValid' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestBone, ReturnValue) == 0x000050, "Member 'VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestBone::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Traces__CharacterMeshTrace___ClosestSocket
// 0x0060 (0x0060 - 0x0000)
struct VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestSocket final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           TraceOwner;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TraceStart;                                        // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TraceEnd;                                          // 0x001C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutImpactPoint;                                    // 0x0028(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutImpactNormal;                                   // 0x0034(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ClosestSocketName;                                 // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SocketLocation;                                    // 0x0048(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0054(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD8[0x3];                                      // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestSocket) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestSocket");
static_assert(sizeof(VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestSocket) == 0x000060, "Wrong size on VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestSocket");
static_assert(offsetof(VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestSocket, WorldContextObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestSocket::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestSocket, TraceOwner) == 0x000008, "Member 'VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestSocket::TraceOwner' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestSocket, TraceStart) == 0x000010, "Member 'VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestSocket::TraceStart' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestSocket, TraceEnd) == 0x00001C, "Member 'VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestSocket::TraceEnd' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestSocket, OutImpactPoint) == 0x000028, "Member 'VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestSocket::OutImpactPoint' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestSocket, OutImpactNormal) == 0x000034, "Member 'VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestSocket::OutImpactNormal' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestSocket, ClosestSocketName) == 0x000040, "Member 'VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestSocket::ClosestSocketName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestSocket, SocketLocation) == 0x000048, "Member 'VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestSocket::SocketLocation' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestSocket, IsValid) == 0x000054, "Member 'VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestSocket::IsValid' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestSocket, ReturnValue) == 0x000058, "Member 'VictoryBPFunctionLibrary_Traces__CharacterMeshTrace___ClosestSocket::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.UnloadStreamingLevel
// 0x0008 (0x0008 - 0x0000)
struct VictoryBPFunctionLibrary_UnloadStreamingLevel final
{
public:
	class ULevelStreamingDynamic*                 LevelInstance;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_UnloadStreamingLevel) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_UnloadStreamingLevel");
static_assert(sizeof(VictoryBPFunctionLibrary_UnloadStreamingLevel) == 0x000008, "Wrong size on VictoryBPFunctionLibrary_UnloadStreamingLevel");
static_assert(offsetof(VictoryBPFunctionLibrary_UnloadStreamingLevel, LevelInstance) == 0x000000, "Member 'VictoryBPFunctionLibrary_UnloadStreamingLevel::LevelInstance' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.UTCToLocal
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_UTCToLocal final
{
public:
	struct FDateTime                              UTCTime;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              LocalTime;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_UTCToLocal) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_UTCToLocal");
static_assert(sizeof(VictoryBPFunctionLibrary_UTCToLocal) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_UTCToLocal");
static_assert(offsetof(VictoryBPFunctionLibrary_UTCToLocal, UTCTime) == 0x000000, "Member 'VictoryBPFunctionLibrary_UTCToLocal::UTCTime' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_UTCToLocal, LocalTime) == 0x000008, "Member 'VictoryBPFunctionLibrary_UTCToLocal::LocalTime' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Vector2DInterpTo
// 0x0020 (0x0020 - 0x0000)
struct VictoryBPFunctionLibrary_Vector2DInterpTo final
{
public:
	struct FVector2D                              Current;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpSpeed;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_Vector2DInterpTo) == 0x000004, "Wrong alignment on VictoryBPFunctionLibrary_Vector2DInterpTo");
static_assert(sizeof(VictoryBPFunctionLibrary_Vector2DInterpTo) == 0x000020, "Wrong size on VictoryBPFunctionLibrary_Vector2DInterpTo");
static_assert(offsetof(VictoryBPFunctionLibrary_Vector2DInterpTo, Current) == 0x000000, "Member 'VictoryBPFunctionLibrary_Vector2DInterpTo::Current' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Vector2DInterpTo, Target) == 0x000008, "Member 'VictoryBPFunctionLibrary_Vector2DInterpTo::Target' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Vector2DInterpTo, DeltaTime) == 0x000010, "Member 'VictoryBPFunctionLibrary_Vector2DInterpTo::DeltaTime' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Vector2DInterpTo, InterpSpeed) == 0x000014, "Member 'VictoryBPFunctionLibrary_Vector2DInterpTo::InterpSpeed' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Vector2DInterpTo, ReturnValue) == 0x000018, "Member 'VictoryBPFunctionLibrary_Vector2DInterpTo::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Vector2DInterpTo_Constant
// 0x0020 (0x0020 - 0x0000)
struct VictoryBPFunctionLibrary_Vector2DInterpTo_Constant final
{
public:
	struct FVector2D                              Current;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpSpeed;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_Vector2DInterpTo_Constant) == 0x000004, "Wrong alignment on VictoryBPFunctionLibrary_Vector2DInterpTo_Constant");
static_assert(sizeof(VictoryBPFunctionLibrary_Vector2DInterpTo_Constant) == 0x000020, "Wrong size on VictoryBPFunctionLibrary_Vector2DInterpTo_Constant");
static_assert(offsetof(VictoryBPFunctionLibrary_Vector2DInterpTo_Constant, Current) == 0x000000, "Member 'VictoryBPFunctionLibrary_Vector2DInterpTo_Constant::Current' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Vector2DInterpTo_Constant, Target) == 0x000008, "Member 'VictoryBPFunctionLibrary_Vector2DInterpTo_Constant::Target' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Vector2DInterpTo_Constant, DeltaTime) == 0x000010, "Member 'VictoryBPFunctionLibrary_Vector2DInterpTo_Constant::DeltaTime' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Vector2DInterpTo_Constant, InterpSpeed) == 0x000014, "Member 'VictoryBPFunctionLibrary_Vector2DInterpTo_Constant::InterpSpeed' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Vector2DInterpTo_Constant, ReturnValue) == 0x000018, "Member 'VictoryBPFunctionLibrary_Vector2DInterpTo_Constant::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VerticalFOV
// 0x000C (0x000C - 0x0000)
struct VictoryBPFunctionLibrary_VerticalFOV final
{
public:
	float                                         HorizontalFOV;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AspectRatio;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VerticalFOV) == 0x000004, "Wrong alignment on VictoryBPFunctionLibrary_VerticalFOV");
static_assert(sizeof(VictoryBPFunctionLibrary_VerticalFOV) == 0x00000C, "Wrong size on VictoryBPFunctionLibrary_VerticalFOV");
static_assert(offsetof(VictoryBPFunctionLibrary_VerticalFOV, HorizontalFOV) == 0x000000, "Member 'VictoryBPFunctionLibrary_VerticalFOV::HorizontalFOV' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VerticalFOV, AspectRatio) == 0x000004, "Member 'VictoryBPFunctionLibrary_VerticalFOV::AspectRatio' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VerticalFOV, ReturnValue) == 0x000008, "Member 'VictoryBPFunctionLibrary_VerticalFOV::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Victory_AI_MoveToWithFilter
// 0x0028 (0x0028 - 0x0000)
struct VictoryBPFunctionLibrary_Victory_AI_MoveToWithFilter final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Dest;                                              // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD9[0x4];                                      // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UNavigationQueryFilter>     FilterClass;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AcceptanceRadius;                                  // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bProjectDestinationToNavigation;                   // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopOnOverlap;                                    // 0x0025(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanStrafe;                                        // 0x0026(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPathFollowingRequestResult                   ReturnValue;                                       // 0x0027(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_Victory_AI_MoveToWithFilter) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Victory_AI_MoveToWithFilter");
static_assert(sizeof(VictoryBPFunctionLibrary_Victory_AI_MoveToWithFilter) == 0x000028, "Wrong size on VictoryBPFunctionLibrary_Victory_AI_MoveToWithFilter");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_AI_MoveToWithFilter, Pawn) == 0x000000, "Member 'VictoryBPFunctionLibrary_Victory_AI_MoveToWithFilter::Pawn' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_AI_MoveToWithFilter, Dest) == 0x000008, "Member 'VictoryBPFunctionLibrary_Victory_AI_MoveToWithFilter::Dest' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_AI_MoveToWithFilter, FilterClass) == 0x000018, "Member 'VictoryBPFunctionLibrary_Victory_AI_MoveToWithFilter::FilterClass' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_AI_MoveToWithFilter, AcceptanceRadius) == 0x000020, "Member 'VictoryBPFunctionLibrary_Victory_AI_MoveToWithFilter::AcceptanceRadius' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_AI_MoveToWithFilter, bProjectDestinationToNavigation) == 0x000024, "Member 'VictoryBPFunctionLibrary_Victory_AI_MoveToWithFilter::bProjectDestinationToNavigation' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_AI_MoveToWithFilter, bStopOnOverlap) == 0x000025, "Member 'VictoryBPFunctionLibrary_Victory_AI_MoveToWithFilter::bStopOnOverlap' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_AI_MoveToWithFilter, bCanStrafe) == 0x000026, "Member 'VictoryBPFunctionLibrary_Victory_AI_MoveToWithFilter::bCanStrafe' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_AI_MoveToWithFilter, ReturnValue) == 0x000027, "Member 'VictoryBPFunctionLibrary_Victory_AI_MoveToWithFilter::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Victory_Get_Pixel
// 0x0030 (0x0030 - 0x0000)
struct VictoryBPFunctionLibrary_Victory_Get_Pixel final
{
public:
	TArray<struct FLinearColor>                   Pixels;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ImageHeight;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         X;                                                 // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FoundColor;                                        // 0x001C(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DDA[0x3];                                      // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Victory_Get_Pixel) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Victory_Get_Pixel");
static_assert(sizeof(VictoryBPFunctionLibrary_Victory_Get_Pixel) == 0x000030, "Wrong size on VictoryBPFunctionLibrary_Victory_Get_Pixel");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_Get_Pixel, Pixels) == 0x000000, "Member 'VictoryBPFunctionLibrary_Victory_Get_Pixel::Pixels' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_Get_Pixel, ImageHeight) == 0x000010, "Member 'VictoryBPFunctionLibrary_Victory_Get_Pixel::ImageHeight' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_Get_Pixel, X) == 0x000014, "Member 'VictoryBPFunctionLibrary_Victory_Get_Pixel::X' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_Get_Pixel, Y) == 0x000018, "Member 'VictoryBPFunctionLibrary_Victory_Get_Pixel::Y' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_Get_Pixel, FoundColor) == 0x00001C, "Member 'VictoryBPFunctionLibrary_Victory_Get_Pixel::FoundColor' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_Get_Pixel, ReturnValue) == 0x00002C, "Member 'VictoryBPFunctionLibrary_Victory_Get_Pixel::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Victory_GetGPUBrand
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_Victory_GetGPUBrand final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_Victory_GetGPUBrand) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Victory_GetGPUBrand");
static_assert(sizeof(VictoryBPFunctionLibrary_Victory_GetGPUBrand) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_Victory_GetGPUBrand");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_GetGPUBrand, ReturnValue) == 0x000000, "Member 'VictoryBPFunctionLibrary_Victory_GetGPUBrand::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Victory_GetGPUInfo
// 0x0040 (0x0040 - 0x0000)
struct VictoryBPFunctionLibrary_Victory_GetGPUInfo final
{
public:
	class FString                                 DeviceDescription;                                 // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Provider;                                          // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DriverVersion;                                     // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DriverDate;                                        // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_Victory_GetGPUInfo) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Victory_GetGPUInfo");
static_assert(sizeof(VictoryBPFunctionLibrary_Victory_GetGPUInfo) == 0x000040, "Wrong size on VictoryBPFunctionLibrary_Victory_GetGPUInfo");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_GetGPUInfo, DeviceDescription) == 0x000000, "Member 'VictoryBPFunctionLibrary_Victory_GetGPUInfo::DeviceDescription' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_GetGPUInfo, Provider) == 0x000010, "Member 'VictoryBPFunctionLibrary_Victory_GetGPUInfo::Provider' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_GetGPUInfo, DriverVersion) == 0x000020, "Member 'VictoryBPFunctionLibrary_Victory_GetGPUInfo::DriverVersion' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_GetGPUInfo, DriverDate) == 0x000030, "Member 'VictoryBPFunctionLibrary_Victory_GetGPUInfo::DriverDate' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Victory_GetGRHIAdapterName
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_Victory_GetGRHIAdapterName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_Victory_GetGRHIAdapterName) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Victory_GetGRHIAdapterName");
static_assert(sizeof(VictoryBPFunctionLibrary_Victory_GetGRHIAdapterName) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_Victory_GetGRHIAdapterName");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_GetGRHIAdapterName, ReturnValue) == 0x000000, "Member 'VictoryBPFunctionLibrary_Victory_GetGRHIAdapterName::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Victory_GetPixelFromT2D
// 0x0028 (0x0028 - 0x0000)
struct VictoryBPFunctionLibrary_Victory_GetPixelFromT2D final
{
public:
	class UTexture2D*                             T2D;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         X;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           PixelColor;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DDB[0x7];                                      // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Victory_GetPixelFromT2D) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Victory_GetPixelFromT2D");
static_assert(sizeof(VictoryBPFunctionLibrary_Victory_GetPixelFromT2D) == 0x000028, "Wrong size on VictoryBPFunctionLibrary_Victory_GetPixelFromT2D");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_GetPixelFromT2D, T2D) == 0x000000, "Member 'VictoryBPFunctionLibrary_Victory_GetPixelFromT2D::T2D' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_GetPixelFromT2D, X) == 0x000008, "Member 'VictoryBPFunctionLibrary_Victory_GetPixelFromT2D::X' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_GetPixelFromT2D, Y) == 0x00000C, "Member 'VictoryBPFunctionLibrary_Victory_GetPixelFromT2D::Y' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_GetPixelFromT2D, PixelColor) == 0x000010, "Member 'VictoryBPFunctionLibrary_Victory_GetPixelFromT2D::PixelColor' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_GetPixelFromT2D, ReturnValue) == 0x000020, "Member 'VictoryBPFunctionLibrary_Victory_GetPixelFromT2D::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Victory_GetPixelsArrayFromT2D
// 0x0028 (0x0028 - 0x0000)
struct VictoryBPFunctionLibrary_Victory_GetPixelsArrayFromT2D final
{
public:
	class UTexture2D*                             T2D;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TextureWidth;                                      // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TextureHeight;                                     // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                   PixelArray;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DDC[0x7];                                      // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Victory_GetPixelsArrayFromT2D) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Victory_GetPixelsArrayFromT2D");
static_assert(sizeof(VictoryBPFunctionLibrary_Victory_GetPixelsArrayFromT2D) == 0x000028, "Wrong size on VictoryBPFunctionLibrary_Victory_GetPixelsArrayFromT2D");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_GetPixelsArrayFromT2D, T2D) == 0x000000, "Member 'VictoryBPFunctionLibrary_Victory_GetPixelsArrayFromT2D::T2D' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_GetPixelsArrayFromT2D, TextureWidth) == 0x000008, "Member 'VictoryBPFunctionLibrary_Victory_GetPixelsArrayFromT2D::TextureWidth' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_GetPixelsArrayFromT2D, TextureHeight) == 0x00000C, "Member 'VictoryBPFunctionLibrary_Victory_GetPixelsArrayFromT2D::TextureHeight' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_GetPixelsArrayFromT2D, PixelArray) == 0x000010, "Member 'VictoryBPFunctionLibrary_Victory_GetPixelsArrayFromT2D::PixelArray' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_GetPixelsArrayFromT2D, ReturnValue) == 0x000020, "Member 'VictoryBPFunctionLibrary_Victory_GetPixelsArrayFromT2D::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Victory_GetStringFromOSClipboard
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_Victory_GetStringFromOSClipboard final
{
public:
	class FString                                 FromClipboard;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_Victory_GetStringFromOSClipboard) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Victory_GetStringFromOSClipboard");
static_assert(sizeof(VictoryBPFunctionLibrary_Victory_GetStringFromOSClipboard) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_Victory_GetStringFromOSClipboard");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_GetStringFromOSClipboard, FromClipboard) == 0x000000, "Member 'VictoryBPFunctionLibrary_Victory_GetStringFromOSClipboard::FromClipboard' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Victory_LoadTexture2D_FromFile
// 0x0028 (0x0028 - 0x0000)
struct VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile final
{
public:
	class FString                                 FullFilePath;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJoyImageFormats                              ImageFormat;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DDD[0x2];                                      // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Width;                                             // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DDE[0x4];                                      // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile");
static_assert(sizeof(VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile) == 0x000028, "Wrong size on VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile, FullFilePath) == 0x000000, "Member 'VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile::FullFilePath' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile, ImageFormat) == 0x000010, "Member 'VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile::ImageFormat' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile, IsValid) == 0x000011, "Member 'VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile::IsValid' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile, Width) == 0x000014, "Member 'VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile::Width' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile, Height) == 0x000018, "Member 'VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile::Height' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile, ReturnValue) == 0x000020, "Member 'VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Victory_LoadTexture2D_FromFile_Pixels
// 0x0038 (0x0038 - 0x0000)
struct VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile_Pixels final
{
public:
	class FString                                 FullFilePath;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJoyImageFormats                              ImageFormat;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DDF[0x2];                                      // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Width;                                             // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DE0[0x4];                                      // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLinearColor>                   OutPixels;                                         // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile_Pixels) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile_Pixels");
static_assert(sizeof(VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile_Pixels) == 0x000038, "Wrong size on VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile_Pixels");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile_Pixels, FullFilePath) == 0x000000, "Member 'VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile_Pixels::FullFilePath' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile_Pixels, ImageFormat) == 0x000010, "Member 'VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile_Pixels::ImageFormat' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile_Pixels, IsValid) == 0x000011, "Member 'VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile_Pixels::IsValid' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile_Pixels, Width) == 0x000014, "Member 'VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile_Pixels::Width' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile_Pixels, Height) == 0x000018, "Member 'VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile_Pixels::Height' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile_Pixels, OutPixels) == 0x000020, "Member 'VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile_Pixels::OutPixels' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile_Pixels, ReturnValue) == 0x000030, "Member 'VictoryBPFunctionLibrary_Victory_LoadTexture2D_FromFile_Pixels::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Victory_SavePixels
// 0x0048 (0x0048 - 0x0000)
struct VictoryBPFunctionLibrary_Victory_SavePixels final
{
public:
	class FString                                 FullFilePath;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                   ImagePixels;                                       // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          SaveAsBMP;                                         // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SRGB;                                              // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DE1[0x6];                                      // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorString;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DE2[0x7];                                      // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Victory_SavePixels) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Victory_SavePixels");
static_assert(sizeof(VictoryBPFunctionLibrary_Victory_SavePixels) == 0x000048, "Wrong size on VictoryBPFunctionLibrary_Victory_SavePixels");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_SavePixels, FullFilePath) == 0x000000, "Member 'VictoryBPFunctionLibrary_Victory_SavePixels::FullFilePath' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_SavePixels, Width) == 0x000010, "Member 'VictoryBPFunctionLibrary_Victory_SavePixels::Width' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_SavePixels, Height) == 0x000014, "Member 'VictoryBPFunctionLibrary_Victory_SavePixels::Height' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_SavePixels, ImagePixels) == 0x000018, "Member 'VictoryBPFunctionLibrary_Victory_SavePixels::ImagePixels' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_SavePixels, SaveAsBMP) == 0x000028, "Member 'VictoryBPFunctionLibrary_Victory_SavePixels::SaveAsBMP' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_SavePixels, SRGB) == 0x000029, "Member 'VictoryBPFunctionLibrary_Victory_SavePixels::SRGB' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_SavePixels, ErrorString) == 0x000030, "Member 'VictoryBPFunctionLibrary_Victory_SavePixels::ErrorString' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_SavePixels, ReturnValue) == 0x000040, "Member 'VictoryBPFunctionLibrary_Victory_SavePixels::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Victory_SaveStringToOSClipboard
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_Victory_SaveStringToOSClipboard final
{
public:
	class FString                                 ToClipboard;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_Victory_SaveStringToOSClipboard) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Victory_SaveStringToOSClipboard");
static_assert(sizeof(VictoryBPFunctionLibrary_Victory_SaveStringToOSClipboard) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_Victory_SaveStringToOSClipboard");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_SaveStringToOSClipboard, ToClipboard) == 0x000000, "Member 'VictoryBPFunctionLibrary_Victory_SaveStringToOSClipboard::ToClipboard' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Victory_SecondsToHoursMinutesSeconds
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_Victory_SecondsToHoursMinutesSeconds final
{
public:
	float                                         Seconds;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TrimZeroes;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DE3[0x3];                                      // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_Victory_SecondsToHoursMinutesSeconds) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Victory_SecondsToHoursMinutesSeconds");
static_assert(sizeof(VictoryBPFunctionLibrary_Victory_SecondsToHoursMinutesSeconds) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_Victory_SecondsToHoursMinutesSeconds");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_SecondsToHoursMinutesSeconds, Seconds) == 0x000000, "Member 'VictoryBPFunctionLibrary_Victory_SecondsToHoursMinutesSeconds::Seconds' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_SecondsToHoursMinutesSeconds, TrimZeroes) == 0x000004, "Member 'VictoryBPFunctionLibrary_Victory_SecondsToHoursMinutesSeconds::TrimZeroes' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Victory_SecondsToHoursMinutesSeconds, ReturnValue) == 0x000008, "Member 'VictoryBPFunctionLibrary_Victory_SecondsToHoursMinutesSeconds::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryAppendInline
// 0x0038 (0x0038 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryAppendInline final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ToAppend;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Result;                                            // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AppendNewline;                                     // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DE4[0x7];                                      // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryAppendInline) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryAppendInline");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryAppendInline) == 0x000038, "Wrong size on VictoryBPFunctionLibrary_VictoryAppendInline");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryAppendInline, String) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryAppendInline::String' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryAppendInline, ToAppend) == 0x000010, "Member 'VictoryBPFunctionLibrary_VictoryAppendInline::ToAppend' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryAppendInline, Result) == 0x000020, "Member 'VictoryBPFunctionLibrary_VictoryAppendInline::Result' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryAppendInline, AppendNewline) == 0x000030, "Member 'VictoryBPFunctionLibrary_VictoryAppendInline::AppendNewline' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryCreateProc
// 0x0048 (0x0048 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryCreateProc final
{
public:
	int32                                         ProcessId;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DE5[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FullPathOfProgramToRun;                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         CommandlineArgs;                                   // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Detach;                                            // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Hidden;                                            // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DE6[0x2];                                      // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Priority;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OptionalWorkingDirectory;                          // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URamaVictoryPluginCreateProcessPipe*    ReadPipeObject;                                    // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryCreateProc) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryCreateProc");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryCreateProc) == 0x000048, "Wrong size on VictoryBPFunctionLibrary_VictoryCreateProc");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryCreateProc, ProcessId) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryCreateProc::ProcessId' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryCreateProc, FullPathOfProgramToRun) == 0x000008, "Member 'VictoryBPFunctionLibrary_VictoryCreateProc::FullPathOfProgramToRun' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryCreateProc, CommandlineArgs) == 0x000018, "Member 'VictoryBPFunctionLibrary_VictoryCreateProc::CommandlineArgs' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryCreateProc, Detach) == 0x000028, "Member 'VictoryBPFunctionLibrary_VictoryCreateProc::Detach' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryCreateProc, Hidden) == 0x000029, "Member 'VictoryBPFunctionLibrary_VictoryCreateProc::Hidden' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryCreateProc, Priority) == 0x00002C, "Member 'VictoryBPFunctionLibrary_VictoryCreateProc::Priority' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryCreateProc, OptionalWorkingDirectory) == 0x000030, "Member 'VictoryBPFunctionLibrary_VictoryCreateProc::OptionalWorkingDirectory' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryCreateProc, ReadPipeObject) == 0x000040, "Member 'VictoryBPFunctionLibrary_VictoryCreateProc::ReadPipeObject' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryDestructible_DestroyChunk
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryDestructible_DestroyChunk final
{
public:
	class UDestructibleComponent*                 DestructibleComp;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HitItem;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DE7[0x3];                                      // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryDestructible_DestroyChunk) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryDestructible_DestroyChunk");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryDestructible_DestroyChunk) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_VictoryDestructible_DestroyChunk");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryDestructible_DestroyChunk, DestructibleComp) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryDestructible_DestroyChunk::DestructibleComp' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryDestructible_DestroyChunk, HitItem) == 0x000008, "Member 'VictoryBPFunctionLibrary_VictoryDestructible_DestroyChunk::HitItem' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryDestructible_DestroyChunk, ReturnValue) == 0x00000C, "Member 'VictoryBPFunctionLibrary_VictoryDestructible_DestroyChunk::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryFloatMinusEquals
// 0x000C (0x000C - 0x0000)
struct VictoryBPFunctionLibrary_VictoryFloatMinusEquals final
{
public:
	float                                         Float;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Sub;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatOut;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryFloatMinusEquals) == 0x000004, "Wrong alignment on VictoryBPFunctionLibrary_VictoryFloatMinusEquals");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryFloatMinusEquals) == 0x00000C, "Wrong size on VictoryBPFunctionLibrary_VictoryFloatMinusEquals");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryFloatMinusEquals, Float) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryFloatMinusEquals::Float' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryFloatMinusEquals, Sub) == 0x000004, "Member 'VictoryBPFunctionLibrary_VictoryFloatMinusEquals::Sub' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryFloatMinusEquals, FloatOut) == 0x000008, "Member 'VictoryBPFunctionLibrary_VictoryFloatMinusEquals::FloatOut' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryFloatPlusEquals
// 0x000C (0x000C - 0x0000)
struct VictoryBPFunctionLibrary_VictoryFloatPlusEquals final
{
public:
	float                                         Float;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Add;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatOut;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryFloatPlusEquals) == 0x000004, "Wrong alignment on VictoryBPFunctionLibrary_VictoryFloatPlusEquals");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryFloatPlusEquals) == 0x00000C, "Wrong size on VictoryBPFunctionLibrary_VictoryFloatPlusEquals");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryFloatPlusEquals, Float) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryFloatPlusEquals::Float' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryFloatPlusEquals, Add) == 0x000004, "Member 'VictoryBPFunctionLibrary_VictoryFloatPlusEquals::Add' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryFloatPlusEquals, FloatOut) == 0x000008, "Member 'VictoryBPFunctionLibrary_VictoryFloatPlusEquals::FloatOut' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryGetAllActionKeyBindings
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryGetAllActionKeyBindings final
{
public:
	TArray<struct FVictoryInput>                  Bindings;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryGetAllActionKeyBindings) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryGetAllActionKeyBindings");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryGetAllActionKeyBindings) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_VictoryGetAllActionKeyBindings");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetAllActionKeyBindings, Bindings) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryGetAllActionKeyBindings::Bindings' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryGetAllAxisAndActionMappingsForKey
// 0x0038 (0x0038 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryGetAllAxisAndActionMappingsForKey final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVictoryInput>                  ActionBindings;                                    // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVictoryInputAxis>              AxisBindings;                                      // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryGetAllAxisAndActionMappingsForKey) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryGetAllAxisAndActionMappingsForKey");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryGetAllAxisAndActionMappingsForKey) == 0x000038, "Wrong size on VictoryBPFunctionLibrary_VictoryGetAllAxisAndActionMappingsForKey");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetAllAxisAndActionMappingsForKey, Key) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryGetAllAxisAndActionMappingsForKey::Key' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetAllAxisAndActionMappingsForKey, ActionBindings) == 0x000018, "Member 'VictoryBPFunctionLibrary_VictoryGetAllAxisAndActionMappingsForKey::ActionBindings' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetAllAxisAndActionMappingsForKey, AxisBindings) == 0x000028, "Member 'VictoryBPFunctionLibrary_VictoryGetAllAxisAndActionMappingsForKey::AxisBindings' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryGetAllAxisKeyBindings
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryGetAllAxisKeyBindings final
{
public:
	TArray<struct FVictoryInputAxis>              Bindings;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryGetAllAxisKeyBindings) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryGetAllAxisKeyBindings");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryGetAllAxisKeyBindings) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_VictoryGetAllAxisKeyBindings");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetAllAxisKeyBindings, Bindings) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryGetAllAxisKeyBindings::Bindings' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryGetApplicationName
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryGetApplicationName final
{
public:
	int32                                         ProcessId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DE8[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryGetApplicationName) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryGetApplicationName");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryGetApplicationName) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_VictoryGetApplicationName");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetApplicationName, ProcessId) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryGetApplicationName::ProcessId' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetApplicationName, ReturnValue) == 0x000008, "Member 'VictoryBPFunctionLibrary_VictoryGetApplicationName::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryGetCustomConfigVar_Bool
// 0x0028 (0x0028 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Bool final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DE9[0x6];                                      // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Bool) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Bool");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Bool) == 0x000028, "Wrong size on VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Bool");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Bool, SectionName) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Bool::SectionName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Bool, VariableName) == 0x000010, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Bool::VariableName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Bool, IsValid) == 0x000020, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Bool::IsValid' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Bool, ReturnValue) == 0x000021, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Bool::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryGetCustomConfigVar_Color
// 0x0038 (0x0038 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Color final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DEA[0x3];                                      // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ReturnValue;                                       // 0x0024(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DEB[0x4];                                      // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Color) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Color");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Color) == 0x000038, "Wrong size on VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Color");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Color, SectionName) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Color::SectionName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Color, VariableName) == 0x000010, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Color::VariableName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Color, IsValid) == 0x000020, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Color::IsValid' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Color, ReturnValue) == 0x000024, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Color::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryGetCustomConfigVar_Float
// 0x0028 (0x0028 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Float final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DEC[0x3];                                      // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Float) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Float");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Float) == 0x000028, "Wrong size on VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Float");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Float, SectionName) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Float::SectionName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Float, VariableName) == 0x000010, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Float::VariableName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Float, IsValid) == 0x000020, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Float::IsValid' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Float, ReturnValue) == 0x000024, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Float::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryGetCustomConfigVar_Int
// 0x0028 (0x0028 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Int final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DED[0x3];                                      // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Int) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Int");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Int) == 0x000028, "Wrong size on VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Int");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Int, SectionName) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Int::SectionName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Int, VariableName) == 0x000010, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Int::VariableName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Int, IsValid) == 0x000020, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Int::IsValid' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Int, ReturnValue) == 0x000024, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Int::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryGetCustomConfigVar_Rotator
// 0x0030 (0x0030 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Rotator final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DEE[0x3];                                      // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               ReturnValue;                                       // 0x0024(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Rotator) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Rotator");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Rotator) == 0x000030, "Wrong size on VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Rotator");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Rotator, SectionName) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Rotator::SectionName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Rotator, VariableName) == 0x000010, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Rotator::VariableName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Rotator, IsValid) == 0x000020, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Rotator::IsValid' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Rotator, ReturnValue) == 0x000024, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Rotator::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryGetCustomConfigVar_String
// 0x0038 (0x0038 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_String final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DEF[0x7];                                      // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_String) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_String");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_String) == 0x000038, "Wrong size on VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_String");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_String, SectionName) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_String::SectionName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_String, VariableName) == 0x000010, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_String::VariableName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_String, IsValid) == 0x000020, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_String::IsValid' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_String, ReturnValue) == 0x000028, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_String::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryGetCustomConfigVar_Vector
// 0x0030 (0x0030 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DF0[0x3];                                      // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0024(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector) == 0x000030, "Wrong size on VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector, SectionName) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector::SectionName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector, VariableName) == 0x000010, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector::VariableName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector, IsValid) == 0x000020, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector::IsValid' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector, ReturnValue) == 0x000024, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryGetCustomConfigVar_Vector2D
// 0x0030 (0x0030 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector2D final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DF1[0x3];                                      // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0024(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DF2[0x4];                                      // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector2D) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector2D");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector2D) == 0x000030, "Wrong size on VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector2D");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector2D, SectionName) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector2D::SectionName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector2D, VariableName) == 0x000010, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector2D::VariableName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector2D, IsValid) == 0x000020, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector2D::IsValid' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector2D, ReturnValue) == 0x000024, "Member 'VictoryBPFunctionLibrary_VictoryGetCustomConfigVar_Vector2D::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryGetSoundVolume
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryGetSoundVolume final
{
public:
	class USoundClass*                            SoundClassObject;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DF3[0x4];                                      // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryGetSoundVolume) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryGetSoundVolume");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryGetSoundVolume) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_VictoryGetSoundVolume");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetSoundVolume, SoundClassObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryGetSoundVolume::SoundClassObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetSoundVolume, ReturnValue) == 0x000008, "Member 'VictoryBPFunctionLibrary_VictoryGetSoundVolume::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryGetVictoryInput
// 0x0078 (0x0078 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryGetVictoryInput final
{
public:
	struct FKeyEvent                              KeyEvent;                                          // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVictoryInput                          ReturnValue;                                       // 0x0038(0x0040)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryGetVictoryInput) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryGetVictoryInput");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryGetVictoryInput) == 0x000078, "Wrong size on VictoryBPFunctionLibrary_VictoryGetVictoryInput");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetVictoryInput, KeyEvent) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryGetVictoryInput::KeyEvent' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetVictoryInput, ReturnValue) == 0x000038, "Member 'VictoryBPFunctionLibrary_VictoryGetVictoryInput::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryGetVictoryInputAxis
// 0x0078 (0x0078 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryGetVictoryInputAxis final
{
public:
	struct FKeyEvent                              KeyEvent;                                          // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVictoryInputAxis                      ReturnValue;                                       // 0x0038(0x0040)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryGetVictoryInputAxis) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryGetVictoryInputAxis");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryGetVictoryInputAxis) == 0x000078, "Wrong size on VictoryBPFunctionLibrary_VictoryGetVictoryInputAxis");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetVictoryInputAxis, KeyEvent) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryGetVictoryInputAxis::KeyEvent' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetVictoryInputAxis, ReturnValue) == 0x000038, "Member 'VictoryBPFunctionLibrary_VictoryGetVictoryInputAxis::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryIntMinusEquals
// 0x000C (0x000C - 0x0000)
struct VictoryBPFunctionLibrary_VictoryIntMinusEquals final
{
public:
	int32                                         Int;                                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Sub;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntOut;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryIntMinusEquals) == 0x000004, "Wrong alignment on VictoryBPFunctionLibrary_VictoryIntMinusEquals");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryIntMinusEquals) == 0x00000C, "Wrong size on VictoryBPFunctionLibrary_VictoryIntMinusEquals");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryIntMinusEquals, Int) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryIntMinusEquals::Int' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryIntMinusEquals, Sub) == 0x000004, "Member 'VictoryBPFunctionLibrary_VictoryIntMinusEquals::Sub' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryIntMinusEquals, IntOut) == 0x000008, "Member 'VictoryBPFunctionLibrary_VictoryIntMinusEquals::IntOut' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryIntPlusEquals
// 0x000C (0x000C - 0x0000)
struct VictoryBPFunctionLibrary_VictoryIntPlusEquals final
{
public:
	int32                                         Int;                                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Add;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntOut;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryIntPlusEquals) == 0x000004, "Wrong alignment on VictoryBPFunctionLibrary_VictoryIntPlusEquals");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryIntPlusEquals) == 0x00000C, "Wrong size on VictoryBPFunctionLibrary_VictoryIntPlusEquals");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryIntPlusEquals, Int) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryIntPlusEquals::Int' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryIntPlusEquals, Add) == 0x000004, "Member 'VictoryBPFunctionLibrary_VictoryIntPlusEquals::Add' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryIntPlusEquals, IntOut) == 0x000008, "Member 'VictoryBPFunctionLibrary_VictoryIntPlusEquals::IntOut' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryIsApplicationRunning
// 0x0008 (0x0008 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryIsApplicationRunning final
{
public:
	int32                                         ProcessId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DF4[0x3];                                      // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryIsApplicationRunning) == 0x000004, "Wrong alignment on VictoryBPFunctionLibrary_VictoryIsApplicationRunning");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryIsApplicationRunning) == 0x000008, "Wrong size on VictoryBPFunctionLibrary_VictoryIsApplicationRunning");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryIsApplicationRunning, ProcessId) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryIsApplicationRunning::ProcessId' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryIsApplicationRunning, ReturnValue) == 0x000004, "Member 'VictoryBPFunctionLibrary_VictoryIsApplicationRunning::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryISM_ConvertToVictoryISMActors
// 0x0028 (0x0028 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryISM_ConvertToVictoryISMActors final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AVictoryISM*>                    CreatedISMActors;                                  // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          DestroyOriginalActors;                             // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DF5[0x3];                                      // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinCountToCreateISM;                               // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryISM_ConvertToVictoryISMActors) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryISM_ConvertToVictoryISMActors");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryISM_ConvertToVictoryISMActors) == 0x000028, "Wrong size on VictoryBPFunctionLibrary_VictoryISM_ConvertToVictoryISMActors");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryISM_ConvertToVictoryISMActors, WorldContextObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryISM_ConvertToVictoryISMActors::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryISM_ConvertToVictoryISMActors, ActorClass) == 0x000008, "Member 'VictoryBPFunctionLibrary_VictoryISM_ConvertToVictoryISMActors::ActorClass' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryISM_ConvertToVictoryISMActors, CreatedISMActors) == 0x000010, "Member 'VictoryBPFunctionLibrary_VictoryISM_ConvertToVictoryISMActors::CreatedISMActors' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryISM_ConvertToVictoryISMActors, DestroyOriginalActors) == 0x000020, "Member 'VictoryBPFunctionLibrary_VictoryISM_ConvertToVictoryISMActors::DestroyOriginalActors' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryISM_ConvertToVictoryISMActors, MinCountToCreateISM) == 0x000024, "Member 'VictoryBPFunctionLibrary_VictoryISM_ConvertToVictoryISMActors::MinCountToCreateISM' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryISM_GetAllVictoryISMActors
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryISM_GetAllVictoryISMActors final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AVictoryISM*>                    Out;                                               // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryISM_GetAllVictoryISMActors) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryISM_GetAllVictoryISMActors");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryISM_GetAllVictoryISMActors) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_VictoryISM_GetAllVictoryISMActors");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryISM_GetAllVictoryISMActors, WorldContextObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryISM_GetAllVictoryISMActors::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryISM_GetAllVictoryISMActors, Out) == 0x000008, "Member 'VictoryBPFunctionLibrary_VictoryISM_GetAllVictoryISMActors::Out' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryLoadLevelInstance
// 0x0050 (0x0050 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryLoadLevelInstance final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapFolderOffOfContent;                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LevelName;                                         // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstanceNumber;                                    // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x002C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0038(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0044(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DF6[0x3];                                      // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelStreaming*                        ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryLoadLevelInstance) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryLoadLevelInstance");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryLoadLevelInstance) == 0x000050, "Wrong size on VictoryBPFunctionLibrary_VictoryLoadLevelInstance");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryLoadLevelInstance, WorldContextObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryLoadLevelInstance::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryLoadLevelInstance, MapFolderOffOfContent) == 0x000008, "Member 'VictoryBPFunctionLibrary_VictoryLoadLevelInstance::MapFolderOffOfContent' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryLoadLevelInstance, LevelName) == 0x000018, "Member 'VictoryBPFunctionLibrary_VictoryLoadLevelInstance::LevelName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryLoadLevelInstance, InstanceNumber) == 0x000028, "Member 'VictoryBPFunctionLibrary_VictoryLoadLevelInstance::InstanceNumber' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryLoadLevelInstance, Location) == 0x00002C, "Member 'VictoryBPFunctionLibrary_VictoryLoadLevelInstance::Location' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryLoadLevelInstance, Rotation) == 0x000038, "Member 'VictoryBPFunctionLibrary_VictoryLoadLevelInstance::Rotation' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryLoadLevelInstance, Success) == 0x000044, "Member 'VictoryBPFunctionLibrary_VictoryLoadLevelInstance::Success' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryLoadLevelInstance, ReturnValue) == 0x000048, "Member 'VictoryBPFunctionLibrary_VictoryLoadLevelInstance::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryPaths__ConfigDir
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryPaths__ConfigDir final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryPaths__ConfigDir) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryPaths__ConfigDir");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryPaths__ConfigDir) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_VictoryPaths__ConfigDir");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryPaths__ConfigDir, ReturnValue) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryPaths__ConfigDir::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryPaths__GameRootDirectory
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryPaths__GameRootDirectory final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryPaths__GameRootDirectory) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryPaths__GameRootDirectory");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryPaths__GameRootDirectory) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_VictoryPaths__GameRootDirectory");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryPaths__GameRootDirectory, ReturnValue) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryPaths__GameRootDirectory::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryPaths__LogsDir
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryPaths__LogsDir final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryPaths__LogsDir) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryPaths__LogsDir");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryPaths__LogsDir) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_VictoryPaths__LogsDir");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryPaths__LogsDir, ReturnValue) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryPaths__LogsDir::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryPaths__SavedDir
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryPaths__SavedDir final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryPaths__SavedDir) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryPaths__SavedDir");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryPaths__SavedDir) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_VictoryPaths__SavedDir");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryPaths__SavedDir, ReturnValue) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryPaths__SavedDir::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryPaths__ScreenShotsDir
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryPaths__ScreenShotsDir final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryPaths__ScreenShotsDir) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryPaths__ScreenShotsDir");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryPaths__ScreenShotsDir) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_VictoryPaths__ScreenShotsDir");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryPaths__ScreenShotsDir, ReturnValue) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryPaths__ScreenShotsDir::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryPaths__Win64Dir_BinaryLocation
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryPaths__Win64Dir_BinaryLocation final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryPaths__Win64Dir_BinaryLocation) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryPaths__Win64Dir_BinaryLocation");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryPaths__Win64Dir_BinaryLocation) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_VictoryPaths__Win64Dir_BinaryLocation");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryPaths__Win64Dir_BinaryLocation, ReturnValue) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryPaths__Win64Dir_BinaryLocation::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryPaths__WindowsNoEditorDir
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryPaths__WindowsNoEditorDir final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryPaths__WindowsNoEditorDir) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryPaths__WindowsNoEditorDir");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryPaths__WindowsNoEditorDir) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_VictoryPaths__WindowsNoEditorDir");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryPaths__WindowsNoEditorDir, ReturnValue) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryPaths__WindowsNoEditorDir::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryPhysics_UpdateAngularDamping
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryPhysics_UpdateAngularDamping final
{
public:
	class UPrimitiveComponent*                    CompToUpdate;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewAngularDamping;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DF7[0x3];                                      // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryPhysics_UpdateAngularDamping) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryPhysics_UpdateAngularDamping");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryPhysics_UpdateAngularDamping) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_VictoryPhysics_UpdateAngularDamping");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryPhysics_UpdateAngularDamping, CompToUpdate) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryPhysics_UpdateAngularDamping::CompToUpdate' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryPhysics_UpdateAngularDamping, NewAngularDamping) == 0x000008, "Member 'VictoryBPFunctionLibrary_VictoryPhysics_UpdateAngularDamping::NewAngularDamping' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryPhysics_UpdateAngularDamping, ReturnValue) == 0x00000C, "Member 'VictoryBPFunctionLibrary_VictoryPhysics_UpdateAngularDamping::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryReBindActionKey
// 0x0088 (0x0088 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryReBindActionKey final
{
public:
	struct FVictoryInput                          Original;                                          // 0x0000(0x0040)(Parm, NativeAccessSpecifierPublic)
	struct FVictoryInput                          NewBinding;                                        // 0x0040(0x0040)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DF8[0x7];                                      // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryReBindActionKey) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryReBindActionKey");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryReBindActionKey) == 0x000088, "Wrong size on VictoryBPFunctionLibrary_VictoryReBindActionKey");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryReBindActionKey, Original) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryReBindActionKey::Original' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryReBindActionKey, NewBinding) == 0x000040, "Member 'VictoryBPFunctionLibrary_VictoryReBindActionKey::NewBinding' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryReBindActionKey, ReturnValue) == 0x000080, "Member 'VictoryBPFunctionLibrary_VictoryReBindActionKey::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryReBindAxisKey
// 0x0088 (0x0088 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryReBindAxisKey final
{
public:
	struct FVictoryInputAxis                      Original;                                          // 0x0000(0x0040)(Parm, NativeAccessSpecifierPublic)
	struct FVictoryInputAxis                      NewBinding;                                        // 0x0040(0x0040)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DF9[0x7];                                      // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryReBindAxisKey) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryReBindAxisKey");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryReBindAxisKey) == 0x000088, "Wrong size on VictoryBPFunctionLibrary_VictoryReBindAxisKey");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryReBindAxisKey, Original) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryReBindAxisKey::Original' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryReBindAxisKey, NewBinding) == 0x000040, "Member 'VictoryBPFunctionLibrary_VictoryReBindAxisKey::NewBinding' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryReBindAxisKey, ReturnValue) == 0x000080, "Member 'VictoryBPFunctionLibrary_VictoryReBindAxisKey::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryRemoveActionKeyBind
// 0x0040 (0x0040 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryRemoveActionKeyBind final
{
public:
	struct FVictoryInput                          ToRemove;                                          // 0x0000(0x0040)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryRemoveActionKeyBind) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryRemoveActionKeyBind");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryRemoveActionKeyBind) == 0x000040, "Wrong size on VictoryBPFunctionLibrary_VictoryRemoveActionKeyBind");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryRemoveActionKeyBind, ToRemove) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryRemoveActionKeyBind::ToRemove' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictoryRemoveAxisKeyBind
// 0x0040 (0x0040 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryRemoveAxisKeyBind final
{
public:
	struct FVictoryInputAxis                      ToRemove;                                          // 0x0000(0x0040)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryRemoveAxisKeyBind) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryRemoveAxisKeyBind");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryRemoveAxisKeyBind) == 0x000040, "Wrong size on VictoryBPFunctionLibrary_VictoryRemoveAxisKeyBind");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryRemoveAxisKeyBind, ToRemove) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryRemoveAxisKeyBind::ToRemove' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictorySetCustomConfigVar_Bool
// 0x0028 (0x0028 - 0x0000)
struct VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Bool final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DFA[0x7];                                      // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Bool) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Bool");
static_assert(sizeof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Bool) == 0x000028, "Wrong size on VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Bool");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Bool, SectionName) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Bool::SectionName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Bool, VariableName) == 0x000010, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Bool::VariableName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Bool, Value) == 0x000020, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Bool::Value' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictorySetCustomConfigVar_Color
// 0x0030 (0x0030 - 0x0000)
struct VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Color final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Value;                                             // 0x0020(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Color) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Color");
static_assert(sizeof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Color) == 0x000030, "Wrong size on VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Color");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Color, SectionName) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Color::SectionName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Color, VariableName) == 0x000010, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Color::VariableName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Color, Value) == 0x000020, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Color::Value' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictorySetCustomConfigVar_Float
// 0x0028 (0x0028 - 0x0000)
struct VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Float final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DFB[0x4];                                      // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Float) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Float");
static_assert(sizeof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Float) == 0x000028, "Wrong size on VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Float");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Float, SectionName) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Float::SectionName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Float, VariableName) == 0x000010, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Float::VariableName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Float, Value) == 0x000020, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Float::Value' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictorySetCustomConfigVar_Int
// 0x0028 (0x0028 - 0x0000)
struct VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Int final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DFC[0x4];                                      // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Int) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Int");
static_assert(sizeof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Int) == 0x000028, "Wrong size on VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Int");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Int, SectionName) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Int::SectionName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Int, VariableName) == 0x000010, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Int::VariableName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Int, Value) == 0x000020, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Int::Value' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictorySetCustomConfigVar_Rotator
// 0x0030 (0x0030 - 0x0000)
struct VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Rotator final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Value;                                             // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_DFD[0x4];                                      // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Rotator) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Rotator");
static_assert(sizeof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Rotator) == 0x000030, "Wrong size on VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Rotator");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Rotator, SectionName) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Rotator::SectionName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Rotator, VariableName) == 0x000010, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Rotator::VariableName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Rotator, Value) == 0x000020, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Rotator::Value' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictorySetCustomConfigVar_String
// 0x0030 (0x0030 - 0x0000)
struct VictoryBPFunctionLibrary_VictorySetCustomConfigVar_String final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_String) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictorySetCustomConfigVar_String");
static_assert(sizeof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_String) == 0x000030, "Wrong size on VictoryBPFunctionLibrary_VictorySetCustomConfigVar_String");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_String, SectionName) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_String::SectionName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_String, VariableName) == 0x000010, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_String::VariableName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_String, Value) == 0x000020, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_String::Value' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictorySetCustomConfigVar_Vector
// 0x0030 (0x0030 - 0x0000)
struct VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Value;                                             // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DFE[0x4];                                      // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector");
static_assert(sizeof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector) == 0x000030, "Wrong size on VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector, SectionName) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector::SectionName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector, VariableName) == 0x000010, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector::VariableName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector, Value) == 0x000020, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector::Value' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictorySetCustomConfigVar_Vector2D
// 0x0028 (0x0028 - 0x0000)
struct VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector2D final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Value;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector2D) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector2D");
static_assert(sizeof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector2D) == 0x000028, "Wrong size on VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector2D");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector2D, SectionName) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector2D::SectionName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector2D, VariableName) == 0x000010, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector2D::VariableName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector2D, Value) == 0x000020, "Member 'VictoryBPFunctionLibrary_VictorySetCustomConfigVar_Vector2D::Value' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictorySimulateKeyPress
// 0x0028 (0x0028 - 0x0000)
struct VictoryBPFunctionLibrary_VictorySimulateKeyPress final
{
public:
	class APlayerController*                      ThePC;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   Key;                                               // 0x0008(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputEvent                                   EventType;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DFF[0x7];                                      // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_VictorySimulateKeyPress) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictorySimulateKeyPress");
static_assert(sizeof(VictoryBPFunctionLibrary_VictorySimulateKeyPress) == 0x000028, "Wrong size on VictoryBPFunctionLibrary_VictorySimulateKeyPress");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySimulateKeyPress, ThePC) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictorySimulateKeyPress::ThePC' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySimulateKeyPress, Key) == 0x000008, "Member 'VictoryBPFunctionLibrary_VictorySimulateKeyPress::Key' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySimulateKeyPress, EventType) == 0x000020, "Member 'VictoryBPFunctionLibrary_VictorySimulateKeyPress::EventType' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictorySimulateMouseWheel
// 0x0004 (0x0004 - 0x0000)
struct VictoryBPFunctionLibrary_VictorySimulateMouseWheel final
{
public:
	float                                         Delta;                                             // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictorySimulateMouseWheel) == 0x000004, "Wrong alignment on VictoryBPFunctionLibrary_VictorySimulateMouseWheel");
static_assert(sizeof(VictoryBPFunctionLibrary_VictorySimulateMouseWheel) == 0x000004, "Wrong size on VictoryBPFunctionLibrary_VictorySimulateMouseWheel");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySimulateMouseWheel, Delta) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictorySimulateMouseWheel::Delta' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictorySortFloatArray
// 0x0020 (0x0020 - 0x0000)
struct VictoryBPFunctionLibrary_VictorySortFloatArray final
{
public:
	TArray<float>                                 FloatArray;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<float>                                 FloatArrayRef;                                     // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictorySortFloatArray) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictorySortFloatArray");
static_assert(sizeof(VictoryBPFunctionLibrary_VictorySortFloatArray) == 0x000020, "Wrong size on VictoryBPFunctionLibrary_VictorySortFloatArray");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySortFloatArray, FloatArray) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictorySortFloatArray::FloatArray' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySortFloatArray, FloatArrayRef) == 0x000010, "Member 'VictoryBPFunctionLibrary_VictorySortFloatArray::FloatArrayRef' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictorySortIntArray
// 0x0020 (0x0020 - 0x0000)
struct VictoryBPFunctionLibrary_VictorySortIntArray final
{
public:
	TArray<int32>                                 IntArray;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 IntArrayRef;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictorySortIntArray) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictorySortIntArray");
static_assert(sizeof(VictoryBPFunctionLibrary_VictorySortIntArray) == 0x000020, "Wrong size on VictoryBPFunctionLibrary_VictorySortIntArray");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySortIntArray, IntArray) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictorySortIntArray::IntArray' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySortIntArray, IntArrayRef) == 0x000010, "Member 'VictoryBPFunctionLibrary_VictorySortIntArray::IntArrayRef' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.VictorySoundVolumeChange
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_VictorySoundVolumeChange final
{
public:
	class USoundClass*                            SoundClassObject;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewVolume;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E00[0x3];                                      // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_VictorySoundVolumeChange) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictorySoundVolumeChange");
static_assert(sizeof(VictoryBPFunctionLibrary_VictorySoundVolumeChange) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_VictorySoundVolumeChange");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySoundVolumeChange, SoundClassObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictorySoundVolumeChange::SoundClassObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySoundVolumeChange, NewVolume) == 0x000008, "Member 'VictoryBPFunctionLibrary_VictorySoundVolumeChange::NewVolume' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySoundVolumeChange, ReturnValue) == 0x00000C, "Member 'VictoryBPFunctionLibrary_VictorySoundVolumeChange::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Viewport__EnableWorldRendering
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_Viewport__EnableWorldRendering final
{
public:
	const class APlayerController*                ThePC;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RenderTheWorld;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E01[0x6];                                      // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Viewport__EnableWorldRendering) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Viewport__EnableWorldRendering");
static_assert(sizeof(VictoryBPFunctionLibrary_Viewport__EnableWorldRendering) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_Viewport__EnableWorldRendering");
static_assert(offsetof(VictoryBPFunctionLibrary_Viewport__EnableWorldRendering, ThePC) == 0x000000, "Member 'VictoryBPFunctionLibrary_Viewport__EnableWorldRendering::ThePC' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Viewport__EnableWorldRendering, RenderTheWorld) == 0x000008, "Member 'VictoryBPFunctionLibrary_Viewport__EnableWorldRendering::RenderTheWorld' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Viewport__EnableWorldRendering, ReturnValue) == 0x000009, "Member 'VictoryBPFunctionLibrary_Viewport__EnableWorldRendering::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Viewport__GetCenterOfViewport
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_Viewport__GetCenterOfViewport final
{
public:
	const class APlayerController*                ThePC;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosX;                                              // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosY;                                              // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E02[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Viewport__GetCenterOfViewport) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Viewport__GetCenterOfViewport");
static_assert(sizeof(VictoryBPFunctionLibrary_Viewport__GetCenterOfViewport) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_Viewport__GetCenterOfViewport");
static_assert(offsetof(VictoryBPFunctionLibrary_Viewport__GetCenterOfViewport, ThePC) == 0x000000, "Member 'VictoryBPFunctionLibrary_Viewport__GetCenterOfViewport::ThePC' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Viewport__GetCenterOfViewport, PosX) == 0x000008, "Member 'VictoryBPFunctionLibrary_Viewport__GetCenterOfViewport::PosX' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Viewport__GetCenterOfViewport, PosY) == 0x00000C, "Member 'VictoryBPFunctionLibrary_Viewport__GetCenterOfViewport::PosY' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Viewport__GetCenterOfViewport, ReturnValue) == 0x000010, "Member 'VictoryBPFunctionLibrary_Viewport__GetCenterOfViewport::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Viewport__GetMousePosition
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_Viewport__GetMousePosition final
{
public:
	const class APlayerController*                ThePC;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosX;                                              // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosY;                                              // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E03[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Viewport__GetMousePosition) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Viewport__GetMousePosition");
static_assert(sizeof(VictoryBPFunctionLibrary_Viewport__GetMousePosition) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_Viewport__GetMousePosition");
static_assert(offsetof(VictoryBPFunctionLibrary_Viewport__GetMousePosition, ThePC) == 0x000000, "Member 'VictoryBPFunctionLibrary_Viewport__GetMousePosition::ThePC' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Viewport__GetMousePosition, PosX) == 0x000008, "Member 'VictoryBPFunctionLibrary_Viewport__GetMousePosition::PosX' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Viewport__GetMousePosition, PosY) == 0x00000C, "Member 'VictoryBPFunctionLibrary_Viewport__GetMousePosition::PosY' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Viewport__GetMousePosition, ReturnValue) == 0x000010, "Member 'VictoryBPFunctionLibrary_Viewport__GetMousePosition::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Viewport__SetMousePosition
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_Viewport__SetMousePosition final
{
public:
	const class APlayerController*                ThePC;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosX;                                              // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosY;                                              // 0x000C(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E04[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Viewport__SetMousePosition) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Viewport__SetMousePosition");
static_assert(sizeof(VictoryBPFunctionLibrary_Viewport__SetMousePosition) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_Viewport__SetMousePosition");
static_assert(offsetof(VictoryBPFunctionLibrary_Viewport__SetMousePosition, ThePC) == 0x000000, "Member 'VictoryBPFunctionLibrary_Viewport__SetMousePosition::ThePC' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Viewport__SetMousePosition, PosX) == 0x000008, "Member 'VictoryBPFunctionLibrary_Viewport__SetMousePosition::PosX' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Viewport__SetMousePosition, PosY) == 0x00000C, "Member 'VictoryBPFunctionLibrary_Viewport__SetMousePosition::PosY' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Viewport__SetMousePosition, ReturnValue) == 0x000010, "Member 'VictoryBPFunctionLibrary_Viewport__SetMousePosition::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.ViewportPositionDeproject
// 0x0030 (0x0030 - 0x0000)
struct VictoryBPFunctionLibrary_ViewportPositionDeproject final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ViewportPosition;                                  // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutWorldOrigin;                                    // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutWorldDirection;                                 // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E05[0x7];                                      // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_ViewportPositionDeproject) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_ViewportPositionDeproject");
static_assert(sizeof(VictoryBPFunctionLibrary_ViewportPositionDeproject) == 0x000030, "Wrong size on VictoryBPFunctionLibrary_ViewportPositionDeproject");
static_assert(offsetof(VictoryBPFunctionLibrary_ViewportPositionDeproject, WorldContextObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_ViewportPositionDeproject::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_ViewportPositionDeproject, ViewportPosition) == 0x000008, "Member 'VictoryBPFunctionLibrary_ViewportPositionDeproject::ViewportPosition' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_ViewportPositionDeproject, OutWorldOrigin) == 0x000010, "Member 'VictoryBPFunctionLibrary_ViewportPositionDeproject::OutWorldOrigin' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_ViewportPositionDeproject, OutWorldDirection) == 0x00001C, "Member 'VictoryBPFunctionLibrary_ViewportPositionDeproject::OutWorldDirection' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_ViewportPositionDeproject, ReturnValue) == 0x000028, "Member 'VictoryBPFunctionLibrary_ViewportPositionDeproject::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Visibility__GetNotRenderedActors
// 0x0020 (0x0020 - 0x0000)
struct VictoryBPFunctionLibrary_Visibility__GetNotRenderedActors final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         CurrentlyNotRenderedActors;                        // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         MinRecentTime;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E06[0x4];                                      // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Visibility__GetNotRenderedActors) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Visibility__GetNotRenderedActors");
static_assert(sizeof(VictoryBPFunctionLibrary_Visibility__GetNotRenderedActors) == 0x000020, "Wrong size on VictoryBPFunctionLibrary_Visibility__GetNotRenderedActors");
static_assert(offsetof(VictoryBPFunctionLibrary_Visibility__GetNotRenderedActors, WorldContextObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_Visibility__GetNotRenderedActors::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Visibility__GetNotRenderedActors, CurrentlyNotRenderedActors) == 0x000008, "Member 'VictoryBPFunctionLibrary_Visibility__GetNotRenderedActors::CurrentlyNotRenderedActors' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Visibility__GetNotRenderedActors, MinRecentTime) == 0x000018, "Member 'VictoryBPFunctionLibrary_Visibility__GetNotRenderedActors::MinRecentTime' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.Visibility__GetRenderedActors
// 0x0020 (0x0020 - 0x0000)
struct VictoryBPFunctionLibrary_Visibility__GetRenderedActors final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         CurrentlyRenderedActors;                           // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         MinRecentTime;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E07[0x4];                                      // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Visibility__GetRenderedActors) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Visibility__GetRenderedActors");
static_assert(sizeof(VictoryBPFunctionLibrary_Visibility__GetRenderedActors) == 0x000020, "Wrong size on VictoryBPFunctionLibrary_Visibility__GetRenderedActors");
static_assert(offsetof(VictoryBPFunctionLibrary_Visibility__GetRenderedActors, WorldContextObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_Visibility__GetRenderedActors::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Visibility__GetRenderedActors, CurrentlyRenderedActors) == 0x000008, "Member 'VictoryBPFunctionLibrary_Visibility__GetRenderedActors::CurrentlyRenderedActors' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Visibility__GetRenderedActors, MinRecentTime) == 0x000018, "Member 'VictoryBPFunctionLibrary_Visibility__GetRenderedActors::MinRecentTime' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.WidgetGetChildrenOfClass
// 0x0028 (0x0028 - 0x0000)
struct VictoryBPFunctionLibrary_WidgetGetChildrenOfClass final
{
public:
	class UWidget*                                ParentWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UUserWidget*>                    ChildWidgets;                                      // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                WidgetClass;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImmediateOnly;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E08[0x7];                                      // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_WidgetGetChildrenOfClass) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_WidgetGetChildrenOfClass");
static_assert(sizeof(VictoryBPFunctionLibrary_WidgetGetChildrenOfClass) == 0x000028, "Wrong size on VictoryBPFunctionLibrary_WidgetGetChildrenOfClass");
static_assert(offsetof(VictoryBPFunctionLibrary_WidgetGetChildrenOfClass, ParentWidget) == 0x000000, "Member 'VictoryBPFunctionLibrary_WidgetGetChildrenOfClass::ParentWidget' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_WidgetGetChildrenOfClass, ChildWidgets) == 0x000008, "Member 'VictoryBPFunctionLibrary_WidgetGetChildrenOfClass::ChildWidgets' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_WidgetGetChildrenOfClass, WidgetClass) == 0x000018, "Member 'VictoryBPFunctionLibrary_WidgetGetChildrenOfClass::WidgetClass' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_WidgetGetChildrenOfClass, bImmediateOnly) == 0x000020, "Member 'VictoryBPFunctionLibrary_WidgetGetChildrenOfClass::bImmediateOnly' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.WidgetGetParentOfClass
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_WidgetGetParentOfClass final
{
public:
	class UWidget*                                ChildWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                WidgetClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_WidgetGetParentOfClass) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_WidgetGetParentOfClass");
static_assert(sizeof(VictoryBPFunctionLibrary_WidgetGetParentOfClass) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_WidgetGetParentOfClass");
static_assert(offsetof(VictoryBPFunctionLibrary_WidgetGetParentOfClass, ChildWidget) == 0x000000, "Member 'VictoryBPFunctionLibrary_WidgetGetParentOfClass::ChildWidget' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_WidgetGetParentOfClass, WidgetClass) == 0x000008, "Member 'VictoryBPFunctionLibrary_WidgetGetParentOfClass::WidgetClass' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_WidgetGetParentOfClass, ReturnValue) == 0x000010, "Member 'VictoryBPFunctionLibrary_WidgetGetParentOfClass::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.WidgetIsChildOf
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_WidgetIsChildOf final
{
public:
	class UWidget*                                ChildWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                PossibleParent;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E09[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_WidgetIsChildOf) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_WidgetIsChildOf");
static_assert(sizeof(VictoryBPFunctionLibrary_WidgetIsChildOf) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_WidgetIsChildOf");
static_assert(offsetof(VictoryBPFunctionLibrary_WidgetIsChildOf, ChildWidget) == 0x000000, "Member 'VictoryBPFunctionLibrary_WidgetIsChildOf::ChildWidget' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_WidgetIsChildOf, PossibleParent) == 0x000008, "Member 'VictoryBPFunctionLibrary_WidgetIsChildOf::PossibleParent' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_WidgetIsChildOf, ReturnValue) == 0x000010, "Member 'VictoryBPFunctionLibrary_WidgetIsChildOf::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.WorldType__InEditorWorld
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_WorldType__InEditorWorld final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E0A[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_WorldType__InEditorWorld) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_WorldType__InEditorWorld");
static_assert(sizeof(VictoryBPFunctionLibrary_WorldType__InEditorWorld) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_WorldType__InEditorWorld");
static_assert(offsetof(VictoryBPFunctionLibrary_WorldType__InEditorWorld, WorldContextObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_WorldType__InEditorWorld::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_WorldType__InEditorWorld, ReturnValue) == 0x000008, "Member 'VictoryBPFunctionLibrary_WorldType__InEditorWorld::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.WorldType__InGameInstanceWorld
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_WorldType__InGameInstanceWorld final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E0B[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_WorldType__InGameInstanceWorld) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_WorldType__InGameInstanceWorld");
static_assert(sizeof(VictoryBPFunctionLibrary_WorldType__InGameInstanceWorld) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_WorldType__InGameInstanceWorld");
static_assert(offsetof(VictoryBPFunctionLibrary_WorldType__InGameInstanceWorld, WorldContextObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_WorldType__InGameInstanceWorld::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_WorldType__InGameInstanceWorld, ReturnValue) == 0x000008, "Member 'VictoryBPFunctionLibrary_WorldType__InGameInstanceWorld::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.WorldType__InPIEWorld
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_WorldType__InPIEWorld final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E0C[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_WorldType__InPIEWorld) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_WorldType__InPIEWorld");
static_assert(sizeof(VictoryBPFunctionLibrary_WorldType__InPIEWorld) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_WorldType__InPIEWorld");
static_assert(offsetof(VictoryBPFunctionLibrary_WorldType__InPIEWorld, WorldContextObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_WorldType__InPIEWorld::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_WorldType__InPIEWorld, ReturnValue) == 0x000008, "Member 'VictoryBPFunctionLibrary_WorldType__InPIEWorld::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.TransformVectorToActorSpace
// 0x0020 (0x0020 - 0x0000)
struct VictoryBPFunctionLibrary_TransformVectorToActorSpace final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InVector;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_TransformVectorToActorSpace) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_TransformVectorToActorSpace");
static_assert(sizeof(VictoryBPFunctionLibrary_TransformVectorToActorSpace) == 0x000020, "Wrong size on VictoryBPFunctionLibrary_TransformVectorToActorSpace");
static_assert(offsetof(VictoryBPFunctionLibrary_TransformVectorToActorSpace, Actor) == 0x000000, "Member 'VictoryBPFunctionLibrary_TransformVectorToActorSpace::Actor' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_TransformVectorToActorSpace, InVector) == 0x000008, "Member 'VictoryBPFunctionLibrary_TransformVectorToActorSpace::InVector' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_TransformVectorToActorSpace, ReturnValue) == 0x000014, "Member 'VictoryBPFunctionLibrary_TransformVectorToActorSpace::ReturnValue' has a wrong offset!");

// Function VictoryBPLibrary.VictoryBPFunctionLibrary.TransformVectorToActorSpaceAngle
// 0x0020 (0x0020 - 0x0000)
struct VictoryBPFunctionLibrary_TransformVectorToActorSpaceAngle final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InVector;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_TransformVectorToActorSpaceAngle) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_TransformVectorToActorSpaceAngle");
static_assert(sizeof(VictoryBPFunctionLibrary_TransformVectorToActorSpaceAngle) == 0x000020, "Wrong size on VictoryBPFunctionLibrary_TransformVectorToActorSpaceAngle");
static_assert(offsetof(VictoryBPFunctionLibrary_TransformVectorToActorSpaceAngle, Actor) == 0x000000, "Member 'VictoryBPFunctionLibrary_TransformVectorToActorSpaceAngle::Actor' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_TransformVectorToActorSpaceAngle, InVector) == 0x000008, "Member 'VictoryBPFunctionLibrary_TransformVectorToActorSpaceAngle::InVector' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_TransformVectorToActorSpaceAngle, ReturnValue) == 0x000014, "Member 'VictoryBPFunctionLibrary_TransformVectorToActorSpaceAngle::ReturnValue' has a wrong offset!");

}

