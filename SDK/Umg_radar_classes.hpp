#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Umg_radar

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass umg_radar.umg_radar_C
// 0x0020 (0x0280 - 0x0260)
class UUmg_radar_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCanvasPanel*                           Canvas_points;                                     // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_117;                                         // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_radar;                                         // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_umg_radar(int32 EntryPoint);
	void ApplyColor(const struct FLinearColor& Color);
	void PropRenderer_finishProps();
	void GamemodeMakeKeys();
	void AnyKey(const struct FKey& Key, bool Pressed);
	void GamemodePreLoad();
	void Unfocused();
	void SettingsApplied(const struct FStruct_settings& Settings);
	void Unfoc();
	void StuffUpgraded(class AMainGamemode_C* GameMode);
	void GamemodeBeginPlay();
	void SignalSaved();
	void SignalDeleted();
	void DreamInv(TArray<struct FStruct_save>& Invv, class ADreamBase_C** Base);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"umg_radar_C">();
	}
	static class UUmg_radar_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUmg_radar_C>();
	}
};
static_assert(alignof(UUmg_radar_C) == 0x000008, "Wrong alignment on UUmg_radar_C");
static_assert(sizeof(UUmg_radar_C) == 0x000280, "Wrong size on UUmg_radar_C");
static_assert(offsetof(UUmg_radar_C, UberGraphFrame) == 0x000260, "Member 'UUmg_radar_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUmg_radar_C, Canvas_points) == 0x000268, "Member 'UUmg_radar_C::Canvas_points' has a wrong offset!");
static_assert(offsetof(UUmg_radar_C, Image_117) == 0x000270, "Member 'UUmg_radar_C::Image_117' has a wrong offset!");
static_assert(offsetof(UUmg_radar_C, Img_radar) == 0x000278, "Member 'UUmg_radar_C::Img_radar' has a wrong offset!");

}

