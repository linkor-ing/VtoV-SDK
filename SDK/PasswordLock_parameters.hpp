#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PasswordLock

#include "Basic.hpp"

#include "Struct_save_structs.hpp"
#include "Engine_structs.hpp"
#include "Enum_interactionActions_structs.hpp"
#include "Struct_triggerSave_structs.hpp"


namespace SDK::Params
{

// Function passwordLock.passwordLock_C.ExecuteUbergraph_passwordLock
// 0x02B8 (0x02B8 - 0x0000)
struct PasswordLock_C_ExecuteUbergraph_passwordLock final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F52[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool Active_calc, bool Active_downl, bool Active_coords, bool Active_play, bool Active_light)> K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	class USoundBase*                             Temp_object_Variable;                              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_1;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F53[0x6];                                     // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             K2Node_Select_Default;                             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F54[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Temp_object_Variable_2;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_3;                            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             K2Node_Select_Default_1;                           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode;          // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_3;                             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_2;                                // 0x0068(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_2;         // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_3;         // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode_1;        // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_active_calc;                    // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_active_downl;                   // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_active_coords;                  // 0x010A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_active_play;                    // 0x010B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_active_light;                   // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F55[0x3];                                     // 0x010D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode_2;        // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CallFunc_SpawnSoundAttached_ReturnValue;           // 0x0118(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_active;                         // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default_2;                           // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F56[0x6];                                     // 0x0122(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_2;                             // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_1;                             // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_1;                                // 0x0138(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class FName                                   K2Node_Event_name;                                 // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_owner;                                // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_index_1;                              // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F57[0x4];                                     // 0x01D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player;                               // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit;                                  // 0x01E0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         K2Node_Event_index;                                // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_interactionActions                       K2Node_Event_action;                               // 0x026C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F58[0x3];                                     // 0x026D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        CallFunc_SpawnSoundAttached_ReturnValue_1;         // 0x0270(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CallFunc_SpawnSoundAttached_ReturnValue_2;         // 0x0278(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_4;         // 0x0280(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_5;         // 0x0284(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_6;         // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_7;         // 0x028C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_8;         // 0x0290(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F59[0x4];                                     // 0x0294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        CallFunc_SpawnSoundAttached_ReturnValue_3;         // 0x0298(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_9;         // 0x02A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_10;        // 0x02A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_11;        // 0x02A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_kick;                                 // 0x02AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F5A[0x3];                                     // 0x02AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        CallFunc_SpawnSoundAttached_ReturnValue_4;         // 0x02B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PasswordLock_C_ExecuteUbergraph_passwordLock) == 0x000008, "Wrong alignment on PasswordLock_C_ExecuteUbergraph_passwordLock");
static_assert(sizeof(PasswordLock_C_ExecuteUbergraph_passwordLock) == 0x0002B8, "Wrong size on PasswordLock_C_ExecuteUbergraph_passwordLock");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, EntryPoint) == 0x000000, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::EntryPoint' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, Temp_bool_Variable) == 0x000004, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, Temp_object_Variable) == 0x000018, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, Temp_object_Variable_1) == 0x000020, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, Temp_bool_Variable_1) == 0x000028, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, Temp_bool_Variable_2) == 0x000029, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, K2Node_Select_Default) == 0x000030, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, Temp_bool_Variable_3) == 0x000038, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, Temp_object_Variable_2) == 0x000040, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, Temp_object_Variable_3) == 0x000048, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, K2Node_Select_Default_1) == 0x000050, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, CallFunc_getMainGamemode_AsMain_Gamemode) == 0x000058, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::CallFunc_getMainGamemode_AsMain_Gamemode' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, K2Node_Event_player_3) == 0x000060, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::K2Node_Event_player_3' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, K2Node_Event_hit_2) == 0x000068, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::K2Node_Event_hit_2' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, CallFunc_RandomFloatInRange_ReturnValue) == 0x0000F0, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x0000F4, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, CallFunc_RandomFloatInRange_ReturnValue_2) == 0x0000F8, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::CallFunc_RandomFloatInRange_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, CallFunc_RandomFloatInRange_ReturnValue_3) == 0x0000FC, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::CallFunc_RandomFloatInRange_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, CallFunc_getMainGamemode_AsMain_Gamemode_1) == 0x000100, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::CallFunc_getMainGamemode_AsMain_Gamemode_1' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, K2Node_CustomEvent_active_calc) == 0x000108, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::K2Node_CustomEvent_active_calc' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, K2Node_CustomEvent_active_downl) == 0x000109, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::K2Node_CustomEvent_active_downl' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, K2Node_CustomEvent_active_coords) == 0x00010A, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::K2Node_CustomEvent_active_coords' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, K2Node_CustomEvent_active_play) == 0x00010B, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::K2Node_CustomEvent_active_play' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, K2Node_CustomEvent_active_light) == 0x00010C, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::K2Node_CustomEvent_active_light' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, CallFunc_getMainGamemode_AsMain_Gamemode_2) == 0x000110, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::CallFunc_getMainGamemode_AsMain_Gamemode_2' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, CallFunc_SpawnSoundAttached_ReturnValue) == 0x000118, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::CallFunc_SpawnSoundAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, K2Node_CustomEvent_active) == 0x000120, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::K2Node_CustomEvent_active' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, K2Node_Select_Default_2) == 0x000121, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, K2Node_Event_player_2) == 0x000128, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::K2Node_Event_player_2' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, K2Node_Event_player_1) == 0x000130, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::K2Node_Event_player_1' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, K2Node_Event_hit_1) == 0x000138, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::K2Node_Event_hit_1' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, K2Node_Event_name) == 0x0001C0, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::K2Node_Event_name' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, K2Node_Event_owner) == 0x0001C8, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::K2Node_Event_owner' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, K2Node_Event_index_1) == 0x0001D0, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::K2Node_Event_index_1' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, K2Node_Event_player) == 0x0001D8, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::K2Node_Event_player' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, K2Node_Event_hit) == 0x0001E0, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::K2Node_Event_hit' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, K2Node_Event_index) == 0x000268, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::K2Node_Event_index' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, K2Node_Event_action) == 0x00026C, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::K2Node_Event_action' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, CallFunc_SpawnSoundAttached_ReturnValue_1) == 0x000270, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::CallFunc_SpawnSoundAttached_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, CallFunc_SpawnSoundAttached_ReturnValue_2) == 0x000278, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::CallFunc_SpawnSoundAttached_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, CallFunc_RandomFloatInRange_ReturnValue_4) == 0x000280, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::CallFunc_RandomFloatInRange_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, CallFunc_RandomFloatInRange_ReturnValue_5) == 0x000284, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::CallFunc_RandomFloatInRange_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, CallFunc_RandomFloatInRange_ReturnValue_6) == 0x000288, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::CallFunc_RandomFloatInRange_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, CallFunc_RandomFloatInRange_ReturnValue_7) == 0x00028C, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::CallFunc_RandomFloatInRange_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, CallFunc_RandomFloatInRange_ReturnValue_8) == 0x000290, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::CallFunc_RandomFloatInRange_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, CallFunc_SpawnSoundAttached_ReturnValue_3) == 0x000298, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::CallFunc_SpawnSoundAttached_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, CallFunc_RandomFloatInRange_ReturnValue_9) == 0x0002A0, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::CallFunc_RandomFloatInRange_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, CallFunc_RandomFloatInRange_ReturnValue_10) == 0x0002A4, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::CallFunc_RandomFloatInRange_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, CallFunc_RandomFloatInRange_ReturnValue_11) == 0x0002A8, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::CallFunc_RandomFloatInRange_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, K2Node_Event_kick) == 0x0002AC, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::K2Node_Event_kick' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ExecuteUbergraph_passwordLock, CallFunc_SpawnSoundAttached_ReturnValue_4) == 0x0002B0, "Member 'PasswordLock_C_ExecuteUbergraph_passwordLock::CallFunc_SpawnSoundAttached_ReturnValue_4' has a wrong offset!");

// Function passwordLock.passwordLock_C.kicked
// 0x0001 (0x0001 - 0x0000)
struct PasswordLock_C_Kicked final
{
public:
	bool                                          Kick;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PasswordLock_C_Kicked) == 0x000001, "Wrong alignment on PasswordLock_C_Kicked");
static_assert(sizeof(PasswordLock_C_Kicked) == 0x000001, "Wrong size on PasswordLock_C_Kicked");
static_assert(offsetof(PasswordLock_C_Kicked, Kick) == 0x000000, "Member 'PasswordLock_C_Kicked::Kick' has a wrong offset!");

// Function passwordLock.passwordLock_C.runTrigger
// 0x0010 (0x0010 - 0x0000)
struct PasswordLock_C_RunTrigger final
{
public:
	class AActor*                                 Param_Owner;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PasswordLock_C_RunTrigger) == 0x000008, "Wrong alignment on PasswordLock_C_RunTrigger");
static_assert(sizeof(PasswordLock_C_RunTrigger) == 0x000010, "Wrong size on PasswordLock_C_RunTrigger");
static_assert(offsetof(PasswordLock_C_RunTrigger, Param_Owner) == 0x000000, "Member 'PasswordLock_C_RunTrigger::Param_Owner' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_RunTrigger, Param_Index) == 0x000008, "Member 'PasswordLock_C_RunTrigger::Param_Index' has a wrong offset!");

// Function passwordLock.passwordLock_C.sendName
// 0x0008 (0x0008 - 0x0000)
struct PasswordLock_C_SendName final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PasswordLock_C_SendName) == 0x000004, "Wrong alignment on PasswordLock_C_SendName");
static_assert(sizeof(PasswordLock_C_SendName) == 0x000008, "Wrong size on PasswordLock_C_SendName");
static_assert(offsetof(PasswordLock_C_SendName, Param_Name) == 0x000000, "Member 'PasswordLock_C_SendName::Param_Name' has a wrong offset!");

// Function passwordLock.passwordLock_C.player_use
// 0x0090 (0x0090 - 0x0000)
struct PasswordLock_C_Player_use final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(PasswordLock_C_Player_use) == 0x000008, "Wrong alignment on PasswordLock_C_Player_use");
static_assert(sizeof(PasswordLock_C_Player_use) == 0x000090, "Wrong size on PasswordLock_C_Player_use");
static_assert(offsetof(PasswordLock_C_Player_use, Player) == 0x000000, "Member 'PasswordLock_C_Player_use::Player' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_Player_use, Hit) == 0x000008, "Member 'PasswordLock_C_Player_use::Hit' has a wrong offset!");

// Function passwordLock.passwordLock_C.thrown
// 0x0008 (0x0008 - 0x0000)
struct PasswordLock_C_Thrown final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PasswordLock_C_Thrown) == 0x000008, "Wrong alignment on PasswordLock_C_Thrown");
static_assert(sizeof(PasswordLock_C_Thrown) == 0x000008, "Wrong size on PasswordLock_C_Thrown");
static_assert(offsetof(PasswordLock_C_Thrown, Player) == 0x000000, "Member 'PasswordLock_C_Thrown::Player' has a wrong offset!");

// Function passwordLock.passwordLock_C.Open
// 0x0001 (0x0001 - 0x0000)
struct PasswordLock_C_Open final
{
public:
	bool                                          Param_Active;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PasswordLock_C_Open) == 0x000001, "Wrong alignment on PasswordLock_C_Open");
static_assert(sizeof(PasswordLock_C_Open) == 0x000001, "Wrong size on PasswordLock_C_Open");
static_assert(offsetof(PasswordLock_C_Open, Param_Active) == 0x000000, "Member 'PasswordLock_C_Open::Param_Active' has a wrong offset!");

// Function passwordLock.passwordLock_C.powerChanged
// 0x0005 (0x0005 - 0x0000)
struct PasswordLock_C_PowerChanged final
{
public:
	bool                                          Active_calc;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Active_downl;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Active_coords;                                     // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Active_play;                                       // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Active_light;                                      // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PasswordLock_C_PowerChanged) == 0x000001, "Wrong alignment on PasswordLock_C_PowerChanged");
static_assert(sizeof(PasswordLock_C_PowerChanged) == 0x000005, "Wrong size on PasswordLock_C_PowerChanged");
static_assert(offsetof(PasswordLock_C_PowerChanged, Active_calc) == 0x000000, "Member 'PasswordLock_C_PowerChanged::Active_calc' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_PowerChanged, Active_downl) == 0x000001, "Member 'PasswordLock_C_PowerChanged::Active_downl' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_PowerChanged, Active_coords) == 0x000002, "Member 'PasswordLock_C_PowerChanged::Active_coords' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_PowerChanged, Active_play) == 0x000003, "Member 'PasswordLock_C_PowerChanged::Active_play' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_PowerChanged, Active_light) == 0x000004, "Member 'PasswordLock_C_PowerChanged::Active_light' has a wrong offset!");

// Function passwordLock.passwordLock_C.damageByPlayer
// 0x0090 (0x0090 - 0x0000)
struct PasswordLock_C_DamageByPlayer final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(PasswordLock_C_DamageByPlayer) == 0x000008, "Wrong alignment on PasswordLock_C_DamageByPlayer");
static_assert(sizeof(PasswordLock_C_DamageByPlayer) == 0x000090, "Wrong size on PasswordLock_C_DamageByPlayer");
static_assert(offsetof(PasswordLock_C_DamageByPlayer, Player) == 0x000000, "Member 'PasswordLock_C_DamageByPlayer::Player' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_DamageByPlayer, Hit) == 0x000008, "Member 'PasswordLock_C_DamageByPlayer::Hit' has a wrong offset!");

// Function passwordLock.passwordLock_C.SetActive
// 0x0001 (0x0001 - 0x0000)
struct PasswordLock_C_SetActive final
{
public:
	bool                                          IsPairCall;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PasswordLock_C_SetActive) == 0x000001, "Wrong alignment on PasswordLock_C_SetActive");
static_assert(sizeof(PasswordLock_C_SetActive) == 0x000001, "Wrong size on PasswordLock_C_SetActive");
static_assert(offsetof(PasswordLock_C_SetActive, IsPairCall) == 0x000000, "Member 'PasswordLock_C_SetActive::IsPairCall' has a wrong offset!");

// Function passwordLock.passwordLock_C.beep
// 0x0008 (0x0008 - 0x0000)
struct PasswordLock_C_beep final
{
public:
	class UAudioComponent*                        CallFunc_SpawnSoundAttached_ReturnValue;           // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PasswordLock_C_beep) == 0x000008, "Wrong alignment on PasswordLock_C_beep");
static_assert(sizeof(PasswordLock_C_beep) == 0x000008, "Wrong size on PasswordLock_C_beep");
static_assert(offsetof(PasswordLock_C_beep, CallFunc_SpawnSoundAttached_ReturnValue) == 0x000000, "Member 'PasswordLock_C_beep::CallFunc_SpawnSoundAttached_ReturnValue' has a wrong offset!");

// Function passwordLock.passwordLock_C.upd
// 0x0038 (0x0038 - 0x0000)
struct PasswordLock_C_Upd final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F5B[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F5C[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        Temp_object_Variable_2;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        K2Node_Select_Default;                             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        K2Node_Select_Default_1;                           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PasswordLock_C_Upd) == 0x000008, "Wrong alignment on PasswordLock_C_Upd");
static_assert(sizeof(PasswordLock_C_Upd) == 0x000038, "Wrong size on PasswordLock_C_Upd");
static_assert(offsetof(PasswordLock_C_Upd, Temp_bool_Variable) == 0x000000, "Member 'PasswordLock_C_Upd::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_Upd, Temp_object_Variable) == 0x000008, "Member 'PasswordLock_C_Upd::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_Upd, Temp_object_Variable_1) == 0x000010, "Member 'PasswordLock_C_Upd::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_Upd, Temp_bool_Variable_1) == 0x000018, "Member 'PasswordLock_C_Upd::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_Upd, Temp_object_Variable_2) == 0x000020, "Member 'PasswordLock_C_Upd::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_Upd, K2Node_Select_Default) == 0x000028, "Member 'PasswordLock_C_Upd::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_Upd, K2Node_Select_Default_1) == 0x000030, "Member 'PasswordLock_C_Upd::K2Node_Select_Default_1' has a wrong offset!");

// Function passwordLock.passwordLock_C.isButtonUsed
// 0x0001 (0x0001 - 0x0000)
struct PasswordLock_C_IsButtonUsed final
{
public:
	bool                                          Failed;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PasswordLock_C_IsButtonUsed) == 0x000001, "Wrong alignment on PasswordLock_C_IsButtonUsed");
static_assert(sizeof(PasswordLock_C_IsButtonUsed) == 0x000001, "Wrong size on PasswordLock_C_IsButtonUsed");
static_assert(offsetof(PasswordLock_C_IsButtonUsed, Failed) == 0x000000, "Member 'PasswordLock_C_IsButtonUsed::Failed' has a wrong offset!");

// Function passwordLock.passwordLock_C.lookAt
// 0x00D8 (0x00D8 - 0x0000)
struct PasswordLock_C_LookAt final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          Return;                                            // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F5D[0x7];                                     // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Text;                                              // 0x0098(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    boundObjectReplace;                                // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_MakeLiteralText_ReturnValue;              // 0x00B0(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(PasswordLock_C_LookAt) == 0x000008, "Wrong alignment on PasswordLock_C_LookAt");
static_assert(sizeof(PasswordLock_C_LookAt) == 0x0000D8, "Wrong size on PasswordLock_C_LookAt");
static_assert(offsetof(PasswordLock_C_LookAt, Player) == 0x000000, "Member 'PasswordLock_C_LookAt::Player' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_LookAt, Hit) == 0x000008, "Member 'PasswordLock_C_LookAt::Hit' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_LookAt, Return) == 0x000090, "Member 'PasswordLock_C_LookAt::Return' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_LookAt, Text) == 0x000098, "Member 'PasswordLock_C_LookAt::Text' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_LookAt, boundObjectReplace) == 0x0000A8, "Member 'PasswordLock_C_LookAt::boundObjectReplace' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_LookAt, CallFunc_MakeLiteralText_ReturnValue) == 0x0000B0, "Member 'PasswordLock_C_LookAt::CallFunc_MakeLiteralText_ReturnValue' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_LookAt, CallFunc_Conv_TextToString_ReturnValue) == 0x0000C8, "Member 'PasswordLock_C_LookAt::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");

// Function passwordLock.passwordLock_C.noRespawn
// 0x0002 (0x0002 - 0x0000)
struct PasswordLock_C_NoRespawn final
{
public:
	bool                                          Param_NoRespawn;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PasswordLock_C_NoRespawn) == 0x000001, "Wrong alignment on PasswordLock_C_NoRespawn");
static_assert(sizeof(PasswordLock_C_NoRespawn) == 0x000002, "Wrong size on PasswordLock_C_NoRespawn");
static_assert(offsetof(PasswordLock_C_NoRespawn, Param_NoRespawn) == 0x000000, "Member 'PasswordLock_C_NoRespawn::Param_NoRespawn' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_NoRespawn, Return) == 0x000001, "Member 'PasswordLock_C_NoRespawn::Return' has a wrong offset!");

// Function passwordLock.passwordLock_C.canPickup
// 0x0001 (0x0001 - 0x0000)
struct PasswordLock_C_CanPickup final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PasswordLock_C_CanPickup) == 0x000001, "Wrong alignment on PasswordLock_C_CanPickup");
static_assert(sizeof(PasswordLock_C_CanPickup) == 0x000001, "Wrong size on PasswordLock_C_CanPickup");
static_assert(offsetof(PasswordLock_C_CanPickup, Return) == 0x000000, "Member 'PasswordLock_C_CanPickup::Return' has a wrong offset!");

// Function passwordLock.passwordLock_C.asProp
// 0x0008 (0x0008 - 0x0000)
struct PasswordLock_C_AsProp final
{
public:
	class AProp_C*                                Return;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PasswordLock_C_AsProp) == 0x000008, "Wrong alignment on PasswordLock_C_AsProp");
static_assert(sizeof(PasswordLock_C_AsProp) == 0x000008, "Wrong size on PasswordLock_C_AsProp");
static_assert(offsetof(PasswordLock_C_AsProp, Return) == 0x000000, "Member 'PasswordLock_C_AsProp::Return' has a wrong offset!");

// Function passwordLock.passwordLock_C.canBePutInContainer
// 0x0001 (0x0001 - 0x0000)
struct PasswordLock_C_CanBePutInContainer final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PasswordLock_C_CanBePutInContainer) == 0x000001, "Wrong alignment on PasswordLock_C_CanBePutInContainer");
static_assert(sizeof(PasswordLock_C_CanBePutInContainer) == 0x000001, "Wrong size on PasswordLock_C_CanBePutInContainer");
static_assert(offsetof(PasswordLock_C_CanBePutInContainer, Return) == 0x000000, "Member 'PasswordLock_C_CanBePutInContainer::Return' has a wrong offset!");

// Function passwordLock.passwordLock_C.actionOptionIndex
// 0x0098 (0x0098 - 0x0000)
struct PasswordLock_C_ActionOptionIndex final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         Param_Index;                                       // 0x0090(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_interactionActions                       Action;                                            // 0x0094(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PasswordLock_C_ActionOptionIndex) == 0x000008, "Wrong alignment on PasswordLock_C_ActionOptionIndex");
static_assert(sizeof(PasswordLock_C_ActionOptionIndex) == 0x000098, "Wrong size on PasswordLock_C_ActionOptionIndex");
static_assert(offsetof(PasswordLock_C_ActionOptionIndex, Player) == 0x000000, "Member 'PasswordLock_C_ActionOptionIndex::Player' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ActionOptionIndex, Hit) == 0x000008, "Member 'PasswordLock_C_ActionOptionIndex::Hit' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ActionOptionIndex, Param_Index) == 0x000090, "Member 'PasswordLock_C_ActionOptionIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ActionOptionIndex, Action) == 0x000094, "Member 'PasswordLock_C_ActionOptionIndex::Action' has a wrong offset!");

// Function passwordLock.passwordLock_C.UserConstructionScript
// 0x0040 (0x0040 - 0x0000)
struct PasswordLock_C_UserConstructionScript final
{
public:
	TScriptInterface<class IInt_objects_C>        CallFunc_getKey_self_CastInput;                    // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class FString                                 CallFunc_getKey_key;                               // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TScriptInterface<class IInt_objects_C>        CallFunc_getKey_self_CastInput_1;                  // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class FString                                 CallFunc_getKey_key_1;                             // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(PasswordLock_C_UserConstructionScript) == 0x000008, "Wrong alignment on PasswordLock_C_UserConstructionScript");
static_assert(sizeof(PasswordLock_C_UserConstructionScript) == 0x000040, "Wrong size on PasswordLock_C_UserConstructionScript");
static_assert(offsetof(PasswordLock_C_UserConstructionScript, CallFunc_getKey_self_CastInput) == 0x000000, "Member 'PasswordLock_C_UserConstructionScript::CallFunc_getKey_self_CastInput' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_UserConstructionScript, CallFunc_getKey_key) == 0x000010, "Member 'PasswordLock_C_UserConstructionScript::CallFunc_getKey_key' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_UserConstructionScript, CallFunc_getKey_self_CastInput_1) == 0x000020, "Member 'PasswordLock_C_UserConstructionScript::CallFunc_getKey_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_UserConstructionScript, CallFunc_getKey_key_1) == 0x000030, "Member 'PasswordLock_C_UserConstructionScript::CallFunc_getKey_key_1' has a wrong offset!");

// Function passwordLock.passwordLock_C.getTriggerData
// 0x02F0 (0x02F0 - 0x0000)
struct PasswordLock_C_GetTriggerData final
{
public:
	struct FStruct_triggerSave                    Data;                                              // 0x0000(0x00F0)(Parm, OutParm, HasGetValueTypeHash)
	TArray<bool>                                  K2Node_MakeArray_Array;                            // 0x00F0(0x0010)(ReferenceParm)
	struct FStruct_triggerSave                    CallFunc_getTriggerData_data;                      // 0x0100(0x00F0)(HasGetValueTypeHash)
	TArray<class FString>                         K2Node_MakeArray_Array_1;                          // 0x01F0(0x0010)(ReferenceParm)
	struct FStruct_triggerSave                    K2Node_SetFieldsInStruct_StructOut;                // 0x0200(0x00F0)(HasGetValueTypeHash)
};
static_assert(alignof(PasswordLock_C_GetTriggerData) == 0x000010, "Wrong alignment on PasswordLock_C_GetTriggerData");
static_assert(sizeof(PasswordLock_C_GetTriggerData) == 0x0002F0, "Wrong size on PasswordLock_C_GetTriggerData");
static_assert(offsetof(PasswordLock_C_GetTriggerData, Data) == 0x000000, "Member 'PasswordLock_C_GetTriggerData::Data' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_GetTriggerData, K2Node_MakeArray_Array) == 0x0000F0, "Member 'PasswordLock_C_GetTriggerData::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_GetTriggerData, CallFunc_getTriggerData_data) == 0x000100, "Member 'PasswordLock_C_GetTriggerData::CallFunc_getTriggerData_data' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_GetTriggerData, K2Node_MakeArray_Array_1) == 0x0001F0, "Member 'PasswordLock_C_GetTriggerData::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_GetTriggerData, K2Node_SetFieldsInStruct_StructOut) == 0x000200, "Member 'PasswordLock_C_GetTriggerData::K2Node_SetFieldsInStruct_StructOut' has a wrong offset!");

// Function passwordLock.passwordLock_C.loadTriggerData
// 0x0160 (0x0160 - 0x0000)
struct PasswordLock_C_LoadTriggerData final
{
public:
	struct FStruct_triggerSave                    Data;                                              // 0x0000(0x00F0)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x00F0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_loadTriggerData_return;                   // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F5E[0x6];                                     // 0x00F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Array_Get_Item;                           // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Array_Get_Item_1;                         // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Array_Get_Item_2;                         // 0x0118(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_3;                         // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x012C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F5F[0x3];                                     // 0x012D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0130(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Get_Item_4;                         // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F60[0x7];                                     // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_SelectString_ReturnValue;                 // 0x0148(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Get_Item_5;                         // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PasswordLock_C_LoadTriggerData) == 0x000010, "Wrong alignment on PasswordLock_C_LoadTriggerData");
static_assert(sizeof(PasswordLock_C_LoadTriggerData) == 0x000160, "Wrong size on PasswordLock_C_LoadTriggerData");
static_assert(offsetof(PasswordLock_C_LoadTriggerData, Data) == 0x000000, "Member 'PasswordLock_C_LoadTriggerData::Data' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_LoadTriggerData, Return) == 0x0000F0, "Member 'PasswordLock_C_LoadTriggerData::Return' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_LoadTriggerData, CallFunc_loadTriggerData_return) == 0x0000F1, "Member 'PasswordLock_C_LoadTriggerData::CallFunc_loadTriggerData_return' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_LoadTriggerData, CallFunc_Array_Get_Item) == 0x0000F8, "Member 'PasswordLock_C_LoadTriggerData::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_LoadTriggerData, CallFunc_Array_Get_Item_1) == 0x000108, "Member 'PasswordLock_C_LoadTriggerData::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_LoadTriggerData, CallFunc_Array_Get_Item_2) == 0x000118, "Member 'PasswordLock_C_LoadTriggerData::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_LoadTriggerData, CallFunc_Array_Get_Item_3) == 0x000128, "Member 'PasswordLock_C_LoadTriggerData::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_LoadTriggerData, CallFunc_Array_IsValidIndex_ReturnValue) == 0x00012C, "Member 'PasswordLock_C_LoadTriggerData::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_LoadTriggerData, CallFunc_Conv_IntToString_ReturnValue) == 0x000130, "Member 'PasswordLock_C_LoadTriggerData::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_LoadTriggerData, CallFunc_Array_Get_Item_4) == 0x000140, "Member 'PasswordLock_C_LoadTriggerData::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_LoadTriggerData, CallFunc_SelectString_ReturnValue) == 0x000148, "Member 'PasswordLock_C_LoadTriggerData::CallFunc_SelectString_ReturnValue' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_LoadTriggerData, CallFunc_Array_Get_Item_5) == 0x000158, "Member 'PasswordLock_C_LoadTriggerData::CallFunc_Array_Get_Item_5' has a wrong offset!");

// Function passwordLock.passwordLock_C.ignoreSave_trigger
// 0x0001 (0x0001 - 0x0000)
struct PasswordLock_C_IgnoreSave_trigger final
{
public:
	bool                                          Ignore;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PasswordLock_C_IgnoreSave_trigger) == 0x000001, "Wrong alignment on PasswordLock_C_IgnoreSave_trigger");
static_assert(sizeof(PasswordLock_C_IgnoreSave_trigger) == 0x000001, "Wrong size on PasswordLock_C_IgnoreSave_trigger");
static_assert(offsetof(PasswordLock_C_IgnoreSave_trigger, Ignore) == 0x000000, "Member 'PasswordLock_C_IgnoreSave_trigger::Ignore' has a wrong offset!");

// Function passwordLock.passwordLock_C.processKeys
// 0x0040 (0x0040 - 0x0000)
struct PasswordLock_C_ProcessKeys final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_processKeys_return;                       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F61[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_getObjectFromKey_Output;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_getObjectFromKey_Output_1;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADoor_C*                                K2Node_DynamicCast_AsDoor;                         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F62[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APasswordLock_C*                        K2Node_DynamicCast_AsPassword_Lock;                // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PasswordLock_C_ProcessKeys) == 0x000008, "Wrong alignment on PasswordLock_C_ProcessKeys");
static_assert(sizeof(PasswordLock_C_ProcessKeys) == 0x000040, "Wrong size on PasswordLock_C_ProcessKeys");
static_assert(offsetof(PasswordLock_C_ProcessKeys, Return) == 0x000000, "Member 'PasswordLock_C_ProcessKeys::Return' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ProcessKeys, CallFunc_processKeys_return) == 0x000001, "Member 'PasswordLock_C_ProcessKeys::CallFunc_processKeys_return' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ProcessKeys, CallFunc_Array_Add_ReturnValue) == 0x000004, "Member 'PasswordLock_C_ProcessKeys::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ProcessKeys, CallFunc_getMainGamemode_AsMain_Gamemode) == 0x000008, "Member 'PasswordLock_C_ProcessKeys::CallFunc_getMainGamemode_AsMain_Gamemode' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ProcessKeys, CallFunc_getObjectFromKey_Output) == 0x000010, "Member 'PasswordLock_C_ProcessKeys::CallFunc_getObjectFromKey_Output' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ProcessKeys, CallFunc_getObjectFromKey_Output_1) == 0x000018, "Member 'PasswordLock_C_ProcessKeys::CallFunc_getObjectFromKey_Output_1' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ProcessKeys, K2Node_DynamicCast_AsDoor) == 0x000020, "Member 'PasswordLock_C_ProcessKeys::K2Node_DynamicCast_AsDoor' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ProcessKeys, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'PasswordLock_C_ProcessKeys::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ProcessKeys, K2Node_DynamicCast_AsPassword_Lock) == 0x000030, "Member 'PasswordLock_C_ProcessKeys::K2Node_DynamicCast_AsPassword_Lock' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_ProcessKeys, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'PasswordLock_C_ProcessKeys::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function passwordLock.passwordLock_C.dreamInv
// 0x0018 (0x0018 - 0x0000)
struct PasswordLock_C_DreamInv final
{
public:
	TArray<struct FStruct_save>                   Invv;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class ADreamBase_C*                           Base;                                              // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PasswordLock_C_DreamInv) == 0x000008, "Wrong alignment on PasswordLock_C_DreamInv");
static_assert(sizeof(PasswordLock_C_DreamInv) == 0x000018, "Wrong size on PasswordLock_C_DreamInv");
static_assert(offsetof(PasswordLock_C_DreamInv, Invv) == 0x000000, "Member 'PasswordLock_C_DreamInv::Invv' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_DreamInv, Base) == 0x000010, "Member 'PasswordLock_C_DreamInv::Base' has a wrong offset!");

// Function passwordLock.passwordLock_C.getActionOptions
// 0x0058 (0x0058 - 0x0000)
struct PasswordLock_C_GetActionOptions final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Component;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         Options;                                           // 0x0018(0x0010)(Parm, OutParm)
	TArray<Enum_interactionActions>               Options_enum;                                      // 0x0028(0x0010)(Parm, OutParm)
	TArray<class FText>                           OptionsNamesOverlay;                               // 0x0038(0x0010)(Parm, OutParm)
	TArray<Enum_interactionActions>               K2Node_MakeArray_Array;                            // 0x0048(0x0010)(ReferenceParm)
};
static_assert(alignof(PasswordLock_C_GetActionOptions) == 0x000008, "Wrong alignment on PasswordLock_C_GetActionOptions");
static_assert(sizeof(PasswordLock_C_GetActionOptions) == 0x000058, "Wrong size on PasswordLock_C_GetActionOptions");
static_assert(offsetof(PasswordLock_C_GetActionOptions, Player) == 0x000000, "Member 'PasswordLock_C_GetActionOptions::Player' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_GetActionOptions, Component) == 0x000008, "Member 'PasswordLock_C_GetActionOptions::Component' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_GetActionOptions, Actor) == 0x000010, "Member 'PasswordLock_C_GetActionOptions::Actor' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_GetActionOptions, Options) == 0x000018, "Member 'PasswordLock_C_GetActionOptions::Options' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_GetActionOptions, Options_enum) == 0x000028, "Member 'PasswordLock_C_GetActionOptions::Options_enum' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_GetActionOptions, OptionsNamesOverlay) == 0x000038, "Member 'PasswordLock_C_GetActionOptions::OptionsNamesOverlay' has a wrong offset!");
static_assert(offsetof(PasswordLock_C_GetActionOptions, K2Node_MakeArray_Array) == 0x000048, "Member 'PasswordLock_C_GetActionOptions::K2Node_MakeArray_Array' has a wrong offset!");

}

