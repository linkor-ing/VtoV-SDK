#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Prop_arirDisint

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function prop_arirDisint.prop_arirDisint_C.ExecuteUbergraph_prop_arirDisint
// 0x0010 (0x0010 - 0x0000)
struct Prop_arirDisint_C_ExecuteUbergraph_prop_arirDisint final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37FE[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player;                               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_arirDisint_C_ExecuteUbergraph_prop_arirDisint) == 0x000008, "Wrong alignment on Prop_arirDisint_C_ExecuteUbergraph_prop_arirDisint");
static_assert(sizeof(Prop_arirDisint_C_ExecuteUbergraph_prop_arirDisint) == 0x000010, "Wrong size on Prop_arirDisint_C_ExecuteUbergraph_prop_arirDisint");
static_assert(offsetof(Prop_arirDisint_C_ExecuteUbergraph_prop_arirDisint, EntryPoint) == 0x000000, "Member 'Prop_arirDisint_C_ExecuteUbergraph_prop_arirDisint::EntryPoint' has a wrong offset!");
static_assert(offsetof(Prop_arirDisint_C_ExecuteUbergraph_prop_arirDisint, K2Node_Event_player) == 0x000008, "Member 'Prop_arirDisint_C_ExecuteUbergraph_prop_arirDisint::K2Node_Event_player' has a wrong offset!");

// Function prop_arirDisint.prop_arirDisint_C.shoot
// 0x01E0 (0x01E0 - 0x0000)
struct Prop_arirDisint_C_Shoot final
{
public:
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0008(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37FF[0xC];                                     // 0x0024(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Temp_struct_Variable;                              // 0x0030(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue_1;     // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      CallFunc_obj_statDynPhys_obj;                      // 0x0068(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue_1;      // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_SphereTraceSingleForObjects_OutHit;       // 0x00A8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingleForObjects_ReturnValue;  // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0132(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3800[0x1];                                     // 0x0133(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0154(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0160(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3801[0x4];                                     // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0180(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x019C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3802[0x4];                                     // 0x01B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDisintegrateComponent_C*               CallFunc_AddComponent_ReturnValue;                 // 0x01B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CallFunc_K2_GetRootComponent_ReturnValue;          // 0x01C0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_DynamicCast_AsPrimitive_Component;          // 0x01C8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECollisionChannel                             CallFunc_GetCollisionObjectType_ReturnValue;       // 0x01D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x01D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x01D3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x01D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Prop_arirDisint_C_Shoot) == 0x000010, "Wrong alignment on Prop_arirDisint_C_Shoot");
static_assert(sizeof(Prop_arirDisint_C_Shoot) == 0x0001E0, "Wrong size on Prop_arirDisint_C_Shoot");
static_assert(offsetof(Prop_arirDisint_C_Shoot, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x000000, "Member 'Prop_arirDisint_C_Shoot::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_arirDisint_C_Shoot, Temp_object_Variable) == 0x000008, "Member 'Prop_arirDisint_C_Shoot::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(Prop_arirDisint_C_Shoot, CallFunc_GetActorForwardVector_ReturnValue) == 0x000018, "Member 'Prop_arirDisint_C_Shoot::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_arirDisint_C_Shoot, Temp_struct_Variable) == 0x000030, "Member 'Prop_arirDisint_C_Shoot::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(Prop_arirDisint_C_Shoot, CallFunc_GetPlayerCameraManager_ReturnValue_1) == 0x000060, "Member 'Prop_arirDisint_C_Shoot::CallFunc_GetPlayerCameraManager_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Prop_arirDisint_C_Shoot, CallFunc_obj_statDynPhys_obj) == 0x000068, "Member 'Prop_arirDisint_C_Shoot::CallFunc_obj_statDynPhys_obj' has a wrong offset!");
static_assert(offsetof(Prop_arirDisint_C_Shoot, CallFunc_GetActorForwardVector_ReturnValue_1) == 0x000078, "Member 'Prop_arirDisint_C_Shoot::CallFunc_GetActorForwardVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Prop_arirDisint_C_Shoot, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000084, "Member 'Prop_arirDisint_C_Shoot::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_arirDisint_C_Shoot, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000090, "Member 'Prop_arirDisint_C_Shoot::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_arirDisint_C_Shoot, CallFunc_Add_VectorVector_ReturnValue) == 0x00009C, "Member 'Prop_arirDisint_C_Shoot::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_arirDisint_C_Shoot, CallFunc_SphereTraceSingleForObjects_OutHit) == 0x0000A8, "Member 'Prop_arirDisint_C_Shoot::CallFunc_SphereTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(Prop_arirDisint_C_Shoot, CallFunc_SphereTraceSingleForObjects_ReturnValue) == 0x000130, "Member 'Prop_arirDisint_C_Shoot::CallFunc_SphereTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_arirDisint_C_Shoot, CallFunc_BreakHitResult_bBlockingHit) == 0x000131, "Member 'Prop_arirDisint_C_Shoot::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(Prop_arirDisint_C_Shoot, CallFunc_BreakHitResult_bInitialOverlap) == 0x000132, "Member 'Prop_arirDisint_C_Shoot::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(Prop_arirDisint_C_Shoot, CallFunc_BreakHitResult_Time) == 0x000134, "Member 'Prop_arirDisint_C_Shoot::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(Prop_arirDisint_C_Shoot, CallFunc_BreakHitResult_Distance) == 0x000138, "Member 'Prop_arirDisint_C_Shoot::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(Prop_arirDisint_C_Shoot, CallFunc_BreakHitResult_Location) == 0x00013C, "Member 'Prop_arirDisint_C_Shoot::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(Prop_arirDisint_C_Shoot, CallFunc_BreakHitResult_ImpactPoint) == 0x000148, "Member 'Prop_arirDisint_C_Shoot::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(Prop_arirDisint_C_Shoot, CallFunc_BreakHitResult_Normal) == 0x000154, "Member 'Prop_arirDisint_C_Shoot::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(Prop_arirDisint_C_Shoot, CallFunc_BreakHitResult_ImpactNormal) == 0x000160, "Member 'Prop_arirDisint_C_Shoot::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(Prop_arirDisint_C_Shoot, CallFunc_BreakHitResult_PhysMat) == 0x000170, "Member 'Prop_arirDisint_C_Shoot::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(Prop_arirDisint_C_Shoot, CallFunc_BreakHitResult_HitActor) == 0x000178, "Member 'Prop_arirDisint_C_Shoot::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(Prop_arirDisint_C_Shoot, CallFunc_BreakHitResult_HitComponent) == 0x000180, "Member 'Prop_arirDisint_C_Shoot::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(Prop_arirDisint_C_Shoot, CallFunc_BreakHitResult_HitBoneName) == 0x000188, "Member 'Prop_arirDisint_C_Shoot::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(Prop_arirDisint_C_Shoot, CallFunc_BreakHitResult_HitItem) == 0x000190, "Member 'Prop_arirDisint_C_Shoot::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(Prop_arirDisint_C_Shoot, CallFunc_BreakHitResult_ElementIndex) == 0x000194, "Member 'Prop_arirDisint_C_Shoot::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(Prop_arirDisint_C_Shoot, CallFunc_BreakHitResult_FaceIndex) == 0x000198, "Member 'Prop_arirDisint_C_Shoot::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(Prop_arirDisint_C_Shoot, CallFunc_BreakHitResult_TraceStart) == 0x00019C, "Member 'Prop_arirDisint_C_Shoot::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(Prop_arirDisint_C_Shoot, CallFunc_BreakHitResult_TraceEnd) == 0x0001A8, "Member 'Prop_arirDisint_C_Shoot::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(Prop_arirDisint_C_Shoot, CallFunc_AddComponent_ReturnValue) == 0x0001B8, "Member 'Prop_arirDisint_C_Shoot::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_arirDisint_C_Shoot, CallFunc_K2_GetRootComponent_ReturnValue) == 0x0001C0, "Member 'Prop_arirDisint_C_Shoot::CallFunc_K2_GetRootComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_arirDisint_C_Shoot, K2Node_DynamicCast_AsPrimitive_Component) == 0x0001C8, "Member 'Prop_arirDisint_C_Shoot::K2Node_DynamicCast_AsPrimitive_Component' has a wrong offset!");
static_assert(offsetof(Prop_arirDisint_C_Shoot, K2Node_DynamicCast_bSuccess) == 0x0001D0, "Member 'Prop_arirDisint_C_Shoot::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Prop_arirDisint_C_Shoot, CallFunc_GetCollisionObjectType_ReturnValue) == 0x0001D1, "Member 'Prop_arirDisint_C_Shoot::CallFunc_GetCollisionObjectType_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_arirDisint_C_Shoot, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0001D2, "Member 'Prop_arirDisint_C_Shoot::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_arirDisint_C_Shoot, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0001D3, "Member 'Prop_arirDisint_C_Shoot::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Prop_arirDisint_C_Shoot, CallFunc_BooleanOR_ReturnValue) == 0x0001D4, "Member 'Prop_arirDisint_C_Shoot::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function prop_arirDisint.prop_arirDisint_C.playerHandUse_RMB
// 0x0008 (0x0008 - 0x0000)
struct Prop_arirDisint_C_PlayerHandUse_RMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_arirDisint_C_PlayerHandUse_RMB) == 0x000008, "Wrong alignment on Prop_arirDisint_C_PlayerHandUse_RMB");
static_assert(sizeof(Prop_arirDisint_C_PlayerHandUse_RMB) == 0x000008, "Wrong size on Prop_arirDisint_C_PlayerHandUse_RMB");
static_assert(offsetof(Prop_arirDisint_C_PlayerHandUse_RMB, Player) == 0x000000, "Member 'Prop_arirDisint_C_PlayerHandUse_RMB::Player' has a wrong offset!");

}

