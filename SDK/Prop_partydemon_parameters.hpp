#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Prop_partydemon

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function prop_partydemon.prop_partydemon_C.ExecuteUbergraph_prop_partydemon
// 0x00B0 (0x00B0 - 0x0000)
struct Prop_partydemon_C_ExecuteUbergraph_prop_partydemon final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_actor;                                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit;                                  // 0x0014(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                K2Node_Event_impact;                               // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_skipSetting;                          // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Prop_partydemon_C_ExecuteUbergraph_prop_partydemon) == 0x000008, "Wrong alignment on Prop_partydemon_C_ExecuteUbergraph_prop_partydemon");
static_assert(sizeof(Prop_partydemon_C_ExecuteUbergraph_prop_partydemon) == 0x0000B0, "Wrong size on Prop_partydemon_C_ExecuteUbergraph_prop_partydemon");
static_assert(offsetof(Prop_partydemon_C_ExecuteUbergraph_prop_partydemon, EntryPoint) == 0x000000, "Member 'Prop_partydemon_C_ExecuteUbergraph_prop_partydemon::EntryPoint' has a wrong offset!");
static_assert(offsetof(Prop_partydemon_C_ExecuteUbergraph_prop_partydemon, K2Node_Event_actor) == 0x000008, "Member 'Prop_partydemon_C_ExecuteUbergraph_prop_partydemon::K2Node_Event_actor' has a wrong offset!");
static_assert(offsetof(Prop_partydemon_C_ExecuteUbergraph_prop_partydemon, K2Node_Event_damage) == 0x000010, "Member 'Prop_partydemon_C_ExecuteUbergraph_prop_partydemon::K2Node_Event_damage' has a wrong offset!");
static_assert(offsetof(Prop_partydemon_C_ExecuteUbergraph_prop_partydemon, K2Node_Event_hit) == 0x000014, "Member 'Prop_partydemon_C_ExecuteUbergraph_prop_partydemon::K2Node_Event_hit' has a wrong offset!");
static_assert(offsetof(Prop_partydemon_C_ExecuteUbergraph_prop_partydemon, K2Node_Event_impact) == 0x00009C, "Member 'Prop_partydemon_C_ExecuteUbergraph_prop_partydemon::K2Node_Event_impact' has a wrong offset!");
static_assert(offsetof(Prop_partydemon_C_ExecuteUbergraph_prop_partydemon, K2Node_Event_skipSetting) == 0x0000A8, "Member 'Prop_partydemon_C_ExecuteUbergraph_prop_partydemon::K2Node_Event_skipSetting' has a wrong offset!");

// Function prop_partydemon.prop_partydemon_C.addDamage
// 0x00A8 (0x00A8 - 0x0000)
struct Prop_partydemon_C_AddDamage final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Param_Hit;                                         // 0x000C(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                Impact;                                            // 0x0094(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipSetting;                                       // 0x00A0(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Prop_partydemon_C_AddDamage) == 0x000008, "Wrong alignment on Prop_partydemon_C_AddDamage");
static_assert(sizeof(Prop_partydemon_C_AddDamage) == 0x0000A8, "Wrong size on Prop_partydemon_C_AddDamage");
static_assert(offsetof(Prop_partydemon_C_AddDamage, Actor) == 0x000000, "Member 'Prop_partydemon_C_AddDamage::Actor' has a wrong offset!");
static_assert(offsetof(Prop_partydemon_C_AddDamage, Damage) == 0x000008, "Member 'Prop_partydemon_C_AddDamage::Damage' has a wrong offset!");
static_assert(offsetof(Prop_partydemon_C_AddDamage, Param_Hit) == 0x00000C, "Member 'Prop_partydemon_C_AddDamage::Param_Hit' has a wrong offset!");
static_assert(offsetof(Prop_partydemon_C_AddDamage, Impact) == 0x000094, "Member 'Prop_partydemon_C_AddDamage::Impact' has a wrong offset!");
static_assert(offsetof(Prop_partydemon_C_AddDamage, SkipSetting) == 0x0000A0, "Member 'Prop_partydemon_C_AddDamage::SkipSetting' has a wrong offset!");

}

