#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Prop_equipment

#include "Basic.hpp"

#include "Struct_save_structs.hpp"
#include "Enum_interactionActions_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function prop_equipment.prop_equipment_C.ExecuteUbergraph_prop_equipment
// 0x00B8 (0x00B8 - 0x0000)
struct Prop_equipment_C_ExecuteUbergraph_prop_equipment final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_1;                             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player;                               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit;                                  // 0x0018(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	Enum_interactionActions                       K2Node_Event_action;                               // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A2[0x6];                                       // 0x00A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAttachParentActor_ReturnValue;         // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSimulatingPhysics_ReturnValue;          // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Prop_equipment_C_ExecuteUbergraph_prop_equipment) == 0x000008, "Wrong alignment on Prop_equipment_C_ExecuteUbergraph_prop_equipment");
static_assert(sizeof(Prop_equipment_C_ExecuteUbergraph_prop_equipment) == 0x0000B8, "Wrong size on Prop_equipment_C_ExecuteUbergraph_prop_equipment");
static_assert(offsetof(Prop_equipment_C_ExecuteUbergraph_prop_equipment, EntryPoint) == 0x000000, "Member 'Prop_equipment_C_ExecuteUbergraph_prop_equipment::EntryPoint' has a wrong offset!");
static_assert(offsetof(Prop_equipment_C_ExecuteUbergraph_prop_equipment, K2Node_Event_player_1) == 0x000008, "Member 'Prop_equipment_C_ExecuteUbergraph_prop_equipment::K2Node_Event_player_1' has a wrong offset!");
static_assert(offsetof(Prop_equipment_C_ExecuteUbergraph_prop_equipment, K2Node_Event_player) == 0x000010, "Member 'Prop_equipment_C_ExecuteUbergraph_prop_equipment::K2Node_Event_player' has a wrong offset!");
static_assert(offsetof(Prop_equipment_C_ExecuteUbergraph_prop_equipment, K2Node_Event_hit) == 0x000018, "Member 'Prop_equipment_C_ExecuteUbergraph_prop_equipment::K2Node_Event_hit' has a wrong offset!");
static_assert(offsetof(Prop_equipment_C_ExecuteUbergraph_prop_equipment, K2Node_Event_action) == 0x0000A0, "Member 'Prop_equipment_C_ExecuteUbergraph_prop_equipment::K2Node_Event_action' has a wrong offset!");
static_assert(offsetof(Prop_equipment_C_ExecuteUbergraph_prop_equipment, K2Node_SwitchEnum_CmpSuccess) == 0x0000A1, "Member 'Prop_equipment_C_ExecuteUbergraph_prop_equipment::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(Prop_equipment_C_ExecuteUbergraph_prop_equipment, CallFunc_GetAttachParentActor_ReturnValue) == 0x0000A8, "Member 'Prop_equipment_C_ExecuteUbergraph_prop_equipment::CallFunc_GetAttachParentActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_equipment_C_ExecuteUbergraph_prop_equipment, CallFunc_IsValid_ReturnValue) == 0x0000B0, "Member 'Prop_equipment_C_ExecuteUbergraph_prop_equipment::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_equipment_C_ExecuteUbergraph_prop_equipment, CallFunc_IsSimulatingPhysics_ReturnValue) == 0x0000B1, "Member 'Prop_equipment_C_ExecuteUbergraph_prop_equipment::CallFunc_IsSimulatingPhysics_ReturnValue' has a wrong offset!");

// Function prop_equipment.prop_equipment_C.equip
// 0x00D0 (0x00D0 - 0x0000)
struct Prop_equipment_C_Equip final
{
public:
	struct FStruct_save                           CallFunc_getData_data;                             // 0x0000(0x00C0)(HasGetValueTypeHash)
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode;          // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddEquipment_return;                      // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Prop_equipment_C_Equip) == 0x000010, "Wrong alignment on Prop_equipment_C_Equip");
static_assert(sizeof(Prop_equipment_C_Equip) == 0x0000D0, "Wrong size on Prop_equipment_C_Equip");
static_assert(offsetof(Prop_equipment_C_Equip, CallFunc_getData_data) == 0x000000, "Member 'Prop_equipment_C_Equip::CallFunc_getData_data' has a wrong offset!");
static_assert(offsetof(Prop_equipment_C_Equip, CallFunc_getMainGamemode_AsMain_Gamemode) == 0x0000C0, "Member 'Prop_equipment_C_Equip::CallFunc_getMainGamemode_AsMain_Gamemode' has a wrong offset!");
static_assert(offsetof(Prop_equipment_C_Equip, CallFunc_AddEquipment_return) == 0x0000C8, "Member 'Prop_equipment_C_Equip::CallFunc_AddEquipment_return' has a wrong offset!");

// Function prop_equipment.prop_equipment_C.actionOptionIndex
// 0x0098 (0x0098 - 0x0000)
struct Prop_equipment_C_ActionOptionIndex final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Param_Hit;                                         // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	Enum_interactionActions                       Action;                                            // 0x0090(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_equipment_C_ActionOptionIndex) == 0x000008, "Wrong alignment on Prop_equipment_C_ActionOptionIndex");
static_assert(sizeof(Prop_equipment_C_ActionOptionIndex) == 0x000098, "Wrong size on Prop_equipment_C_ActionOptionIndex");
static_assert(offsetof(Prop_equipment_C_ActionOptionIndex, Player) == 0x000000, "Member 'Prop_equipment_C_ActionOptionIndex::Player' has a wrong offset!");
static_assert(offsetof(Prop_equipment_C_ActionOptionIndex, Param_Hit) == 0x000008, "Member 'Prop_equipment_C_ActionOptionIndex::Param_Hit' has a wrong offset!");
static_assert(offsetof(Prop_equipment_C_ActionOptionIndex, Action) == 0x000090, "Member 'Prop_equipment_C_ActionOptionIndex::Action' has a wrong offset!");

// Function prop_equipment.prop_equipment_C.playerHandUse_RMB
// 0x0008 (0x0008 - 0x0000)
struct Prop_equipment_C_PlayerHandUse_RMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_equipment_C_PlayerHandUse_RMB) == 0x000008, "Wrong alignment on Prop_equipment_C_PlayerHandUse_RMB");
static_assert(sizeof(Prop_equipment_C_PlayerHandUse_RMB) == 0x000008, "Wrong size on Prop_equipment_C_PlayerHandUse_RMB");
static_assert(offsetof(Prop_equipment_C_PlayerHandUse_RMB, Player) == 0x000000, "Member 'Prop_equipment_C_PlayerHandUse_RMB::Player' has a wrong offset!");

// Function prop_equipment.prop_equipment_C.getActionOptions
// 0x0060 (0x0060 - 0x0000)
struct Prop_equipment_C_GetActionOptions final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Component;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         Options;                                           // 0x0018(0x0010)(Parm, OutParm)
	TArray<Enum_interactionActions>               Options_enum;                                      // 0x0028(0x0010)(Parm, OutParm)
	TArray<class FText>                           OptionsNamesOverlay;                               // 0x0038(0x0010)(Parm, OutParm)
	uint8                                         Number;                                            // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<Enum_interactionActions>               K2Node_MakeArray_Array;                            // 0x0050(0x0010)(ReferenceParm)
};
static_assert(alignof(Prop_equipment_C_GetActionOptions) == 0x000008, "Wrong alignment on Prop_equipment_C_GetActionOptions");
static_assert(sizeof(Prop_equipment_C_GetActionOptions) == 0x000060, "Wrong size on Prop_equipment_C_GetActionOptions");
static_assert(offsetof(Prop_equipment_C_GetActionOptions, Player) == 0x000000, "Member 'Prop_equipment_C_GetActionOptions::Player' has a wrong offset!");
static_assert(offsetof(Prop_equipment_C_GetActionOptions, Component) == 0x000008, "Member 'Prop_equipment_C_GetActionOptions::Component' has a wrong offset!");
static_assert(offsetof(Prop_equipment_C_GetActionOptions, Actor) == 0x000010, "Member 'Prop_equipment_C_GetActionOptions::Actor' has a wrong offset!");
static_assert(offsetof(Prop_equipment_C_GetActionOptions, Options) == 0x000018, "Member 'Prop_equipment_C_GetActionOptions::Options' has a wrong offset!");
static_assert(offsetof(Prop_equipment_C_GetActionOptions, Options_enum) == 0x000028, "Member 'Prop_equipment_C_GetActionOptions::Options_enum' has a wrong offset!");
static_assert(offsetof(Prop_equipment_C_GetActionOptions, OptionsNamesOverlay) == 0x000038, "Member 'Prop_equipment_C_GetActionOptions::OptionsNamesOverlay' has a wrong offset!");
static_assert(offsetof(Prop_equipment_C_GetActionOptions, Number) == 0x000048, "Member 'Prop_equipment_C_GetActionOptions::Number' has a wrong offset!");
static_assert(offsetof(Prop_equipment_C_GetActionOptions, K2Node_MakeArray_Array) == 0x000050, "Member 'Prop_equipment_C_GetActionOptions::K2Node_MakeArray_Array' has a wrong offset!");

}

