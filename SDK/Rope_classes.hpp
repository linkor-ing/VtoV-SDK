#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Rope

#include "Basic.hpp"

#include "Enum_interactionActions_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass rope.rope_C
// 0x00D8 (0x02F8 - 0x0220)
class ARope_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Hook_b;                                            // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere1;                                           // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCableComponent*                        Cable;                                             // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        B;                                                 // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            PhysicsConstraint;                                 // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        A;                                                 // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor_A;                                           // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor_B;                                           // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Dist;                                              // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Attached_a;                                        // 0x0274(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Attached_b;                                        // 0x0275(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_271E[0x2];                                     // 0x0276(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    Component_A;                                       // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Component_B;                                       // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsThrown;                                          // 0x0288(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_271F[0x3];                                     // 0x0289(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Lastloc;                                           // 0x028C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Phys;                                              // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDist;                                           // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AddVel;                                            // 0x02A4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class FString                                 AttachKey_a;                                       // 0x02B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 AttachKey_b;                                       // 0x02C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                AttachLoc_a;                                       // 0x02D0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AttachLoc_b;                                       // 0x02DC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LocW_b;                                            // 0x02E8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_rope(int32 EntryPoint);
	void BndEvt__rope_PhysicsConstraint_K2Node_ComponentBoundEvent_0_ConstraintBrokenSignature__DelegateSignature(int32 ConstraintIndex);
	void Microwave();
	void ReceivedPhyiscsDamage();
	void PlayerHandUse_RMB(class AMainPlayer_C* Player);
	void PlayerHandUse_LMB(class AMainPlayer_C* Player);
	void Exploded(float Damage, const struct FVector& Location);
	void ExtinguishFire();
	void PlayerHandRelease_RMB(class AMainPlayer_C* Player);
	void PlayerHandRelease_LMB(class AMainPlayer_C* Player);
	void PlayerHandMouseWheel(class AMainPlayer_C* Player, float WheelDelta);
	void PlayerHandMouse(class AMainPlayer_C* Player, const struct FVector2D& Mouse);
	void PlayerHandAnyKey(class AMainPlayer_C* Player, const struct FKey& Key, bool Pressed);
	void MicrowaveElec();
	void AddTemperature(float Temperature);
	void AccumulateTemperature(float Temperature, float Speed);
	void ActionName(class AMainPlayer_C* Player, const struct FHitResult& Hit, const class FString& Param_Name);
	void Stepped(float Volume);
	void PlayerLookAway(class AMainPlayer_C* Player);
	void ReachedByExplosion(const struct FVector& Location, float Damage);
	void bitten();
	void Slice(bool Clean);
	void PlayerUsedOn(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void AttemptIgnite();
	void Hooked(class AHook_C* Hook);
	void SignalDeleted();
	void SignalSaved();
	void StuffUpgraded(class AMainGamemode_C* GameMode);
	void Unfoc();
	void SettingsApplied(const struct FStruct_settings& Settings);
	void Unfocused();
	void GamemodePreLoad();
	void AnyKey(const struct FKey& Key, bool Pressed);
	void GamemodeMakeKeys();
	void PropRenderer_finishProps();
	void ApplyColor(const struct FLinearColor& Color);
	void DriveDetached();
	void Player_use(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void Kicked(bool Kick);
	void SendName(class FName Param_Name);
	void broken();
	void broken_fire();
	void Thrown(class AMainPlayer_C* Player);
	void DamageByPlayer(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void UpdateStrAgl();
	void SetIgnoreSave(bool Ignore);
	void ImpactDamage(float Damage, const struct FHitResult& Hit, class AActor* Actor, const struct FVector& Impact);
	void EnterWater(class AWaterVolume_C* Water);
	void Assign();
	void ActionOptionIndex(class AMainPlayer_C* Player, const struct FHitResult& Hit, int32 Param_Index, Enum_interactionActions Action);
	void D_a(class AActor* DestroyedActor);
	void LeaveWater(class AWaterVolume_C* Water);
	void CustomEvent();
	void CustomEvent_0();
	void EnterWaterOrigin(class AWaterVolume_C* Water);
	void LeaveWaterOrigin(class AWaterVolume_C* Water);
	void D_b(class AActor* DestroyedActor);
	void Ignite(float Fuel);
	void Eaten();
	void FireDamage(float Damage);
	void GamemodeBeginPlay();
	void Virus(bool Activate);
	void SteppedOn(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void Unhook();
	void DigUp();
	void PhysPreDestroyed();
	void PhysDestroyed();
	void SetKey(const class FString& Key);
	void AddDamage(class AActor* Actor, float Damage, const struct FHitResult& Hit, const struct FVector& Impact, bool SkipSetting);
	void SetPropProps(bool Static, bool Frozen, bool Active);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void Attach_a(const struct FHitResult& Hit, class AActor* Actor, bool CheckLen);
	void Attach_b(const struct FHitResult& Hit, bool CheckLen, bool ForceLen);
	void SetLength();
	void SetLocs();
	void IgnoreSave(bool* Param_IgnoreSave);
	void LoadData(const struct FStruct_save& Data, bool* Return);
	void GetData(struct FStruct_save* Data);
	void SkipPreDelete(bool* Skip);
	void CanBePutInContainer(bool* Return);
	void AsProp(class AProp_C** Return);
	void CanPickup(bool* Return);
	void NoRespawn(bool Param_NoRespawn, bool* Return);
	void LookAt(class AMainPlayer_C* Player, const struct FHitResult& Hit, bool* Return, class FString* Text, class UPrimitiveComponent** boundObjectReplace);
	void IsButtonUsed(bool* Failed);
	void DreamInv(TArray<struct FStruct_save>& Invv, class ADreamBase_C** Base);
	void GetActionOptions(class AMainPlayer_C* Player, class UPrimitiveComponent* Component, class AActor* Actor, TArray<class FString>* Options, TArray<Enum_interactionActions>* Options_enum, TArray<class FText>* OptionsNamesOverlay);
	void SetPath(const TArray<struct FVector>& Path, bool* Return);
	void GetOnlyKey(class FString* Key);
	void ProcessKeys(bool* Return);
	void CanBeUsedHold(bool* Return);
	void GetKey(class FString* Key);
	void ToolboxFix(class AProp_toolbox_C* Toolbox, bool* Return);
	void GascanFuel(class AProp_gascan_C* Gascan, bool* Fueled);
	void SkipRadial(bool* Skip);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"rope_C">();
	}
	static class ARope_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARope_C>();
	}
};
static_assert(alignof(ARope_C) == 0x000008, "Wrong alignment on ARope_C");
static_assert(sizeof(ARope_C) == 0x0002F8, "Wrong size on ARope_C");
static_assert(offsetof(ARope_C, UberGraphFrame) == 0x000220, "Member 'ARope_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ARope_C, Hook_b) == 0x000228, "Member 'ARope_C::Hook_b' has a wrong offset!");
static_assert(offsetof(ARope_C, Sphere1) == 0x000230, "Member 'ARope_C::Sphere1' has a wrong offset!");
static_assert(offsetof(ARope_C, Sphere) == 0x000238, "Member 'ARope_C::Sphere' has a wrong offset!");
static_assert(offsetof(ARope_C, Cable) == 0x000240, "Member 'ARope_C::Cable' has a wrong offset!");
static_assert(offsetof(ARope_C, B) == 0x000248, "Member 'ARope_C::B' has a wrong offset!");
static_assert(offsetof(ARope_C, PhysicsConstraint) == 0x000250, "Member 'ARope_C::PhysicsConstraint' has a wrong offset!");
static_assert(offsetof(ARope_C, A) == 0x000258, "Member 'ARope_C::A' has a wrong offset!");
static_assert(offsetof(ARope_C, Actor_A) == 0x000260, "Member 'ARope_C::Actor_A' has a wrong offset!");
static_assert(offsetof(ARope_C, Actor_B) == 0x000268, "Member 'ARope_C::Actor_B' has a wrong offset!");
static_assert(offsetof(ARope_C, Dist) == 0x000270, "Member 'ARope_C::Dist' has a wrong offset!");
static_assert(offsetof(ARope_C, Attached_a) == 0x000274, "Member 'ARope_C::Attached_a' has a wrong offset!");
static_assert(offsetof(ARope_C, Attached_b) == 0x000275, "Member 'ARope_C::Attached_b' has a wrong offset!");
static_assert(offsetof(ARope_C, Component_A) == 0x000278, "Member 'ARope_C::Component_A' has a wrong offset!");
static_assert(offsetof(ARope_C, Component_B) == 0x000280, "Member 'ARope_C::Component_B' has a wrong offset!");
static_assert(offsetof(ARope_C, IsThrown) == 0x000288, "Member 'ARope_C::IsThrown' has a wrong offset!");
static_assert(offsetof(ARope_C, Lastloc) == 0x00028C, "Member 'ARope_C::Lastloc' has a wrong offset!");
static_assert(offsetof(ARope_C, Phys) == 0x000298, "Member 'ARope_C::Phys' has a wrong offset!");
static_assert(offsetof(ARope_C, MaxDist) == 0x0002A0, "Member 'ARope_C::MaxDist' has a wrong offset!");
static_assert(offsetof(ARope_C, AddVel) == 0x0002A4, "Member 'ARope_C::AddVel' has a wrong offset!");
static_assert(offsetof(ARope_C, AttachKey_a) == 0x0002B0, "Member 'ARope_C::AttachKey_a' has a wrong offset!");
static_assert(offsetof(ARope_C, AttachKey_b) == 0x0002C0, "Member 'ARope_C::AttachKey_b' has a wrong offset!");
static_assert(offsetof(ARope_C, AttachLoc_a) == 0x0002D0, "Member 'ARope_C::AttachLoc_a' has a wrong offset!");
static_assert(offsetof(ARope_C, AttachLoc_b) == 0x0002DC, "Member 'ARope_C::AttachLoc_b' has a wrong offset!");
static_assert(offsetof(ARope_C, LocW_b) == 0x0002E8, "Member 'ARope_C::LocW_b' has a wrong offset!");

}

