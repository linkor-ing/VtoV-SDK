#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Dream_wend

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "DreamBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass dream_wend.dream_wend_C
// 0x0068 (0x02D8 - 0x0270)
class ADream_wend_C final : public ADreamBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_Dream_wend_C;                       // 0x0270(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   W4;                                                // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   W3;                                                // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   W2;                                                // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   W1;                                                // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 One;                                               // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Four;                                              // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Three;                                             // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Two;                                               // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Billboard1;                                        // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cylinder;                                          // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         A;                                                 // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_dream_wend(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"dream_wend_C">();
	}
	static class ADream_wend_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADream_wend_C>();
	}
};
static_assert(alignof(ADream_wend_C) == 0x000008, "Wrong alignment on ADream_wend_C");
static_assert(sizeof(ADream_wend_C) == 0x0002D8, "Wrong size on ADream_wend_C");
static_assert(offsetof(ADream_wend_C, UberGraphFrame_Dream_wend_C) == 0x000270, "Member 'ADream_wend_C::UberGraphFrame_Dream_wend_C' has a wrong offset!");
static_assert(offsetof(ADream_wend_C, W4) == 0x000278, "Member 'ADream_wend_C::W4' has a wrong offset!");
static_assert(offsetof(ADream_wend_C, W3) == 0x000280, "Member 'ADream_wend_C::W3' has a wrong offset!");
static_assert(offsetof(ADream_wend_C, W2) == 0x000288, "Member 'ADream_wend_C::W2' has a wrong offset!");
static_assert(offsetof(ADream_wend_C, W1) == 0x000290, "Member 'ADream_wend_C::W1' has a wrong offset!");
static_assert(offsetof(ADream_wend_C, One) == 0x000298, "Member 'ADream_wend_C::One' has a wrong offset!");
static_assert(offsetof(ADream_wend_C, Four) == 0x0002A0, "Member 'ADream_wend_C::Four' has a wrong offset!");
static_assert(offsetof(ADream_wend_C, Three) == 0x0002A8, "Member 'ADream_wend_C::Three' has a wrong offset!");
static_assert(offsetof(ADream_wend_C, Two) == 0x0002B0, "Member 'ADream_wend_C::Two' has a wrong offset!");
static_assert(offsetof(ADream_wend_C, Billboard1) == 0x0002B8, "Member 'ADream_wend_C::Billboard1' has a wrong offset!");
static_assert(offsetof(ADream_wend_C, PointLight) == 0x0002C0, "Member 'ADream_wend_C::PointLight' has a wrong offset!");
static_assert(offsetof(ADream_wend_C, Cylinder) == 0x0002C8, "Member 'ADream_wend_C::Cylinder' has a wrong offset!");
static_assert(offsetof(ADream_wend_C, A) == 0x0002D0, "Member 'ADream_wend_C::A' has a wrong offset!");

}

