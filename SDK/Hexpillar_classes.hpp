#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Hexpillar

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Actor_save_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass hexpillar.hexpillar_C
// 0x0040 (0x0288 - 0x0248)
class AHexpillar_C final : public AActor_save_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_Hexpillar_C;                        // 0x0248(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Hexpillar;                                         // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsImpactComponent_C*              PhysicsImpact;                                     // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Dir;                                               // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         A;                                                 // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         I;                                                 // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ticking;                                           // 0x0280(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void CanBeUsedHold(bool* Return);
	void ProcessKeys(bool* Return);
	void GetOnlyKey(class FString* Param_Key);
	void GetData(struct FStruct_save* Data);
	void LoadData(const struct FStruct_save& Data, bool* Return);
	void Upd();
	void SignalDeleted();
	void SignalSaved();
	void StuffUpgraded(class AMainGamemode_C* GameMode);
	void Unfoc();
	void SettingsApplied(const struct FStruct_settings& Settings);
	void Unfocused();
	void GamemodePreLoad();
	void AnyKey(const struct FKey& Param_Key, bool Pressed);
	void GamemodeMakeKeys();
	void PropRenderer_finishProps();
	void ApplyColor(const struct FLinearColor& Color);
	void ReceiveBeginPlay();
	void AddDamage(class AActor* Actor, float Damage, const struct FHitResult& Hit, const struct FVector& Impact, bool SkipSetting);
	void GamemodeBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void ExecuteUbergraph_hexpillar(int32 EntryPoint);
	void DreamInv(TArray<struct FStruct_save>& Invv, class ADreamBase_C** Base);
	void SetPath(const TArray<struct FVector>& Path, bool* Return);
	void ToolboxFix(class AProp_toolbox_C* Toolbox, bool* Return);
	void GetKey(class FString* Param_Key);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"hexpillar_C">();
	}
	static class AHexpillar_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHexpillar_C>();
	}
};
static_assert(alignof(AHexpillar_C) == 0x000008, "Wrong alignment on AHexpillar_C");
static_assert(sizeof(AHexpillar_C) == 0x000288, "Wrong size on AHexpillar_C");
static_assert(offsetof(AHexpillar_C, UberGraphFrame_Hexpillar_C) == 0x000248, "Member 'AHexpillar_C::UberGraphFrame_Hexpillar_C' has a wrong offset!");
static_assert(offsetof(AHexpillar_C, Hexpillar) == 0x000250, "Member 'AHexpillar_C::Hexpillar' has a wrong offset!");
static_assert(offsetof(AHexpillar_C, Box) == 0x000258, "Member 'AHexpillar_C::Box' has a wrong offset!");
static_assert(offsetof(AHexpillar_C, PhysicsImpact) == 0x000260, "Member 'AHexpillar_C::PhysicsImpact' has a wrong offset!");
static_assert(offsetof(AHexpillar_C, Sphere) == 0x000268, "Member 'AHexpillar_C::Sphere' has a wrong offset!");
static_assert(offsetof(AHexpillar_C, Dir) == 0x000270, "Member 'AHexpillar_C::Dir' has a wrong offset!");
static_assert(offsetof(AHexpillar_C, A) == 0x000278, "Member 'AHexpillar_C::A' has a wrong offset!");
static_assert(offsetof(AHexpillar_C, I) == 0x00027C, "Member 'AHexpillar_C::I' has a wrong offset!");
static_assert(offsetof(AHexpillar_C, Ticking) == 0x000280, "Member 'AHexpillar_C::Ticking' has a wrong offset!");

}

