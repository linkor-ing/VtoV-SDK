#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Portal_phys

#include "Basic.hpp"

#include "Struct_settings_structs.hpp"
#include "Struct_save_structs.hpp"
#include "Struct_triggerSave_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Enum_interactionActions_structs.hpp"
#include "Engine_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function portal_phys.portal_phys_C.dreamInv
// 0x0018 (0x0018 - 0x0000)
struct Portal_phys_C_DreamInv final
{
public:
	TArray<struct FStruct_save>                   Invv;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class ADreamBase_C*                           Base;                                              // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Portal_phys_C_DreamInv) == 0x000008, "Wrong alignment on Portal_phys_C_DreamInv");
static_assert(sizeof(Portal_phys_C_DreamInv) == 0x000018, "Wrong size on Portal_phys_C_DreamInv");
static_assert(offsetof(Portal_phys_C_DreamInv, Invv) == 0x000000, "Member 'Portal_phys_C_DreamInv::Invv' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_DreamInv, Base) == 0x000010, "Member 'Portal_phys_C_DreamInv::Base' has a wrong offset!");

// Function portal_phys.portal_phys_C.getPriceMultiplier
// 0x0004 (0x0004 - 0x0000)
struct Portal_phys_C_GetPriceMultiplier final
{
public:
	float                                         PriceMult;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Portal_phys_C_GetPriceMultiplier) == 0x000004, "Wrong alignment on Portal_phys_C_GetPriceMultiplier");
static_assert(sizeof(Portal_phys_C_GetPriceMultiplier) == 0x000004, "Wrong size on Portal_phys_C_GetPriceMultiplier");
static_assert(offsetof(Portal_phys_C_GetPriceMultiplier, PriceMult) == 0x000000, "Member 'Portal_phys_C_GetPriceMultiplier::PriceMult' has a wrong offset!");

// Function portal_phys.portal_phys_C.skipRadial
// 0x0001 (0x0001 - 0x0000)
struct Portal_phys_C_SkipRadial final
{
public:
	bool                                          Skip;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Portal_phys_C_SkipRadial) == 0x000001, "Wrong alignment on Portal_phys_C_SkipRadial");
static_assert(sizeof(Portal_phys_C_SkipRadial) == 0x000001, "Wrong size on Portal_phys_C_SkipRadial");
static_assert(offsetof(Portal_phys_C_SkipRadial, Skip) == 0x000000, "Member 'Portal_phys_C_SkipRadial::Skip' has a wrong offset!");

// Function portal_phys.portal_phys_C.gascanFuel
// 0x0010 (0x0010 - 0x0000)
struct Portal_phys_C_GascanFuel final
{
public:
	class AProp_gascan_C*                         Gascan;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Fueled;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Portal_phys_C_GascanFuel) == 0x000008, "Wrong alignment on Portal_phys_C_GascanFuel");
static_assert(sizeof(Portal_phys_C_GascanFuel) == 0x000010, "Wrong size on Portal_phys_C_GascanFuel");
static_assert(offsetof(Portal_phys_C_GascanFuel, Gascan) == 0x000000, "Member 'Portal_phys_C_GascanFuel::Gascan' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_GascanFuel, Fueled) == 0x000008, "Member 'Portal_phys_C_GascanFuel::Fueled' has a wrong offset!");

// Function portal_phys.portal_phys_C.toolboxFix
// 0x0010 (0x0010 - 0x0000)
struct Portal_phys_C_ToolboxFix final
{
public:
	class AProp_toolbox_C*                        Toolbox;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Portal_phys_C_ToolboxFix) == 0x000008, "Wrong alignment on Portal_phys_C_ToolboxFix");
static_assert(sizeof(Portal_phys_C_ToolboxFix) == 0x000010, "Wrong size on Portal_phys_C_ToolboxFix");
static_assert(offsetof(Portal_phys_C_ToolboxFix, Toolbox) == 0x000000, "Member 'Portal_phys_C_ToolboxFix::Toolbox' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ToolboxFix, Return) == 0x000008, "Member 'Portal_phys_C_ToolboxFix::Return' has a wrong offset!");

// Function portal_phys.portal_phys_C.GetKey
// 0x0048 (0x0048 - 0x0000)
struct Portal_phys_C_GetKey final
{
public:
	class FString                                 Param_Key;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<uint8>                                 CallFunc_GenerateRandomBytes_ByteArray;            // 0x0018(0x0010)(ReferenceParm)
	class FString                                 CallFunc_BytesToBase64Url_ReturnValue;             // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEmpty_ReturnValue;                      // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Portal_phys_C_GetKey) == 0x000008, "Wrong alignment on Portal_phys_C_GetKey");
static_assert(sizeof(Portal_phys_C_GetKey) == 0x000048, "Wrong size on Portal_phys_C_GetKey");
static_assert(offsetof(Portal_phys_C_GetKey, Param_Key) == 0x000000, "Member 'Portal_phys_C_GetKey::Param_Key' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_GetKey, CallFunc_getMainGamemode_AsMain_Gamemode) == 0x000010, "Member 'Portal_phys_C_GetKey::CallFunc_getMainGamemode_AsMain_Gamemode' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_GetKey, CallFunc_GenerateRandomBytes_ByteArray) == 0x000018, "Member 'Portal_phys_C_GetKey::CallFunc_GenerateRandomBytes_ByteArray' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_GetKey, CallFunc_BytesToBase64Url_ReturnValue) == 0x000028, "Member 'Portal_phys_C_GetKey::CallFunc_BytesToBase64Url_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_GetKey, CallFunc_Array_Add_ReturnValue) == 0x000038, "Member 'Portal_phys_C_GetKey::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_GetKey, CallFunc_Array_Add_ReturnValue_1) == 0x00003C, "Member 'Portal_phys_C_GetKey::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_GetKey, CallFunc_Array_Find_ReturnValue) == 0x000040, "Member 'Portal_phys_C_GetKey::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_GetKey, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000044, "Member 'Portal_phys_C_GetKey::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_GetKey, CallFunc_IsEmpty_ReturnValue) == 0x000045, "Member 'Portal_phys_C_GetKey::CallFunc_IsEmpty_ReturnValue' has a wrong offset!");

// Function portal_phys.portal_phys_C.canBeUsedHold
// 0x0001 (0x0001 - 0x0000)
struct Portal_phys_C_CanBeUsedHold final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Portal_phys_C_CanBeUsedHold) == 0x000001, "Wrong alignment on Portal_phys_C_CanBeUsedHold");
static_assert(sizeof(Portal_phys_C_CanBeUsedHold) == 0x000001, "Wrong size on Portal_phys_C_CanBeUsedHold");
static_assert(offsetof(Portal_phys_C_CanBeUsedHold, Return) == 0x000000, "Member 'Portal_phys_C_CanBeUsedHold::Return' has a wrong offset!");

// Function portal_phys.portal_phys_C.processKeys
// 0x0030 (0x0030 - 0x0000)
struct Portal_phys_C_ProcessKeys final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmpty_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_getObjectFromKey_Output;                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APortal_phys_C*                         K2Node_DynamicCast_AsPortal_Phys;                  // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Portal_phys_C_ProcessKeys) == 0x000008, "Wrong alignment on Portal_phys_C_ProcessKeys");
static_assert(sizeof(Portal_phys_C_ProcessKeys) == 0x000030, "Wrong size on Portal_phys_C_ProcessKeys");
static_assert(offsetof(Portal_phys_C_ProcessKeys, Return) == 0x000000, "Member 'Portal_phys_C_ProcessKeys::Return' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ProcessKeys, CallFunc_getMainGamemode_AsMain_Gamemode) == 0x000008, "Member 'Portal_phys_C_ProcessKeys::CallFunc_getMainGamemode_AsMain_Gamemode' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ProcessKeys, CallFunc_IsEmpty_ReturnValue) == 0x000010, "Member 'Portal_phys_C_ProcessKeys::CallFunc_IsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ProcessKeys, CallFunc_getObjectFromKey_Output) == 0x000018, "Member 'Portal_phys_C_ProcessKeys::CallFunc_getObjectFromKey_Output' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ProcessKeys, K2Node_DynamicCast_AsPortal_Phys) == 0x000020, "Member 'Portal_phys_C_ProcessKeys::K2Node_DynamicCast_AsPortal_Phys' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ProcessKeys, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'Portal_phys_C_ProcessKeys::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function portal_phys.portal_phys_C.getOnlyKey
// 0x0010 (0x0010 - 0x0000)
struct Portal_phys_C_GetOnlyKey final
{
public:
	class FString                                 Param_Key;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Portal_phys_C_GetOnlyKey) == 0x000008, "Wrong alignment on Portal_phys_C_GetOnlyKey");
static_assert(sizeof(Portal_phys_C_GetOnlyKey) == 0x000010, "Wrong size on Portal_phys_C_GetOnlyKey");
static_assert(offsetof(Portal_phys_C_GetOnlyKey, Param_Key) == 0x000000, "Member 'Portal_phys_C_GetOnlyKey::Param_Key' has a wrong offset!");

// Function portal_phys.portal_phys_C.setPath
// 0x0018 (0x0018 - 0x0000)
struct Portal_phys_C_SetPath final
{
public:
	TArray<struct FVector>                        Path;                                              // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Return;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Portal_phys_C_SetPath) == 0x000008, "Wrong alignment on Portal_phys_C_SetPath");
static_assert(sizeof(Portal_phys_C_SetPath) == 0x000018, "Wrong size on Portal_phys_C_SetPath");
static_assert(offsetof(Portal_phys_C_SetPath, Path) == 0x000000, "Member 'Portal_phys_C_SetPath::Path' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_SetPath, Return) == 0x000010, "Member 'Portal_phys_C_SetPath::Return' has a wrong offset!");

// Function portal_phys.portal_phys_C.getActionOptions
// 0x0050 (0x0050 - 0x0000)
struct Portal_phys_C_GetActionOptions final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Component;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         Options;                                           // 0x0018(0x0010)(Parm, OutParm)
	TArray<Enum_interactionActions>               Options_enum;                                      // 0x0028(0x0010)(Parm, OutParm)
	TArray<class FText>                           OptionsNamesOverlay;                               // 0x0038(0x0010)(Parm, OutParm)
	uint8                                         Number;                                            // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Portal_phys_C_GetActionOptions) == 0x000008, "Wrong alignment on Portal_phys_C_GetActionOptions");
static_assert(sizeof(Portal_phys_C_GetActionOptions) == 0x000050, "Wrong size on Portal_phys_C_GetActionOptions");
static_assert(offsetof(Portal_phys_C_GetActionOptions, Player) == 0x000000, "Member 'Portal_phys_C_GetActionOptions::Player' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_GetActionOptions, Component) == 0x000008, "Member 'Portal_phys_C_GetActionOptions::Component' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_GetActionOptions, Actor) == 0x000010, "Member 'Portal_phys_C_GetActionOptions::Actor' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_GetActionOptions, Options) == 0x000018, "Member 'Portal_phys_C_GetActionOptions::Options' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_GetActionOptions, Options_enum) == 0x000028, "Member 'Portal_phys_C_GetActionOptions::Options_enum' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_GetActionOptions, OptionsNamesOverlay) == 0x000038, "Member 'Portal_phys_C_GetActionOptions::OptionsNamesOverlay' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_GetActionOptions, Number) == 0x000048, "Member 'Portal_phys_C_GetActionOptions::Number' has a wrong offset!");

// Function portal_phys.portal_phys_C.gatherDataFromKeyT
// 0x0001 (0x0001 - 0x0000)
struct Portal_phys_C_GatherDataFromKeyT final
{
public:
	bool                                          Gather;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Portal_phys_C_GatherDataFromKeyT) == 0x000001, "Wrong alignment on Portal_phys_C_GatherDataFromKeyT");
static_assert(sizeof(Portal_phys_C_GatherDataFromKeyT) == 0x000001, "Wrong size on Portal_phys_C_GatherDataFromKeyT");
static_assert(offsetof(Portal_phys_C_GatherDataFromKeyT, Gather) == 0x000000, "Member 'Portal_phys_C_GatherDataFromKeyT::Gather' has a wrong offset!");

// Function portal_phys.portal_phys_C.getTriggerData
// 0x0230 (0x0230 - 0x0000)
struct Portal_phys_C_GetTriggerData final
{
public:
	struct FStruct_triggerSave                    Data;                                              // 0x0000(0x00F0)(Parm, OutParm, HasGetValueTypeHash)
	TArray<class FString>                         K2Node_MakeArray_Array;                            // 0x00F0(0x0010)(ReferenceParm)
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0100(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_138[0x8];                                      // 0x0138(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_triggerSave                    K2Node_MakeStruct_struct_triggerSave;              // 0x0140(0x00F0)(HasGetValueTypeHash)
};
static_assert(alignof(Portal_phys_C_GetTriggerData) == 0x000010, "Wrong alignment on Portal_phys_C_GetTriggerData");
static_assert(sizeof(Portal_phys_C_GetTriggerData) == 0x000230, "Wrong size on Portal_phys_C_GetTriggerData");
static_assert(offsetof(Portal_phys_C_GetTriggerData, Data) == 0x000000, "Member 'Portal_phys_C_GetTriggerData::Data' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_GetTriggerData, K2Node_MakeArray_Array) == 0x0000F0, "Member 'Portal_phys_C_GetTriggerData::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_GetTriggerData, CallFunc_GetTransform_ReturnValue) == 0x000100, "Member 'Portal_phys_C_GetTriggerData::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_GetTriggerData, CallFunc_GetObjectClass_ReturnValue) == 0x000130, "Member 'Portal_phys_C_GetTriggerData::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_GetTriggerData, K2Node_MakeStruct_struct_triggerSave) == 0x000140, "Member 'Portal_phys_C_GetTriggerData::K2Node_MakeStruct_struct_triggerSave' has a wrong offset!");

// Function portal_phys.portal_phys_C.loadTriggerData
// 0x0110 (0x0110 - 0x0000)
struct Portal_phys_C_LoadTriggerData final
{
public:
	struct FStruct_triggerSave                    Data;                                              // 0x0000(0x00F0)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x00F0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Array_Get_Item;                           // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Portal_phys_C_LoadTriggerData) == 0x000010, "Wrong alignment on Portal_phys_C_LoadTriggerData");
static_assert(sizeof(Portal_phys_C_LoadTriggerData) == 0x000110, "Wrong size on Portal_phys_C_LoadTriggerData");
static_assert(offsetof(Portal_phys_C_LoadTriggerData, Data) == 0x000000, "Member 'Portal_phys_C_LoadTriggerData::Data' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_LoadTriggerData, Return) == 0x0000F0, "Member 'Portal_phys_C_LoadTriggerData::Return' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_LoadTriggerData, CallFunc_Array_Get_Item) == 0x0000F8, "Member 'Portal_phys_C_LoadTriggerData::CallFunc_Array_Get_Item' has a wrong offset!");

// Function portal_phys.portal_phys_C.ignoreSave_trigger
// 0x0001 (0x0001 - 0x0000)
struct Portal_phys_C_IgnoreSave_trigger final
{
public:
	bool                                          Ignore;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Portal_phys_C_IgnoreSave_trigger) == 0x000001, "Wrong alignment on Portal_phys_C_IgnoreSave_trigger");
static_assert(sizeof(Portal_phys_C_IgnoreSave_trigger) == 0x000001, "Wrong size on Portal_phys_C_IgnoreSave_trigger");
static_assert(offsetof(Portal_phys_C_IgnoreSave_trigger, Ignore) == 0x000000, "Member 'Portal_phys_C_IgnoreSave_trigger::Ignore' has a wrong offset!");

// Function portal_phys.portal_phys_C.noScale
// 0x00C0 (0x00C0 - 0x0000)
struct Portal_phys_C_NoScale final
{
public:
	struct FTransform                             InTransform;                                       // 0x0000(0x0030)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
	struct FTransform                             ReturnValue;                                       // 0x0030(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0xC];                                       // 0x0084(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0090(0x0030)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(Portal_phys_C_NoScale) == 0x000010, "Wrong alignment on Portal_phys_C_NoScale");
static_assert(sizeof(Portal_phys_C_NoScale) == 0x0000C0, "Wrong size on Portal_phys_C_NoScale");
static_assert(offsetof(Portal_phys_C_NoScale, InTransform) == 0x000000, "Member 'Portal_phys_C_NoScale::InTransform' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_NoScale, ReturnValue) == 0x000030, "Member 'Portal_phys_C_NoScale::ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_NoScale, CallFunc_BreakTransform_Location) == 0x000060, "Member 'Portal_phys_C_NoScale::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_NoScale, CallFunc_BreakTransform_Rotation) == 0x00006C, "Member 'Portal_phys_C_NoScale::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_NoScale, CallFunc_BreakTransform_Scale) == 0x000078, "Member 'Portal_phys_C_NoScale::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_NoScale, CallFunc_MakeTransform_ReturnValue) == 0x000090, "Member 'Portal_phys_C_NoScale::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");

// Function portal_phys.portal_phys_C.rebuild
// 0x00B0 (0x00B0 - 0x0000)
struct Portal_phys_C_Rebuild final
{
public:
	int32                                         Temp_int_Variable;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Temp_struct_Variable;                              // 0x0010(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   CallFunc_AddComponent_ReturnValue;                 // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CallFunc_Array_Get_Item;                           // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item_1;                         // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_K2_GetRootComponent_ReturnValue;          // 0x0088(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   K2Node_DynamicCast_AsStatic_Mesh_Component;        // 0x0090(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Portal_phys_C_Rebuild) == 0x000010, "Wrong alignment on Portal_phys_C_Rebuild");
static_assert(sizeof(Portal_phys_C_Rebuild) == 0x0000B0, "Wrong size on Portal_phys_C_Rebuild");
static_assert(offsetof(Portal_phys_C_Rebuild, Temp_int_Variable) == 0x000000, "Member 'Portal_phys_C_Rebuild::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_Rebuild, Temp_struct_Variable) == 0x000010, "Member 'Portal_phys_C_Rebuild::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_Rebuild, CallFunc_Add_IntInt_ReturnValue) == 0x000040, "Member 'Portal_phys_C_Rebuild::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_Rebuild, CallFunc_AddComponent_ReturnValue) == 0x000048, "Member 'Portal_phys_C_Rebuild::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_Rebuild, Temp_int_Array_Index_Variable) == 0x000050, "Member 'Portal_phys_C_Rebuild::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_Rebuild, Temp_int_Loop_Counter_Variable) == 0x000054, "Member 'Portal_phys_C_Rebuild::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_Rebuild, CallFunc_Array_Get_Item) == 0x000058, "Member 'Portal_phys_C_Rebuild::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_Rebuild, CallFunc_Array_Length_ReturnValue) == 0x000060, "Member 'Portal_phys_C_Rebuild::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_Rebuild, CallFunc_Less_IntInt_ReturnValue) == 0x000064, "Member 'Portal_phys_C_Rebuild::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_Rebuild, CallFunc_Add_IntInt_ReturnValue_1) == 0x000068, "Member 'Portal_phys_C_Rebuild::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_Rebuild, CallFunc_Array_Add_ReturnValue) == 0x00006C, "Member 'Portal_phys_C_Rebuild::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_Rebuild, CallFunc_Array_Length_ReturnValue_1) == 0x000070, "Member 'Portal_phys_C_Rebuild::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_Rebuild, CallFunc_Array_Get_Item_1) == 0x000078, "Member 'Portal_phys_C_Rebuild::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_Rebuild, CallFunc_Less_IntInt_ReturnValue_1) == 0x000080, "Member 'Portal_phys_C_Rebuild::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_Rebuild, CallFunc_K2_GetRootComponent_ReturnValue) == 0x000088, "Member 'Portal_phys_C_Rebuild::CallFunc_K2_GetRootComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_Rebuild, K2Node_DynamicCast_AsStatic_Mesh_Component) == 0x000090, "Member 'Portal_phys_C_Rebuild::K2Node_DynamicCast_AsStatic_Mesh_Component' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_Rebuild, K2Node_DynamicCast_bSuccess) == 0x000098, "Member 'Portal_phys_C_Rebuild::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_Rebuild, CallFunc_Array_Add_ReturnValue_1) == 0x00009C, "Member 'Portal_phys_C_Rebuild::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_Rebuild, CallFunc_SetStaticMesh_ReturnValue) == 0x0000A0, "Member 'Portal_phys_C_Rebuild::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");

// Function portal_phys.portal_phys_C.UserConstructionScript
// 0x04A8 (0x04A8 - 0x0000)
struct Portal_phys_C_UserConstructionScript final
{
public:
	class APortal_C*                              K2Node_DynamicCast_AsPortal;                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetActorScale3D_ReturnValue;              // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorScale3D_ReturnValue_1;            // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_1;      // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_3;                 // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_3;             // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_4;                 // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_5;                 // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_2;          // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_3;          // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_4;             // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_5;             // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_6;                 // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_7;                 // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_4;          // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_5;          // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_6;             // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_7;             // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_8;                 // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_9;                 // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_8;             // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IInt_objects_C>        CallFunc_getKey_self_CastInput;                    // 0x0110(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class FString                                 CallFunc_getKey_key;                               // 0x0120(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_6;          // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_9;             // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_7;          // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_10;                // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_11;                // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0154(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult_1;  // 0x01DC(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult_2;  // 0x0264(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult_3;  // 0x02EC(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_374[0x4];                                      // 0x0374(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APortal_C*                              K2Node_DynamicCast_AsPortal_1;                     // 0x0378(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0380(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_381[0x7];                                      // 0x0381(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APortal_C*                              K2Node_DynamicCast_AsPortal_2;                     // 0x0388(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0390(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_391[0x3];                                      // 0x0391(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult_4;  // 0x0394(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult_5;  // 0x041C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Portal_phys_C_UserConstructionScript) == 0x000008, "Wrong alignment on Portal_phys_C_UserConstructionScript");
static_assert(sizeof(Portal_phys_C_UserConstructionScript) == 0x0004A8, "Wrong size on Portal_phys_C_UserConstructionScript");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, K2Node_DynamicCast_AsPortal) == 0x000000, "Member 'Portal_phys_C_UserConstructionScript::K2Node_DynamicCast_AsPortal' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'Portal_phys_C_UserConstructionScript::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_GetActorScale3D_ReturnValue) == 0x00000C, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_GetActorScale3D_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_GetActorScale3D_ReturnValue_1) == 0x000018, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_GetActorScale3D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000024, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_BreakVector_X) == 0x000030, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_BreakVector_Y) == 0x000034, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_BreakVector_Z) == 0x000038, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_Multiply_VectorVector_ReturnValue_1) == 0x00003C, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_Multiply_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_Add_FloatFloat_ReturnValue) == 0x000048, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_BreakVector_X_1) == 0x00004C, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_BreakVector_Y_1) == 0x000050, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_BreakVector_Z_1) == 0x000054, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000058, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00005C, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_MakeVector_ReturnValue) == 0x000060, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_MakeVector_ReturnValue_1) == 0x00006C, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000078, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x00007C, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_MakeVector_ReturnValue_2) == 0x000080, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_MakeVector_ReturnValue_3) == 0x00008C, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_MakeVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x000098, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_Add_FloatFloat_ReturnValue_3) == 0x00009C, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_Add_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0000A0, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_MakeVector_ReturnValue_4) == 0x0000A4, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_MakeVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_MakeVector_ReturnValue_5) == 0x0000B0, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_MakeVector_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_Divide_FloatFloat_ReturnValue_2) == 0x0000BC, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_Divide_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_Divide_FloatFloat_ReturnValue_3) == 0x0000C0, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_Divide_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_Add_FloatFloat_ReturnValue_4) == 0x0000C4, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_Add_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_Add_FloatFloat_ReturnValue_5) == 0x0000C8, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_Add_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_MakeVector_ReturnValue_6) == 0x0000CC, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_MakeVector_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_MakeVector_ReturnValue_7) == 0x0000D8, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_MakeVector_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_Divide_FloatFloat_ReturnValue_4) == 0x0000E4, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_Divide_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_Divide_FloatFloat_ReturnValue_5) == 0x0000E8, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_Divide_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_Add_FloatFloat_ReturnValue_6) == 0x0000EC, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_Add_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_Add_FloatFloat_ReturnValue_7) == 0x0000F0, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_Add_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_MakeVector_ReturnValue_8) == 0x0000F4, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_MakeVector_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_MakeVector_ReturnValue_9) == 0x000100, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_MakeVector_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_Add_FloatFloat_ReturnValue_8) == 0x00010C, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_Add_FloatFloat_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_getKey_self_CastInput) == 0x000110, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_getKey_self_CastInput' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_getKey_key) == 0x000120, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_getKey_key' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_Divide_FloatFloat_ReturnValue_6) == 0x000130, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_Divide_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_Add_FloatFloat_ReturnValue_9) == 0x000134, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_Add_FloatFloat_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_Divide_FloatFloat_ReturnValue_7) == 0x000138, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_Divide_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_MakeVector_ReturnValue_10) == 0x00013C, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_MakeVector_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_MakeVector_ReturnValue_11) == 0x000148, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_MakeVector_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000154, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_K2_SetRelativeLocation_SweepHitResult_1) == 0x0001DC, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_K2_SetRelativeLocation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_K2_SetRelativeLocation_SweepHitResult_2) == 0x000264, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_K2_SetRelativeLocation_SweepHitResult_2' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_K2_SetRelativeLocation_SweepHitResult_3) == 0x0002EC, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_K2_SetRelativeLocation_SweepHitResult_3' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, K2Node_DynamicCast_AsPortal_1) == 0x000378, "Member 'Portal_phys_C_UserConstructionScript::K2Node_DynamicCast_AsPortal_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, K2Node_DynamicCast_bSuccess_1) == 0x000380, "Member 'Portal_phys_C_UserConstructionScript::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, K2Node_DynamicCast_AsPortal_2) == 0x000388, "Member 'Portal_phys_C_UserConstructionScript::K2Node_DynamicCast_AsPortal_2' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, K2Node_DynamicCast_bSuccess_2) == 0x000390, "Member 'Portal_phys_C_UserConstructionScript::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_K2_SetRelativeLocation_SweepHitResult_4) == 0x000394, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_K2_SetRelativeLocation_SweepHitResult_4' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_UserConstructionScript, CallFunc_K2_SetRelativeLocation_SweepHitResult_5) == 0x00041C, "Member 'Portal_phys_C_UserConstructionScript::CallFunc_K2_SetRelativeLocation_SweepHitResult_5' has a wrong offset!");

// Function portal_phys.portal_phys_C.stuffUpgraded
// 0x0008 (0x0008 - 0x0000)
struct Portal_phys_C_StuffUpgraded final
{
public:
	class AMainGamemode_C*                        GameMode;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Portal_phys_C_StuffUpgraded) == 0x000008, "Wrong alignment on Portal_phys_C_StuffUpgraded");
static_assert(sizeof(Portal_phys_C_StuffUpgraded) == 0x000008, "Wrong size on Portal_phys_C_StuffUpgraded");
static_assert(offsetof(Portal_phys_C_StuffUpgraded, GameMode) == 0x000000, "Member 'Portal_phys_C_StuffUpgraded::GameMode' has a wrong offset!");

// Function portal_phys.portal_phys_C.settingsApplied
// 0x00F0 (0x00F0 - 0x0000)
struct Portal_phys_C_SettingsApplied final
{
public:
	struct FStruct_settings                       Settings;                                          // 0x0000(0x00F0)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(Portal_phys_C_SettingsApplied) == 0x000008, "Wrong alignment on Portal_phys_C_SettingsApplied");
static_assert(sizeof(Portal_phys_C_SettingsApplied) == 0x0000F0, "Wrong size on Portal_phys_C_SettingsApplied");
static_assert(offsetof(Portal_phys_C_SettingsApplied, Settings) == 0x000000, "Member 'Portal_phys_C_SettingsApplied::Settings' has a wrong offset!");

// Function portal_phys.portal_phys_C.AnyKey
// 0x0020 (0x0020 - 0x0000)
struct Portal_phys_C_AnyKey final
{
public:
	struct FKey                                   Param_Key;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Pressed;                                           // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Portal_phys_C_AnyKey) == 0x000008, "Wrong alignment on Portal_phys_C_AnyKey");
static_assert(sizeof(Portal_phys_C_AnyKey) == 0x000020, "Wrong size on Portal_phys_C_AnyKey");
static_assert(offsetof(Portal_phys_C_AnyKey, Param_Key) == 0x000000, "Member 'Portal_phys_C_AnyKey::Param_Key' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_AnyKey, Pressed) == 0x000018, "Member 'Portal_phys_C_AnyKey::Pressed' has a wrong offset!");

// Function portal_phys.portal_phys_C.applyColor
// 0x0010 (0x0010 - 0x0000)
struct Portal_phys_C_ApplyColor final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Portal_phys_C_ApplyColor) == 0x000004, "Wrong alignment on Portal_phys_C_ApplyColor");
static_assert(sizeof(Portal_phys_C_ApplyColor) == 0x000010, "Wrong size on Portal_phys_C_ApplyColor");
static_assert(offsetof(Portal_phys_C_ApplyColor, Color) == 0x000000, "Member 'Portal_phys_C_ApplyColor::Color' has a wrong offset!");

// Function portal_phys.portal_phys_C.texturePickerApply
// 0x0018 (0x0018 - 0x0000)
struct Portal_phys_C_TexturePickerApply final
{
public:
	class UUmg_texturePicker_C*                   Picker;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Texture;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Portal_phys_C_TexturePickerApply) == 0x000008, "Wrong alignment on Portal_phys_C_TexturePickerApply");
static_assert(sizeof(Portal_phys_C_TexturePickerApply) == 0x000018, "Wrong size on Portal_phys_C_TexturePickerApply");
static_assert(offsetof(Portal_phys_C_TexturePickerApply, Picker) == 0x000000, "Member 'Portal_phys_C_TexturePickerApply::Picker' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_TexturePickerApply, Texture) == 0x000008, "Member 'Portal_phys_C_TexturePickerApply::Texture' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_TexturePickerApply, Param_Index) == 0x000010, "Member 'Portal_phys_C_TexturePickerApply::Param_Index' has a wrong offset!");

// Function portal_phys.portal_phys_C.ImpactDamage
// 0x00A8 (0x00A8 - 0x0000)
struct Portal_phys_C_ImpactDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0004(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0090(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Impact;                                            // 0x0098(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Portal_phys_C_ImpactDamage) == 0x000008, "Wrong alignment on Portal_phys_C_ImpactDamage");
static_assert(sizeof(Portal_phys_C_ImpactDamage) == 0x0000A8, "Wrong size on Portal_phys_C_ImpactDamage");
static_assert(offsetof(Portal_phys_C_ImpactDamage, Damage) == 0x000000, "Member 'Portal_phys_C_ImpactDamage::Damage' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ImpactDamage, Hit) == 0x000004, "Member 'Portal_phys_C_ImpactDamage::Hit' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ImpactDamage, Actor) == 0x000090, "Member 'Portal_phys_C_ImpactDamage::Actor' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ImpactDamage, Impact) == 0x000098, "Member 'Portal_phys_C_ImpactDamage::Impact' has a wrong offset!");

// Function portal_phys.portal_phys_C.enterWater
// 0x0008 (0x0008 - 0x0000)
struct Portal_phys_C_EnterWater final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Portal_phys_C_EnterWater) == 0x000008, "Wrong alignment on Portal_phys_C_EnterWater");
static_assert(sizeof(Portal_phys_C_EnterWater) == 0x000008, "Wrong size on Portal_phys_C_EnterWater");
static_assert(offsetof(Portal_phys_C_EnterWater, Water) == 0x000000, "Member 'Portal_phys_C_EnterWater::Water' has a wrong offset!");

// Function portal_phys.portal_phys_C.leaveWater
// 0x0008 (0x0008 - 0x0000)
struct Portal_phys_C_LeaveWater final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Portal_phys_C_LeaveWater) == 0x000008, "Wrong alignment on Portal_phys_C_LeaveWater");
static_assert(sizeof(Portal_phys_C_LeaveWater) == 0x000008, "Wrong size on Portal_phys_C_LeaveWater");
static_assert(offsetof(Portal_phys_C_LeaveWater, Water) == 0x000000, "Member 'Portal_phys_C_LeaveWater::Water' has a wrong offset!");

// Function portal_phys.portal_phys_C.enterWaterOrigin
// 0x0008 (0x0008 - 0x0000)
struct Portal_phys_C_EnterWaterOrigin final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Portal_phys_C_EnterWaterOrigin) == 0x000008, "Wrong alignment on Portal_phys_C_EnterWaterOrigin");
static_assert(sizeof(Portal_phys_C_EnterWaterOrigin) == 0x000008, "Wrong size on Portal_phys_C_EnterWaterOrigin");
static_assert(offsetof(Portal_phys_C_EnterWaterOrigin, Water) == 0x000000, "Member 'Portal_phys_C_EnterWaterOrigin::Water' has a wrong offset!");

// Function portal_phys.portal_phys_C.leaveWaterOrigin
// 0x0008 (0x0008 - 0x0000)
struct Portal_phys_C_LeaveWaterOrigin final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Portal_phys_C_LeaveWaterOrigin) == 0x000008, "Wrong alignment on Portal_phys_C_LeaveWaterOrigin");
static_assert(sizeof(Portal_phys_C_LeaveWaterOrigin) == 0x000008, "Wrong size on Portal_phys_C_LeaveWaterOrigin");
static_assert(offsetof(Portal_phys_C_LeaveWaterOrigin, Water) == 0x000000, "Member 'Portal_phys_C_LeaveWaterOrigin::Water' has a wrong offset!");

// Function portal_phys.portal_phys_C.virus
// 0x0001 (0x0001 - 0x0000)
struct Portal_phys_C_Virus final
{
public:
	bool                                          Activate;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Portal_phys_C_Virus) == 0x000001, "Wrong alignment on Portal_phys_C_Virus");
static_assert(sizeof(Portal_phys_C_Virus) == 0x000001, "Wrong size on Portal_phys_C_Virus");
static_assert(offsetof(Portal_phys_C_Virus, Activate) == 0x000000, "Member 'Portal_phys_C_Virus::Activate' has a wrong offset!");

// Function portal_phys.portal_phys_C.setPropProps
// 0x0003 (0x0003 - 0x0000)
struct Portal_phys_C_SetPropProps final
{
public:
	bool                                          Static;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Frozen;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Active;                                            // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Portal_phys_C_SetPropProps) == 0x000001, "Wrong alignment on Portal_phys_C_SetPropProps");
static_assert(sizeof(Portal_phys_C_SetPropProps) == 0x000003, "Wrong size on Portal_phys_C_SetPropProps");
static_assert(offsetof(Portal_phys_C_SetPropProps, Static) == 0x000000, "Member 'Portal_phys_C_SetPropProps::Static' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_SetPropProps, Frozen) == 0x000001, "Member 'Portal_phys_C_SetPropProps::Frozen' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_SetPropProps, Active) == 0x000002, "Member 'Portal_phys_C_SetPropProps::Active' has a wrong offset!");

// Function portal_phys.portal_phys_C.addDamage
// 0x00A8 (0x00A8 - 0x0000)
struct Portal_phys_C_AddDamage final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x000C(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                Impact;                                            // 0x0094(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipSetting;                                       // 0x00A0(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Portal_phys_C_AddDamage) == 0x000008, "Wrong alignment on Portal_phys_C_AddDamage");
static_assert(sizeof(Portal_phys_C_AddDamage) == 0x0000A8, "Wrong size on Portal_phys_C_AddDamage");
static_assert(offsetof(Portal_phys_C_AddDamage, Actor) == 0x000000, "Member 'Portal_phys_C_AddDamage::Actor' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_AddDamage, Damage) == 0x000008, "Member 'Portal_phys_C_AddDamage::Damage' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_AddDamage, Hit) == 0x00000C, "Member 'Portal_phys_C_AddDamage::Hit' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_AddDamage, Impact) == 0x000094, "Member 'Portal_phys_C_AddDamage::Impact' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_AddDamage, SkipSetting) == 0x0000A0, "Member 'Portal_phys_C_AddDamage::SkipSetting' has a wrong offset!");

// Function portal_phys.portal_phys_C.setKey
// 0x0010 (0x0010 - 0x0000)
struct Portal_phys_C_SetKey final
{
public:
	class FString                                 Param_Key;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Portal_phys_C_SetKey) == 0x000008, "Wrong alignment on Portal_phys_C_SetKey");
static_assert(sizeof(Portal_phys_C_SetKey) == 0x000010, "Wrong size on Portal_phys_C_SetKey");
static_assert(offsetof(Portal_phys_C_SetKey, Param_Key) == 0x000000, "Member 'Portal_phys_C_SetKey::Param_Key' has a wrong offset!");

// Function portal_phys.portal_phys_C.steppedOn
// 0x0090 (0x0090 - 0x0000)
struct Portal_phys_C_SteppedOn final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Portal_phys_C_SteppedOn) == 0x000008, "Wrong alignment on Portal_phys_C_SteppedOn");
static_assert(sizeof(Portal_phys_C_SteppedOn) == 0x000090, "Wrong size on Portal_phys_C_SteppedOn");
static_assert(offsetof(Portal_phys_C_SteppedOn, Player) == 0x000000, "Member 'Portal_phys_C_SteppedOn::Player' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_SteppedOn, Hit) == 0x000008, "Member 'Portal_phys_C_SteppedOn::Hit' has a wrong offset!");

// Function portal_phys.portal_phys_C.fireDamage
// 0x0004 (0x0004 - 0x0000)
struct Portal_phys_C_FireDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Portal_phys_C_FireDamage) == 0x000004, "Wrong alignment on Portal_phys_C_FireDamage");
static_assert(sizeof(Portal_phys_C_FireDamage) == 0x000004, "Wrong size on Portal_phys_C_FireDamage");
static_assert(offsetof(Portal_phys_C_FireDamage, Damage) == 0x000000, "Member 'Portal_phys_C_FireDamage::Damage' has a wrong offset!");

// Function portal_phys.portal_phys_C.ignite
// 0x0004 (0x0004 - 0x0000)
struct Portal_phys_C_Ignite final
{
public:
	float                                         Fuel;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Portal_phys_C_Ignite) == 0x000004, "Wrong alignment on Portal_phys_C_Ignite");
static_assert(sizeof(Portal_phys_C_Ignite) == 0x000004, "Wrong size on Portal_phys_C_Ignite");
static_assert(offsetof(Portal_phys_C_Ignite, Fuel) == 0x000000, "Member 'Portal_phys_C_Ignite::Fuel' has a wrong offset!");

// Function portal_phys.portal_phys_C.receivedPhyiscsDamage
// 0x008C (0x008C - 0x0000)
struct Portal_phys_C_ReceivedPhyiscsDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hot;                                               // 0x0004(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Portal_phys_C_ReceivedPhyiscsDamage) == 0x000004, "Wrong alignment on Portal_phys_C_ReceivedPhyiscsDamage");
static_assert(sizeof(Portal_phys_C_ReceivedPhyiscsDamage) == 0x00008C, "Wrong size on Portal_phys_C_ReceivedPhyiscsDamage");
static_assert(offsetof(Portal_phys_C_ReceivedPhyiscsDamage, Damage) == 0x000000, "Member 'Portal_phys_C_ReceivedPhyiscsDamage::Damage' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ReceivedPhyiscsDamage, Hot) == 0x000004, "Member 'Portal_phys_C_ReceivedPhyiscsDamage::Hot' has a wrong offset!");

// Function portal_phys.portal_phys_C.actionOptionIndex
// 0x0098 (0x0098 - 0x0000)
struct Portal_phys_C_ActionOptionIndex final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	Enum_interactionActions                       Action;                                            // 0x0090(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Portal_phys_C_ActionOptionIndex) == 0x000008, "Wrong alignment on Portal_phys_C_ActionOptionIndex");
static_assert(sizeof(Portal_phys_C_ActionOptionIndex) == 0x000098, "Wrong size on Portal_phys_C_ActionOptionIndex");
static_assert(offsetof(Portal_phys_C_ActionOptionIndex, Player) == 0x000000, "Member 'Portal_phys_C_ActionOptionIndex::Player' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ActionOptionIndex, Hit) == 0x000008, "Member 'Portal_phys_C_ActionOptionIndex::Hit' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ActionOptionIndex, Action) == 0x000090, "Member 'Portal_phys_C_ActionOptionIndex::Action' has a wrong offset!");

// Function portal_phys.portal_phys_C.playerHandUse_RMB
// 0x0008 (0x0008 - 0x0000)
struct Portal_phys_C_PlayerHandUse_RMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Portal_phys_C_PlayerHandUse_RMB) == 0x000008, "Wrong alignment on Portal_phys_C_PlayerHandUse_RMB");
static_assert(sizeof(Portal_phys_C_PlayerHandUse_RMB) == 0x000008, "Wrong size on Portal_phys_C_PlayerHandUse_RMB");
static_assert(offsetof(Portal_phys_C_PlayerHandUse_RMB, Player) == 0x000000, "Member 'Portal_phys_C_PlayerHandUse_RMB::Player' has a wrong offset!");

// Function portal_phys.portal_phys_C.playerHandUse_LMB
// 0x0008 (0x0008 - 0x0000)
struct Portal_phys_C_PlayerHandUse_LMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Portal_phys_C_PlayerHandUse_LMB) == 0x000008, "Wrong alignment on Portal_phys_C_PlayerHandUse_LMB");
static_assert(sizeof(Portal_phys_C_PlayerHandUse_LMB) == 0x000008, "Wrong size on Portal_phys_C_PlayerHandUse_LMB");
static_assert(offsetof(Portal_phys_C_PlayerHandUse_LMB, Player) == 0x000000, "Member 'Portal_phys_C_PlayerHandUse_LMB::Player' has a wrong offset!");

// Function portal_phys.portal_phys_C.exploded
// 0x0010 (0x0010 - 0x0000)
struct Portal_phys_C_Exploded final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Portal_phys_C_Exploded) == 0x000004, "Wrong alignment on Portal_phys_C_Exploded");
static_assert(sizeof(Portal_phys_C_Exploded) == 0x000010, "Wrong size on Portal_phys_C_Exploded");
static_assert(offsetof(Portal_phys_C_Exploded, Damage) == 0x000000, "Member 'Portal_phys_C_Exploded::Damage' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_Exploded, Location) == 0x000004, "Member 'Portal_phys_C_Exploded::Location' has a wrong offset!");

// Function portal_phys.portal_phys_C.playerHandRelease_RMB
// 0x0008 (0x0008 - 0x0000)
struct Portal_phys_C_PlayerHandRelease_RMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Portal_phys_C_PlayerHandRelease_RMB) == 0x000008, "Wrong alignment on Portal_phys_C_PlayerHandRelease_RMB");
static_assert(sizeof(Portal_phys_C_PlayerHandRelease_RMB) == 0x000008, "Wrong size on Portal_phys_C_PlayerHandRelease_RMB");
static_assert(offsetof(Portal_phys_C_PlayerHandRelease_RMB, Player) == 0x000000, "Member 'Portal_phys_C_PlayerHandRelease_RMB::Player' has a wrong offset!");

// Function portal_phys.portal_phys_C.playerHandRelease_LMB
// 0x0008 (0x0008 - 0x0000)
struct Portal_phys_C_PlayerHandRelease_LMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Portal_phys_C_PlayerHandRelease_LMB) == 0x000008, "Wrong alignment on Portal_phys_C_PlayerHandRelease_LMB");
static_assert(sizeof(Portal_phys_C_PlayerHandRelease_LMB) == 0x000008, "Wrong size on Portal_phys_C_PlayerHandRelease_LMB");
static_assert(offsetof(Portal_phys_C_PlayerHandRelease_LMB, Player) == 0x000000, "Member 'Portal_phys_C_PlayerHandRelease_LMB::Player' has a wrong offset!");

// Function portal_phys.portal_phys_C.playerHandMouseWheel
// 0x0010 (0x0010 - 0x0000)
struct Portal_phys_C_PlayerHandMouseWheel final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WheelDelta;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Portal_phys_C_PlayerHandMouseWheel) == 0x000008, "Wrong alignment on Portal_phys_C_PlayerHandMouseWheel");
static_assert(sizeof(Portal_phys_C_PlayerHandMouseWheel) == 0x000010, "Wrong size on Portal_phys_C_PlayerHandMouseWheel");
static_assert(offsetof(Portal_phys_C_PlayerHandMouseWheel, Player) == 0x000000, "Member 'Portal_phys_C_PlayerHandMouseWheel::Player' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_PlayerHandMouseWheel, WheelDelta) == 0x000008, "Member 'Portal_phys_C_PlayerHandMouseWheel::WheelDelta' has a wrong offset!");

// Function portal_phys.portal_phys_C.playerHandMouse
// 0x0010 (0x0010 - 0x0000)
struct Portal_phys_C_PlayerHandMouse final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Mouse;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Portal_phys_C_PlayerHandMouse) == 0x000008, "Wrong alignment on Portal_phys_C_PlayerHandMouse");
static_assert(sizeof(Portal_phys_C_PlayerHandMouse) == 0x000010, "Wrong size on Portal_phys_C_PlayerHandMouse");
static_assert(offsetof(Portal_phys_C_PlayerHandMouse, Player) == 0x000000, "Member 'Portal_phys_C_PlayerHandMouse::Player' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_PlayerHandMouse, Mouse) == 0x000008, "Member 'Portal_phys_C_PlayerHandMouse::Mouse' has a wrong offset!");

// Function portal_phys.portal_phys_C.playerHandAnyKey
// 0x0028 (0x0028 - 0x0000)
struct Portal_phys_C_PlayerHandAnyKey final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   Param_Key;                                         // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Pressed;                                           // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Portal_phys_C_PlayerHandAnyKey) == 0x000008, "Wrong alignment on Portal_phys_C_PlayerHandAnyKey");
static_assert(sizeof(Portal_phys_C_PlayerHandAnyKey) == 0x000028, "Wrong size on Portal_phys_C_PlayerHandAnyKey");
static_assert(offsetof(Portal_phys_C_PlayerHandAnyKey, Player) == 0x000000, "Member 'Portal_phys_C_PlayerHandAnyKey::Player' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_PlayerHandAnyKey, Param_Key) == 0x000008, "Member 'Portal_phys_C_PlayerHandAnyKey::Param_Key' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_PlayerHandAnyKey, Pressed) == 0x000020, "Member 'Portal_phys_C_PlayerHandAnyKey::Pressed' has a wrong offset!");

// Function portal_phys.portal_phys_C.addTemperature
// 0x0004 (0x0004 - 0x0000)
struct Portal_phys_C_AddTemperature final
{
public:
	float                                         Temperature;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Portal_phys_C_AddTemperature) == 0x000004, "Wrong alignment on Portal_phys_C_AddTemperature");
static_assert(sizeof(Portal_phys_C_AddTemperature) == 0x000004, "Wrong size on Portal_phys_C_AddTemperature");
static_assert(offsetof(Portal_phys_C_AddTemperature, Temperature) == 0x000000, "Member 'Portal_phys_C_AddTemperature::Temperature' has a wrong offset!");

// Function portal_phys.portal_phys_C.accumulateTemperature
// 0x0008 (0x0008 - 0x0000)
struct Portal_phys_C_AccumulateTemperature final
{
public:
	float                                         Temperature;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Portal_phys_C_AccumulateTemperature) == 0x000004, "Wrong alignment on Portal_phys_C_AccumulateTemperature");
static_assert(sizeof(Portal_phys_C_AccumulateTemperature) == 0x000008, "Wrong size on Portal_phys_C_AccumulateTemperature");
static_assert(offsetof(Portal_phys_C_AccumulateTemperature, Temperature) == 0x000000, "Member 'Portal_phys_C_AccumulateTemperature::Temperature' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_AccumulateTemperature, Speed) == 0x000004, "Member 'Portal_phys_C_AccumulateTemperature::Speed' has a wrong offset!");

// Function portal_phys.portal_phys_C.ActionName
// 0x00A0 (0x00A0 - 0x0000)
struct Portal_phys_C_ActionName final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class FString                                 Param_Name;                                        // 0x0090(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Portal_phys_C_ActionName) == 0x000008, "Wrong alignment on Portal_phys_C_ActionName");
static_assert(sizeof(Portal_phys_C_ActionName) == 0x0000A0, "Wrong size on Portal_phys_C_ActionName");
static_assert(offsetof(Portal_phys_C_ActionName, Player) == 0x000000, "Member 'Portal_phys_C_ActionName::Player' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ActionName, Hit) == 0x000008, "Member 'Portal_phys_C_ActionName::Hit' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ActionName, Param_Name) == 0x000090, "Member 'Portal_phys_C_ActionName::Param_Name' has a wrong offset!");

// Function portal_phys.portal_phys_C.stepped
// 0x0004 (0x0004 - 0x0000)
struct Portal_phys_C_Stepped final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Portal_phys_C_Stepped) == 0x000004, "Wrong alignment on Portal_phys_C_Stepped");
static_assert(sizeof(Portal_phys_C_Stepped) == 0x000004, "Wrong size on Portal_phys_C_Stepped");
static_assert(offsetof(Portal_phys_C_Stepped, Volume) == 0x000000, "Member 'Portal_phys_C_Stepped::Volume' has a wrong offset!");

// Function portal_phys.portal_phys_C.playerLookAway
// 0x0008 (0x0008 - 0x0000)
struct Portal_phys_C_PlayerLookAway final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Portal_phys_C_PlayerLookAway) == 0x000008, "Wrong alignment on Portal_phys_C_PlayerLookAway");
static_assert(sizeof(Portal_phys_C_PlayerLookAway) == 0x000008, "Wrong size on Portal_phys_C_PlayerLookAway");
static_assert(offsetof(Portal_phys_C_PlayerLookAway, Player) == 0x000000, "Member 'Portal_phys_C_PlayerLookAway::Player' has a wrong offset!");

// Function portal_phys.portal_phys_C.reachedByExplosion
// 0x0010 (0x0010 - 0x0000)
struct Portal_phys_C_ReachedByExplosion final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Portal_phys_C_ReachedByExplosion) == 0x000004, "Wrong alignment on Portal_phys_C_ReachedByExplosion");
static_assert(sizeof(Portal_phys_C_ReachedByExplosion) == 0x000010, "Wrong size on Portal_phys_C_ReachedByExplosion");
static_assert(offsetof(Portal_phys_C_ReachedByExplosion, Location) == 0x000000, "Member 'Portal_phys_C_ReachedByExplosion::Location' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ReachedByExplosion, Damage) == 0x00000C, "Member 'Portal_phys_C_ReachedByExplosion::Damage' has a wrong offset!");

// Function portal_phys.portal_phys_C.slice
// 0x0001 (0x0001 - 0x0000)
struct Portal_phys_C_Slice final
{
public:
	bool                                          Clean;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Portal_phys_C_Slice) == 0x000001, "Wrong alignment on Portal_phys_C_Slice");
static_assert(sizeof(Portal_phys_C_Slice) == 0x000001, "Wrong size on Portal_phys_C_Slice");
static_assert(offsetof(Portal_phys_C_Slice, Clean) == 0x000000, "Member 'Portal_phys_C_Slice::Clean' has a wrong offset!");

// Function portal_phys.portal_phys_C.playerUsedOn
// 0x0090 (0x0090 - 0x0000)
struct Portal_phys_C_PlayerUsedOn final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Portal_phys_C_PlayerUsedOn) == 0x000008, "Wrong alignment on Portal_phys_C_PlayerUsedOn");
static_assert(sizeof(Portal_phys_C_PlayerUsedOn) == 0x000090, "Wrong size on Portal_phys_C_PlayerUsedOn");
static_assert(offsetof(Portal_phys_C_PlayerUsedOn, Player) == 0x000000, "Member 'Portal_phys_C_PlayerUsedOn::Player' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_PlayerUsedOn, Hit) == 0x000008, "Member 'Portal_phys_C_PlayerUsedOn::Hit' has a wrong offset!");

// Function portal_phys.portal_phys_C.hooked
// 0x0008 (0x0008 - 0x0000)
struct Portal_phys_C_Hooked final
{
public:
	class AHook_C*                                Hook;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Portal_phys_C_Hooked) == 0x000008, "Wrong alignment on Portal_phys_C_Hooked");
static_assert(sizeof(Portal_phys_C_Hooked) == 0x000008, "Wrong size on Portal_phys_C_Hooked");
static_assert(offsetof(Portal_phys_C_Hooked, Hook) == 0x000000, "Member 'Portal_phys_C_Hooked::Hook' has a wrong offset!");

// Function portal_phys.portal_phys_C.cleanSponge
// 0x0010 (0x0010 - 0x0000)
struct Portal_phys_C_CleanSponge final
{
public:
	float                                         Clean;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          Player;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Portal_phys_C_CleanSponge) == 0x000008, "Wrong alignment on Portal_phys_C_CleanSponge");
static_assert(sizeof(Portal_phys_C_CleanSponge) == 0x000010, "Wrong size on Portal_phys_C_CleanSponge");
static_assert(offsetof(Portal_phys_C_CleanSponge, Clean) == 0x000000, "Member 'Portal_phys_C_CleanSponge::Clean' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_CleanSponge, Player) == 0x000008, "Member 'Portal_phys_C_CleanSponge::Player' has a wrong offset!");

// Function portal_phys.portal_phys_C.hookTension
// 0x0008 (0x0008 - 0x0000)
struct Portal_phys_C_HookTension final
{
public:
	class AHook_C*                                Hook;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Portal_phys_C_HookTension) == 0x000008, "Wrong alignment on Portal_phys_C_HookTension");
static_assert(sizeof(Portal_phys_C_HookTension) == 0x000008, "Wrong size on Portal_phys_C_HookTension");
static_assert(offsetof(Portal_phys_C_HookTension, Hook) == 0x000000, "Member 'Portal_phys_C_HookTension::Hook' has a wrong offset!");

// Function portal_phys.portal_phys_C.set_ignoreSave_trigger
// 0x0001 (0x0001 - 0x0000)
struct Portal_phys_C_Set_ignoreSave_trigger final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Portal_phys_C_Set_ignoreSave_trigger) == 0x000001, "Wrong alignment on Portal_phys_C_Set_ignoreSave_trigger");
static_assert(sizeof(Portal_phys_C_Set_ignoreSave_trigger) == 0x000001, "Wrong size on Portal_phys_C_Set_ignoreSave_trigger");
static_assert(offsetof(Portal_phys_C_Set_ignoreSave_trigger, NewParam) == 0x000000, "Member 'Portal_phys_C_Set_ignoreSave_trigger::NewParam' has a wrong offset!");

// Function portal_phys.portal_phys_C.cordPlugged
// 0x0010 (0x0010 - 0x0000)
struct Portal_phys_C_CordPlugged final
{
public:
	class ACord_C*                                Cord;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACordSocket_C*                          Socket;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Portal_phys_C_CordPlugged) == 0x000008, "Wrong alignment on Portal_phys_C_CordPlugged");
static_assert(sizeof(Portal_phys_C_CordPlugged) == 0x000010, "Wrong size on Portal_phys_C_CordPlugged");
static_assert(offsetof(Portal_phys_C_CordPlugged, Cord) == 0x000000, "Member 'Portal_phys_C_CordPlugged::Cord' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_CordPlugged, Socket) == 0x000008, "Member 'Portal_phys_C_CordPlugged::Socket' has a wrong offset!");

// Function portal_phys.portal_phys_C.cordUnplugged
// 0x0010 (0x0010 - 0x0000)
struct Portal_phys_C_CordUnplugged final
{
public:
	class ACord_C*                                Cord;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACordSocket_C*                          Socket;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Portal_phys_C_CordUnplugged) == 0x000008, "Wrong alignment on Portal_phys_C_CordUnplugged");
static_assert(sizeof(Portal_phys_C_CordUnplugged) == 0x000010, "Wrong size on Portal_phys_C_CordUnplugged");
static_assert(offsetof(Portal_phys_C_CordUnplugged, Cord) == 0x000000, "Member 'Portal_phys_C_CordUnplugged::Cord' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_CordUnplugged, Socket) == 0x000008, "Member 'Portal_phys_C_CordUnplugged::Socket' has a wrong offset!");

// Function portal_phys.portal_phys_C.setActiveTrigger
// 0x0010 (0x0010 - 0x0000)
struct Portal_phys_C_SetActiveTrigger final
{
public:
	class AActor*                                 SentFrom;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Active;                                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Portal_phys_C_SetActiveTrigger) == 0x000008, "Wrong alignment on Portal_phys_C_SetActiveTrigger");
static_assert(sizeof(Portal_phys_C_SetActiveTrigger) == 0x000010, "Wrong size on Portal_phys_C_SetActiveTrigger");
static_assert(offsetof(Portal_phys_C_SetActiveTrigger, SentFrom) == 0x000000, "Member 'Portal_phys_C_SetActiveTrigger::SentFrom' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_SetActiveTrigger, Active) == 0x000008, "Member 'Portal_phys_C_SetActiveTrigger::Active' has a wrong offset!");

// Function portal_phys.portal_phys_C.BndEvt__insides_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct Portal_phys_C_BndEvt__insides_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Portal_phys_C_BndEvt__insides_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on Portal_phys_C_BndEvt__insides_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(Portal_phys_C_BndEvt__insides_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on Portal_phys_C_BndEvt__insides_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(Portal_phys_C_BndEvt__insides_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'Portal_phys_C_BndEvt__insides_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_BndEvt__insides_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'Portal_phys_C_BndEvt__insides_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_BndEvt__insides_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'Portal_phys_C_BndEvt__insides_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_BndEvt__insides_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'Portal_phys_C_BndEvt__insides_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_BndEvt__insides_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'Portal_phys_C_BndEvt__insides_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_BndEvt__insides_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'Portal_phys_C_BndEvt__insides_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function portal_phys.portal_phys_C.BndEvt__insides_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct Portal_phys_C_BndEvt__insides_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Portal_phys_C_BndEvt__insides_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on Portal_phys_C_BndEvt__insides_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(Portal_phys_C_BndEvt__insides_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on Portal_phys_C_BndEvt__insides_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(Portal_phys_C_BndEvt__insides_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'Portal_phys_C_BndEvt__insides_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_BndEvt__insides_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'Portal_phys_C_BndEvt__insides_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_BndEvt__insides_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'Portal_phys_C_BndEvt__insides_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_BndEvt__insides_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'Portal_phys_C_BndEvt__insides_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function portal_phys.portal_phys_C.BndEvt__outside_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct Portal_phys_C_BndEvt__outside_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Portal_phys_C_BndEvt__outside_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on Portal_phys_C_BndEvt__outside_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(Portal_phys_C_BndEvt__outside_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on Portal_phys_C_BndEvt__outside_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(Portal_phys_C_BndEvt__outside_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'Portal_phys_C_BndEvt__outside_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_BndEvt__outside_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'Portal_phys_C_BndEvt__outside_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_BndEvt__outside_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'Portal_phys_C_BndEvt__outside_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_BndEvt__outside_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'Portal_phys_C_BndEvt__outside_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function portal_phys.portal_phys_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct Portal_phys_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Portal_phys_C_ReceiveTick) == 0x000004, "Wrong alignment on Portal_phys_C_ReceiveTick");
static_assert(sizeof(Portal_phys_C_ReceiveTick) == 0x000004, "Wrong size on Portal_phys_C_ReceiveTick");
static_assert(offsetof(Portal_phys_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'Portal_phys_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function portal_phys.portal_phys_C.runTrigger
// 0x0010 (0x0010 - 0x0000)
struct Portal_phys_C_RunTrigger final
{
public:
	class AActor*                                 Param_Owner;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Portal_phys_C_RunTrigger) == 0x000008, "Wrong alignment on Portal_phys_C_RunTrigger");
static_assert(sizeof(Portal_phys_C_RunTrigger) == 0x000010, "Wrong size on Portal_phys_C_RunTrigger");
static_assert(offsetof(Portal_phys_C_RunTrigger, Param_Owner) == 0x000000, "Member 'Portal_phys_C_RunTrigger::Param_Owner' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_RunTrigger, Param_Index) == 0x000008, "Member 'Portal_phys_C_RunTrigger::Param_Index' has a wrong offset!");

// Function portal_phys.portal_phys_C.ExecuteUbergraph_portal_phys
// 0x0E20 (0x0E20 - 0x0000)
struct Portal_phys_C_ExecuteUbergraph_portal_phys final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_actor;                                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_4;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_4;                                // 0x0014(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                K2Node_Event_impact;                               // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_skipSetting;                          // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_Event_key_1;                                // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_12;                            // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_3;                                // 0x00C8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         K2Node_Event_damage_3;                             // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_fuel;                                 // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_2;                             // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hot;                                  // 0x015C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_1E4[0x4];                                      // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_11;                            // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_2;                                // 0x01F0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	Enum_interactionActions                       K2Node_Event_action;                               // 0x0278(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_279[0x7];                                      // 0x0279(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_10;                            // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_9;                             // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_1;                             // 0x0290(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_location_1;                           // 0x0294(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_8;                             // 0x02A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_7;                             // 0x02A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_6;                             // 0x02B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_wheelDelta;                           // 0x02B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BC[0x4];                                      // 0x02BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_5;                             // 0x02C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Event_mouse;                                // 0x02C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_4;                             // 0x02D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_Event_key;                                  // 0x02D8(0x0018)(HasGetValueTypeHash)
	bool                                          K2Node_Event_pressed;                              // 0x02F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F1[0x3];                                      // 0x02F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_temperature_1;                        // 0x02F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_temperature;                          // 0x02F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_speed;                                // 0x02FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_3;                             // 0x0300(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_1;                                // 0x0308(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class FString                                 K2Node_Event_name;                                 // 0x0390(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         K2Node_Event_volume;                               // 0x03A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A4[0x4];                                      // 0x03A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_2;                             // 0x03A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_location;                             // 0x03B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage;                               // 0x03BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_clean_1;                              // 0x03C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C1[0x7];                                      // 0x03C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_1;                             // 0x03C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit;                                  // 0x03D0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AHook_C*                                K2Node_Event_hook_1;                               // 0x0458(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_clean;                                // 0x0460(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_464[0x4];                                      // 0x0464(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player;                               // 0x0468(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHook_C*                                K2Node_Event_hook;                                 // 0x0470(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_NewParam;                             // 0x0478(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_479[0x7];                                      // 0x0479(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACord_C*                                K2Node_Event_cord_1;                               // 0x0480(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACordSocket_C*                          K2Node_Event_socket_1;                             // 0x0488(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACord_C*                                K2Node_Event_cord;                                 // 0x0490(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACordSocket_C*                          K2Node_Event_socket;                               // 0x0498(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_sentFrom;                             // 0x04A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_active;                               // 0x04A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A9[0x7];                                      // 0x04A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_2;  // 0x04B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_2;           // 0x04B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_2;            // 0x04C0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_2;       // 0x04C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x04CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CD[0x3];                                      // 0x04CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x04D0(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_1;  // 0x0558(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_1;           // 0x0560(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_1;            // 0x0568(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_1;       // 0x0570(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_574[0x4];                                      // 0x0574(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_K2_GetRootComponent_ReturnValue;          // 0x0578(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CallFunc_K2_GetRootComponent_ReturnValue_1;        // 0x0580(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_DynamicCast_AsPrimitive_Component;          // 0x0588(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0590(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_591[0x7];                                      // 0x0591(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_DynamicCast_AsPrimitive_Component_1;        // 0x0598(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x05A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A1[0x3];                                      // 0x05A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x05A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x05A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A9[0x7];                                      // 0x05A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x05B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x05B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x05C0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x05C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSimulatingPhysics_ReturnValue;          // 0x05CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x05CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5CE[0x2];                                      // 0x05CE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_K2_GetRootComponent_ReturnValue_2;        // 0x05D0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_DynamicCast_AsPawn;                         // 0x05D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x05E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5E1[0x7];                                      // 0x05E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_DynamicCast_AsPrimitive_Component_2;        // 0x05E8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x05F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F1[0x7];                                      // 0x05F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_DynamicCast_AsMain_Player;                  // 0x05F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0600(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_601[0x3];                                      // 0x0601(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetPhysicsAngularVelocityInDegrees_ReturnValue; // 0x0604(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_DynamicCast_AsPawn_1;                       // 0x0610(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x0618(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_619[0x3];                                      // 0x0619(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x061C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_DynamicCast_AsMain_Player_1;                // 0x0628(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x0630(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_631[0x7];                                      // 0x0631(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0638(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0640(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue;           // 0x064C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UPawnMovementComponent*                 CallFunc_GetMovementComponent_ReturnValue;         // 0x0658(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0660(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_static;                               // 0x0690(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_frozen;                               // 0x0691(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_active_1;                             // 0x0692(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_693[0xD];                                      // 0x0693(0x000D)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x06A0(0x0030)(IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_InverseTransformRotation_ReturnValue;     // 0x06D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DC[0x4];                                      // 0x06DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue_1;     // 0x06E0(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_InverseTransformDirection_ReturnValue;    // 0x0710(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_TransformRotation_ReturnValue;            // 0x071C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_TransformDirection_ReturnValue;           // 0x0728(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_InverseTransformDirection_ReturnValue_1;  // 0x0734(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_InverseTransformDirection_ReturnValue_2;  // 0x0740(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TransformDirection_ReturnValue_1;         // 0x074C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TransformDirection_ReturnValue_2;         // 0x0758(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_activate;                             // 0x0764(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_765[0x3];                                      // 0x0765(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AWaterVolume_C*                         K2Node_Event_water;                                // 0x0768(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APortal_C*                              K2Node_DynamicCast_AsPortal;                       // 0x0770(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_7;                     // 0x0778(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_779[0x7];                                      // 0x0779(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APortal_C*                              K2Node_DynamicCast_AsPortal_1;                     // 0x0780(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_8;                     // 0x0788(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_789[0x7];                                      // 0x0789(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AWaterVolume_C*                         K2Node_Event_water_1;                              // 0x0790(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWaterVolume_C*                         K2Node_Event_water_2;                              // 0x0798(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWaterVolume_C*                         K2Node_Event_water_3;                              // 0x07A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_5;                             // 0x07A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_5;                                // 0x07AC(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_834[0x4];                                      // 0x0834(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_actor_1;                              // 0x0838(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_impact_1;                             // 0x0840(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84C[0x4];                                      // 0x084C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUmg_texturePicker_C*                   K2Node_Event_picker;                               // 0x0850(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Event_texture;                              // 0x0858(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_index_1;                              // 0x0860(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Event_color;                                // 0x0864(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_874[0x4];                                      // 0x0874(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_Event_key_2;                                // 0x0878(0x0018)(HasGetValueTypeHash)
	bool                                          K2Node_Event_pressed_1;                            // 0x0890(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_891[0x3];                                      // 0x0891(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0894(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_898[0x8];                                      // 0x0898(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue_2;     // 0x08A0(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue_3;     // 0x08D0(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeRelativeTransform_ReturnValue;        // 0x0900(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_ComposeTransforms_ReturnValue;            // 0x0930(0x0030)(IsPlainOldData, NoDestructor)
	struct FStruct_settings                       K2Node_Event_settings;                             // 0x0960(0x00F0)(HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0A50(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0A5C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0A68(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0A74(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0A80(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0A84(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0A90(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9C[0x4];                                      // 0x0A9C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0AA0(0x0030)(IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult;      // 0x0AD0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue;         // 0x0B58(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B59[0x7];                                      // 0x0B59(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue_1;               // 0x0B60(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0B90(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B98[0x8];                                      // 0x0B98(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_noScale_ReturnValue;                      // 0x0BA0(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_GetTransform_ReturnValue_2;               // 0x0BD0(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0C00(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C04[0xC];                                      // 0x0C04(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_noScale_ReturnValue_1;                    // 0x0C10(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeRelativeTransform_ReturnValue_1;      // 0x0C40(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue_4;     // 0x0C70(0x0030)(IsPlainOldData, NoDestructor)
	class UStaticMeshComponent*                   CallFunc_Array_Get_Item_1;                         // 0x0CA0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CA8[0x8];                                      // 0x0CA8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_ComposeTransforms_ReturnValue_1;          // 0x0CB0(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0CE0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CE1[0x3];                                      // 0x0CE1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetWorldTransform_SweepHitResult;      // 0x0CE4(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0D6C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainGamemode_C*                        K2Node_Event_gamemode;                             // 0x0D70(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0D78(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D79[0x3];                                      // 0x0D79(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0D7C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_owner;                                // 0x0D80(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_index;                                // 0x0D88(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Conv_IntToBool_ReturnValue;               // 0x0D8C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0D8D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D8E[0x2];                                      // 0x0D8E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class APortal_C*                              K2Node_DynamicCast_AsPortal_2;                     // 0x0D90(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_9;                     // 0x0D98(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D99[0x7];                                      // 0x0D99(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APortal_C*                              K2Node_DynamicCast_AsPortal_3;                     // 0x0DA0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_10;                    // 0x0DA8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DA9[0x7];                                      // 0x0DA9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APortal_C*                              K2Node_DynamicCast_AsPortal_4;                     // 0x0DB0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_11;                    // 0x0DB8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DB9[0x7];                                      // 0x0DB9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode;          // 0x0DC0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_getObjectFromKey_Output;                  // 0x0DC8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IInt_objects_C>        CallFunc_getKey_self_CastInput;                    // 0x0DD0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class FString                                 CallFunc_getKey_key;                               // 0x0DE0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class APortal_phys_C*                         K2Node_DynamicCast_AsPortal_Phys;                  // 0x0DF0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_12;                    // 0x0DF8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0DF9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DFA[0x6];                                      // 0x0DFA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APortal_C*                              K2Node_DynamicCast_AsPortal_5;                     // 0x0E00(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_13;                    // 0x0E08(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E09[0x7];                                      // 0x0E09(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APortal_C*                              K2Node_DynamicCast_AsPortal_6;                     // 0x0E10(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_14;                    // 0x0E18(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E19[0x3];                                      // 0x0E19(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_BoolToInt_ReturnValue;               // 0x0E1C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Portal_phys_C_ExecuteUbergraph_portal_phys) == 0x000010, "Wrong alignment on Portal_phys_C_ExecuteUbergraph_portal_phys");
static_assert(sizeof(Portal_phys_C_ExecuteUbergraph_portal_phys) == 0x000E20, "Wrong size on Portal_phys_C_ExecuteUbergraph_portal_phys");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, EntryPoint) == 0x000000, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::EntryPoint' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_actor) == 0x000008, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_actor' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_damage_4) == 0x000010, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_damage_4' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_hit_4) == 0x000014, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_hit_4' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_impact) == 0x00009C, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_impact' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_skipSetting) == 0x0000A8, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_skipSetting' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_key_1) == 0x0000B0, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_key_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_player_12) == 0x0000C0, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_player_12' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_hit_3) == 0x0000C8, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_hit_3' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_damage_3) == 0x000150, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_damage_3' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_fuel) == 0x000154, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_fuel' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_damage_2) == 0x000158, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_damage_2' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_hot) == 0x00015C, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_hot' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_player_11) == 0x0001E8, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_player_11' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_hit_2) == 0x0001F0, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_hit_2' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_action) == 0x000278, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_action' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_player_10) == 0x000280, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_player_10' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_player_9) == 0x000288, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_player_9' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_damage_1) == 0x000290, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_damage_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_location_1) == 0x000294, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_location_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_player_8) == 0x0002A0, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_player_8' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_player_7) == 0x0002A8, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_player_7' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_player_6) == 0x0002B0, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_player_6' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_wheelDelta) == 0x0002B8, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_wheelDelta' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_player_5) == 0x0002C0, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_player_5' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_mouse) == 0x0002C8, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_mouse' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_player_4) == 0x0002D0, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_player_4' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_key) == 0x0002D8, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_key' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_pressed) == 0x0002F0, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_pressed' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_temperature_1) == 0x0002F4, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_temperature_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_temperature) == 0x0002F8, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_temperature' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_speed) == 0x0002FC, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_speed' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_player_3) == 0x000300, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_player_3' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_hit_1) == 0x000308, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_hit_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_name) == 0x000390, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_name' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_volume) == 0x0003A0, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_volume' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_player_2) == 0x0003A8, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_player_2' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_location) == 0x0003B0, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_location' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_damage) == 0x0003BC, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_damage' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_clean_1) == 0x0003C0, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_clean_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_player_1) == 0x0003C8, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_player_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_hit) == 0x0003D0, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_hit' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_hook_1) == 0x000458, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_hook_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_clean) == 0x000460, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_clean' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_player) == 0x000468, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_player' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_hook) == 0x000470, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_hook' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_NewParam) == 0x000478, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_NewParam' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_cord_1) == 0x000480, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_cord_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_socket_1) == 0x000488, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_socket_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_cord) == 0x000490, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_cord' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_socket) == 0x000498, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_socket' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_sentFrom) == 0x0004A0, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_sentFrom' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_active) == 0x0004A8, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_active' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_ComponentBoundEvent_OverlappedComponent_2) == 0x0004B0, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_ComponentBoundEvent_OverlappedComponent_2' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_ComponentBoundEvent_OtherActor_2) == 0x0004B8, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_ComponentBoundEvent_OtherActor_2' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_ComponentBoundEvent_OtherComp_2) == 0x0004C0, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_ComponentBoundEvent_OtherComp_2' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_ComponentBoundEvent_OtherBodyIndex_2) == 0x0004C8, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_ComponentBoundEvent_OtherBodyIndex_2' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_ComponentBoundEvent_bFromSweep) == 0x0004CC, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_ComponentBoundEvent_SweepResult) == 0x0004D0, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_ComponentBoundEvent_OverlappedComponent_1) == 0x000558, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_ComponentBoundEvent_OverlappedComponent_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_ComponentBoundEvent_OtherActor_1) == 0x000560, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_ComponentBoundEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_ComponentBoundEvent_OtherComp_1) == 0x000568, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_ComponentBoundEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_ComponentBoundEvent_OtherBodyIndex_1) == 0x000570, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_ComponentBoundEvent_OtherBodyIndex_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_K2_GetRootComponent_ReturnValue) == 0x000578, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_K2_GetRootComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_K2_GetRootComponent_ReturnValue_1) == 0x000580, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_K2_GetRootComponent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_DynamicCast_AsPrimitive_Component) == 0x000588, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_DynamicCast_AsPrimitive_Component' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_DynamicCast_bSuccess) == 0x000590, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_DynamicCast_AsPrimitive_Component_1) == 0x000598, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_DynamicCast_AsPrimitive_Component_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_DynamicCast_bSuccess_1) == 0x0005A0, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_Array_AddUnique_ReturnValue) == 0x0005A4, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_Array_RemoveItem_ReturnValue) == 0x0005A8, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x0005B0, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_ComponentBoundEvent_OtherActor) == 0x0005B8, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_ComponentBoundEvent_OtherComp) == 0x0005C0, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x0005C8, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_IsSimulatingPhysics_ReturnValue) == 0x0005CC, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_IsSimulatingPhysics_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_Array_Contains_ReturnValue) == 0x0005CD, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_K2_GetRootComponent_ReturnValue_2) == 0x0005D0, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_K2_GetRootComponent_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_DynamicCast_AsPawn) == 0x0005D8, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_DynamicCast_AsPawn' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_DynamicCast_bSuccess_2) == 0x0005E0, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_DynamicCast_AsPrimitive_Component_2) == 0x0005E8, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_DynamicCast_AsPrimitive_Component_2' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_DynamicCast_bSuccess_3) == 0x0005F0, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_DynamicCast_AsMain_Player) == 0x0005F8, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_DynamicCast_AsMain_Player' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_DynamicCast_bSuccess_4) == 0x000600, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_GetPhysicsAngularVelocityInDegrees_ReturnValue) == 0x000604, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_GetPhysicsAngularVelocityInDegrees_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_DynamicCast_AsPawn_1) == 0x000610, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_DynamicCast_AsPawn_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_DynamicCast_bSuccess_5) == 0x000618, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_GetVelocity_ReturnValue) == 0x00061C, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_DynamicCast_AsMain_Player_1) == 0x000628, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_DynamicCast_AsMain_Player_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_DynamicCast_bSuccess_6) == 0x000630, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_GetController_ReturnValue) == 0x000638, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000640, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_GetControlRotation_ReturnValue) == 0x00064C, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_GetControlRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_GetMovementComponent_ReturnValue) == 0x000658, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_GetMovementComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_GetTransform_ReturnValue) == 0x000660, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_static) == 0x000690, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_static' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_frozen) == 0x000691, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_frozen' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_active_1) == 0x000692, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_active_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x0006A0, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_InverseTransformRotation_ReturnValue) == 0x0006D0, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_InverseTransformRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_K2_GetComponentToWorld_ReturnValue_1) == 0x0006E0, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_K2_GetComponentToWorld_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_InverseTransformDirection_ReturnValue) == 0x000710, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_InverseTransformDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_TransformRotation_ReturnValue) == 0x00071C, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_TransformRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_TransformDirection_ReturnValue) == 0x000728, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_TransformDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_InverseTransformDirection_ReturnValue_1) == 0x000734, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_InverseTransformDirection_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_InverseTransformDirection_ReturnValue_2) == 0x000740, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_InverseTransformDirection_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_TransformDirection_ReturnValue_1) == 0x00074C, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_TransformDirection_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_TransformDirection_ReturnValue_2) == 0x000758, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_TransformDirection_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_activate) == 0x000764, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_activate' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_water) == 0x000768, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_water' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_DynamicCast_AsPortal) == 0x000770, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_DynamicCast_AsPortal' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_DynamicCast_bSuccess_7) == 0x000778, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_DynamicCast_bSuccess_7' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_DynamicCast_AsPortal_1) == 0x000780, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_DynamicCast_AsPortal_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_DynamicCast_bSuccess_8) == 0x000788, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_DynamicCast_bSuccess_8' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_water_1) == 0x000790, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_water_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_water_2) == 0x000798, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_water_2' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_water_3) == 0x0007A0, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_water_3' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_damage_5) == 0x0007A8, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_damage_5' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_hit_5) == 0x0007AC, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_hit_5' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_actor_1) == 0x000838, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_actor_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_impact_1) == 0x000840, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_impact_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_picker) == 0x000850, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_picker' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_texture) == 0x000858, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_texture' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_index_1) == 0x000860, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_index_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_color) == 0x000864, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_color' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_key_2) == 0x000878, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_key_2' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_pressed_1) == 0x000890, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_pressed_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, Temp_int_Array_Index_Variable) == 0x000894, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_K2_GetComponentToWorld_ReturnValue_2) == 0x0008A0, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_K2_GetComponentToWorld_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_K2_GetComponentToWorld_ReturnValue_3) == 0x0008D0, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_K2_GetComponentToWorld_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_MakeRelativeTransform_ReturnValue) == 0x000900, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_MakeRelativeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_ComposeTransforms_ReturnValue) == 0x000930, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_ComposeTransforms_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_settings) == 0x000960, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_settings' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_BreakTransform_Location) == 0x000A50, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_BreakTransform_Rotation) == 0x000A5C, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_BreakTransform_Scale) == 0x000A68, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_GetActorForwardVector_ReturnValue) == 0x000A74, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_DeltaSeconds) == 0x000A80, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000A84, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_Add_VectorVector_ReturnValue) == 0x000A90, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_MakeTransform_ReturnValue) == 0x000AA0, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_K2_SetActorTransform_SweepHitResult) == 0x000AD0, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_K2_SetActorTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_K2_SetActorTransform_ReturnValue) == 0x000B58, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_K2_SetActorTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_GetTransform_ReturnValue_1) == 0x000B60, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_GetTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_Array_Get_Item) == 0x000B90, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_noScale_ReturnValue) == 0x000BA0, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_noScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_GetTransform_ReturnValue_2) == 0x000BD0, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_GetTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_Array_Length_ReturnValue) == 0x000C00, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_noScale_ReturnValue_1) == 0x000C10, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_noScale_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_MakeRelativeTransform_ReturnValue_1) == 0x000C40, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_MakeRelativeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_K2_GetComponentToWorld_ReturnValue_4) == 0x000C70, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_K2_GetComponentToWorld_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_Array_Get_Item_1) == 0x000CA0, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_ComposeTransforms_ReturnValue_1) == 0x000CB0, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_ComposeTransforms_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_IsValid_ReturnValue) == 0x000CE0, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_K2_SetWorldTransform_SweepHitResult) == 0x000CE4, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_K2_SetWorldTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, Temp_int_Loop_Counter_Variable) == 0x000D6C, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_gamemode) == 0x000D70, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_gamemode' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_Less_IntInt_ReturnValue) == 0x000D78, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_Add_IntInt_ReturnValue) == 0x000D7C, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_owner) == 0x000D80, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_owner' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_Event_index) == 0x000D88, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_Event_index' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_Conv_IntToBool_ReturnValue) == 0x000D8C, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_Conv_IntToBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_Not_PreBool_ReturnValue) == 0x000D8D, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_DynamicCast_AsPortal_2) == 0x000D90, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_DynamicCast_AsPortal_2' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_DynamicCast_bSuccess_9) == 0x000D98, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_DynamicCast_bSuccess_9' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_DynamicCast_AsPortal_3) == 0x000DA0, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_DynamicCast_AsPortal_3' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_DynamicCast_bSuccess_10) == 0x000DA8, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_DynamicCast_bSuccess_10' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_DynamicCast_AsPortal_4) == 0x000DB0, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_DynamicCast_AsPortal_4' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_DynamicCast_bSuccess_11) == 0x000DB8, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_DynamicCast_bSuccess_11' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_getMainGamemode_AsMain_Gamemode) == 0x000DC0, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_getMainGamemode_AsMain_Gamemode' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_getObjectFromKey_Output) == 0x000DC8, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_getObjectFromKey_Output' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_getKey_self_CastInput) == 0x000DD0, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_getKey_self_CastInput' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_getKey_key) == 0x000DE0, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_getKey_key' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_DynamicCast_AsPortal_Phys) == 0x000DF0, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_DynamicCast_AsPortal_Phys' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_DynamicCast_bSuccess_12) == 0x000DF8, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_DynamicCast_bSuccess_12' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_IsValid_ReturnValue_1) == 0x000DF9, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_DynamicCast_AsPortal_5) == 0x000E00, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_DynamicCast_AsPortal_5' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_DynamicCast_bSuccess_13) == 0x000E08, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_DynamicCast_bSuccess_13' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_DynamicCast_AsPortal_6) == 0x000E10, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_DynamicCast_AsPortal_6' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, K2Node_DynamicCast_bSuccess_14) == 0x000E18, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::K2Node_DynamicCast_bSuccess_14' has a wrong offset!");
static_assert(offsetof(Portal_phys_C_ExecuteUbergraph_portal_phys, CallFunc_Conv_BoolToInt_ReturnValue) == 0x000E1C, "Member 'Portal_phys_C_ExecuteUbergraph_portal_phys::CallFunc_Conv_BoolToInt_ReturnValue' has a wrong offset!");

}

