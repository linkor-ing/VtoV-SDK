#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: bed

#include "Basic.hpp"

#include "Enum_interactionActions_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function bed.bed_C.ExecuteUbergraph_bed
// 0x00D8 (0x00D8 - 0x0000)
struct bed_C_ExecuteUbergraph_bed final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player;                               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit;                                  // 0x0010(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	Enum_interactionActions                       K2Node_Event_action;                               // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9A[0x6];                                       // 0x009A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode;          // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode_1;        // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInst_C*                            CallFunc_getMainGameInstance_AsGame_Inst;          // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorUpVector_ReturnValue;             // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(bed_C_ExecuteUbergraph_bed) == 0x000008, "Wrong alignment on bed_C_ExecuteUbergraph_bed");
static_assert(sizeof(bed_C_ExecuteUbergraph_bed) == 0x0000D8, "Wrong size on bed_C_ExecuteUbergraph_bed");
static_assert(offsetof(bed_C_ExecuteUbergraph_bed, EntryPoint) == 0x000000, "Member 'bed_C_ExecuteUbergraph_bed::EntryPoint' has a wrong offset!");
static_assert(offsetof(bed_C_ExecuteUbergraph_bed, K2Node_Event_player) == 0x000008, "Member 'bed_C_ExecuteUbergraph_bed::K2Node_Event_player' has a wrong offset!");
static_assert(offsetof(bed_C_ExecuteUbergraph_bed, K2Node_Event_hit) == 0x000010, "Member 'bed_C_ExecuteUbergraph_bed::K2Node_Event_hit' has a wrong offset!");
static_assert(offsetof(bed_C_ExecuteUbergraph_bed, K2Node_Event_action) == 0x000098, "Member 'bed_C_ExecuteUbergraph_bed::K2Node_Event_action' has a wrong offset!");
static_assert(offsetof(bed_C_ExecuteUbergraph_bed, K2Node_SwitchEnum_CmpSuccess) == 0x000099, "Member 'bed_C_ExecuteUbergraph_bed::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(bed_C_ExecuteUbergraph_bed, CallFunc_getMainGamemode_AsMain_Gamemode) == 0x0000A0, "Member 'bed_C_ExecuteUbergraph_bed::CallFunc_getMainGamemode_AsMain_Gamemode' has a wrong offset!");
static_assert(offsetof(bed_C_ExecuteUbergraph_bed, CallFunc_getMainGamemode_AsMain_Gamemode_1) == 0x0000A8, "Member 'bed_C_ExecuteUbergraph_bed::CallFunc_getMainGamemode_AsMain_Gamemode_1' has a wrong offset!");
static_assert(offsetof(bed_C_ExecuteUbergraph_bed, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x0000B0, "Member 'bed_C_ExecuteUbergraph_bed::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(bed_C_ExecuteUbergraph_bed, CallFunc_getMainGameInstance_AsGame_Inst) == 0x0000B8, "Member 'bed_C_ExecuteUbergraph_bed::CallFunc_getMainGameInstance_AsGame_Inst' has a wrong offset!");
static_assert(offsetof(bed_C_ExecuteUbergraph_bed, CallFunc_GetActorUpVector_ReturnValue) == 0x0000C0, "Member 'bed_C_ExecuteUbergraph_bed::CallFunc_GetActorUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(bed_C_ExecuteUbergraph_bed, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000CC, "Member 'bed_C_ExecuteUbergraph_bed::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(bed_C_ExecuteUbergraph_bed, CallFunc_Dot_VectorVector_ReturnValue) == 0x0000D0, "Member 'bed_C_ExecuteUbergraph_bed::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(bed_C_ExecuteUbergraph_bed, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000D4, "Member 'bed_C_ExecuteUbergraph_bed::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function bed.bed_C.actionOptionIndex
// 0x0098 (0x0098 - 0x0000)
struct bed_C_ActionOptionIndex final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Param_Hit;                                         // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	Enum_interactionActions                       Action;                                            // 0x0090(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(bed_C_ActionOptionIndex) == 0x000008, "Wrong alignment on bed_C_ActionOptionIndex");
static_assert(sizeof(bed_C_ActionOptionIndex) == 0x000098, "Wrong size on bed_C_ActionOptionIndex");
static_assert(offsetof(bed_C_ActionOptionIndex, Player) == 0x000000, "Member 'bed_C_ActionOptionIndex::Player' has a wrong offset!");
static_assert(offsetof(bed_C_ActionOptionIndex, Param_Hit) == 0x000008, "Member 'bed_C_ActionOptionIndex::Param_Hit' has a wrong offset!");
static_assert(offsetof(bed_C_ActionOptionIndex, Action) == 0x000090, "Member 'bed_C_ActionOptionIndex::Action' has a wrong offset!");

// Function bed.bed_C.isButtonUsed
// 0x0001 (0x0001 - 0x0000)
struct bed_C_IsButtonUsed final
{
public:
	bool                                          Failed;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(bed_C_IsButtonUsed) == 0x000001, "Wrong alignment on bed_C_IsButtonUsed");
static_assert(sizeof(bed_C_IsButtonUsed) == 0x000001, "Wrong size on bed_C_IsButtonUsed");
static_assert(offsetof(bed_C_IsButtonUsed, Failed) == 0x000000, "Member 'bed_C_IsButtonUsed::Failed' has a wrong offset!");

// Function bed.bed_C.lookAt
// 0x00E0 (0x00E0 - 0x0000)
struct bed_C_LookAt final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Param_Hit;                                         // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          Return;                                            // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Text;                                              // 0x0098(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    boundObjectReplace;                                // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Number;                                            // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_MakeLiteralText_ReturnValue;              // 0x00B8(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(bed_C_LookAt) == 0x000008, "Wrong alignment on bed_C_LookAt");
static_assert(sizeof(bed_C_LookAt) == 0x0000E0, "Wrong size on bed_C_LookAt");
static_assert(offsetof(bed_C_LookAt, Player) == 0x000000, "Member 'bed_C_LookAt::Player' has a wrong offset!");
static_assert(offsetof(bed_C_LookAt, Param_Hit) == 0x000008, "Member 'bed_C_LookAt::Param_Hit' has a wrong offset!");
static_assert(offsetof(bed_C_LookAt, Return) == 0x000090, "Member 'bed_C_LookAt::Return' has a wrong offset!");
static_assert(offsetof(bed_C_LookAt, Text) == 0x000098, "Member 'bed_C_LookAt::Text' has a wrong offset!");
static_assert(offsetof(bed_C_LookAt, boundObjectReplace) == 0x0000A8, "Member 'bed_C_LookAt::boundObjectReplace' has a wrong offset!");
static_assert(offsetof(bed_C_LookAt, Number) == 0x0000B0, "Member 'bed_C_LookAt::Number' has a wrong offset!");
static_assert(offsetof(bed_C_LookAt, CallFunc_MakeLiteralText_ReturnValue) == 0x0000B8, "Member 'bed_C_LookAt::CallFunc_MakeLiteralText_ReturnValue' has a wrong offset!");
static_assert(offsetof(bed_C_LookAt, CallFunc_Conv_TextToString_ReturnValue) == 0x0000D0, "Member 'bed_C_LookAt::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");

// Function bed.bed_C.noRespawn
// 0x0002 (0x0002 - 0x0000)
struct bed_C_NoRespawn final
{
public:
	bool                                          Param_NoRespawn;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(bed_C_NoRespawn) == 0x000001, "Wrong alignment on bed_C_NoRespawn");
static_assert(sizeof(bed_C_NoRespawn) == 0x000002, "Wrong size on bed_C_NoRespawn");
static_assert(offsetof(bed_C_NoRespawn, Param_NoRespawn) == 0x000000, "Member 'bed_C_NoRespawn::Param_NoRespawn' has a wrong offset!");
static_assert(offsetof(bed_C_NoRespawn, Return) == 0x000001, "Member 'bed_C_NoRespawn::Return' has a wrong offset!");

// Function bed.bed_C.canPickup
// 0x0001 (0x0001 - 0x0000)
struct bed_C_CanPickup final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(bed_C_CanPickup) == 0x000001, "Wrong alignment on bed_C_CanPickup");
static_assert(sizeof(bed_C_CanPickup) == 0x000001, "Wrong size on bed_C_CanPickup");
static_assert(offsetof(bed_C_CanPickup, Return) == 0x000000, "Member 'bed_C_CanPickup::Return' has a wrong offset!");

// Function bed.bed_C.asProp
// 0x0008 (0x0008 - 0x0000)
struct bed_C_AsProp final
{
public:
	class AProp_C*                                Return;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(bed_C_AsProp) == 0x000008, "Wrong alignment on bed_C_AsProp");
static_assert(sizeof(bed_C_AsProp) == 0x000008, "Wrong size on bed_C_AsProp");
static_assert(offsetof(bed_C_AsProp, Return) == 0x000000, "Member 'bed_C_AsProp::Return' has a wrong offset!");

// Function bed.bed_C.canBePutInContainer
// 0x0001 (0x0001 - 0x0000)
struct bed_C_CanBePutInContainer final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(bed_C_CanBePutInContainer) == 0x000001, "Wrong alignment on bed_C_CanBePutInContainer");
static_assert(sizeof(bed_C_CanBePutInContainer) == 0x000001, "Wrong size on bed_C_CanBePutInContainer");
static_assert(offsetof(bed_C_CanBePutInContainer, Return) == 0x000000, "Member 'bed_C_CanBePutInContainer::Return' has a wrong offset!");

// Function bed.bed_C.getActionOptions
// 0x0060 (0x0060 - 0x0000)
struct bed_C_GetActionOptions final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Component;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         Options;                                           // 0x0018(0x0010)(Parm, OutParm)
	TArray<Enum_interactionActions>               Options_enum;                                      // 0x0028(0x0010)(Parm, OutParm)
	TArray<class FText>                           OptionsNamesOverlay;                               // 0x0038(0x0010)(Parm, OutParm)
	uint8                                         Number;                                            // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<Enum_interactionActions>               K2Node_MakeArray_Array;                            // 0x0050(0x0010)(ReferenceParm)
};
static_assert(alignof(bed_C_GetActionOptions) == 0x000008, "Wrong alignment on bed_C_GetActionOptions");
static_assert(sizeof(bed_C_GetActionOptions) == 0x000060, "Wrong size on bed_C_GetActionOptions");
static_assert(offsetof(bed_C_GetActionOptions, Player) == 0x000000, "Member 'bed_C_GetActionOptions::Player' has a wrong offset!");
static_assert(offsetof(bed_C_GetActionOptions, Component) == 0x000008, "Member 'bed_C_GetActionOptions::Component' has a wrong offset!");
static_assert(offsetof(bed_C_GetActionOptions, Actor) == 0x000010, "Member 'bed_C_GetActionOptions::Actor' has a wrong offset!");
static_assert(offsetof(bed_C_GetActionOptions, Options) == 0x000018, "Member 'bed_C_GetActionOptions::Options' has a wrong offset!");
static_assert(offsetof(bed_C_GetActionOptions, Options_enum) == 0x000028, "Member 'bed_C_GetActionOptions::Options_enum' has a wrong offset!");
static_assert(offsetof(bed_C_GetActionOptions, OptionsNamesOverlay) == 0x000038, "Member 'bed_C_GetActionOptions::OptionsNamesOverlay' has a wrong offset!");
static_assert(offsetof(bed_C_GetActionOptions, Number) == 0x000048, "Member 'bed_C_GetActionOptions::Number' has a wrong offset!");
static_assert(offsetof(bed_C_GetActionOptions, K2Node_MakeArray_Array) == 0x000050, "Member 'bed_C_GetActionOptions::K2Node_MakeArray_Array' has a wrong offset!");

}

