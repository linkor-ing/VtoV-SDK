#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Umg_serverMinigame

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "InputCore_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function umg_serverMinigame.umg_serverMinigame_C.ExecuteUbergraph_umg_serverMinigame
// 0x0108 (0x0108 - 0x0000)
struct Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 CallFunc_CreateRenderTarget2D_ReturnValue;         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvas*                                CallFunc_BeginDrawCanvasToRenderTarget_Canvas;     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_BeginDrawCanvasToRenderTarget_Size;       // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDrawToRenderTargetContext             CallFunc_BeginDrawCanvasToRenderTarget_Context;    // 0x0038(0x0010)(NoDestructor)
	int32                                         Temp_int_Variable_1;                               // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2866[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2867[0x3];                                     // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUmg_serverMinigameSlott_C*             CallFunc_Create_ReturnValue;                       // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUmg_serverMinigameSlott_C*             CallFunc_Array_Get_Item;                           // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_makeProb_Output_Get;                      // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPanelSlot*                             CallFunc_AddChild_ReturnValue;                     // 0x0070(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUmg_serverMinigameSlott_C*             CallFunc_Array_Get_Item_1;                         // 0x0078(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2868[0x3];                                     // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_correct;                        // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2869[0x2];                                     // 0x008E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0090(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGlobalTimeDilation_ReturnValue;        // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_createTime_ReturnValue;                   // 0x00D0(0x0018)()
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VictoryFloatPlusEquals_FloatOut;          // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USaveSlot_C*                            CallFunc_getSaveSlot_saveSlot;                     // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_286A[0x3];                                     // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FMin_ReturnValue;                         // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame) == 0x000008, "Wrong alignment on Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame");
static_assert(sizeof(Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame) == 0x000108, "Wrong size on Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame");
static_assert(offsetof(Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame, EntryPoint) == 0x000000, "Member 'Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame::EntryPoint' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame, Temp_int_Variable) == 0x000004, "Member 'Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame, CallFunc_Add_IntInt_ReturnValue_1) == 0x000010, "Member 'Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame, Temp_int_Array_Index_Variable) == 0x000014, "Member 'Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame, CallFunc_CreateRenderTarget2D_ReturnValue) == 0x000018, "Member 'Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame::CallFunc_CreateRenderTarget2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000020, "Member 'Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame, CallFunc_BeginDrawCanvasToRenderTarget_Canvas) == 0x000028, "Member 'Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame::CallFunc_BeginDrawCanvasToRenderTarget_Canvas' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame, CallFunc_BeginDrawCanvasToRenderTarget_Size) == 0x000030, "Member 'Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame::CallFunc_BeginDrawCanvasToRenderTarget_Size' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame, CallFunc_BeginDrawCanvasToRenderTarget_Context) == 0x000038, "Member 'Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame::CallFunc_BeginDrawCanvasToRenderTarget_Context' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame, Temp_int_Variable_1) == 0x000048, "Member 'Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00004C, "Member 'Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame, CallFunc_Add_IntInt_ReturnValue_2) == 0x000050, "Member 'Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000054, "Member 'Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame, CallFunc_Create_ReturnValue) == 0x000058, "Member 'Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame, CallFunc_Array_Get_Item) == 0x000060, "Member 'Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame, CallFunc_makeProb_Output_Get) == 0x000068, "Member 'Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame::CallFunc_makeProb_Output_Get' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame, CallFunc_Array_Add_ReturnValue) == 0x00006C, "Member 'Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame, CallFunc_AddChild_ReturnValue) == 0x000070, "Member 'Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame::CallFunc_AddChild_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame, CallFunc_Array_Get_Item_1) == 0x000078, "Member 'Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame, CallFunc_Array_Length_ReturnValue) == 0x000080, "Member 'Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame, CallFunc_Less_IntInt_ReturnValue) == 0x000084, "Member 'Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame, CallFunc_Array_Length_ReturnValue_1) == 0x000088, "Member 'Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame, CallFunc_Less_IntInt_ReturnValue_1) == 0x00008C, "Member 'Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame, K2Node_CustomEvent_correct) == 0x00008D, "Member 'Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame::K2Node_CustomEvent_correct' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame, K2Node_Event_MyGeometry) == 0x000090, "Member 'Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame, K2Node_Event_InDeltaTime) == 0x0000C8, "Member 'Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame, CallFunc_GetGlobalTimeDilation_ReturnValue) == 0x0000CC, "Member 'Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame::CallFunc_GetGlobalTimeDilation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame, CallFunc_createTime_ReturnValue) == 0x0000D0, "Member 'Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame::CallFunc_createTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000E8, "Member 'Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame, CallFunc_VictoryFloatPlusEquals_FloatOut) == 0x0000EC, "Member 'Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame::CallFunc_VictoryFloatPlusEquals_FloatOut' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame, CallFunc_getSaveSlot_saveSlot) == 0x0000F0, "Member 'Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame::CallFunc_getSaveSlot_saveSlot' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x0000F8, "Member 'Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame, CallFunc_FMin_ReturnValue) == 0x0000FC, "Member 'Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame, CallFunc_SelectFloat_ReturnValue) == 0x000100, "Member 'Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame, CallFunc_Less_FloatFloat_ReturnValue) == 0x000104, "Member 'Umg_serverMinigame_C_ExecuteUbergraph_umg_serverMinigame::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");

// Function umg_serverMinigame.umg_serverMinigame_C.Tick
// 0x003C (0x003C - 0x0000)
struct Umg_serverMinigame_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Umg_serverMinigame_C_Tick) == 0x000004, "Wrong alignment on Umg_serverMinigame_C_Tick");
static_assert(sizeof(Umg_serverMinigame_C_Tick) == 0x00003C, "Wrong size on Umg_serverMinigame_C_Tick");
static_assert(offsetof(Umg_serverMinigame_C_Tick, MyGeometry) == 0x000000, "Member 'Umg_serverMinigame_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_Tick, InDeltaTime) == 0x000038, "Member 'Umg_serverMinigame_C_Tick::InDeltaTime' has a wrong offset!");

// Function umg_serverMinigame.umg_serverMinigame_C.End
// 0x0001 (0x0001 - 0x0000)
struct Umg_serverMinigame_C_End final
{
public:
	bool                                          Correct;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Umg_serverMinigame_C_End) == 0x000001, "Wrong alignment on Umg_serverMinigame_C_End");
static_assert(sizeof(Umg_serverMinigame_C_End) == 0x000001, "Wrong size on Umg_serverMinigame_C_End");
static_assert(offsetof(Umg_serverMinigame_C_End, Correct) == 0x000000, "Member 'Umg_serverMinigame_C_End::Correct' has a wrong offset!");

// Function umg_serverMinigame.umg_serverMinigame_C.Enter
// 0x0040 (0x0040 - 0x0000)
struct Umg_serverMinigame_C_Enter final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USaveSlot_C*                            CallFunc_getSaveSlot_saveSlot;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_createTime_ReturnValue;                   // 0x0010(0x0018)()
	bool                                          CallFunc_SetGamePaused_ReturnValue;                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_286B[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode;          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_setActiveInterface_return;                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Umg_serverMinigame_C_Enter) == 0x000008, "Wrong alignment on Umg_serverMinigame_C_Enter");
static_assert(sizeof(Umg_serverMinigame_C_Enter) == 0x000040, "Wrong size on Umg_serverMinigame_C_Enter");
static_assert(offsetof(Umg_serverMinigame_C_Enter, Player) == 0x000000, "Member 'Umg_serverMinigame_C_Enter::Player' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_Enter, CallFunc_getSaveSlot_saveSlot) == 0x000008, "Member 'Umg_serverMinigame_C_Enter::CallFunc_getSaveSlot_saveSlot' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_Enter, CallFunc_createTime_ReturnValue) == 0x000010, "Member 'Umg_serverMinigame_C_Enter::CallFunc_createTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_Enter, CallFunc_SetGamePaused_ReturnValue) == 0x000028, "Member 'Umg_serverMinigame_C_Enter::CallFunc_SetGamePaused_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_Enter, CallFunc_getMainGamemode_AsMain_Gamemode) == 0x000030, "Member 'Umg_serverMinigame_C_Enter::CallFunc_getMainGamemode_AsMain_Gamemode' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_Enter, CallFunc_setActiveInterface_return) == 0x000038, "Member 'Umg_serverMinigame_C_Enter::CallFunc_setActiveInterface_return' has a wrong offset!");

// Function umg_serverMinigame.umg_serverMinigame_C.Exit
// 0x0002 (0x0002 - 0x0000)
struct Umg_serverMinigame_C_Exit final
{
public:
	bool                                          CallFunc_setActiveInterface_return;                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetGamePaused_ReturnValue;                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Umg_serverMinigame_C_Exit) == 0x000001, "Wrong alignment on Umg_serverMinigame_C_Exit");
static_assert(sizeof(Umg_serverMinigame_C_Exit) == 0x000002, "Wrong size on Umg_serverMinigame_C_Exit");
static_assert(offsetof(Umg_serverMinigame_C_Exit, CallFunc_setActiveInterface_return) == 0x000000, "Member 'Umg_serverMinigame_C_Exit::CallFunc_setActiveInterface_return' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_Exit, CallFunc_SetGamePaused_ReturnValue) == 0x000001, "Member 'Umg_serverMinigame_C_Exit::CallFunc_SetGamePaused_ReturnValue' has a wrong offset!");

// Function umg_serverMinigame.umg_serverMinigame_C.draw
// 0x0030 (0x0030 - 0x0000)
struct Umg_serverMinigame_C_Draw final
{
public:
	struct FVector2D                              ScreenPositionB;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_286C[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUmg_serverMinigameSlott_C*             CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_286D[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Umg_serverMinigame_C_Draw) == 0x000008, "Wrong alignment on Umg_serverMinigame_C_Draw");
static_assert(sizeof(Umg_serverMinigame_C_Draw) == 0x000030, "Wrong size on Umg_serverMinigame_C_Draw");
static_assert(offsetof(Umg_serverMinigame_C_Draw, ScreenPositionB) == 0x000000, "Member 'Umg_serverMinigame_C_Draw::ScreenPositionB' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_Draw, Temp_int_Variable) == 0x000008, "Member 'Umg_serverMinigame_C_Draw::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_Draw, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'Umg_serverMinigame_C_Draw::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_Draw, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000010, "Member 'Umg_serverMinigame_C_Draw::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_Draw, CallFunc_Array_Get_Item) == 0x000018, "Member 'Umg_serverMinigame_C_Draw::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_Draw, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'Umg_serverMinigame_C_Draw::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_Draw, CallFunc_Less_IntInt_ReturnValue) == 0x000024, "Member 'Umg_serverMinigame_C_Draw::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_Draw, CallFunc_Add_IntInt_ReturnValue_1) == 0x000028, "Member 'Umg_serverMinigame_C_Draw::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_Draw, Temp_int_Variable_1) == 0x00002C, "Member 'Umg_serverMinigame_C_Draw::Temp_int_Variable_1' has a wrong offset!");

// Function umg_serverMinigame.umg_serverMinigame_C.compare
// 0x0078 (0x0078 - 0x0000)
struct Umg_serverMinigame_C_Compare final
{
public:
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USave_main_C*                           CallFunc_getMainSave_save_main;                    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_1;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_286E[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_286F[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_AppendMultiple_ReturnValue;               // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_AppendMultiple_ReturnValue_1;             // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Umg_serverMinigame_C_Compare) == 0x000008, "Wrong alignment on Umg_serverMinigame_C_Compare");
static_assert(sizeof(Umg_serverMinigame_C_Compare) == 0x000078, "Wrong size on Umg_serverMinigame_C_Compare");
static_assert(offsetof(Umg_serverMinigame_C_Compare, Temp_int_Loop_Counter_Variable) == 0x000000, "Member 'Umg_serverMinigame_C_Compare::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_Compare, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'Umg_serverMinigame_C_Compare::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_Compare, Temp_int_Array_Index_Variable) == 0x000008, "Member 'Umg_serverMinigame_C_Compare::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_Compare, Temp_int_Variable) == 0x00000C, "Member 'Umg_serverMinigame_C_Compare::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_Compare, CallFunc_getMainSave_save_main) == 0x000010, "Member 'Umg_serverMinigame_C_Compare::CallFunc_getMainSave_save_main' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_Compare, CallFunc_Add_IntInt_ReturnValue_1) == 0x000018, "Member 'Umg_serverMinigame_C_Compare::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_Compare, CallFunc_Array_Get_Item) == 0x00001C, "Member 'Umg_serverMinigame_C_Compare::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_Compare, CallFunc_Array_Get_Item_1) == 0x000020, "Member 'Umg_serverMinigame_C_Compare::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_Compare, CallFunc_Conv_IntToString_ReturnValue) == 0x000028, "Member 'Umg_serverMinigame_C_Compare::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_Compare, CallFunc_Conv_IntToString_ReturnValue_1) == 0x000038, "Member 'Umg_serverMinigame_C_Compare::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_Compare, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000048, "Member 'Umg_serverMinigame_C_Compare::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_Compare, CallFunc_AppendMultiple_ReturnValue) == 0x000050, "Member 'Umg_serverMinigame_C_Compare::CallFunc_AppendMultiple_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_Compare, CallFunc_AppendMultiple_ReturnValue_1) == 0x000060, "Member 'Umg_serverMinigame_C_Compare::CallFunc_AppendMultiple_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_Compare, CallFunc_Array_Length_ReturnValue) == 0x000070, "Member 'Umg_serverMinigame_C_Compare::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_Compare, CallFunc_Less_IntInt_ReturnValue) == 0x000074, "Member 'Umg_serverMinigame_C_Compare::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function umg_serverMinigame.umg_serverMinigame_C.OnKeyDown
// 0x0288 (0x0288 - 0x0000)
struct Umg_serverMinigame_C_OnKeyDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FKeyEvent                              InKeyEvent;                                        // 0x0038(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FEventReply                            ReturnValue;                                       // 0x0070(0x00B8)(Parm, OutParm, ReturnParm)
	struct FKey                                   CallFunc_GetKey_ReturnValue;                       // 0x0128(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2870[0x7];                                     // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Key_GetDisplayName_ReturnValue;           // 0x0148(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0160(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsNumeric_ReturnValue;                    // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2871[0x7];                                     // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Left_ReturnValue;                         // 0x0178(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Right_ReturnValue;                        // 0x0188(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StriStri_ReturnValue;          // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2872[0x3];                                     // 0x0199(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_StringToInt_ReturnValue;             // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2873[0x3];                                     // 0x01A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsNumeric_ReturnValue_1;                  // 0x01AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x01AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2874[0x2];                                     // 0x01AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Multiply_IntInt_ReturnValue_1;            // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FEventReply                            K2Node_MakeStruct_EventReply;                      // 0x01B8(0x00B8)()
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Add_Vector2DFloat_ReturnValue;            // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue;         // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Umg_serverMinigame_C_OnKeyDown) == 0x000008, "Wrong alignment on Umg_serverMinigame_C_OnKeyDown");
static_assert(sizeof(Umg_serverMinigame_C_OnKeyDown) == 0x000288, "Wrong size on Umg_serverMinigame_C_OnKeyDown");
static_assert(offsetof(Umg_serverMinigame_C_OnKeyDown, MyGeometry) == 0x000000, "Member 'Umg_serverMinigame_C_OnKeyDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_OnKeyDown, InKeyEvent) == 0x000038, "Member 'Umg_serverMinigame_C_OnKeyDown::InKeyEvent' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_OnKeyDown, ReturnValue) == 0x000070, "Member 'Umg_serverMinigame_C_OnKeyDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_OnKeyDown, CallFunc_GetKey_ReturnValue) == 0x000128, "Member 'Umg_serverMinigame_C_OnKeyDown::CallFunc_GetKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_OnKeyDown, CallFunc_Not_PreBool_ReturnValue) == 0x000140, "Member 'Umg_serverMinigame_C_OnKeyDown::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_OnKeyDown, CallFunc_Key_GetDisplayName_ReturnValue) == 0x000148, "Member 'Umg_serverMinigame_C_OnKeyDown::CallFunc_Key_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_OnKeyDown, CallFunc_Conv_TextToString_ReturnValue) == 0x000160, "Member 'Umg_serverMinigame_C_OnKeyDown::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_OnKeyDown, CallFunc_IsNumeric_ReturnValue) == 0x000170, "Member 'Umg_serverMinigame_C_OnKeyDown::CallFunc_IsNumeric_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_OnKeyDown, CallFunc_Left_ReturnValue) == 0x000178, "Member 'Umg_serverMinigame_C_OnKeyDown::CallFunc_Left_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_OnKeyDown, CallFunc_Right_ReturnValue) == 0x000188, "Member 'Umg_serverMinigame_C_OnKeyDown::CallFunc_Right_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_OnKeyDown, CallFunc_EqualEqual_StriStri_ReturnValue) == 0x000198, "Member 'Umg_serverMinigame_C_OnKeyDown::CallFunc_EqualEqual_StriStri_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_OnKeyDown, CallFunc_Conv_StringToInt_ReturnValue) == 0x00019C, "Member 'Umg_serverMinigame_C_OnKeyDown::CallFunc_Conv_StringToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_OnKeyDown, CallFunc_BooleanOR_ReturnValue) == 0x0001A0, "Member 'Umg_serverMinigame_C_OnKeyDown::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_OnKeyDown, CallFunc_Multiply_IntInt_ReturnValue) == 0x0001A4, "Member 'Umg_serverMinigame_C_OnKeyDown::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_OnKeyDown, CallFunc_Conv_IntToFloat_ReturnValue) == 0x0001A8, "Member 'Umg_serverMinigame_C_OnKeyDown::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_OnKeyDown, CallFunc_IsNumeric_ReturnValue_1) == 0x0001AC, "Member 'Umg_serverMinigame_C_OnKeyDown::CallFunc_IsNumeric_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_OnKeyDown, CallFunc_BooleanAND_ReturnValue) == 0x0001AD, "Member 'Umg_serverMinigame_C_OnKeyDown::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_OnKeyDown, CallFunc_Multiply_IntInt_ReturnValue_1) == 0x0001B0, "Member 'Umg_serverMinigame_C_OnKeyDown::CallFunc_Multiply_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_OnKeyDown, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x0001B4, "Member 'Umg_serverMinigame_C_OnKeyDown::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_OnKeyDown, K2Node_MakeStruct_EventReply) == 0x0001B8, "Member 'Umg_serverMinigame_C_OnKeyDown::K2Node_MakeStruct_EventReply' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_OnKeyDown, CallFunc_MakeVector2D_ReturnValue) == 0x000270, "Member 'Umg_serverMinigame_C_OnKeyDown::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_OnKeyDown, CallFunc_Add_Vector2DFloat_ReturnValue) == 0x000278, "Member 'Umg_serverMinigame_C_OnKeyDown::CallFunc_Add_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_OnKeyDown, CallFunc_Add_Vector2DVector2D_ReturnValue) == 0x000280, "Member 'Umg_serverMinigame_C_OnKeyDown::CallFunc_Add_Vector2DVector2D_ReturnValue' has a wrong offset!");

// Function umg_serverMinigame.umg_serverMinigame_C.createTime
// 0x0178 (0x0178 - 0x0000)
struct Umg_serverMinigame_C_CreateTime final
{
public:
	float                                         InputPin;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2875[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm)
	float                                         CallFunc_Fraction_ReturnValue;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Percent_FloatFloat_ReturnValue;           // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0038(0x0018)()
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2876[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue_1;             // 0x0068(0x0018)()
	float                                         CallFunc_Percent_FloatFloat_ReturnValue_1;         // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2877[0x4];                                     // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_TextToString_ReturnValue_1;          // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_2;                     // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2878[0x4];                                     // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue_2;             // 0x00B0(0x0018)()
	float                                         CallFunc_Percent_FloatFloat_ReturnValue_2;         // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2879[0x4];                                     // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_TextToString_ReturnValue_2;          // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_3;                     // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_287A[0x4];                                     // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue_3;             // 0x00F8(0x0018)()
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0110(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_TextToString_ReturnValue_3;          // 0x0120(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0130(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x0140(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x0150(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0160(0x0018)()
};
static_assert(alignof(Umg_serverMinigame_C_CreateTime) == 0x000008, "Wrong alignment on Umg_serverMinigame_C_CreateTime");
static_assert(sizeof(Umg_serverMinigame_C_CreateTime) == 0x000178, "Wrong size on Umg_serverMinigame_C_CreateTime");
static_assert(offsetof(Umg_serverMinigame_C_CreateTime, InputPin) == 0x000000, "Member 'Umg_serverMinigame_C_CreateTime::InputPin' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_CreateTime, ReturnValue) == 0x000008, "Member 'Umg_serverMinigame_C_CreateTime::ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_CreateTime, CallFunc_Fraction_ReturnValue) == 0x000020, "Member 'Umg_serverMinigame_C_CreateTime::CallFunc_Fraction_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_CreateTime, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000024, "Member 'Umg_serverMinigame_C_CreateTime::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_CreateTime, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000028, "Member 'Umg_serverMinigame_C_CreateTime::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_CreateTime, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x00002C, "Member 'Umg_serverMinigame_C_CreateTime::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_CreateTime, CallFunc_FTrunc_ReturnValue) == 0x000030, "Member 'Umg_serverMinigame_C_CreateTime::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_CreateTime, CallFunc_Percent_FloatFloat_ReturnValue) == 0x000034, "Member 'Umg_serverMinigame_C_CreateTime::CallFunc_Percent_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_CreateTime, CallFunc_Conv_IntToText_ReturnValue) == 0x000038, "Member 'Umg_serverMinigame_C_CreateTime::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_CreateTime, CallFunc_FTrunc_ReturnValue_1) == 0x000050, "Member 'Umg_serverMinigame_C_CreateTime::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_CreateTime, CallFunc_Conv_TextToString_ReturnValue) == 0x000058, "Member 'Umg_serverMinigame_C_CreateTime::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_CreateTime, CallFunc_Conv_IntToText_ReturnValue_1) == 0x000068, "Member 'Umg_serverMinigame_C_CreateTime::CallFunc_Conv_IntToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_CreateTime, CallFunc_Percent_FloatFloat_ReturnValue_1) == 0x000080, "Member 'Umg_serverMinigame_C_CreateTime::CallFunc_Percent_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_CreateTime, CallFunc_Conv_TextToString_ReturnValue_1) == 0x000088, "Member 'Umg_serverMinigame_C_CreateTime::CallFunc_Conv_TextToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_CreateTime, CallFunc_FTrunc_ReturnValue_2) == 0x000098, "Member 'Umg_serverMinigame_C_CreateTime::CallFunc_FTrunc_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_CreateTime, CallFunc_Concat_StrStr_ReturnValue) == 0x0000A0, "Member 'Umg_serverMinigame_C_CreateTime::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_CreateTime, CallFunc_Conv_IntToText_ReturnValue_2) == 0x0000B0, "Member 'Umg_serverMinigame_C_CreateTime::CallFunc_Conv_IntToText_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_CreateTime, CallFunc_Percent_FloatFloat_ReturnValue_2) == 0x0000C8, "Member 'Umg_serverMinigame_C_CreateTime::CallFunc_Percent_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_CreateTime, CallFunc_Conv_TextToString_ReturnValue_2) == 0x0000D0, "Member 'Umg_serverMinigame_C_CreateTime::CallFunc_Conv_TextToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_CreateTime, CallFunc_FTrunc_ReturnValue_3) == 0x0000E0, "Member 'Umg_serverMinigame_C_CreateTime::CallFunc_FTrunc_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_CreateTime, CallFunc_Concat_StrStr_ReturnValue_1) == 0x0000E8, "Member 'Umg_serverMinigame_C_CreateTime::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_CreateTime, CallFunc_Conv_IntToText_ReturnValue_3) == 0x0000F8, "Member 'Umg_serverMinigame_C_CreateTime::CallFunc_Conv_IntToText_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_CreateTime, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000110, "Member 'Umg_serverMinigame_C_CreateTime::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_CreateTime, CallFunc_Conv_TextToString_ReturnValue_3) == 0x000120, "Member 'Umg_serverMinigame_C_CreateTime::CallFunc_Conv_TextToString_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_CreateTime, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000130, "Member 'Umg_serverMinigame_C_CreateTime::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_CreateTime, CallFunc_Concat_StrStr_ReturnValue_4) == 0x000140, "Member 'Umg_serverMinigame_C_CreateTime::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_CreateTime, CallFunc_Concat_StrStr_ReturnValue_5) == 0x000150, "Member 'Umg_serverMinigame_C_CreateTime::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(Umg_serverMinigame_C_CreateTime, CallFunc_Conv_StringToText_ReturnValue) == 0x000160, "Member 'Umg_serverMinigame_C_CreateTime::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");

}

