#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TriggerBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Struct_save_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Enum_interactionActions_structs.hpp"
#include "Struct_triggerSave_structs.hpp"
#include "Struct_settings_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function triggerBase.triggerBase_C.ExecuteUbergraph_triggerBase
// 0x05E8 (0x05E8 - 0x0000)
struct TriggerBase_C_ExecuteUbergraph_triggerBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2EF6[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainGamemode_C*                        K2Node_Event_gamemode;                             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStruct_settings                       K2Node_Event_settings;                             // 0x0010(0x00CC)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2EF7[0x4];                                     // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_Event_key_2;                                // 0x00E0(0x0018)(HasGetValueTypeHash)
	bool                                          K2Node_Event_pressed_1;                            // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2EF8[0x3];                                     // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Event_color;                                // 0x00FC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_4;                             // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_5;                                // 0x0110(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AActor*                                 K2Node_Event_actor_1;                              // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_impact_1;                             // 0x01A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2EF9[0x4];                                     // 0x01AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AWaterVolume_C*                         K2Node_Event_water_3;                              // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWaterVolume_C*                         K2Node_Event_water_2;                              // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWaterVolume_C*                         K2Node_Event_water_1;                              // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWaterVolume_C*                         K2Node_Event_water;                                // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_activate;                             // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_static;                               // 0x01D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_frozen;                               // 0x01D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_active_1;                             // 0x01D3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2EFA[0x4];                                     // 0x01D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_actor;                                // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_3;                             // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_4;                                // 0x01E4(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                K2Node_Event_impact;                               // 0x026C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_skipSetting;                          // 0x0278(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2EFB[0x7];                                     // 0x0279(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_Event_key_1;                                // 0x0280(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_11;                            // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_3;                                // 0x0298(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         K2Node_Event_damage_2;                             // 0x0320(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_fuel;                                 // 0x0324(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_10;                            // 0x0328(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_2;                                // 0x0330(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         K2Node_Event_index_1;                              // 0x03B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_interactionActions                       K2Node_Event_action;                               // 0x03BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2EFC[0x3];                                     // 0x03BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_9;                             // 0x03C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_8;                             // 0x03C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_1;                             // 0x03D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_location_1;                           // 0x03D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_7;                             // 0x03E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_6;                             // 0x03E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_5;                             // 0x03F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_wheelDelta;                           // 0x03F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2EFD[0x4];                                     // 0x03FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_4;                             // 0x0400(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Event_mouse;                                // 0x0408(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_3;                             // 0x0410(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_Event_key;                                  // 0x0418(0x0018)(HasGetValueTypeHash)
	bool                                          K2Node_Event_pressed;                              // 0x0430(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2EFE[0x3];                                     // 0x0431(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_temperature_1;                        // 0x0434(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_temperature;                          // 0x0438(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_speed;                                // 0x043C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_2;                             // 0x0440(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_1;                                // 0x0448(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class FString                                 K2Node_Event_name;                                 // 0x04D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         K2Node_Event_volume;                               // 0x04E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2EFF[0x4];                                     // 0x04E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_1;                             // 0x04E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_location;                             // 0x04F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage;                               // 0x04FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_clean;                                // 0x0500(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F00[0x7];                                     // 0x0501(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player;                               // 0x0508(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit;                                  // 0x0510(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AHook_C*                                K2Node_Event_hook;                                 // 0x0598(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_NewParam;                             // 0x05A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F01[0x7];                                     // 0x05A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACord_C*                                K2Node_Event_cord_1;                               // 0x05A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACordSocket_C*                          K2Node_Event_socket_1;                             // 0x05B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACord_C*                                K2Node_Event_cord;                                 // 0x05B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACordSocket_C*                          K2Node_Event_socket;                               // 0x05C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_sentFrom;                             // 0x05C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_active;                               // 0x05D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F02[0x7];                                     // 0x05D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_owner;                                // 0x05D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_index;                                // 0x05E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TriggerBase_C_ExecuteUbergraph_triggerBase) == 0x000008, "Wrong alignment on TriggerBase_C_ExecuteUbergraph_triggerBase");
static_assert(sizeof(TriggerBase_C_ExecuteUbergraph_triggerBase) == 0x0005E8, "Wrong size on TriggerBase_C_ExecuteUbergraph_triggerBase");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, EntryPoint) == 0x000000, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_gamemode) == 0x000008, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_gamemode' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_settings) == 0x000010, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_settings' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_key_2) == 0x0000E0, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_key_2' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_pressed_1) == 0x0000F8, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_pressed_1' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_color) == 0x0000FC, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_color' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_damage_4) == 0x00010C, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_damage_4' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_hit_5) == 0x000110, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_hit_5' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_actor_1) == 0x000198, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_actor_1' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_impact_1) == 0x0001A0, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_impact_1' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_water_3) == 0x0001B0, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_water_3' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_water_2) == 0x0001B8, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_water_2' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_water_1) == 0x0001C0, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_water_1' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_water) == 0x0001C8, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_water' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_activate) == 0x0001D0, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_activate' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_static) == 0x0001D1, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_static' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_frozen) == 0x0001D2, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_frozen' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_active_1) == 0x0001D3, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_active_1' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_actor) == 0x0001D8, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_actor' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_damage_3) == 0x0001E0, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_damage_3' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_hit_4) == 0x0001E4, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_hit_4' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_impact) == 0x00026C, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_impact' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_skipSetting) == 0x000278, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_skipSetting' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_key_1) == 0x000280, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_key_1' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_player_11) == 0x000290, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_player_11' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_hit_3) == 0x000298, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_hit_3' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_damage_2) == 0x000320, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_damage_2' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_fuel) == 0x000324, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_fuel' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_player_10) == 0x000328, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_player_10' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_hit_2) == 0x000330, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_hit_2' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_index_1) == 0x0003B8, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_index_1' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_action) == 0x0003BC, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_action' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_player_9) == 0x0003C0, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_player_9' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_player_8) == 0x0003C8, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_player_8' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_damage_1) == 0x0003D0, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_damage_1' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_location_1) == 0x0003D4, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_location_1' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_player_7) == 0x0003E0, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_player_7' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_player_6) == 0x0003E8, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_player_6' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_player_5) == 0x0003F0, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_player_5' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_wheelDelta) == 0x0003F8, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_wheelDelta' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_player_4) == 0x000400, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_player_4' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_mouse) == 0x000408, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_mouse' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_player_3) == 0x000410, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_player_3' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_key) == 0x000418, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_key' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_pressed) == 0x000430, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_pressed' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_temperature_1) == 0x000434, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_temperature_1' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_temperature) == 0x000438, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_temperature' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_speed) == 0x00043C, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_speed' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_player_2) == 0x000440, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_player_2' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_hit_1) == 0x000448, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_hit_1' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_name) == 0x0004D0, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_name' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_volume) == 0x0004E0, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_volume' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_player_1) == 0x0004E8, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_player_1' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_location) == 0x0004F0, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_location' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_damage) == 0x0004FC, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_damage' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_clean) == 0x000500, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_clean' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_player) == 0x000508, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_player' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_hit) == 0x000510, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_hit' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_hook) == 0x000598, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_hook' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_NewParam) == 0x0005A0, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_NewParam' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_cord_1) == 0x0005A8, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_cord_1' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_socket_1) == 0x0005B0, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_socket_1' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_cord) == 0x0005B8, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_cord' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_socket) == 0x0005C0, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_socket' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_sentFrom) == 0x0005C8, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_sentFrom' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_active) == 0x0005D0, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_active' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_owner) == 0x0005D8, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_owner' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ExecuteUbergraph_triggerBase, K2Node_Event_index) == 0x0005E0, "Member 'TriggerBase_C_ExecuteUbergraph_triggerBase::K2Node_Event_index' has a wrong offset!");

// Function triggerBase.triggerBase_C.runTrigger
// 0x0010 (0x0010 - 0x0000)
struct TriggerBase_C_RunTrigger final
{
public:
	class AActor*                                 Param_Owner;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TriggerBase_C_RunTrigger) == 0x000008, "Wrong alignment on TriggerBase_C_RunTrigger");
static_assert(sizeof(TriggerBase_C_RunTrigger) == 0x000010, "Wrong size on TriggerBase_C_RunTrigger");
static_assert(offsetof(TriggerBase_C_RunTrigger, Param_Owner) == 0x000000, "Member 'TriggerBase_C_RunTrigger::Param_Owner' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_RunTrigger, Param_Index) == 0x000008, "Member 'TriggerBase_C_RunTrigger::Param_Index' has a wrong offset!");

// Function triggerBase.triggerBase_C.setActiveTrigger
// 0x0010 (0x0010 - 0x0000)
struct TriggerBase_C_SetActiveTrigger final
{
public:
	class AActor*                                 SentFrom;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Active;                                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TriggerBase_C_SetActiveTrigger) == 0x000008, "Wrong alignment on TriggerBase_C_SetActiveTrigger");
static_assert(sizeof(TriggerBase_C_SetActiveTrigger) == 0x000010, "Wrong size on TriggerBase_C_SetActiveTrigger");
static_assert(offsetof(TriggerBase_C_SetActiveTrigger, SentFrom) == 0x000000, "Member 'TriggerBase_C_SetActiveTrigger::SentFrom' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_SetActiveTrigger, Active) == 0x000008, "Member 'TriggerBase_C_SetActiveTrigger::Active' has a wrong offset!");

// Function triggerBase.triggerBase_C.cordUnplugged
// 0x0010 (0x0010 - 0x0000)
struct TriggerBase_C_CordUnplugged final
{
public:
	class ACord_C*                                Cord;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACordSocket_C*                          Socket;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TriggerBase_C_CordUnplugged) == 0x000008, "Wrong alignment on TriggerBase_C_CordUnplugged");
static_assert(sizeof(TriggerBase_C_CordUnplugged) == 0x000010, "Wrong size on TriggerBase_C_CordUnplugged");
static_assert(offsetof(TriggerBase_C_CordUnplugged, Cord) == 0x000000, "Member 'TriggerBase_C_CordUnplugged::Cord' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_CordUnplugged, Socket) == 0x000008, "Member 'TriggerBase_C_CordUnplugged::Socket' has a wrong offset!");

// Function triggerBase.triggerBase_C.cordPlugged
// 0x0010 (0x0010 - 0x0000)
struct TriggerBase_C_CordPlugged final
{
public:
	class ACord_C*                                Cord;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACordSocket_C*                          Socket;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TriggerBase_C_CordPlugged) == 0x000008, "Wrong alignment on TriggerBase_C_CordPlugged");
static_assert(sizeof(TriggerBase_C_CordPlugged) == 0x000010, "Wrong size on TriggerBase_C_CordPlugged");
static_assert(offsetof(TriggerBase_C_CordPlugged, Cord) == 0x000000, "Member 'TriggerBase_C_CordPlugged::Cord' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_CordPlugged, Socket) == 0x000008, "Member 'TriggerBase_C_CordPlugged::Socket' has a wrong offset!");

// Function triggerBase.triggerBase_C.set_ignoreSave_trigger
// 0x0001 (0x0001 - 0x0000)
struct TriggerBase_C_Set_ignoreSave_trigger final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TriggerBase_C_Set_ignoreSave_trigger) == 0x000001, "Wrong alignment on TriggerBase_C_Set_ignoreSave_trigger");
static_assert(sizeof(TriggerBase_C_Set_ignoreSave_trigger) == 0x000001, "Wrong size on TriggerBase_C_Set_ignoreSave_trigger");
static_assert(offsetof(TriggerBase_C_Set_ignoreSave_trigger, NewParam) == 0x000000, "Member 'TriggerBase_C_Set_ignoreSave_trigger::NewParam' has a wrong offset!");

// Function triggerBase.triggerBase_C.hooked
// 0x0008 (0x0008 - 0x0000)
struct TriggerBase_C_Hooked final
{
public:
	class AHook_C*                                Hook;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TriggerBase_C_Hooked) == 0x000008, "Wrong alignment on TriggerBase_C_Hooked");
static_assert(sizeof(TriggerBase_C_Hooked) == 0x000008, "Wrong size on TriggerBase_C_Hooked");
static_assert(offsetof(TriggerBase_C_Hooked, Hook) == 0x000000, "Member 'TriggerBase_C_Hooked::Hook' has a wrong offset!");

// Function triggerBase.triggerBase_C.playerUsedOn
// 0x0090 (0x0090 - 0x0000)
struct TriggerBase_C_PlayerUsedOn final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(TriggerBase_C_PlayerUsedOn) == 0x000008, "Wrong alignment on TriggerBase_C_PlayerUsedOn");
static_assert(sizeof(TriggerBase_C_PlayerUsedOn) == 0x000090, "Wrong size on TriggerBase_C_PlayerUsedOn");
static_assert(offsetof(TriggerBase_C_PlayerUsedOn, Player) == 0x000000, "Member 'TriggerBase_C_PlayerUsedOn::Player' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_PlayerUsedOn, Hit) == 0x000008, "Member 'TriggerBase_C_PlayerUsedOn::Hit' has a wrong offset!");

// Function triggerBase.triggerBase_C.slice
// 0x0001 (0x0001 - 0x0000)
struct TriggerBase_C_Slice final
{
public:
	bool                                          Clean;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TriggerBase_C_Slice) == 0x000001, "Wrong alignment on TriggerBase_C_Slice");
static_assert(sizeof(TriggerBase_C_Slice) == 0x000001, "Wrong size on TriggerBase_C_Slice");
static_assert(offsetof(TriggerBase_C_Slice, Clean) == 0x000000, "Member 'TriggerBase_C_Slice::Clean' has a wrong offset!");

// Function triggerBase.triggerBase_C.reachedByExplosion
// 0x0010 (0x0010 - 0x0000)
struct TriggerBase_C_ReachedByExplosion final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TriggerBase_C_ReachedByExplosion) == 0x000004, "Wrong alignment on TriggerBase_C_ReachedByExplosion");
static_assert(sizeof(TriggerBase_C_ReachedByExplosion) == 0x000010, "Wrong size on TriggerBase_C_ReachedByExplosion");
static_assert(offsetof(TriggerBase_C_ReachedByExplosion, Location) == 0x000000, "Member 'TriggerBase_C_ReachedByExplosion::Location' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ReachedByExplosion, Damage) == 0x00000C, "Member 'TriggerBase_C_ReachedByExplosion::Damage' has a wrong offset!");

// Function triggerBase.triggerBase_C.playerLookAway
// 0x0008 (0x0008 - 0x0000)
struct TriggerBase_C_PlayerLookAway final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TriggerBase_C_PlayerLookAway) == 0x000008, "Wrong alignment on TriggerBase_C_PlayerLookAway");
static_assert(sizeof(TriggerBase_C_PlayerLookAway) == 0x000008, "Wrong size on TriggerBase_C_PlayerLookAway");
static_assert(offsetof(TriggerBase_C_PlayerLookAway, Player) == 0x000000, "Member 'TriggerBase_C_PlayerLookAway::Player' has a wrong offset!");

// Function triggerBase.triggerBase_C.stepped
// 0x0004 (0x0004 - 0x0000)
struct TriggerBase_C_Stepped final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TriggerBase_C_Stepped) == 0x000004, "Wrong alignment on TriggerBase_C_Stepped");
static_assert(sizeof(TriggerBase_C_Stepped) == 0x000004, "Wrong size on TriggerBase_C_Stepped");
static_assert(offsetof(TriggerBase_C_Stepped, Volume) == 0x000000, "Member 'TriggerBase_C_Stepped::Volume' has a wrong offset!");

// Function triggerBase.triggerBase_C.ActionName
// 0x00A0 (0x00A0 - 0x0000)
struct TriggerBase_C_ActionName final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class FString                                 Param_Name;                                        // 0x0090(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(TriggerBase_C_ActionName) == 0x000008, "Wrong alignment on TriggerBase_C_ActionName");
static_assert(sizeof(TriggerBase_C_ActionName) == 0x0000A0, "Wrong size on TriggerBase_C_ActionName");
static_assert(offsetof(TriggerBase_C_ActionName, Player) == 0x000000, "Member 'TriggerBase_C_ActionName::Player' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ActionName, Hit) == 0x000008, "Member 'TriggerBase_C_ActionName::Hit' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ActionName, Param_Name) == 0x000090, "Member 'TriggerBase_C_ActionName::Param_Name' has a wrong offset!");

// Function triggerBase.triggerBase_C.accumulateTemperature
// 0x0008 (0x0008 - 0x0000)
struct TriggerBase_C_AccumulateTemperature final
{
public:
	float                                         Temperature;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TriggerBase_C_AccumulateTemperature) == 0x000004, "Wrong alignment on TriggerBase_C_AccumulateTemperature");
static_assert(sizeof(TriggerBase_C_AccumulateTemperature) == 0x000008, "Wrong size on TriggerBase_C_AccumulateTemperature");
static_assert(offsetof(TriggerBase_C_AccumulateTemperature, Temperature) == 0x000000, "Member 'TriggerBase_C_AccumulateTemperature::Temperature' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_AccumulateTemperature, Speed) == 0x000004, "Member 'TriggerBase_C_AccumulateTemperature::Speed' has a wrong offset!");

// Function triggerBase.triggerBase_C.addTemperature
// 0x0004 (0x0004 - 0x0000)
struct TriggerBase_C_AddTemperature final
{
public:
	float                                         Temperature;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TriggerBase_C_AddTemperature) == 0x000004, "Wrong alignment on TriggerBase_C_AddTemperature");
static_assert(sizeof(TriggerBase_C_AddTemperature) == 0x000004, "Wrong size on TriggerBase_C_AddTemperature");
static_assert(offsetof(TriggerBase_C_AddTemperature, Temperature) == 0x000000, "Member 'TriggerBase_C_AddTemperature::Temperature' has a wrong offset!");

// Function triggerBase.triggerBase_C.playerHandAnyKey
// 0x0028 (0x0028 - 0x0000)
struct TriggerBase_C_PlayerHandAnyKey final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   Param_Key;                                         // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Pressed;                                           // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TriggerBase_C_PlayerHandAnyKey) == 0x000008, "Wrong alignment on TriggerBase_C_PlayerHandAnyKey");
static_assert(sizeof(TriggerBase_C_PlayerHandAnyKey) == 0x000028, "Wrong size on TriggerBase_C_PlayerHandAnyKey");
static_assert(offsetof(TriggerBase_C_PlayerHandAnyKey, Player) == 0x000000, "Member 'TriggerBase_C_PlayerHandAnyKey::Player' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_PlayerHandAnyKey, Param_Key) == 0x000008, "Member 'TriggerBase_C_PlayerHandAnyKey::Param_Key' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_PlayerHandAnyKey, Pressed) == 0x000020, "Member 'TriggerBase_C_PlayerHandAnyKey::Pressed' has a wrong offset!");

// Function triggerBase.triggerBase_C.playerHandMouse
// 0x0010 (0x0010 - 0x0000)
struct TriggerBase_C_PlayerHandMouse final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Mouse;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TriggerBase_C_PlayerHandMouse) == 0x000008, "Wrong alignment on TriggerBase_C_PlayerHandMouse");
static_assert(sizeof(TriggerBase_C_PlayerHandMouse) == 0x000010, "Wrong size on TriggerBase_C_PlayerHandMouse");
static_assert(offsetof(TriggerBase_C_PlayerHandMouse, Player) == 0x000000, "Member 'TriggerBase_C_PlayerHandMouse::Player' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_PlayerHandMouse, Mouse) == 0x000008, "Member 'TriggerBase_C_PlayerHandMouse::Mouse' has a wrong offset!");

// Function triggerBase.triggerBase_C.playerHandMouseWheel
// 0x0010 (0x0010 - 0x0000)
struct TriggerBase_C_PlayerHandMouseWheel final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WheelDelta;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TriggerBase_C_PlayerHandMouseWheel) == 0x000008, "Wrong alignment on TriggerBase_C_PlayerHandMouseWheel");
static_assert(sizeof(TriggerBase_C_PlayerHandMouseWheel) == 0x000010, "Wrong size on TriggerBase_C_PlayerHandMouseWheel");
static_assert(offsetof(TriggerBase_C_PlayerHandMouseWheel, Player) == 0x000000, "Member 'TriggerBase_C_PlayerHandMouseWheel::Player' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_PlayerHandMouseWheel, WheelDelta) == 0x000008, "Member 'TriggerBase_C_PlayerHandMouseWheel::WheelDelta' has a wrong offset!");

// Function triggerBase.triggerBase_C.playerHandRelease_LMB
// 0x0008 (0x0008 - 0x0000)
struct TriggerBase_C_PlayerHandRelease_LMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TriggerBase_C_PlayerHandRelease_LMB) == 0x000008, "Wrong alignment on TriggerBase_C_PlayerHandRelease_LMB");
static_assert(sizeof(TriggerBase_C_PlayerHandRelease_LMB) == 0x000008, "Wrong size on TriggerBase_C_PlayerHandRelease_LMB");
static_assert(offsetof(TriggerBase_C_PlayerHandRelease_LMB, Player) == 0x000000, "Member 'TriggerBase_C_PlayerHandRelease_LMB::Player' has a wrong offset!");

// Function triggerBase.triggerBase_C.playerHandRelease_RMB
// 0x0008 (0x0008 - 0x0000)
struct TriggerBase_C_PlayerHandRelease_RMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TriggerBase_C_PlayerHandRelease_RMB) == 0x000008, "Wrong alignment on TriggerBase_C_PlayerHandRelease_RMB");
static_assert(sizeof(TriggerBase_C_PlayerHandRelease_RMB) == 0x000008, "Wrong size on TriggerBase_C_PlayerHandRelease_RMB");
static_assert(offsetof(TriggerBase_C_PlayerHandRelease_RMB, Player) == 0x000000, "Member 'TriggerBase_C_PlayerHandRelease_RMB::Player' has a wrong offset!");

// Function triggerBase.triggerBase_C.exploded
// 0x0010 (0x0010 - 0x0000)
struct TriggerBase_C_Exploded final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TriggerBase_C_Exploded) == 0x000004, "Wrong alignment on TriggerBase_C_Exploded");
static_assert(sizeof(TriggerBase_C_Exploded) == 0x000010, "Wrong size on TriggerBase_C_Exploded");
static_assert(offsetof(TriggerBase_C_Exploded, Damage) == 0x000000, "Member 'TriggerBase_C_Exploded::Damage' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_Exploded, Location) == 0x000004, "Member 'TriggerBase_C_Exploded::Location' has a wrong offset!");

// Function triggerBase.triggerBase_C.playerHandUse_LMB
// 0x0008 (0x0008 - 0x0000)
struct TriggerBase_C_PlayerHandUse_LMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TriggerBase_C_PlayerHandUse_LMB) == 0x000008, "Wrong alignment on TriggerBase_C_PlayerHandUse_LMB");
static_assert(sizeof(TriggerBase_C_PlayerHandUse_LMB) == 0x000008, "Wrong size on TriggerBase_C_PlayerHandUse_LMB");
static_assert(offsetof(TriggerBase_C_PlayerHandUse_LMB, Player) == 0x000000, "Member 'TriggerBase_C_PlayerHandUse_LMB::Player' has a wrong offset!");

// Function triggerBase.triggerBase_C.playerHandUse_RMB
// 0x0008 (0x0008 - 0x0000)
struct TriggerBase_C_PlayerHandUse_RMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TriggerBase_C_PlayerHandUse_RMB) == 0x000008, "Wrong alignment on TriggerBase_C_PlayerHandUse_RMB");
static_assert(sizeof(TriggerBase_C_PlayerHandUse_RMB) == 0x000008, "Wrong size on TriggerBase_C_PlayerHandUse_RMB");
static_assert(offsetof(TriggerBase_C_PlayerHandUse_RMB, Player) == 0x000000, "Member 'TriggerBase_C_PlayerHandUse_RMB::Player' has a wrong offset!");

// Function triggerBase.triggerBase_C.actionOptionIndex
// 0x0098 (0x0098 - 0x0000)
struct TriggerBase_C_ActionOptionIndex final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         Param_Index;                                       // 0x0090(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_interactionActions                       Action;                                            // 0x0094(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TriggerBase_C_ActionOptionIndex) == 0x000008, "Wrong alignment on TriggerBase_C_ActionOptionIndex");
static_assert(sizeof(TriggerBase_C_ActionOptionIndex) == 0x000098, "Wrong size on TriggerBase_C_ActionOptionIndex");
static_assert(offsetof(TriggerBase_C_ActionOptionIndex, Player) == 0x000000, "Member 'TriggerBase_C_ActionOptionIndex::Player' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ActionOptionIndex, Hit) == 0x000008, "Member 'TriggerBase_C_ActionOptionIndex::Hit' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ActionOptionIndex, Param_Index) == 0x000090, "Member 'TriggerBase_C_ActionOptionIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ActionOptionIndex, Action) == 0x000094, "Member 'TriggerBase_C_ActionOptionIndex::Action' has a wrong offset!");

// Function triggerBase.triggerBase_C.ignite
// 0x0004 (0x0004 - 0x0000)
struct TriggerBase_C_Ignite final
{
public:
	float                                         Fuel;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TriggerBase_C_Ignite) == 0x000004, "Wrong alignment on TriggerBase_C_Ignite");
static_assert(sizeof(TriggerBase_C_Ignite) == 0x000004, "Wrong size on TriggerBase_C_Ignite");
static_assert(offsetof(TriggerBase_C_Ignite, Fuel) == 0x000000, "Member 'TriggerBase_C_Ignite::Fuel' has a wrong offset!");

// Function triggerBase.triggerBase_C.fireDamage
// 0x0004 (0x0004 - 0x0000)
struct TriggerBase_C_FireDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TriggerBase_C_FireDamage) == 0x000004, "Wrong alignment on TriggerBase_C_FireDamage");
static_assert(sizeof(TriggerBase_C_FireDamage) == 0x000004, "Wrong size on TriggerBase_C_FireDamage");
static_assert(offsetof(TriggerBase_C_FireDamage, Damage) == 0x000000, "Member 'TriggerBase_C_FireDamage::Damage' has a wrong offset!");

// Function triggerBase.triggerBase_C.steppedOn
// 0x0090 (0x0090 - 0x0000)
struct TriggerBase_C_SteppedOn final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(TriggerBase_C_SteppedOn) == 0x000008, "Wrong alignment on TriggerBase_C_SteppedOn");
static_assert(sizeof(TriggerBase_C_SteppedOn) == 0x000090, "Wrong size on TriggerBase_C_SteppedOn");
static_assert(offsetof(TriggerBase_C_SteppedOn, Player) == 0x000000, "Member 'TriggerBase_C_SteppedOn::Player' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_SteppedOn, Hit) == 0x000008, "Member 'TriggerBase_C_SteppedOn::Hit' has a wrong offset!");

// Function triggerBase.triggerBase_C.setKey
// 0x0010 (0x0010 - 0x0000)
struct TriggerBase_C_SetKey final
{
public:
	class FString                                 Param_Key;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(TriggerBase_C_SetKey) == 0x000008, "Wrong alignment on TriggerBase_C_SetKey");
static_assert(sizeof(TriggerBase_C_SetKey) == 0x000010, "Wrong size on TriggerBase_C_SetKey");
static_assert(offsetof(TriggerBase_C_SetKey, Param_Key) == 0x000000, "Member 'TriggerBase_C_SetKey::Param_Key' has a wrong offset!");

// Function triggerBase.triggerBase_C.addDamage
// 0x00A8 (0x00A8 - 0x0000)
struct TriggerBase_C_AddDamage final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x000C(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                Impact;                                            // 0x0094(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipSetting;                                       // 0x00A0(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TriggerBase_C_AddDamage) == 0x000008, "Wrong alignment on TriggerBase_C_AddDamage");
static_assert(sizeof(TriggerBase_C_AddDamage) == 0x0000A8, "Wrong size on TriggerBase_C_AddDamage");
static_assert(offsetof(TriggerBase_C_AddDamage, Actor) == 0x000000, "Member 'TriggerBase_C_AddDamage::Actor' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_AddDamage, Damage) == 0x000008, "Member 'TriggerBase_C_AddDamage::Damage' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_AddDamage, Hit) == 0x00000C, "Member 'TriggerBase_C_AddDamage::Hit' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_AddDamage, Impact) == 0x000094, "Member 'TriggerBase_C_AddDamage::Impact' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_AddDamage, SkipSetting) == 0x0000A0, "Member 'TriggerBase_C_AddDamage::SkipSetting' has a wrong offset!");

// Function triggerBase.triggerBase_C.setPropProps
// 0x0003 (0x0003 - 0x0000)
struct TriggerBase_C_SetPropProps final
{
public:
	bool                                          Static;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Frozen;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Active;                                            // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TriggerBase_C_SetPropProps) == 0x000001, "Wrong alignment on TriggerBase_C_SetPropProps");
static_assert(sizeof(TriggerBase_C_SetPropProps) == 0x000003, "Wrong size on TriggerBase_C_SetPropProps");
static_assert(offsetof(TriggerBase_C_SetPropProps, Static) == 0x000000, "Member 'TriggerBase_C_SetPropProps::Static' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_SetPropProps, Frozen) == 0x000001, "Member 'TriggerBase_C_SetPropProps::Frozen' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_SetPropProps, Active) == 0x000002, "Member 'TriggerBase_C_SetPropProps::Active' has a wrong offset!");

// Function triggerBase.triggerBase_C.virus
// 0x0001 (0x0001 - 0x0000)
struct TriggerBase_C_Virus final
{
public:
	bool                                          Activate;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TriggerBase_C_Virus) == 0x000001, "Wrong alignment on TriggerBase_C_Virus");
static_assert(sizeof(TriggerBase_C_Virus) == 0x000001, "Wrong size on TriggerBase_C_Virus");
static_assert(offsetof(TriggerBase_C_Virus, Activate) == 0x000000, "Member 'TriggerBase_C_Virus::Activate' has a wrong offset!");

// Function triggerBase.triggerBase_C.leaveWaterOrigin
// 0x0008 (0x0008 - 0x0000)
struct TriggerBase_C_LeaveWaterOrigin final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TriggerBase_C_LeaveWaterOrigin) == 0x000008, "Wrong alignment on TriggerBase_C_LeaveWaterOrigin");
static_assert(sizeof(TriggerBase_C_LeaveWaterOrigin) == 0x000008, "Wrong size on TriggerBase_C_LeaveWaterOrigin");
static_assert(offsetof(TriggerBase_C_LeaveWaterOrigin, Water) == 0x000000, "Member 'TriggerBase_C_LeaveWaterOrigin::Water' has a wrong offset!");

// Function triggerBase.triggerBase_C.enterWaterOrigin
// 0x0008 (0x0008 - 0x0000)
struct TriggerBase_C_EnterWaterOrigin final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TriggerBase_C_EnterWaterOrigin) == 0x000008, "Wrong alignment on TriggerBase_C_EnterWaterOrigin");
static_assert(sizeof(TriggerBase_C_EnterWaterOrigin) == 0x000008, "Wrong size on TriggerBase_C_EnterWaterOrigin");
static_assert(offsetof(TriggerBase_C_EnterWaterOrigin, Water) == 0x000000, "Member 'TriggerBase_C_EnterWaterOrigin::Water' has a wrong offset!");

// Function triggerBase.triggerBase_C.leaveWater
// 0x0008 (0x0008 - 0x0000)
struct TriggerBase_C_LeaveWater final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TriggerBase_C_LeaveWater) == 0x000008, "Wrong alignment on TriggerBase_C_LeaveWater");
static_assert(sizeof(TriggerBase_C_LeaveWater) == 0x000008, "Wrong size on TriggerBase_C_LeaveWater");
static_assert(offsetof(TriggerBase_C_LeaveWater, Water) == 0x000000, "Member 'TriggerBase_C_LeaveWater::Water' has a wrong offset!");

// Function triggerBase.triggerBase_C.enterWater
// 0x0008 (0x0008 - 0x0000)
struct TriggerBase_C_EnterWater final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TriggerBase_C_EnterWater) == 0x000008, "Wrong alignment on TriggerBase_C_EnterWater");
static_assert(sizeof(TriggerBase_C_EnterWater) == 0x000008, "Wrong size on TriggerBase_C_EnterWater");
static_assert(offsetof(TriggerBase_C_EnterWater, Water) == 0x000000, "Member 'TriggerBase_C_EnterWater::Water' has a wrong offset!");

// Function triggerBase.triggerBase_C.ImpactDamage
// 0x00A8 (0x00A8 - 0x0000)
struct TriggerBase_C_ImpactDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0004(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_2F03[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0090(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Impact;                                            // 0x0098(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TriggerBase_C_ImpactDamage) == 0x000008, "Wrong alignment on TriggerBase_C_ImpactDamage");
static_assert(sizeof(TriggerBase_C_ImpactDamage) == 0x0000A8, "Wrong size on TriggerBase_C_ImpactDamage");
static_assert(offsetof(TriggerBase_C_ImpactDamage, Damage) == 0x000000, "Member 'TriggerBase_C_ImpactDamage::Damage' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ImpactDamage, Hit) == 0x000004, "Member 'TriggerBase_C_ImpactDamage::Hit' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ImpactDamage, Actor) == 0x000090, "Member 'TriggerBase_C_ImpactDamage::Actor' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ImpactDamage, Impact) == 0x000098, "Member 'TriggerBase_C_ImpactDamage::Impact' has a wrong offset!");

// Function triggerBase.triggerBase_C.applyColor
// 0x0010 (0x0010 - 0x0000)
struct TriggerBase_C_ApplyColor final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TriggerBase_C_ApplyColor) == 0x000004, "Wrong alignment on TriggerBase_C_ApplyColor");
static_assert(sizeof(TriggerBase_C_ApplyColor) == 0x000010, "Wrong size on TriggerBase_C_ApplyColor");
static_assert(offsetof(TriggerBase_C_ApplyColor, Color) == 0x000000, "Member 'TriggerBase_C_ApplyColor::Color' has a wrong offset!");

// Function triggerBase.triggerBase_C.AnyKey
// 0x0020 (0x0020 - 0x0000)
struct TriggerBase_C_AnyKey final
{
public:
	struct FKey                                   Param_Key;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Pressed;                                           // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TriggerBase_C_AnyKey) == 0x000008, "Wrong alignment on TriggerBase_C_AnyKey");
static_assert(sizeof(TriggerBase_C_AnyKey) == 0x000020, "Wrong size on TriggerBase_C_AnyKey");
static_assert(offsetof(TriggerBase_C_AnyKey, Param_Key) == 0x000000, "Member 'TriggerBase_C_AnyKey::Param_Key' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_AnyKey, Pressed) == 0x000018, "Member 'TriggerBase_C_AnyKey::Pressed' has a wrong offset!");

// Function triggerBase.triggerBase_C.settingsApplied
// 0x00CC (0x00CC - 0x0000)
struct TriggerBase_C_SettingsApplied final
{
public:
	struct FStruct_settings                       Settings;                                          // 0x0000(0x00CC)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TriggerBase_C_SettingsApplied) == 0x000004, "Wrong alignment on TriggerBase_C_SettingsApplied");
static_assert(sizeof(TriggerBase_C_SettingsApplied) == 0x0000CC, "Wrong size on TriggerBase_C_SettingsApplied");
static_assert(offsetof(TriggerBase_C_SettingsApplied, Settings) == 0x000000, "Member 'TriggerBase_C_SettingsApplied::Settings' has a wrong offset!");

// Function triggerBase.triggerBase_C.stuffUpgraded
// 0x0008 (0x0008 - 0x0000)
struct TriggerBase_C_StuffUpgraded final
{
public:
	class AMainGamemode_C*                        GameMode;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TriggerBase_C_StuffUpgraded) == 0x000008, "Wrong alignment on TriggerBase_C_StuffUpgraded");
static_assert(sizeof(TriggerBase_C_StuffUpgraded) == 0x000008, "Wrong size on TriggerBase_C_StuffUpgraded");
static_assert(offsetof(TriggerBase_C_StuffUpgraded, GameMode) == 0x000000, "Member 'TriggerBase_C_StuffUpgraded::GameMode' has a wrong offset!");

// Function triggerBase.triggerBase_C.UserConstructionScript
// 0x0078 (0x0078 - 0x0000)
struct TriggerBase_C_UserConstructionScript final
{
public:
	int32                                         Temp_int_Variable;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F04[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F05[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_getKey_key;                               // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item_1;                         // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F06[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IInt_objects_C>        K2Node_DynamicCast_AsInt_Objects;                  // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F07[0x6];                                     // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_getKey_key_1;                             // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TriggerBase_C_UserConstructionScript) == 0x000008, "Wrong alignment on TriggerBase_C_UserConstructionScript");
static_assert(sizeof(TriggerBase_C_UserConstructionScript) == 0x000078, "Wrong size on TriggerBase_C_UserConstructionScript");
static_assert(offsetof(TriggerBase_C_UserConstructionScript, Temp_int_Variable) == 0x000000, "Member 'TriggerBase_C_UserConstructionScript::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_UserConstructionScript, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'TriggerBase_C_UserConstructionScript::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_UserConstructionScript, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'TriggerBase_C_UserConstructionScript::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_UserConstructionScript, CallFunc_Add_IntInt_ReturnValue_1) == 0x00000C, "Member 'TriggerBase_C_UserConstructionScript::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_UserConstructionScript, CallFunc_Array_Get_Item) == 0x000010, "Member 'TriggerBase_C_UserConstructionScript::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_UserConstructionScript, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'TriggerBase_C_UserConstructionScript::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_UserConstructionScript, CallFunc_Less_IntInt_ReturnValue) == 0x00001C, "Member 'TriggerBase_C_UserConstructionScript::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_UserConstructionScript, Temp_int_Array_Index_Variable) == 0x000020, "Member 'TriggerBase_C_UserConstructionScript::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_UserConstructionScript, CallFunc_getKey_key) == 0x000028, "Member 'TriggerBase_C_UserConstructionScript::CallFunc_getKey_key' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_UserConstructionScript, CallFunc_Array_Get_Item_1) == 0x000038, "Member 'TriggerBase_C_UserConstructionScript::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_UserConstructionScript, CallFunc_Array_Length_ReturnValue_1) == 0x000040, "Member 'TriggerBase_C_UserConstructionScript::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_UserConstructionScript, K2Node_DynamicCast_AsInt_Objects) == 0x000048, "Member 'TriggerBase_C_UserConstructionScript::K2Node_DynamicCast_AsInt_Objects' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_UserConstructionScript, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'TriggerBase_C_UserConstructionScript::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_UserConstructionScript, CallFunc_Less_IntInt_ReturnValue_1) == 0x000059, "Member 'TriggerBase_C_UserConstructionScript::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_UserConstructionScript, CallFunc_getKey_key_1) == 0x000060, "Member 'TriggerBase_C_UserConstructionScript::CallFunc_getKey_key_1' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_UserConstructionScript, CallFunc_Array_Add_ReturnValue) == 0x000070, "Member 'TriggerBase_C_UserConstructionScript::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_UserConstructionScript, CallFunc_Array_Length_ReturnValue_2) == 0x000074, "Member 'TriggerBase_C_UserConstructionScript::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");

// Function triggerBase.triggerBase_C.runAll
// 0x0040 (0x0040 - 0x0000)
struct TriggerBase_C_RunAll final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F08[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item_1;                         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F09[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IInt_ttrigger_C>       K2Node_DynamicCast_AsInt_Ttrigger;                 // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TriggerBase_C_RunAll) == 0x000008, "Wrong alignment on TriggerBase_C_RunAll");
static_assert(sizeof(TriggerBase_C_RunAll) == 0x000040, "Wrong size on TriggerBase_C_RunAll");
static_assert(offsetof(TriggerBase_C_RunAll, Temp_int_Array_Index_Variable) == 0x000000, "Member 'TriggerBase_C_RunAll::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_RunAll, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'TriggerBase_C_RunAll::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_RunAll, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'TriggerBase_C_RunAll::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_RunAll, CallFunc_Array_Get_Item) == 0x00000C, "Member 'TriggerBase_C_RunAll::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_RunAll, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'TriggerBase_C_RunAll::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_RunAll, CallFunc_Array_Get_Item_1) == 0x000018, "Member 'TriggerBase_C_RunAll::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_RunAll, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'TriggerBase_C_RunAll::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_RunAll, K2Node_DynamicCast_AsInt_Ttrigger) == 0x000028, "Member 'TriggerBase_C_RunAll::K2Node_DynamicCast_AsInt_Ttrigger' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_RunAll, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'TriggerBase_C_RunAll::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function triggerBase.triggerBase_C.getTriggerData
// 0x0230 (0x0230 - 0x0000)
struct TriggerBase_C_GetTriggerData final
{
public:
	struct FStruct_triggerSave                    Data;                                              // 0x0000(0x00F0)(Parm, OutParm, HasGetValueTypeHash)
	TArray<class FString>                         Keys;                                              // 0x00F0(0x0010)(Edit, BlueprintVisible)
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0100(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F0A[0x8];                                     // 0x0138(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_triggerSave                    K2Node_MakeStruct_struct_triggerSave;              // 0x0140(0x00F0)(HasGetValueTypeHash)
};
static_assert(alignof(TriggerBase_C_GetTriggerData) == 0x000010, "Wrong alignment on TriggerBase_C_GetTriggerData");
static_assert(sizeof(TriggerBase_C_GetTriggerData) == 0x000230, "Wrong size on TriggerBase_C_GetTriggerData");
static_assert(offsetof(TriggerBase_C_GetTriggerData, Data) == 0x000000, "Member 'TriggerBase_C_GetTriggerData::Data' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_GetTriggerData, Keys) == 0x0000F0, "Member 'TriggerBase_C_GetTriggerData::Keys' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_GetTriggerData, CallFunc_GetTransform_ReturnValue) == 0x000100, "Member 'TriggerBase_C_GetTriggerData::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_GetTriggerData, CallFunc_GetObjectClass_ReturnValue) == 0x000130, "Member 'TriggerBase_C_GetTriggerData::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_GetTriggerData, K2Node_MakeStruct_struct_triggerSave) == 0x000140, "Member 'TriggerBase_C_GetTriggerData::K2Node_MakeStruct_struct_triggerSave' has a wrong offset!");

// Function triggerBase.triggerBase_C.loadTriggerData
// 0x0100 (0x0100 - 0x0000)
struct TriggerBase_C_LoadTriggerData final
{
public:
	struct FStruct_triggerSave                    Data;                                              // 0x0000(0x00F0)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x00F0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TriggerBase_C_LoadTriggerData) == 0x000010, "Wrong alignment on TriggerBase_C_LoadTriggerData");
static_assert(sizeof(TriggerBase_C_LoadTriggerData) == 0x000100, "Wrong size on TriggerBase_C_LoadTriggerData");
static_assert(offsetof(TriggerBase_C_LoadTriggerData, Data) == 0x000000, "Member 'TriggerBase_C_LoadTriggerData::Data' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_LoadTriggerData, Return) == 0x0000F0, "Member 'TriggerBase_C_LoadTriggerData::Return' has a wrong offset!");

// Function triggerBase.triggerBase_C.ignoreSave_trigger
// 0x0003 (0x0003 - 0x0000)
struct TriggerBase_C_IgnoreSave_trigger final
{
public:
	bool                                          Ignore;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsChildActor_ReturnValue;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TriggerBase_C_IgnoreSave_trigger) == 0x000001, "Wrong alignment on TriggerBase_C_IgnoreSave_trigger");
static_assert(sizeof(TriggerBase_C_IgnoreSave_trigger) == 0x000003, "Wrong size on TriggerBase_C_IgnoreSave_trigger");
static_assert(offsetof(TriggerBase_C_IgnoreSave_trigger, Ignore) == 0x000000, "Member 'TriggerBase_C_IgnoreSave_trigger::Ignore' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_IgnoreSave_trigger, CallFunc_IsChildActor_ReturnValue) == 0x000001, "Member 'TriggerBase_C_IgnoreSave_trigger::CallFunc_IsChildActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_IgnoreSave_trigger, CallFunc_BooleanOR_ReturnValue) == 0x000002, "Member 'TriggerBase_C_IgnoreSave_trigger::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function triggerBase.triggerBase_C.GetKey
// 0x0048 (0x0048 - 0x0000)
struct TriggerBase_C_GetKey final
{
public:
	class FString                                 Param_Key;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<uint8>                                 CallFunc_GenerateRandomBytes_ByteArray;            // 0x0018(0x0010)(ReferenceParm)
	class FString                                 CallFunc_BytesToBase64Url_ReturnValue;             // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEmpty_ReturnValue;                      // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TriggerBase_C_GetKey) == 0x000008, "Wrong alignment on TriggerBase_C_GetKey");
static_assert(sizeof(TriggerBase_C_GetKey) == 0x000048, "Wrong size on TriggerBase_C_GetKey");
static_assert(offsetof(TriggerBase_C_GetKey, Param_Key) == 0x000000, "Member 'TriggerBase_C_GetKey::Param_Key' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_GetKey, CallFunc_getMainGamemode_AsMain_Gamemode) == 0x000010, "Member 'TriggerBase_C_GetKey::CallFunc_getMainGamemode_AsMain_Gamemode' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_GetKey, CallFunc_GenerateRandomBytes_ByteArray) == 0x000018, "Member 'TriggerBase_C_GetKey::CallFunc_GenerateRandomBytes_ByteArray' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_GetKey, CallFunc_BytesToBase64Url_ReturnValue) == 0x000028, "Member 'TriggerBase_C_GetKey::CallFunc_BytesToBase64Url_ReturnValue' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_GetKey, CallFunc_Array_Add_ReturnValue) == 0x000038, "Member 'TriggerBase_C_GetKey::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_GetKey, CallFunc_Array_Add_ReturnValue_1) == 0x00003C, "Member 'TriggerBase_C_GetKey::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_GetKey, CallFunc_Array_Find_ReturnValue) == 0x000040, "Member 'TriggerBase_C_GetKey::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_GetKey, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000044, "Member 'TriggerBase_C_GetKey::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_GetKey, CallFunc_IsEmpty_ReturnValue) == 0x000045, "Member 'TriggerBase_C_GetKey::CallFunc_IsEmpty_ReturnValue' has a wrong offset!");

// Function triggerBase.triggerBase_C.toolboxFix
// 0x0010 (0x0010 - 0x0000)
struct TriggerBase_C_ToolboxFix final
{
public:
	class AProp_toolbox_C*                        Toolbox;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TriggerBase_C_ToolboxFix) == 0x000008, "Wrong alignment on TriggerBase_C_ToolboxFix");
static_assert(sizeof(TriggerBase_C_ToolboxFix) == 0x000010, "Wrong size on TriggerBase_C_ToolboxFix");
static_assert(offsetof(TriggerBase_C_ToolboxFix, Toolbox) == 0x000000, "Member 'TriggerBase_C_ToolboxFix::Toolbox' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ToolboxFix, Return) == 0x000008, "Member 'TriggerBase_C_ToolboxFix::Return' has a wrong offset!");

// Function triggerBase.triggerBase_C.canBeUsedHold
// 0x0001 (0x0001 - 0x0000)
struct TriggerBase_C_CanBeUsedHold final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TriggerBase_C_CanBeUsedHold) == 0x000001, "Wrong alignment on TriggerBase_C_CanBeUsedHold");
static_assert(sizeof(TriggerBase_C_CanBeUsedHold) == 0x000001, "Wrong size on TriggerBase_C_CanBeUsedHold");
static_assert(offsetof(TriggerBase_C_CanBeUsedHold, Return) == 0x000000, "Member 'TriggerBase_C_CanBeUsedHold::Return' has a wrong offset!");

// Function triggerBase.triggerBase_C.processKeys
// 0x0040 (0x0040 - 0x0000)
struct TriggerBase_C_ProcessKeys final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F0B[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Array_Get_Item;                           // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F0C[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode;          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_getObjectFromKey_Output;                  // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TriggerBase_C_ProcessKeys) == 0x000008, "Wrong alignment on TriggerBase_C_ProcessKeys");
static_assert(sizeof(TriggerBase_C_ProcessKeys) == 0x000040, "Wrong size on TriggerBase_C_ProcessKeys");
static_assert(offsetof(TriggerBase_C_ProcessKeys, Return) == 0x000000, "Member 'TriggerBase_C_ProcessKeys::Return' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ProcessKeys, Temp_int_Array_Index_Variable) == 0x000004, "Member 'TriggerBase_C_ProcessKeys::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ProcessKeys, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'TriggerBase_C_ProcessKeys::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ProcessKeys, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'TriggerBase_C_ProcessKeys::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ProcessKeys, CallFunc_Array_Get_Item) == 0x000010, "Member 'TriggerBase_C_ProcessKeys::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ProcessKeys, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'TriggerBase_C_ProcessKeys::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ProcessKeys, CallFunc_Less_IntInt_ReturnValue) == 0x000024, "Member 'TriggerBase_C_ProcessKeys::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ProcessKeys, CallFunc_getMainGamemode_AsMain_Gamemode) == 0x000028, "Member 'TriggerBase_C_ProcessKeys::CallFunc_getMainGamemode_AsMain_Gamemode' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ProcessKeys, CallFunc_getObjectFromKey_Output) == 0x000030, "Member 'TriggerBase_C_ProcessKeys::CallFunc_getObjectFromKey_Output' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_ProcessKeys, CallFunc_Array_Add_ReturnValue) == 0x000038, "Member 'TriggerBase_C_ProcessKeys::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function triggerBase.triggerBase_C.getOnlyKey
// 0x0010 (0x0010 - 0x0000)
struct TriggerBase_C_GetOnlyKey final
{
public:
	class FString                                 Param_Key;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(TriggerBase_C_GetOnlyKey) == 0x000008, "Wrong alignment on TriggerBase_C_GetOnlyKey");
static_assert(sizeof(TriggerBase_C_GetOnlyKey) == 0x000010, "Wrong size on TriggerBase_C_GetOnlyKey");
static_assert(offsetof(TriggerBase_C_GetOnlyKey, Param_Key) == 0x000000, "Member 'TriggerBase_C_GetOnlyKey::Param_Key' has a wrong offset!");

// Function triggerBase.triggerBase_C.setPath
// 0x0018 (0x0018 - 0x0000)
struct TriggerBase_C_SetPath final
{
public:
	TArray<struct FVector>                        Path;                                              // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Return;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TriggerBase_C_SetPath) == 0x000008, "Wrong alignment on TriggerBase_C_SetPath");
static_assert(sizeof(TriggerBase_C_SetPath) == 0x000018, "Wrong size on TriggerBase_C_SetPath");
static_assert(offsetof(TriggerBase_C_SetPath, Path) == 0x000000, "Member 'TriggerBase_C_SetPath::Path' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_SetPath, Return) == 0x000010, "Member 'TriggerBase_C_SetPath::Return' has a wrong offset!");

// Function triggerBase.triggerBase_C.getActionOptions
// 0x0048 (0x0048 - 0x0000)
struct TriggerBase_C_GetActionOptions final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Component;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         Options;                                           // 0x0018(0x0010)(Parm, OutParm)
	TArray<Enum_interactionActions>               Options_enum;                                      // 0x0028(0x0010)(Parm, OutParm)
	TArray<class FText>                           OptionsNamesOverlay;                               // 0x0038(0x0010)(Parm, OutParm)
};
static_assert(alignof(TriggerBase_C_GetActionOptions) == 0x000008, "Wrong alignment on TriggerBase_C_GetActionOptions");
static_assert(sizeof(TriggerBase_C_GetActionOptions) == 0x000048, "Wrong size on TriggerBase_C_GetActionOptions");
static_assert(offsetof(TriggerBase_C_GetActionOptions, Player) == 0x000000, "Member 'TriggerBase_C_GetActionOptions::Player' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_GetActionOptions, Component) == 0x000008, "Member 'TriggerBase_C_GetActionOptions::Component' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_GetActionOptions, Actor) == 0x000010, "Member 'TriggerBase_C_GetActionOptions::Actor' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_GetActionOptions, Options) == 0x000018, "Member 'TriggerBase_C_GetActionOptions::Options' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_GetActionOptions, Options_enum) == 0x000028, "Member 'TriggerBase_C_GetActionOptions::Options_enum' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_GetActionOptions, OptionsNamesOverlay) == 0x000038, "Member 'TriggerBase_C_GetActionOptions::OptionsNamesOverlay' has a wrong offset!");

// Function triggerBase.triggerBase_C.gascanFuel
// 0x0010 (0x0010 - 0x0000)
struct TriggerBase_C_GascanFuel final
{
public:
	class AProp_gascan_C*                         Gascan;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Fueled;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TriggerBase_C_GascanFuel) == 0x000008, "Wrong alignment on TriggerBase_C_GascanFuel");
static_assert(sizeof(TriggerBase_C_GascanFuel) == 0x000010, "Wrong size on TriggerBase_C_GascanFuel");
static_assert(offsetof(TriggerBase_C_GascanFuel, Gascan) == 0x000000, "Member 'TriggerBase_C_GascanFuel::Gascan' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_GascanFuel, Fueled) == 0x000008, "Member 'TriggerBase_C_GascanFuel::Fueled' has a wrong offset!");

// Function triggerBase.triggerBase_C.skipRadial
// 0x0001 (0x0001 - 0x0000)
struct TriggerBase_C_SkipRadial final
{
public:
	bool                                          Skip;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TriggerBase_C_SkipRadial) == 0x000001, "Wrong alignment on TriggerBase_C_SkipRadial");
static_assert(sizeof(TriggerBase_C_SkipRadial) == 0x000001, "Wrong size on TriggerBase_C_SkipRadial");
static_assert(offsetof(TriggerBase_C_SkipRadial, Skip) == 0x000000, "Member 'TriggerBase_C_SkipRadial::Skip' has a wrong offset!");

// Function triggerBase.triggerBase_C.dreamInv
// 0x0018 (0x0018 - 0x0000)
struct TriggerBase_C_DreamInv final
{
public:
	TArray<struct FStruct_save>                   Invv;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class ADreamBase_C*                           Base;                                              // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TriggerBase_C_DreamInv) == 0x000008, "Wrong alignment on TriggerBase_C_DreamInv");
static_assert(sizeof(TriggerBase_C_DreamInv) == 0x000018, "Wrong size on TriggerBase_C_DreamInv");
static_assert(offsetof(TriggerBase_C_DreamInv, Invv) == 0x000000, "Member 'TriggerBase_C_DreamInv::Invv' has a wrong offset!");
static_assert(offsetof(TriggerBase_C_DreamInv, Base) == 0x000010, "Member 'TriggerBase_C_DreamInv::Base' has a wrong offset!");

}

