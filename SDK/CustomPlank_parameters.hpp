#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CustomPlank

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function customPlank.customPlank_C.ExecuteUbergraph_customPlank
// 0x0620 (0x0620 - 0x0000)
struct CustomPlank_C_ExecuteUbergraph_customPlank final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorScale3D_ReturnValue;              // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorScale3D_ReturnValue_1;            // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorScale3D_ReturnValue_2;            // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_5;        // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_6;        // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_7;        // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_CustomEvent_Hit;                            // 0x0088(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0110(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x011D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_17F2[0x2];                                     // 0x011E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0128(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0134(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0140(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x014C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0168(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0184(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0190(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17F3[0x4];                                     // 0x019C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x01A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue_1;         // 0x01B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x01C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x01D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorScale3D_ReturnValue_3;            // 0x01E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_3;                          // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_3;                          // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_3;                          // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_actor;                                // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage;                               // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit;                                  // 0x0204(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                K2Node_Event_impact;                               // 0x028C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_skipSetting;                          // 0x0298(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_17F4[0x7];                                     // 0x0299(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x02A0(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Divide_VectorFloat_ReturnValue;           // 0x02D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_InverseTransformLocation_ReturnValue;     // 0x02DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_4;                          // 0x02E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_4;                          // 0x02EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_4;                          // 0x02F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x02F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0300(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0301(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_17F5[0x2];                                     // 0x0302(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0304(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0310(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_17F6[0x3];                                     // 0x0311(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetActorRightVector_ReturnValue;          // 0x0314(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetTransform_ReturnValue_1;               // 0x0320(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_GetTransform_ReturnValue_2;               // 0x0350(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_InverseTransformLocation_ReturnValue_1;   // 0x0380(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_InverseTransformLocation_ReturnValue_2;   // 0x038C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_5;                          // 0x0398(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_5;                          // 0x039C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_5;                          // 0x03A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_6;                          // 0x03A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_6;                          // 0x03A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_6;                          // 0x03AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_2;          // 0x03B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_3;          // 0x03B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x03B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_1;                       // 0x03BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x03C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x03CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x03D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_1;      // 0x03E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_7;                          // 0x03F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_7;                          // 0x03F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_7;                          // 0x03F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_8;                          // 0x03FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_8;                          // 0x0400(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_8;                          // 0x0404(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0408(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_2;         // 0x0409(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_3;         // 0x040A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_4;         // 0x040B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x040C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x040D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_17F7[0x2];                                     // 0x040E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Lerp_ReturnValue_2;                       // 0x0410(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_3;                       // 0x0414(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x0418(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_3;                 // 0x0424(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_2;      // 0x0430(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_3;      // 0x043C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_9;                          // 0x0448(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_9;                          // 0x044C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_9;                          // 0x0450(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_10;                         // 0x0454(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_10;                         // 0x0458(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_10;                         // 0x045C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_5;         // 0x0460(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_6;         // 0x0461(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_7;         // 0x0462(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_8;         // 0x0463(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0464(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x0465(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x0466(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_6;                 // 0x0467(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_4;          // 0x0468(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_5;          // 0x046C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_8;        // 0x0470(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_9;        // 0x0474(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_4;                       // 0x0478(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_5;                       // 0x047C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0480(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x048C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0498(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_6;                       // 0x04A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17F8[0x8];                                     // 0x04A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x04B0(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x04E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17F9[0x4];                                     // 0x04EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x04F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_7;                       // 0x04F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17FA[0x4];                                     // 0x04FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACustomPlank_C*                         CallFunc_FinishSpawningActor_ReturnValue;          // 0x0500(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_3;       // 0x0508(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x0514(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0520(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x052C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17FB[0x8];                                     // 0x0538(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x0540(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_3;           // 0x0570(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17FC[0x4];                                     // 0x057C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1; // 0x0580(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue_1;        // 0x0588(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_17FD[0x4];                                     // 0x0594(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACustomPlank_C*                         CallFunc_FinishSpawningActor_ReturnValue_1;        // 0x0598(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_2;              // 0x05A0(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_3;              // 0x05D0(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_2; // 0x0600(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_3; // 0x0608(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACustomPlank_C*                         CallFunc_FinishSpawningActor_ReturnValue_2;        // 0x0610(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACustomPlank_C*                         CallFunc_FinishSpawningActor_ReturnValue_3;        // 0x0618(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CustomPlank_C_ExecuteUbergraph_customPlank) == 0x000010, "Wrong alignment on CustomPlank_C_ExecuteUbergraph_customPlank");
static_assert(sizeof(CustomPlank_C_ExecuteUbergraph_customPlank) == 0x000620, "Wrong size on CustomPlank_C_ExecuteUbergraph_customPlank");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, EntryPoint) == 0x000000, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::EntryPoint' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_GetActorForwardVector_ReturnValue) == 0x000004, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_GetActorScale3D_ReturnValue) == 0x000010, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_GetActorScale3D_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakVector_X) == 0x00001C, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakVector_Y) == 0x000020, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakVector_Z) == 0x000024, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_GetActorScale3D_ReturnValue_1) == 0x000028, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_GetActorScale3D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_GetActorScale3D_ReturnValue_2) == 0x000034, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_GetActorScale3D_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakVector_X_1) == 0x000040, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakVector_Y_1) == 0x000044, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakVector_Z_1) == 0x000048, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakVector_X_2) == 0x00004C, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakVector_Y_2) == 0x000050, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakVector_Z_2) == 0x000054, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000058, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x00005C, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000060, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000064, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000068, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x00006C, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x000070, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Multiply_FloatFloat_ReturnValue_5) == 0x000074, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Multiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Multiply_FloatFloat_ReturnValue_6) == 0x000078, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Multiply_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Multiply_FloatFloat_ReturnValue_7) == 0x00007C, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Multiply_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x000080, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, K2Node_CustomEvent_Hit) == 0x000088, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::K2Node_CustomEvent_Hit' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000110, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakHitResult_bBlockingHit) == 0x00011C, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakHitResult_bInitialOverlap) == 0x00011D, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakHitResult_Time) == 0x000120, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakHitResult_Distance) == 0x000124, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakHitResult_Location) == 0x000128, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakHitResult_ImpactPoint) == 0x000134, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakHitResult_Normal) == 0x000140, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakHitResult_ImpactNormal) == 0x00014C, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakHitResult_PhysMat) == 0x000158, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakHitResult_HitActor) == 0x000160, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakHitResult_HitComponent) == 0x000168, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakHitResult_HitBoneName) == 0x000170, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakHitResult_HitItem) == 0x000178, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakHitResult_ElementIndex) == 0x00017C, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakHitResult_FaceIndex) == 0x000180, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakHitResult_TraceStart) == 0x000184, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakHitResult_TraceEnd) == 0x000190, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Conv_FloatToString_ReturnValue) == 0x0001A0, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Conv_FloatToString_ReturnValue_1) == 0x0001B0, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Conv_FloatToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Concat_StrStr_ReturnValue) == 0x0001C0, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Concat_StrStr_ReturnValue_1) == 0x0001D0, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_GetActorScale3D_ReturnValue_3) == 0x0001E0, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_GetActorScale3D_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakVector_X_3) == 0x0001EC, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakVector_Y_3) == 0x0001F0, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakVector_Z_3) == 0x0001F4, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, K2Node_Event_actor) == 0x0001F8, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::K2Node_Event_actor' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, K2Node_Event_damage) == 0x000200, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::K2Node_Event_damage' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, K2Node_Event_hit) == 0x000204, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::K2Node_Event_hit' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, K2Node_Event_impact) == 0x00028C, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::K2Node_Event_impact' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, K2Node_Event_skipSetting) == 0x000298, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::K2Node_Event_skipSetting' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_GetTransform_ReturnValue) == 0x0002A0, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Divide_VectorFloat_ReturnValue) == 0x0002D0, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Divide_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_InverseTransformLocation_ReturnValue) == 0x0002DC, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_InverseTransformLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakVector_X_4) == 0x0002E8, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakVector_X_4' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakVector_Y_4) == 0x0002EC, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakVector_Y_4' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakVector_Z_4) == 0x0002F0, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakVector_Z_4' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x0002F4, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000300, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Less_FloatFloat_ReturnValue) == 0x000301, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000304, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BooleanAND_ReturnValue) == 0x000310, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_GetActorRightVector_ReturnValue) == 0x000314, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_GetActorRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_GetTransform_ReturnValue_1) == 0x000320, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_GetTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_GetTransform_ReturnValue_2) == 0x000350, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_GetTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_InverseTransformLocation_ReturnValue_1) == 0x000380, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_InverseTransformLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_InverseTransformLocation_ReturnValue_2) == 0x00038C, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_InverseTransformLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakVector_X_5) == 0x000398, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakVector_X_5' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakVector_Y_5) == 0x00039C, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakVector_Y_5' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakVector_Z_5) == 0x0003A0, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakVector_Z_5' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakVector_X_6) == 0x0003A4, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakVector_X_6' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakVector_Y_6) == 0x0003A8, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakVector_Y_6' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakVector_Z_6) == 0x0003AC, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakVector_Z_6' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Divide_FloatFloat_ReturnValue_2) == 0x0003B0, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Divide_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Divide_FloatFloat_ReturnValue_3) == 0x0003B4, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Divide_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Lerp_ReturnValue) == 0x0003B8, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Lerp_ReturnValue_1) == 0x0003BC, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_MakeVector_ReturnValue) == 0x0003C0, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_MakeVector_ReturnValue_1) == 0x0003CC, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Multiply_VectorVector_ReturnValue) == 0x0003D8, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Multiply_VectorVector_ReturnValue_1) == 0x0003E4, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Multiply_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakVector_X_7) == 0x0003F0, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakVector_X_7' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakVector_Y_7) == 0x0003F4, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakVector_Y_7' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakVector_Z_7) == 0x0003F8, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakVector_Z_7' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakVector_X_8) == 0x0003FC, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakVector_X_8' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakVector_Y_8) == 0x000400, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakVector_Y_8' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakVector_Z_8) == 0x000404, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakVector_Z_8' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000408, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Greater_FloatFloat_ReturnValue_2) == 0x000409, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Greater_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Greater_FloatFloat_ReturnValue_3) == 0x00040A, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Greater_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Greater_FloatFloat_ReturnValue_4) == 0x00040B, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Greater_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BooleanAND_ReturnValue_1) == 0x00040C, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BooleanAND_ReturnValue_2) == 0x00040D, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Lerp_ReturnValue_2) == 0x000410, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Lerp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Lerp_ReturnValue_3) == 0x000414, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Lerp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_MakeVector_ReturnValue_2) == 0x000418, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_MakeVector_ReturnValue_3) == 0x000424, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_MakeVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Multiply_VectorVector_ReturnValue_2) == 0x000430, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Multiply_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Multiply_VectorVector_ReturnValue_3) == 0x00043C, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Multiply_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakVector_X_9) == 0x000448, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakVector_X_9' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakVector_Y_9) == 0x00044C, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakVector_Y_9' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakVector_Z_9) == 0x000450, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakVector_Z_9' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakVector_X_10) == 0x000454, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakVector_X_10' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakVector_Y_10) == 0x000458, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakVector_Y_10' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BreakVector_Z_10) == 0x00045C, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BreakVector_Z_10' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Greater_FloatFloat_ReturnValue_5) == 0x000460, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Greater_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Greater_FloatFloat_ReturnValue_6) == 0x000461, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Greater_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Greater_FloatFloat_ReturnValue_7) == 0x000462, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Greater_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Greater_FloatFloat_ReturnValue_8) == 0x000463, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Greater_FloatFloat_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BooleanAND_ReturnValue_3) == 0x000464, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BooleanAND_ReturnValue_4) == 0x000465, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BooleanAND_ReturnValue_5) == 0x000466, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BooleanAND_ReturnValue_6) == 0x000467, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BooleanAND_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Divide_FloatFloat_ReturnValue_4) == 0x000468, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Divide_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Divide_FloatFloat_ReturnValue_5) == 0x00046C, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Divide_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Multiply_FloatFloat_ReturnValue_8) == 0x000470, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Multiply_FloatFloat_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Multiply_FloatFloat_ReturnValue_9) == 0x000474, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Multiply_FloatFloat_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Lerp_ReturnValue_4) == 0x000478, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Lerp_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Lerp_ReturnValue_5) == 0x00047C, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Lerp_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000480, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x00048C, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Add_VectorVector_ReturnValue) == 0x000498, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Lerp_ReturnValue_6) == 0x0004A4, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Lerp_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_MakeTransform_ReturnValue) == 0x0004B0, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x0004E0, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x0004F0, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Lerp_ReturnValue_7) == 0x0004F8, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Lerp_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_FinishSpawningActor_ReturnValue) == 0x000500, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Multiply_VectorFloat_ReturnValue_3) == 0x000508, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Multiply_VectorFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x000514, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000520, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Add_VectorVector_ReturnValue_2) == 0x00052C, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_MakeTransform_ReturnValue_1) == 0x000540, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_Add_VectorVector_ReturnValue_3) == 0x000570, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_Add_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1) == 0x000580, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_K2_GetActorRotation_ReturnValue_1) == 0x000588, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_K2_GetActorRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_FinishSpawningActor_ReturnValue_1) == 0x000598, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_FinishSpawningActor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_MakeTransform_ReturnValue_2) == 0x0005A0, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_MakeTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_MakeTransform_ReturnValue_3) == 0x0005D0, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_MakeTransform_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_2) == 0x000600, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_3) == 0x000608, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_FinishSpawningActor_ReturnValue_2) == 0x000610, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_FinishSpawningActor_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_ExecuteUbergraph_customPlank, CallFunc_FinishSpawningActor_ReturnValue_3) == 0x000618, "Member 'CustomPlank_C_ExecuteUbergraph_customPlank::CallFunc_FinishSpawningActor_ReturnValue_3' has a wrong offset!");

// Function customPlank.customPlank_C.addDamage
// 0x00A8 (0x00A8 - 0x0000)
struct CustomPlank_C_AddDamage final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Param_Hit;                                         // 0x000C(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                Impact;                                            // 0x0094(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipSetting;                                       // 0x00A0(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CustomPlank_C_AddDamage) == 0x000008, "Wrong alignment on CustomPlank_C_AddDamage");
static_assert(sizeof(CustomPlank_C_AddDamage) == 0x0000A8, "Wrong size on CustomPlank_C_AddDamage");
static_assert(offsetof(CustomPlank_C_AddDamage, Actor) == 0x000000, "Member 'CustomPlank_C_AddDamage::Actor' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_AddDamage, Damage) == 0x000008, "Member 'CustomPlank_C_AddDamage::Damage' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_AddDamage, Param_Hit) == 0x00000C, "Member 'CustomPlank_C_AddDamage::Param_Hit' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_AddDamage, Impact) == 0x000094, "Member 'CustomPlank_C_AddDamage::Impact' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_AddDamage, SkipSetting) == 0x0000A0, "Member 'CustomPlank_C_AddDamage::SkipSetting' has a wrong offset!");

// Function customPlank.customPlank_C.Cut
// 0x0088 (0x0088 - 0x0000)
struct CustomPlank_C_Cut final
{
public:
	struct FHitResult                             Param_Hit;                                         // 0x0000(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(CustomPlank_C_Cut) == 0x000004, "Wrong alignment on CustomPlank_C_Cut");
static_assert(sizeof(CustomPlank_C_Cut) == 0x000088, "Wrong size on CustomPlank_C_Cut");
static_assert(offsetof(CustomPlank_C_Cut, Param_Hit) == 0x000000, "Member 'CustomPlank_C_Cut::Param_Hit' has a wrong offset!");

// Function customPlank.customPlank_C.canBePutInContainer
// 0x0001 (0x0001 - 0x0000)
struct CustomPlank_C_CanBePutInContainer final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CustomPlank_C_CanBePutInContainer) == 0x000001, "Wrong alignment on CustomPlank_C_CanBePutInContainer");
static_assert(sizeof(CustomPlank_C_CanBePutInContainer) == 0x000001, "Wrong size on CustomPlank_C_CanBePutInContainer");
static_assert(offsetof(CustomPlank_C_CanBePutInContainer, Return) == 0x000000, "Member 'CustomPlank_C_CanBePutInContainer::Return' has a wrong offset!");

// Function customPlank.customPlank_C.asProp
// 0x0008 (0x0008 - 0x0000)
struct CustomPlank_C_AsProp final
{
public:
	class AProp_C*                                Return;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CustomPlank_C_AsProp) == 0x000008, "Wrong alignment on CustomPlank_C_AsProp");
static_assert(sizeof(CustomPlank_C_AsProp) == 0x000008, "Wrong size on CustomPlank_C_AsProp");
static_assert(offsetof(CustomPlank_C_AsProp, Return) == 0x000000, "Member 'CustomPlank_C_AsProp::Return' has a wrong offset!");

// Function customPlank.customPlank_C.canPickup
// 0x0001 (0x0001 - 0x0000)
struct CustomPlank_C_CanPickup final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CustomPlank_C_CanPickup) == 0x000001, "Wrong alignment on CustomPlank_C_CanPickup");
static_assert(sizeof(CustomPlank_C_CanPickup) == 0x000001, "Wrong size on CustomPlank_C_CanPickup");
static_assert(offsetof(CustomPlank_C_CanPickup, Return) == 0x000000, "Member 'CustomPlank_C_CanPickup::Return' has a wrong offset!");

// Function customPlank.customPlank_C.noRespawn
// 0x0002 (0x0002 - 0x0000)
struct CustomPlank_C_NoRespawn final
{
public:
	bool                                          Param_NoRespawn;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CustomPlank_C_NoRespawn) == 0x000001, "Wrong alignment on CustomPlank_C_NoRespawn");
static_assert(sizeof(CustomPlank_C_NoRespawn) == 0x000002, "Wrong size on CustomPlank_C_NoRespawn");
static_assert(offsetof(CustomPlank_C_NoRespawn, Param_NoRespawn) == 0x000000, "Member 'CustomPlank_C_NoRespawn::Param_NoRespawn' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_NoRespawn, Return) == 0x000001, "Member 'CustomPlank_C_NoRespawn::Return' has a wrong offset!");

// Function customPlank.customPlank_C.lookAt
// 0x00B0 (0x00B0 - 0x0000)
struct CustomPlank_C_LookAt final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Param_Hit;                                         // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          Return;                                            // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_17FE[0x7];                                     // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Text;                                              // 0x0098(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    boundObjectReplace;                                // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CustomPlank_C_LookAt) == 0x000008, "Wrong alignment on CustomPlank_C_LookAt");
static_assert(sizeof(CustomPlank_C_LookAt) == 0x0000B0, "Wrong size on CustomPlank_C_LookAt");
static_assert(offsetof(CustomPlank_C_LookAt, Player) == 0x000000, "Member 'CustomPlank_C_LookAt::Player' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_LookAt, Param_Hit) == 0x000008, "Member 'CustomPlank_C_LookAt::Param_Hit' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_LookAt, Return) == 0x000090, "Member 'CustomPlank_C_LookAt::Return' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_LookAt, Text) == 0x000098, "Member 'CustomPlank_C_LookAt::Text' has a wrong offset!");
static_assert(offsetof(CustomPlank_C_LookAt, boundObjectReplace) == 0x0000A8, "Member 'CustomPlank_C_LookAt::boundObjectReplace' has a wrong offset!");

// Function customPlank.customPlank_C.isButtonUsed
// 0x0001 (0x0001 - 0x0000)
struct CustomPlank_C_IsButtonUsed final
{
public:
	bool                                          Failed;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CustomPlank_C_IsButtonUsed) == 0x000001, "Wrong alignment on CustomPlank_C_IsButtonUsed");
static_assert(sizeof(CustomPlank_C_IsButtonUsed) == 0x000001, "Wrong size on CustomPlank_C_IsButtonUsed");
static_assert(offsetof(CustomPlank_C_IsButtonUsed, Failed) == 0x000000, "Member 'CustomPlank_C_IsButtonUsed::Failed' has a wrong offset!");

}

