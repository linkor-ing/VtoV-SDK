#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VelocityStuck

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass velocityStuck.velocityStuck_C
// 0x0050 (0x0100 - 0x00B0)
class UVelocityStuck_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class AActor*                                 Owner;                                             // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Comp;                                              // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AProp_C*                                Prop;                                              // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Vec;                                               // 0x00D0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    Ocomp;                                             // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Oac;                                               // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Thr;                                               // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Abs;                                               // 0x00F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Flip;                                              // 0x00F5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F6[0x2];                                       // 0x00F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Threshold;                                         // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_velocityStuck(int32 EntryPoint);
	void Dd(class AActor* DestroyedActor);
	void Init();
	void Hit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Param_Hit);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"velocityStuck_C">();
	}
	static class UVelocityStuck_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVelocityStuck_C>();
	}
};
static_assert(alignof(UVelocityStuck_C) == 0x000008, "Wrong alignment on UVelocityStuck_C");
static_assert(sizeof(UVelocityStuck_C) == 0x000100, "Wrong size on UVelocityStuck_C");
static_assert(offsetof(UVelocityStuck_C, UberGraphFrame) == 0x0000B0, "Member 'UVelocityStuck_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UVelocityStuck_C, Owner) == 0x0000B8, "Member 'UVelocityStuck_C::Owner' has a wrong offset!");
static_assert(offsetof(UVelocityStuck_C, Comp) == 0x0000C0, "Member 'UVelocityStuck_C::Comp' has a wrong offset!");
static_assert(offsetof(UVelocityStuck_C, Prop) == 0x0000C8, "Member 'UVelocityStuck_C::Prop' has a wrong offset!");
static_assert(offsetof(UVelocityStuck_C, Vec) == 0x0000D0, "Member 'UVelocityStuck_C::Vec' has a wrong offset!");
static_assert(offsetof(UVelocityStuck_C, Ocomp) == 0x0000E0, "Member 'UVelocityStuck_C::Ocomp' has a wrong offset!");
static_assert(offsetof(UVelocityStuck_C, Oac) == 0x0000E8, "Member 'UVelocityStuck_C::Oac' has a wrong offset!");
static_assert(offsetof(UVelocityStuck_C, Thr) == 0x0000F0, "Member 'UVelocityStuck_C::Thr' has a wrong offset!");
static_assert(offsetof(UVelocityStuck_C, Abs) == 0x0000F4, "Member 'UVelocityStuck_C::Abs' has a wrong offset!");
static_assert(offsetof(UVelocityStuck_C, Flip) == 0x0000F5, "Member 'UVelocityStuck_C::Flip' has a wrong offset!");
static_assert(offsetof(UVelocityStuck_C, Threshold) == 0x0000F8, "Member 'UVelocityStuck_C::Threshold' has a wrong offset!");

}

