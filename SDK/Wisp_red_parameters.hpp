#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Wisp_red

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Enum_interactionActions_structs.hpp"
#include "Engine_structs.hpp"
#include "InputCore_structs.hpp"
#include "AIModule_structs.hpp"


namespace SDK::Params
{

// Function wisp_red.wisp_red_C.ExecuteUbergraph_wisp_red
// 0x0A30 (0x0A30 - 0x0000)
struct Wisp_red_C_ExecuteUbergraph_wisp_red final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPathFollowingResult                          K2Node_CustomEvent_MovementResult_1;               // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EPathFollowingResult MovementResult)> K2Node_CreateDelegate_OutputDelegate;              // 0x0018(0x0010)(ZeroConstructor, NoDestructor)
	EPathFollowingResult                          K2Node_CustomEvent_MovementResult;                 // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EPathFollowingResult MovementResult)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x002C(0x0010)(ZeroConstructor, NoDestructor)
	EPathFollowingResult                          Temp_byte_Variable;                                // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0040(0x0010)(ConstParm, ReferenceParm)
	float                                         K2Node_Event_damage_5;                             // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hot;                                  // 0x0054(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_12;                            // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_5;                                // 0x00E8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	Enum_interactionActions                       K2Node_Event_action;                               // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_11;                            // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_10;                            // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_4;                             // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_location_1;                           // 0x018C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_9;                             // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_8;                             // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_7;                             // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_wheelDelta;                           // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B4[0x4];                                      // 0x01B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_6;                             // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Event_mouse;                                // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_5;                             // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_Event_key_1;                                // 0x01D0(0x0018)(HasGetValueTypeHash)
	bool                                          K2Node_Event_pressed;                              // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E9[0x3];                                      // 0x01E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_temperature_1;                        // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_temperature;                          // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_speed;                                // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_4;                             // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_4;                                // 0x0200(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class FString                                 K2Node_Event_name;                                 // 0x0288(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         K2Node_Event_volume;                               // 0x0298(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29C[0x4];                                      // 0x029C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_3;                             // 0x02A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_location;                             // 0x02A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_3;                             // 0x02B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_clean_1;                              // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B9[0x7];                                      // 0x02B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_2;                             // 0x02C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_3;                                // 0x02C8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AHook_C*                                K2Node_Event_hook_1;                               // 0x0350(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_clean;                                // 0x0358(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35C[0x4];                                      // 0x035C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_1;                             // 0x0360(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHook_C*                                K2Node_Event_hook;                                 // 0x0368(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Condition;                      // 0x0370(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_371[0x3];                                      // 0x0371(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0374(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0378(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VInterpTo_ReturnValue;                    // 0x037C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0388(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0410(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_411[0x3];                                      // 0x0411(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Ease_ReturnValue;                         // 0x0414(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue;  // 0x0418(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x041C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_1;                       // 0x0420(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_PerlinNoise1D_ReturnValue;                // 0x0424(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue_1;       // 0x0428(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_2;                       // 0x042C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0430(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0434(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VictoryFloatPlusEquals_FloatOut;          // 0x0438(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x043C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x0448(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult_1;  // 0x044C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         K2Node_Event_fuel;                                 // 0x04D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_2;                             // 0x04D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4DC[0x4];                                      // 0x04DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player;                               // 0x04E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_2;                                // 0x04E8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode;          // 0x0570(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 K2Node_Event_key;                                  // 0x0578(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0588(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_589[0x7];                                      // 0x0589(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_actor_1;                              // 0x0590(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_1;                             // 0x0598(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_1;                                // 0x059C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                K2Node_Event_impact_1;                             // 0x0624(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_skipSetting;                          // 0x0630(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0631(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_632[0x6];                                      // 0x0632(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_1;  // 0x0638(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_1;           // 0x0640(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_1;            // 0x0648(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_1;       // 0x0650(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep_1;           // 0x0654(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_655[0x3];                                      // 0x0655(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult_1;          // 0x0658(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x06E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_static;                               // 0x06E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_frozen;                               // 0x06E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_active;                               // 0x06E3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x06E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x06F0(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0720(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AExplosion_C*                           CallFunc_FinishSpawningActor_ReturnValue;          // 0x0728(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RandomBoolWithWeight_ReturnValue;         // 0x0730(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_WasRecentlyRendered_ReturnValue;          // 0x0731(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_732[0x6];                                      // 0x0732(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AWaterVolume_C*                         K2Node_Event_water_3;                              // 0x0738(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0740(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0741(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_activate;                             // 0x0742(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_743[0x5];                                      // 0x0743(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AWaterVolume_C*                         K2Node_Event_water_2;                              // 0x0748(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWaterVolume_C*                         K2Node_Event_water_1;                              // 0x0750(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0758(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0760(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0768(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0770(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x0774(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_775[0x3];                                      // 0x0775(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0778(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class ADoor_C*                                K2Node_DynamicCast_AsDoor;                         // 0x0800(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0808(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_809[0x7];                                      // 0x0809(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AWaterVolume_C*                         K2Node_Event_water;                                // 0x0810(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage;                               // 0x0818(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit;                                  // 0x081C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_8A4[0x4];                                      // 0x08A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_actor;                                // 0x08A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_impact;                               // 0x08B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_2;         // 0x08BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x08C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x08CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      CallFunc_obj_static_obj;                           // 0x08D8(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x08E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x08F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0900(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x090C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x0994(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0995(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0996(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_997[0x1];                                      // 0x0997(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0998(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x099C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x09A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x09AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x09B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x09C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x09D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x09D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x09E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x09E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x09F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x09F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x09F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x09FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0A08(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x0A14(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAIAsyncTaskBlueprintProxy*             CallFunc_CreateMoveToProxyObject_ReturnValue;      // 0x0A20(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0A28(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wisp_red_C_ExecuteUbergraph_wisp_red) == 0x000010, "Wrong alignment on Wisp_red_C_ExecuteUbergraph_wisp_red");
static_assert(sizeof(Wisp_red_C_ExecuteUbergraph_wisp_red) == 0x000A30, "Wrong size on Wisp_red_C_ExecuteUbergraph_wisp_red");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, EntryPoint) == 0x000000, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::EntryPoint' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_RandomFloatInRange_ReturnValue) == 0x000004, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_MakeVector_ReturnValue) == 0x000008, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_CustomEvent_MovementResult_1) == 0x000014, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_CustomEvent_MovementResult_1' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_CreateDelegate_OutputDelegate) == 0x000018, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_CustomEvent_MovementResult) == 0x000028, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_CustomEvent_MovementResult' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_CreateDelegate_OutputDelegate_1) == 0x00002C, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, Temp_byte_Variable) == 0x00003C, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, Temp_object_Variable) == 0x000040, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_damage_5) == 0x000050, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_damage_5' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_hot) == 0x000054, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_hot' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_player_12) == 0x0000E0, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_player_12' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_hit_5) == 0x0000E8, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_hit_5' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_action) == 0x000170, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_action' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_player_11) == 0x000178, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_player_11' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_player_10) == 0x000180, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_player_10' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_damage_4) == 0x000188, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_damage_4' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_location_1) == 0x00018C, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_location_1' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_player_9) == 0x000198, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_player_9' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_player_8) == 0x0001A0, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_player_8' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_player_7) == 0x0001A8, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_player_7' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_wheelDelta) == 0x0001B0, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_wheelDelta' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_player_6) == 0x0001B8, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_player_6' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_mouse) == 0x0001C0, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_mouse' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_player_5) == 0x0001C8, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_player_5' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_key_1) == 0x0001D0, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_key_1' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_pressed) == 0x0001E8, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_pressed' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_temperature_1) == 0x0001EC, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_temperature_1' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_temperature) == 0x0001F0, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_temperature' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_speed) == 0x0001F4, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_speed' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_player_4) == 0x0001F8, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_player_4' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_hit_4) == 0x000200, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_hit_4' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_name) == 0x000288, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_name' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_volume) == 0x000298, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_volume' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_player_3) == 0x0002A0, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_player_3' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_location) == 0x0002A8, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_location' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_damage_3) == 0x0002B4, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_damage_3' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_clean_1) == 0x0002B8, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_clean_1' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_player_2) == 0x0002C0, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_player_2' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_hit_3) == 0x0002C8, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_hit_3' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_hook_1) == 0x000350, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_hook_1' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_clean) == 0x000358, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_clean' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_player_1) == 0x000360, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_player_1' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_hook) == 0x000368, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_hook' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_CustomEvent_Condition) == 0x000370, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_CustomEvent_Condition' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_DeltaSeconds) == 0x000374, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000378, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_VInterpTo_ReturnValue) == 0x00037C, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_VInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000388, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_SwitchEnum_CmpSuccess) == 0x000410, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_Ease_ReturnValue) == 0x000414, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue) == 0x000418, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_Lerp_ReturnValue) == 0x00041C, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_Lerp_ReturnValue_1) == 0x000420, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_PerlinNoise1D_ReturnValue) == 0x000424, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_PerlinNoise1D_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_GetWorldDeltaSeconds_ReturnValue_1) == 0x000428, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_GetWorldDeltaSeconds_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_Lerp_ReturnValue_2) == 0x00042C, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_Lerp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000430, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_Add_FloatFloat_ReturnValue) == 0x000434, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_VictoryFloatPlusEquals_FloatOut) == 0x000438, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_VictoryFloatPlusEquals_FloatOut' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_MakeVector_ReturnValue_1) == 0x00043C, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x000448, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_K2_SetRelativeLocation_SweepHitResult_1) == 0x00044C, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_K2_SetRelativeLocation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_fuel) == 0x0004D4, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_fuel' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_damage_2) == 0x0004D8, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_damage_2' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_player) == 0x0004E0, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_player' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_hit_2) == 0x0004E8, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_hit_2' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_getMainGamemode_AsMain_Gamemode) == 0x000570, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_getMainGamemode_AsMain_Gamemode' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_key) == 0x000578, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_key' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000588, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_actor_1) == 0x000590, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_actor_1' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_damage_1) == 0x000598, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_damage_1' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_hit_1) == 0x00059C, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_hit_1' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_impact_1) == 0x000624, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_impact_1' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_skipSetting) == 0x000630, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_skipSetting' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_Not_PreBool_ReturnValue) == 0x000631, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_ComponentBoundEvent_OverlappedComponent_1) == 0x000638, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_ComponentBoundEvent_OverlappedComponent_1' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_ComponentBoundEvent_OtherActor_1) == 0x000640, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_ComponentBoundEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_ComponentBoundEvent_OtherComp_1) == 0x000648, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_ComponentBoundEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_ComponentBoundEvent_OtherBodyIndex_1) == 0x000650, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_ComponentBoundEvent_OtherBodyIndex_1' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_ComponentBoundEvent_bFromSweep_1) == 0x000654, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_ComponentBoundEvent_bFromSweep_1' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_ComponentBoundEvent_SweepResult_1) == 0x000658, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_ComponentBoundEvent_SweepResult_1' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_BooleanOR_ReturnValue) == 0x0006E0, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_static) == 0x0006E1, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_static' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_frozen) == 0x0006E2, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_frozen' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_active) == 0x0006E3, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_active' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x0006E4, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_MakeTransform_ReturnValue) == 0x0006F0, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000720, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_FinishSpawningActor_ReturnValue) == 0x000728, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_RandomBoolWithWeight_ReturnValue) == 0x000730, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_RandomBoolWithWeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_WasRecentlyRendered_ReturnValue) == 0x000731, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_WasRecentlyRendered_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_water_3) == 0x000738, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_water_3' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_Not_PreBool_ReturnValue_1) == 0x000740, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_BooleanAND_ReturnValue) == 0x000741, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_activate) == 0x000742, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_activate' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_water_2) == 0x000748, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_water_2' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_water_1) == 0x000750, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_water_1' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000758, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_ComponentBoundEvent_OtherActor) == 0x000760, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_ComponentBoundEvent_OtherComp) == 0x000768, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000770, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_ComponentBoundEvent_bFromSweep) == 0x000774, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_ComponentBoundEvent_SweepResult) == 0x000778, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_DynamicCast_AsDoor) == 0x000800, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_DynamicCast_AsDoor' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_DynamicCast_bSuccess) == 0x000808, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_water) == 0x000810, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_water' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_damage) == 0x000818, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_damage' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_hit) == 0x00081C, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_hit' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_actor) == 0x0008A8, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_actor' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, K2Node_Event_impact) == 0x0008B0, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::K2Node_Event_impact' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_RandomFloatInRange_ReturnValue_2) == 0x0008BC, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_RandomFloatInRange_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_RotateAngleAxis_ReturnValue) == 0x0008C0, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0008CC, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_obj_static_obj) == 0x0008D8, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_obj_static_obj' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_Add_VectorVector_ReturnValue) == 0x0008E8, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0008F4, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000900, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_LineTraceSingleForObjects_OutHit) == 0x00090C, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x000994, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_BreakHitResult_bBlockingHit) == 0x000995, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_BreakHitResult_bInitialOverlap) == 0x000996, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_BreakHitResult_Time) == 0x000998, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_BreakHitResult_Distance) == 0x00099C, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_BreakHitResult_Location) == 0x0009A0, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_BreakHitResult_ImpactPoint) == 0x0009AC, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_BreakHitResult_Normal) == 0x0009B8, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_BreakHitResult_ImpactNormal) == 0x0009C4, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_BreakHitResult_PhysMat) == 0x0009D0, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_BreakHitResult_HitActor) == 0x0009D8, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_BreakHitResult_HitComponent) == 0x0009E0, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_BreakHitResult_HitBoneName) == 0x0009E8, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_BreakHitResult_HitItem) == 0x0009F0, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_BreakHitResult_ElementIndex) == 0x0009F4, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_BreakHitResult_FaceIndex) == 0x0009F8, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_BreakHitResult_TraceStart) == 0x0009FC, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_BreakHitResult_TraceEnd) == 0x000A08, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_Add_VectorVector_ReturnValue_2) == 0x000A14, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_CreateMoveToProxyObject_ReturnValue) == 0x000A20, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_CreateMoveToProxyObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ExecuteUbergraph_wisp_red, CallFunc_IsValid_ReturnValue) == 0x000A28, "Member 'Wisp_red_C_ExecuteUbergraph_wisp_red::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function wisp_red.wisp_red_C.ImpactDamage
// 0x00A8 (0x00A8 - 0x0000)
struct Wisp_red_C_ImpactDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0004(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0090(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Impact;                                            // 0x0098(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_red_C_ImpactDamage) == 0x000008, "Wrong alignment on Wisp_red_C_ImpactDamage");
static_assert(sizeof(Wisp_red_C_ImpactDamage) == 0x0000A8, "Wrong size on Wisp_red_C_ImpactDamage");
static_assert(offsetof(Wisp_red_C_ImpactDamage, Damage) == 0x000000, "Member 'Wisp_red_C_ImpactDamage::Damage' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ImpactDamage, Hit) == 0x000004, "Member 'Wisp_red_C_ImpactDamage::Hit' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ImpactDamage, Actor) == 0x000090, "Member 'Wisp_red_C_ImpactDamage::Actor' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ImpactDamage, Impact) == 0x000098, "Member 'Wisp_red_C_ImpactDamage::Impact' has a wrong offset!");

// Function wisp_red.wisp_red_C.leaveWater
// 0x0008 (0x0008 - 0x0000)
struct Wisp_red_C_LeaveWater final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_red_C_LeaveWater) == 0x000008, "Wrong alignment on Wisp_red_C_LeaveWater");
static_assert(sizeof(Wisp_red_C_LeaveWater) == 0x000008, "Wrong size on Wisp_red_C_LeaveWater");
static_assert(offsetof(Wisp_red_C_LeaveWater, Water) == 0x000000, "Member 'Wisp_red_C_LeaveWater::Water' has a wrong offset!");

// Function wisp_red.wisp_red_C.BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct Wisp_red_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Wisp_red_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on Wisp_red_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(Wisp_red_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on Wisp_red_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(Wisp_red_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'Wisp_red_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'Wisp_red_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'Wisp_red_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'Wisp_red_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'Wisp_red_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'Wisp_red_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function wisp_red.wisp_red_C.enterWaterOrigin
// 0x0008 (0x0008 - 0x0000)
struct Wisp_red_C_EnterWaterOrigin final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_red_C_EnterWaterOrigin) == 0x000008, "Wrong alignment on Wisp_red_C_EnterWaterOrigin");
static_assert(sizeof(Wisp_red_C_EnterWaterOrigin) == 0x000008, "Wrong size on Wisp_red_C_EnterWaterOrigin");
static_assert(offsetof(Wisp_red_C_EnterWaterOrigin, Water) == 0x000000, "Member 'Wisp_red_C_EnterWaterOrigin::Water' has a wrong offset!");

// Function wisp_red.wisp_red_C.leaveWaterOrigin
// 0x0008 (0x0008 - 0x0000)
struct Wisp_red_C_LeaveWaterOrigin final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_red_C_LeaveWaterOrigin) == 0x000008, "Wrong alignment on Wisp_red_C_LeaveWaterOrigin");
static_assert(sizeof(Wisp_red_C_LeaveWaterOrigin) == 0x000008, "Wrong size on Wisp_red_C_LeaveWaterOrigin");
static_assert(offsetof(Wisp_red_C_LeaveWaterOrigin, Water) == 0x000000, "Member 'Wisp_red_C_LeaveWaterOrigin::Water' has a wrong offset!");

// Function wisp_red.wisp_red_C.virus
// 0x0001 (0x0001 - 0x0000)
struct Wisp_red_C_Virus final
{
public:
	bool                                          Activate;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wisp_red_C_Virus) == 0x000001, "Wrong alignment on Wisp_red_C_Virus");
static_assert(sizeof(Wisp_red_C_Virus) == 0x000001, "Wrong size on Wisp_red_C_Virus");
static_assert(offsetof(Wisp_red_C_Virus, Activate) == 0x000000, "Member 'Wisp_red_C_Virus::Activate' has a wrong offset!");

// Function wisp_red.wisp_red_C.enterWater
// 0x0008 (0x0008 - 0x0000)
struct Wisp_red_C_EnterWater final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_red_C_EnterWater) == 0x000008, "Wrong alignment on Wisp_red_C_EnterWater");
static_assert(sizeof(Wisp_red_C_EnterWater) == 0x000008, "Wrong size on Wisp_red_C_EnterWater");
static_assert(offsetof(Wisp_red_C_EnterWater, Water) == 0x000000, "Member 'Wisp_red_C_EnterWater::Water' has a wrong offset!");

// Function wisp_red.wisp_red_C.setPropProps
// 0x0003 (0x0003 - 0x0000)
struct Wisp_red_C_SetPropProps final
{
public:
	bool                                          Static;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Frozen;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Active;                                            // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wisp_red_C_SetPropProps) == 0x000001, "Wrong alignment on Wisp_red_C_SetPropProps");
static_assert(sizeof(Wisp_red_C_SetPropProps) == 0x000003, "Wrong size on Wisp_red_C_SetPropProps");
static_assert(offsetof(Wisp_red_C_SetPropProps, Static) == 0x000000, "Member 'Wisp_red_C_SetPropProps::Static' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_SetPropProps, Frozen) == 0x000001, "Member 'Wisp_red_C_SetPropProps::Frozen' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_SetPropProps, Active) == 0x000002, "Member 'Wisp_red_C_SetPropProps::Active' has a wrong offset!");

// Function wisp_red.wisp_red_C.BndEvt__wisp_red_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct Wisp_red_C_BndEvt__wisp_red_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Wisp_red_C_BndEvt__wisp_red_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on Wisp_red_C_BndEvt__wisp_red_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(Wisp_red_C_BndEvt__wisp_red_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on Wisp_red_C_BndEvt__wisp_red_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(Wisp_red_C_BndEvt__wisp_red_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'Wisp_red_C_BndEvt__wisp_red_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_BndEvt__wisp_red_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'Wisp_red_C_BndEvt__wisp_red_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_BndEvt__wisp_red_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'Wisp_red_C_BndEvt__wisp_red_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_BndEvt__wisp_red_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'Wisp_red_C_BndEvt__wisp_red_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_BndEvt__wisp_red_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'Wisp_red_C_BndEvt__wisp_red_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_BndEvt__wisp_red_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'Wisp_red_C_BndEvt__wisp_red_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function wisp_red.wisp_red_C.addDamage
// 0x00A8 (0x00A8 - 0x0000)
struct Wisp_red_C_AddDamage final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x000C(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                Impact;                                            // 0x0094(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipSetting;                                       // 0x00A0(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wisp_red_C_AddDamage) == 0x000008, "Wrong alignment on Wisp_red_C_AddDamage");
static_assert(sizeof(Wisp_red_C_AddDamage) == 0x0000A8, "Wrong size on Wisp_red_C_AddDamage");
static_assert(offsetof(Wisp_red_C_AddDamage, Actor) == 0x000000, "Member 'Wisp_red_C_AddDamage::Actor' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_AddDamage, Damage) == 0x000008, "Member 'Wisp_red_C_AddDamage::Damage' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_AddDamage, Hit) == 0x00000C, "Member 'Wisp_red_C_AddDamage::Hit' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_AddDamage, Impact) == 0x000094, "Member 'Wisp_red_C_AddDamage::Impact' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_AddDamage, SkipSetting) == 0x0000A0, "Member 'Wisp_red_C_AddDamage::SkipSetting' has a wrong offset!");

// Function wisp_red.wisp_red_C.setKey
// 0x0010 (0x0010 - 0x0000)
struct Wisp_red_C_SetKey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_red_C_SetKey) == 0x000008, "Wrong alignment on Wisp_red_C_SetKey");
static_assert(sizeof(Wisp_red_C_SetKey) == 0x000010, "Wrong size on Wisp_red_C_SetKey");
static_assert(offsetof(Wisp_red_C_SetKey, Key) == 0x000000, "Member 'Wisp_red_C_SetKey::Key' has a wrong offset!");

// Function wisp_red.wisp_red_C.steppedOn
// 0x0090 (0x0090 - 0x0000)
struct Wisp_red_C_SteppedOn final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Wisp_red_C_SteppedOn) == 0x000008, "Wrong alignment on Wisp_red_C_SteppedOn");
static_assert(sizeof(Wisp_red_C_SteppedOn) == 0x000090, "Wrong size on Wisp_red_C_SteppedOn");
static_assert(offsetof(Wisp_red_C_SteppedOn, Player) == 0x000000, "Member 'Wisp_red_C_SteppedOn::Player' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_SteppedOn, Hit) == 0x000008, "Member 'Wisp_red_C_SteppedOn::Hit' has a wrong offset!");

// Function wisp_red.wisp_red_C.fireDamage
// 0x0004 (0x0004 - 0x0000)
struct Wisp_red_C_FireDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_red_C_FireDamage) == 0x000004, "Wrong alignment on Wisp_red_C_FireDamage");
static_assert(sizeof(Wisp_red_C_FireDamage) == 0x000004, "Wrong size on Wisp_red_C_FireDamage");
static_assert(offsetof(Wisp_red_C_FireDamage, Damage) == 0x000000, "Member 'Wisp_red_C_FireDamage::Damage' has a wrong offset!");

// Function wisp_red.wisp_red_C.ignite
// 0x0004 (0x0004 - 0x0000)
struct Wisp_red_C_Ignite final
{
public:
	float                                         Fuel;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_red_C_Ignite) == 0x000004, "Wrong alignment on Wisp_red_C_Ignite");
static_assert(sizeof(Wisp_red_C_Ignite) == 0x000004, "Wrong size on Wisp_red_C_Ignite");
static_assert(offsetof(Wisp_red_C_Ignite, Fuel) == 0x000000, "Member 'Wisp_red_C_Ignite::Fuel' has a wrong offset!");

// Function wisp_red.wisp_red_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct Wisp_red_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_red_C_ReceiveTick) == 0x000004, "Wrong alignment on Wisp_red_C_ReceiveTick");
static_assert(sizeof(Wisp_red_C_ReceiveTick) == 0x000004, "Wrong size on Wisp_red_C_ReceiveTick");
static_assert(offsetof(Wisp_red_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'Wisp_red_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function wisp_red.wisp_red_C.dir
// 0x0001 (0x0001 - 0x0000)
struct Wisp_red_C_Dir final
{
public:
	bool                                          Condition;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wisp_red_C_Dir) == 0x000001, "Wrong alignment on Wisp_red_C_Dir");
static_assert(sizeof(Wisp_red_C_Dir) == 0x000001, "Wrong size on Wisp_red_C_Dir");
static_assert(offsetof(Wisp_red_C_Dir, Condition) == 0x000000, "Member 'Wisp_red_C_Dir::Condition' has a wrong offset!");

// Function wisp_red.wisp_red_C.hookTension
// 0x0008 (0x0008 - 0x0000)
struct Wisp_red_C_HookTension final
{
public:
	class AHook_C*                                Hook;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_red_C_HookTension) == 0x000008, "Wrong alignment on Wisp_red_C_HookTension");
static_assert(sizeof(Wisp_red_C_HookTension) == 0x000008, "Wrong size on Wisp_red_C_HookTension");
static_assert(offsetof(Wisp_red_C_HookTension, Hook) == 0x000000, "Member 'Wisp_red_C_HookTension::Hook' has a wrong offset!");

// Function wisp_red.wisp_red_C.cleanSponge
// 0x0010 (0x0010 - 0x0000)
struct Wisp_red_C_CleanSponge final
{
public:
	float                                         Clean;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          Player;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_red_C_CleanSponge) == 0x000008, "Wrong alignment on Wisp_red_C_CleanSponge");
static_assert(sizeof(Wisp_red_C_CleanSponge) == 0x000010, "Wrong size on Wisp_red_C_CleanSponge");
static_assert(offsetof(Wisp_red_C_CleanSponge, Clean) == 0x000000, "Member 'Wisp_red_C_CleanSponge::Clean' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_CleanSponge, Player) == 0x000008, "Member 'Wisp_red_C_CleanSponge::Player' has a wrong offset!");

// Function wisp_red.wisp_red_C.hooked
// 0x0008 (0x0008 - 0x0000)
struct Wisp_red_C_Hooked final
{
public:
	class AHook_C*                                Hook;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_red_C_Hooked) == 0x000008, "Wrong alignment on Wisp_red_C_Hooked");
static_assert(sizeof(Wisp_red_C_Hooked) == 0x000008, "Wrong size on Wisp_red_C_Hooked");
static_assert(offsetof(Wisp_red_C_Hooked, Hook) == 0x000000, "Member 'Wisp_red_C_Hooked::Hook' has a wrong offset!");

// Function wisp_red.wisp_red_C.playerUsedOn
// 0x0090 (0x0090 - 0x0000)
struct Wisp_red_C_PlayerUsedOn final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Wisp_red_C_PlayerUsedOn) == 0x000008, "Wrong alignment on Wisp_red_C_PlayerUsedOn");
static_assert(sizeof(Wisp_red_C_PlayerUsedOn) == 0x000090, "Wrong size on Wisp_red_C_PlayerUsedOn");
static_assert(offsetof(Wisp_red_C_PlayerUsedOn, Player) == 0x000000, "Member 'Wisp_red_C_PlayerUsedOn::Player' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_PlayerUsedOn, Hit) == 0x000008, "Member 'Wisp_red_C_PlayerUsedOn::Hit' has a wrong offset!");

// Function wisp_red.wisp_red_C.slice
// 0x0001 (0x0001 - 0x0000)
struct Wisp_red_C_Slice final
{
public:
	bool                                          Clean;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wisp_red_C_Slice) == 0x000001, "Wrong alignment on Wisp_red_C_Slice");
static_assert(sizeof(Wisp_red_C_Slice) == 0x000001, "Wrong size on Wisp_red_C_Slice");
static_assert(offsetof(Wisp_red_C_Slice, Clean) == 0x000000, "Member 'Wisp_red_C_Slice::Clean' has a wrong offset!");

// Function wisp_red.wisp_red_C.reachedByExplosion
// 0x0010 (0x0010 - 0x0000)
struct Wisp_red_C_ReachedByExplosion final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_red_C_ReachedByExplosion) == 0x000004, "Wrong alignment on Wisp_red_C_ReachedByExplosion");
static_assert(sizeof(Wisp_red_C_ReachedByExplosion) == 0x000010, "Wrong size on Wisp_red_C_ReachedByExplosion");
static_assert(offsetof(Wisp_red_C_ReachedByExplosion, Location) == 0x000000, "Member 'Wisp_red_C_ReachedByExplosion::Location' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ReachedByExplosion, Damage) == 0x00000C, "Member 'Wisp_red_C_ReachedByExplosion::Damage' has a wrong offset!");

// Function wisp_red.wisp_red_C.playerLookAway
// 0x0008 (0x0008 - 0x0000)
struct Wisp_red_C_PlayerLookAway final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_red_C_PlayerLookAway) == 0x000008, "Wrong alignment on Wisp_red_C_PlayerLookAway");
static_assert(sizeof(Wisp_red_C_PlayerLookAway) == 0x000008, "Wrong size on Wisp_red_C_PlayerLookAway");
static_assert(offsetof(Wisp_red_C_PlayerLookAway, Player) == 0x000000, "Member 'Wisp_red_C_PlayerLookAway::Player' has a wrong offset!");

// Function wisp_red.wisp_red_C.stepped
// 0x0004 (0x0004 - 0x0000)
struct Wisp_red_C_Stepped final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_red_C_Stepped) == 0x000004, "Wrong alignment on Wisp_red_C_Stepped");
static_assert(sizeof(Wisp_red_C_Stepped) == 0x000004, "Wrong size on Wisp_red_C_Stepped");
static_assert(offsetof(Wisp_red_C_Stepped, Volume) == 0x000000, "Member 'Wisp_red_C_Stepped::Volume' has a wrong offset!");

// Function wisp_red.wisp_red_C.ActionName
// 0x00A0 (0x00A0 - 0x0000)
struct Wisp_red_C_ActionName final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class FString                                 Param_Name;                                        // 0x0090(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_red_C_ActionName) == 0x000008, "Wrong alignment on Wisp_red_C_ActionName");
static_assert(sizeof(Wisp_red_C_ActionName) == 0x0000A0, "Wrong size on Wisp_red_C_ActionName");
static_assert(offsetof(Wisp_red_C_ActionName, Player) == 0x000000, "Member 'Wisp_red_C_ActionName::Player' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ActionName, Hit) == 0x000008, "Member 'Wisp_red_C_ActionName::Hit' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ActionName, Param_Name) == 0x000090, "Member 'Wisp_red_C_ActionName::Param_Name' has a wrong offset!");

// Function wisp_red.wisp_red_C.accumulateTemperature
// 0x0008 (0x0008 - 0x0000)
struct Wisp_red_C_AccumulateTemperature final
{
public:
	float                                         Temperature;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_red_C_AccumulateTemperature) == 0x000004, "Wrong alignment on Wisp_red_C_AccumulateTemperature");
static_assert(sizeof(Wisp_red_C_AccumulateTemperature) == 0x000008, "Wrong size on Wisp_red_C_AccumulateTemperature");
static_assert(offsetof(Wisp_red_C_AccumulateTemperature, Temperature) == 0x000000, "Member 'Wisp_red_C_AccumulateTemperature::Temperature' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_AccumulateTemperature, Speed) == 0x000004, "Member 'Wisp_red_C_AccumulateTemperature::Speed' has a wrong offset!");

// Function wisp_red.wisp_red_C.addTemperature
// 0x0004 (0x0004 - 0x0000)
struct Wisp_red_C_AddTemperature final
{
public:
	float                                         Temperature;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_red_C_AddTemperature) == 0x000004, "Wrong alignment on Wisp_red_C_AddTemperature");
static_assert(sizeof(Wisp_red_C_AddTemperature) == 0x000004, "Wrong size on Wisp_red_C_AddTemperature");
static_assert(offsetof(Wisp_red_C_AddTemperature, Temperature) == 0x000000, "Member 'Wisp_red_C_AddTemperature::Temperature' has a wrong offset!");

// Function wisp_red.wisp_red_C.playerHandAnyKey
// 0x0028 (0x0028 - 0x0000)
struct Wisp_red_C_PlayerHandAnyKey final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   Key;                                               // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Pressed;                                           // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wisp_red_C_PlayerHandAnyKey) == 0x000008, "Wrong alignment on Wisp_red_C_PlayerHandAnyKey");
static_assert(sizeof(Wisp_red_C_PlayerHandAnyKey) == 0x000028, "Wrong size on Wisp_red_C_PlayerHandAnyKey");
static_assert(offsetof(Wisp_red_C_PlayerHandAnyKey, Player) == 0x000000, "Member 'Wisp_red_C_PlayerHandAnyKey::Player' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_PlayerHandAnyKey, Key) == 0x000008, "Member 'Wisp_red_C_PlayerHandAnyKey::Key' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_PlayerHandAnyKey, Pressed) == 0x000020, "Member 'Wisp_red_C_PlayerHandAnyKey::Pressed' has a wrong offset!");

// Function wisp_red.wisp_red_C.playerHandMouse
// 0x0010 (0x0010 - 0x0000)
struct Wisp_red_C_PlayerHandMouse final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Mouse;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_red_C_PlayerHandMouse) == 0x000008, "Wrong alignment on Wisp_red_C_PlayerHandMouse");
static_assert(sizeof(Wisp_red_C_PlayerHandMouse) == 0x000010, "Wrong size on Wisp_red_C_PlayerHandMouse");
static_assert(offsetof(Wisp_red_C_PlayerHandMouse, Player) == 0x000000, "Member 'Wisp_red_C_PlayerHandMouse::Player' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_PlayerHandMouse, Mouse) == 0x000008, "Member 'Wisp_red_C_PlayerHandMouse::Mouse' has a wrong offset!");

// Function wisp_red.wisp_red_C.playerHandMouseWheel
// 0x0010 (0x0010 - 0x0000)
struct Wisp_red_C_PlayerHandMouseWheel final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WheelDelta;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_red_C_PlayerHandMouseWheel) == 0x000008, "Wrong alignment on Wisp_red_C_PlayerHandMouseWheel");
static_assert(sizeof(Wisp_red_C_PlayerHandMouseWheel) == 0x000010, "Wrong size on Wisp_red_C_PlayerHandMouseWheel");
static_assert(offsetof(Wisp_red_C_PlayerHandMouseWheel, Player) == 0x000000, "Member 'Wisp_red_C_PlayerHandMouseWheel::Player' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_PlayerHandMouseWheel, WheelDelta) == 0x000008, "Member 'Wisp_red_C_PlayerHandMouseWheel::WheelDelta' has a wrong offset!");

// Function wisp_red.wisp_red_C.playerHandRelease_LMB
// 0x0008 (0x0008 - 0x0000)
struct Wisp_red_C_PlayerHandRelease_LMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_red_C_PlayerHandRelease_LMB) == 0x000008, "Wrong alignment on Wisp_red_C_PlayerHandRelease_LMB");
static_assert(sizeof(Wisp_red_C_PlayerHandRelease_LMB) == 0x000008, "Wrong size on Wisp_red_C_PlayerHandRelease_LMB");
static_assert(offsetof(Wisp_red_C_PlayerHandRelease_LMB, Player) == 0x000000, "Member 'Wisp_red_C_PlayerHandRelease_LMB::Player' has a wrong offset!");

// Function wisp_red.wisp_red_C.playerHandRelease_RMB
// 0x0008 (0x0008 - 0x0000)
struct Wisp_red_C_PlayerHandRelease_RMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_red_C_PlayerHandRelease_RMB) == 0x000008, "Wrong alignment on Wisp_red_C_PlayerHandRelease_RMB");
static_assert(sizeof(Wisp_red_C_PlayerHandRelease_RMB) == 0x000008, "Wrong size on Wisp_red_C_PlayerHandRelease_RMB");
static_assert(offsetof(Wisp_red_C_PlayerHandRelease_RMB, Player) == 0x000000, "Member 'Wisp_red_C_PlayerHandRelease_RMB::Player' has a wrong offset!");

// Function wisp_red.wisp_red_C.exploded
// 0x0010 (0x0010 - 0x0000)
struct Wisp_red_C_Exploded final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_red_C_Exploded) == 0x000004, "Wrong alignment on Wisp_red_C_Exploded");
static_assert(sizeof(Wisp_red_C_Exploded) == 0x000010, "Wrong size on Wisp_red_C_Exploded");
static_assert(offsetof(Wisp_red_C_Exploded, Damage) == 0x000000, "Member 'Wisp_red_C_Exploded::Damage' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_Exploded, Location) == 0x000004, "Member 'Wisp_red_C_Exploded::Location' has a wrong offset!");

// Function wisp_red.wisp_red_C.playerHandUse_LMB
// 0x0008 (0x0008 - 0x0000)
struct Wisp_red_C_PlayerHandUse_LMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_red_C_PlayerHandUse_LMB) == 0x000008, "Wrong alignment on Wisp_red_C_PlayerHandUse_LMB");
static_assert(sizeof(Wisp_red_C_PlayerHandUse_LMB) == 0x000008, "Wrong size on Wisp_red_C_PlayerHandUse_LMB");
static_assert(offsetof(Wisp_red_C_PlayerHandUse_LMB, Player) == 0x000000, "Member 'Wisp_red_C_PlayerHandUse_LMB::Player' has a wrong offset!");

// Function wisp_red.wisp_red_C.playerHandUse_RMB
// 0x0008 (0x0008 - 0x0000)
struct Wisp_red_C_PlayerHandUse_RMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_red_C_PlayerHandUse_RMB) == 0x000008, "Wrong alignment on Wisp_red_C_PlayerHandUse_RMB");
static_assert(sizeof(Wisp_red_C_PlayerHandUse_RMB) == 0x000008, "Wrong size on Wisp_red_C_PlayerHandUse_RMB");
static_assert(offsetof(Wisp_red_C_PlayerHandUse_RMB, Player) == 0x000000, "Member 'Wisp_red_C_PlayerHandUse_RMB::Player' has a wrong offset!");

// Function wisp_red.wisp_red_C.actionOptionIndex
// 0x0098 (0x0098 - 0x0000)
struct Wisp_red_C_ActionOptionIndex final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	Enum_interactionActions                       Action;                                            // 0x0090(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_red_C_ActionOptionIndex) == 0x000008, "Wrong alignment on Wisp_red_C_ActionOptionIndex");
static_assert(sizeof(Wisp_red_C_ActionOptionIndex) == 0x000098, "Wrong size on Wisp_red_C_ActionOptionIndex");
static_assert(offsetof(Wisp_red_C_ActionOptionIndex, Player) == 0x000000, "Member 'Wisp_red_C_ActionOptionIndex::Player' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ActionOptionIndex, Hit) == 0x000008, "Member 'Wisp_red_C_ActionOptionIndex::Hit' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ActionOptionIndex, Action) == 0x000090, "Member 'Wisp_red_C_ActionOptionIndex::Action' has a wrong offset!");

// Function wisp_red.wisp_red_C.receivedPhyiscsDamage
// 0x008C (0x008C - 0x0000)
struct Wisp_red_C_ReceivedPhyiscsDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hot;                                               // 0x0004(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Wisp_red_C_ReceivedPhyiscsDamage) == 0x000004, "Wrong alignment on Wisp_red_C_ReceivedPhyiscsDamage");
static_assert(sizeof(Wisp_red_C_ReceivedPhyiscsDamage) == 0x00008C, "Wrong size on Wisp_red_C_ReceivedPhyiscsDamage");
static_assert(offsetof(Wisp_red_C_ReceivedPhyiscsDamage, Damage) == 0x000000, "Member 'Wisp_red_C_ReceivedPhyiscsDamage::Damage' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ReceivedPhyiscsDamage, Hot) == 0x000004, "Member 'Wisp_red_C_ReceivedPhyiscsDamage::Hot' has a wrong offset!");

// Function wisp_red.wisp_red_C.OnSuccess_1172D1954A36992A7F896C8D82E5F562
// 0x0001 (0x0001 - 0x0000)
struct Wisp_red_C_OnSuccess_1172D1954A36992A7F896C8D82E5F562 final
{
public:
	EPathFollowingResult                          MovementResult;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_red_C_OnSuccess_1172D1954A36992A7F896C8D82E5F562) == 0x000001, "Wrong alignment on Wisp_red_C_OnSuccess_1172D1954A36992A7F896C8D82E5F562");
static_assert(sizeof(Wisp_red_C_OnSuccess_1172D1954A36992A7F896C8D82E5F562) == 0x000001, "Wrong size on Wisp_red_C_OnSuccess_1172D1954A36992A7F896C8D82E5F562");
static_assert(offsetof(Wisp_red_C_OnSuccess_1172D1954A36992A7F896C8D82E5F562, MovementResult) == 0x000000, "Member 'Wisp_red_C_OnSuccess_1172D1954A36992A7F896C8D82E5F562::MovementResult' has a wrong offset!");

// Function wisp_red.wisp_red_C.OnFail_1172D1954A36992A7F896C8D82E5F562
// 0x0001 (0x0001 - 0x0000)
struct Wisp_red_C_OnFail_1172D1954A36992A7F896C8D82E5F562 final
{
public:
	EPathFollowingResult                          MovementResult;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_red_C_OnFail_1172D1954A36992A7F896C8D82E5F562) == 0x000001, "Wrong alignment on Wisp_red_C_OnFail_1172D1954A36992A7F896C8D82E5F562");
static_assert(sizeof(Wisp_red_C_OnFail_1172D1954A36992A7F896C8D82E5F562) == 0x000001, "Wrong size on Wisp_red_C_OnFail_1172D1954A36992A7F896C8D82E5F562");
static_assert(offsetof(Wisp_red_C_OnFail_1172D1954A36992A7F896C8D82E5F562, MovementResult) == 0x000000, "Member 'Wisp_red_C_OnFail_1172D1954A36992A7F896C8D82E5F562::MovementResult' has a wrong offset!");

// Function wisp_red.wisp_red_C.UserConstructionScript
// 0x0094 (0x0094 - 0x0000)
struct Wisp_red_C_UserConstructionScript final
{
public:
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x000C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Wisp_red_C_UserConstructionScript) == 0x000004, "Wrong alignment on Wisp_red_C_UserConstructionScript");
static_assert(sizeof(Wisp_red_C_UserConstructionScript) == 0x000094, "Wrong size on Wisp_red_C_UserConstructionScript");
static_assert(offsetof(Wisp_red_C_UserConstructionScript, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000000, "Member 'Wisp_red_C_UserConstructionScript::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_UserConstructionScript, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x00000C, "Member 'Wisp_red_C_UserConstructionScript::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");

// Function wisp_red.wisp_red_C.getActionOptions
// 0x0050 (0x0050 - 0x0000)
struct Wisp_red_C_GetActionOptions final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Component;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         Options;                                           // 0x0018(0x0010)(Parm, OutParm)
	TArray<Enum_interactionActions>               Options_enum;                                      // 0x0028(0x0010)(Parm, OutParm)
	TArray<class FText>                           OptionsNamesOverlay;                               // 0x0038(0x0010)(Parm, OutParm)
	uint8                                         Number;                                            // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_red_C_GetActionOptions) == 0x000008, "Wrong alignment on Wisp_red_C_GetActionOptions");
static_assert(sizeof(Wisp_red_C_GetActionOptions) == 0x000050, "Wrong size on Wisp_red_C_GetActionOptions");
static_assert(offsetof(Wisp_red_C_GetActionOptions, Player) == 0x000000, "Member 'Wisp_red_C_GetActionOptions::Player' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_GetActionOptions, Component) == 0x000008, "Member 'Wisp_red_C_GetActionOptions::Component' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_GetActionOptions, Actor) == 0x000010, "Member 'Wisp_red_C_GetActionOptions::Actor' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_GetActionOptions, Options) == 0x000018, "Member 'Wisp_red_C_GetActionOptions::Options' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_GetActionOptions, Options_enum) == 0x000028, "Member 'Wisp_red_C_GetActionOptions::Options_enum' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_GetActionOptions, OptionsNamesOverlay) == 0x000038, "Member 'Wisp_red_C_GetActionOptions::OptionsNamesOverlay' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_GetActionOptions, Number) == 0x000048, "Member 'Wisp_red_C_GetActionOptions::Number' has a wrong offset!");

// Function wisp_red.wisp_red_C.setPath
// 0x0018 (0x0018 - 0x0000)
struct Wisp_red_C_SetPath final
{
public:
	TArray<struct FVector>                        Path;                                              // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Return;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wisp_red_C_SetPath) == 0x000008, "Wrong alignment on Wisp_red_C_SetPath");
static_assert(sizeof(Wisp_red_C_SetPath) == 0x000018, "Wrong size on Wisp_red_C_SetPath");
static_assert(offsetof(Wisp_red_C_SetPath, Path) == 0x000000, "Member 'Wisp_red_C_SetPath::Path' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_SetPath, Return) == 0x000010, "Member 'Wisp_red_C_SetPath::Return' has a wrong offset!");

// Function wisp_red.wisp_red_C.getOnlyKey
// 0x0010 (0x0010 - 0x0000)
struct Wisp_red_C_GetOnlyKey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_red_C_GetOnlyKey) == 0x000008, "Wrong alignment on Wisp_red_C_GetOnlyKey");
static_assert(sizeof(Wisp_red_C_GetOnlyKey) == 0x000010, "Wrong size on Wisp_red_C_GetOnlyKey");
static_assert(offsetof(Wisp_red_C_GetOnlyKey, Key) == 0x000000, "Member 'Wisp_red_C_GetOnlyKey::Key' has a wrong offset!");

// Function wisp_red.wisp_red_C.processKeys
// 0x0001 (0x0001 - 0x0000)
struct Wisp_red_C_ProcessKeys final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wisp_red_C_ProcessKeys) == 0x000001, "Wrong alignment on Wisp_red_C_ProcessKeys");
static_assert(sizeof(Wisp_red_C_ProcessKeys) == 0x000001, "Wrong size on Wisp_red_C_ProcessKeys");
static_assert(offsetof(Wisp_red_C_ProcessKeys, Return) == 0x000000, "Member 'Wisp_red_C_ProcessKeys::Return' has a wrong offset!");

// Function wisp_red.wisp_red_C.canBeUsedHold
// 0x0001 (0x0001 - 0x0000)
struct Wisp_red_C_CanBeUsedHold final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wisp_red_C_CanBeUsedHold) == 0x000001, "Wrong alignment on Wisp_red_C_CanBeUsedHold");
static_assert(sizeof(Wisp_red_C_CanBeUsedHold) == 0x000001, "Wrong size on Wisp_red_C_CanBeUsedHold");
static_assert(offsetof(Wisp_red_C_CanBeUsedHold, Return) == 0x000000, "Member 'Wisp_red_C_CanBeUsedHold::Return' has a wrong offset!");

// Function wisp_red.wisp_red_C.GetKey
// 0x0010 (0x0010 - 0x0000)
struct Wisp_red_C_GetKey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_red_C_GetKey) == 0x000008, "Wrong alignment on Wisp_red_C_GetKey");
static_assert(sizeof(Wisp_red_C_GetKey) == 0x000010, "Wrong size on Wisp_red_C_GetKey");
static_assert(offsetof(Wisp_red_C_GetKey, Key) == 0x000000, "Member 'Wisp_red_C_GetKey::Key' has a wrong offset!");

// Function wisp_red.wisp_red_C.toolboxFix
// 0x0010 (0x0010 - 0x0000)
struct Wisp_red_C_ToolboxFix final
{
public:
	class AProp_toolbox_C*                        Toolbox;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wisp_red_C_ToolboxFix) == 0x000008, "Wrong alignment on Wisp_red_C_ToolboxFix");
static_assert(sizeof(Wisp_red_C_ToolboxFix) == 0x000010, "Wrong size on Wisp_red_C_ToolboxFix");
static_assert(offsetof(Wisp_red_C_ToolboxFix, Toolbox) == 0x000000, "Member 'Wisp_red_C_ToolboxFix::Toolbox' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_ToolboxFix, Return) == 0x000008, "Member 'Wisp_red_C_ToolboxFix::Return' has a wrong offset!");

// Function wisp_red.wisp_red_C.gascanFuel
// 0x0010 (0x0010 - 0x0000)
struct Wisp_red_C_GascanFuel final
{
public:
	class AProp_gascan_C*                         Gascan;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Fueled;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wisp_red_C_GascanFuel) == 0x000008, "Wrong alignment on Wisp_red_C_GascanFuel");
static_assert(sizeof(Wisp_red_C_GascanFuel) == 0x000010, "Wrong size on Wisp_red_C_GascanFuel");
static_assert(offsetof(Wisp_red_C_GascanFuel, Gascan) == 0x000000, "Member 'Wisp_red_C_GascanFuel::Gascan' has a wrong offset!");
static_assert(offsetof(Wisp_red_C_GascanFuel, Fueled) == 0x000008, "Member 'Wisp_red_C_GascanFuel::Fueled' has a wrong offset!");

// Function wisp_red.wisp_red_C.skipRadial
// 0x0001 (0x0001 - 0x0000)
struct Wisp_red_C_SkipRadial final
{
public:
	bool                                          Skip;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wisp_red_C_SkipRadial) == 0x000001, "Wrong alignment on Wisp_red_C_SkipRadial");
static_assert(sizeof(Wisp_red_C_SkipRadial) == 0x000001, "Wrong size on Wisp_red_C_SkipRadial");
static_assert(offsetof(Wisp_red_C_SkipRadial, Skip) == 0x000000, "Member 'Wisp_red_C_SkipRadial::Skip' has a wrong offset!");

// Function wisp_red.wisp_red_C.getPriceMultiplier
// 0x0004 (0x0004 - 0x0000)
struct Wisp_red_C_GetPriceMultiplier final
{
public:
	float                                         PriceMult;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_red_C_GetPriceMultiplier) == 0x000004, "Wrong alignment on Wisp_red_C_GetPriceMultiplier");
static_assert(sizeof(Wisp_red_C_GetPriceMultiplier) == 0x000004, "Wrong size on Wisp_red_C_GetPriceMultiplier");
static_assert(offsetof(Wisp_red_C_GetPriceMultiplier, PriceMult) == 0x000000, "Member 'Wisp_red_C_GetPriceMultiplier::PriceMult' has a wrong offset!");

}

