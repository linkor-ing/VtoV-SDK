#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Umg_decoder

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Struct_signalDataDynamic_structs.hpp"
#include "Enum_freq_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "Enum_difficulty_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass umg_decoder.umg_decoder_C
// 0x0120 (0x0380 - 0x0260)
class UUmg_decoder_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 Image_bar_1;                                       // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_activated;                                     // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Tex_prog;                                          // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Text_consum;                                       // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Text_DEffic;                                       // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Text_drive;                                        // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Text_files;                                        // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Text_proc;                                         // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Txt_heckertext;                                    // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	float                                         Progress;                                          // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsActive;                                          // 0x02B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_204A[0x3];                                     // 0x02B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Speed;                                             // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_204B[0x4];                                     // 0x02BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               Dynmat;                                            // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NoiseScale;                                        // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Active;                                            // 0x02CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_204C[0x3];                                     // 0x02CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APanel_computer_C*                      Panel;                                             // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Hecertext;                                         // 0x02D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         Downloading;                                       // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Aea;                                               // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ProcessMultiplier;                                 // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_204D[0x4];                                     // 0x02F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APanel_computer_tutorial3_C*            Tutor;                                             // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Diff_mul;                                          // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxLevel;                                          // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStruct_signalDataDynamic              Data_0;                                            // 0x0308(0x0070)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         A;                                                 // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_umg_decoder(int32 EntryPoint);
	void SettingsApplied(const struct FStruct_settings& Settings);
	void Calculate();
	void Construct();
	void PowerChanged(bool Active_calc, bool Active_downl, bool Active_coords, bool Active_play, bool Active_light);
	void GamemodeBeginPlay();
	void ApplyColor(const struct FLinearColor& Color);
	void PropRenderer_finishProps();
	void GamemodeMakeKeys();
	void AnyKey(const struct FKey& Key, bool Pressed);
	void GamemodePreLoad();
	void Unfocused();
	void Unfoc();
	void StuffUpgraded(class AMainGamemode_C* GameMode);
	void SignalSaved();
	void SignalDeleted();
	void UploadData(class AProp_drive_C* Drive, bool* Succ);
	void Start(bool* Succ);
	void Stop();
	void WriteHecer(const class FString& Param_A);
	void Upd();
	void DreamInv(TArray<struct FStruct_save>& Invv, class ADreamBase_C** Base);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"umg_decoder_C">();
	}
	static class UUmg_decoder_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUmg_decoder_C>();
	}
};
static_assert(alignof(UUmg_decoder_C) == 0x000008, "Wrong alignment on UUmg_decoder_C");
static_assert(sizeof(UUmg_decoder_C) == 0x000380, "Wrong size on UUmg_decoder_C");
static_assert(offsetof(UUmg_decoder_C, UberGraphFrame) == 0x000260, "Member 'UUmg_decoder_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUmg_decoder_C, Image_bar_1) == 0x000268, "Member 'UUmg_decoder_C::Image_bar_1' has a wrong offset!");
static_assert(offsetof(UUmg_decoder_C, Img_activated) == 0x000270, "Member 'UUmg_decoder_C::Img_activated' has a wrong offset!");
static_assert(offsetof(UUmg_decoder_C, Tex_prog) == 0x000278, "Member 'UUmg_decoder_C::Tex_prog' has a wrong offset!");
static_assert(offsetof(UUmg_decoder_C, Text_consum) == 0x000280, "Member 'UUmg_decoder_C::Text_consum' has a wrong offset!");
static_assert(offsetof(UUmg_decoder_C, Text_DEffic) == 0x000288, "Member 'UUmg_decoder_C::Text_DEffic' has a wrong offset!");
static_assert(offsetof(UUmg_decoder_C, Text_drive) == 0x000290, "Member 'UUmg_decoder_C::Text_drive' has a wrong offset!");
static_assert(offsetof(UUmg_decoder_C, Text_files) == 0x000298, "Member 'UUmg_decoder_C::Text_files' has a wrong offset!");
static_assert(offsetof(UUmg_decoder_C, Text_proc) == 0x0002A0, "Member 'UUmg_decoder_C::Text_proc' has a wrong offset!");
static_assert(offsetof(UUmg_decoder_C, Txt_heckertext) == 0x0002A8, "Member 'UUmg_decoder_C::Txt_heckertext' has a wrong offset!");
static_assert(offsetof(UUmg_decoder_C, Progress) == 0x0002B0, "Member 'UUmg_decoder_C::Progress' has a wrong offset!");
static_assert(offsetof(UUmg_decoder_C, IsActive) == 0x0002B4, "Member 'UUmg_decoder_C::IsActive' has a wrong offset!");
static_assert(offsetof(UUmg_decoder_C, Speed) == 0x0002B8, "Member 'UUmg_decoder_C::Speed' has a wrong offset!");
static_assert(offsetof(UUmg_decoder_C, Dynmat) == 0x0002C0, "Member 'UUmg_decoder_C::Dynmat' has a wrong offset!");
static_assert(offsetof(UUmg_decoder_C, NoiseScale) == 0x0002C8, "Member 'UUmg_decoder_C::NoiseScale' has a wrong offset!");
static_assert(offsetof(UUmg_decoder_C, Active) == 0x0002CC, "Member 'UUmg_decoder_C::Active' has a wrong offset!");
static_assert(offsetof(UUmg_decoder_C, Panel) == 0x0002D0, "Member 'UUmg_decoder_C::Panel' has a wrong offset!");
static_assert(offsetof(UUmg_decoder_C, Hecertext) == 0x0002D8, "Member 'UUmg_decoder_C::Hecertext' has a wrong offset!");
static_assert(offsetof(UUmg_decoder_C, Downloading) == 0x0002E8, "Member 'UUmg_decoder_C::Downloading' has a wrong offset!");
static_assert(offsetof(UUmg_decoder_C, Aea) == 0x0002EC, "Member 'UUmg_decoder_C::Aea' has a wrong offset!");
static_assert(offsetof(UUmg_decoder_C, ProcessMultiplier) == 0x0002F0, "Member 'UUmg_decoder_C::ProcessMultiplier' has a wrong offset!");
static_assert(offsetof(UUmg_decoder_C, Tutor) == 0x0002F8, "Member 'UUmg_decoder_C::Tutor' has a wrong offset!");
static_assert(offsetof(UUmg_decoder_C, Diff_mul) == 0x000300, "Member 'UUmg_decoder_C::Diff_mul' has a wrong offset!");
static_assert(offsetof(UUmg_decoder_C, MaxLevel) == 0x000304, "Member 'UUmg_decoder_C::MaxLevel' has a wrong offset!");
static_assert(offsetof(UUmg_decoder_C, Data_0) == 0x000308, "Member 'UUmg_decoder_C::Data_0' has a wrong offset!");
static_assert(offsetof(UUmg_decoder_C, A) == 0x000378, "Member 'UUmg_decoder_C::A' has a wrong offset!");

}

