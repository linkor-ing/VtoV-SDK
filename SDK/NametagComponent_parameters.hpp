#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NametagComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function nametagComponent.nametagComponent_C.ExecuteUbergraph_nametagComponent
// 0x0180 (0x0180 - 0x0000)
struct NametagComponent_C_ExecuteUbergraph_nametagComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult)> K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0014(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_3F0F[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUmg_hovertextNametag_C*                CallFunc_Create_ReturnValue;                       // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F10[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class AActor* DestroyedActor)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x0034(0x0010)(ZeroConstructor, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F11[0x2];                                     // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0048(0x0018)()
	struct FBoxSphereBounds                       CallFunc_GetBounds_ReturnValue;                    // 0x0060(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F12[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_CustomEvent_OverlappedComponent_1;          // 0x0090(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_OtherActor_1;                   // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_CustomEvent_OtherComp_1;                    // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_OtherBodyIndex_1;               // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bFromSweep;                     // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F13[0x3];                                     // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_CustomEvent_SweepResult;                    // 0x00B0(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UPrimitiveComponent*                    K2Node_CustomEvent_OverlappedComponent;            // 0x0138(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_OtherActor;                     // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_CustomEvent_OtherComp;                      // 0x0148(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_OtherBodyIndex;                 // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F14[0x4];                                     // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUmg_hovertextNametag_C*                CallFunc_Create_ReturnValue_1;                     // 0x0158(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F15[0x7];                                     // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_DestroyedActor;                 // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          CallFunc_getMainPlayer_AsMain_Player;              // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOverlappingActor_ReturnValue;           // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0179(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(NametagComponent_C_ExecuteUbergraph_nametagComponent) == 0x000008, "Wrong alignment on NametagComponent_C_ExecuteUbergraph_nametagComponent");
static_assert(sizeof(NametagComponent_C_ExecuteUbergraph_nametagComponent) == 0x000180, "Wrong size on NametagComponent_C_ExecuteUbergraph_nametagComponent");
static_assert(offsetof(NametagComponent_C_ExecuteUbergraph_nametagComponent, EntryPoint) == 0x000000, "Member 'NametagComponent_C_ExecuteUbergraph_nametagComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(NametagComponent_C_ExecuteUbergraph_nametagComponent, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'NametagComponent_C_ExecuteUbergraph_nametagComponent::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(NametagComponent_C_ExecuteUbergraph_nametagComponent, K2Node_CreateDelegate_OutputDelegate_1) == 0x000014, "Member 'NametagComponent_C_ExecuteUbergraph_nametagComponent::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(NametagComponent_C_ExecuteUbergraph_nametagComponent, CallFunc_Create_ReturnValue) == 0x000028, "Member 'NametagComponent_C_ExecuteUbergraph_nametagComponent::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(NametagComponent_C_ExecuteUbergraph_nametagComponent, Temp_bool_Variable) == 0x000030, "Member 'NametagComponent_C_ExecuteUbergraph_nametagComponent::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(NametagComponent_C_ExecuteUbergraph_nametagComponent, K2Node_CreateDelegate_OutputDelegate_2) == 0x000034, "Member 'NametagComponent_C_ExecuteUbergraph_nametagComponent::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(NametagComponent_C_ExecuteUbergraph_nametagComponent, Temp_byte_Variable) == 0x000044, "Member 'NametagComponent_C_ExecuteUbergraph_nametagComponent::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(NametagComponent_C_ExecuteUbergraph_nametagComponent, Temp_byte_Variable_1) == 0x000045, "Member 'NametagComponent_C_ExecuteUbergraph_nametagComponent::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(NametagComponent_C_ExecuteUbergraph_nametagComponent, CallFunc_Conv_StringToText_ReturnValue) == 0x000048, "Member 'NametagComponent_C_ExecuteUbergraph_nametagComponent::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(NametagComponent_C_ExecuteUbergraph_nametagComponent, CallFunc_GetBounds_ReturnValue) == 0x000060, "Member 'NametagComponent_C_ExecuteUbergraph_nametagComponent::CallFunc_GetBounds_ReturnValue' has a wrong offset!");
static_assert(offsetof(NametagComponent_C_ExecuteUbergraph_nametagComponent, CallFunc_VSize_ReturnValue) == 0x00007C, "Member 'NametagComponent_C_ExecuteUbergraph_nametagComponent::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(NametagComponent_C_ExecuteUbergraph_nametagComponent, CallFunc_MakeVector_ReturnValue) == 0x000080, "Member 'NametagComponent_C_ExecuteUbergraph_nametagComponent::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(NametagComponent_C_ExecuteUbergraph_nametagComponent, K2Node_CustomEvent_OverlappedComponent_1) == 0x000090, "Member 'NametagComponent_C_ExecuteUbergraph_nametagComponent::K2Node_CustomEvent_OverlappedComponent_1' has a wrong offset!");
static_assert(offsetof(NametagComponent_C_ExecuteUbergraph_nametagComponent, K2Node_CustomEvent_OtherActor_1) == 0x000098, "Member 'NametagComponent_C_ExecuteUbergraph_nametagComponent::K2Node_CustomEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(NametagComponent_C_ExecuteUbergraph_nametagComponent, K2Node_CustomEvent_OtherComp_1) == 0x0000A0, "Member 'NametagComponent_C_ExecuteUbergraph_nametagComponent::K2Node_CustomEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(NametagComponent_C_ExecuteUbergraph_nametagComponent, K2Node_CustomEvent_OtherBodyIndex_1) == 0x0000A8, "Member 'NametagComponent_C_ExecuteUbergraph_nametagComponent::K2Node_CustomEvent_OtherBodyIndex_1' has a wrong offset!");
static_assert(offsetof(NametagComponent_C_ExecuteUbergraph_nametagComponent, K2Node_CustomEvent_bFromSweep) == 0x0000AC, "Member 'NametagComponent_C_ExecuteUbergraph_nametagComponent::K2Node_CustomEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(NametagComponent_C_ExecuteUbergraph_nametagComponent, K2Node_CustomEvent_SweepResult) == 0x0000B0, "Member 'NametagComponent_C_ExecuteUbergraph_nametagComponent::K2Node_CustomEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(NametagComponent_C_ExecuteUbergraph_nametagComponent, K2Node_CustomEvent_OverlappedComponent) == 0x000138, "Member 'NametagComponent_C_ExecuteUbergraph_nametagComponent::K2Node_CustomEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(NametagComponent_C_ExecuteUbergraph_nametagComponent, K2Node_CustomEvent_OtherActor) == 0x000140, "Member 'NametagComponent_C_ExecuteUbergraph_nametagComponent::K2Node_CustomEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(NametagComponent_C_ExecuteUbergraph_nametagComponent, K2Node_CustomEvent_OtherComp) == 0x000148, "Member 'NametagComponent_C_ExecuteUbergraph_nametagComponent::K2Node_CustomEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(NametagComponent_C_ExecuteUbergraph_nametagComponent, K2Node_CustomEvent_OtherBodyIndex) == 0x000150, "Member 'NametagComponent_C_ExecuteUbergraph_nametagComponent::K2Node_CustomEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(NametagComponent_C_ExecuteUbergraph_nametagComponent, CallFunc_Create_ReturnValue_1) == 0x000158, "Member 'NametagComponent_C_ExecuteUbergraph_nametagComponent::CallFunc_Create_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(NametagComponent_C_ExecuteUbergraph_nametagComponent, CallFunc_IsValid_ReturnValue) == 0x000160, "Member 'NametagComponent_C_ExecuteUbergraph_nametagComponent::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(NametagComponent_C_ExecuteUbergraph_nametagComponent, K2Node_CustomEvent_DestroyedActor) == 0x000168, "Member 'NametagComponent_C_ExecuteUbergraph_nametagComponent::K2Node_CustomEvent_DestroyedActor' has a wrong offset!");
static_assert(offsetof(NametagComponent_C_ExecuteUbergraph_nametagComponent, CallFunc_getMainPlayer_AsMain_Player) == 0x000170, "Member 'NametagComponent_C_ExecuteUbergraph_nametagComponent::CallFunc_getMainPlayer_AsMain_Player' has a wrong offset!");
static_assert(offsetof(NametagComponent_C_ExecuteUbergraph_nametagComponent, CallFunc_IsOverlappingActor_ReturnValue) == 0x000178, "Member 'NametagComponent_C_ExecuteUbergraph_nametagComponent::CallFunc_IsOverlappingActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(NametagComponent_C_ExecuteUbergraph_nametagComponent, K2Node_Select_Default) == 0x000179, "Member 'NametagComponent_C_ExecuteUbergraph_nametagComponent::K2Node_Select_Default' has a wrong offset!");

// Function nametagComponent.nametagComponent_C.Dest
// 0x0008 (0x0008 - 0x0000)
struct NametagComponent_C_Dest final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(NametagComponent_C_Dest) == 0x000008, "Wrong alignment on NametagComponent_C_Dest");
static_assert(sizeof(NametagComponent_C_Dest) == 0x000008, "Wrong size on NametagComponent_C_Dest");
static_assert(offsetof(NametagComponent_C_Dest, DestroyedActor) == 0x000000, "Member 'NametagComponent_C_Dest::DestroyedActor' has a wrong offset!");

// Function nametagComponent.nametagComponent_C.endOverlap
// 0x0020 (0x0020 - 0x0000)
struct NametagComponent_C_EndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(NametagComponent_C_EndOverlap) == 0x000008, "Wrong alignment on NametagComponent_C_EndOverlap");
static_assert(sizeof(NametagComponent_C_EndOverlap) == 0x000020, "Wrong size on NametagComponent_C_EndOverlap");
static_assert(offsetof(NametagComponent_C_EndOverlap, OverlappedComponent) == 0x000000, "Member 'NametagComponent_C_EndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(NametagComponent_C_EndOverlap, OtherActor) == 0x000008, "Member 'NametagComponent_C_EndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(NametagComponent_C_EndOverlap, OtherComp) == 0x000010, "Member 'NametagComponent_C_EndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(NametagComponent_C_EndOverlap, OtherBodyIndex) == 0x000018, "Member 'NametagComponent_C_EndOverlap::OtherBodyIndex' has a wrong offset!");

// Function nametagComponent.nametagComponent_C.Overlap
// 0x00A8 (0x00A8 - 0x0000)
struct NametagComponent_C_Overlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F16[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(NametagComponent_C_Overlap) == 0x000008, "Wrong alignment on NametagComponent_C_Overlap");
static_assert(sizeof(NametagComponent_C_Overlap) == 0x0000A8, "Wrong size on NametagComponent_C_Overlap");
static_assert(offsetof(NametagComponent_C_Overlap, OverlappedComponent) == 0x000000, "Member 'NametagComponent_C_Overlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(NametagComponent_C_Overlap, OtherActor) == 0x000008, "Member 'NametagComponent_C_Overlap::OtherActor' has a wrong offset!");
static_assert(offsetof(NametagComponent_C_Overlap, OtherComp) == 0x000010, "Member 'NametagComponent_C_Overlap::OtherComp' has a wrong offset!");
static_assert(offsetof(NametagComponent_C_Overlap, OtherBodyIndex) == 0x000018, "Member 'NametagComponent_C_Overlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(NametagComponent_C_Overlap, bFromSweep) == 0x00001C, "Member 'NametagComponent_C_Overlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(NametagComponent_C_Overlap, SweepResult) == 0x000020, "Member 'NametagComponent_C_Overlap::SweepResult' has a wrong offset!");

}

