#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Cookier

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Enum_interactionActions_structs.hpp"
#include "AIModule_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass cookier.cookier_C
// 0x0090 (0x0550 - 0x04C0)
class ACookier_C final : public ACharacter
{
public:
	uint8                                         Pad_4B8[0x8];                                      // 0x04B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBillboardComponent*                    Drop;                                              // 0x04C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x04D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNavigationInvokerComponent*            NavigationInvoker;                                 // 0x04D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Step;                                              // 0x04E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastStep;                                          // 0x04E4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WalkTo;                                            // 0x04F0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4FC[0x4];                                      // 0x04FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        WalkPath;                                          // 0x0500(0x0010)(Edit, BlueprintVisible)
	int32                                         Ind;                                               // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Volume;                                            // 0x0514(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAttenuation*                      Att;                                               // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Key;                                               // 0x0520(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	bool                                          Walking;                                           // 0x0530(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_531[0x3];                                      // 0x0531(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Loc;                                               // 0x0534(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanDrop;                                           // 0x0540(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_541[0x3];                                      // 0x0541(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Rep;                                               // 0x0544(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void GetPriceMultiplier(float* PriceMult);
	void SkipRadial(bool* Skip);
	void GascanFuel(class AProp_gascan_C* Gascan, bool* Fueled);
	void GetActionOptions(class AMainPlayer_C* Player, class UPrimitiveComponent* Component, class AActor* Actor, TArray<class FString>* Options, TArray<Enum_interactionActions>* Options_enum, TArray<class FText>* OptionsNamesOverlay, uint8* Number);
	void SetPath(const TArray<struct FVector>& Path, bool* Return);
	void ToolboxFix(class AProp_toolbox_C* Toolbox, bool* Return);
	void GetKey(class FString* Param_Key);
	void CanBeUsedHold(bool* Return);
	void ProcessKeys(bool* Return);
	void GetOnlyKey(class FString* Param_Key);
	void GatherDataFromKeyT(bool* Gather);
	void IgnoreSave_trigger(bool* Ignore);
	void LoadTriggerData(const struct FStruct_triggerSave& Data, bool* Return);
	void GetTriggerData(struct FStruct_triggerSave* Data);
	void SetPoint();
	void StepOn();
	void OnFail_F2065A824C5947295CDFD3A28F161E58(EPathFollowingResult MovementResult);
	void OnSuccess_F2065A824C5947295CDFD3A28F161E58(EPathFollowingResult MovementResult);
	void ImpactDamage(float Damage, const struct FHitResult& Hit, class AActor* Actor, const struct FVector& Impact);
	void EnterWater(class AWaterVolume_C* Water);
	void LeaveWater(class AWaterVolume_C* Water);
	void EnterWaterOrigin(class AWaterVolume_C* Water);
	void LeaveWaterOrigin(class AWaterVolume_C* Water);
	void Eaten();
	void Virus(bool Activate);
	void SetPropProps(bool Static, bool Frozen, bool Active);
	void AddDamage(class AActor* Actor, float Damage, const struct FHitResult& Hit, const struct FVector& Impact, bool SkipSetting);
	void SetKey(const class FString& Param_Key);
	void PhysDestroyed();
	void PhysPreDestroyed();
	void DigUp();
	void Unhook();
	void SteppedOn(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void FireDamage(float Damage);
	void Ignite(float Fuel);
	void Microwave();
	void ReceivedPhyiscsDamage(float Damage, const struct FHitResult& Hot);
	void ActionOptionIndex(class AMainPlayer_C* Player, const struct FHitResult& Hit, Enum_interactionActions Action);
	void PlayerHandUse_RMB(class AMainPlayer_C* Player);
	void PlayerHandUse_LMB(class AMainPlayer_C* Player);
	void Exploded(float Damage, const struct FVector& Location);
	void ExtinguishFire();
	void PlayerHandRelease_RMB(class AMainPlayer_C* Player);
	void PlayerHandRelease_LMB(class AMainPlayer_C* Player);
	void PlayerHandMouseWheel(class AMainPlayer_C* Player, float WheelDelta);
	void PlayerHandMouse(class AMainPlayer_C* Player, const struct FVector2D& Mouse);
	void PlayerHandAnyKey(class AMainPlayer_C* Player, const struct FKey& Param_Key, bool Pressed);
	void MicrowaveElec();
	void AddTemperature(float Temperature);
	void AccumulateTemperature(float Temperature, float Speed);
	void ActionName(class AMainPlayer_C* Player, const struct FHitResult& Hit, const class FString& Param_Name);
	void Stepped(float Param_Volume);
	void PlayerLookAway(class AMainPlayer_C* Player);
	void ReachedByExplosion(const struct FVector& Location, float Damage);
	void bitten();
	void Slice(bool Clean);
	void PlayerUsedOn(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void AttemptIgnite();
	void Hooked(class AHook_C* Hook);
	void Crafted();
	void CleanSponge(float Clean, class AMainPlayer_C* Player);
	void HookTension(class AHook_C* Hook);
	void Set_ignoreSave_trigger(bool NewParam);
	void CordPlugged(class ACord_C* Cord, class ACordSocket_C* Socket);
	void CordUnplugged(class ACord_C* Cord, class ACordSocket_C* Socket);
	void SetActiveTrigger(class AActor* SentFrom, bool Active);
	void ReceiveTick(float DeltaSeconds);
	void RunTrigger(class AActor* Param_Owner, int32 Param_Index);
	void Run();
	void ReceiveBeginPlay();
	void ExecuteUbergraph_cookier(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"cookier_C">();
	}
	static class ACookier_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACookier_C>();
	}
};
static_assert(alignof(ACookier_C) == 0x000010, "Wrong alignment on ACookier_C");
static_assert(sizeof(ACookier_C) == 0x000550, "Wrong size on ACookier_C");
static_assert(offsetof(ACookier_C, UberGraphFrame) == 0x0004C0, "Member 'ACookier_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ACookier_C, Drop) == 0x0004C8, "Member 'ACookier_C::Drop' has a wrong offset!");
static_assert(offsetof(ACookier_C, StaticMesh) == 0x0004D0, "Member 'ACookier_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ACookier_C, NavigationInvoker) == 0x0004D8, "Member 'ACookier_C::NavigationInvoker' has a wrong offset!");
static_assert(offsetof(ACookier_C, Step) == 0x0004E0, "Member 'ACookier_C::Step' has a wrong offset!");
static_assert(offsetof(ACookier_C, LastStep) == 0x0004E4, "Member 'ACookier_C::LastStep' has a wrong offset!");
static_assert(offsetof(ACookier_C, WalkTo) == 0x0004F0, "Member 'ACookier_C::WalkTo' has a wrong offset!");
static_assert(offsetof(ACookier_C, WalkPath) == 0x000500, "Member 'ACookier_C::WalkPath' has a wrong offset!");
static_assert(offsetof(ACookier_C, Ind) == 0x000510, "Member 'ACookier_C::Ind' has a wrong offset!");
static_assert(offsetof(ACookier_C, Volume) == 0x000514, "Member 'ACookier_C::Volume' has a wrong offset!");
static_assert(offsetof(ACookier_C, Att) == 0x000518, "Member 'ACookier_C::Att' has a wrong offset!");
static_assert(offsetof(ACookier_C, Key) == 0x000520, "Member 'ACookier_C::Key' has a wrong offset!");
static_assert(offsetof(ACookier_C, Walking) == 0x000530, "Member 'ACookier_C::Walking' has a wrong offset!");
static_assert(offsetof(ACookier_C, Loc) == 0x000534, "Member 'ACookier_C::Loc' has a wrong offset!");
static_assert(offsetof(ACookier_C, CanDrop) == 0x000540, "Member 'ACookier_C::CanDrop' has a wrong offset!");
static_assert(offsetof(ACookier_C, Rep) == 0x000544, "Member 'ACookier_C::Rep' has a wrong offset!");

}

