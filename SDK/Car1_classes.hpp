#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Car1

#include "Basic.hpp"

#include "Enum_interactionActions_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Enum_difficulty_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass car1.car1_C
// 0x0258 (0x04D8 - 0x0280)
class ACar1_C final : public APawn
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0280(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UArrowComponent*                        PotentialMovement;                                 // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cq_handle;                                         // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        HandleAxis;                                        // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USvtarget_C*                            Svtarget;                                          // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box1;                                              // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Capsule;                                           // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URadarPointComponent_C*                 RadarPoint;                                        // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh1;                                       // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh2;                                       // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsThrusterComponent*              PhysicsThruster;                                   // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsThrusterComponent*              PhysicsThruster1;                                  // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Car_damage;                                        // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Eff_carSmoke;                                      // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight1;                                       // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Lig2;                                              // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Lig1;                                              // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    Light_L;                                           // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    Light_R;                                           // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Lever;                                             // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Billboard;                                         // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Car_brakeLever;                                    // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    LagFl;                                             // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       Camera;                                            // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    LagRot;                                            // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsImpactComponent_C*              PhysicsImpact;                                     // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Fuelbox;                                           // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            LockB;                                             // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Tp;                                                // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Car_turbo;                                         // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Car_drive_brake;                                   // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Car_drive_start_Cue;                               // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Car_stop;                                          // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Car_start_Cue;                                     // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    Lag;                                               // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            Ax_FR;                                             // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            Ax_FL;                                             // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            Ax_BL;                                             // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            Ax_BR;                                             // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Mesh;                                              // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            Sus_FR;                                            // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            Sus_BR;                                            // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            Sus_BL;                                            // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            Sus_FL;                                            // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Wheel_BL;                                          // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Wheel_FL;                                          // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Wheel_BR;                                          // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Wheel_FR;                                          // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_a_24E1EB0F4FA1A65327FAEF94C3038008;     // 0x0418(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_24E1EB0F4FA1A65327FAEF94C3038008; // 0x041C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34CB[0x3];                                     // 0x041D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x0420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Input_forward;                                     // 0x0428(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Input_back;                                        // 0x0429(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Input_right;                                       // 0x042A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Input_left;                                        // 0x042B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_34CC[0x4];                                     // 0x042C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          Pl;                                                // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RotAlpha;                                          // 0x0438(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TorqAlpha;                                         // 0x043C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0440(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34CD[0x4];                                     // 0x0444(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USpotLightComponent*                    Light;                                             // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDrive;                                           // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsDrive_sound;                                     // 0x0451(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Turbo;                                             // 0x0452(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_34CE[0x1];                                     // 0x0453(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Fuel;                                              // 0x0454(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Empty;                                             // 0x0458(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Brake;                                             // 0x0459(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_34CF[0x2];                                     // 0x045A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Diff_fuel;                                         // 0x045C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Lights;                                            // 0x0460(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_34D0[0x3];                                     // 0x0461(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Health;                                            // 0x0464(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Imp;                                               // 0x0468(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          brokenn;                                           // 0x0469(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Input_alt;                                         // 0x046A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_34D1[0x1];                                     // 0x046B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Speed_turbo;                                       // 0x046C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed_default;                                     // 0x0470(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Nitro;                                             // 0x0474(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          InvX;                                              // 0x0475(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          InvY;                                              // 0x0476(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsDriven;                                          // 0x0477(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                Lastloc;                                           // 0x0478(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34D2[0x4];                                     // 0x0484(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Hides;                                             // 0x0488(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	class FString                                 Key;                                               // 0x0498(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class AMainPlayer_C*                          PrevPlayer;                                        // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Underwater;                                        // 0x04B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_34D3[0x7];                                     // 0x04B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  WheelsOnSurface;                                   // 0x04B8(0x0010)(Edit, BlueprintVisible)
	bool                                          InWater;                                           // 0x04C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Floater;                                           // 0x04C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Trap;                                              // 0x04CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_34D4[0x1];                                     // 0x04CB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InterpVel;                                         // 0x04CC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_car1(int32 EntryPoint);
	void Explode(const struct FVector& FullBody);
	void LoadLights();
	void LoadBrake();
	void ExitTheWater();
	void EnteredTheWater();
	void BndEvt__car1_wheel_FR_K2Node_ComponentBoundEvent_5_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BndEvt__car1_wheel_FL_K2Node_ComponentBoundEvent_4_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BndEvt__car1_wheel_BL_K2Node_ComponentBoundEvent_3_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BndEvt__car1_wheel_BR_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void SetIgnoreSave(bool Ignore);
	void ImpactDamageCPP(float Damage, const struct FHitResult& Hit, class AActor* Actor, const struct FVector& Impact);
	void ImpactSquishCPP(class UPrimitiveComponent* Component);
	void ImpactDamage(float Damage, const struct FHitResult& Hit, class AActor* Actor, const struct FVector& Impact);
	void Eaten();
	void Virus(bool Activate);
	void SetPropProps(bool Static, bool Frozen, bool Active);
	void AddDamage(class AActor* Actor, float Damage, const struct FHitResult& Hit, const struct FVector& Impact, bool SkipSetting);
	void SetKey(const class FString& Param_Key);
	void PhysDestroyed();
	void PhysPreDestroyed();
	void ActionOptionIndex(class AMainPlayer_C* Player, const struct FHitResult& Hit, int32 Param_Index, Enum_interactionActions Action);
	void Fainted();
	void ReceiveBeginPlay();
	void LeaveWater(class AWaterVolume_C* Water);
	void EnterWater(class AWaterVolume_C* Water);
	void LeaveWaterOrigin(class AWaterVolume_C* Water);
	void EnterWaterOrigin(class AWaterVolume_C* Water);
	void DigUp();
	void Unhook();
	void SteppedOn(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void FireDamage(float Damage);
	void Ignite(float Param_Fuel);
	void Microwave();
	void ReceivedPhyiscsDamage();
	void PlayerHandUse_RMB(class AMainPlayer_C* Player);
	void PlayerHandUse_LMB(class AMainPlayer_C* Player);
	void Exploded(float Damage, const struct FVector& Location);
	void ExtinguishFire();
	void PlayerHandRelease_RMB(class AMainPlayer_C* Player);
	void PlayerHandRelease_LMB(class AMainPlayer_C* Player);
	void GamemodeBeginPlay();
	void FireNitro();
	void AttemptIgnite();
	void PlayerHandMouseWheel(class AMainPlayer_C* Player, float WheelDelta);
	void BndEvt__mesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void PlayerHandMouse(class AMainPlayer_C* Player, const struct FVector2D& Mouse);
	void PlayerHandAnyKey(class AMainPlayer_C* Player, const struct FKey& Param_Key, bool Pressed);
	void MicrowaveElec();
	void AddTemperature(float Temperature);
	void F_brake();
	void Dismount();
	void Unzoom();
	void SettingsApplied(const struct FStruct_settings& Settings);
	void AccumulateTemperature(float Temperature, float Param_Speed);
	void ActionName(class AMainPlayer_C* Player, const struct FHitResult& Hit, const class FString& Param_Name);
	void Unbrake();
	void Unturbo();
	void Stepped(float Volume);
	void PlayerLookAway(class AMainPlayer_C* Player);
	void BndEvt__fuelbox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ReachedByExplosion(const struct FVector& Location, float Damage);
	void bitten();
	void Sound_drive();
	void Slice(bool Clean);
	void PlayerUsedOn(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void Hooked(class AHook_C* Hook);
	void SignalDeleted();
	void SignalSaved();
	void ReceiveTick(float DeltaSeconds);
	void InpAxisEvt_mouseY_K2Node_InputAxisEvent_1(float AxisValue);
	void InpAxisEvt_mouseX_K2Node_InputAxisEvent_0(float AxisValue);
	void UpdateStrAgl();
	void DamageByPlayer(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void Thrown(class AMainPlayer_C* Player);
	void broken_fire();
	void broken();
	void SendName(class FName Param_Name);
	void Kicked(bool Kick);
	void Player_use(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void DriveDetached();
	void ApplyColor(const struct FLinearColor& Color);
	void PropRenderer_finishProps();
	void GamemodeMakeKeys();
	void AnyKey(const struct FKey& Param_Key, bool Pressed);
	void GamemodePreLoad();
	void Unfocused();
	void Unfoc();
	void StuffUpgraded(class AMainGamemode_C* GameMode);
	void InpActEvt_jump_K2Node_InputActionEvent_0(const struct FKey& Param_Key);
	void InpActEvt_pause_K2Node_InputActionEvent_1(const struct FKey& Param_Key);
	void InpActEvt_alt_K2Node_InputActionEvent_2(const struct FKey& Param_Key);
	void InpActEvt_alt_K2Node_InputActionEvent_3(const struct FKey& Param_Key);
	void InpActEvt_zoom_K2Node_InputActionEvent_4(const struct FKey& Param_Key);
	void InpActEvt_zoom_K2Node_InputActionEvent_5(const struct FKey& Param_Key);
	void InpActEvt_flashlight_K2Node_InputActionEvent_6(const struct FKey& Param_Key);
	void InpActEvt_run_K2Node_InputActionEvent_7(const struct FKey& Param_Key);
	void InpActEvt_run_K2Node_InputActionEvent_8(const struct FKey& Param_Key);
	void InpActEvt_left_K2Node_InputActionEvent_9(const struct FKey& Param_Key);
	void InpActEvt_left_K2Node_InputActionEvent_10(const struct FKey& Param_Key);
	void InpActEvt_right_K2Node_InputActionEvent_11(const struct FKey& Param_Key);
	void InpActEvt_right_K2Node_InputActionEvent_12(const struct FKey& Param_Key);
	void InpActEvt_back_K2Node_InputActionEvent_13(const struct FKey& Param_Key);
	void InpActEvt_back_K2Node_InputActionEvent_14(const struct FKey& Param_Key);
	void InpActEvt_forward_K2Node_InputActionEvent_15(const struct FKey& Param_Key);
	void InpActEvt_forward_K2Node_InputActionEvent_16(const struct FKey& Param_Key);
	void Timeline_0__UpdateFunc();
	void Timeline_0__FinishedFunc();
	void Runout();
	void TelepCar(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	void UpdHealth();
	void Dismounted();
	void Driven();
	void SetSett(const struct FStruct_settings& Sttruct_settings);
	void FuelUp(class AProp_gascan_C* InputPin, bool* Fueled);
	void IsButtonUsed(bool* Failed);
	void LookAt(class AMainPlayer_C* Player, const struct FHitResult& Hit, bool* Return, class FString* Text, class UPrimitiveComponent** boundObjectReplace);
	void NoRespawn(bool Param_NoRespawn, bool* Return);
	void CanPickup(bool* Return);
	void AsProp(class AProp_C** Return);
	void CanBePutInContainer(bool* Return);
	void DreamInv(TArray<struct FStruct_save>& Invv, class ADreamBase_C** Base);
	void ToolboxFix(class AProp_toolbox_C* Toolbox, bool* Return);
	void GetKey(class FString* Param_Key);
	void CanBeUsedHold(bool* Return);
	void ProcessKeys(bool* Return);
	void GetOnlyKey(class FString* Param_Key);
	void SetPath(const TArray<struct FVector>& Path, bool* Return);
	void GetActionOptions(class AMainPlayer_C* Player, class UPrimitiveComponent* Component, class AActor* Actor, TArray<class FString>* Options, TArray<Enum_interactionActions>* Options_enum, TArray<class FText>* OptionsNamesOverlay);
	void GascanFuel(class AProp_gascan_C* Gascan, bool* Fueled);
	void SkipRadial(bool* Skip);
	void SkipPreDelete(bool* Skip);
	void IgnoreSave(bool* Param_IgnoreSave);
	void LoadData(const struct FStruct_save& Data, bool* Return);
	void GetData(struct FStruct_save* Data);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"car1_C">();
	}
	static class ACar1_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACar1_C>();
	}
};
static_assert(alignof(ACar1_C) == 0x000008, "Wrong alignment on ACar1_C");
static_assert(sizeof(ACar1_C) == 0x0004D8, "Wrong size on ACar1_C");
static_assert(offsetof(ACar1_C, UberGraphFrame) == 0x000280, "Member 'ACar1_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ACar1_C, PotentialMovement) == 0x000288, "Member 'ACar1_C::PotentialMovement' has a wrong offset!");
static_assert(offsetof(ACar1_C, Cq_handle) == 0x000290, "Member 'ACar1_C::Cq_handle' has a wrong offset!");
static_assert(offsetof(ACar1_C, HandleAxis) == 0x000298, "Member 'ACar1_C::HandleAxis' has a wrong offset!");
static_assert(offsetof(ACar1_C, Svtarget) == 0x0002A0, "Member 'ACar1_C::Svtarget' has a wrong offset!");
static_assert(offsetof(ACar1_C, Box1) == 0x0002A8, "Member 'ACar1_C::Box1' has a wrong offset!");
static_assert(offsetof(ACar1_C, Capsule) == 0x0002B0, "Member 'ACar1_C::Capsule' has a wrong offset!");
static_assert(offsetof(ACar1_C, RadarPoint) == 0x0002B8, "Member 'ACar1_C::RadarPoint' has a wrong offset!");
static_assert(offsetof(ACar1_C, StaticMesh1) == 0x0002C0, "Member 'ACar1_C::StaticMesh1' has a wrong offset!");
static_assert(offsetof(ACar1_C, StaticMesh2) == 0x0002C8, "Member 'ACar1_C::StaticMesh2' has a wrong offset!");
static_assert(offsetof(ACar1_C, PhysicsThruster) == 0x0002D0, "Member 'ACar1_C::PhysicsThruster' has a wrong offset!");
static_assert(offsetof(ACar1_C, PhysicsThruster1) == 0x0002D8, "Member 'ACar1_C::PhysicsThruster1' has a wrong offset!");
static_assert(offsetof(ACar1_C, Car_damage) == 0x0002E0, "Member 'ACar1_C::Car_damage' has a wrong offset!");
static_assert(offsetof(ACar1_C, Eff_carSmoke) == 0x0002E8, "Member 'ACar1_C::Eff_carSmoke' has a wrong offset!");
static_assert(offsetof(ACar1_C, PointLight1) == 0x0002F0, "Member 'ACar1_C::PointLight1' has a wrong offset!");
static_assert(offsetof(ACar1_C, PointLight) == 0x0002F8, "Member 'ACar1_C::PointLight' has a wrong offset!");
static_assert(offsetof(ACar1_C, Lig2) == 0x000300, "Member 'ACar1_C::Lig2' has a wrong offset!");
static_assert(offsetof(ACar1_C, Lig1) == 0x000308, "Member 'ACar1_C::Lig1' has a wrong offset!");
static_assert(offsetof(ACar1_C, Light_L) == 0x000310, "Member 'ACar1_C::Light_L' has a wrong offset!");
static_assert(offsetof(ACar1_C, Light_R) == 0x000318, "Member 'ACar1_C::Light_R' has a wrong offset!");
static_assert(offsetof(ACar1_C, Lever) == 0x000320, "Member 'ACar1_C::Lever' has a wrong offset!");
static_assert(offsetof(ACar1_C, Billboard) == 0x000328, "Member 'ACar1_C::Billboard' has a wrong offset!");
static_assert(offsetof(ACar1_C, Car_brakeLever) == 0x000330, "Member 'ACar1_C::Car_brakeLever' has a wrong offset!");
static_assert(offsetof(ACar1_C, LagFl) == 0x000338, "Member 'ACar1_C::LagFl' has a wrong offset!");
static_assert(offsetof(ACar1_C, Camera) == 0x000340, "Member 'ACar1_C::Camera' has a wrong offset!");
static_assert(offsetof(ACar1_C, LagRot) == 0x000348, "Member 'ACar1_C::LagRot' has a wrong offset!");
static_assert(offsetof(ACar1_C, PhysicsImpact) == 0x000350, "Member 'ACar1_C::PhysicsImpact' has a wrong offset!");
static_assert(offsetof(ACar1_C, StaticMesh) == 0x000358, "Member 'ACar1_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ACar1_C, Fuelbox) == 0x000360, "Member 'ACar1_C::Fuelbox' has a wrong offset!");
static_assert(offsetof(ACar1_C, LockB) == 0x000368, "Member 'ACar1_C::LockB' has a wrong offset!");
static_assert(offsetof(ACar1_C, Tp) == 0x000370, "Member 'ACar1_C::Tp' has a wrong offset!");
static_assert(offsetof(ACar1_C, Car_turbo) == 0x000378, "Member 'ACar1_C::Car_turbo' has a wrong offset!");
static_assert(offsetof(ACar1_C, Car_drive_brake) == 0x000380, "Member 'ACar1_C::Car_drive_brake' has a wrong offset!");
static_assert(offsetof(ACar1_C, Car_drive_start_Cue) == 0x000388, "Member 'ACar1_C::Car_drive_start_Cue' has a wrong offset!");
static_assert(offsetof(ACar1_C, Car_stop) == 0x000390, "Member 'ACar1_C::Car_stop' has a wrong offset!");
static_assert(offsetof(ACar1_C, Car_start_Cue) == 0x000398, "Member 'ACar1_C::Car_start_Cue' has a wrong offset!");
static_assert(offsetof(ACar1_C, Box) == 0x0003A0, "Member 'ACar1_C::Box' has a wrong offset!");
static_assert(offsetof(ACar1_C, Lag) == 0x0003A8, "Member 'ACar1_C::Lag' has a wrong offset!");
static_assert(offsetof(ACar1_C, Ax_FR) == 0x0003B0, "Member 'ACar1_C::Ax_FR' has a wrong offset!");
static_assert(offsetof(ACar1_C, Ax_FL) == 0x0003B8, "Member 'ACar1_C::Ax_FL' has a wrong offset!");
static_assert(offsetof(ACar1_C, Ax_BL) == 0x0003C0, "Member 'ACar1_C::Ax_BL' has a wrong offset!");
static_assert(offsetof(ACar1_C, Ax_BR) == 0x0003C8, "Member 'ACar1_C::Ax_BR' has a wrong offset!");
static_assert(offsetof(ACar1_C, Mesh) == 0x0003D0, "Member 'ACar1_C::Mesh' has a wrong offset!");
static_assert(offsetof(ACar1_C, Sus_FR) == 0x0003D8, "Member 'ACar1_C::Sus_FR' has a wrong offset!");
static_assert(offsetof(ACar1_C, Sus_BR) == 0x0003E0, "Member 'ACar1_C::Sus_BR' has a wrong offset!");
static_assert(offsetof(ACar1_C, Sus_BL) == 0x0003E8, "Member 'ACar1_C::Sus_BL' has a wrong offset!");
static_assert(offsetof(ACar1_C, Sus_FL) == 0x0003F0, "Member 'ACar1_C::Sus_FL' has a wrong offset!");
static_assert(offsetof(ACar1_C, Wheel_BL) == 0x0003F8, "Member 'ACar1_C::Wheel_BL' has a wrong offset!");
static_assert(offsetof(ACar1_C, Wheel_FL) == 0x000400, "Member 'ACar1_C::Wheel_FL' has a wrong offset!");
static_assert(offsetof(ACar1_C, Wheel_BR) == 0x000408, "Member 'ACar1_C::Wheel_BR' has a wrong offset!");
static_assert(offsetof(ACar1_C, Wheel_FR) == 0x000410, "Member 'ACar1_C::Wheel_FR' has a wrong offset!");
static_assert(offsetof(ACar1_C, Timeline_0_a_24E1EB0F4FA1A65327FAEF94C3038008) == 0x000418, "Member 'ACar1_C::Timeline_0_a_24E1EB0F4FA1A65327FAEF94C3038008' has a wrong offset!");
static_assert(offsetof(ACar1_C, Timeline_0__Direction_24E1EB0F4FA1A65327FAEF94C3038008) == 0x00041C, "Member 'ACar1_C::Timeline_0__Direction_24E1EB0F4FA1A65327FAEF94C3038008' has a wrong offset!");
static_assert(offsetof(ACar1_C, Timeline_0) == 0x000420, "Member 'ACar1_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(ACar1_C, Input_forward) == 0x000428, "Member 'ACar1_C::Input_forward' has a wrong offset!");
static_assert(offsetof(ACar1_C, Input_back) == 0x000429, "Member 'ACar1_C::Input_back' has a wrong offset!");
static_assert(offsetof(ACar1_C, Input_right) == 0x00042A, "Member 'ACar1_C::Input_right' has a wrong offset!");
static_assert(offsetof(ACar1_C, Input_left) == 0x00042B, "Member 'ACar1_C::Input_left' has a wrong offset!");
static_assert(offsetof(ACar1_C, Pl) == 0x000430, "Member 'ACar1_C::Pl' has a wrong offset!");
static_assert(offsetof(ACar1_C, RotAlpha) == 0x000438, "Member 'ACar1_C::RotAlpha' has a wrong offset!");
static_assert(offsetof(ACar1_C, TorqAlpha) == 0x00043C, "Member 'ACar1_C::TorqAlpha' has a wrong offset!");
static_assert(offsetof(ACar1_C, Speed) == 0x000440, "Member 'ACar1_C::Speed' has a wrong offset!");
static_assert(offsetof(ACar1_C, Light) == 0x000448, "Member 'ACar1_C::Light' has a wrong offset!");
static_assert(offsetof(ACar1_C, IsDrive) == 0x000450, "Member 'ACar1_C::IsDrive' has a wrong offset!");
static_assert(offsetof(ACar1_C, IsDrive_sound) == 0x000451, "Member 'ACar1_C::IsDrive_sound' has a wrong offset!");
static_assert(offsetof(ACar1_C, Turbo) == 0x000452, "Member 'ACar1_C::Turbo' has a wrong offset!");
static_assert(offsetof(ACar1_C, Fuel) == 0x000454, "Member 'ACar1_C::Fuel' has a wrong offset!");
static_assert(offsetof(ACar1_C, Empty) == 0x000458, "Member 'ACar1_C::Empty' has a wrong offset!");
static_assert(offsetof(ACar1_C, Brake) == 0x000459, "Member 'ACar1_C::Brake' has a wrong offset!");
static_assert(offsetof(ACar1_C, Diff_fuel) == 0x00045C, "Member 'ACar1_C::Diff_fuel' has a wrong offset!");
static_assert(offsetof(ACar1_C, Lights) == 0x000460, "Member 'ACar1_C::Lights' has a wrong offset!");
static_assert(offsetof(ACar1_C, Health) == 0x000464, "Member 'ACar1_C::Health' has a wrong offset!");
static_assert(offsetof(ACar1_C, Imp) == 0x000468, "Member 'ACar1_C::Imp' has a wrong offset!");
static_assert(offsetof(ACar1_C, brokenn) == 0x000469, "Member 'ACar1_C::brokenn' has a wrong offset!");
static_assert(offsetof(ACar1_C, Input_alt) == 0x00046A, "Member 'ACar1_C::Input_alt' has a wrong offset!");
static_assert(offsetof(ACar1_C, Speed_turbo) == 0x00046C, "Member 'ACar1_C::Speed_turbo' has a wrong offset!");
static_assert(offsetof(ACar1_C, Speed_default) == 0x000470, "Member 'ACar1_C::Speed_default' has a wrong offset!");
static_assert(offsetof(ACar1_C, Nitro) == 0x000474, "Member 'ACar1_C::Nitro' has a wrong offset!");
static_assert(offsetof(ACar1_C, InvX) == 0x000475, "Member 'ACar1_C::InvX' has a wrong offset!");
static_assert(offsetof(ACar1_C, InvY) == 0x000476, "Member 'ACar1_C::InvY' has a wrong offset!");
static_assert(offsetof(ACar1_C, IsDriven) == 0x000477, "Member 'ACar1_C::IsDriven' has a wrong offset!");
static_assert(offsetof(ACar1_C, Lastloc) == 0x000478, "Member 'ACar1_C::Lastloc' has a wrong offset!");
static_assert(offsetof(ACar1_C, Hides) == 0x000488, "Member 'ACar1_C::Hides' has a wrong offset!");
static_assert(offsetof(ACar1_C, Key) == 0x000498, "Member 'ACar1_C::Key' has a wrong offset!");
static_assert(offsetof(ACar1_C, PrevPlayer) == 0x0004A8, "Member 'ACar1_C::PrevPlayer' has a wrong offset!");
static_assert(offsetof(ACar1_C, Underwater) == 0x0004B0, "Member 'ACar1_C::Underwater' has a wrong offset!");
static_assert(offsetof(ACar1_C, WheelsOnSurface) == 0x0004B8, "Member 'ACar1_C::WheelsOnSurface' has a wrong offset!");
static_assert(offsetof(ACar1_C, InWater) == 0x0004C8, "Member 'ACar1_C::InWater' has a wrong offset!");
static_assert(offsetof(ACar1_C, Floater) == 0x0004C9, "Member 'ACar1_C::Floater' has a wrong offset!");
static_assert(offsetof(ACar1_C, Trap) == 0x0004CA, "Member 'ACar1_C::Trap' has a wrong offset!");
static_assert(offsetof(ACar1_C, InterpVel) == 0x0004CC, "Member 'ACar1_C::InterpVel' has a wrong offset!");

}

