#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DaynightCycle

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Enum_difficulty_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass daynightCycle.daynightCycle_C
// 0x0128 (0x0348 - 0x0220)
class ADaynightCycle_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UArrowComponent*                        Arrow2;                                            // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow1;                                            // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkyLightComponent*                     Lightning;                                         // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UExponentialHeightFogComponent*         ExponentialHeightFog;                              // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        RainSnd;                                           // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkyLightComponent*                     SkyLight_A;                                        // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Eff_rain;                                          // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Eff_shootingStar;                                  // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Day;                                               // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Phase;                                             // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Phase_sin;                                         // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Phase_normsin;                                     // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxTime;                                           // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TotalTime;                                         // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeScale;                                         // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FA6[0x4];                                     // 0x0294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ALight*                                 Sun;                                               // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ANewsky_C*                              Skysphere;                                         // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATrigger_ambientSound_C*                Ambient_day;                                       // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATrigger_ambientSound_C*                Ambient_night;                                     // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SunAxis;                                           // 0x02B8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsActive;                                          // 0x02C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2FA7[0x3];                                     // 0x02C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntVector                             TimeZ;                                             // 0x02C8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SStar_active;                                      // 0x02D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2FA8[0x3];                                     // 0x02D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Rain;                                              // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRaining;                                         // 0x02DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RainMuted;                                         // 0x02DD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2FA9[0x2];                                     // 0x02DE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Diff_mult;                                         // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_difficulty                               Diff;                                              // 0x02E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FAA[0x3];                                     // 0x02E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Sun_height;                                        // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RainSpeed;                                         // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Fog_color_A;                                       // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Fog_color_B;                                       // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Amb_color;                                         // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Loan;                                              // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2FAB[0x7];                                     // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             NewMinute;                                         // 0x0310(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         ThickFog;                                          // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FAC[0x4];                                     // 0x0324(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AWeatherFogController_C*                FogEventObject;                                    // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Realtime;                                          // 0x0330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2FAD[0x3];                                     // 0x0331(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DayAdd;                                            // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RT_pastTime;                                       // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WeekDay;                                           // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SettingMultiplayer;                                // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void NewMinute__DelegateSignature(const struct FIntVector& Time);
	void ExecuteUbergraph_daynightCycle(int32 EntryPoint);
	void ApplyColor(const struct FLinearColor& Color);
	void Rewind();
	void ReceiveBeginPlay();
	void Dest(class AActor* DestroyedActor);
	void FogEvent();
	void ReceiveTick(float DeltaSeconds);
	void SettingsApplied(const struct FStruct_settings& Settings);
	void GamemodeBeginPlay();
	void SignalDeleted();
	void SignalSaved();
	void StuffUpgraded(class AMainGamemode_C* GameMode);
	void Unfoc();
	void Unfocused();
	void GamemodePreLoad();
	void RainS();
	void Ligh();
	void AnyKey(const struct FKey& Key, bool Pressed);
	void GamemodeMakeKeys();
	void PropRenderer_finishProps();
	void UserConstructionScript();
	void Loadtime(float Param_TotalTime, float Param_Day);
	void IsDream(bool Dream);
	void MakeOrder(struct FStruct_storeOrder* Struct_storeOrder);
	void DailyTaskDriveSize(int32* Zero, int32* One, int32* Two, int32* Three, int32* DishCheckAm);
	void SendDriveBox(class AMainGamemode_C* Self2, bool* OutputPin);
	void DreamInv(TArray<struct FStruct_save>& Invv, class ADreamBase_C** Base);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"daynightCycle_C">();
	}
	static class ADaynightCycle_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADaynightCycle_C>();
	}
};
static_assert(alignof(ADaynightCycle_C) == 0x000008, "Wrong alignment on ADaynightCycle_C");
static_assert(sizeof(ADaynightCycle_C) == 0x000348, "Wrong size on ADaynightCycle_C");
static_assert(offsetof(ADaynightCycle_C, UberGraphFrame) == 0x000220, "Member 'ADaynightCycle_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ADaynightCycle_C, Arrow2) == 0x000228, "Member 'ADaynightCycle_C::Arrow2' has a wrong offset!");
static_assert(offsetof(ADaynightCycle_C, Arrow1) == 0x000230, "Member 'ADaynightCycle_C::Arrow1' has a wrong offset!");
static_assert(offsetof(ADaynightCycle_C, Arrow) == 0x000238, "Member 'ADaynightCycle_C::Arrow' has a wrong offset!");
static_assert(offsetof(ADaynightCycle_C, Lightning) == 0x000240, "Member 'ADaynightCycle_C::Lightning' has a wrong offset!");
static_assert(offsetof(ADaynightCycle_C, ExponentialHeightFog) == 0x000248, "Member 'ADaynightCycle_C::ExponentialHeightFog' has a wrong offset!");
static_assert(offsetof(ADaynightCycle_C, RainSnd) == 0x000250, "Member 'ADaynightCycle_C::RainSnd' has a wrong offset!");
static_assert(offsetof(ADaynightCycle_C, SkyLight_A) == 0x000258, "Member 'ADaynightCycle_C::SkyLight_A' has a wrong offset!");
static_assert(offsetof(ADaynightCycle_C, Eff_rain) == 0x000260, "Member 'ADaynightCycle_C::Eff_rain' has a wrong offset!");
static_assert(offsetof(ADaynightCycle_C, Eff_shootingStar) == 0x000268, "Member 'ADaynightCycle_C::Eff_shootingStar' has a wrong offset!");
static_assert(offsetof(ADaynightCycle_C, DefaultSceneRoot) == 0x000270, "Member 'ADaynightCycle_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ADaynightCycle_C, Day) == 0x000278, "Member 'ADaynightCycle_C::Day' has a wrong offset!");
static_assert(offsetof(ADaynightCycle_C, Phase) == 0x00027C, "Member 'ADaynightCycle_C::Phase' has a wrong offset!");
static_assert(offsetof(ADaynightCycle_C, Phase_sin) == 0x000280, "Member 'ADaynightCycle_C::Phase_sin' has a wrong offset!");
static_assert(offsetof(ADaynightCycle_C, Phase_normsin) == 0x000284, "Member 'ADaynightCycle_C::Phase_normsin' has a wrong offset!");
static_assert(offsetof(ADaynightCycle_C, MaxTime) == 0x000288, "Member 'ADaynightCycle_C::MaxTime' has a wrong offset!");
static_assert(offsetof(ADaynightCycle_C, TotalTime) == 0x00028C, "Member 'ADaynightCycle_C::TotalTime' has a wrong offset!");
static_assert(offsetof(ADaynightCycle_C, TimeScale) == 0x000290, "Member 'ADaynightCycle_C::TimeScale' has a wrong offset!");
static_assert(offsetof(ADaynightCycle_C, Sun) == 0x000298, "Member 'ADaynightCycle_C::Sun' has a wrong offset!");
static_assert(offsetof(ADaynightCycle_C, Skysphere) == 0x0002A0, "Member 'ADaynightCycle_C::Skysphere' has a wrong offset!");
static_assert(offsetof(ADaynightCycle_C, Ambient_day) == 0x0002A8, "Member 'ADaynightCycle_C::Ambient_day' has a wrong offset!");
static_assert(offsetof(ADaynightCycle_C, Ambient_night) == 0x0002B0, "Member 'ADaynightCycle_C::Ambient_night' has a wrong offset!");
static_assert(offsetof(ADaynightCycle_C, SunAxis) == 0x0002B8, "Member 'ADaynightCycle_C::SunAxis' has a wrong offset!");
static_assert(offsetof(ADaynightCycle_C, IsActive) == 0x0002C4, "Member 'ADaynightCycle_C::IsActive' has a wrong offset!");
static_assert(offsetof(ADaynightCycle_C, TimeZ) == 0x0002C8, "Member 'ADaynightCycle_C::TimeZ' has a wrong offset!");
static_assert(offsetof(ADaynightCycle_C, SStar_active) == 0x0002D4, "Member 'ADaynightCycle_C::SStar_active' has a wrong offset!");
static_assert(offsetof(ADaynightCycle_C, Rain) == 0x0002D8, "Member 'ADaynightCycle_C::Rain' has a wrong offset!");
static_assert(offsetof(ADaynightCycle_C, IsRaining) == 0x0002DC, "Member 'ADaynightCycle_C::IsRaining' has a wrong offset!");
static_assert(offsetof(ADaynightCycle_C, RainMuted) == 0x0002DD, "Member 'ADaynightCycle_C::RainMuted' has a wrong offset!");
static_assert(offsetof(ADaynightCycle_C, Diff_mult) == 0x0002E0, "Member 'ADaynightCycle_C::Diff_mult' has a wrong offset!");
static_assert(offsetof(ADaynightCycle_C, Diff) == 0x0002E4, "Member 'ADaynightCycle_C::Diff' has a wrong offset!");
static_assert(offsetof(ADaynightCycle_C, Sun_height) == 0x0002E8, "Member 'ADaynightCycle_C::Sun_height' has a wrong offset!");
static_assert(offsetof(ADaynightCycle_C, RainSpeed) == 0x0002EC, "Member 'ADaynightCycle_C::RainSpeed' has a wrong offset!");
static_assert(offsetof(ADaynightCycle_C, Fog_color_A) == 0x0002F0, "Member 'ADaynightCycle_C::Fog_color_A' has a wrong offset!");
static_assert(offsetof(ADaynightCycle_C, Fog_color_B) == 0x0002F8, "Member 'ADaynightCycle_C::Fog_color_B' has a wrong offset!");
static_assert(offsetof(ADaynightCycle_C, Amb_color) == 0x000300, "Member 'ADaynightCycle_C::Amb_color' has a wrong offset!");
static_assert(offsetof(ADaynightCycle_C, Loan) == 0x000308, "Member 'ADaynightCycle_C::Loan' has a wrong offset!");
static_assert(offsetof(ADaynightCycle_C, NewMinute) == 0x000310, "Member 'ADaynightCycle_C::NewMinute' has a wrong offset!");
static_assert(offsetof(ADaynightCycle_C, ThickFog) == 0x000320, "Member 'ADaynightCycle_C::ThickFog' has a wrong offset!");
static_assert(offsetof(ADaynightCycle_C, FogEventObject) == 0x000328, "Member 'ADaynightCycle_C::FogEventObject' has a wrong offset!");
static_assert(offsetof(ADaynightCycle_C, Realtime) == 0x000330, "Member 'ADaynightCycle_C::Realtime' has a wrong offset!");
static_assert(offsetof(ADaynightCycle_C, DayAdd) == 0x000334, "Member 'ADaynightCycle_C::DayAdd' has a wrong offset!");
static_assert(offsetof(ADaynightCycle_C, RT_pastTime) == 0x000338, "Member 'ADaynightCycle_C::RT_pastTime' has a wrong offset!");
static_assert(offsetof(ADaynightCycle_C, WeekDay) == 0x00033C, "Member 'ADaynightCycle_C::WeekDay' has a wrong offset!");
static_assert(offsetof(ADaynightCycle_C, SettingMultiplayer) == 0x000340, "Member 'ADaynightCycle_C::SettingMultiplayer' has a wrong offset!");

}

