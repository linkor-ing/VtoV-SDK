#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GrayRigged_animTst_Skeleton_AnimBlueprint

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass grayRigged_animTst_Skeleton_AnimBlueprint.grayRigged_animTst_Skeleton_AnimBlueprint_C
// 0x0140 (0x0400 - 0x02C0)
class UGrayRigged_animTst_Skeleton_AnimBlueprint_C final : public UAnimInstance
{
public:
	uint8                                         Pad_2B8[0x8];                                      // 0x02B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x02C8(0x0030)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x02F8(0x00E8)()
	float                                         AlphaWalk;                                         // 0x03E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E4[0x4];                                      // 0x03E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  Pawn;                                              // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartPosition;                                     // 0x03F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_grayRigged_animTst_Skeleton_AnimBlueprint(int32 EntryPoint);
	void BlueprintBeginPlay();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_grayRigged_animTst_Skeleton_AnimBlueprint_AnimGraphNode_BlendSpacePlayer_3B81EE1C4C2A86658B5F9E8B37203570();
	void AnimGraph(struct FPoseLink* Param_AnimGraph);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"grayRigged_animTst_Skeleton_AnimBlueprint_C">();
	}
	static class UGrayRigged_animTst_Skeleton_AnimBlueprint_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGrayRigged_animTst_Skeleton_AnimBlueprint_C>();
	}
};
static_assert(alignof(UGrayRigged_animTst_Skeleton_AnimBlueprint_C) == 0x000010, "Wrong alignment on UGrayRigged_animTst_Skeleton_AnimBlueprint_C");
static_assert(sizeof(UGrayRigged_animTst_Skeleton_AnimBlueprint_C) == 0x000400, "Wrong size on UGrayRigged_animTst_Skeleton_AnimBlueprint_C");
static_assert(offsetof(UGrayRigged_animTst_Skeleton_AnimBlueprint_C, UberGraphFrame) == 0x0002C0, "Member 'UGrayRigged_animTst_Skeleton_AnimBlueprint_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGrayRigged_animTst_Skeleton_AnimBlueprint_C, AnimGraphNode_Root) == 0x0002C8, "Member 'UGrayRigged_animTst_Skeleton_AnimBlueprint_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UGrayRigged_animTst_Skeleton_AnimBlueprint_C, AnimGraphNode_BlendSpacePlayer) == 0x0002F8, "Member 'UGrayRigged_animTst_Skeleton_AnimBlueprint_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(UGrayRigged_animTst_Skeleton_AnimBlueprint_C, AlphaWalk) == 0x0003E0, "Member 'UGrayRigged_animTst_Skeleton_AnimBlueprint_C::AlphaWalk' has a wrong offset!");
static_assert(offsetof(UGrayRigged_animTst_Skeleton_AnimBlueprint_C, Pawn) == 0x0003E8, "Member 'UGrayRigged_animTst_Skeleton_AnimBlueprint_C::Pawn' has a wrong offset!");
static_assert(offsetof(UGrayRigged_animTst_Skeleton_AnimBlueprint_C, StartPosition) == 0x0003F0, "Member 'UGrayRigged_animTst_Skeleton_AnimBlueprint_C::StartPosition' has a wrong offset!");

}

