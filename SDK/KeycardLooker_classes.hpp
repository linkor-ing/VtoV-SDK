#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KeycardLooker

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Actor_save_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass keycardLooker.keycardLooker_C
// 0x0020 (0x0268 - 0x0248)
class AKeycardLooker_C final : public AActor_save_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_KeycardLooker_C;                    // 0x0248(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBillboardComponent*                    Tp;                                                // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AProp_keycard_C*                        Keycard;                                           // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void DreamInv(TArray<struct FStruct_save>& Invv, class ADreamBase_C** Base);
	void SignalDeleted();
	void SignalSaved();
	void StuffUpgraded(class AMainGamemode_C* GameMode);
	void Unfoc();
	void SettingsApplied(const struct FStruct_settings& Settings);
	void Unfocused();
	void GamemodePreLoad();
	void AnyKey(const struct FKey& Param_Key, bool Pressed);
	void GamemodeMakeKeys();
	void PropRenderer_finishProps();
	void ApplyColor(const struct FLinearColor& Color);
	void GamemodeBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void ExecuteUbergraph_keycardLooker(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"keycardLooker_C">();
	}
	static class AKeycardLooker_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AKeycardLooker_C>();
	}
};
static_assert(alignof(AKeycardLooker_C) == 0x000008, "Wrong alignment on AKeycardLooker_C");
static_assert(sizeof(AKeycardLooker_C) == 0x000268, "Wrong size on AKeycardLooker_C");
static_assert(offsetof(AKeycardLooker_C, UberGraphFrame_KeycardLooker_C) == 0x000248, "Member 'AKeycardLooker_C::UberGraphFrame_KeycardLooker_C' has a wrong offset!");
static_assert(offsetof(AKeycardLooker_C, Tp) == 0x000250, "Member 'AKeycardLooker_C::Tp' has a wrong offset!");
static_assert(offsetof(AKeycardLooker_C, Box) == 0x000258, "Member 'AKeycardLooker_C::Box' has a wrong offset!");
static_assert(offsetof(AKeycardLooker_C, Keycard) == 0x000260, "Member 'AKeycardLooker_C::Keycard' has a wrong offset!");

}

