#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GeomOcta

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "AIModule_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass geomOcta.geomOcta_C
// 0x00B0 (0x0570 - 0x04C0)
class AGeomOcta_C final : public ACharacter
{
public:
	uint8                                         Pad_4B8[0x8];                                      // 0x04B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       DespawnSphere;                                     // 0x04C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UComp_radarPoint_C*                     Comp_radarPoint;                                   // 0x04D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Coll;                                              // 0x04D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       AllPawnSphere;                                     // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       PropAggroSphere;                                   // 0x04E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        OctBeamLoop;                                       // 0x04F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x04F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArm;                                         // 0x0500(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               ParticleSystem;                                    // 0x0508(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Shoot;                                             // 0x0510(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       MinSphere;                                         // 0x0518(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         ChareTL_a_6B5255414640A8F93F99D69FB6DF0C99;        // 0x0520(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ChareTL__Direction_6B5255414640A8F93F99D69FB6DF0C99; // 0x0524(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_525[0x3];                                      // 0x0525(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ChareTL;                                           // 0x0528(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimelineRot_a_BA87A6D444757DA00E17DC99D8FC1D08;    // 0x0530(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TimelineRot__Direction_BA87A6D444757DA00E17DC99D8FC1D08; // 0x0534(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_535[0x3];                                      // 0x0535(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TimelineRot;                                       // 0x0538(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 TargetActor;                                       // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         A;                                                 // 0x0548(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RotA;                                              // 0x054C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LastRot;                                           // 0x0550(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsAnim;                                            // 0x055C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55D[0x3];                                      // 0x055D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ACh;                                               // 0x0560(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpwnAlpha;                                         // 0x0564(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCharge;                                          // 0x0568(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Despawn;                                           // 0x0569(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_geomOcta(int32 EntryPoint);
	void DespawnAttempt();
	void BndEvt__geomOcta_propAggroSphere_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void Sound();
	void ReceiveBeginPlay();
	void Move();
	void Charge(bool Condition);
	void RotateTo(bool Condition);
	void ReceiveTick(float DeltaSeconds);
	void BndEvt__geomOcta_minSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void Aggro(class AActor* Actor);
	void Fire();
	void OnSuccess_B50B45FF44BBE3579FA455929797BD91(EPathFollowingResult MovementResult);
	void OnFail_B50B45FF44BBE3579FA455929797BD91(EPathFollowingResult MovementResult);
	void OnCompleted_1DFC28904024A8FB71C3ACA9DBD440F9(class FName NotifyName);
	void OnBlendOut_1DFC28904024A8FB71C3ACA9DBD440F9(class FName NotifyName);
	void OnInterrupted_1DFC28904024A8FB71C3ACA9DBD440F9(class FName NotifyName);
	void OnNotifyBegin_1DFC28904024A8FB71C3ACA9DBD440F9(class FName NotifyName);
	void OnNotifyEnd_1DFC28904024A8FB71C3ACA9DBD440F9(class FName NotifyName);
	void OnCompleted_9B2108B443F09BA08A3C20ADBECCC562(class FName NotifyName);
	void OnBlendOut_9B2108B443F09BA08A3C20ADBECCC562(class FName NotifyName);
	void OnInterrupted_9B2108B443F09BA08A3C20ADBECCC562(class FName NotifyName);
	void OnNotifyBegin_9B2108B443F09BA08A3C20ADBECCC562(class FName NotifyName);
	void OnNotifyEnd_9B2108B443F09BA08A3C20ADBECCC562(class FName NotifyName);
	void OnCompleted_40CAEEF14EA3484C8E679EA6A1BD5F5D(class FName NotifyName);
	void OnBlendOut_40CAEEF14EA3484C8E679EA6A1BD5F5D(class FName NotifyName);
	void OnInterrupted_40CAEEF14EA3484C8E679EA6A1BD5F5D(class FName NotifyName);
	void OnNotifyBegin_40CAEEF14EA3484C8E679EA6A1BD5F5D(class FName NotifyName);
	void OnNotifyEnd_40CAEEF14EA3484C8E679EA6A1BD5F5D(class FName NotifyName);
	void ChareTL__UpdateFunc();
	void ChareTL__FinishedFunc();
	void TimelineRot__UpdateFunc();
	void TimelineRot__FinishedFunc();
	void Rot(struct FRotator* OutputPin);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"geomOcta_C">();
	}
	static class AGeomOcta_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGeomOcta_C>();
	}
};
static_assert(alignof(AGeomOcta_C) == 0x000010, "Wrong alignment on AGeomOcta_C");
static_assert(sizeof(AGeomOcta_C) == 0x000570, "Wrong size on AGeomOcta_C");
static_assert(offsetof(AGeomOcta_C, UberGraphFrame) == 0x0004C0, "Member 'AGeomOcta_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AGeomOcta_C, DespawnSphere) == 0x0004C8, "Member 'AGeomOcta_C::DespawnSphere' has a wrong offset!");
static_assert(offsetof(AGeomOcta_C, Comp_radarPoint) == 0x0004D0, "Member 'AGeomOcta_C::Comp_radarPoint' has a wrong offset!");
static_assert(offsetof(AGeomOcta_C, Coll) == 0x0004D8, "Member 'AGeomOcta_C::Coll' has a wrong offset!");
static_assert(offsetof(AGeomOcta_C, AllPawnSphere) == 0x0004E0, "Member 'AGeomOcta_C::AllPawnSphere' has a wrong offset!");
static_assert(offsetof(AGeomOcta_C, PropAggroSphere) == 0x0004E8, "Member 'AGeomOcta_C::PropAggroSphere' has a wrong offset!");
static_assert(offsetof(AGeomOcta_C, OctBeamLoop) == 0x0004F0, "Member 'AGeomOcta_C::OctBeamLoop' has a wrong offset!");
static_assert(offsetof(AGeomOcta_C, PointLight) == 0x0004F8, "Member 'AGeomOcta_C::PointLight' has a wrong offset!");
static_assert(offsetof(AGeomOcta_C, SpringArm) == 0x000500, "Member 'AGeomOcta_C::SpringArm' has a wrong offset!");
static_assert(offsetof(AGeomOcta_C, ParticleSystem) == 0x000508, "Member 'AGeomOcta_C::ParticleSystem' has a wrong offset!");
static_assert(offsetof(AGeomOcta_C, Shoot) == 0x000510, "Member 'AGeomOcta_C::Shoot' has a wrong offset!");
static_assert(offsetof(AGeomOcta_C, MinSphere) == 0x000518, "Member 'AGeomOcta_C::MinSphere' has a wrong offset!");
static_assert(offsetof(AGeomOcta_C, ChareTL_a_6B5255414640A8F93F99D69FB6DF0C99) == 0x000520, "Member 'AGeomOcta_C::ChareTL_a_6B5255414640A8F93F99D69FB6DF0C99' has a wrong offset!");
static_assert(offsetof(AGeomOcta_C, ChareTL__Direction_6B5255414640A8F93F99D69FB6DF0C99) == 0x000524, "Member 'AGeomOcta_C::ChareTL__Direction_6B5255414640A8F93F99D69FB6DF0C99' has a wrong offset!");
static_assert(offsetof(AGeomOcta_C, ChareTL) == 0x000528, "Member 'AGeomOcta_C::ChareTL' has a wrong offset!");
static_assert(offsetof(AGeomOcta_C, TimelineRot_a_BA87A6D444757DA00E17DC99D8FC1D08) == 0x000530, "Member 'AGeomOcta_C::TimelineRot_a_BA87A6D444757DA00E17DC99D8FC1D08' has a wrong offset!");
static_assert(offsetof(AGeomOcta_C, TimelineRot__Direction_BA87A6D444757DA00E17DC99D8FC1D08) == 0x000534, "Member 'AGeomOcta_C::TimelineRot__Direction_BA87A6D444757DA00E17DC99D8FC1D08' has a wrong offset!");
static_assert(offsetof(AGeomOcta_C, TimelineRot) == 0x000538, "Member 'AGeomOcta_C::TimelineRot' has a wrong offset!");
static_assert(offsetof(AGeomOcta_C, TargetActor) == 0x000540, "Member 'AGeomOcta_C::TargetActor' has a wrong offset!");
static_assert(offsetof(AGeomOcta_C, A) == 0x000548, "Member 'AGeomOcta_C::A' has a wrong offset!");
static_assert(offsetof(AGeomOcta_C, RotA) == 0x00054C, "Member 'AGeomOcta_C::RotA' has a wrong offset!");
static_assert(offsetof(AGeomOcta_C, LastRot) == 0x000550, "Member 'AGeomOcta_C::LastRot' has a wrong offset!");
static_assert(offsetof(AGeomOcta_C, IsAnim) == 0x00055C, "Member 'AGeomOcta_C::IsAnim' has a wrong offset!");
static_assert(offsetof(AGeomOcta_C, ACh) == 0x000560, "Member 'AGeomOcta_C::ACh' has a wrong offset!");
static_assert(offsetof(AGeomOcta_C, SpwnAlpha) == 0x000564, "Member 'AGeomOcta_C::SpwnAlpha' has a wrong offset!");
static_assert(offsetof(AGeomOcta_C, IsCharge) == 0x000568, "Member 'AGeomOcta_C::IsCharge' has a wrong offset!");
static_assert(offsetof(AGeomOcta_C, Despawn) == 0x000569, "Member 'AGeomOcta_C::Despawn' has a wrong offset!");

}

