#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Prop_digcam

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function prop_digcam.prop_digcam_C.ExecuteUbergraph_prop_digcam
// 0x0080 (0x0080 - 0x0000)
struct Prop_digcam_C_ExecuteUbergraph_prop_digcam final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B29[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player;                               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B2A[0x8];                                     // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0020(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_digcam_C_ExecuteUbergraph_prop_digcam) == 0x000010, "Wrong alignment on Prop_digcam_C_ExecuteUbergraph_prop_digcam");
static_assert(sizeof(Prop_digcam_C_ExecuteUbergraph_prop_digcam) == 0x000080, "Wrong size on Prop_digcam_C_ExecuteUbergraph_prop_digcam");
static_assert(offsetof(Prop_digcam_C_ExecuteUbergraph_prop_digcam, EntryPoint) == 0x000000, "Member 'Prop_digcam_C_ExecuteUbergraph_prop_digcam::EntryPoint' has a wrong offset!");
static_assert(offsetof(Prop_digcam_C_ExecuteUbergraph_prop_digcam, K2Node_Event_player) == 0x000008, "Member 'Prop_digcam_C_ExecuteUbergraph_prop_digcam::K2Node_Event_player' has a wrong offset!");
static_assert(offsetof(Prop_digcam_C_ExecuteUbergraph_prop_digcam, CallFunc_getMainGamemode_AsMain_Gamemode) == 0x000010, "Member 'Prop_digcam_C_ExecuteUbergraph_prop_digcam::CallFunc_getMainGamemode_AsMain_Gamemode' has a wrong offset!");
static_assert(offsetof(Prop_digcam_C_ExecuteUbergraph_prop_digcam, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000020, "Member 'Prop_digcam_C_ExecuteUbergraph_prop_digcam::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_digcam_C_ExecuteUbergraph_prop_digcam, CallFunc_BreakTransform_Location) == 0x000050, "Member 'Prop_digcam_C_ExecuteUbergraph_prop_digcam::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(Prop_digcam_C_ExecuteUbergraph_prop_digcam, CallFunc_BreakTransform_Rotation) == 0x00005C, "Member 'Prop_digcam_C_ExecuteUbergraph_prop_digcam::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(Prop_digcam_C_ExecuteUbergraph_prop_digcam, CallFunc_BreakTransform_Scale) == 0x000068, "Member 'Prop_digcam_C_ExecuteUbergraph_prop_digcam::CallFunc_BreakTransform_Scale' has a wrong offset!");

// Function prop_digcam.prop_digcam_C.playerHandUse_RMB
// 0x0008 (0x0008 - 0x0000)
struct Prop_digcam_C_PlayerHandUse_RMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_digcam_C_PlayerHandUse_RMB) == 0x000008, "Wrong alignment on Prop_digcam_C_PlayerHandUse_RMB");
static_assert(sizeof(Prop_digcam_C_PlayerHandUse_RMB) == 0x000008, "Wrong size on Prop_digcam_C_PlayerHandUse_RMB");
static_assert(offsetof(Prop_digcam_C_PlayerHandUse_RMB, Player) == 0x000000, "Member 'Prop_digcam_C_PlayerHandUse_RMB::Player' has a wrong offset!");

}

