#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FileSDK

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum FileSDK.EFileSDKFileAnchor
// NumValues: 0x0004
enum class EFileSDKFileAnchor : uint8
{
	Beginning                                = 0,
	Current                                  = 1,
	End                                      = 2,
	EFileSDKFileAnchor_MAX                   = 3,
};

// Enum FileSDK.EFileSDKEncodingOptions
// NumValues: 0x0006
enum class EFileSDKEncodingOptions : uint8
{
	AutoDetect                               = 0,
	ForceAnsi                                = 1,
	ForceUnicode                             = 2,
	ForceUTF8                                = 3,
	ForceUTF8WithoutBOM                      = 4,
	EFileSDKEncodingOptions_MAX              = 5,
};

// Enum FileSDK.EFileSDKFileType
// NumValues: 0x0003
enum class EFileSDKFileType : uint8
{
	File                                     = 0,
	Directory                                = 1,
	EFileSDKFileType_MAX                     = 2,
};

// ScriptStruct FileSDK.FileSDKDelegatePreInfo
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FFileSDKDelegatePreInfo final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFileSDKDelegatePreInfo) == 0x000004, "Wrong alignment on FFileSDKDelegatePreInfo");
static_assert(sizeof(FFileSDKDelegatePreInfo) == 0x000008, "Wrong size on FFileSDKDelegatePreInfo");

// ScriptStruct FileSDK.FileSDKFileInfo
// 0x0048 (0x0048 - 0x0000)
struct FFileSDKFileInfo final
{
public:
	class FString                                 AbsolutePath;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreationTime;                                      // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              AccessTime;                                        // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ModificationTime;                                  // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         FileSize;                                          // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDirectory;                                      // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsReadOnly;                                       // 0x0041(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x0042(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43[0x5];                                       // 0x0043(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFileSDKFileInfo) == 0x000008, "Wrong alignment on FFileSDKFileInfo");
static_assert(sizeof(FFileSDKFileInfo) == 0x000048, "Wrong size on FFileSDKFileInfo");
static_assert(offsetof(FFileSDKFileInfo, AbsolutePath) == 0x000000, "Member 'FFileSDKFileInfo::AbsolutePath' has a wrong offset!");
static_assert(offsetof(FFileSDKFileInfo, Filename) == 0x000010, "Member 'FFileSDKFileInfo::Filename' has a wrong offset!");
static_assert(offsetof(FFileSDKFileInfo, CreationTime) == 0x000020, "Member 'FFileSDKFileInfo::CreationTime' has a wrong offset!");
static_assert(offsetof(FFileSDKFileInfo, AccessTime) == 0x000028, "Member 'FFileSDKFileInfo::AccessTime' has a wrong offset!");
static_assert(offsetof(FFileSDKFileInfo, ModificationTime) == 0x000030, "Member 'FFileSDKFileInfo::ModificationTime' has a wrong offset!");
static_assert(offsetof(FFileSDKFileInfo, FileSize) == 0x000038, "Member 'FFileSDKFileInfo::FileSize' has a wrong offset!");
static_assert(offsetof(FFileSDKFileInfo, bIsDirectory) == 0x000040, "Member 'FFileSDKFileInfo::bIsDirectory' has a wrong offset!");
static_assert(offsetof(FFileSDKFileInfo, bIsReadOnly) == 0x000041, "Member 'FFileSDKFileInfo::bIsReadOnly' has a wrong offset!");
static_assert(offsetof(FFileSDKFileInfo, bIsValid) == 0x000042, "Member 'FFileSDKFileInfo::bIsValid' has a wrong offset!");

}

