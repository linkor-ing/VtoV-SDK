#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RadiationComponent

#include "Basic.hpp"

#include "RadiationComponent_classes.hpp"
#include "RadiationComponent_parameters.hpp"


namespace SDK
{

// Function radiationComponent.radiationComponent_C.ExecuteUbergraph_radiationComponent
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void URadiationComponent_C::ExecuteUbergraph_radiationComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("radiationComponent_C", "ExecuteUbergraph_radiationComponent");

	Params::RadiationComponent_C_ExecuteUbergraph_radiationComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function radiationComponent.radiationComponent_C.Dest
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DestroyedActor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void URadiationComponent_C::Dest(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("radiationComponent_C", "Dest");

	Params::RadiationComponent_C_Dest Parms{};

	Parms.DestroyedActor = DestroyedActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function radiationComponent.radiationComponent_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void URadiationComponent_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("radiationComponent_C", "ReceiveTick");

	Params::RadiationComponent_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function radiationComponent.radiationComponent_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void URadiationComponent_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("radiationComponent_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function radiationComponent.radiationComponent_C.calcRadAmount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          PointA                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          PointB                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Rad                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void URadiationComponent_C::CalcRadAmount(const struct FVector& PointA, const struct FVector& PointB, float* Rad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("radiationComponent_C", "calcRadAmount");

	Params::RadiationComponent_C_CalcRadAmount Parms{};

	Parms.PointA = std::move(PointA);
	Parms.PointB = std::move(PointB);

	UObject::ProcessEvent(Func, &Parms);

	if (Rad != nullptr)
		*Rad = Parms.Rad;
}

}

