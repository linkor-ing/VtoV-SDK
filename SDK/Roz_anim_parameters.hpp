#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Roz_anim

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Enum_interactionActions_structs.hpp"
#include "Struct_save_structs.hpp"
#include "Engine_structs.hpp"
#include "Struct_triggerSave_structs.hpp"
#include "Struct_mString_structs.hpp"
#include "Struct_mFloat_structs.hpp"
#include "Struct_mBool_structs.hpp"
#include "InputCore_structs.hpp"
#include "Struct_settings_structs.hpp"


namespace SDK::Params
{

// Function roz_anim.roz_anim_C.ExecuteUbergraph_roz_anim
// 0x0950 (0x0950 - 0x0000)
struct Roz_anim_C_ExecuteUbergraph_roz_anim final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   K2Node_CustomEvent_NotifyName_4;                   // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NotifyName_3;                   // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_1;            // 0x0024(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   K2Node_CustomEvent_NotifyName_2;                   // 0x0034(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_2;            // 0x003C(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   K2Node_CustomEvent_NotifyName_1;                   // 0x004C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_3;            // 0x0054(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   K2Node_CustomEvent_NotifyName;                     // 0x0064(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_4;            // 0x006C(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   Temp_name_Variable;                                // 0x007C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue;  // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_1;                       // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_1; // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_2;                       // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_3;                       // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1FCF[0x3];                                     // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_2; // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_3; // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_4;                       // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_4; // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_4;                             // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_5;                                // 0x00B4(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_1FD0[0x4];                                     // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_actor_1;                              // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_impact_1;                             // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1FD1[0x4];                                     // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AWaterVolume_C*                         K2Node_Event_water_3;                              // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWaterVolume_C*                         K2Node_Event_water_2;                              // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWaterVolume_C*                         K2Node_Event_water_1;                              // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWaterVolume_C*                         K2Node_Event_water;                                // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_activate;                             // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_static;                               // 0x0179(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_frozen;                               // 0x017A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_active_1;                             // 0x017B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1FD2[0x4];                                     // 0x017C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_actor;                                // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_3;                             // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_4;                                // 0x018C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                K2Node_Event_impact;                               // 0x0214(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_skipSetting;                          // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1FD3[0x7];                                     // 0x0221(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_Event_key_2;                                // 0x0228(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_11;                            // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_3;                                // 0x0240(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         K2Node_Event_damage_2;                             // 0x02C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_fuel;                                 // 0x02CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_10;                            // 0x02D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_2;                                // 0x02D8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         K2Node_Event_index_1;                              // 0x0360(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_interactionActions                       K2Node_Event_action;                               // 0x0364(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1FD4[0x3];                                     // 0x0365(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_9;                             // 0x0368(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_8;                             // 0x0370(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_1;                             // 0x0378(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_location_1;                           // 0x037C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_7;                             // 0x0388(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_6;                             // 0x0390(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_5;                             // 0x0398(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_wheelDelta;                           // 0x03A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1FD5[0x4];                                     // 0x03A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_4;                             // 0x03A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Event_mouse;                                // 0x03B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_3;                             // 0x03B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_Event_key_1;                                // 0x03C0(0x0018)(HasGetValueTypeHash)
	bool                                          K2Node_Event_pressed_1;                            // 0x03D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1FD6[0x3];                                     // 0x03D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_temperature_1;                        // 0x03DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_temperature;                          // 0x03E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_speed;                                // 0x03E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_2;                             // 0x03E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_1;                                // 0x03F0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class FString                                 K2Node_Event_name;                                 // 0x0478(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         K2Node_Event_volume;                               // 0x0488(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1FD7[0x4];                                     // 0x048C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_1;                             // 0x0490(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_location;                             // 0x0498(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage;                               // 0x04A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_clean;                                // 0x04A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1FD8[0x7];                                     // 0x04A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player;                               // 0x04B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit;                                  // 0x04B8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AHook_C*                                K2Node_Event_hook;                                 // 0x0540(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainGamemode_C*                        K2Node_Event_gamemode;                             // 0x0548(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStruct_settings                       K2Node_Event_settings;                             // 0x0550(0x00CC)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1FD9[0x4];                                     // 0x061C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_Event_key;                                  // 0x0620(0x0018)(HasGetValueTypeHash)
	bool                                          K2Node_Event_pressed;                              // 0x0638(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1FDA[0x3];                                     // 0x0639(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Event_color;                                // 0x063C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_ignore;                               // 0x064C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_NewParam;                             // 0x064D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1FDB[0x2];                                     // 0x064E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ACord_C*                                K2Node_Event_cord_1;                               // 0x0650(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACordSocket_C*                          K2Node_Event_socket_1;                             // 0x0658(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACord_C*                                K2Node_Event_cord;                                 // 0x0660(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACordSocket_C*                          K2Node_Event_socket;                               // 0x0668(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_sentFrom;                             // 0x0670(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_active;                               // 0x0678(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1FDC[0x7];                                     // 0x0679(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayMontageCallbackProxy*              CallFunc_CreateProxyObjectForPlayMontage_ReturnValue; // 0x0680(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0688(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1FDD[0x4];                                     // 0x0694(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        CallFunc_SpawnSoundAtLocation_ReturnValue;         // 0x0698(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue;       // 0x06A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x06A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1FDE[0x3];                                     // 0x06A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x06AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VictoryFloatPlusEquals_FloatOut;          // 0x06B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x06B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1FDF[0x3];                                     // 0x06B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Percent_FloatFloat_ReturnValue;           // 0x06B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x06BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x06C0(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x06F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x06FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0708(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0714(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue_1;     // 0x0718(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x0720(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0724(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1FE0[0x3];                                     // 0x0725(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue_1;          // 0x0728(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x0734(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_1FE1[0x4];                                     // 0x07BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x07C0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x07C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x07D0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x07D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x07DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1FE2[0x3];                                     // 0x07DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x07E0(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AMainPlayer_C*                          K2Node_DynamicCast_AsMain_Player;                  // 0x0868(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0870(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1FE3[0x3];                                     // 0x0871(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetTimeAlive_ReturnValue;                 // 0x0874(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_5;                       // 0x0878(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x087C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegSin_ReturnValue;                       // 0x0880(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0884(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0888(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1FE4[0x4];                                     // 0x088C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_owner;                                // 0x0890(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_index;                                // 0x0898(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x089C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1FE5[0x3];                                     // 0x089D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x08A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VictoryFloatMinusEquals_FloatOut;         // 0x08A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x08A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1FE6[0x3];                                     // 0x08A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x08AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue;           // 0x08B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x08B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x08BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_6;                       // 0x08C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_7;                       // 0x08CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_8;                       // 0x08D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_9;                       // 0x08D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue_1;         // 0x08D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x08E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_2;       // 0x08EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x08ED(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x08EE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x08EF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x08F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1FE7[0x7];                                     // 0x08F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode;          // 0x08F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode_1;        // 0x0900(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0908(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1FE8[0x7];                                     // 0x0909(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetOverlappingActors_OverlappingActors;   // 0x0910(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0920(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0924(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1FE9[0x3];                                     // 0x0925(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0928(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0930(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1FEA[0x7];                                     // 0x0931(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInst_C*                            CallFunc_getMainGameInstance_AsGame_Inst;          // 0x0938(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0940(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Roz_anim_C_ExecuteUbergraph_roz_anim) == 0x000010, "Wrong alignment on Roz_anim_C_ExecuteUbergraph_roz_anim");
static_assert(sizeof(Roz_anim_C_ExecuteUbergraph_roz_anim) == 0x000950, "Wrong size on Roz_anim_C_ExecuteUbergraph_roz_anim");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, EntryPoint) == 0x000000, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::EntryPoint' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_CustomEvent_NotifyName_4) == 0x000014, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_CustomEvent_NotifyName_4' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_CustomEvent_NotifyName_3) == 0x00001C, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_CustomEvent_NotifyName_3' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_CreateDelegate_OutputDelegate_1) == 0x000024, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_CustomEvent_NotifyName_2) == 0x000034, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_CustomEvent_NotifyName_2' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_CreateDelegate_OutputDelegate_2) == 0x00003C, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_CustomEvent_NotifyName_1) == 0x00004C, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_CustomEvent_NotifyName_1' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_CreateDelegate_OutputDelegate_3) == 0x000054, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_CustomEvent_NotifyName) == 0x000064, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_CustomEvent_NotifyName' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_CreateDelegate_OutputDelegate_4) == 0x00006C, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, Temp_name_Variable) == 0x00007C, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_Lerp_ReturnValue) == 0x000084, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue) == 0x000088, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_Lerp_ReturnValue_1) == 0x00008C, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_1) == 0x000090, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_Lerp_ReturnValue_2) == 0x000094, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_Lerp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_Lerp_ReturnValue_3) == 0x000098, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_Lerp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_SwitchName_CmpSuccess) == 0x00009C, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_SwitchName_CmpSuccess' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_2) == 0x0000A0, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_3) == 0x0000A4, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_Lerp_ReturnValue_4) == 0x0000A8, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_Lerp_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_4) == 0x0000AC, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_damage_4) == 0x0000B0, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_damage_4' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_hit_5) == 0x0000B4, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_hit_5' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_actor_1) == 0x000140, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_actor_1' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_impact_1) == 0x000148, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_impact_1' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_water_3) == 0x000158, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_water_3' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_water_2) == 0x000160, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_water_2' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_water_1) == 0x000168, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_water_1' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_water) == 0x000170, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_water' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_activate) == 0x000178, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_activate' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_static) == 0x000179, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_static' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_frozen) == 0x00017A, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_frozen' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_active_1) == 0x00017B, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_active_1' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_actor) == 0x000180, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_actor' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_damage_3) == 0x000188, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_damage_3' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_hit_4) == 0x00018C, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_hit_4' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_impact) == 0x000214, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_impact' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_skipSetting) == 0x000220, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_skipSetting' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_key_2) == 0x000228, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_key_2' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_player_11) == 0x000238, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_player_11' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_hit_3) == 0x000240, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_hit_3' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_damage_2) == 0x0002C8, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_damage_2' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_fuel) == 0x0002CC, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_fuel' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_player_10) == 0x0002D0, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_player_10' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_hit_2) == 0x0002D8, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_hit_2' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_index_1) == 0x000360, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_index_1' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_action) == 0x000364, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_action' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_player_9) == 0x000368, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_player_9' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_player_8) == 0x000370, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_player_8' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_damage_1) == 0x000378, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_damage_1' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_location_1) == 0x00037C, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_location_1' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_player_7) == 0x000388, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_player_7' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_player_6) == 0x000390, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_player_6' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_player_5) == 0x000398, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_player_5' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_wheelDelta) == 0x0003A0, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_wheelDelta' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_player_4) == 0x0003A8, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_player_4' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_mouse) == 0x0003B0, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_mouse' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_player_3) == 0x0003B8, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_player_3' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_key_1) == 0x0003C0, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_key_1' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_pressed_1) == 0x0003D8, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_pressed_1' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_temperature_1) == 0x0003DC, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_temperature_1' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_temperature) == 0x0003E0, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_temperature' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_speed) == 0x0003E4, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_speed' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_player_2) == 0x0003E8, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_player_2' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_hit_1) == 0x0003F0, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_hit_1' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_name) == 0x000478, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_name' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_volume) == 0x000488, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_volume' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_player_1) == 0x000490, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_player_1' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_location) == 0x000498, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_location' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_damage) == 0x0004A4, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_damage' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_clean) == 0x0004A8, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_clean' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_player) == 0x0004B0, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_player' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_hit) == 0x0004B8, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_hit' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_hook) == 0x000540, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_hook' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_gamemode) == 0x000548, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_gamemode' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_settings) == 0x000550, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_settings' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_key) == 0x000620, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_key' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_pressed) == 0x000638, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_pressed' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_color) == 0x00063C, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_color' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_ignore) == 0x00064C, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_ignore' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_NewParam) == 0x00064D, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_NewParam' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_cord_1) == 0x000650, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_cord_1' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_socket_1) == 0x000658, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_socket_1' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_cord) == 0x000660, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_cord' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_socket) == 0x000668, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_socket' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_sentFrom) == 0x000670, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_sentFrom' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_active) == 0x000678, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_active' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_CreateProxyObjectForPlayMontage_ReturnValue) == 0x000680, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_CreateProxyObjectForPlayMontage_ReturnValue' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_GetSocketLocation_ReturnValue) == 0x000688, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_SpawnSoundAtLocation_ReturnValue) == 0x000698, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_SpawnSoundAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_SpawnEmitterAtLocation_ReturnValue) == 0x0006A0, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_SpawnEmitterAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_IsValid_ReturnValue) == 0x0006A8, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_DeltaSeconds) == 0x0006AC, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_VictoryFloatPlusEquals_FloatOut) == 0x0006B0, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_VictoryFloatPlusEquals_FloatOut' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0006B4, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_Percent_FloatFloat_ReturnValue) == 0x0006B8, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_Percent_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, Temp_int_Variable) == 0x0006BC, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x0006C0, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_BreakTransform_Location) == 0x0006F0, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_BreakTransform_Rotation) == 0x0006FC, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_BreakTransform_Scale) == 0x000708, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_Add_IntInt_ReturnValue) == 0x000714, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_SpawnEmitterAtLocation_ReturnValue_1) == 0x000718, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_SpawnEmitterAtLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_Round_ReturnValue) == 0x000720, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000724, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_GetSocketLocation_ReturnValue_1) == 0x000728, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_GetSocketLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x000734, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x0007C0, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_ComponentBoundEvent_OtherActor) == 0x0007C8, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_ComponentBoundEvent_OtherComp) == 0x0007D0, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x0007D8, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_ComponentBoundEvent_bFromSweep) == 0x0007DC, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_ComponentBoundEvent_SweepResult) == 0x0007E0, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_DynamicCast_AsMain_Player) == 0x000868, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_DynamicCast_AsMain_Player' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_DynamicCast_bSuccess) == 0x000870, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_GetTimeAlive_ReturnValue) == 0x000874, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_GetTimeAlive_ReturnValue' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_Lerp_ReturnValue_5) == 0x000878, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_Lerp_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00087C, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_DegSin_ReturnValue) == 0x000880, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_DegSin_ReturnValue' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_Add_FloatFloat_ReturnValue) == 0x000884, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000888, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_owner) == 0x000890, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_owner' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, K2Node_Event_index) == 0x000898, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::K2Node_Event_index' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00089C, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x0008A0, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_VictoryFloatMinusEquals_FloatOut) == 0x0008A4, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_VictoryFloatMinusEquals_FloatOut' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x0008A8, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_RandomFloatInRange_ReturnValue) == 0x0008AC, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_GetPlayerCharacter_ReturnValue) == 0x0008B0, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0008B8, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0008BC, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_Lerp_ReturnValue_6) == 0x0008C8, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_Lerp_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_Lerp_ReturnValue_7) == 0x0008CC, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_Lerp_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_Lerp_ReturnValue_8) == 0x0008D0, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_Lerp_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_Lerp_ReturnValue_9) == 0x0008D4, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_Lerp_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_GetPlayerCharacter_ReturnValue_1) == 0x0008D8, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_GetPlayerCharacter_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x0008E0, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_LessEqual_FloatFloat_ReturnValue_2) == 0x0008EC, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_LessEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_Not_PreBool_ReturnValue) == 0x0008ED, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_Not_PreBool_ReturnValue_1) == 0x0008EE, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_BooleanAND_ReturnValue) == 0x0008EF, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_BooleanAND_ReturnValue_1) == 0x0008F0, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_getMainGamemode_AsMain_Gamemode) == 0x0008F8, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_getMainGamemode_AsMain_Gamemode' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_getMainGamemode_AsMain_Gamemode_1) == 0x000900, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_getMainGamemode_AsMain_Gamemode_1' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000908, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_GetOverlappingActors_OverlappingActors) == 0x000910, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_GetOverlappingActors_OverlappingActors' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_Array_Length_ReturnValue) == 0x000920, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_Greater_IntInt_ReturnValue) == 0x000924, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000928, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_BooleanAND_ReturnValue_2) == 0x000930, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_getMainGameInstance_AsGame_Inst) == 0x000938, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_getMainGameInstance_AsGame_Inst' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ExecuteUbergraph_roz_anim, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000940, "Member 'Roz_anim_C_ExecuteUbergraph_roz_anim::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function roz_anim.roz_anim_C.runTrigger
// 0x0010 (0x0010 - 0x0000)
struct Roz_anim_C_RunTrigger final
{
public:
	class AActor*                                 Param_Owner;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Roz_anim_C_RunTrigger) == 0x000008, "Wrong alignment on Roz_anim_C_RunTrigger");
static_assert(sizeof(Roz_anim_C_RunTrigger) == 0x000010, "Wrong size on Roz_anim_C_RunTrigger");
static_assert(offsetof(Roz_anim_C_RunTrigger, Param_Owner) == 0x000000, "Member 'Roz_anim_C_RunTrigger::Param_Owner' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_RunTrigger, Param_Index) == 0x000008, "Member 'Roz_anim_C_RunTrigger::Param_Index' has a wrong offset!");

// Function roz_anim.roz_anim_C.BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct Roz_anim_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1FEB[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Roz_anim_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on Roz_anim_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(Roz_anim_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on Roz_anim_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(Roz_anim_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'Roz_anim_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'Roz_anim_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'Roz_anim_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'Roz_anim_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'Roz_anim_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'Roz_anim_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function roz_anim.roz_anim_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct Roz_anim_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Roz_anim_C_ReceiveTick) == 0x000004, "Wrong alignment on Roz_anim_C_ReceiveTick");
static_assert(sizeof(Roz_anim_C_ReceiveTick) == 0x000004, "Wrong size on Roz_anim_C_ReceiveTick");
static_assert(offsetof(Roz_anim_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'Roz_anim_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function roz_anim.roz_anim_C.setActiveTrigger
// 0x0010 (0x0010 - 0x0000)
struct Roz_anim_C_SetActiveTrigger final
{
public:
	class AActor*                                 SentFrom;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Param_Active;                                      // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Roz_anim_C_SetActiveTrigger) == 0x000008, "Wrong alignment on Roz_anim_C_SetActiveTrigger");
static_assert(sizeof(Roz_anim_C_SetActiveTrigger) == 0x000010, "Wrong size on Roz_anim_C_SetActiveTrigger");
static_assert(offsetof(Roz_anim_C_SetActiveTrigger, SentFrom) == 0x000000, "Member 'Roz_anim_C_SetActiveTrigger::SentFrom' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_SetActiveTrigger, Param_Active) == 0x000008, "Member 'Roz_anim_C_SetActiveTrigger::Param_Active' has a wrong offset!");

// Function roz_anim.roz_anim_C.cordUnplugged
// 0x0010 (0x0010 - 0x0000)
struct Roz_anim_C_CordUnplugged final
{
public:
	class ACord_C*                                Cord;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACordSocket_C*                          Socket;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Roz_anim_C_CordUnplugged) == 0x000008, "Wrong alignment on Roz_anim_C_CordUnplugged");
static_assert(sizeof(Roz_anim_C_CordUnplugged) == 0x000010, "Wrong size on Roz_anim_C_CordUnplugged");
static_assert(offsetof(Roz_anim_C_CordUnplugged, Cord) == 0x000000, "Member 'Roz_anim_C_CordUnplugged::Cord' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_CordUnplugged, Socket) == 0x000008, "Member 'Roz_anim_C_CordUnplugged::Socket' has a wrong offset!");

// Function roz_anim.roz_anim_C.cordPlugged
// 0x0010 (0x0010 - 0x0000)
struct Roz_anim_C_CordPlugged final
{
public:
	class ACord_C*                                Cord;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACordSocket_C*                          Socket;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Roz_anim_C_CordPlugged) == 0x000008, "Wrong alignment on Roz_anim_C_CordPlugged");
static_assert(sizeof(Roz_anim_C_CordPlugged) == 0x000010, "Wrong size on Roz_anim_C_CordPlugged");
static_assert(offsetof(Roz_anim_C_CordPlugged, Cord) == 0x000000, "Member 'Roz_anim_C_CordPlugged::Cord' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_CordPlugged, Socket) == 0x000008, "Member 'Roz_anim_C_CordPlugged::Socket' has a wrong offset!");

// Function roz_anim.roz_anim_C.set_ignoreSave_trigger
// 0x0001 (0x0001 - 0x0000)
struct Roz_anim_C_Set_ignoreSave_trigger final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Roz_anim_C_Set_ignoreSave_trigger) == 0x000001, "Wrong alignment on Roz_anim_C_Set_ignoreSave_trigger");
static_assert(sizeof(Roz_anim_C_Set_ignoreSave_trigger) == 0x000001, "Wrong size on Roz_anim_C_Set_ignoreSave_trigger");
static_assert(offsetof(Roz_anim_C_Set_ignoreSave_trigger, NewParam) == 0x000000, "Member 'Roz_anim_C_Set_ignoreSave_trigger::NewParam' has a wrong offset!");

// Function roz_anim.roz_anim_C.setIgnoreSave
// 0x0001 (0x0001 - 0x0000)
struct Roz_anim_C_SetIgnoreSave final
{
public:
	bool                                          Ignore;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Roz_anim_C_SetIgnoreSave) == 0x000001, "Wrong alignment on Roz_anim_C_SetIgnoreSave");
static_assert(sizeof(Roz_anim_C_SetIgnoreSave) == 0x000001, "Wrong size on Roz_anim_C_SetIgnoreSave");
static_assert(offsetof(Roz_anim_C_SetIgnoreSave, Ignore) == 0x000000, "Member 'Roz_anim_C_SetIgnoreSave::Ignore' has a wrong offset!");

// Function roz_anim.roz_anim_C.applyColor
// 0x0010 (0x0010 - 0x0000)
struct Roz_anim_C_ApplyColor final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Roz_anim_C_ApplyColor) == 0x000004, "Wrong alignment on Roz_anim_C_ApplyColor");
static_assert(sizeof(Roz_anim_C_ApplyColor) == 0x000010, "Wrong size on Roz_anim_C_ApplyColor");
static_assert(offsetof(Roz_anim_C_ApplyColor, Color) == 0x000000, "Member 'Roz_anim_C_ApplyColor::Color' has a wrong offset!");

// Function roz_anim.roz_anim_C.AnyKey
// 0x0020 (0x0020 - 0x0000)
struct Roz_anim_C_AnyKey final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Pressed;                                           // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Roz_anim_C_AnyKey) == 0x000008, "Wrong alignment on Roz_anim_C_AnyKey");
static_assert(sizeof(Roz_anim_C_AnyKey) == 0x000020, "Wrong size on Roz_anim_C_AnyKey");
static_assert(offsetof(Roz_anim_C_AnyKey, Key) == 0x000000, "Member 'Roz_anim_C_AnyKey::Key' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_AnyKey, Pressed) == 0x000018, "Member 'Roz_anim_C_AnyKey::Pressed' has a wrong offset!");

// Function roz_anim.roz_anim_C.settingsApplied
// 0x00CC (0x00CC - 0x0000)
struct Roz_anim_C_SettingsApplied final
{
public:
	struct FStruct_settings                       Settings;                                          // 0x0000(0x00CC)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Roz_anim_C_SettingsApplied) == 0x000004, "Wrong alignment on Roz_anim_C_SettingsApplied");
static_assert(sizeof(Roz_anim_C_SettingsApplied) == 0x0000CC, "Wrong size on Roz_anim_C_SettingsApplied");
static_assert(offsetof(Roz_anim_C_SettingsApplied, Settings) == 0x000000, "Member 'Roz_anim_C_SettingsApplied::Settings' has a wrong offset!");

// Function roz_anim.roz_anim_C.stuffUpgraded
// 0x0008 (0x0008 - 0x0000)
struct Roz_anim_C_StuffUpgraded final
{
public:
	class AMainGamemode_C*                        GameMode;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Roz_anim_C_StuffUpgraded) == 0x000008, "Wrong alignment on Roz_anim_C_StuffUpgraded");
static_assert(sizeof(Roz_anim_C_StuffUpgraded) == 0x000008, "Wrong size on Roz_anim_C_StuffUpgraded");
static_assert(offsetof(Roz_anim_C_StuffUpgraded, GameMode) == 0x000000, "Member 'Roz_anim_C_StuffUpgraded::GameMode' has a wrong offset!");

// Function roz_anim.roz_anim_C.hooked
// 0x0008 (0x0008 - 0x0000)
struct Roz_anim_C_Hooked final
{
public:
	class AHook_C*                                Hook;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Roz_anim_C_Hooked) == 0x000008, "Wrong alignment on Roz_anim_C_Hooked");
static_assert(sizeof(Roz_anim_C_Hooked) == 0x000008, "Wrong size on Roz_anim_C_Hooked");
static_assert(offsetof(Roz_anim_C_Hooked, Hook) == 0x000000, "Member 'Roz_anim_C_Hooked::Hook' has a wrong offset!");

// Function roz_anim.roz_anim_C.playerUsedOn
// 0x0090 (0x0090 - 0x0000)
struct Roz_anim_C_PlayerUsedOn final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Roz_anim_C_PlayerUsedOn) == 0x000008, "Wrong alignment on Roz_anim_C_PlayerUsedOn");
static_assert(sizeof(Roz_anim_C_PlayerUsedOn) == 0x000090, "Wrong size on Roz_anim_C_PlayerUsedOn");
static_assert(offsetof(Roz_anim_C_PlayerUsedOn, Player) == 0x000000, "Member 'Roz_anim_C_PlayerUsedOn::Player' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_PlayerUsedOn, Hit) == 0x000008, "Member 'Roz_anim_C_PlayerUsedOn::Hit' has a wrong offset!");

// Function roz_anim.roz_anim_C.slice
// 0x0001 (0x0001 - 0x0000)
struct Roz_anim_C_Slice final
{
public:
	bool                                          Clean;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Roz_anim_C_Slice) == 0x000001, "Wrong alignment on Roz_anim_C_Slice");
static_assert(sizeof(Roz_anim_C_Slice) == 0x000001, "Wrong size on Roz_anim_C_Slice");
static_assert(offsetof(Roz_anim_C_Slice, Clean) == 0x000000, "Member 'Roz_anim_C_Slice::Clean' has a wrong offset!");

// Function roz_anim.roz_anim_C.reachedByExplosion
// 0x0010 (0x0010 - 0x0000)
struct Roz_anim_C_ReachedByExplosion final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Roz_anim_C_ReachedByExplosion) == 0x000004, "Wrong alignment on Roz_anim_C_ReachedByExplosion");
static_assert(sizeof(Roz_anim_C_ReachedByExplosion) == 0x000010, "Wrong size on Roz_anim_C_ReachedByExplosion");
static_assert(offsetof(Roz_anim_C_ReachedByExplosion, Location) == 0x000000, "Member 'Roz_anim_C_ReachedByExplosion::Location' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ReachedByExplosion, Damage) == 0x00000C, "Member 'Roz_anim_C_ReachedByExplosion::Damage' has a wrong offset!");

// Function roz_anim.roz_anim_C.playerLookAway
// 0x0008 (0x0008 - 0x0000)
struct Roz_anim_C_PlayerLookAway final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Roz_anim_C_PlayerLookAway) == 0x000008, "Wrong alignment on Roz_anim_C_PlayerLookAway");
static_assert(sizeof(Roz_anim_C_PlayerLookAway) == 0x000008, "Wrong size on Roz_anim_C_PlayerLookAway");
static_assert(offsetof(Roz_anim_C_PlayerLookAway, Player) == 0x000000, "Member 'Roz_anim_C_PlayerLookAway::Player' has a wrong offset!");

// Function roz_anim.roz_anim_C.stepped
// 0x0004 (0x0004 - 0x0000)
struct Roz_anim_C_Stepped final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Roz_anim_C_Stepped) == 0x000004, "Wrong alignment on Roz_anim_C_Stepped");
static_assert(sizeof(Roz_anim_C_Stepped) == 0x000004, "Wrong size on Roz_anim_C_Stepped");
static_assert(offsetof(Roz_anim_C_Stepped, Volume) == 0x000000, "Member 'Roz_anim_C_Stepped::Volume' has a wrong offset!");

// Function roz_anim.roz_anim_C.ActionName
// 0x00A0 (0x00A0 - 0x0000)
struct Roz_anim_C_ActionName final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class FString                                 Param_Name;                                        // 0x0090(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Roz_anim_C_ActionName) == 0x000008, "Wrong alignment on Roz_anim_C_ActionName");
static_assert(sizeof(Roz_anim_C_ActionName) == 0x0000A0, "Wrong size on Roz_anim_C_ActionName");
static_assert(offsetof(Roz_anim_C_ActionName, Player) == 0x000000, "Member 'Roz_anim_C_ActionName::Player' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ActionName, Hit) == 0x000008, "Member 'Roz_anim_C_ActionName::Hit' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ActionName, Param_Name) == 0x000090, "Member 'Roz_anim_C_ActionName::Param_Name' has a wrong offset!");

// Function roz_anim.roz_anim_C.accumulateTemperature
// 0x0008 (0x0008 - 0x0000)
struct Roz_anim_C_AccumulateTemperature final
{
public:
	float                                         Temperature;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Roz_anim_C_AccumulateTemperature) == 0x000004, "Wrong alignment on Roz_anim_C_AccumulateTemperature");
static_assert(sizeof(Roz_anim_C_AccumulateTemperature) == 0x000008, "Wrong size on Roz_anim_C_AccumulateTemperature");
static_assert(offsetof(Roz_anim_C_AccumulateTemperature, Temperature) == 0x000000, "Member 'Roz_anim_C_AccumulateTemperature::Temperature' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_AccumulateTemperature, Speed) == 0x000004, "Member 'Roz_anim_C_AccumulateTemperature::Speed' has a wrong offset!");

// Function roz_anim.roz_anim_C.addTemperature
// 0x0004 (0x0004 - 0x0000)
struct Roz_anim_C_AddTemperature final
{
public:
	float                                         Temperature;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Roz_anim_C_AddTemperature) == 0x000004, "Wrong alignment on Roz_anim_C_AddTemperature");
static_assert(sizeof(Roz_anim_C_AddTemperature) == 0x000004, "Wrong size on Roz_anim_C_AddTemperature");
static_assert(offsetof(Roz_anim_C_AddTemperature, Temperature) == 0x000000, "Member 'Roz_anim_C_AddTemperature::Temperature' has a wrong offset!");

// Function roz_anim.roz_anim_C.playerHandAnyKey
// 0x0028 (0x0028 - 0x0000)
struct Roz_anim_C_PlayerHandAnyKey final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   Key;                                               // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Pressed;                                           // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Roz_anim_C_PlayerHandAnyKey) == 0x000008, "Wrong alignment on Roz_anim_C_PlayerHandAnyKey");
static_assert(sizeof(Roz_anim_C_PlayerHandAnyKey) == 0x000028, "Wrong size on Roz_anim_C_PlayerHandAnyKey");
static_assert(offsetof(Roz_anim_C_PlayerHandAnyKey, Player) == 0x000000, "Member 'Roz_anim_C_PlayerHandAnyKey::Player' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_PlayerHandAnyKey, Key) == 0x000008, "Member 'Roz_anim_C_PlayerHandAnyKey::Key' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_PlayerHandAnyKey, Pressed) == 0x000020, "Member 'Roz_anim_C_PlayerHandAnyKey::Pressed' has a wrong offset!");

// Function roz_anim.roz_anim_C.playerHandMouse
// 0x0010 (0x0010 - 0x0000)
struct Roz_anim_C_PlayerHandMouse final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Mouse;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Roz_anim_C_PlayerHandMouse) == 0x000008, "Wrong alignment on Roz_anim_C_PlayerHandMouse");
static_assert(sizeof(Roz_anim_C_PlayerHandMouse) == 0x000010, "Wrong size on Roz_anim_C_PlayerHandMouse");
static_assert(offsetof(Roz_anim_C_PlayerHandMouse, Player) == 0x000000, "Member 'Roz_anim_C_PlayerHandMouse::Player' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_PlayerHandMouse, Mouse) == 0x000008, "Member 'Roz_anim_C_PlayerHandMouse::Mouse' has a wrong offset!");

// Function roz_anim.roz_anim_C.playerHandMouseWheel
// 0x0010 (0x0010 - 0x0000)
struct Roz_anim_C_PlayerHandMouseWheel final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WheelDelta;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Roz_anim_C_PlayerHandMouseWheel) == 0x000008, "Wrong alignment on Roz_anim_C_PlayerHandMouseWheel");
static_assert(sizeof(Roz_anim_C_PlayerHandMouseWheel) == 0x000010, "Wrong size on Roz_anim_C_PlayerHandMouseWheel");
static_assert(offsetof(Roz_anim_C_PlayerHandMouseWheel, Player) == 0x000000, "Member 'Roz_anim_C_PlayerHandMouseWheel::Player' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_PlayerHandMouseWheel, WheelDelta) == 0x000008, "Member 'Roz_anim_C_PlayerHandMouseWheel::WheelDelta' has a wrong offset!");

// Function roz_anim.roz_anim_C.playerHandRelease_LMB
// 0x0008 (0x0008 - 0x0000)
struct Roz_anim_C_PlayerHandRelease_LMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Roz_anim_C_PlayerHandRelease_LMB) == 0x000008, "Wrong alignment on Roz_anim_C_PlayerHandRelease_LMB");
static_assert(sizeof(Roz_anim_C_PlayerHandRelease_LMB) == 0x000008, "Wrong size on Roz_anim_C_PlayerHandRelease_LMB");
static_assert(offsetof(Roz_anim_C_PlayerHandRelease_LMB, Player) == 0x000000, "Member 'Roz_anim_C_PlayerHandRelease_LMB::Player' has a wrong offset!");

// Function roz_anim.roz_anim_C.playerHandRelease_RMB
// 0x0008 (0x0008 - 0x0000)
struct Roz_anim_C_PlayerHandRelease_RMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Roz_anim_C_PlayerHandRelease_RMB) == 0x000008, "Wrong alignment on Roz_anim_C_PlayerHandRelease_RMB");
static_assert(sizeof(Roz_anim_C_PlayerHandRelease_RMB) == 0x000008, "Wrong size on Roz_anim_C_PlayerHandRelease_RMB");
static_assert(offsetof(Roz_anim_C_PlayerHandRelease_RMB, Player) == 0x000000, "Member 'Roz_anim_C_PlayerHandRelease_RMB::Player' has a wrong offset!");

// Function roz_anim.roz_anim_C.exploded
// 0x0010 (0x0010 - 0x0000)
struct Roz_anim_C_Exploded final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Roz_anim_C_Exploded) == 0x000004, "Wrong alignment on Roz_anim_C_Exploded");
static_assert(sizeof(Roz_anim_C_Exploded) == 0x000010, "Wrong size on Roz_anim_C_Exploded");
static_assert(offsetof(Roz_anim_C_Exploded, Damage) == 0x000000, "Member 'Roz_anim_C_Exploded::Damage' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_Exploded, Location) == 0x000004, "Member 'Roz_anim_C_Exploded::Location' has a wrong offset!");

// Function roz_anim.roz_anim_C.playerHandUse_LMB
// 0x0008 (0x0008 - 0x0000)
struct Roz_anim_C_PlayerHandUse_LMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Roz_anim_C_PlayerHandUse_LMB) == 0x000008, "Wrong alignment on Roz_anim_C_PlayerHandUse_LMB");
static_assert(sizeof(Roz_anim_C_PlayerHandUse_LMB) == 0x000008, "Wrong size on Roz_anim_C_PlayerHandUse_LMB");
static_assert(offsetof(Roz_anim_C_PlayerHandUse_LMB, Player) == 0x000000, "Member 'Roz_anim_C_PlayerHandUse_LMB::Player' has a wrong offset!");

// Function roz_anim.roz_anim_C.playerHandUse_RMB
// 0x0008 (0x0008 - 0x0000)
struct Roz_anim_C_PlayerHandUse_RMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Roz_anim_C_PlayerHandUse_RMB) == 0x000008, "Wrong alignment on Roz_anim_C_PlayerHandUse_RMB");
static_assert(sizeof(Roz_anim_C_PlayerHandUse_RMB) == 0x000008, "Wrong size on Roz_anim_C_PlayerHandUse_RMB");
static_assert(offsetof(Roz_anim_C_PlayerHandUse_RMB, Player) == 0x000000, "Member 'Roz_anim_C_PlayerHandUse_RMB::Player' has a wrong offset!");

// Function roz_anim.roz_anim_C.actionOptionIndex
// 0x0098 (0x0098 - 0x0000)
struct Roz_anim_C_ActionOptionIndex final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         Param_Index;                                       // 0x0090(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_interactionActions                       Action;                                            // 0x0094(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Roz_anim_C_ActionOptionIndex) == 0x000008, "Wrong alignment on Roz_anim_C_ActionOptionIndex");
static_assert(sizeof(Roz_anim_C_ActionOptionIndex) == 0x000098, "Wrong size on Roz_anim_C_ActionOptionIndex");
static_assert(offsetof(Roz_anim_C_ActionOptionIndex, Player) == 0x000000, "Member 'Roz_anim_C_ActionOptionIndex::Player' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ActionOptionIndex, Hit) == 0x000008, "Member 'Roz_anim_C_ActionOptionIndex::Hit' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ActionOptionIndex, Param_Index) == 0x000090, "Member 'Roz_anim_C_ActionOptionIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ActionOptionIndex, Action) == 0x000094, "Member 'Roz_anim_C_ActionOptionIndex::Action' has a wrong offset!");

// Function roz_anim.roz_anim_C.ignite
// 0x0004 (0x0004 - 0x0000)
struct Roz_anim_C_Ignite final
{
public:
	float                                         Fuel;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Roz_anim_C_Ignite) == 0x000004, "Wrong alignment on Roz_anim_C_Ignite");
static_assert(sizeof(Roz_anim_C_Ignite) == 0x000004, "Wrong size on Roz_anim_C_Ignite");
static_assert(offsetof(Roz_anim_C_Ignite, Fuel) == 0x000000, "Member 'Roz_anim_C_Ignite::Fuel' has a wrong offset!");

// Function roz_anim.roz_anim_C.fireDamage
// 0x0004 (0x0004 - 0x0000)
struct Roz_anim_C_FireDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Roz_anim_C_FireDamage) == 0x000004, "Wrong alignment on Roz_anim_C_FireDamage");
static_assert(sizeof(Roz_anim_C_FireDamage) == 0x000004, "Wrong size on Roz_anim_C_FireDamage");
static_assert(offsetof(Roz_anim_C_FireDamage, Damage) == 0x000000, "Member 'Roz_anim_C_FireDamage::Damage' has a wrong offset!");

// Function roz_anim.roz_anim_C.steppedOn
// 0x0090 (0x0090 - 0x0000)
struct Roz_anim_C_SteppedOn final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Roz_anim_C_SteppedOn) == 0x000008, "Wrong alignment on Roz_anim_C_SteppedOn");
static_assert(sizeof(Roz_anim_C_SteppedOn) == 0x000090, "Wrong size on Roz_anim_C_SteppedOn");
static_assert(offsetof(Roz_anim_C_SteppedOn, Player) == 0x000000, "Member 'Roz_anim_C_SteppedOn::Player' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_SteppedOn, Hit) == 0x000008, "Member 'Roz_anim_C_SteppedOn::Hit' has a wrong offset!");

// Function roz_anim.roz_anim_C.setKey
// 0x0010 (0x0010 - 0x0000)
struct Roz_anim_C_SetKey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Roz_anim_C_SetKey) == 0x000008, "Wrong alignment on Roz_anim_C_SetKey");
static_assert(sizeof(Roz_anim_C_SetKey) == 0x000010, "Wrong size on Roz_anim_C_SetKey");
static_assert(offsetof(Roz_anim_C_SetKey, Key) == 0x000000, "Member 'Roz_anim_C_SetKey::Key' has a wrong offset!");

// Function roz_anim.roz_anim_C.addDamage
// 0x00A8 (0x00A8 - 0x0000)
struct Roz_anim_C_AddDamage final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x000C(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                Impact;                                            // 0x0094(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipSetting;                                       // 0x00A0(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Roz_anim_C_AddDamage) == 0x000008, "Wrong alignment on Roz_anim_C_AddDamage");
static_assert(sizeof(Roz_anim_C_AddDamage) == 0x0000A8, "Wrong size on Roz_anim_C_AddDamage");
static_assert(offsetof(Roz_anim_C_AddDamage, Actor) == 0x000000, "Member 'Roz_anim_C_AddDamage::Actor' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_AddDamage, Damage) == 0x000008, "Member 'Roz_anim_C_AddDamage::Damage' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_AddDamage, Hit) == 0x00000C, "Member 'Roz_anim_C_AddDamage::Hit' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_AddDamage, Impact) == 0x000094, "Member 'Roz_anim_C_AddDamage::Impact' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_AddDamage, SkipSetting) == 0x0000A0, "Member 'Roz_anim_C_AddDamage::SkipSetting' has a wrong offset!");

// Function roz_anim.roz_anim_C.setPropProps
// 0x0003 (0x0003 - 0x0000)
struct Roz_anim_C_SetPropProps final
{
public:
	bool                                          Static;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Frozen;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Param_Active;                                      // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Roz_anim_C_SetPropProps) == 0x000001, "Wrong alignment on Roz_anim_C_SetPropProps");
static_assert(sizeof(Roz_anim_C_SetPropProps) == 0x000003, "Wrong size on Roz_anim_C_SetPropProps");
static_assert(offsetof(Roz_anim_C_SetPropProps, Static) == 0x000000, "Member 'Roz_anim_C_SetPropProps::Static' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_SetPropProps, Frozen) == 0x000001, "Member 'Roz_anim_C_SetPropProps::Frozen' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_SetPropProps, Param_Active) == 0x000002, "Member 'Roz_anim_C_SetPropProps::Param_Active' has a wrong offset!");

// Function roz_anim.roz_anim_C.virus
// 0x0001 (0x0001 - 0x0000)
struct Roz_anim_C_Virus final
{
public:
	bool                                          Activate;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Roz_anim_C_Virus) == 0x000001, "Wrong alignment on Roz_anim_C_Virus");
static_assert(sizeof(Roz_anim_C_Virus) == 0x000001, "Wrong size on Roz_anim_C_Virus");
static_assert(offsetof(Roz_anim_C_Virus, Activate) == 0x000000, "Member 'Roz_anim_C_Virus::Activate' has a wrong offset!");

// Function roz_anim.roz_anim_C.leaveWaterOrigin
// 0x0008 (0x0008 - 0x0000)
struct Roz_anim_C_LeaveWaterOrigin final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Roz_anim_C_LeaveWaterOrigin) == 0x000008, "Wrong alignment on Roz_anim_C_LeaveWaterOrigin");
static_assert(sizeof(Roz_anim_C_LeaveWaterOrigin) == 0x000008, "Wrong size on Roz_anim_C_LeaveWaterOrigin");
static_assert(offsetof(Roz_anim_C_LeaveWaterOrigin, Water) == 0x000000, "Member 'Roz_anim_C_LeaveWaterOrigin::Water' has a wrong offset!");

// Function roz_anim.roz_anim_C.enterWaterOrigin
// 0x0008 (0x0008 - 0x0000)
struct Roz_anim_C_EnterWaterOrigin final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Roz_anim_C_EnterWaterOrigin) == 0x000008, "Wrong alignment on Roz_anim_C_EnterWaterOrigin");
static_assert(sizeof(Roz_anim_C_EnterWaterOrigin) == 0x000008, "Wrong size on Roz_anim_C_EnterWaterOrigin");
static_assert(offsetof(Roz_anim_C_EnterWaterOrigin, Water) == 0x000000, "Member 'Roz_anim_C_EnterWaterOrigin::Water' has a wrong offset!");

// Function roz_anim.roz_anim_C.leaveWater
// 0x0008 (0x0008 - 0x0000)
struct Roz_anim_C_LeaveWater final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Roz_anim_C_LeaveWater) == 0x000008, "Wrong alignment on Roz_anim_C_LeaveWater");
static_assert(sizeof(Roz_anim_C_LeaveWater) == 0x000008, "Wrong size on Roz_anim_C_LeaveWater");
static_assert(offsetof(Roz_anim_C_LeaveWater, Water) == 0x000000, "Member 'Roz_anim_C_LeaveWater::Water' has a wrong offset!");

// Function roz_anim.roz_anim_C.enterWater
// 0x0008 (0x0008 - 0x0000)
struct Roz_anim_C_EnterWater final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Roz_anim_C_EnterWater) == 0x000008, "Wrong alignment on Roz_anim_C_EnterWater");
static_assert(sizeof(Roz_anim_C_EnterWater) == 0x000008, "Wrong size on Roz_anim_C_EnterWater");
static_assert(offsetof(Roz_anim_C_EnterWater, Water) == 0x000000, "Member 'Roz_anim_C_EnterWater::Water' has a wrong offset!");

// Function roz_anim.roz_anim_C.ImpactDamage
// 0x00A8 (0x00A8 - 0x0000)
struct Roz_anim_C_ImpactDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0004(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_1FEC[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0090(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Impact;                                            // 0x0098(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Roz_anim_C_ImpactDamage) == 0x000008, "Wrong alignment on Roz_anim_C_ImpactDamage");
static_assert(sizeof(Roz_anim_C_ImpactDamage) == 0x0000A8, "Wrong size on Roz_anim_C_ImpactDamage");
static_assert(offsetof(Roz_anim_C_ImpactDamage, Damage) == 0x000000, "Member 'Roz_anim_C_ImpactDamage::Damage' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ImpactDamage, Hit) == 0x000004, "Member 'Roz_anim_C_ImpactDamage::Hit' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ImpactDamage, Actor) == 0x000090, "Member 'Roz_anim_C_ImpactDamage::Actor' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ImpactDamage, Impact) == 0x000098, "Member 'Roz_anim_C_ImpactDamage::Impact' has a wrong offset!");

// Function roz_anim.roz_anim_C.OnCompleted_DDA0A64745A88FA107F01C96C451A154
// 0x0008 (0x0008 - 0x0000)
struct Roz_anim_C_OnCompleted_DDA0A64745A88FA107F01C96C451A154 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Roz_anim_C_OnCompleted_DDA0A64745A88FA107F01C96C451A154) == 0x000004, "Wrong alignment on Roz_anim_C_OnCompleted_DDA0A64745A88FA107F01C96C451A154");
static_assert(sizeof(Roz_anim_C_OnCompleted_DDA0A64745A88FA107F01C96C451A154) == 0x000008, "Wrong size on Roz_anim_C_OnCompleted_DDA0A64745A88FA107F01C96C451A154");
static_assert(offsetof(Roz_anim_C_OnCompleted_DDA0A64745A88FA107F01C96C451A154, NotifyName) == 0x000000, "Member 'Roz_anim_C_OnCompleted_DDA0A64745A88FA107F01C96C451A154::NotifyName' has a wrong offset!");

// Function roz_anim.roz_anim_C.OnBlendOut_DDA0A64745A88FA107F01C96C451A154
// 0x0008 (0x0008 - 0x0000)
struct Roz_anim_C_OnBlendOut_DDA0A64745A88FA107F01C96C451A154 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Roz_anim_C_OnBlendOut_DDA0A64745A88FA107F01C96C451A154) == 0x000004, "Wrong alignment on Roz_anim_C_OnBlendOut_DDA0A64745A88FA107F01C96C451A154");
static_assert(sizeof(Roz_anim_C_OnBlendOut_DDA0A64745A88FA107F01C96C451A154) == 0x000008, "Wrong size on Roz_anim_C_OnBlendOut_DDA0A64745A88FA107F01C96C451A154");
static_assert(offsetof(Roz_anim_C_OnBlendOut_DDA0A64745A88FA107F01C96C451A154, NotifyName) == 0x000000, "Member 'Roz_anim_C_OnBlendOut_DDA0A64745A88FA107F01C96C451A154::NotifyName' has a wrong offset!");

// Function roz_anim.roz_anim_C.OnInterrupted_DDA0A64745A88FA107F01C96C451A154
// 0x0008 (0x0008 - 0x0000)
struct Roz_anim_C_OnInterrupted_DDA0A64745A88FA107F01C96C451A154 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Roz_anim_C_OnInterrupted_DDA0A64745A88FA107F01C96C451A154) == 0x000004, "Wrong alignment on Roz_anim_C_OnInterrupted_DDA0A64745A88FA107F01C96C451A154");
static_assert(sizeof(Roz_anim_C_OnInterrupted_DDA0A64745A88FA107F01C96C451A154) == 0x000008, "Wrong size on Roz_anim_C_OnInterrupted_DDA0A64745A88FA107F01C96C451A154");
static_assert(offsetof(Roz_anim_C_OnInterrupted_DDA0A64745A88FA107F01C96C451A154, NotifyName) == 0x000000, "Member 'Roz_anim_C_OnInterrupted_DDA0A64745A88FA107F01C96C451A154::NotifyName' has a wrong offset!");

// Function roz_anim.roz_anim_C.OnNotifyBegin_DDA0A64745A88FA107F01C96C451A154
// 0x0008 (0x0008 - 0x0000)
struct Roz_anim_C_OnNotifyBegin_DDA0A64745A88FA107F01C96C451A154 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Roz_anim_C_OnNotifyBegin_DDA0A64745A88FA107F01C96C451A154) == 0x000004, "Wrong alignment on Roz_anim_C_OnNotifyBegin_DDA0A64745A88FA107F01C96C451A154");
static_assert(sizeof(Roz_anim_C_OnNotifyBegin_DDA0A64745A88FA107F01C96C451A154) == 0x000008, "Wrong size on Roz_anim_C_OnNotifyBegin_DDA0A64745A88FA107F01C96C451A154");
static_assert(offsetof(Roz_anim_C_OnNotifyBegin_DDA0A64745A88FA107F01C96C451A154, NotifyName) == 0x000000, "Member 'Roz_anim_C_OnNotifyBegin_DDA0A64745A88FA107F01C96C451A154::NotifyName' has a wrong offset!");

// Function roz_anim.roz_anim_C.OnNotifyEnd_DDA0A64745A88FA107F01C96C451A154
// 0x0008 (0x0008 - 0x0000)
struct Roz_anim_C_OnNotifyEnd_DDA0A64745A88FA107F01C96C451A154 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Roz_anim_C_OnNotifyEnd_DDA0A64745A88FA107F01C96C451A154) == 0x000004, "Wrong alignment on Roz_anim_C_OnNotifyEnd_DDA0A64745A88FA107F01C96C451A154");
static_assert(sizeof(Roz_anim_C_OnNotifyEnd_DDA0A64745A88FA107F01C96C451A154) == 0x000008, "Wrong size on Roz_anim_C_OnNotifyEnd_DDA0A64745A88FA107F01C96C451A154");
static_assert(offsetof(Roz_anim_C_OnNotifyEnd_DDA0A64745A88FA107F01C96C451A154, NotifyName) == 0x000000, "Member 'Roz_anim_C_OnNotifyEnd_DDA0A64745A88FA107F01C96C451A154::NotifyName' has a wrong offset!");

// Function roz_anim.roz_anim_C.getTriggerData
// 0x00F0 (0x00F0 - 0x0000)
struct Roz_anim_C_GetTriggerData final
{
public:
	struct FStruct_triggerSave                    Data;                                              // 0x0000(0x00F0)(Parm, OutParm, HasGetValueTypeHash)
};
static_assert(alignof(Roz_anim_C_GetTriggerData) == 0x000010, "Wrong alignment on Roz_anim_C_GetTriggerData");
static_assert(sizeof(Roz_anim_C_GetTriggerData) == 0x0000F0, "Wrong size on Roz_anim_C_GetTriggerData");
static_assert(offsetof(Roz_anim_C_GetTriggerData, Data) == 0x000000, "Member 'Roz_anim_C_GetTriggerData::Data' has a wrong offset!");

// Function roz_anim.roz_anim_C.loadTriggerData
// 0x0100 (0x0100 - 0x0000)
struct Roz_anim_C_LoadTriggerData final
{
public:
	struct FStruct_triggerSave                    Data;                                              // 0x0000(0x00F0)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x00F0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Roz_anim_C_LoadTriggerData) == 0x000010, "Wrong alignment on Roz_anim_C_LoadTriggerData");
static_assert(sizeof(Roz_anim_C_LoadTriggerData) == 0x000100, "Wrong size on Roz_anim_C_LoadTriggerData");
static_assert(offsetof(Roz_anim_C_LoadTriggerData, Data) == 0x000000, "Member 'Roz_anim_C_LoadTriggerData::Data' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_LoadTriggerData, Return) == 0x0000F0, "Member 'Roz_anim_C_LoadTriggerData::Return' has a wrong offset!");

// Function roz_anim.roz_anim_C.ignoreSave_trigger
// 0x0001 (0x0001 - 0x0000)
struct Roz_anim_C_IgnoreSave_trigger final
{
public:
	bool                                          Ignore;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Roz_anim_C_IgnoreSave_trigger) == 0x000001, "Wrong alignment on Roz_anim_C_IgnoreSave_trigger");
static_assert(sizeof(Roz_anim_C_IgnoreSave_trigger) == 0x000001, "Wrong size on Roz_anim_C_IgnoreSave_trigger");
static_assert(offsetof(Roz_anim_C_IgnoreSave_trigger, Ignore) == 0x000000, "Member 'Roz_anim_C_IgnoreSave_trigger::Ignore' has a wrong offset!");

// Function roz_anim.roz_anim_C.ignoreSave
// 0x0001 (0x0001 - 0x0000)
struct Roz_anim_C_IgnoreSave final
{
public:
	bool                                          Param_IgnoreSave;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Roz_anim_C_IgnoreSave) == 0x000001, "Wrong alignment on Roz_anim_C_IgnoreSave");
static_assert(sizeof(Roz_anim_C_IgnoreSave) == 0x000001, "Wrong size on Roz_anim_C_IgnoreSave");
static_assert(offsetof(Roz_anim_C_IgnoreSave, Param_IgnoreSave) == 0x000000, "Member 'Roz_anim_C_IgnoreSave::Param_IgnoreSave' has a wrong offset!");

// Function roz_anim.roz_anim_C.loadData
// 0x0120 (0x0120 - 0x0000)
struct Roz_anim_C_LoadData final
{
public:
	struct FStruct_save                           Data;                                              // 0x0000(0x00C0)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x00C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1FED[0x7];                                     // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_mString                        CallFunc_Array_Get_Item;                           // 0x00C8(0x0010)(HasGetValueTypeHash)
	struct FStruct_mFloat                         CallFunc_Array_Get_Item_1;                         // 0x00D8(0x0010)(HasGetValueTypeHash)
	class FString                                 CallFunc_Array_Get_Item_2;                         // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item_3;                         // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1FEE[0x4];                                     // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_mBool                          CallFunc_Array_Get_Item_4;                         // 0x0100(0x0010)(HasGetValueTypeHash)
	bool                                          CallFunc_Array_Get_Item_5;                         // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Get_Item_6;                         // 0x0111(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Roz_anim_C_LoadData) == 0x000010, "Wrong alignment on Roz_anim_C_LoadData");
static_assert(sizeof(Roz_anim_C_LoadData) == 0x000120, "Wrong size on Roz_anim_C_LoadData");
static_assert(offsetof(Roz_anim_C_LoadData, Data) == 0x000000, "Member 'Roz_anim_C_LoadData::Data' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_LoadData, Return) == 0x0000C0, "Member 'Roz_anim_C_LoadData::Return' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_LoadData, CallFunc_Array_Get_Item) == 0x0000C8, "Member 'Roz_anim_C_LoadData::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_LoadData, CallFunc_Array_Get_Item_1) == 0x0000D8, "Member 'Roz_anim_C_LoadData::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_LoadData, CallFunc_Array_Get_Item_2) == 0x0000E8, "Member 'Roz_anim_C_LoadData::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_LoadData, CallFunc_Array_Get_Item_3) == 0x0000F8, "Member 'Roz_anim_C_LoadData::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_LoadData, CallFunc_Array_Get_Item_4) == 0x000100, "Member 'Roz_anim_C_LoadData::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_LoadData, CallFunc_Array_Get_Item_5) == 0x000110, "Member 'Roz_anim_C_LoadData::CallFunc_Array_Get_Item_5' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_LoadData, CallFunc_Array_Get_Item_6) == 0x000111, "Member 'Roz_anim_C_LoadData::CallFunc_Array_Get_Item_6' has a wrong offset!");

// Function roz_anim.roz_anim_C.getData
// 0x0250 (0x0250 - 0x0000)
struct Roz_anim_C_GetData final
{
public:
	struct FStruct_save                           Data;                                              // 0x0000(0x00C0)(Parm, OutParm, HasGetValueTypeHash)
	TArray<class FString>                         K2Node_MakeArray_Array;                            // 0x00C0(0x0010)(ReferenceParm)
	TArray<float>                                 K2Node_MakeArray_Array_1;                          // 0x00D0(0x0010)(ReferenceParm)
	struct FStruct_mString                        K2Node_MakeStruct_struct_mString;                  // 0x00E0(0x0010)(HasGetValueTypeHash)
	struct FStruct_mFloat                         K2Node_MakeStruct_struct_mFloat;                   // 0x00F0(0x0010)(HasGetValueTypeHash)
	TArray<struct FStruct_mString>                K2Node_MakeArray_Array_2;                          // 0x0100(0x0010)(ReferenceParm)
	TArray<struct FStruct_mFloat>                 K2Node_MakeArray_Array_3;                          // 0x0110(0x0010)(ReferenceParm)
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0120(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	TArray<bool>                                  K2Node_MakeArray_Array_4;                          // 0x0150(0x0010)(ReferenceParm)
	struct FStruct_mBool                          K2Node_MakeStruct_struct_mBool;                    // 0x0160(0x0010)(HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FStruct_mBool>                  K2Node_MakeArray_Array_5;                          // 0x0178(0x0010)(ReferenceParm)
	uint8                                         Pad_1FEF[0x8];                                     // 0x0188(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_save                           K2Node_MakeStruct_struct_save;                     // 0x0190(0x00C0)(HasGetValueTypeHash)
};
static_assert(alignof(Roz_anim_C_GetData) == 0x000010, "Wrong alignment on Roz_anim_C_GetData");
static_assert(sizeof(Roz_anim_C_GetData) == 0x000250, "Wrong size on Roz_anim_C_GetData");
static_assert(offsetof(Roz_anim_C_GetData, Data) == 0x000000, "Member 'Roz_anim_C_GetData::Data' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_GetData, K2Node_MakeArray_Array) == 0x0000C0, "Member 'Roz_anim_C_GetData::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_GetData, K2Node_MakeArray_Array_1) == 0x0000D0, "Member 'Roz_anim_C_GetData::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_GetData, K2Node_MakeStruct_struct_mString) == 0x0000E0, "Member 'Roz_anim_C_GetData::K2Node_MakeStruct_struct_mString' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_GetData, K2Node_MakeStruct_struct_mFloat) == 0x0000F0, "Member 'Roz_anim_C_GetData::K2Node_MakeStruct_struct_mFloat' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_GetData, K2Node_MakeArray_Array_2) == 0x000100, "Member 'Roz_anim_C_GetData::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_GetData, K2Node_MakeArray_Array_3) == 0x000110, "Member 'Roz_anim_C_GetData::K2Node_MakeArray_Array_3' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_GetData, CallFunc_GetTransform_ReturnValue) == 0x000120, "Member 'Roz_anim_C_GetData::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_GetData, K2Node_MakeArray_Array_4) == 0x000150, "Member 'Roz_anim_C_GetData::K2Node_MakeArray_Array_4' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_GetData, K2Node_MakeStruct_struct_mBool) == 0x000160, "Member 'Roz_anim_C_GetData::K2Node_MakeStruct_struct_mBool' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_GetData, CallFunc_GetObjectClass_ReturnValue) == 0x000170, "Member 'Roz_anim_C_GetData::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_GetData, K2Node_MakeArray_Array_5) == 0x000178, "Member 'Roz_anim_C_GetData::K2Node_MakeArray_Array_5' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_GetData, K2Node_MakeStruct_struct_save) == 0x000190, "Member 'Roz_anim_C_GetData::K2Node_MakeStruct_struct_save' has a wrong offset!");

// Function roz_anim.roz_anim_C.skipPreDelete
// 0x0001 (0x0001 - 0x0000)
struct Roz_anim_C_SkipPreDelete final
{
public:
	bool                                          Skip;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Roz_anim_C_SkipPreDelete) == 0x000001, "Wrong alignment on Roz_anim_C_SkipPreDelete");
static_assert(sizeof(Roz_anim_C_SkipPreDelete) == 0x000001, "Wrong size on Roz_anim_C_SkipPreDelete");
static_assert(offsetof(Roz_anim_C_SkipPreDelete, Skip) == 0x000000, "Member 'Roz_anim_C_SkipPreDelete::Skip' has a wrong offset!");

// Function roz_anim.roz_anim_C.dreamInv
// 0x0018 (0x0018 - 0x0000)
struct Roz_anim_C_DreamInv final
{
public:
	TArray<struct FStruct_save>                   Invv;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class ADreamBase_C*                           Base;                                              // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Roz_anim_C_DreamInv) == 0x000008, "Wrong alignment on Roz_anim_C_DreamInv");
static_assert(sizeof(Roz_anim_C_DreamInv) == 0x000018, "Wrong size on Roz_anim_C_DreamInv");
static_assert(offsetof(Roz_anim_C_DreamInv, Invv) == 0x000000, "Member 'Roz_anim_C_DreamInv::Invv' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_DreamInv, Base) == 0x000010, "Member 'Roz_anim_C_DreamInv::Base' has a wrong offset!");

// Function roz_anim.roz_anim_C.getOnlyKey
// 0x0010 (0x0010 - 0x0000)
struct Roz_anim_C_GetOnlyKey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Roz_anim_C_GetOnlyKey) == 0x000008, "Wrong alignment on Roz_anim_C_GetOnlyKey");
static_assert(sizeof(Roz_anim_C_GetOnlyKey) == 0x000010, "Wrong size on Roz_anim_C_GetOnlyKey");
static_assert(offsetof(Roz_anim_C_GetOnlyKey, Key) == 0x000000, "Member 'Roz_anim_C_GetOnlyKey::Key' has a wrong offset!");

// Function roz_anim.roz_anim_C.processKeys
// 0x0028 (0x0028 - 0x0000)
struct Roz_anim_C_ProcessKeys final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1FF0[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_getObjectFromKey_Output;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATrigger_box_C*                         K2Node_DynamicCast_AsTrigger_Box;                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Roz_anim_C_ProcessKeys) == 0x000008, "Wrong alignment on Roz_anim_C_ProcessKeys");
static_assert(sizeof(Roz_anim_C_ProcessKeys) == 0x000028, "Wrong size on Roz_anim_C_ProcessKeys");
static_assert(offsetof(Roz_anim_C_ProcessKeys, Return) == 0x000000, "Member 'Roz_anim_C_ProcessKeys::Return' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ProcessKeys, CallFunc_getMainGamemode_AsMain_Gamemode) == 0x000008, "Member 'Roz_anim_C_ProcessKeys::CallFunc_getMainGamemode_AsMain_Gamemode' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ProcessKeys, CallFunc_getObjectFromKey_Output) == 0x000010, "Member 'Roz_anim_C_ProcessKeys::CallFunc_getObjectFromKey_Output' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ProcessKeys, K2Node_DynamicCast_AsTrigger_Box) == 0x000018, "Member 'Roz_anim_C_ProcessKeys::K2Node_DynamicCast_AsTrigger_Box' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ProcessKeys, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'Roz_anim_C_ProcessKeys::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function roz_anim.roz_anim_C.canBeUsedHold
// 0x0001 (0x0001 - 0x0000)
struct Roz_anim_C_CanBeUsedHold final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Roz_anim_C_CanBeUsedHold) == 0x000001, "Wrong alignment on Roz_anim_C_CanBeUsedHold");
static_assert(sizeof(Roz_anim_C_CanBeUsedHold) == 0x000001, "Wrong size on Roz_anim_C_CanBeUsedHold");
static_assert(offsetof(Roz_anim_C_CanBeUsedHold, Return) == 0x000000, "Member 'Roz_anim_C_CanBeUsedHold::Return' has a wrong offset!");

// Function roz_anim.roz_anim_C.GetKey
// 0x0010 (0x0010 - 0x0000)
struct Roz_anim_C_GetKey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Roz_anim_C_GetKey) == 0x000008, "Wrong alignment on Roz_anim_C_GetKey");
static_assert(sizeof(Roz_anim_C_GetKey) == 0x000010, "Wrong size on Roz_anim_C_GetKey");
static_assert(offsetof(Roz_anim_C_GetKey, Key) == 0x000000, "Member 'Roz_anim_C_GetKey::Key' has a wrong offset!");

// Function roz_anim.roz_anim_C.toolboxFix
// 0x0010 (0x0010 - 0x0000)
struct Roz_anim_C_ToolboxFix final
{
public:
	class AProp_toolbox_C*                        Toolbox;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Roz_anim_C_ToolboxFix) == 0x000008, "Wrong alignment on Roz_anim_C_ToolboxFix");
static_assert(sizeof(Roz_anim_C_ToolboxFix) == 0x000010, "Wrong size on Roz_anim_C_ToolboxFix");
static_assert(offsetof(Roz_anim_C_ToolboxFix, Toolbox) == 0x000000, "Member 'Roz_anim_C_ToolboxFix::Toolbox' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_ToolboxFix, Return) == 0x000008, "Member 'Roz_anim_C_ToolboxFix::Return' has a wrong offset!");

// Function roz_anim.roz_anim_C.setPath
// 0x0018 (0x0018 - 0x0000)
struct Roz_anim_C_SetPath final
{
public:
	TArray<struct FVector>                        Path;                                              // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Return;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Roz_anim_C_SetPath) == 0x000008, "Wrong alignment on Roz_anim_C_SetPath");
static_assert(sizeof(Roz_anim_C_SetPath) == 0x000018, "Wrong size on Roz_anim_C_SetPath");
static_assert(offsetof(Roz_anim_C_SetPath, Path) == 0x000000, "Member 'Roz_anim_C_SetPath::Path' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_SetPath, Return) == 0x000010, "Member 'Roz_anim_C_SetPath::Return' has a wrong offset!");

// Function roz_anim.roz_anim_C.getActionOptions
// 0x0048 (0x0048 - 0x0000)
struct Roz_anim_C_GetActionOptions final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Component;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         Options;                                           // 0x0018(0x0010)(Parm, OutParm)
	TArray<Enum_interactionActions>               Options_enum;                                      // 0x0028(0x0010)(Parm, OutParm)
	TArray<class FText>                           OptionsNamesOverlay;                               // 0x0038(0x0010)(Parm, OutParm)
};
static_assert(alignof(Roz_anim_C_GetActionOptions) == 0x000008, "Wrong alignment on Roz_anim_C_GetActionOptions");
static_assert(sizeof(Roz_anim_C_GetActionOptions) == 0x000048, "Wrong size on Roz_anim_C_GetActionOptions");
static_assert(offsetof(Roz_anim_C_GetActionOptions, Player) == 0x000000, "Member 'Roz_anim_C_GetActionOptions::Player' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_GetActionOptions, Component) == 0x000008, "Member 'Roz_anim_C_GetActionOptions::Component' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_GetActionOptions, Actor) == 0x000010, "Member 'Roz_anim_C_GetActionOptions::Actor' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_GetActionOptions, Options) == 0x000018, "Member 'Roz_anim_C_GetActionOptions::Options' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_GetActionOptions, Options_enum) == 0x000028, "Member 'Roz_anim_C_GetActionOptions::Options_enum' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_GetActionOptions, OptionsNamesOverlay) == 0x000038, "Member 'Roz_anim_C_GetActionOptions::OptionsNamesOverlay' has a wrong offset!");

// Function roz_anim.roz_anim_C.gascanFuel
// 0x0010 (0x0010 - 0x0000)
struct Roz_anim_C_GascanFuel final
{
public:
	class AProp_gascan_C*                         Gascan;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Fueled;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Roz_anim_C_GascanFuel) == 0x000008, "Wrong alignment on Roz_anim_C_GascanFuel");
static_assert(sizeof(Roz_anim_C_GascanFuel) == 0x000010, "Wrong size on Roz_anim_C_GascanFuel");
static_assert(offsetof(Roz_anim_C_GascanFuel, Gascan) == 0x000000, "Member 'Roz_anim_C_GascanFuel::Gascan' has a wrong offset!");
static_assert(offsetof(Roz_anim_C_GascanFuel, Fueled) == 0x000008, "Member 'Roz_anim_C_GascanFuel::Fueled' has a wrong offset!");

// Function roz_anim.roz_anim_C.skipRadial
// 0x0001 (0x0001 - 0x0000)
struct Roz_anim_C_SkipRadial final
{
public:
	bool                                          Skip;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Roz_anim_C_SkipRadial) == 0x000001, "Wrong alignment on Roz_anim_C_SkipRadial");
static_assert(sizeof(Roz_anim_C_SkipRadial) == 0x000001, "Wrong size on Roz_anim_C_SkipRadial");
static_assert(offsetof(Roz_anim_C_SkipRadial, Skip) == 0x000000, "Member 'Roz_anim_C_SkipRadial::Skip' has a wrong offset!");

}

