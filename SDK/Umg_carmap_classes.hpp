#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Umg_carmap

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass umg_carmap.umg_carmap_C
// 0x0048 (0x02A8 - 0x0260)
class UUmg_carmap_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCanvasPanel*                           Canvas;                                            // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TArray<class UUmg_carmapPoint_C*>             Points;                                            // 0x0270(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class AProp_beacon_C*>                 beacons;                                           // 0x0280(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FVector2D                              bords;                                             // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UUmg_carmapPoint_C*>             Minimaps;                                          // 0x0298(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)

public:
	void ExecuteUbergraph_umg_carmap(int32 EntryPoint);
	void SettingsApplied(const struct FStruct_settings& Settings);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void TexturePickerApply(class UUmg_texturePicker_C* Picker, class UTexture2D* Texture, int32 Param_Index);
	void ApplyColor(const struct FLinearColor& Color);
	void PropRenderer_finishProps();
	void GamemodeMakeKeys();
	void AnyKey(const struct FKey& Key, bool Pressed);
	void GamemodePreLoad();
	void Unfocused();
	void Unfoc();
	void StuffUpgraded(class AMainGamemode_C* GameMode);
	void GamemodeBeginPlay();
	void SignalSaved();
	void SignalDeleted();
	void Gen(TArray<class AProp_beacon_C*>& Param_beacons);
	void DreamInv(TArray<struct FStruct_save>& Invv, class ADreamBase_C** Base);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"umg_carmap_C">();
	}
	static class UUmg_carmap_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUmg_carmap_C>();
	}
};
static_assert(alignof(UUmg_carmap_C) == 0x000008, "Wrong alignment on UUmg_carmap_C");
static_assert(sizeof(UUmg_carmap_C) == 0x0002A8, "Wrong size on UUmg_carmap_C");
static_assert(offsetof(UUmg_carmap_C, UberGraphFrame) == 0x000260, "Member 'UUmg_carmap_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUmg_carmap_C, Canvas) == 0x000268, "Member 'UUmg_carmap_C::Canvas' has a wrong offset!");
static_assert(offsetof(UUmg_carmap_C, Points) == 0x000270, "Member 'UUmg_carmap_C::Points' has a wrong offset!");
static_assert(offsetof(UUmg_carmap_C, beacons) == 0x000280, "Member 'UUmg_carmap_C::beacons' has a wrong offset!");
static_assert(offsetof(UUmg_carmap_C, bords) == 0x000290, "Member 'UUmg_carmap_C::bords' has a wrong offset!");
static_assert(offsetof(UUmg_carmap_C, Minimaps) == 0x000298, "Member 'UUmg_carmap_C::Minimaps' has a wrong offset!");

}

