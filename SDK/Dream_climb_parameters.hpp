#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Dream_climb

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function dream_climb.dream_climb_C.ExecuteUbergraph_dream_climb
// 0x0178 (0x0178 - 0x0000)
struct Dream_climb_C_ExecuteUbergraph_dream_climb final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3412[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3413[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0030(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3414[0x4];                                     // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode;          // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          CallFunc_getMainPlayer_AsMain_Player;              // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_addFood_full;                             // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3415[0x3];                                     // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VictoryFloatPlusEquals_FloatOut;          // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_AddRelativeLocation_SweepHitResult;    // 0x00F0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Dream_climb_C_ExecuteUbergraph_dream_climb) == 0x000008, "Wrong alignment on Dream_climb_C_ExecuteUbergraph_dream_climb");
static_assert(sizeof(Dream_climb_C_ExecuteUbergraph_dream_climb) == 0x000178, "Wrong size on Dream_climb_C_ExecuteUbergraph_dream_climb");
static_assert(offsetof(Dream_climb_C_ExecuteUbergraph_dream_climb, EntryPoint) == 0x000000, "Member 'Dream_climb_C_ExecuteUbergraph_dream_climb::EntryPoint' has a wrong offset!");
static_assert(offsetof(Dream_climb_C_ExecuteUbergraph_dream_climb, CallFunc_Add_FloatFloat_ReturnValue) == 0x000004, "Member 'Dream_climb_C_ExecuteUbergraph_dream_climb::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dream_climb_C_ExecuteUbergraph_dream_climb, K2Node_Event_DeltaSeconds) == 0x000008, "Member 'Dream_climb_C_ExecuteUbergraph_dream_climb::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(Dream_climb_C_ExecuteUbergraph_dream_climb, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000010, "Member 'Dream_climb_C_ExecuteUbergraph_dream_climb::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Dream_climb_C_ExecuteUbergraph_dream_climb, K2Node_ComponentBoundEvent_OtherActor) == 0x000018, "Member 'Dream_climb_C_ExecuteUbergraph_dream_climb::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(Dream_climb_C_ExecuteUbergraph_dream_climb, K2Node_ComponentBoundEvent_OtherComp) == 0x000020, "Member 'Dream_climb_C_ExecuteUbergraph_dream_climb::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(Dream_climb_C_ExecuteUbergraph_dream_climb, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000028, "Member 'Dream_climb_C_ExecuteUbergraph_dream_climb::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Dream_climb_C_ExecuteUbergraph_dream_climb, K2Node_ComponentBoundEvent_bFromSweep) == 0x00002C, "Member 'Dream_climb_C_ExecuteUbergraph_dream_climb::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(Dream_climb_C_ExecuteUbergraph_dream_climb, K2Node_ComponentBoundEvent_SweepResult) == 0x000030, "Member 'Dream_climb_C_ExecuteUbergraph_dream_climb::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(Dream_climb_C_ExecuteUbergraph_dream_climb, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0000B8, "Member 'Dream_climb_C_ExecuteUbergraph_dream_climb::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dream_climb_C_ExecuteUbergraph_dream_climb, CallFunc_getMainGamemode_AsMain_Gamemode) == 0x0000C0, "Member 'Dream_climb_C_ExecuteUbergraph_dream_climb::CallFunc_getMainGamemode_AsMain_Gamemode' has a wrong offset!");
static_assert(offsetof(Dream_climb_C_ExecuteUbergraph_dream_climb, CallFunc_getMainPlayer_AsMain_Player) == 0x0000C8, "Member 'Dream_climb_C_ExecuteUbergraph_dream_climb::CallFunc_getMainPlayer_AsMain_Player' has a wrong offset!");
static_assert(offsetof(Dream_climb_C_ExecuteUbergraph_dream_climb, CallFunc_addFood_full) == 0x0000D0, "Member 'Dream_climb_C_ExecuteUbergraph_dream_climb::CallFunc_addFood_full' has a wrong offset!");
static_assert(offsetof(Dream_climb_C_ExecuteUbergraph_dream_climb, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x0000D4, "Member 'Dream_climb_C_ExecuteUbergraph_dream_climb::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dream_climb_C_ExecuteUbergraph_dream_climb, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000D8, "Member 'Dream_climb_C_ExecuteUbergraph_dream_climb::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dream_climb_C_ExecuteUbergraph_dream_climb, CallFunc_VictoryFloatPlusEquals_FloatOut) == 0x0000DC, "Member 'Dream_climb_C_ExecuteUbergraph_dream_climb::CallFunc_VictoryFloatPlusEquals_FloatOut' has a wrong offset!");
static_assert(offsetof(Dream_climb_C_ExecuteUbergraph_dream_climb, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0000E0, "Member 'Dream_climb_C_ExecuteUbergraph_dream_climb::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Dream_climb_C_ExecuteUbergraph_dream_climb, CallFunc_MakeVector_ReturnValue) == 0x0000E4, "Member 'Dream_climb_C_ExecuteUbergraph_dream_climb::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dream_climb_C_ExecuteUbergraph_dream_climb, CallFunc_K2_AddRelativeLocation_SweepHitResult) == 0x0000F0, "Member 'Dream_climb_C_ExecuteUbergraph_dream_climb::CallFunc_K2_AddRelativeLocation_SweepHitResult' has a wrong offset!");

// Function dream_climb.dream_climb_C.BndEvt__dream_climb_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct Dream_climb_C_BndEvt__dream_climb_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3416[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Dream_climb_C_BndEvt__dream_climb_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on Dream_climb_C_BndEvt__dream_climb_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(Dream_climb_C_BndEvt__dream_climb_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on Dream_climb_C_BndEvt__dream_climb_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(Dream_climb_C_BndEvt__dream_climb_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'Dream_climb_C_BndEvt__dream_climb_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Dream_climb_C_BndEvt__dream_climb_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'Dream_climb_C_BndEvt__dream_climb_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(Dream_climb_C_BndEvt__dream_climb_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'Dream_climb_C_BndEvt__dream_climb_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(Dream_climb_C_BndEvt__dream_climb_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'Dream_climb_C_BndEvt__dream_climb_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Dream_climb_C_BndEvt__dream_climb_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'Dream_climb_C_BndEvt__dream_climb_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(Dream_climb_C_BndEvt__dream_climb_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'Dream_climb_C_BndEvt__dream_climb_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function dream_climb.dream_climb_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct Dream_climb_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Dream_climb_C_ReceiveTick) == 0x000004, "Wrong alignment on Dream_climb_C_ReceiveTick");
static_assert(sizeof(Dream_climb_C_ReceiveTick) == 0x000004, "Wrong size on Dream_climb_C_ReceiveTick");
static_assert(offsetof(Dream_climb_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'Dream_climb_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

}

