#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Nail

#include "Basic.hpp"

#include "Nail_classes.hpp"
#include "Nail_parameters.hpp"


namespace SDK
{

// Function nail.nail_C.ExecuteUbergraph_nail
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ANail_C::ExecuteUbergraph_nail(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("nail_C", "ExecuteUbergraph_nail");

	Params::Nail_C_ExecuteUbergraph_nail Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function nail.nail_C.applyColor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ANail_C::ApplyColor(const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("nail_C", "applyColor");

	Params::Nail_C_ApplyColor Parms{};

	Parms.Color = std::move(Color);

	UObject::ProcessEvent(Func, &Parms);
}


// Function nail.nail_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ANail_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("nail_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function nail.nail_C.texturePickerApply
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUmg_texturePicker_C*             Picker                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTexture2D*                       Texture                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ANail_C::TexturePickerApply(class UUmg_texturePicker_C* Picker, class UTexture2D* Texture, int32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("nail_C", "texturePickerApply");

	Params::Nail_C_TexturePickerApply Parms{};

	Parms.Picker = Picker;
	Parms.Texture = Texture;
	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);
}


// Function nail.nail_C.assign
// (BlueprintCallable, BlueprintEvent)

void ANail_C::Assign()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("nail_C", "assign");

	UObject::ProcessEvent(Func, nullptr);
}


// Function nail.nail_C.d1
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DestroyedActor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ANail_C::D1(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("nail_C", "d1");

	Params::Nail_C_D1 Parms{};

	Parms.DestroyedActor = DestroyedActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function nail.nail_C.d2
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DestroyedActor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ANail_C::D2(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("nail_C", "d2");

	Params::Nail_C_D2 Parms{};

	Parms.DestroyedActor = DestroyedActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function nail.nail_C.ReceiveDestroyed
// (Event, Public, BlueprintEvent)

void ANail_C::ReceiveDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("nail_C", "ReceiveDestroyed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function nail.nail_C.aea
// (BlueprintCallable, BlueprintEvent)

void ANail_C::Aea()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("nail_C", "aea");

	UObject::ProcessEvent(Func, nullptr);
}


// Function nail.nail_C.BndEvt__PhysicsConstraint_K2Node_ComponentBoundEvent_0_ConstraintBrokenSignature__DelegateSignature
// (BlueprintEvent)
// Parameters:
// int32                                   ConstraintIndex                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ANail_C::BndEvt__PhysicsConstraint_K2Node_ComponentBoundEvent_0_ConstraintBrokenSignature__DelegateSignature(int32 ConstraintIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("nail_C", "BndEvt__PhysicsConstraint_K2Node_ComponentBoundEvent_0_ConstraintBrokenSignature__DelegateSignature");

	Params::Nail_C_BndEvt__PhysicsConstraint_K2Node_ComponentBoundEvent_0_ConstraintBrokenSignature__DelegateSignature Parms{};

	Parms.ConstraintIndex = ConstraintIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function nail.nail_C.signalDeleted
// (Public, BlueprintCallable, BlueprintEvent)

void ANail_C::SignalDeleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("nail_C", "signalDeleted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function nail.nail_C.propRenderer_finishProps
// (Public, BlueprintCallable, BlueprintEvent)

void ANail_C::PropRenderer_finishProps()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("nail_C", "propRenderer_finishProps");

	UObject::ProcessEvent(Func, nullptr);
}


// Function nail.nail_C.signalSaved
// (Public, BlueprintCallable, BlueprintEvent)

void ANail_C::SignalSaved()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("nail_C", "signalSaved");

	UObject::ProcessEvent(Func, nullptr);
}


// Function nail.nail_C.stuffUpgraded
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMainGamemode_C*                  GameMode                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ANail_C::StuffUpgraded(class AMainGamemode_C* GameMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("nail_C", "stuffUpgraded");

	Params::Nail_C_StuffUpgraded Parms{};

	Parms.GameMode = GameMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function nail.nail_C.gamemodeBeginPlay
// (Public, BlueprintCallable, BlueprintEvent)

void ANail_C::GamemodeBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("nail_C", "gamemodeBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function nail.nail_C.gamemodeMakeKeys
// (Public, BlueprintCallable, BlueprintEvent)

void ANail_C::GamemodeMakeKeys()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("nail_C", "gamemodeMakeKeys");

	UObject::ProcessEvent(Func, nullptr);
}


// Function nail.nail_C.AnyKey
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FKey                             Param_Key                                              (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    Pressed                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ANail_C::AnyKey(const struct FKey& Param_Key, bool Pressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("nail_C", "AnyKey");

	Params::Nail_C_AnyKey Parms{};

	Parms.Param_Key = std::move(Param_Key);
	Parms.Pressed = Pressed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function nail.nail_C.gamemodePreLoad
// (Public, BlueprintCallable, BlueprintEvent)

void ANail_C::GamemodePreLoad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("nail_C", "gamemodePreLoad");

	UObject::ProcessEvent(Func, nullptr);
}


// Function nail.nail_C.unfocused
// (Public, BlueprintCallable, BlueprintEvent)

void ANail_C::Unfocused()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("nail_C", "unfocused");

	UObject::ProcessEvent(Func, nullptr);
}


// Function nail.nail_C.unfoc
// (Public, BlueprintCallable, BlueprintEvent)

void ANail_C::Unfoc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("nail_C", "unfoc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function nail.nail_C.settingsApplied
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FStruct_settings                 Settings                                               (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ANail_C::SettingsApplied(const struct FStruct_settings& Settings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("nail_C", "settingsApplied");

	Params::Nail_C_SettingsApplied Parms{};

	Parms.Settings = std::move(Settings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function nail.nail_C.N
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Param_A                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          B                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ANail_C::N(struct FVector* Param_A, struct FVector* B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("nail_C", "N");

	Params::Nail_C_N Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_A != nullptr)
		*Param_A = std::move(Parms.Param_A);

	if (B != nullptr)
		*B = std::move(Parms.B);
}


// Function nail.nail_C.nailNail
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_A                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Fail                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ANail_C::NailNail(bool Param_A, bool* Fail)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("nail_C", "nailNail");

	Params::Nail_C_NailNail Parms{};

	Parms.Param_A = Param_A;

	UObject::ProcessEvent(Func, &Parms);

	if (Fail != nullptr)
		*Fail = Parms.Fail;
}


// Function nail.nail_C.attach
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_A                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Fail                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ANail_C::Attach(bool Param_A, bool* Fail)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("nail_C", "attach");

	Params::Nail_C_Attach Parms{};

	Parms.Param_A = Param_A;

	UObject::ProcessEvent(Func, &Parms);

	if (Fail != nullptr)
		*Fail = Parms.Fail;
}


// Function nail.nail_C.setRefLoc
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ANail_C::SetRefLoc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("nail_C", "setRefLoc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function nail.nail_C.detached
// (Public, BlueprintCallable, BlueprintEvent)

void ANail_C::Detached()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("nail_C", "detached");

	UObject::ProcessEvent(Func, nullptr);
}


// Function nail.nail_C.stickNoise
// (Public, BlueprintCallable, BlueprintEvent)

void ANail_C::StickNoise()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("nail_C", "stickNoise");

	UObject::ProcessEvent(Func, nullptr);
}


// Function nail.nail_C.addDamage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       Hit                                                    (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// struct FVector                          Impact                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SkipSetting                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ANail_C::AddDamage(class AActor* Actor, float Damage, const struct FHitResult& Hit, const struct FVector& Impact, bool SkipSetting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("nail_C", "addDamage");

	Params::Nail_C_AddDamage Parms{};

	Parms.Actor = Actor;
	Parms.Damage = Damage;
	Parms.Hit = std::move(Hit);
	Parms.Impact = std::move(Impact);
	Parms.SkipSetting = SkipSetting;

	UObject::ProcessEvent(Func, &Parms);
}


// Function nail.nail_C.loadData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FStruct_save                     Data                                                   (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ANail_C::LoadData(const struct FStruct_save& Data, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("nail_C", "loadData");

	Params::Nail_C_LoadData Parms{};

	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function nail.nail_C.getData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FStruct_save                     Data                                                   (Parm, OutParm, HasGetValueTypeHash)

void ANail_C::GetData(struct FStruct_save* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("nail_C", "getData");

	Params::Nail_C_GetData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Data != nullptr)
		*Data = std::move(Parms.Data);
}


// Function nail.nail_C.processKeys
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ANail_C::ProcessKeys(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("nail_C", "processKeys");

	Params::Nail_C_ProcessKeys Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function nail.nail_C.dreamInv
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FStruct_save>             Invv                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class ADreamBase_C*                     Base                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ANail_C::DreamInv(TArray<struct FStruct_save>& Invv, class ADreamBase_C** Base)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("nail_C", "dreamInv");

	Params::Nail_C_DreamInv Parms{};

	Parms.Invv = std::move(Invv);

	UObject::ProcessEvent(Func, &Parms);

	Invv = std::move(Parms.Invv);

	if (Base != nullptr)
		*Base = Parms.Base;
}

}

