#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GrayTest

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AIModule_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass grayTest.grayTest_C
// 0x0050 (0x0510 - 0x04C0)
class AGrayTest_C final : public ACharacter
{
public:
	uint8                                         Pad_4B8[0x8];                                      // 0x04B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UComp_radarPoint_C*                     Comp_radarPoint;                                   // 0x04C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x04D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Audio;                                             // 0x04D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArm;                                         // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x04E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class AGrayTest_C*>                    Team;                                              // 0x04F0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	class AGrayEventController_C*                 GrayController;                                    // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_grayTest(int32 EntryPoint);
	void DisableCams();
	void BndEvt__grayTest_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void Sound();
	void Step();
	void GatherTeam();
	void ReceiveBeginPlay();
	void OnSuccess_2C5AE44844E972BA129A2EAD6A77B621(EPathFollowingResult MovementResult);
	void OnFail_2C5AE44844E972BA129A2EAD6A77B621(EPathFollowingResult MovementResult);
	void OnSuccess_CA937A4B44017010BE0F229F9D202BD1(EPathFollowingResult MovementResult);
	void OnFail_CA937A4B44017010BE0F229F9D202BD1(EPathFollowingResult MovementResult);
	void DeacCams();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"grayTest_C">();
	}
	static class AGrayTest_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGrayTest_C>();
	}
};
static_assert(alignof(AGrayTest_C) == 0x000010, "Wrong alignment on AGrayTest_C");
static_assert(sizeof(AGrayTest_C) == 0x000510, "Wrong size on AGrayTest_C");
static_assert(offsetof(AGrayTest_C, UberGraphFrame) == 0x0004C0, "Member 'AGrayTest_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AGrayTest_C, Comp_radarPoint) == 0x0004C8, "Member 'AGrayTest_C::Comp_radarPoint' has a wrong offset!");
static_assert(offsetof(AGrayTest_C, Sphere) == 0x0004D0, "Member 'AGrayTest_C::Sphere' has a wrong offset!");
static_assert(offsetof(AGrayTest_C, Audio) == 0x0004D8, "Member 'AGrayTest_C::Audio' has a wrong offset!");
static_assert(offsetof(AGrayTest_C, SpringArm) == 0x0004E0, "Member 'AGrayTest_C::SpringArm' has a wrong offset!");
static_assert(offsetof(AGrayTest_C, PointLight) == 0x0004E8, "Member 'AGrayTest_C::PointLight' has a wrong offset!");
static_assert(offsetof(AGrayTest_C, Team) == 0x0004F0, "Member 'AGrayTest_C::Team' has a wrong offset!");
static_assert(offsetof(AGrayTest_C, GrayController) == 0x000500, "Member 'AGrayTest_C::GrayController' has a wrong offset!");

}

