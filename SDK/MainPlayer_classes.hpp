#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MainPlayer

#include "Basic.hpp"

#include "Struct_weapon_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "UMG_structs.hpp"
#include "Enum_difficulty_structs.hpp"
#include "Enum_interactionActions_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass mainPlayer.mainPlayer_C
// 0x0690 (0x0B50 - 0x04C0)
class AMainPlayer_C final : public ACharacter
{
public:
	uint8                                         Pad_4B8[0x8];                                      // 0x04B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        WindHeightLoop;                                    // 0x04C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        WindFalingLoop;                                    // 0x04D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  PostProcess;                                       // 0x04D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Foot;                                              // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   WSubmesh;                                          // 0x04E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   PullComp;                                          // 0x04F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   PullSubcomp;                                       // 0x04F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            HeavyPull;                                         // 0x0500(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        burningAudio;                                      // 0x0508(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               burningEffect;                                     // 0x0510(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAIPerceptionStimuliSourceComponent*    AIPerceptionStimuliSource;                         // 0x0518(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    Lag_fl1;                                           // 0x0520(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    Lag1;                                              // 0x0528(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   PlayermodelPH;                                     // 0x0530(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UComp_gravitygun_C*                     WeaponComp_gravityGun;                             // 0x0538(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Unrag;                                             // 0x0540(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Arms;                                              // 0x0548(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    Arms_lag;                                          // 0x0550(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Weapon;                                            // 0x0558(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Viewmodel;                                         // 0x0560(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UComp_radarPoint_C*                     RadarPoint;                                        // 0x0568(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        UnderwaterLoop;                                    // 0x0570(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetInteractionComponent*            WidgetInteraction;                                 // 0x0578(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UComp_physicsImpact_C*                  PhysicsImpact;                                     // 0x0580(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Playermodel;                                       // 0x0588(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    Lag;                                               // 0x0590(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    CrouchRoot;                                        // 0x0598(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNavigationInvokerComponent*            NavigationInvoker;                                 // 0x05A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            HeavyGrab;                                         // 0x05A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   GrabComp;                                          // 0x05B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       Camera;                                            // 0x05B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        A_M_O_G_U_S;                                       // 0x05C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Eat;                                               // 0x05C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    Lag_fl;                                            // 0x05D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    Light_R;                                           // 0x05D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Grabrot;                                           // 0x05E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsHandleComponent*                GrabHandle;                                        // 0x05E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         GetUpTimeline_a_600A65B44BB925C6BB45C6B093F73841;  // 0x05F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            GetUpTimeline__Direction_600A65B44BB925C6BB45C6B093F73841; // 0x05F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F5[0x3];                                      // 0x05F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     GetUpTimeline;                                     // 0x05F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Wakingup_a_647CE92E46DB65975F6DE6852BCCB05B;       // 0x0600(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Wakingup__Direction_647CE92E46DB65975F6DE6852BCCB05B; // 0x0604(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_605[0x3];                                      // 0x0605(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Wakingup;                                          // 0x0608(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Zoom_a_18C78453459B30F34B56A8B7AC1791DB;           // 0x0610(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Zoom__Direction_18C78453459B30F34B56A8B7AC1791DB;  // 0x0614(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_615[0x3];                                      // 0x0615(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Zoom;                                              // 0x0618(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Grab_a_C521EF8B455621FCBCA622B36B8D746B;           // 0x0620(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Grab__Direction_C521EF8B455621FCBCA622B36B8D746B;  // 0x0624(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_625[0x3];                                      // 0x0625(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Grab;                                              // 0x0628(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Input_forward;                                     // 0x0630(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Input_back;                                        // 0x0631(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Input_right;                                       // 0x0632(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Input_left;                                        // 0x0633(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Step;                                              // 0x0634(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastStep;                                          // 0x0638(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             HitResult;                                         // 0x0644(0x0088)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_6CC[0x4];                                      // 0x06CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Pickup_actor;                                      // 0x06D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Pickup_component;                                  // 0x06D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                ActiveInterface;                                   // 0x06E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnimTimer;                                         // 0x06E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefSpeed;                                          // 0x06EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Input_run;                                         // 0x06F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6F1[0x7];                                      // 0x06F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             ScrollUp;                                          // 0x06F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             ScrollDown;                                        // 0x0708(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Input_alt;                                         // 0x0718(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_719[0x3];                                      // 0x0719(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ArmLength;                                         // 0x071C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LookAtLocation;                                    // 0x0720(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CamLocation;                                       // 0x072C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Flashlight;                                        // 0x0738(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_739[0x7];                                      // 0x0739(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    LookAtComponent;                                   // 0x0740(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLookAt;                                          // 0x0748(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_749[0x3];                                      // 0x0749(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MouseSens;                                         // 0x074C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InpF_forward;                                      // 0x0750(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InpF_back;                                         // 0x0754(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InpF_rig;                                          // 0x0758(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InpF_lef;                                          // 0x075C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Input_rotate;                                      // 0x0760(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_761[0x3];                                      // 0x0761(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CamPrev;                                           // 0x0764(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CamSpeed;                                          // 0x0770(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GrabsHeavy;                                        // 0x0774(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          S_invertX;                                         // 0x0775(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          S_invertY;                                         // 0x0776(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_777[0x1];                                      // 0x0777(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         KickTime;                                          // 0x0778(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsKicked;                                          // 0x077C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CanKick;                                           // 0x077D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	Enum_difficulty                               Diff;                                              // 0x077E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRagdoll;                                         // 0x077F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             Wakeup_A;                                          // 0x0780(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                FallVeloc;                                         // 0x07B0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7BC[0x4];                                      // 0x07BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LastRagdollTransform;                              // 0x07C0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             SpawnLocation;                                     // 0x07F0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HulkMode;                                          // 0x0820(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_821[0x7];                                      // 0x0821(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UKel_lmao_Skeleton_AnimBlueprint_C*     Anim;                                              // 0x0828(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Arcade;                                            // 0x0830(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_831[0x3];                                      // 0x0831(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Mov_forward;                                       // 0x0834(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Mov_back;                                          // 0x0840(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Mov_right;                                         // 0x084C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Mov_left;                                          // 0x0858(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VelRes;                                            // 0x0864(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Sliding;                                           // 0x0870(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_87C[0x4];                                      // 0x087C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ControlObject;                                     // 0x0880(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ALadder_C*                              Ladder;                                            // 0x0888(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AWaterVolume_C*>                 WaterVolumes_sub;                                  // 0x0890(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	bool                                          InWater;                                           // 0x08A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Input_jump;                                        // 0x08A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8A2[0x6];                                      // 0x08A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AWaterVolume_C*>                 WaterVolumes;                                      // 0x08A8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	bool                                          OnWater;                                           // 0x08B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          WaterJump;                                         // 0x08B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Underwater;                                        // 0x08BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Noclip;                                            // 0x08BB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Input_crouch;                                      // 0x08BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8BD[0x3];                                      // 0x08BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             Faint;                                             // 0x08C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         GrabLen;                                           // 0x08D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8D4[0x4];                                      // 0x08D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_weapon                         WeaponData;                                        // 0x08D8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Reload;                                            // 0x08F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Input_fire;                                        // 0x08FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8FD[0x3];                                      // 0x08FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 HoldObject;                                        // 0x0900(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHook_C*                                ActiveHook;                                        // 0x0908(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   HoldName;                                          // 0x0910(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Animation;                                         // 0x0918(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_919[0x3];                                      // 0x0919(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LastWalk;                                          // 0x091C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Lastloc;                                           // 0x0928(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_934[0x4];                                      // 0x0934(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DroppedItem;                                       // 0x0938(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RagVel;                                            // 0x0940(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RagLLoc;                                           // 0x094C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dead;                                              // 0x0958(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_959[0x7];                                      // 0x0959(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 SittingOn;                                         // 0x0960(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UComp_sitting_C*                        SitOnComponent;                                    // 0x0968(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASitBox_C*                              SitPlace;                                          // 0x0970(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ActionIndex;                                       // 0x0978(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Max_actionIndex;                                   // 0x097C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 LookAtActor;                                       // 0x0980(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Held;                                              // 0x0988(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_989[0x7];                                      // 0x0989(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACar1_C*                                Atv;                                               // 0x0990(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NoclipFlyVel;                                      // 0x0998(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         burningTime;                                       // 0x09A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             FlashlightStateChanged;                            // 0x09A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             Used_E;                                            // 0x09B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             Mouse_xy;                                          // 0x09C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          DeactivateMouseInput;                              // 0x09D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9D9[0x7];                                      // 0x09D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             Shift;                                             // 0x09E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             Used_alt;                                          // 0x09F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          FallTp;                                            // 0x0A00(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A01[0x3];                                      // 0x0A01(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Air;                                               // 0x0A04(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UnderwaterDepth;                                   // 0x0A08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A0C[0x4];                                      // 0x0A0C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ActorStandingOn;                                   // 0x0A10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             MontageNotify;                                     // 0x0A18(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsWakingUp;                                        // 0x0A28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SkipTolerance;                                     // 0x0A29(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsInFPBanimation;                                  // 0x0A2A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A2B[0x1];                                      // 0x0A2B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HeadbobAnim;                                       // 0x0A2C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeadbobStrength;                                   // 0x0A30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeadbobTiltStrength;                               // 0x0A34(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           Equipment;                                         // 0x0A38(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          NoWakeup;                                          // 0x0A48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A49[0x7];                                      // 0x0A49(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             SwingMelee;                                        // 0x0A50(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         FoodDraining;                                      // 0x0A60(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SleepDraining;                                     // 0x0A64(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Agil;                                              // 0x0A68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Str;                                               // 0x0A6C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMirror;                                          // 0x0A70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Dropped;                                           // 0x0A71(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A72[0x6];                                      // 0x0A72(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ToggledOn;                                         // 0x0A78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RadialMenu;                                        // 0x0A80(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A81[0x7];                                      // 0x0A81(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      Obj;                                               // 0x0A88(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Dontcollect;                                       // 0x0A98(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A99[0x3];                                      // 0x0A99(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Scuba;                                             // 0x0A9C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ScubaAir;                                          // 0x0AA0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AA1[0x7];                                      // 0x0AA1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UComp_jetpack_C*                        JetpackComponent;                                  // 0x0AA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             Space;                                             // 0x0AB0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          ResetScrollOnUseRelease;                           // 0x0AC0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AC1[0x7];                                      // 0x0AC1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             Used_R;                                            // 0x0AC8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             Used_RMB;                                          // 0x0AD8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class ACig_C*                                 Cig;                                               // 0x0AE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             Damaged;                                           // 0x0AF0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             AnyKeyEvent;                                       // 0x0B00(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             Jumped;                                            // 0x0B10(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class APlayerRagdoll_C*                       RagdollActor;                                      // 0x0B20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 RagdollComponent;                                  // 0x0B28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 LastDroppedItem;                                   // 0x0B30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LastDroppedItem_deleted;                           // 0x0B38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CanGetUp;                                          // 0x0B39(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B3A[0x2];                                      // 0x0B3A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Grab_speed;                                        // 0x0B3C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               NewVar_5;                                          // 0x0B40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Input_use;                                         // 0x0B48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         LookAtVerify;                                      // 0x0B49(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ScrollUp__DelegateSignature();
	void ScrollDown__DelegateSignature();
	void Faint__DelegateSignature();
	void FlashlightStateChanged__DelegateSignature(class USpotLightComponent* Light, bool Visible);
	void Used_E__DelegateSignature(bool Pressed);
	void Mouse_xy__DelegateSignature(const struct FVector2D& MouseXY);
	void Shift__DelegateSignature(bool Pressed);
	void Used_alt__DelegateSignature(bool Pressed);
	void MontageNotify__DelegateSignature(class FName Param_Name);
	void SwingMelee__DelegateSignature();
	void Space__DelegateSignature(bool Pressed);
	void Used_R__DelegateSignature(bool Pressed);
	void Used_RMB__DelegateSignature(bool Pressed);
	void Damaged__DelegateSignature();
	void AnyKeyEvent__DelegateSignature(const struct FKey& Key, bool Pressed);
	void Jumped__DelegateSignature();
	void ExecuteUbergraph_mainPlayer(int32 EntryPoint);
	void EnterWaterOrigin(class AWaterVolume_C* Water);
	void LeaveWaterOrigin(class AWaterVolume_C* Water);
	void EnterWater(class AWaterVolume_C* Water);
	void LeaveWater(class AWaterVolume_C* Water);
	void Unrun();
	void SimulateEsc();
	void InterruptHoldItem();
	void DriveDetached();
	void Player_use(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void Kicked(bool Param_Kick);
	void SendName(class FName Param_Name);
	void broken();
	void broken_fire();
	void Thrown(class AMainPlayer_C* Player);
	void DamageByPlayer(class AMainPlayer_C* Player, const struct FHitResult& Hit, float Damage);
	void PlayerUnequip(class AMainPlayer_C* Player);
	void PlayerHold(class AMainPlayer_C* Player);
	void PlayerR(class AMainPlayer_C* Player);
	void ImpactDamage(float Damage, const struct FHitResult& Hit, class AActor* Actor, const struct FVector& Impact);
	void Eaten();
	void Virus(bool Activate);
	void SetPropProps(bool Static, bool Frozen, bool Active);
	void SetKey(const class FString& Key);
	void PhysDestroyed();
	void PhysPreDestroyed();
	void DigUp();
	void Unhook();
	void SteppedOn(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void FireDamage(float Damage);
	void Microwave();
	void ReceivedPhyiscsDamage(float Damage, const struct FHitResult& Hot);
	void ActionOptionIndex(class AMainPlayer_C* Player, const struct FHitResult& Hit, Enum_interactionActions Action);
	void PlayerHandUse_RMB(class AMainPlayer_C* Player);
	void PlayerHandUse_LMB(class AMainPlayer_C* Player);
	void Exploded(float Damage, const struct FVector& Location);
	void PlayerHandRelease_RMB(class AMainPlayer_C* Player);
	void PlayerHandRelease_LMB(class AMainPlayer_C* Player);
	void PlayerHandMouseWheel(class AMainPlayer_C* Player, float WheelDelta);
	void PlayerHandMouse(class AMainPlayer_C* Player, const struct FVector2D& Mouse);
	void PlayerHandAnyKey(class AMainPlayer_C* Player, const struct FKey& Key, bool Pressed);
	void MicrowaveElec();
	void AddTemperature(float Temperature);
	void AccumulateTemperature(float Temperature, float Speed);
	void ActionName(class AMainPlayer_C* Player, const struct FHitResult& Hit, const class FString& Param_Name);
	void Stepped(float Volume);
	void PlayerLookAway(class AMainPlayer_C* Player);
	void ReachedByExplosion(const struct FVector& Location, float Damage);
	void bitten();
	void Slice(bool Clean);
	void PlayerUsedOn(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void AttemptIgnite();
	void Hooked(class AHook_C* Hook);
	void Crafted();
	void CleanSponge(float Clean, class AMainPlayer_C* Player);
	void HookTension(class AHook_C* Hook);
	void SignalDeleted();
	void SignalSaved();
	void GamemodeBeginPlay();
	void StuffUpgraded(class AMainGamemode_C* GameMode);
	void Unfoc();
	void Unfocused();
	void GamemodePreLoad();
	void AnyKey(const struct FKey& Key, bool Pressed);
	void GamemodeMakeKeys();
	void PropRenderer_finishProps();
	void ApplyColor(const struct FLinearColor& Color);
	void TexturePickerApply(class UUmg_texturePicker_C* Picker, class UTexture2D* Texture, int32 Param_Index);
	void bindSitDestroyed();
	void SitDestroyed(class AActor* DestroyedActor);
	void UnbindSitDestroyed();
	void RecallSit();
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void FirstPersonBodyAnimation(class FName StartingSection);
	void Ignite(float Fuel);
	void StartBurning();
	void ExtinguishFire();
	void OnLanded(const struct FHitResult& Hit);
	void PickupObject(const struct FHitResult& Param_HitResult);
	void DropObject();
	void SmoothGrab();
	void SimulateDrop(bool DontWakeup, bool Alt, bool Param_Dontcollect);
	void Unzoom();
	void StopZooming();
	void FallImpulse();
	void SimClick();
	void ReceiveTick(float DeltaSeconds);
	void SettingsApplied(const struct FStruct_settings& Settings);
	void InpAxisEvt_mouseX_K2Node_InputAxisEvent_0(float AxisValue);
	void InpAxisEvt_mouseY_K2Node_InputAxisEvent_1(float AxisValue);
	void Fallen(bool Death);
	void ForceGetUp();
	void beginArmAnim(class UAnimMontage* MontageToPlay);
	void MakeEquipDestroyed();
	void ReceiveBeginPlay();
	void Hitt(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void breathTimer();
	void ScubaTimer();
	void Wakeup(bool PassOut);
	void EquipDestroyed(class AActor* DestroyedActor);
	void ForceWakeup();
	void AddDamage(class AActor* Actor, float Damage, const struct FHitResult& Hit, const struct FVector& Impact, bool SkipSetting);
	void UseShovel();
	void PlayFPAnim(class FName Param_Name, class UAnimMontage* MontageToPlay, float Param_Reload);
	void WeaponReload();
	void PlayFPAnimScripted(class UAnimMontage* MontageToPlay, class FName StartingSection, class AActor* Call);
	void ForceDrop();
	void AteShit(float Damage);
	void InpAxisKeyEvt_MouseWheelAxis_K2Node_InputAxisKeyEvent_0(float AxisValue);
	void UpdateStrAgl();
	void PoisonedMessage();
	void GatherObject();
	void InpActEvt_spawnmenu_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_spawnmenu_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_alt_K2Node_InputActionEvent_2(const struct FKey& Key);
	void InpActEvt_alt_K2Node_InputActionEvent_3(const struct FKey& Key);
	void InpActEvt_run_K2Node_InputActionEvent_4(const struct FKey& Key);
	void InpActEvt_run_K2Node_InputActionEvent_5(const struct FKey& Key);
	void InpActEvt_Escape_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_dismount_K2Node_InputActionEvent_6(const struct FKey& Key);
	void InpActEvt_dismount_K2Node_InputActionEvent_7(const struct FKey& Key);
	void InpActEvt_cheatmenu_K2Node_InputActionEvent_8(const struct FKey& Key);
	void InpActEvt_flashlight_K2Node_InputActionEvent_9(const struct FKey& Key);
	void InpActEvt_LeftMouseButton_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_LeftMouseButton_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void InpActEvt_rotate_K2Node_InputActionEvent_10(const struct FKey& Key);
	void InpActEvt_rotate_K2Node_InputActionEvent_11(const struct FKey& Key);
	void InpActEvt_crouch_K2Node_InputActionEvent_12(const struct FKey& Key);
	void InpActEvt_crouch_K2Node_InputActionEvent_13(const struct FKey& Key);
	void InpActEvt_jump_K2Node_InputActionEvent_14(const struct FKey& Key);
	void InpActEvt_jump_K2Node_InputActionEvent_15(const struct FKey& Key);
	void InpActEvt_AnyKey_K2Node_InputKeyEvent_3(const struct FKey& Key);
	void InpActEvt_AnyKey_K2Node_InputKeyEvent_4(const struct FKey& Key);
	void OnCompleted_C9A4A46A4C8E87AD113F5FBDA6247247(class FName NotifyName);
	void OnBlendOut_C9A4A46A4C8E87AD113F5FBDA6247247(class FName NotifyName);
	void OnInterrupted_C9A4A46A4C8E87AD113F5FBDA6247247(class FName NotifyName);
	void OnNotifyBegin_C9A4A46A4C8E87AD113F5FBDA6247247(class FName NotifyName);
	void OnNotifyEnd_C9A4A46A4C8E87AD113F5FBDA6247247(class FName NotifyName);
	void InpActEvt_inventory_K2Node_InputActionEvent_16(const struct FKey& Key);
	void InpActEvt_noclip_K2Node_InputActionEvent_17(const struct FKey& Key);
	void InpActEvt_quicksave_K2Node_InputActionEvent_18(const struct FKey& Key);
	void InpActEvt_forward_K2Node_InputActionEvent_19(const struct FKey& Key);
	void InpActEvt_forward_K2Node_InputActionEvent_20(const struct FKey& Key);
	void InpActEvt_back_K2Node_InputActionEvent_21(const struct FKey& Key);
	void InpActEvt_back_K2Node_InputActionEvent_22(const struct FKey& Key);
	void InpActEvt_right_K2Node_InputActionEvent_23(const struct FKey& Key);
	void InpActEvt_right_K2Node_InputActionEvent_24(const struct FKey& Key);
	void InpActEvt_left_K2Node_InputActionEvent_25(const struct FKey& Key);
	void InpActEvt_left_K2Node_InputActionEvent_26(const struct FKey& Key);
	void InpActEvt_drop_K2Node_InputActionEvent_27(const struct FKey& Key);
	void InpActEvt_drop_K2Node_InputActionEvent_28(const struct FKey& Key);
	void InpActEvt_zoom_K2Node_InputActionEvent_29(const struct FKey& Key);
	void InpActEvt_zoom_K2Node_InputActionEvent_30(const struct FKey& Key);
	void InpActEvt_use_K2Node_InputActionEvent_31(const struct FKey& Key);
	void InpActEvt_use_K2Node_InputActionEvent_32(const struct FKey& Key);
	void InpActEvt_hotbar_1_K2Node_InputActionEvent_33(const struct FKey& Key);
	void InpActEvt_hotbar_2_K2Node_InputActionEvent_34(const struct FKey& Key);
	void InpActEvt_hotbar_3_K2Node_InputActionEvent_35(const struct FKey& Key);
	void InpActEvt_hotbar_4_K2Node_InputActionEvent_36(const struct FKey& Key);
	void InpActEvt_hotbar_5_K2Node_InputActionEvent_37(const struct FKey& Key);
	void InpActEvt_hotbar_6_K2Node_InputActionEvent_38(const struct FKey& Key);
	void InpActEvt_hotbar_7_K2Node_InputActionEvent_39(const struct FKey& Key);
	void InpActEvt_hotbar_8_K2Node_InputActionEvent_40(const struct FKey& Key);
	void InpActEvt_hotbar_9_K2Node_InputActionEvent_41(const struct FKey& Key);
	void InpActEvt_hotbar_1_K2Node_InputActionEvent_42(const struct FKey& Key);
	void InpActEvt_hotbar_2_K2Node_InputActionEvent_43(const struct FKey& Key);
	void InpActEvt_hotbar_3_K2Node_InputActionEvent_44(const struct FKey& Key);
	void InpActEvt_hotbar_4_K2Node_InputActionEvent_45(const struct FKey& Key);
	void InpActEvt_hotbar_5_K2Node_InputActionEvent_46(const struct FKey& Key);
	void InpActEvt_hotbar_6_K2Node_InputActionEvent_47(const struct FKey& Key);
	void InpActEvt_hotbar_7_K2Node_InputActionEvent_48(const struct FKey& Key);
	void InpActEvt_hotbar_8_K2Node_InputActionEvent_49(const struct FKey& Key);
	void InpActEvt_hotbar_9_K2Node_InputActionEvent_50(const struct FKey& Key);
	void InpActEvt_hotbar_10_K2Node_InputActionEvent_51(const struct FKey& Key);
	void InpActEvt_scrollUp_K2Node_InputActionEvent_52(const struct FKey& Key);
	void InpActEvt_scrollDown_K2Node_InputActionEvent_53(const struct FKey& Key);
	void InpActEvt_undo_K2Node_InputActionEvent_54(const struct FKey& Key);
	void InpActEvt_ragdoll_K2Node_InputActionEvent_55(const struct FKey& Key);
	void OnCompleted_7B6F74A042FAB16562D2EAA1EFBF689C(class FName NotifyName);
	void OnBlendOut_7B6F74A042FAB16562D2EAA1EFBF689C(class FName NotifyName);
	void OnInterrupted_7B6F74A042FAB16562D2EAA1EFBF689C(class FName NotifyName);
	void OnNotifyBegin_7B6F74A042FAB16562D2EAA1EFBF689C(class FName NotifyName);
	void OnNotifyEnd_7B6F74A042FAB16562D2EAA1EFBF689C(class FName NotifyName);
	void OnCompleted_810D1C624C726801D77BDDB22791052F(class FName NotifyName);
	void OnBlendOut_810D1C624C726801D77BDDB22791052F(class FName NotifyName);
	void OnInterrupted_810D1C624C726801D77BDDB22791052F(class FName NotifyName);
	void OnNotifyBegin_810D1C624C726801D77BDDB22791052F(class FName NotifyName);
	void OnNotifyEnd_810D1C624C726801D77BDDB22791052F(class FName NotifyName);
	void OnCompleted_4DBBC1B940FF6B1540C30484950F25EA(class FName NotifyName);
	void OnBlendOut_4DBBC1B940FF6B1540C30484950F25EA(class FName NotifyName);
	void OnInterrupted_4DBBC1B940FF6B1540C30484950F25EA(class FName NotifyName);
	void OnNotifyBegin_4DBBC1B940FF6B1540C30484950F25EA(class FName NotifyName);
	void OnNotifyEnd_4DBBC1B940FF6B1540C30484950F25EA(class FName NotifyName);
	void InpActEvt_fire_K2Node_InputActionEvent_56(const struct FKey& Key);
	void InpActEvt_fire_K2Node_InputActionEvent_57(const struct FKey& Key);
	void OnCompleted_6FC60C6C4AA754F0D22D9FB355E91395(class FName NotifyName);
	void OnBlendOut_6FC60C6C4AA754F0D22D9FB355E91395(class FName NotifyName);
	void OnInterrupted_6FC60C6C4AA754F0D22D9FB355E91395(class FName NotifyName);
	void OnNotifyBegin_6FC60C6C4AA754F0D22D9FB355E91395(class FName NotifyName);
	void OnNotifyEnd_6FC60C6C4AA754F0D22D9FB355E91395(class FName NotifyName);
	void OnCompleted_5D8C5DEB45CD068AED6A49A9D34D2E25(class FName NotifyName);
	void OnBlendOut_5D8C5DEB45CD068AED6A49A9D34D2E25(class FName NotifyName);
	void OnInterrupted_5D8C5DEB45CD068AED6A49A9D34D2E25(class FName NotifyName);
	void OnNotifyBegin_5D8C5DEB45CD068AED6A49A9D34D2E25(class FName NotifyName);
	void OnNotifyEnd_5D8C5DEB45CD068AED6A49A9D34D2E25(class FName NotifyName);
	void InpActEvt_lockObject_K2Node_InputActionEvent_58(const struct FKey& Key);
	void InpActEvt_debugtp_K2Node_InputActionEvent_59(const struct FKey& Key);
	void GetUpTimeline__UpdateFunc();
	void GetUpTimeline__FinishedFunc();
	void Grab__UpdateFunc();
	void Grab__FinishedFunc();
	void Zoom__UpdateFunc();
	void Zoom__FinishedFunc();
	void Wakingup__UpdateFunc();
	void Wakingup__FinishedFunc();
	void StepOn(float A1);
	void Arm(float CustomLength, struct FVector* Start, struct FVector* End);
	void Enter_Interface(class UWidget* Param_ActiveInterface, const struct FVector& Param_LookAtLocation, const struct FVector& Param_CamLocation, const class FString& CallFrom);
	void MakeLookAt(const struct FVector& Location, const struct FVector& Att);
	void WidgetInteract_mousePress();
	void UseAction(bool Sec, float Radius, class AActor* DirectUse, bool* Succ);
	void AddFood(float Food, float Sleep, float Health, class AProp_food_C* AsFood, bool bypassNoHunger, bool* Full);
	void IsExhausted(bool* Exhausted);
	void SetActiveInterface(class UWidget* Param_ActiveInterface, const class FString& InString, bool Param_Zoom, class UObject* SentBy, bool IgnoreZoom, bool* Return);
	void FlashlightUse();
	void SetMouseSmooth(float CameraLagSpeed, float Param_MouseSens);
	void Kick();
	void RagdollMode(bool Ragdoll, bool PassOut, bool Death);
	void StopMovement();
	void Punch(const struct FVector& FullBody, const struct FVector& boneImp, class FName bn1, float Damage, const struct FVector& DamageLocation, bool bypassSettings);
	void UseLadder(class ALadder_C* Param_Ladder, class ALadder_C** Ladder1);
	void UpdWater();
	void MuffleUnderwater();
	void SetUnderwater(bool InputPin);
	void PutObjectInventory2(class AActor* InputPin, bool* Return);
	void AddEquip(const struct FStruct_save& Data, bool* Return, class FString* Rebug);
	void UpdEquip(bool* Return, class FString* Rebug);
	class UClass* Attack(bool* Hit, struct FHitResult* OutputPin);
	void CheckEquip(bool* Empty, struct FStruct_equipment* Output);
	void MovOut(const struct FHitResult& Hit, const struct FVector& InputPin);
	void TeleportWObackrooms(const struct FTransform& NewTransform);
	void ThrowShit(class UPrimitiveComponent* InputPin);
	void AddPlayerDamage(float Damage, const struct FVector& DamageLocation, const struct FVector& FullBody, bool bypassSettings);
	bool UseArm(struct FHitResult* OutHit);
	void Sit(class AActor* Actor, class UComp_sitting_C* Component, class ASitBox_C* Place);
	void Unsit();
	void SelectedAction(Enum_interactionActions* Output1, class FString* AsName);
	void CollectObject(bool UseHold, class AActor* Manual, bool* Collected);
	void UpdateSpeed();
	void FixActionIndex();
	struct FVector FindFootLocation();
	void UpdateEquipment();
	void TryGetNail(bool* Success, class UClass** NailClass);
	void UpdateWheel();
	void ThrowShovelItem(const struct FVector& NewVel);
	void Kill();
	void Heal(float Add);
	void SkipGrabRadial(bool* Skip);
	void ProcessArmor(const struct FHitResult& Hit, bool* Damage);
	void EquipJetpack();
	void AddEffect();
	void WindSounds();
	void DreamInv(TArray<struct FStruct_save>& Invv, class ADreamBase_C** Base);
	void GetKey(class FString* Key);
	void ToolboxFix(class AProp_toolbox_C* Toolbox, bool* Return);
	void CanBeUsedHold(bool* Return);
	void ProcessKeys(bool* Return);
	void GetOnlyKey(class FString* Key);
	void SetPath(const TArray<struct FVector>& Path, bool* Return);
	void GetActionOptions(class AMainPlayer_C* Player, class UPrimitiveComponent* Component, class AActor* Actor, TArray<class FString>* Options, TArray<Enum_interactionActions>* Options_enum, TArray<class FText>* OptionsNamesOverlay, uint8* Number);
	void GascanFuel(class AProp_gascan_C* Gascan, bool* Fueled);
	void SkipRadial(bool* Skip);
	void GetPriceMultiplier(float* PriceMult);
	void CanBePutInContainer(bool* Return);
	void AsProp(class AProp_C** Return);
	void CanPickup(bool* Return);
	void NoRespawn(bool Param_NoRespawn, bool* Return);
	void LookAt(class AMainPlayer_C* Player, const struct FHitResult& Hit, bool* Return, class FString* Text, class UPrimitiveComponent** boundObjectReplace, uint8* Number);
	void IsButtonUsed(bool* Failed);
	void LandedOn(class AMainPlayer_C* Player, bool* IgnoreFallDamage);

	bool CanJumpInternal() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"mainPlayer_C">();
	}
	static class AMainPlayer_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMainPlayer_C>();
	}
};
static_assert(alignof(AMainPlayer_C) == 0x000010, "Wrong alignment on AMainPlayer_C");
static_assert(sizeof(AMainPlayer_C) == 0x000B50, "Wrong size on AMainPlayer_C");
static_assert(offsetof(AMainPlayer_C, UberGraphFrame) == 0x0004C0, "Member 'AMainPlayer_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, WindHeightLoop) == 0x0004C8, "Member 'AMainPlayer_C::WindHeightLoop' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, WindFalingLoop) == 0x0004D0, "Member 'AMainPlayer_C::WindFalingLoop' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, PostProcess) == 0x0004D8, "Member 'AMainPlayer_C::PostProcess' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Foot) == 0x0004E0, "Member 'AMainPlayer_C::Foot' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, WSubmesh) == 0x0004E8, "Member 'AMainPlayer_C::WSubmesh' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, PullComp) == 0x0004F0, "Member 'AMainPlayer_C::PullComp' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, PullSubcomp) == 0x0004F8, "Member 'AMainPlayer_C::PullSubcomp' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, HeavyPull) == 0x000500, "Member 'AMainPlayer_C::HeavyPull' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, burningAudio) == 0x000508, "Member 'AMainPlayer_C::burningAudio' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, burningEffect) == 0x000510, "Member 'AMainPlayer_C::burningEffect' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, AIPerceptionStimuliSource) == 0x000518, "Member 'AMainPlayer_C::AIPerceptionStimuliSource' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Lag_fl1) == 0x000520, "Member 'AMainPlayer_C::Lag_fl1' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Lag1) == 0x000528, "Member 'AMainPlayer_C::Lag1' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, PlayermodelPH) == 0x000530, "Member 'AMainPlayer_C::PlayermodelPH' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, WeaponComp_gravityGun) == 0x000538, "Member 'AMainPlayer_C::WeaponComp_gravityGun' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Unrag) == 0x000540, "Member 'AMainPlayer_C::Unrag' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Arms) == 0x000548, "Member 'AMainPlayer_C::Arms' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Arms_lag) == 0x000550, "Member 'AMainPlayer_C::Arms_lag' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Weapon) == 0x000558, "Member 'AMainPlayer_C::Weapon' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Viewmodel) == 0x000560, "Member 'AMainPlayer_C::Viewmodel' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, RadarPoint) == 0x000568, "Member 'AMainPlayer_C::RadarPoint' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, UnderwaterLoop) == 0x000570, "Member 'AMainPlayer_C::UnderwaterLoop' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, WidgetInteraction) == 0x000578, "Member 'AMainPlayer_C::WidgetInteraction' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, PhysicsImpact) == 0x000580, "Member 'AMainPlayer_C::PhysicsImpact' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Playermodel) == 0x000588, "Member 'AMainPlayer_C::Playermodel' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Lag) == 0x000590, "Member 'AMainPlayer_C::Lag' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, CrouchRoot) == 0x000598, "Member 'AMainPlayer_C::CrouchRoot' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, NavigationInvoker) == 0x0005A0, "Member 'AMainPlayer_C::NavigationInvoker' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, HeavyGrab) == 0x0005A8, "Member 'AMainPlayer_C::HeavyGrab' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, GrabComp) == 0x0005B0, "Member 'AMainPlayer_C::GrabComp' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Camera) == 0x0005B8, "Member 'AMainPlayer_C::Camera' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, A_M_O_G_U_S) == 0x0005C0, "Member 'AMainPlayer_C::A_M_O_G_U_S' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Eat) == 0x0005C8, "Member 'AMainPlayer_C::Eat' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Lag_fl) == 0x0005D0, "Member 'AMainPlayer_C::Lag_fl' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Light_R) == 0x0005D8, "Member 'AMainPlayer_C::Light_R' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Grabrot) == 0x0005E0, "Member 'AMainPlayer_C::Grabrot' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, GrabHandle) == 0x0005E8, "Member 'AMainPlayer_C::GrabHandle' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, GetUpTimeline_a_600A65B44BB925C6BB45C6B093F73841) == 0x0005F0, "Member 'AMainPlayer_C::GetUpTimeline_a_600A65B44BB925C6BB45C6B093F73841' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, GetUpTimeline__Direction_600A65B44BB925C6BB45C6B093F73841) == 0x0005F4, "Member 'AMainPlayer_C::GetUpTimeline__Direction_600A65B44BB925C6BB45C6B093F73841' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, GetUpTimeline) == 0x0005F8, "Member 'AMainPlayer_C::GetUpTimeline' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Wakingup_a_647CE92E46DB65975F6DE6852BCCB05B) == 0x000600, "Member 'AMainPlayer_C::Wakingup_a_647CE92E46DB65975F6DE6852BCCB05B' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Wakingup__Direction_647CE92E46DB65975F6DE6852BCCB05B) == 0x000604, "Member 'AMainPlayer_C::Wakingup__Direction_647CE92E46DB65975F6DE6852BCCB05B' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Wakingup) == 0x000608, "Member 'AMainPlayer_C::Wakingup' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Zoom_a_18C78453459B30F34B56A8B7AC1791DB) == 0x000610, "Member 'AMainPlayer_C::Zoom_a_18C78453459B30F34B56A8B7AC1791DB' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Zoom__Direction_18C78453459B30F34B56A8B7AC1791DB) == 0x000614, "Member 'AMainPlayer_C::Zoom__Direction_18C78453459B30F34B56A8B7AC1791DB' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Zoom) == 0x000618, "Member 'AMainPlayer_C::Zoom' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Grab_a_C521EF8B455621FCBCA622B36B8D746B) == 0x000620, "Member 'AMainPlayer_C::Grab_a_C521EF8B455621FCBCA622B36B8D746B' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Grab__Direction_C521EF8B455621FCBCA622B36B8D746B) == 0x000624, "Member 'AMainPlayer_C::Grab__Direction_C521EF8B455621FCBCA622B36B8D746B' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Grab) == 0x000628, "Member 'AMainPlayer_C::Grab' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Input_forward) == 0x000630, "Member 'AMainPlayer_C::Input_forward' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Input_back) == 0x000631, "Member 'AMainPlayer_C::Input_back' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Input_right) == 0x000632, "Member 'AMainPlayer_C::Input_right' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Input_left) == 0x000633, "Member 'AMainPlayer_C::Input_left' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Step) == 0x000634, "Member 'AMainPlayer_C::Step' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, LastStep) == 0x000638, "Member 'AMainPlayer_C::LastStep' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, HitResult) == 0x000644, "Member 'AMainPlayer_C::HitResult' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Pickup_actor) == 0x0006D0, "Member 'AMainPlayer_C::Pickup_actor' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Pickup_component) == 0x0006D8, "Member 'AMainPlayer_C::Pickup_component' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, ActiveInterface) == 0x0006E0, "Member 'AMainPlayer_C::ActiveInterface' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, AnimTimer) == 0x0006E8, "Member 'AMainPlayer_C::AnimTimer' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, DefSpeed) == 0x0006EC, "Member 'AMainPlayer_C::DefSpeed' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Input_run) == 0x0006F0, "Member 'AMainPlayer_C::Input_run' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, ScrollUp) == 0x0006F8, "Member 'AMainPlayer_C::ScrollUp' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, ScrollDown) == 0x000708, "Member 'AMainPlayer_C::ScrollDown' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Input_alt) == 0x000718, "Member 'AMainPlayer_C::Input_alt' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, ArmLength) == 0x00071C, "Member 'AMainPlayer_C::ArmLength' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, LookAtLocation) == 0x000720, "Member 'AMainPlayer_C::LookAtLocation' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, CamLocation) == 0x00072C, "Member 'AMainPlayer_C::CamLocation' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Flashlight) == 0x000738, "Member 'AMainPlayer_C::Flashlight' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, LookAtComponent) == 0x000740, "Member 'AMainPlayer_C::LookAtComponent' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, IsLookAt) == 0x000748, "Member 'AMainPlayer_C::IsLookAt' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, MouseSens) == 0x00074C, "Member 'AMainPlayer_C::MouseSens' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, InpF_forward) == 0x000750, "Member 'AMainPlayer_C::InpF_forward' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, InpF_back) == 0x000754, "Member 'AMainPlayer_C::InpF_back' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, InpF_rig) == 0x000758, "Member 'AMainPlayer_C::InpF_rig' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, InpF_lef) == 0x00075C, "Member 'AMainPlayer_C::InpF_lef' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Input_rotate) == 0x000760, "Member 'AMainPlayer_C::Input_rotate' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, CamPrev) == 0x000764, "Member 'AMainPlayer_C::CamPrev' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, CamSpeed) == 0x000770, "Member 'AMainPlayer_C::CamSpeed' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, GrabsHeavy) == 0x000774, "Member 'AMainPlayer_C::GrabsHeavy' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, S_invertX) == 0x000775, "Member 'AMainPlayer_C::S_invertX' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, S_invertY) == 0x000776, "Member 'AMainPlayer_C::S_invertY' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, KickTime) == 0x000778, "Member 'AMainPlayer_C::KickTime' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, IsKicked) == 0x00077C, "Member 'AMainPlayer_C::IsKicked' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, CanKick) == 0x00077D, "Member 'AMainPlayer_C::CanKick' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Diff) == 0x00077E, "Member 'AMainPlayer_C::Diff' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, IsRagdoll) == 0x00077F, "Member 'AMainPlayer_C::IsRagdoll' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Wakeup_A) == 0x000780, "Member 'AMainPlayer_C::Wakeup_A' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, FallVeloc) == 0x0007B0, "Member 'AMainPlayer_C::FallVeloc' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, LastRagdollTransform) == 0x0007C0, "Member 'AMainPlayer_C::LastRagdollTransform' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, SpawnLocation) == 0x0007F0, "Member 'AMainPlayer_C::SpawnLocation' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, HulkMode) == 0x000820, "Member 'AMainPlayer_C::HulkMode' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Anim) == 0x000828, "Member 'AMainPlayer_C::Anim' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Arcade) == 0x000830, "Member 'AMainPlayer_C::Arcade' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Mov_forward) == 0x000834, "Member 'AMainPlayer_C::Mov_forward' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Mov_back) == 0x000840, "Member 'AMainPlayer_C::Mov_back' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Mov_right) == 0x00084C, "Member 'AMainPlayer_C::Mov_right' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Mov_left) == 0x000858, "Member 'AMainPlayer_C::Mov_left' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, VelRes) == 0x000864, "Member 'AMainPlayer_C::VelRes' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Sliding) == 0x000870, "Member 'AMainPlayer_C::Sliding' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, ControlObject) == 0x000880, "Member 'AMainPlayer_C::ControlObject' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Ladder) == 0x000888, "Member 'AMainPlayer_C::Ladder' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, WaterVolumes_sub) == 0x000890, "Member 'AMainPlayer_C::WaterVolumes_sub' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, InWater) == 0x0008A0, "Member 'AMainPlayer_C::InWater' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Input_jump) == 0x0008A1, "Member 'AMainPlayer_C::Input_jump' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, WaterVolumes) == 0x0008A8, "Member 'AMainPlayer_C::WaterVolumes' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, OnWater) == 0x0008B8, "Member 'AMainPlayer_C::OnWater' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, WaterJump) == 0x0008B9, "Member 'AMainPlayer_C::WaterJump' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Underwater) == 0x0008BA, "Member 'AMainPlayer_C::Underwater' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Noclip) == 0x0008BB, "Member 'AMainPlayer_C::Noclip' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Input_crouch) == 0x0008BC, "Member 'AMainPlayer_C::Input_crouch' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Faint) == 0x0008C0, "Member 'AMainPlayer_C::Faint' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, GrabLen) == 0x0008D0, "Member 'AMainPlayer_C::GrabLen' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, WeaponData) == 0x0008D8, "Member 'AMainPlayer_C::WeaponData' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Reload) == 0x0008F8, "Member 'AMainPlayer_C::Reload' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Input_fire) == 0x0008FC, "Member 'AMainPlayer_C::Input_fire' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, HoldObject) == 0x000900, "Member 'AMainPlayer_C::HoldObject' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, ActiveHook) == 0x000908, "Member 'AMainPlayer_C::ActiveHook' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, HoldName) == 0x000910, "Member 'AMainPlayer_C::HoldName' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Animation) == 0x000918, "Member 'AMainPlayer_C::Animation' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, LastWalk) == 0x00091C, "Member 'AMainPlayer_C::LastWalk' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Lastloc) == 0x000928, "Member 'AMainPlayer_C::Lastloc' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, DroppedItem) == 0x000938, "Member 'AMainPlayer_C::DroppedItem' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, RagVel) == 0x000940, "Member 'AMainPlayer_C::RagVel' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, RagLLoc) == 0x00094C, "Member 'AMainPlayer_C::RagLLoc' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Dead) == 0x000958, "Member 'AMainPlayer_C::Dead' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, SittingOn) == 0x000960, "Member 'AMainPlayer_C::SittingOn' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, SitOnComponent) == 0x000968, "Member 'AMainPlayer_C::SitOnComponent' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, SitPlace) == 0x000970, "Member 'AMainPlayer_C::SitPlace' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, ActionIndex) == 0x000978, "Member 'AMainPlayer_C::ActionIndex' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Max_actionIndex) == 0x00097C, "Member 'AMainPlayer_C::Max_actionIndex' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, LookAtActor) == 0x000980, "Member 'AMainPlayer_C::LookAtActor' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Held) == 0x000988, "Member 'AMainPlayer_C::Held' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Atv) == 0x000990, "Member 'AMainPlayer_C::Atv' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, NoclipFlyVel) == 0x000998, "Member 'AMainPlayer_C::NoclipFlyVel' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, burningTime) == 0x0009A4, "Member 'AMainPlayer_C::burningTime' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, FlashlightStateChanged) == 0x0009A8, "Member 'AMainPlayer_C::FlashlightStateChanged' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Used_E) == 0x0009B8, "Member 'AMainPlayer_C::Used_E' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Mouse_xy) == 0x0009C8, "Member 'AMainPlayer_C::Mouse_xy' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, DeactivateMouseInput) == 0x0009D8, "Member 'AMainPlayer_C::DeactivateMouseInput' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Shift) == 0x0009E0, "Member 'AMainPlayer_C::Shift' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Used_alt) == 0x0009F0, "Member 'AMainPlayer_C::Used_alt' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, FallTp) == 0x000A00, "Member 'AMainPlayer_C::FallTp' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Air) == 0x000A04, "Member 'AMainPlayer_C::Air' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, UnderwaterDepth) == 0x000A08, "Member 'AMainPlayer_C::UnderwaterDepth' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, ActorStandingOn) == 0x000A10, "Member 'AMainPlayer_C::ActorStandingOn' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, MontageNotify) == 0x000A18, "Member 'AMainPlayer_C::MontageNotify' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, IsWakingUp) == 0x000A28, "Member 'AMainPlayer_C::IsWakingUp' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, SkipTolerance) == 0x000A29, "Member 'AMainPlayer_C::SkipTolerance' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, IsInFPBanimation) == 0x000A2A, "Member 'AMainPlayer_C::IsInFPBanimation' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, HeadbobAnim) == 0x000A2C, "Member 'AMainPlayer_C::HeadbobAnim' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, HeadbobStrength) == 0x000A30, "Member 'AMainPlayer_C::HeadbobStrength' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, HeadbobTiltStrength) == 0x000A34, "Member 'AMainPlayer_C::HeadbobTiltStrength' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Equipment) == 0x000A38, "Member 'AMainPlayer_C::Equipment' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, NoWakeup) == 0x000A48, "Member 'AMainPlayer_C::NoWakeup' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, SwingMelee) == 0x000A50, "Member 'AMainPlayer_C::SwingMelee' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, FoodDraining) == 0x000A60, "Member 'AMainPlayer_C::FoodDraining' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, SleepDraining) == 0x000A64, "Member 'AMainPlayer_C::SleepDraining' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Agil) == 0x000A68, "Member 'AMainPlayer_C::Agil' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Str) == 0x000A6C, "Member 'AMainPlayer_C::Str' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, IsMirror) == 0x000A70, "Member 'AMainPlayer_C::IsMirror' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Dropped) == 0x000A71, "Member 'AMainPlayer_C::Dropped' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, ToggledOn) == 0x000A78, "Member 'AMainPlayer_C::ToggledOn' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, RadialMenu) == 0x000A80, "Member 'AMainPlayer_C::RadialMenu' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Obj) == 0x000A88, "Member 'AMainPlayer_C::Obj' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Dontcollect) == 0x000A98, "Member 'AMainPlayer_C::Dontcollect' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Scuba) == 0x000A9C, "Member 'AMainPlayer_C::Scuba' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, ScubaAir) == 0x000AA0, "Member 'AMainPlayer_C::ScubaAir' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, JetpackComponent) == 0x000AA8, "Member 'AMainPlayer_C::JetpackComponent' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Space) == 0x000AB0, "Member 'AMainPlayer_C::Space' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, ResetScrollOnUseRelease) == 0x000AC0, "Member 'AMainPlayer_C::ResetScrollOnUseRelease' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Used_R) == 0x000AC8, "Member 'AMainPlayer_C::Used_R' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Used_RMB) == 0x000AD8, "Member 'AMainPlayer_C::Used_RMB' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Cig) == 0x000AE8, "Member 'AMainPlayer_C::Cig' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Damaged) == 0x000AF0, "Member 'AMainPlayer_C::Damaged' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, AnyKeyEvent) == 0x000B00, "Member 'AMainPlayer_C::AnyKeyEvent' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Jumped) == 0x000B10, "Member 'AMainPlayer_C::Jumped' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, RagdollActor) == 0x000B20, "Member 'AMainPlayer_C::RagdollActor' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, RagdollComponent) == 0x000B28, "Member 'AMainPlayer_C::RagdollComponent' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, LastDroppedItem) == 0x000B30, "Member 'AMainPlayer_C::LastDroppedItem' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, LastDroppedItem_deleted) == 0x000B38, "Member 'AMainPlayer_C::LastDroppedItem_deleted' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, CanGetUp) == 0x000B39, "Member 'AMainPlayer_C::CanGetUp' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Grab_speed) == 0x000B3C, "Member 'AMainPlayer_C::Grab_speed' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, NewVar_5) == 0x000B40, "Member 'AMainPlayer_C::NewVar_5' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, Input_use) == 0x000B48, "Member 'AMainPlayer_C::Input_use' has a wrong offset!");
static_assert(offsetof(AMainPlayer_C, LookAtVerify) == 0x000B49, "Member 'AMainPlayer_C::LookAtVerify' has a wrong offset!");

}

