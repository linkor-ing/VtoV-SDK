#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RedSkyEvent

#include "Basic.hpp"


namespace SDK::Params
{

// Function redSkyEvent.redSkyEvent_C.ExecuteUbergraph_redSkyEvent
// 0x0004 (0x0004 - 0x0000)
struct RedSkyEvent_C_ExecuteUbergraph_redSkyEvent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RedSkyEvent_C_ExecuteUbergraph_redSkyEvent) == 0x000004, "Wrong alignment on RedSkyEvent_C_ExecuteUbergraph_redSkyEvent");
static_assert(sizeof(RedSkyEvent_C_ExecuteUbergraph_redSkyEvent) == 0x000004, "Wrong size on RedSkyEvent_C_ExecuteUbergraph_redSkyEvent");
static_assert(offsetof(RedSkyEvent_C_ExecuteUbergraph_redSkyEvent, EntryPoint) == 0x000000, "Member 'RedSkyEvent_C_ExecuteUbergraph_redSkyEvent::EntryPoint' has a wrong offset!");

// Function redSkyEvent.redSkyEvent_C.set
// 0x0088 (0x0088 - 0x0000)
struct RedSkyEvent_C_Set final
{
public:
	bool                                          Param_Isred;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F79[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveLinearColor*                      Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F7A[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveLinearColor*                      Temp_object_Variable_2;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Temp_object_Variable_3;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F7B[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveLinearColor*                      Temp_object_Variable_4;                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Temp_object_Variable_5;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F7C[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveLinearColor*                      Temp_object_Variable_6;                            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Temp_object_Variable_7;                            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      K2Node_Select_Default;                             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      K2Node_Select_Default_1;                           // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      K2Node_Select_Default_2;                           // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      K2Node_Select_Default_3;                           // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode;          // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RedSkyEvent_C_Set) == 0x000008, "Wrong alignment on RedSkyEvent_C_Set");
static_assert(sizeof(RedSkyEvent_C_Set) == 0x000088, "Wrong size on RedSkyEvent_C_Set");
static_assert(offsetof(RedSkyEvent_C_Set, Param_Isred) == 0x000000, "Member 'RedSkyEvent_C_Set::Param_Isred' has a wrong offset!");
static_assert(offsetof(RedSkyEvent_C_Set, Temp_bool_Variable) == 0x000001, "Member 'RedSkyEvent_C_Set::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RedSkyEvent_C_Set, Temp_object_Variable) == 0x000008, "Member 'RedSkyEvent_C_Set::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(RedSkyEvent_C_Set, Temp_object_Variable_1) == 0x000010, "Member 'RedSkyEvent_C_Set::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(RedSkyEvent_C_Set, Temp_bool_Variable_1) == 0x000018, "Member 'RedSkyEvent_C_Set::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(RedSkyEvent_C_Set, Temp_object_Variable_2) == 0x000020, "Member 'RedSkyEvent_C_Set::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(RedSkyEvent_C_Set, Temp_object_Variable_3) == 0x000028, "Member 'RedSkyEvent_C_Set::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(RedSkyEvent_C_Set, Temp_bool_Variable_2) == 0x000030, "Member 'RedSkyEvent_C_Set::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(RedSkyEvent_C_Set, Temp_object_Variable_4) == 0x000038, "Member 'RedSkyEvent_C_Set::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(RedSkyEvent_C_Set, Temp_object_Variable_5) == 0x000040, "Member 'RedSkyEvent_C_Set::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(RedSkyEvent_C_Set, Temp_bool_Variable_3) == 0x000048, "Member 'RedSkyEvent_C_Set::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(RedSkyEvent_C_Set, Temp_object_Variable_6) == 0x000050, "Member 'RedSkyEvent_C_Set::Temp_object_Variable_6' has a wrong offset!");
static_assert(offsetof(RedSkyEvent_C_Set, Temp_object_Variable_7) == 0x000058, "Member 'RedSkyEvent_C_Set::Temp_object_Variable_7' has a wrong offset!");
static_assert(offsetof(RedSkyEvent_C_Set, K2Node_Select_Default) == 0x000060, "Member 'RedSkyEvent_C_Set::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RedSkyEvent_C_Set, K2Node_Select_Default_1) == 0x000068, "Member 'RedSkyEvent_C_Set::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(RedSkyEvent_C_Set, K2Node_Select_Default_2) == 0x000070, "Member 'RedSkyEvent_C_Set::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(RedSkyEvent_C_Set, K2Node_Select_Default_3) == 0x000078, "Member 'RedSkyEvent_C_Set::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(RedSkyEvent_C_Set, CallFunc_getMainGamemode_AsMain_Gamemode) == 0x000080, "Member 'RedSkyEvent_C_Set::CallFunc_getMainGamemode_AsMain_Gamemode' has a wrong offset!");

}

