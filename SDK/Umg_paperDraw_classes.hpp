#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Umg_paperDraw

#include "Basic.hpp"

#include "UMG_classes.hpp"
#include "InputCore_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass umg_paperDraw.umg_paperDraw_C
// 0x01D8 (0x0438 - 0x0260)
class UUmg_paperDraw_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UButton*                                buttonCrumple;                                     // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UButton*                                buttonExport;                                      // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           CanvasPaper;                                       // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UComboBoxString*                        Cbs_hue;                                           // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UComboBoxString*                        Cbs_sat;                                           // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UComboBoxString*                        Cbs_vol;                                           // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image;                                             // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_1;                                           // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_2;                                           // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_101;                                         // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_179;                                         // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_col;                                           // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_sat;                                           // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_val;                                           // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Paper;                                             // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           Pivot;                                             // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USlider*                                Slider_H;                                          // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USlider*                                Slider_jitter;                                     // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USlider*                                Slider_S;                                          // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USlider*                                Slider_size;                                       // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USlider*                                Slider_stabil;                                     // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USlider*                                Slider_V;                                          // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Tex_H;                                             // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Tex_jitter;                                        // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Tex_perc;                                          // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Tex_S;                                             // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Tex_size;                                          // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Tex_stabil;                                        // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Tex_V;                                             // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           Vb_settings;                                       // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FVector2D                              Mouse_pos;                                         // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              LastMousePos;                                      // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              LocalPos;                                          // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDraw;                                            // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_371[0x7];                                      // 0x0371(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AProp_paper_drawable_C*                 PaperDraw;                                         // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvas*                                Canvas;                                            // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDrawToRenderTargetContext             CanvasContext;                                     // 0x0388(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FVector2D                              Lastloc;                                           // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              DrawPos;                                           // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CanvasSize;                                        // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ViewportSize;                                      // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Erase;                                             // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B9[0x3];                                      // 0x03B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x03BC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         C_h;                                               // 0x03CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         C_s;                                               // 0x03D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         C_v;                                               // 0x03D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time;                                              // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time_h;                                            // 0x03DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time_s;                                            // 0x03E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time_v;                                            // 0x03E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ModeHue;                                           // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ModeSat;                                           // 0x03EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ModeVol;                                           // 0x03F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StraightDir;                                       // 0x03F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          StraightDraw;                                      // 0x03F5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          StraightDirSet;                                    // 0x03F6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CircularDraw;                                      // 0x03F7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector2D                              CircularPivot;                                     // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CircularRadius;                                    // 0x0400(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SunrayDraw;                                        // 0x0404(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DelayDraw;                                         // 0x0405(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_406[0x2];                                      // 0x0406(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   MouseKey;                                          // 0x0408(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         Jitter;                                            // 0x0420(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Size;                                              // 0x0424(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Stabil;                                            // 0x0428(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              MonitorSize;                                       // 0x042C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Angle;                                             // 0x0434(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_umg_paperDraw(int32 EntryPoint);
	void SignalDeleted();
	void SignalSaved();
	void GamemodeBeginPlay();
	void StuffUpgraded(class AMainGamemode_C* GameMode);
	void Unfoc();
	void Unfocused();
	void GamemodePreLoad();
	void AnyKey(const struct FKey& Key, bool Pressed);
	void GamemodeMakeKeys();
	void PropRenderer_finishProps();
	void ApplyColor(const struct FLinearColor& Param_Color);
	void TexturePickerApply(class UUmg_texturePicker_C* Picker, class UTexture2D* Texture, int32 Param_Index);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void AAA(bool bSuccess);
	void BndEvt__umg_paperDraw_buttonExport_K2Node_ComponentBoundEvent_7_OnButtonClickedEvent__DelegateSignature();
	void BndEvt__umg_paperDraw_slider_stabil_K2Node_ComponentBoundEvent_6_OnFloatValueChangedEvent__DelegateSignature(float Value);
	void BndEvt__umg_paperDraw_slider_size_K2Node_ComponentBoundEvent_2_OnFloatValueChangedEvent__DelegateSignature(float Value);
	void BndEvt__umg_paperDraw_slider_jitter_K2Node_ComponentBoundEvent_1_OnFloatValueChangedEvent__DelegateSignature(float Value);
	void BndEvt__umg_paperDraw_buttonCrumple_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();
	void BndEvt__umg_paperDraw_cbs_vol_K2Node_ComponentBoundEvent_12_OnSelectionChangedEvent__DelegateSignature(const class FString& SelectedItem, ESelectInfo SelectionType);
	void BndEvt__umg_paperDraw_cbs_sat_K2Node_ComponentBoundEvent_11_OnSelectionChangedEvent__DelegateSignature(const class FString& SelectedItem, ESelectInfo SelectionType);
	void BndEvt__umg_paperDraw_cbs_hue_K2Node_ComponentBoundEvent_10_OnSelectionChangedEvent__DelegateSignature(const class FString& SelectedItem, ESelectInfo SelectionType);
	void Construct();
	void BndEvt__umg_paperDraw_slider_V_K2Node_ComponentBoundEvent_5_OnFloatValueChangedEvent__DelegateSignature(float Value);
	void BndEvt__umg_paperDraw_slider_S_K2Node_ComponentBoundEvent_4_OnFloatValueChangedEvent__DelegateSignature(float Value);
	void BndEvt__umg_paperDraw_slider_H_K2Node_ComponentBoundEvent_3_OnFloatValueChangedEvent__DelegateSignature(float Value);
	void SettingsApplied(const struct FStruct_settings& Settings);
	struct FEventReply OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseButtonUp(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void UpdateDraw();
	void Init(class AProp_paper_drawable_C* Param_PaperDraw, float Param_Angle, class AProp_pencil_C* Pencil);
	struct FEventReply OnKeyDown(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent);
	void Quit();
	void SetColor();
	struct FEventReply OnKeyUp(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent);
	void Reduce();
	bool IsInBounds();
	void DreamInv(TArray<struct FStruct_save>& Invv, class ADreamBase_C** Base);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"umg_paperDraw_C">();
	}
	static class UUmg_paperDraw_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUmg_paperDraw_C>();
	}
};
static_assert(alignof(UUmg_paperDraw_C) == 0x000008, "Wrong alignment on UUmg_paperDraw_C");
static_assert(sizeof(UUmg_paperDraw_C) == 0x000438, "Wrong size on UUmg_paperDraw_C");
static_assert(offsetof(UUmg_paperDraw_C, UberGraphFrame) == 0x000260, "Member 'UUmg_paperDraw_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, buttonCrumple) == 0x000268, "Member 'UUmg_paperDraw_C::buttonCrumple' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, buttonExport) == 0x000270, "Member 'UUmg_paperDraw_C::buttonExport' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, CanvasPaper) == 0x000278, "Member 'UUmg_paperDraw_C::CanvasPaper' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, Cbs_hue) == 0x000280, "Member 'UUmg_paperDraw_C::Cbs_hue' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, Cbs_sat) == 0x000288, "Member 'UUmg_paperDraw_C::Cbs_sat' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, Cbs_vol) == 0x000290, "Member 'UUmg_paperDraw_C::Cbs_vol' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, Image) == 0x000298, "Member 'UUmg_paperDraw_C::Image' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, Image_1) == 0x0002A0, "Member 'UUmg_paperDraw_C::Image_1' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, Image_2) == 0x0002A8, "Member 'UUmg_paperDraw_C::Image_2' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, Image_101) == 0x0002B0, "Member 'UUmg_paperDraw_C::Image_101' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, Image_179) == 0x0002B8, "Member 'UUmg_paperDraw_C::Image_179' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, Img_col) == 0x0002C0, "Member 'UUmg_paperDraw_C::Img_col' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, Img_sat) == 0x0002C8, "Member 'UUmg_paperDraw_C::Img_sat' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, Img_val) == 0x0002D0, "Member 'UUmg_paperDraw_C::Img_val' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, Paper) == 0x0002D8, "Member 'UUmg_paperDraw_C::Paper' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, Pivot) == 0x0002E0, "Member 'UUmg_paperDraw_C::Pivot' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, Slider_H) == 0x0002E8, "Member 'UUmg_paperDraw_C::Slider_H' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, Slider_jitter) == 0x0002F0, "Member 'UUmg_paperDraw_C::Slider_jitter' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, Slider_S) == 0x0002F8, "Member 'UUmg_paperDraw_C::Slider_S' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, Slider_size) == 0x000300, "Member 'UUmg_paperDraw_C::Slider_size' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, Slider_stabil) == 0x000308, "Member 'UUmg_paperDraw_C::Slider_stabil' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, Slider_V) == 0x000310, "Member 'UUmg_paperDraw_C::Slider_V' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, Tex_H) == 0x000318, "Member 'UUmg_paperDraw_C::Tex_H' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, Tex_jitter) == 0x000320, "Member 'UUmg_paperDraw_C::Tex_jitter' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, Tex_perc) == 0x000328, "Member 'UUmg_paperDraw_C::Tex_perc' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, Tex_S) == 0x000330, "Member 'UUmg_paperDraw_C::Tex_S' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, Tex_size) == 0x000338, "Member 'UUmg_paperDraw_C::Tex_size' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, Tex_stabil) == 0x000340, "Member 'UUmg_paperDraw_C::Tex_stabil' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, Tex_V) == 0x000348, "Member 'UUmg_paperDraw_C::Tex_V' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, Vb_settings) == 0x000350, "Member 'UUmg_paperDraw_C::Vb_settings' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, Mouse_pos) == 0x000358, "Member 'UUmg_paperDraw_C::Mouse_pos' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, LastMousePos) == 0x000360, "Member 'UUmg_paperDraw_C::LastMousePos' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, LocalPos) == 0x000368, "Member 'UUmg_paperDraw_C::LocalPos' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, IsDraw) == 0x000370, "Member 'UUmg_paperDraw_C::IsDraw' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, PaperDraw) == 0x000378, "Member 'UUmg_paperDraw_C::PaperDraw' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, Canvas) == 0x000380, "Member 'UUmg_paperDraw_C::Canvas' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, CanvasContext) == 0x000388, "Member 'UUmg_paperDraw_C::CanvasContext' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, Lastloc) == 0x000398, "Member 'UUmg_paperDraw_C::Lastloc' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, DrawPos) == 0x0003A0, "Member 'UUmg_paperDraw_C::DrawPos' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, CanvasSize) == 0x0003A8, "Member 'UUmg_paperDraw_C::CanvasSize' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, ViewportSize) == 0x0003B0, "Member 'UUmg_paperDraw_C::ViewportSize' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, Erase) == 0x0003B8, "Member 'UUmg_paperDraw_C::Erase' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, Color) == 0x0003BC, "Member 'UUmg_paperDraw_C::Color' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, C_h) == 0x0003CC, "Member 'UUmg_paperDraw_C::C_h' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, C_s) == 0x0003D0, "Member 'UUmg_paperDraw_C::C_s' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, C_v) == 0x0003D4, "Member 'UUmg_paperDraw_C::C_v' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, Time) == 0x0003D8, "Member 'UUmg_paperDraw_C::Time' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, Time_h) == 0x0003DC, "Member 'UUmg_paperDraw_C::Time_h' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, Time_s) == 0x0003E0, "Member 'UUmg_paperDraw_C::Time_s' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, Time_v) == 0x0003E4, "Member 'UUmg_paperDraw_C::Time_v' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, ModeHue) == 0x0003E8, "Member 'UUmg_paperDraw_C::ModeHue' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, ModeSat) == 0x0003EC, "Member 'UUmg_paperDraw_C::ModeSat' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, ModeVol) == 0x0003F0, "Member 'UUmg_paperDraw_C::ModeVol' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, StraightDir) == 0x0003F4, "Member 'UUmg_paperDraw_C::StraightDir' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, StraightDraw) == 0x0003F5, "Member 'UUmg_paperDraw_C::StraightDraw' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, StraightDirSet) == 0x0003F6, "Member 'UUmg_paperDraw_C::StraightDirSet' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, CircularDraw) == 0x0003F7, "Member 'UUmg_paperDraw_C::CircularDraw' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, CircularPivot) == 0x0003F8, "Member 'UUmg_paperDraw_C::CircularPivot' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, CircularRadius) == 0x000400, "Member 'UUmg_paperDraw_C::CircularRadius' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, SunrayDraw) == 0x000404, "Member 'UUmg_paperDraw_C::SunrayDraw' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, DelayDraw) == 0x000405, "Member 'UUmg_paperDraw_C::DelayDraw' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, MouseKey) == 0x000408, "Member 'UUmg_paperDraw_C::MouseKey' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, Jitter) == 0x000420, "Member 'UUmg_paperDraw_C::Jitter' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, Size) == 0x000424, "Member 'UUmg_paperDraw_C::Size' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, Stabil) == 0x000428, "Member 'UUmg_paperDraw_C::Stabil' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, MonitorSize) == 0x00042C, "Member 'UUmg_paperDraw_C::MonitorSize' has a wrong offset!");
static_assert(offsetof(UUmg_paperDraw_C, Angle) == 0x000434, "Member 'UUmg_paperDraw_C::Angle' has a wrong offset!");

}

