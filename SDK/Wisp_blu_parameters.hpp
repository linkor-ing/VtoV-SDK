#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Wisp_blu

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Enum_interactionActions_structs.hpp"
#include "Engine_structs.hpp"
#include "InputCore_structs.hpp"
#include "AIModule_structs.hpp"


namespace SDK::Params
{

// Function wisp_blu.wisp_blu_C.ExecuteUbergraph_wisp_blu
// 0x0908 (0x0908 - 0x0000)
struct Wisp_blu_C_ExecuteUbergraph_wisp_blu final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPathFollowingResult                          K2Node_CustomEvent_MovementResult_1;               // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EPathFollowingResult MovementResult)> K2Node_CreateDelegate_OutputDelegate;              // 0x0018(0x0010)(ZeroConstructor, NoDestructor)
	EPathFollowingResult                          K2Node_CustomEvent_MovementResult;                 // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EPathFollowingResult MovementResult)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x002C(0x0010)(ZeroConstructor, NoDestructor)
	EPathFollowingResult                          Temp_byte_Variable;                                // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_12;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_5;                                // 0x0048(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         K2Node_Event_damage_5;                             // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_fuel;                                 // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_4;                             // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hot;                                  // 0x00DC(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_11;                            // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_4;                                // 0x0170(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	Enum_interactionActions                       K2Node_Event_action;                               // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F9[0x7];                                      // 0x01F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_10;                            // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_9;                             // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_3;                             // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_location_1;                           // 0x0214(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_8;                             // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_7;                             // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_6;                             // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_wheelDelta;                           // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23C[0x4];                                      // 0x023C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_5;                             // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Event_mouse;                                // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_4;                             // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_Event_key_1;                                // 0x0258(0x0018)(HasGetValueTypeHash)
	bool                                          K2Node_Event_pressed;                              // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_271[0x3];                                      // 0x0271(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_temperature_1;                        // 0x0274(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_temperature;                          // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_speed;                                // 0x027C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_3;                             // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_3;                                // 0x0288(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class FString                                 K2Node_Event_name;                                 // 0x0310(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         K2Node_Event_volume;                               // 0x0320(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_324[0x4];                                      // 0x0324(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_2;                             // 0x0328(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_location;                             // 0x0330(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_2;                             // 0x033C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_clean_1;                              // 0x0340(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_341[0x7];                                      // 0x0341(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_1;                             // 0x0348(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_2;                                // 0x0350(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AHook_C*                                K2Node_Event_hook_1;                               // 0x03D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_clean;                                // 0x03E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E4[0x4];                                      // 0x03E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player;                               // 0x03E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHook_C*                                K2Node_Event_hook;                                 // 0x03F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Condition;                      // 0x03F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F9[0x3];                                      // 0x03F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x03FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0400(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VInterpTo_ReturnValue;                    // 0x0404(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0410(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0498(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_499[0x3];                                      // 0x0499(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Ease_ReturnValue;                         // 0x049C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue;  // 0x04A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x04A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_1;                       // 0x04A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_PerlinNoise1D_ReturnValue;                // 0x04AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue_1;       // 0x04B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_2;                       // 0x04B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x04B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x04BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VictoryFloatPlusEquals_FloatOut;          // 0x04C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x04C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x04D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult_1;  // 0x04D4(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_55C[0x4];                                      // 0x055C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_Event_key;                                  // 0x0560(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_actor_1;                              // 0x0570(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_1;                             // 0x0578(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_1;                                // 0x057C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                K2Node_Event_impact_1;                             // 0x0604(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_skipSetting;                          // 0x0610(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_static;                               // 0x0611(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_frozen;                               // 0x0612(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_active;                               // 0x0613(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_614[0x4];                                      // 0x0614(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0618(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0620(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetRandomPointInNavigableRadius_RandomLocation; // 0x062C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_GetRandomPointInNavigableRadius_ReturnValue; // 0x0638(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_639[0x7];                                      // 0x0639(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAIAsyncTaskBlueprintProxy*             CallFunc_CreateMoveToProxyObject_ReturnValue;      // 0x0640(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0648(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_649[0x7];                                      // 0x0649(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode;          // 0x0650(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0658(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0659(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x065A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_RandomBoolWithWeight_ReturnValue;         // 0x065B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_WasRecentlyRendered_ReturnValue;          // 0x065C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65D[0x3];                                      // 0x065D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AWaterVolume_C*                         K2Node_Event_water_3;                              // 0x0660(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0668(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0669(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_66A[0x6];                                      // 0x066A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_2;  // 0x0670(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_2;           // 0x0678(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_2;            // 0x0680(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_2;       // 0x0688(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep_1;           // 0x068C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68D[0x3];                                      // 0x068D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult_1;          // 0x0690(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class ADoor_C*                                K2Node_DynamicCast_AsDoor;                         // 0x0718(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0720(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_721[0x7];                                      // 0x0721(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0728(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x0730(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0738(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0744(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_1;  // 0x0750(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_1;           // 0x0758(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_1;            // 0x0760(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_1;       // 0x0768(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x076C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_76D[0x3];                                      // 0x076D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0770(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x07F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_804[0x4];                                      // 0x0804(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             K2Node_DynamicCast_AsCharacter;                    // 0x0808(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0810(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_811[0x7];                                      // 0x0811(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0818(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0820(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0828(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0830(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_834[0x4];                                      // 0x0834(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             K2Node_DynamicCast_AsCharacter_1;                  // 0x0838(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0840(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_activate;                             // 0x0841(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_842[0x6];                                      // 0x0842(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AWaterVolume_C*                         K2Node_Event_water_2;                              // 0x0848(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWaterVolume_C*                         K2Node_Event_water_1;                              // 0x0850(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWaterVolume_C*                         K2Node_Event_water;                                // 0x0858(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage;                               // 0x0860(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit;                                  // 0x0864(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_8EC[0x4];                                      // 0x08EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_actor;                                // 0x08F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_impact;                               // 0x08F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0904(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wisp_blu_C_ExecuteUbergraph_wisp_blu) == 0x000008, "Wrong alignment on Wisp_blu_C_ExecuteUbergraph_wisp_blu");
static_assert(sizeof(Wisp_blu_C_ExecuteUbergraph_wisp_blu) == 0x000908, "Wrong size on Wisp_blu_C_ExecuteUbergraph_wisp_blu");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, EntryPoint) == 0x000000, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::EntryPoint' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, CallFunc_RandomFloatInRange_ReturnValue) == 0x000004, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, CallFunc_MakeVector_ReturnValue) == 0x000008, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_CustomEvent_MovementResult_1) == 0x000014, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_CustomEvent_MovementResult_1' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_CreateDelegate_OutputDelegate) == 0x000018, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_CustomEvent_MovementResult) == 0x000028, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_CustomEvent_MovementResult' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_CreateDelegate_OutputDelegate_1) == 0x00002C, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, Temp_byte_Variable) == 0x00003C, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00003D, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_player_12) == 0x000040, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_player_12' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_hit_5) == 0x000048, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_hit_5' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_damage_5) == 0x0000D0, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_damage_5' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_fuel) == 0x0000D4, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_fuel' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_damage_4) == 0x0000D8, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_damage_4' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_hot) == 0x0000DC, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_hot' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_player_11) == 0x000168, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_player_11' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_hit_4) == 0x000170, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_hit_4' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_action) == 0x0001F8, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_action' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_player_10) == 0x000200, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_player_10' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_player_9) == 0x000208, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_player_9' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_damage_3) == 0x000210, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_damage_3' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_location_1) == 0x000214, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_location_1' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_player_8) == 0x000220, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_player_8' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_player_7) == 0x000228, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_player_7' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_player_6) == 0x000230, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_player_6' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_wheelDelta) == 0x000238, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_wheelDelta' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_player_5) == 0x000240, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_player_5' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_mouse) == 0x000248, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_mouse' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_player_4) == 0x000250, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_player_4' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_key_1) == 0x000258, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_key_1' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_pressed) == 0x000270, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_pressed' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_temperature_1) == 0x000274, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_temperature_1' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_temperature) == 0x000278, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_temperature' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_speed) == 0x00027C, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_speed' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_player_3) == 0x000280, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_player_3' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_hit_3) == 0x000288, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_hit_3' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_name) == 0x000310, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_name' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_volume) == 0x000320, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_volume' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_player_2) == 0x000328, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_player_2' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_location) == 0x000330, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_location' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_damage_2) == 0x00033C, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_damage_2' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_clean_1) == 0x000340, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_clean_1' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_player_1) == 0x000348, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_player_1' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_hit_2) == 0x000350, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_hit_2' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_hook_1) == 0x0003D8, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_hook_1' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_clean) == 0x0003E0, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_clean' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_player) == 0x0003E8, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_player' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_hook) == 0x0003F0, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_hook' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_CustomEvent_Condition) == 0x0003F8, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_CustomEvent_Condition' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_DeltaSeconds) == 0x0003FC, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000400, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, CallFunc_VInterpTo_ReturnValue) == 0x000404, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::CallFunc_VInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000410, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_SwitchEnum_CmpSuccess) == 0x000498, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, CallFunc_Ease_ReturnValue) == 0x00049C, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue) == 0x0004A0, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, CallFunc_Lerp_ReturnValue) == 0x0004A4, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, CallFunc_Lerp_ReturnValue_1) == 0x0004A8, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, CallFunc_PerlinNoise1D_ReturnValue) == 0x0004AC, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::CallFunc_PerlinNoise1D_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, CallFunc_GetWorldDeltaSeconds_ReturnValue_1) == 0x0004B0, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::CallFunc_GetWorldDeltaSeconds_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, CallFunc_Lerp_ReturnValue_2) == 0x0004B4, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::CallFunc_Lerp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0004B8, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, CallFunc_Add_FloatFloat_ReturnValue) == 0x0004BC, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, CallFunc_VictoryFloatPlusEquals_FloatOut) == 0x0004C0, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::CallFunc_VictoryFloatPlusEquals_FloatOut' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, CallFunc_MakeVector_ReturnValue_1) == 0x0004C4, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x0004D0, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, CallFunc_K2_SetRelativeLocation_SweepHitResult_1) == 0x0004D4, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::CallFunc_K2_SetRelativeLocation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_key) == 0x000560, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_key' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_actor_1) == 0x000570, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_actor_1' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_damage_1) == 0x000578, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_damage_1' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_hit_1) == 0x00057C, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_hit_1' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_impact_1) == 0x000604, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_impact_1' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_skipSetting) == 0x000610, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_skipSetting' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_static) == 0x000611, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_static' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_frozen) == 0x000612, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_frozen' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_active) == 0x000613, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_active' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, CallFunc_GetPlayerPawn_ReturnValue) == 0x000618, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000620, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, CallFunc_K2_GetRandomPointInNavigableRadius_RandomLocation) == 0x00062C, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::CallFunc_K2_GetRandomPointInNavigableRadius_RandomLocation' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, CallFunc_K2_GetRandomPointInNavigableRadius_ReturnValue) == 0x000638, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::CallFunc_K2_GetRandomPointInNavigableRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, CallFunc_CreateMoveToProxyObject_ReturnValue) == 0x000640, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::CallFunc_CreateMoveToProxyObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, CallFunc_IsValid_ReturnValue) == 0x000648, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, CallFunc_getMainGamemode_AsMain_Gamemode) == 0x000650, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::CallFunc_getMainGamemode_AsMain_Gamemode' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000658, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, CallFunc_Not_PreBool_ReturnValue) == 0x000659, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, CallFunc_BooleanOR_ReturnValue) == 0x00065A, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, CallFunc_RandomBoolWithWeight_ReturnValue) == 0x00065B, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::CallFunc_RandomBoolWithWeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, CallFunc_WasRecentlyRendered_ReturnValue) == 0x00065C, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::CallFunc_WasRecentlyRendered_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_water_3) == 0x000660, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_water_3' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, CallFunc_Not_PreBool_ReturnValue_1) == 0x000668, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, CallFunc_BooleanAND_ReturnValue) == 0x000669, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_ComponentBoundEvent_OverlappedComponent_2) == 0x000670, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_ComponentBoundEvent_OverlappedComponent_2' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_ComponentBoundEvent_OtherActor_2) == 0x000678, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_ComponentBoundEvent_OtherActor_2' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_ComponentBoundEvent_OtherComp_2) == 0x000680, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_ComponentBoundEvent_OtherComp_2' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_ComponentBoundEvent_OtherBodyIndex_2) == 0x000688, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_ComponentBoundEvent_OtherBodyIndex_2' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_ComponentBoundEvent_bFromSweep_1) == 0x00068C, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_ComponentBoundEvent_bFromSweep_1' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_ComponentBoundEvent_SweepResult_1) == 0x000690, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_ComponentBoundEvent_SweepResult_1' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_DynamicCast_AsDoor) == 0x000718, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_DynamicCast_AsDoor' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_DynamicCast_bSuccess) == 0x000720, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, CallFunc_GetPlayerController_ReturnValue) == 0x000728, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x000730, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000738, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000744, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_ComponentBoundEvent_OverlappedComponent_1) == 0x000750, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_ComponentBoundEvent_OverlappedComponent_1' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_ComponentBoundEvent_OtherActor_1) == 0x000758, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_ComponentBoundEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_ComponentBoundEvent_OtherComp_1) == 0x000760, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_ComponentBoundEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_ComponentBoundEvent_OtherBodyIndex_1) == 0x000768, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_ComponentBoundEvent_OtherBodyIndex_1' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_ComponentBoundEvent_bFromSweep) == 0x00076C, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_ComponentBoundEvent_SweepResult) == 0x000770, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, CallFunc_FindLookAtRotation_ReturnValue) == 0x0007F8, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_DynamicCast_AsCharacter) == 0x000808, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_DynamicCast_AsCharacter' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_DynamicCast_bSuccess_1) == 0x000810, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000818, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_ComponentBoundEvent_OtherActor) == 0x000820, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_ComponentBoundEvent_OtherComp) == 0x000828, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000830, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_DynamicCast_AsCharacter_1) == 0x000838, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_DynamicCast_AsCharacter_1' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_DynamicCast_bSuccess_2) == 0x000840, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_activate) == 0x000841, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_activate' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_water_2) == 0x000848, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_water_2' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_water_1) == 0x000850, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_water_1' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_water) == 0x000858, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_water' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_damage) == 0x000860, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_damage' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_hit) == 0x000864, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_hit' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_actor) == 0x0008F0, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_actor' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, K2Node_Event_impact) == 0x0008F8, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::K2Node_Event_impact' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ExecuteUbergraph_wisp_blu, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000904, "Member 'Wisp_blu_C_ExecuteUbergraph_wisp_blu::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.ImpactDamage
// 0x00A8 (0x00A8 - 0x0000)
struct Wisp_blu_C_ImpactDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0004(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0090(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Impact;                                            // 0x0098(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_blu_C_ImpactDamage) == 0x000008, "Wrong alignment on Wisp_blu_C_ImpactDamage");
static_assert(sizeof(Wisp_blu_C_ImpactDamage) == 0x0000A8, "Wrong size on Wisp_blu_C_ImpactDamage");
static_assert(offsetof(Wisp_blu_C_ImpactDamage, Damage) == 0x000000, "Member 'Wisp_blu_C_ImpactDamage::Damage' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ImpactDamage, Hit) == 0x000004, "Member 'Wisp_blu_C_ImpactDamage::Hit' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ImpactDamage, Actor) == 0x000090, "Member 'Wisp_blu_C_ImpactDamage::Actor' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ImpactDamage, Impact) == 0x000098, "Member 'Wisp_blu_C_ImpactDamage::Impact' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.leaveWater
// 0x0008 (0x0008 - 0x0000)
struct Wisp_blu_C_LeaveWater final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_blu_C_LeaveWater) == 0x000008, "Wrong alignment on Wisp_blu_C_LeaveWater");
static_assert(sizeof(Wisp_blu_C_LeaveWater) == 0x000008, "Wrong size on Wisp_blu_C_LeaveWater");
static_assert(offsetof(Wisp_blu_C_LeaveWater, Water) == 0x000000, "Member 'Wisp_blu_C_LeaveWater::Water' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.enterWaterOrigin
// 0x0008 (0x0008 - 0x0000)
struct Wisp_blu_C_EnterWaterOrigin final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_blu_C_EnterWaterOrigin) == 0x000008, "Wrong alignment on Wisp_blu_C_EnterWaterOrigin");
static_assert(sizeof(Wisp_blu_C_EnterWaterOrigin) == 0x000008, "Wrong size on Wisp_blu_C_EnterWaterOrigin");
static_assert(offsetof(Wisp_blu_C_EnterWaterOrigin, Water) == 0x000000, "Member 'Wisp_blu_C_EnterWaterOrigin::Water' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.leaveWaterOrigin
// 0x0008 (0x0008 - 0x0000)
struct Wisp_blu_C_LeaveWaterOrigin final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_blu_C_LeaveWaterOrigin) == 0x000008, "Wrong alignment on Wisp_blu_C_LeaveWaterOrigin");
static_assert(sizeof(Wisp_blu_C_LeaveWaterOrigin) == 0x000008, "Wrong size on Wisp_blu_C_LeaveWaterOrigin");
static_assert(offsetof(Wisp_blu_C_LeaveWaterOrigin, Water) == 0x000000, "Member 'Wisp_blu_C_LeaveWaterOrigin::Water' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.virus
// 0x0001 (0x0001 - 0x0000)
struct Wisp_blu_C_Virus final
{
public:
	bool                                          Activate;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wisp_blu_C_Virus) == 0x000001, "Wrong alignment on Wisp_blu_C_Virus");
static_assert(sizeof(Wisp_blu_C_Virus) == 0x000001, "Wrong size on Wisp_blu_C_Virus");
static_assert(offsetof(Wisp_blu_C_Virus, Activate) == 0x000000, "Member 'Wisp_blu_C_Virus::Activate' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.BndEvt__wisp_blu_agravSphere_K2Node_ComponentBoundEvent_4_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct Wisp_blu_C_BndEvt__wisp_blu_agravSphere_K2Node_ComponentBoundEvent_4_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_blu_C_BndEvt__wisp_blu_agravSphere_K2Node_ComponentBoundEvent_4_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on Wisp_blu_C_BndEvt__wisp_blu_agravSphere_K2Node_ComponentBoundEvent_4_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(Wisp_blu_C_BndEvt__wisp_blu_agravSphere_K2Node_ComponentBoundEvent_4_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on Wisp_blu_C_BndEvt__wisp_blu_agravSphere_K2Node_ComponentBoundEvent_4_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(Wisp_blu_C_BndEvt__wisp_blu_agravSphere_K2Node_ComponentBoundEvent_4_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'Wisp_blu_C_BndEvt__wisp_blu_agravSphere_K2Node_ComponentBoundEvent_4_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_BndEvt__wisp_blu_agravSphere_K2Node_ComponentBoundEvent_4_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'Wisp_blu_C_BndEvt__wisp_blu_agravSphere_K2Node_ComponentBoundEvent_4_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_BndEvt__wisp_blu_agravSphere_K2Node_ComponentBoundEvent_4_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'Wisp_blu_C_BndEvt__wisp_blu_agravSphere_K2Node_ComponentBoundEvent_4_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_BndEvt__wisp_blu_agravSphere_K2Node_ComponentBoundEvent_4_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'Wisp_blu_C_BndEvt__wisp_blu_agravSphere_K2Node_ComponentBoundEvent_4_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.BndEvt__wisp_blu_agravSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct Wisp_blu_C_BndEvt__wisp_blu_agravSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Wisp_blu_C_BndEvt__wisp_blu_agravSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on Wisp_blu_C_BndEvt__wisp_blu_agravSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(Wisp_blu_C_BndEvt__wisp_blu_agravSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on Wisp_blu_C_BndEvt__wisp_blu_agravSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(Wisp_blu_C_BndEvt__wisp_blu_agravSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'Wisp_blu_C_BndEvt__wisp_blu_agravSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_BndEvt__wisp_blu_agravSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'Wisp_blu_C_BndEvt__wisp_blu_agravSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_BndEvt__wisp_blu_agravSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'Wisp_blu_C_BndEvt__wisp_blu_agravSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_BndEvt__wisp_blu_agravSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'Wisp_blu_C_BndEvt__wisp_blu_agravSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_BndEvt__wisp_blu_agravSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'Wisp_blu_C_BndEvt__wisp_blu_agravSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_BndEvt__wisp_blu_agravSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'Wisp_blu_C_BndEvt__wisp_blu_agravSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct Wisp_blu_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Wisp_blu_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on Wisp_blu_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(Wisp_blu_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on Wisp_blu_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(Wisp_blu_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'Wisp_blu_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'Wisp_blu_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'Wisp_blu_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'Wisp_blu_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'Wisp_blu_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'Wisp_blu_C_BndEvt__wisp_red_dooropener_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.enterWater
// 0x0008 (0x0008 - 0x0000)
struct Wisp_blu_C_EnterWater final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_blu_C_EnterWater) == 0x000008, "Wrong alignment on Wisp_blu_C_EnterWater");
static_assert(sizeof(Wisp_blu_C_EnterWater) == 0x000008, "Wrong size on Wisp_blu_C_EnterWater");
static_assert(offsetof(Wisp_blu_C_EnterWater, Water) == 0x000000, "Member 'Wisp_blu_C_EnterWater::Water' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.setPropProps
// 0x0003 (0x0003 - 0x0000)
struct Wisp_blu_C_SetPropProps final
{
public:
	bool                                          Static;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Frozen;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Active;                                            // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wisp_blu_C_SetPropProps) == 0x000001, "Wrong alignment on Wisp_blu_C_SetPropProps");
static_assert(sizeof(Wisp_blu_C_SetPropProps) == 0x000003, "Wrong size on Wisp_blu_C_SetPropProps");
static_assert(offsetof(Wisp_blu_C_SetPropProps, Static) == 0x000000, "Member 'Wisp_blu_C_SetPropProps::Static' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_SetPropProps, Frozen) == 0x000001, "Member 'Wisp_blu_C_SetPropProps::Frozen' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_SetPropProps, Active) == 0x000002, "Member 'Wisp_blu_C_SetPropProps::Active' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.addDamage
// 0x00A8 (0x00A8 - 0x0000)
struct Wisp_blu_C_AddDamage final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x000C(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                Impact;                                            // 0x0094(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipSetting;                                       // 0x00A0(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wisp_blu_C_AddDamage) == 0x000008, "Wrong alignment on Wisp_blu_C_AddDamage");
static_assert(sizeof(Wisp_blu_C_AddDamage) == 0x0000A8, "Wrong size on Wisp_blu_C_AddDamage");
static_assert(offsetof(Wisp_blu_C_AddDamage, Actor) == 0x000000, "Member 'Wisp_blu_C_AddDamage::Actor' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_AddDamage, Damage) == 0x000008, "Member 'Wisp_blu_C_AddDamage::Damage' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_AddDamage, Hit) == 0x00000C, "Member 'Wisp_blu_C_AddDamage::Hit' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_AddDamage, Impact) == 0x000094, "Member 'Wisp_blu_C_AddDamage::Impact' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_AddDamage, SkipSetting) == 0x0000A0, "Member 'Wisp_blu_C_AddDamage::SkipSetting' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.setKey
// 0x0010 (0x0010 - 0x0000)
struct Wisp_blu_C_SetKey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_blu_C_SetKey) == 0x000008, "Wrong alignment on Wisp_blu_C_SetKey");
static_assert(sizeof(Wisp_blu_C_SetKey) == 0x000010, "Wrong size on Wisp_blu_C_SetKey");
static_assert(offsetof(Wisp_blu_C_SetKey, Key) == 0x000000, "Member 'Wisp_blu_C_SetKey::Key' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct Wisp_blu_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_blu_C_ReceiveTick) == 0x000004, "Wrong alignment on Wisp_blu_C_ReceiveTick");
static_assert(sizeof(Wisp_blu_C_ReceiveTick) == 0x000004, "Wrong size on Wisp_blu_C_ReceiveTick");
static_assert(offsetof(Wisp_blu_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'Wisp_blu_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.dir
// 0x0001 (0x0001 - 0x0000)
struct Wisp_blu_C_Dir final
{
public:
	bool                                          Condition;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wisp_blu_C_Dir) == 0x000001, "Wrong alignment on Wisp_blu_C_Dir");
static_assert(sizeof(Wisp_blu_C_Dir) == 0x000001, "Wrong size on Wisp_blu_C_Dir");
static_assert(offsetof(Wisp_blu_C_Dir, Condition) == 0x000000, "Member 'Wisp_blu_C_Dir::Condition' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.hookTension
// 0x0008 (0x0008 - 0x0000)
struct Wisp_blu_C_HookTension final
{
public:
	class AHook_C*                                Hook;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_blu_C_HookTension) == 0x000008, "Wrong alignment on Wisp_blu_C_HookTension");
static_assert(sizeof(Wisp_blu_C_HookTension) == 0x000008, "Wrong size on Wisp_blu_C_HookTension");
static_assert(offsetof(Wisp_blu_C_HookTension, Hook) == 0x000000, "Member 'Wisp_blu_C_HookTension::Hook' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.cleanSponge
// 0x0010 (0x0010 - 0x0000)
struct Wisp_blu_C_CleanSponge final
{
public:
	float                                         Clean;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          Player;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_blu_C_CleanSponge) == 0x000008, "Wrong alignment on Wisp_blu_C_CleanSponge");
static_assert(sizeof(Wisp_blu_C_CleanSponge) == 0x000010, "Wrong size on Wisp_blu_C_CleanSponge");
static_assert(offsetof(Wisp_blu_C_CleanSponge, Clean) == 0x000000, "Member 'Wisp_blu_C_CleanSponge::Clean' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_CleanSponge, Player) == 0x000008, "Member 'Wisp_blu_C_CleanSponge::Player' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.hooked
// 0x0008 (0x0008 - 0x0000)
struct Wisp_blu_C_Hooked final
{
public:
	class AHook_C*                                Hook;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_blu_C_Hooked) == 0x000008, "Wrong alignment on Wisp_blu_C_Hooked");
static_assert(sizeof(Wisp_blu_C_Hooked) == 0x000008, "Wrong size on Wisp_blu_C_Hooked");
static_assert(offsetof(Wisp_blu_C_Hooked, Hook) == 0x000000, "Member 'Wisp_blu_C_Hooked::Hook' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.playerUsedOn
// 0x0090 (0x0090 - 0x0000)
struct Wisp_blu_C_PlayerUsedOn final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Wisp_blu_C_PlayerUsedOn) == 0x000008, "Wrong alignment on Wisp_blu_C_PlayerUsedOn");
static_assert(sizeof(Wisp_blu_C_PlayerUsedOn) == 0x000090, "Wrong size on Wisp_blu_C_PlayerUsedOn");
static_assert(offsetof(Wisp_blu_C_PlayerUsedOn, Player) == 0x000000, "Member 'Wisp_blu_C_PlayerUsedOn::Player' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_PlayerUsedOn, Hit) == 0x000008, "Member 'Wisp_blu_C_PlayerUsedOn::Hit' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.slice
// 0x0001 (0x0001 - 0x0000)
struct Wisp_blu_C_Slice final
{
public:
	bool                                          Clean;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wisp_blu_C_Slice) == 0x000001, "Wrong alignment on Wisp_blu_C_Slice");
static_assert(sizeof(Wisp_blu_C_Slice) == 0x000001, "Wrong size on Wisp_blu_C_Slice");
static_assert(offsetof(Wisp_blu_C_Slice, Clean) == 0x000000, "Member 'Wisp_blu_C_Slice::Clean' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.reachedByExplosion
// 0x0010 (0x0010 - 0x0000)
struct Wisp_blu_C_ReachedByExplosion final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_blu_C_ReachedByExplosion) == 0x000004, "Wrong alignment on Wisp_blu_C_ReachedByExplosion");
static_assert(sizeof(Wisp_blu_C_ReachedByExplosion) == 0x000010, "Wrong size on Wisp_blu_C_ReachedByExplosion");
static_assert(offsetof(Wisp_blu_C_ReachedByExplosion, Location) == 0x000000, "Member 'Wisp_blu_C_ReachedByExplosion::Location' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ReachedByExplosion, Damage) == 0x00000C, "Member 'Wisp_blu_C_ReachedByExplosion::Damage' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.playerLookAway
// 0x0008 (0x0008 - 0x0000)
struct Wisp_blu_C_PlayerLookAway final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_blu_C_PlayerLookAway) == 0x000008, "Wrong alignment on Wisp_blu_C_PlayerLookAway");
static_assert(sizeof(Wisp_blu_C_PlayerLookAway) == 0x000008, "Wrong size on Wisp_blu_C_PlayerLookAway");
static_assert(offsetof(Wisp_blu_C_PlayerLookAway, Player) == 0x000000, "Member 'Wisp_blu_C_PlayerLookAway::Player' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.stepped
// 0x0004 (0x0004 - 0x0000)
struct Wisp_blu_C_Stepped final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_blu_C_Stepped) == 0x000004, "Wrong alignment on Wisp_blu_C_Stepped");
static_assert(sizeof(Wisp_blu_C_Stepped) == 0x000004, "Wrong size on Wisp_blu_C_Stepped");
static_assert(offsetof(Wisp_blu_C_Stepped, Volume) == 0x000000, "Member 'Wisp_blu_C_Stepped::Volume' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.ActionName
// 0x00A0 (0x00A0 - 0x0000)
struct Wisp_blu_C_ActionName final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class FString                                 Param_Name;                                        // 0x0090(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_blu_C_ActionName) == 0x000008, "Wrong alignment on Wisp_blu_C_ActionName");
static_assert(sizeof(Wisp_blu_C_ActionName) == 0x0000A0, "Wrong size on Wisp_blu_C_ActionName");
static_assert(offsetof(Wisp_blu_C_ActionName, Player) == 0x000000, "Member 'Wisp_blu_C_ActionName::Player' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ActionName, Hit) == 0x000008, "Member 'Wisp_blu_C_ActionName::Hit' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ActionName, Param_Name) == 0x000090, "Member 'Wisp_blu_C_ActionName::Param_Name' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.accumulateTemperature
// 0x0008 (0x0008 - 0x0000)
struct Wisp_blu_C_AccumulateTemperature final
{
public:
	float                                         Temperature;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_blu_C_AccumulateTemperature) == 0x000004, "Wrong alignment on Wisp_blu_C_AccumulateTemperature");
static_assert(sizeof(Wisp_blu_C_AccumulateTemperature) == 0x000008, "Wrong size on Wisp_blu_C_AccumulateTemperature");
static_assert(offsetof(Wisp_blu_C_AccumulateTemperature, Temperature) == 0x000000, "Member 'Wisp_blu_C_AccumulateTemperature::Temperature' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_AccumulateTemperature, Speed) == 0x000004, "Member 'Wisp_blu_C_AccumulateTemperature::Speed' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.addTemperature
// 0x0004 (0x0004 - 0x0000)
struct Wisp_blu_C_AddTemperature final
{
public:
	float                                         Temperature;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_blu_C_AddTemperature) == 0x000004, "Wrong alignment on Wisp_blu_C_AddTemperature");
static_assert(sizeof(Wisp_blu_C_AddTemperature) == 0x000004, "Wrong size on Wisp_blu_C_AddTemperature");
static_assert(offsetof(Wisp_blu_C_AddTemperature, Temperature) == 0x000000, "Member 'Wisp_blu_C_AddTemperature::Temperature' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.playerHandAnyKey
// 0x0028 (0x0028 - 0x0000)
struct Wisp_blu_C_PlayerHandAnyKey final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   Key;                                               // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Pressed;                                           // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wisp_blu_C_PlayerHandAnyKey) == 0x000008, "Wrong alignment on Wisp_blu_C_PlayerHandAnyKey");
static_assert(sizeof(Wisp_blu_C_PlayerHandAnyKey) == 0x000028, "Wrong size on Wisp_blu_C_PlayerHandAnyKey");
static_assert(offsetof(Wisp_blu_C_PlayerHandAnyKey, Player) == 0x000000, "Member 'Wisp_blu_C_PlayerHandAnyKey::Player' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_PlayerHandAnyKey, Key) == 0x000008, "Member 'Wisp_blu_C_PlayerHandAnyKey::Key' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_PlayerHandAnyKey, Pressed) == 0x000020, "Member 'Wisp_blu_C_PlayerHandAnyKey::Pressed' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.playerHandMouse
// 0x0010 (0x0010 - 0x0000)
struct Wisp_blu_C_PlayerHandMouse final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Mouse;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_blu_C_PlayerHandMouse) == 0x000008, "Wrong alignment on Wisp_blu_C_PlayerHandMouse");
static_assert(sizeof(Wisp_blu_C_PlayerHandMouse) == 0x000010, "Wrong size on Wisp_blu_C_PlayerHandMouse");
static_assert(offsetof(Wisp_blu_C_PlayerHandMouse, Player) == 0x000000, "Member 'Wisp_blu_C_PlayerHandMouse::Player' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_PlayerHandMouse, Mouse) == 0x000008, "Member 'Wisp_blu_C_PlayerHandMouse::Mouse' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.playerHandMouseWheel
// 0x0010 (0x0010 - 0x0000)
struct Wisp_blu_C_PlayerHandMouseWheel final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WheelDelta;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_blu_C_PlayerHandMouseWheel) == 0x000008, "Wrong alignment on Wisp_blu_C_PlayerHandMouseWheel");
static_assert(sizeof(Wisp_blu_C_PlayerHandMouseWheel) == 0x000010, "Wrong size on Wisp_blu_C_PlayerHandMouseWheel");
static_assert(offsetof(Wisp_blu_C_PlayerHandMouseWheel, Player) == 0x000000, "Member 'Wisp_blu_C_PlayerHandMouseWheel::Player' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_PlayerHandMouseWheel, WheelDelta) == 0x000008, "Member 'Wisp_blu_C_PlayerHandMouseWheel::WheelDelta' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.playerHandRelease_LMB
// 0x0008 (0x0008 - 0x0000)
struct Wisp_blu_C_PlayerHandRelease_LMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_blu_C_PlayerHandRelease_LMB) == 0x000008, "Wrong alignment on Wisp_blu_C_PlayerHandRelease_LMB");
static_assert(sizeof(Wisp_blu_C_PlayerHandRelease_LMB) == 0x000008, "Wrong size on Wisp_blu_C_PlayerHandRelease_LMB");
static_assert(offsetof(Wisp_blu_C_PlayerHandRelease_LMB, Player) == 0x000000, "Member 'Wisp_blu_C_PlayerHandRelease_LMB::Player' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.playerHandRelease_RMB
// 0x0008 (0x0008 - 0x0000)
struct Wisp_blu_C_PlayerHandRelease_RMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_blu_C_PlayerHandRelease_RMB) == 0x000008, "Wrong alignment on Wisp_blu_C_PlayerHandRelease_RMB");
static_assert(sizeof(Wisp_blu_C_PlayerHandRelease_RMB) == 0x000008, "Wrong size on Wisp_blu_C_PlayerHandRelease_RMB");
static_assert(offsetof(Wisp_blu_C_PlayerHandRelease_RMB, Player) == 0x000000, "Member 'Wisp_blu_C_PlayerHandRelease_RMB::Player' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.exploded
// 0x0010 (0x0010 - 0x0000)
struct Wisp_blu_C_Exploded final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_blu_C_Exploded) == 0x000004, "Wrong alignment on Wisp_blu_C_Exploded");
static_assert(sizeof(Wisp_blu_C_Exploded) == 0x000010, "Wrong size on Wisp_blu_C_Exploded");
static_assert(offsetof(Wisp_blu_C_Exploded, Damage) == 0x000000, "Member 'Wisp_blu_C_Exploded::Damage' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_Exploded, Location) == 0x000004, "Member 'Wisp_blu_C_Exploded::Location' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.playerHandUse_LMB
// 0x0008 (0x0008 - 0x0000)
struct Wisp_blu_C_PlayerHandUse_LMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_blu_C_PlayerHandUse_LMB) == 0x000008, "Wrong alignment on Wisp_blu_C_PlayerHandUse_LMB");
static_assert(sizeof(Wisp_blu_C_PlayerHandUse_LMB) == 0x000008, "Wrong size on Wisp_blu_C_PlayerHandUse_LMB");
static_assert(offsetof(Wisp_blu_C_PlayerHandUse_LMB, Player) == 0x000000, "Member 'Wisp_blu_C_PlayerHandUse_LMB::Player' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.playerHandUse_RMB
// 0x0008 (0x0008 - 0x0000)
struct Wisp_blu_C_PlayerHandUse_RMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_blu_C_PlayerHandUse_RMB) == 0x000008, "Wrong alignment on Wisp_blu_C_PlayerHandUse_RMB");
static_assert(sizeof(Wisp_blu_C_PlayerHandUse_RMB) == 0x000008, "Wrong size on Wisp_blu_C_PlayerHandUse_RMB");
static_assert(offsetof(Wisp_blu_C_PlayerHandUse_RMB, Player) == 0x000000, "Member 'Wisp_blu_C_PlayerHandUse_RMB::Player' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.actionOptionIndex
// 0x0098 (0x0098 - 0x0000)
struct Wisp_blu_C_ActionOptionIndex final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	Enum_interactionActions                       Action;                                            // 0x0090(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_blu_C_ActionOptionIndex) == 0x000008, "Wrong alignment on Wisp_blu_C_ActionOptionIndex");
static_assert(sizeof(Wisp_blu_C_ActionOptionIndex) == 0x000098, "Wrong size on Wisp_blu_C_ActionOptionIndex");
static_assert(offsetof(Wisp_blu_C_ActionOptionIndex, Player) == 0x000000, "Member 'Wisp_blu_C_ActionOptionIndex::Player' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ActionOptionIndex, Hit) == 0x000008, "Member 'Wisp_blu_C_ActionOptionIndex::Hit' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ActionOptionIndex, Action) == 0x000090, "Member 'Wisp_blu_C_ActionOptionIndex::Action' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.receivedPhyiscsDamage
// 0x008C (0x008C - 0x0000)
struct Wisp_blu_C_ReceivedPhyiscsDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hot;                                               // 0x0004(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Wisp_blu_C_ReceivedPhyiscsDamage) == 0x000004, "Wrong alignment on Wisp_blu_C_ReceivedPhyiscsDamage");
static_assert(sizeof(Wisp_blu_C_ReceivedPhyiscsDamage) == 0x00008C, "Wrong size on Wisp_blu_C_ReceivedPhyiscsDamage");
static_assert(offsetof(Wisp_blu_C_ReceivedPhyiscsDamage, Damage) == 0x000000, "Member 'Wisp_blu_C_ReceivedPhyiscsDamage::Damage' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ReceivedPhyiscsDamage, Hot) == 0x000004, "Member 'Wisp_blu_C_ReceivedPhyiscsDamage::Hot' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.ignite
// 0x0004 (0x0004 - 0x0000)
struct Wisp_blu_C_Ignite final
{
public:
	float                                         Fuel;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_blu_C_Ignite) == 0x000004, "Wrong alignment on Wisp_blu_C_Ignite");
static_assert(sizeof(Wisp_blu_C_Ignite) == 0x000004, "Wrong size on Wisp_blu_C_Ignite");
static_assert(offsetof(Wisp_blu_C_Ignite, Fuel) == 0x000000, "Member 'Wisp_blu_C_Ignite::Fuel' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.fireDamage
// 0x0004 (0x0004 - 0x0000)
struct Wisp_blu_C_FireDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_blu_C_FireDamage) == 0x000004, "Wrong alignment on Wisp_blu_C_FireDamage");
static_assert(sizeof(Wisp_blu_C_FireDamage) == 0x000004, "Wrong size on Wisp_blu_C_FireDamage");
static_assert(offsetof(Wisp_blu_C_FireDamage, Damage) == 0x000000, "Member 'Wisp_blu_C_FireDamage::Damage' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.steppedOn
// 0x0090 (0x0090 - 0x0000)
struct Wisp_blu_C_SteppedOn final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Wisp_blu_C_SteppedOn) == 0x000008, "Wrong alignment on Wisp_blu_C_SteppedOn");
static_assert(sizeof(Wisp_blu_C_SteppedOn) == 0x000090, "Wrong size on Wisp_blu_C_SteppedOn");
static_assert(offsetof(Wisp_blu_C_SteppedOn, Player) == 0x000000, "Member 'Wisp_blu_C_SteppedOn::Player' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_SteppedOn, Hit) == 0x000008, "Member 'Wisp_blu_C_SteppedOn::Hit' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.OnSuccess_DFDA4EBB4B7ACE8B399BA387C4523C25
// 0x0001 (0x0001 - 0x0000)
struct Wisp_blu_C_OnSuccess_DFDA4EBB4B7ACE8B399BA387C4523C25 final
{
public:
	EPathFollowingResult                          MovementResult;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_blu_C_OnSuccess_DFDA4EBB4B7ACE8B399BA387C4523C25) == 0x000001, "Wrong alignment on Wisp_blu_C_OnSuccess_DFDA4EBB4B7ACE8B399BA387C4523C25");
static_assert(sizeof(Wisp_blu_C_OnSuccess_DFDA4EBB4B7ACE8B399BA387C4523C25) == 0x000001, "Wrong size on Wisp_blu_C_OnSuccess_DFDA4EBB4B7ACE8B399BA387C4523C25");
static_assert(offsetof(Wisp_blu_C_OnSuccess_DFDA4EBB4B7ACE8B399BA387C4523C25, MovementResult) == 0x000000, "Member 'Wisp_blu_C_OnSuccess_DFDA4EBB4B7ACE8B399BA387C4523C25::MovementResult' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.OnFail_DFDA4EBB4B7ACE8B399BA387C4523C25
// 0x0001 (0x0001 - 0x0000)
struct Wisp_blu_C_OnFail_DFDA4EBB4B7ACE8B399BA387C4523C25 final
{
public:
	EPathFollowingResult                          MovementResult;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_blu_C_OnFail_DFDA4EBB4B7ACE8B399BA387C4523C25) == 0x000001, "Wrong alignment on Wisp_blu_C_OnFail_DFDA4EBB4B7ACE8B399BA387C4523C25");
static_assert(sizeof(Wisp_blu_C_OnFail_DFDA4EBB4B7ACE8B399BA387C4523C25) == 0x000001, "Wrong size on Wisp_blu_C_OnFail_DFDA4EBB4B7ACE8B399BA387C4523C25");
static_assert(offsetof(Wisp_blu_C_OnFail_DFDA4EBB4B7ACE8B399BA387C4523C25, MovementResult) == 0x000000, "Member 'Wisp_blu_C_OnFail_DFDA4EBB4B7ACE8B399BA387C4523C25::MovementResult' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.UserConstructionScript
// 0x0094 (0x0094 - 0x0000)
struct Wisp_blu_C_UserConstructionScript final
{
public:
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x000C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Wisp_blu_C_UserConstructionScript) == 0x000004, "Wrong alignment on Wisp_blu_C_UserConstructionScript");
static_assert(sizeof(Wisp_blu_C_UserConstructionScript) == 0x000094, "Wrong size on Wisp_blu_C_UserConstructionScript");
static_assert(offsetof(Wisp_blu_C_UserConstructionScript, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000000, "Member 'Wisp_blu_C_UserConstructionScript::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_UserConstructionScript, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x00000C, "Member 'Wisp_blu_C_UserConstructionScript::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.getActionOptions
// 0x0050 (0x0050 - 0x0000)
struct Wisp_blu_C_GetActionOptions final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Component;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         Options;                                           // 0x0018(0x0010)(Parm, OutParm)
	TArray<Enum_interactionActions>               Options_enum;                                      // 0x0028(0x0010)(Parm, OutParm)
	TArray<class FText>                           OptionsNamesOverlay;                               // 0x0038(0x0010)(Parm, OutParm)
	uint8                                         Number;                                            // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_blu_C_GetActionOptions) == 0x000008, "Wrong alignment on Wisp_blu_C_GetActionOptions");
static_assert(sizeof(Wisp_blu_C_GetActionOptions) == 0x000050, "Wrong size on Wisp_blu_C_GetActionOptions");
static_assert(offsetof(Wisp_blu_C_GetActionOptions, Player) == 0x000000, "Member 'Wisp_blu_C_GetActionOptions::Player' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_GetActionOptions, Component) == 0x000008, "Member 'Wisp_blu_C_GetActionOptions::Component' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_GetActionOptions, Actor) == 0x000010, "Member 'Wisp_blu_C_GetActionOptions::Actor' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_GetActionOptions, Options) == 0x000018, "Member 'Wisp_blu_C_GetActionOptions::Options' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_GetActionOptions, Options_enum) == 0x000028, "Member 'Wisp_blu_C_GetActionOptions::Options_enum' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_GetActionOptions, OptionsNamesOverlay) == 0x000038, "Member 'Wisp_blu_C_GetActionOptions::OptionsNamesOverlay' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_GetActionOptions, Number) == 0x000048, "Member 'Wisp_blu_C_GetActionOptions::Number' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.setPath
// 0x0018 (0x0018 - 0x0000)
struct Wisp_blu_C_SetPath final
{
public:
	TArray<struct FVector>                        Path;                                              // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Return;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wisp_blu_C_SetPath) == 0x000008, "Wrong alignment on Wisp_blu_C_SetPath");
static_assert(sizeof(Wisp_blu_C_SetPath) == 0x000018, "Wrong size on Wisp_blu_C_SetPath");
static_assert(offsetof(Wisp_blu_C_SetPath, Path) == 0x000000, "Member 'Wisp_blu_C_SetPath::Path' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_SetPath, Return) == 0x000010, "Member 'Wisp_blu_C_SetPath::Return' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.getOnlyKey
// 0x0010 (0x0010 - 0x0000)
struct Wisp_blu_C_GetOnlyKey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_blu_C_GetOnlyKey) == 0x000008, "Wrong alignment on Wisp_blu_C_GetOnlyKey");
static_assert(sizeof(Wisp_blu_C_GetOnlyKey) == 0x000010, "Wrong size on Wisp_blu_C_GetOnlyKey");
static_assert(offsetof(Wisp_blu_C_GetOnlyKey, Key) == 0x000000, "Member 'Wisp_blu_C_GetOnlyKey::Key' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.processKeys
// 0x0001 (0x0001 - 0x0000)
struct Wisp_blu_C_ProcessKeys final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wisp_blu_C_ProcessKeys) == 0x000001, "Wrong alignment on Wisp_blu_C_ProcessKeys");
static_assert(sizeof(Wisp_blu_C_ProcessKeys) == 0x000001, "Wrong size on Wisp_blu_C_ProcessKeys");
static_assert(offsetof(Wisp_blu_C_ProcessKeys, Return) == 0x000000, "Member 'Wisp_blu_C_ProcessKeys::Return' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.canBeUsedHold
// 0x0001 (0x0001 - 0x0000)
struct Wisp_blu_C_CanBeUsedHold final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wisp_blu_C_CanBeUsedHold) == 0x000001, "Wrong alignment on Wisp_blu_C_CanBeUsedHold");
static_assert(sizeof(Wisp_blu_C_CanBeUsedHold) == 0x000001, "Wrong size on Wisp_blu_C_CanBeUsedHold");
static_assert(offsetof(Wisp_blu_C_CanBeUsedHold, Return) == 0x000000, "Member 'Wisp_blu_C_CanBeUsedHold::Return' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.GetKey
// 0x0010 (0x0010 - 0x0000)
struct Wisp_blu_C_GetKey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_blu_C_GetKey) == 0x000008, "Wrong alignment on Wisp_blu_C_GetKey");
static_assert(sizeof(Wisp_blu_C_GetKey) == 0x000010, "Wrong size on Wisp_blu_C_GetKey");
static_assert(offsetof(Wisp_blu_C_GetKey, Key) == 0x000000, "Member 'Wisp_blu_C_GetKey::Key' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.toolboxFix
// 0x0010 (0x0010 - 0x0000)
struct Wisp_blu_C_ToolboxFix final
{
public:
	class AProp_toolbox_C*                        Toolbox;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wisp_blu_C_ToolboxFix) == 0x000008, "Wrong alignment on Wisp_blu_C_ToolboxFix");
static_assert(sizeof(Wisp_blu_C_ToolboxFix) == 0x000010, "Wrong size on Wisp_blu_C_ToolboxFix");
static_assert(offsetof(Wisp_blu_C_ToolboxFix, Toolbox) == 0x000000, "Member 'Wisp_blu_C_ToolboxFix::Toolbox' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_ToolboxFix, Return) == 0x000008, "Member 'Wisp_blu_C_ToolboxFix::Return' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.gascanFuel
// 0x0010 (0x0010 - 0x0000)
struct Wisp_blu_C_GascanFuel final
{
public:
	class AProp_gascan_C*                         Gascan;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Fueled;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wisp_blu_C_GascanFuel) == 0x000008, "Wrong alignment on Wisp_blu_C_GascanFuel");
static_assert(sizeof(Wisp_blu_C_GascanFuel) == 0x000010, "Wrong size on Wisp_blu_C_GascanFuel");
static_assert(offsetof(Wisp_blu_C_GascanFuel, Gascan) == 0x000000, "Member 'Wisp_blu_C_GascanFuel::Gascan' has a wrong offset!");
static_assert(offsetof(Wisp_blu_C_GascanFuel, Fueled) == 0x000008, "Member 'Wisp_blu_C_GascanFuel::Fueled' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.skipRadial
// 0x0001 (0x0001 - 0x0000)
struct Wisp_blu_C_SkipRadial final
{
public:
	bool                                          Skip;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wisp_blu_C_SkipRadial) == 0x000001, "Wrong alignment on Wisp_blu_C_SkipRadial");
static_assert(sizeof(Wisp_blu_C_SkipRadial) == 0x000001, "Wrong size on Wisp_blu_C_SkipRadial");
static_assert(offsetof(Wisp_blu_C_SkipRadial, Skip) == 0x000000, "Member 'Wisp_blu_C_SkipRadial::Skip' has a wrong offset!");

// Function wisp_blu.wisp_blu_C.getPriceMultiplier
// 0x0004 (0x0004 - 0x0000)
struct Wisp_blu_C_GetPriceMultiplier final
{
public:
	float                                         PriceMult;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wisp_blu_C_GetPriceMultiplier) == 0x000004, "Wrong alignment on Wisp_blu_C_GetPriceMultiplier");
static_assert(sizeof(Wisp_blu_C_GetPriceMultiplier) == 0x000004, "Wrong size on Wisp_blu_C_GetPriceMultiplier");
static_assert(offsetof(Wisp_blu_C_GetPriceMultiplier, PriceMult) == 0x000000, "Member 'Wisp_blu_C_GetPriceMultiplier::PriceMult' has a wrong offset!");

}

