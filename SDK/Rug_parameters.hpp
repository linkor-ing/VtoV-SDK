#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Rug

#include "Basic.hpp"

#include "Struct_save_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Enum_interactionActions_structs.hpp"
#include "ProceduralMeshComponent_structs.hpp"
#include "Struct_mInt_structs.hpp"
#include "Struct_mString_structs.hpp"


namespace SDK::Params
{

// Function rug.rug_c.ExecuteUbergraph_rug
// 0x02C0 (0x02C0 - 0x0000)
struct Rug_c_ExecuteUbergraph_rug final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E5B[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player;                               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit;                                  // 0x0010(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         K2Node_Event_index;                                // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_interactionActions                       K2Node_Event_action;                               // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x009D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E5C[0x2];                                     // 0x009E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_3;                             // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_2;                                // 0x00A8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          K2Node_Event_kick;                                 // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E5D[0x3];                                     // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_name;                                 // 0x0134(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E5E[0x4];                                     // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_2;                             // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_1;                             // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_1;                                // 0x0150(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_2E5F[0x8];                                     // 0x01D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x01E0(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AProp_rug_C*                            CallFunc_FinishSpawningActor_ReturnValue;          // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IInt_player_C>         CallFunc_sendName_self_CastInput;                  // 0x0220(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode;          // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_VictoryIntPlusEquals_IntOut;              // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E60[0x4];                                     // 0x023C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTexture2D*>                     K2Node_LowEntry_LocalVariable_Value__Object;       // 0x0240(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x0254(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E61[0x7];                                     // 0x0259(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue_1;               // 0x0260(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1; // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AProp_rug_c_C*                          CallFunc_FinishSpawningActor_ReturnValue_1;        // 0x0298(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IInt_player_C>         CallFunc_sendName_self_CastInput_1;                // 0x02A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Rug_c_ExecuteUbergraph_rug) == 0x000010, "Wrong alignment on Rug_c_ExecuteUbergraph_rug");
static_assert(sizeof(Rug_c_ExecuteUbergraph_rug) == 0x0002C0, "Wrong size on Rug_c_ExecuteUbergraph_rug");
static_assert(offsetof(Rug_c_ExecuteUbergraph_rug, EntryPoint) == 0x000000, "Member 'Rug_c_ExecuteUbergraph_rug::EntryPoint' has a wrong offset!");
static_assert(offsetof(Rug_c_ExecuteUbergraph_rug, K2Node_Event_player) == 0x000008, "Member 'Rug_c_ExecuteUbergraph_rug::K2Node_Event_player' has a wrong offset!");
static_assert(offsetof(Rug_c_ExecuteUbergraph_rug, K2Node_Event_hit) == 0x000010, "Member 'Rug_c_ExecuteUbergraph_rug::K2Node_Event_hit' has a wrong offset!");
static_assert(offsetof(Rug_c_ExecuteUbergraph_rug, K2Node_Event_index) == 0x000098, "Member 'Rug_c_ExecuteUbergraph_rug::K2Node_Event_index' has a wrong offset!");
static_assert(offsetof(Rug_c_ExecuteUbergraph_rug, K2Node_Event_action) == 0x00009C, "Member 'Rug_c_ExecuteUbergraph_rug::K2Node_Event_action' has a wrong offset!");
static_assert(offsetof(Rug_c_ExecuteUbergraph_rug, K2Node_SwitchEnum_CmpSuccess) == 0x00009D, "Member 'Rug_c_ExecuteUbergraph_rug::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(Rug_c_ExecuteUbergraph_rug, K2Node_Event_player_3) == 0x0000A0, "Member 'Rug_c_ExecuteUbergraph_rug::K2Node_Event_player_3' has a wrong offset!");
static_assert(offsetof(Rug_c_ExecuteUbergraph_rug, K2Node_Event_hit_2) == 0x0000A8, "Member 'Rug_c_ExecuteUbergraph_rug::K2Node_Event_hit_2' has a wrong offset!");
static_assert(offsetof(Rug_c_ExecuteUbergraph_rug, K2Node_Event_kick) == 0x000130, "Member 'Rug_c_ExecuteUbergraph_rug::K2Node_Event_kick' has a wrong offset!");
static_assert(offsetof(Rug_c_ExecuteUbergraph_rug, K2Node_Event_name) == 0x000134, "Member 'Rug_c_ExecuteUbergraph_rug::K2Node_Event_name' has a wrong offset!");
static_assert(offsetof(Rug_c_ExecuteUbergraph_rug, K2Node_Event_player_2) == 0x000140, "Member 'Rug_c_ExecuteUbergraph_rug::K2Node_Event_player_2' has a wrong offset!");
static_assert(offsetof(Rug_c_ExecuteUbergraph_rug, K2Node_Event_player_1) == 0x000148, "Member 'Rug_c_ExecuteUbergraph_rug::K2Node_Event_player_1' has a wrong offset!");
static_assert(offsetof(Rug_c_ExecuteUbergraph_rug, K2Node_Event_hit_1) == 0x000150, "Member 'Rug_c_ExecuteUbergraph_rug::K2Node_Event_hit_1' has a wrong offset!");
static_assert(offsetof(Rug_c_ExecuteUbergraph_rug, CallFunc_GetTransform_ReturnValue) == 0x0001E0, "Member 'Rug_c_ExecuteUbergraph_rug::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rug_c_ExecuteUbergraph_rug, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000210, "Member 'Rug_c_ExecuteUbergraph_rug::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rug_c_ExecuteUbergraph_rug, CallFunc_FinishSpawningActor_ReturnValue) == 0x000218, "Member 'Rug_c_ExecuteUbergraph_rug::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rug_c_ExecuteUbergraph_rug, CallFunc_sendName_self_CastInput) == 0x000220, "Member 'Rug_c_ExecuteUbergraph_rug::CallFunc_sendName_self_CastInput' has a wrong offset!");
static_assert(offsetof(Rug_c_ExecuteUbergraph_rug, CallFunc_getMainGamemode_AsMain_Gamemode) == 0x000230, "Member 'Rug_c_ExecuteUbergraph_rug::CallFunc_getMainGamemode_AsMain_Gamemode' has a wrong offset!");
static_assert(offsetof(Rug_c_ExecuteUbergraph_rug, CallFunc_VictoryIntPlusEquals_IntOut) == 0x000238, "Member 'Rug_c_ExecuteUbergraph_rug::CallFunc_VictoryIntPlusEquals_IntOut' has a wrong offset!");
static_assert(offsetof(Rug_c_ExecuteUbergraph_rug, K2Node_LowEntry_LocalVariable_Value__Object) == 0x000240, "Member 'Rug_c_ExecuteUbergraph_rug::K2Node_LowEntry_LocalVariable_Value__Object' has a wrong offset!");
static_assert(offsetof(Rug_c_ExecuteUbergraph_rug, CallFunc_Array_Length_ReturnValue) == 0x000250, "Member 'Rug_c_ExecuteUbergraph_rug::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rug_c_ExecuteUbergraph_rug, CallFunc_Percent_IntInt_ReturnValue) == 0x000254, "Member 'Rug_c_ExecuteUbergraph_rug::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rug_c_ExecuteUbergraph_rug, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000258, "Member 'Rug_c_ExecuteUbergraph_rug::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rug_c_ExecuteUbergraph_rug, CallFunc_GetTransform_ReturnValue_1) == 0x000260, "Member 'Rug_c_ExecuteUbergraph_rug::CallFunc_GetTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Rug_c_ExecuteUbergraph_rug, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1) == 0x000290, "Member 'Rug_c_ExecuteUbergraph_rug::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Rug_c_ExecuteUbergraph_rug, CallFunc_FinishSpawningActor_ReturnValue_1) == 0x000298, "Member 'Rug_c_ExecuteUbergraph_rug::CallFunc_FinishSpawningActor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Rug_c_ExecuteUbergraph_rug, CallFunc_sendName_self_CastInput_1) == 0x0002A0, "Member 'Rug_c_ExecuteUbergraph_rug::CallFunc_sendName_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(Rug_c_ExecuteUbergraph_rug, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x0002B0, "Member 'Rug_c_ExecuteUbergraph_rug::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");

// Function rug.rug_c.damageByPlayer
// 0x0090 (0x0090 - 0x0000)
struct Rug_c_DamageByPlayer final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Rug_c_DamageByPlayer) == 0x000008, "Wrong alignment on Rug_c_DamageByPlayer");
static_assert(sizeof(Rug_c_DamageByPlayer) == 0x000090, "Wrong size on Rug_c_DamageByPlayer");
static_assert(offsetof(Rug_c_DamageByPlayer, Player) == 0x000000, "Member 'Rug_c_DamageByPlayer::Player' has a wrong offset!");
static_assert(offsetof(Rug_c_DamageByPlayer, Hit) == 0x000008, "Member 'Rug_c_DamageByPlayer::Hit' has a wrong offset!");

// Function rug.rug_c.thrown
// 0x0008 (0x0008 - 0x0000)
struct Rug_c_Thrown final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rug_c_Thrown) == 0x000008, "Wrong alignment on Rug_c_Thrown");
static_assert(sizeof(Rug_c_Thrown) == 0x000008, "Wrong size on Rug_c_Thrown");
static_assert(offsetof(Rug_c_Thrown, Player) == 0x000000, "Member 'Rug_c_Thrown::Player' has a wrong offset!");

// Function rug.rug_c.sendName
// 0x0008 (0x0008 - 0x0000)
struct Rug_c_SendName final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rug_c_SendName) == 0x000004, "Wrong alignment on Rug_c_SendName");
static_assert(sizeof(Rug_c_SendName) == 0x000008, "Wrong size on Rug_c_SendName");
static_assert(offsetof(Rug_c_SendName, Param_Name) == 0x000000, "Member 'Rug_c_SendName::Param_Name' has a wrong offset!");

// Function rug.rug_c.kicked
// 0x0001 (0x0001 - 0x0000)
struct Rug_c_Kicked final
{
public:
	bool                                          Kick;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Rug_c_Kicked) == 0x000001, "Wrong alignment on Rug_c_Kicked");
static_assert(sizeof(Rug_c_Kicked) == 0x000001, "Wrong size on Rug_c_Kicked");
static_assert(offsetof(Rug_c_Kicked, Kick) == 0x000000, "Member 'Rug_c_Kicked::Kick' has a wrong offset!");

// Function rug.rug_c.player_use
// 0x0090 (0x0090 - 0x0000)
struct Rug_c_Player_use final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Rug_c_Player_use) == 0x000008, "Wrong alignment on Rug_c_Player_use");
static_assert(sizeof(Rug_c_Player_use) == 0x000090, "Wrong size on Rug_c_Player_use");
static_assert(offsetof(Rug_c_Player_use, Player) == 0x000000, "Member 'Rug_c_Player_use::Player' has a wrong offset!");
static_assert(offsetof(Rug_c_Player_use, Hit) == 0x000008, "Member 'Rug_c_Player_use::Hit' has a wrong offset!");

// Function rug.rug_c.gen
// 0x00B8 (0x00B8 - 0x0000)
struct Rug_c_Gen final
{
public:
	struct FVector                                Vec_comp;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E62[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        Ress;                                              // 0x0010(0x0010)(Edit, BlueprintVisible)
	TArray<struct FVector2D>                      Temp_struct_Variable;                              // 0x0020(0x0010)(ConstParm, ReferenceParm)
	TArray<struct FVector2D>                      Temp_struct_Variable_1;                            // 0x0030(0x0010)(ConstParm, ReferenceParm)
	TArray<struct FVector2D>                      Temp_struct_Variable_2;                            // 0x0040(0x0010)(ConstParm, ReferenceParm)
	TArray<struct FLinearColor>                   Temp_struct_Variable_3;                            // 0x0050(0x0010)(ConstParm, ReferenceParm)
	TArray<struct FVector>                        CallFunc_rugGen_verts;                             // 0x0060(0x0010)(ReferenceParm)
	TArray<int32>                                 CallFunc_rugGen_tris;                              // 0x0070(0x0010)(ReferenceParm)
	TArray<struct FVector>                        CallFunc_rugGen_normals;                           // 0x0080(0x0010)(ReferenceParm)
	TArray<struct FVector2D>                      CallFunc_rugGen_uvs;                               // 0x0090(0x0010)(ReferenceParm)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FProcMeshTangent>               Temp_struct_Variable_4;                            // 0x00A8(0x0010)(ConstParm, ReferenceParm)
};
static_assert(alignof(Rug_c_Gen) == 0x000008, "Wrong alignment on Rug_c_Gen");
static_assert(sizeof(Rug_c_Gen) == 0x0000B8, "Wrong size on Rug_c_Gen");
static_assert(offsetof(Rug_c_Gen, Vec_comp) == 0x000000, "Member 'Rug_c_Gen::Vec_comp' has a wrong offset!");
static_assert(offsetof(Rug_c_Gen, Ress) == 0x000010, "Member 'Rug_c_Gen::Ress' has a wrong offset!");
static_assert(offsetof(Rug_c_Gen, Temp_struct_Variable) == 0x000020, "Member 'Rug_c_Gen::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(Rug_c_Gen, Temp_struct_Variable_1) == 0x000030, "Member 'Rug_c_Gen::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(Rug_c_Gen, Temp_struct_Variable_2) == 0x000040, "Member 'Rug_c_Gen::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(Rug_c_Gen, Temp_struct_Variable_3) == 0x000050, "Member 'Rug_c_Gen::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(Rug_c_Gen, CallFunc_rugGen_verts) == 0x000060, "Member 'Rug_c_Gen::CallFunc_rugGen_verts' has a wrong offset!");
static_assert(offsetof(Rug_c_Gen, CallFunc_rugGen_tris) == 0x000070, "Member 'Rug_c_Gen::CallFunc_rugGen_tris' has a wrong offset!");
static_assert(offsetof(Rug_c_Gen, CallFunc_rugGen_normals) == 0x000080, "Member 'Rug_c_Gen::CallFunc_rugGen_normals' has a wrong offset!");
static_assert(offsetof(Rug_c_Gen, CallFunc_rugGen_uvs) == 0x000090, "Member 'Rug_c_Gen::CallFunc_rugGen_uvs' has a wrong offset!");
static_assert(offsetof(Rug_c_Gen, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x0000A0, "Member 'Rug_c_Gen::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rug_c_Gen, Temp_struct_Variable_4) == 0x0000A8, "Member 'Rug_c_Gen::Temp_struct_Variable_4' has a wrong offset!");

// Function rug.rug_c.check
// 0x0030 (0x0030 - 0x0000)
struct Rug_c_Check final
{
public:
	struct FVector                                InputPin;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Curr;                                              // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OutputPin;                                         // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Is;                                                // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Vector_Distance_ReturnValue;              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Rug_c_Check) == 0x000004, "Wrong alignment on Rug_c_Check");
static_assert(sizeof(Rug_c_Check) == 0x000030, "Wrong size on Rug_c_Check");
static_assert(offsetof(Rug_c_Check, InputPin) == 0x000000, "Member 'Rug_c_Check::InputPin' has a wrong offset!");
static_assert(offsetof(Rug_c_Check, Curr) == 0x00000C, "Member 'Rug_c_Check::Curr' has a wrong offset!");
static_assert(offsetof(Rug_c_Check, OutputPin) == 0x000018, "Member 'Rug_c_Check::OutputPin' has a wrong offset!");
static_assert(offsetof(Rug_c_Check, Is) == 0x000024, "Member 'Rug_c_Check::Is' has a wrong offset!");
static_assert(offsetof(Rug_c_Check, CallFunc_Vector_Distance_ReturnValue) == 0x000028, "Member 'Rug_c_Check::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rug_c_Check, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00002C, "Member 'Rug_c_Check::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function rug.rug_c.smooh
// 0x00F8 (0x00F8 - 0x0000)
struct Rug_c_Smooh final
{
public:
	TArray<struct FVector>                        A1;                                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<struct FVector>                        b1;                                                // 0x0010(0x0010)(Parm, OutParm)
	int32                                         Ind;                                               // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E63[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        B;                                                 // 0x0028(0x0010)(Edit, BlueprintVisible)
	TArray<struct FVector>                        A;                                                 // 0x0038(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item;                           // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_isValid_Output;                           // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_isValid_Output_1;                         // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_isValid_Output_2;                         // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E64[0x3];                                     // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_isValid_Output_3;                         // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_3;           // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorInt_ReturnValue;             // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rug_c_Smooh) == 0x000008, "Wrong alignment on Rug_c_Smooh");
static_assert(sizeof(Rug_c_Smooh) == 0x0000F8, "Wrong size on Rug_c_Smooh");
static_assert(offsetof(Rug_c_Smooh, A1) == 0x000000, "Member 'Rug_c_Smooh::A1' has a wrong offset!");
static_assert(offsetof(Rug_c_Smooh, b1) == 0x000010, "Member 'Rug_c_Smooh::b1' has a wrong offset!");
static_assert(offsetof(Rug_c_Smooh, Ind) == 0x000020, "Member 'Rug_c_Smooh::Ind' has a wrong offset!");
static_assert(offsetof(Rug_c_Smooh, B) == 0x000028, "Member 'Rug_c_Smooh::B' has a wrong offset!");
static_assert(offsetof(Rug_c_Smooh, A) == 0x000038, "Member 'Rug_c_Smooh::A' has a wrong offset!");
static_assert(offsetof(Rug_c_Smooh, Temp_int_Array_Index_Variable) == 0x000048, "Member 'Rug_c_Smooh::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Rug_c_Smooh, CallFunc_Subtract_IntInt_ReturnValue) == 0x00004C, "Member 'Rug_c_Smooh::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rug_c_Smooh, CallFunc_Add_IntInt_ReturnValue) == 0x000050, "Member 'Rug_c_Smooh::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rug_c_Smooh, Temp_int_Loop_Counter_Variable) == 0x000054, "Member 'Rug_c_Smooh::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Rug_c_Smooh, CallFunc_Add_IntInt_ReturnValue_1) == 0x000058, "Member 'Rug_c_Smooh::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Rug_c_Smooh, CallFunc_Array_Get_Item) == 0x00005C, "Member 'Rug_c_Smooh::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Rug_c_Smooh, CallFunc_Add_IntInt_ReturnValue_2) == 0x000068, "Member 'Rug_c_Smooh::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Rug_c_Smooh, CallFunc_isValid_Output) == 0x00006C, "Member 'Rug_c_Smooh::CallFunc_isValid_Output' has a wrong offset!");
static_assert(offsetof(Rug_c_Smooh, CallFunc_Add_IntInt_ReturnValue_3) == 0x000078, "Member 'Rug_c_Smooh::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Rug_c_Smooh, CallFunc_isValid_Output_1) == 0x00007C, "Member 'Rug_c_Smooh::CallFunc_isValid_Output_1' has a wrong offset!");
static_assert(offsetof(Rug_c_Smooh, CallFunc_isValid_Output_2) == 0x000088, "Member 'Rug_c_Smooh::CallFunc_isValid_Output_2' has a wrong offset!");
static_assert(offsetof(Rug_c_Smooh, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000094, "Member 'Rug_c_Smooh::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Rug_c_Smooh, CallFunc_Array_Length_ReturnValue) == 0x000098, "Member 'Rug_c_Smooh::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rug_c_Smooh, CallFunc_Add_IntInt_ReturnValue_4) == 0x00009C, "Member 'Rug_c_Smooh::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(Rug_c_Smooh, CallFunc_Less_IntInt_ReturnValue) == 0x0000A0, "Member 'Rug_c_Smooh::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rug_c_Smooh, CallFunc_isValid_Output_3) == 0x0000A4, "Member 'Rug_c_Smooh::CallFunc_isValid_Output_3' has a wrong offset!");
static_assert(offsetof(Rug_c_Smooh, CallFunc_Add_VectorVector_ReturnValue) == 0x0000B0, "Member 'Rug_c_Smooh::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rug_c_Smooh, CallFunc_Array_LastIndex_ReturnValue) == 0x0000BC, "Member 'Rug_c_Smooh::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rug_c_Smooh, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0000C0, "Member 'Rug_c_Smooh::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Rug_c_Smooh, CallFunc_Add_VectorVector_ReturnValue_2) == 0x0000CC, "Member 'Rug_c_Smooh::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Rug_c_Smooh, CallFunc_Add_VectorVector_ReturnValue_3) == 0x0000D8, "Member 'Rug_c_Smooh::CallFunc_Add_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Rug_c_Smooh, CallFunc_Divide_VectorInt_ReturnValue) == 0x0000E4, "Member 'Rug_c_Smooh::CallFunc_Divide_VectorInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rug_c_Smooh, CallFunc_Array_Add_ReturnValue) == 0x0000F0, "Member 'Rug_c_Smooh::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function rug.rug_c.checkWall
// 0x0208 (0x0208 - 0x0000)
struct Rug_c_CheckWall final
{
public:
	struct FVector                                A;                                                 // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Condition;                                         // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E65[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    Target;                                            // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                B;                                                 // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0024(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E66[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      CallFunc_obj_static_obj;                           // 0x0038(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E67[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0058(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SetVectorLength_ReturnValue;              // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x00AC(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0135(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0136(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E68[0x1];                                     // 0x0137(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0140(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x014C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0158(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0164(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0180(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x019C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x01B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Vector_Distance_ReturnValue;              // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_3;           // 0x01C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue;  // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_1; // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x01E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VLerp_ReturnValue_1;                      // 0x01F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_4;           // 0x01FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rug_c_CheckWall) == 0x000008, "Wrong alignment on Rug_c_CheckWall");
static_assert(sizeof(Rug_c_CheckWall) == 0x000208, "Wrong size on Rug_c_CheckWall");
static_assert(offsetof(Rug_c_CheckWall, A) == 0x000000, "Member 'Rug_c_CheckWall::A' has a wrong offset!");
static_assert(offsetof(Rug_c_CheckWall, Condition) == 0x00000C, "Member 'Rug_c_CheckWall::Condition' has a wrong offset!");
static_assert(offsetof(Rug_c_CheckWall, Target) == 0x000010, "Member 'Rug_c_CheckWall::Target' has a wrong offset!");
static_assert(offsetof(Rug_c_CheckWall, B) == 0x000018, "Member 'Rug_c_CheckWall::B' has a wrong offset!");
static_assert(offsetof(Rug_c_CheckWall, Location) == 0x000024, "Member 'Rug_c_CheckWall::Location' has a wrong offset!");
static_assert(offsetof(Rug_c_CheckWall, ReturnValue) == 0x000030, "Member 'Rug_c_CheckWall::ReturnValue' has a wrong offset!");
static_assert(offsetof(Rug_c_CheckWall, CallFunc_obj_static_obj) == 0x000038, "Member 'Rug_c_CheckWall::CallFunc_obj_static_obj' has a wrong offset!");
static_assert(offsetof(Rug_c_CheckWall, CallFunc_Add_VectorVector_ReturnValue) == 0x000048, "Member 'Rug_c_CheckWall::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rug_c_CheckWall, Temp_object_Variable) == 0x000058, "Member 'Rug_c_CheckWall::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(Rug_c_CheckWall, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000068, "Member 'Rug_c_CheckWall::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rug_c_CheckWall, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000074, "Member 'Rug_c_CheckWall::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Rug_c_CheckWall, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000080, "Member 'Rug_c_CheckWall::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rug_c_CheckWall, CallFunc_VSize_ReturnValue) == 0x00008C, "Member 'Rug_c_CheckWall::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rug_c_CheckWall, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000090, "Member 'Rug_c_CheckWall::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rug_c_CheckWall, CallFunc_SetVectorLength_ReturnValue) == 0x000094, "Member 'Rug_c_CheckWall::CallFunc_SetVectorLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rug_c_CheckWall, CallFunc_Add_VectorVector_ReturnValue_2) == 0x0000A0, "Member 'Rug_c_CheckWall::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Rug_c_CheckWall, CallFunc_LineTraceSingleForObjects_OutHit) == 0x0000AC, "Member 'Rug_c_CheckWall::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(Rug_c_CheckWall, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x000134, "Member 'Rug_c_CheckWall::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rug_c_CheckWall, CallFunc_BreakHitResult_bBlockingHit) == 0x000135, "Member 'Rug_c_CheckWall::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(Rug_c_CheckWall, CallFunc_BreakHitResult_bInitialOverlap) == 0x000136, "Member 'Rug_c_CheckWall::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(Rug_c_CheckWall, CallFunc_BreakHitResult_Time) == 0x000138, "Member 'Rug_c_CheckWall::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(Rug_c_CheckWall, CallFunc_BreakHitResult_Distance) == 0x00013C, "Member 'Rug_c_CheckWall::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(Rug_c_CheckWall, CallFunc_BreakHitResult_Location) == 0x000140, "Member 'Rug_c_CheckWall::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(Rug_c_CheckWall, CallFunc_BreakHitResult_ImpactPoint) == 0x00014C, "Member 'Rug_c_CheckWall::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(Rug_c_CheckWall, CallFunc_BreakHitResult_Normal) == 0x000158, "Member 'Rug_c_CheckWall::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(Rug_c_CheckWall, CallFunc_BreakHitResult_ImpactNormal) == 0x000164, "Member 'Rug_c_CheckWall::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(Rug_c_CheckWall, CallFunc_BreakHitResult_PhysMat) == 0x000170, "Member 'Rug_c_CheckWall::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(Rug_c_CheckWall, CallFunc_BreakHitResult_HitActor) == 0x000178, "Member 'Rug_c_CheckWall::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(Rug_c_CheckWall, CallFunc_BreakHitResult_HitComponent) == 0x000180, "Member 'Rug_c_CheckWall::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(Rug_c_CheckWall, CallFunc_BreakHitResult_HitBoneName) == 0x000188, "Member 'Rug_c_CheckWall::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(Rug_c_CheckWall, CallFunc_BreakHitResult_HitItem) == 0x000190, "Member 'Rug_c_CheckWall::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(Rug_c_CheckWall, CallFunc_BreakHitResult_ElementIndex) == 0x000194, "Member 'Rug_c_CheckWall::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(Rug_c_CheckWall, CallFunc_BreakHitResult_FaceIndex) == 0x000198, "Member 'Rug_c_CheckWall::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(Rug_c_CheckWall, CallFunc_BreakHitResult_TraceStart) == 0x00019C, "Member 'Rug_c_CheckWall::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(Rug_c_CheckWall, CallFunc_BreakHitResult_TraceEnd) == 0x0001A8, "Member 'Rug_c_CheckWall::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(Rug_c_CheckWall, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0001B4, "Member 'Rug_c_CheckWall::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rug_c_CheckWall, CallFunc_Vector_Distance_ReturnValue) == 0x0001C0, "Member 'Rug_c_CheckWall::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rug_c_CheckWall, CallFunc_Add_VectorVector_ReturnValue_3) == 0x0001C4, "Member 'Rug_c_CheckWall::CallFunc_Add_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Rug_c_CheckWall, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0001D0, "Member 'Rug_c_CheckWall::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rug_c_CheckWall, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue) == 0x0001D4, "Member 'Rug_c_CheckWall::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rug_c_CheckWall, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_1) == 0x0001D8, "Member 'Rug_c_CheckWall::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Rug_c_CheckWall, CallFunc_FClamp_ReturnValue) == 0x0001DC, "Member 'Rug_c_CheckWall::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rug_c_CheckWall, CallFunc_FClamp_ReturnValue_1) == 0x0001E0, "Member 'Rug_c_CheckWall::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Rug_c_CheckWall, CallFunc_VLerp_ReturnValue) == 0x0001E4, "Member 'Rug_c_CheckWall::CallFunc_VLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rug_c_CheckWall, CallFunc_VLerp_ReturnValue_1) == 0x0001F0, "Member 'Rug_c_CheckWall::CallFunc_VLerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Rug_c_CheckWall, CallFunc_Add_VectorVector_ReturnValue_4) == 0x0001FC, "Member 'Rug_c_CheckWall::CallFunc_Add_VectorVector_ReturnValue_4' has a wrong offset!");

// Function rug.rug_c.IsValid
// 0x0038 (0x0038 - 0x0000)
struct Rug_c_IsValid final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Max;                                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Def;                                               // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Output;                                            // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item;                           // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E69[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Vector_Distance_ReturnValue;              // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Rug_c_IsValid) == 0x000004, "Wrong alignment on Rug_c_IsValid");
static_assert(sizeof(Rug_c_IsValid) == 0x000038, "Wrong size on Rug_c_IsValid");
static_assert(offsetof(Rug_c_IsValid, ID) == 0x000000, "Member 'Rug_c_IsValid::ID' has a wrong offset!");
static_assert(offsetof(Rug_c_IsValid, Max) == 0x000004, "Member 'Rug_c_IsValid::Max' has a wrong offset!");
static_assert(offsetof(Rug_c_IsValid, Def) == 0x000008, "Member 'Rug_c_IsValid::Def' has a wrong offset!");
static_assert(offsetof(Rug_c_IsValid, Output) == 0x000014, "Member 'Rug_c_IsValid::Output' has a wrong offset!");
static_assert(offsetof(Rug_c_IsValid, CallFunc_Array_Get_Item) == 0x000020, "Member 'Rug_c_IsValid::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Rug_c_IsValid, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00002C, "Member 'Rug_c_IsValid::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rug_c_IsValid, CallFunc_Vector_Distance_ReturnValue) == 0x000030, "Member 'Rug_c_IsValid::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rug_c_IsValid, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000034, "Member 'Rug_c_IsValid::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rug_c_IsValid, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000035, "Member 'Rug_c_IsValid::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rug_c_IsValid, CallFunc_BooleanAND_ReturnValue) == 0x000036, "Member 'Rug_c_IsValid::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function rug.rug_c.setSkin
// 0x0020 (0x0020 - 0x0000)
struct Rug_c_SetSkin final
{
public:
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E6A[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     CallFunc_getCarpet_ReturnValue;                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rug_c_SetSkin) == 0x000008, "Wrong alignment on Rug_c_SetSkin");
static_assert(sizeof(Rug_c_SetSkin) == 0x000020, "Wrong size on Rug_c_SetSkin");
static_assert(offsetof(Rug_c_SetSkin, CallFunc_Less_IntInt_ReturnValue) == 0x000000, "Member 'Rug_c_SetSkin::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rug_c_SetSkin, CallFunc_getCarpet_ReturnValue) == 0x000008, "Member 'Rug_c_SetSkin::CallFunc_getCarpet_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rug_c_SetSkin, CallFunc_getMainGamemode_AsMain_Gamemode) == 0x000010, "Member 'Rug_c_SetSkin::CallFunc_getMainGamemode_AsMain_Gamemode' has a wrong offset!");
static_assert(offsetof(Rug_c_SetSkin, CallFunc_Array_Get_Item) == 0x000018, "Member 'Rug_c_SetSkin::CallFunc_Array_Get_Item' has a wrong offset!");

// Function rug.rug_c.asProp
// 0x0008 (0x0008 - 0x0000)
struct Rug_c_AsProp final
{
public:
	class AProp_C*                                Return;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rug_c_AsProp) == 0x000008, "Wrong alignment on Rug_c_AsProp");
static_assert(sizeof(Rug_c_AsProp) == 0x000008, "Wrong size on Rug_c_AsProp");
static_assert(offsetof(Rug_c_AsProp, Return) == 0x000000, "Member 'Rug_c_AsProp::Return' has a wrong offset!");

// Function rug.rug_c.canPickup
// 0x0001 (0x0001 - 0x0000)
struct Rug_c_CanPickup final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Rug_c_CanPickup) == 0x000001, "Wrong alignment on Rug_c_CanPickup");
static_assert(sizeof(Rug_c_CanPickup) == 0x000001, "Wrong size on Rug_c_CanPickup");
static_assert(offsetof(Rug_c_CanPickup, Return) == 0x000000, "Member 'Rug_c_CanPickup::Return' has a wrong offset!");

// Function rug.rug_c.noRespawn
// 0x0002 (0x0002 - 0x0000)
struct Rug_c_NoRespawn final
{
public:
	bool                                          Param_NoRespawn;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Rug_c_NoRespawn) == 0x000001, "Wrong alignment on Rug_c_NoRespawn");
static_assert(sizeof(Rug_c_NoRespawn) == 0x000002, "Wrong size on Rug_c_NoRespawn");
static_assert(offsetof(Rug_c_NoRespawn, Param_NoRespawn) == 0x000000, "Member 'Rug_c_NoRespawn::Param_NoRespawn' has a wrong offset!");
static_assert(offsetof(Rug_c_NoRespawn, Return) == 0x000001, "Member 'Rug_c_NoRespawn::Return' has a wrong offset!");

// Function rug.rug_c.lookAt
// 0x00D8 (0x00D8 - 0x0000)
struct Rug_c_LookAt final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          Return;                                            // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E6B[0x7];                                     // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Text;                                              // 0x0098(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    boundObjectReplace;                                // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_MakeLiteralText_ReturnValue;              // 0x00B0(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Rug_c_LookAt) == 0x000008, "Wrong alignment on Rug_c_LookAt");
static_assert(sizeof(Rug_c_LookAt) == 0x0000D8, "Wrong size on Rug_c_LookAt");
static_assert(offsetof(Rug_c_LookAt, Player) == 0x000000, "Member 'Rug_c_LookAt::Player' has a wrong offset!");
static_assert(offsetof(Rug_c_LookAt, Hit) == 0x000008, "Member 'Rug_c_LookAt::Hit' has a wrong offset!");
static_assert(offsetof(Rug_c_LookAt, Return) == 0x000090, "Member 'Rug_c_LookAt::Return' has a wrong offset!");
static_assert(offsetof(Rug_c_LookAt, Text) == 0x000098, "Member 'Rug_c_LookAt::Text' has a wrong offset!");
static_assert(offsetof(Rug_c_LookAt, boundObjectReplace) == 0x0000A8, "Member 'Rug_c_LookAt::boundObjectReplace' has a wrong offset!");
static_assert(offsetof(Rug_c_LookAt, CallFunc_MakeLiteralText_ReturnValue) == 0x0000B0, "Member 'Rug_c_LookAt::CallFunc_MakeLiteralText_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rug_c_LookAt, CallFunc_Conv_TextToString_ReturnValue) == 0x0000C8, "Member 'Rug_c_LookAt::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");

// Function rug.rug_c.isButtonUsed
// 0x0001 (0x0001 - 0x0000)
struct Rug_c_IsButtonUsed final
{
public:
	bool                                          Failed;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Rug_c_IsButtonUsed) == 0x000001, "Wrong alignment on Rug_c_IsButtonUsed");
static_assert(sizeof(Rug_c_IsButtonUsed) == 0x000001, "Wrong size on Rug_c_IsButtonUsed");
static_assert(offsetof(Rug_c_IsButtonUsed, Failed) == 0x000000, "Member 'Rug_c_IsButtonUsed::Failed' has a wrong offset!");

// Function rug.rug_c.canBePutInContainer
// 0x0001 (0x0001 - 0x0000)
struct Rug_c_CanBePutInContainer final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Rug_c_CanBePutInContainer) == 0x000001, "Wrong alignment on Rug_c_CanBePutInContainer");
static_assert(sizeof(Rug_c_CanBePutInContainer) == 0x000001, "Wrong size on Rug_c_CanBePutInContainer");
static_assert(offsetof(Rug_c_CanBePutInContainer, Return) == 0x000000, "Member 'Rug_c_CanBePutInContainer::Return' has a wrong offset!");

// Function rug.rug_c.actionOptionIndex
// 0x0098 (0x0098 - 0x0000)
struct Rug_c_ActionOptionIndex final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         Param_Index;                                       // 0x0090(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_interactionActions                       Action;                                            // 0x0094(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rug_c_ActionOptionIndex) == 0x000008, "Wrong alignment on Rug_c_ActionOptionIndex");
static_assert(sizeof(Rug_c_ActionOptionIndex) == 0x000098, "Wrong size on Rug_c_ActionOptionIndex");
static_assert(offsetof(Rug_c_ActionOptionIndex, Player) == 0x000000, "Member 'Rug_c_ActionOptionIndex::Player' has a wrong offset!");
static_assert(offsetof(Rug_c_ActionOptionIndex, Hit) == 0x000008, "Member 'Rug_c_ActionOptionIndex::Hit' has a wrong offset!");
static_assert(offsetof(Rug_c_ActionOptionIndex, Param_Index) == 0x000090, "Member 'Rug_c_ActionOptionIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(Rug_c_ActionOptionIndex, Action) == 0x000094, "Member 'Rug_c_ActionOptionIndex::Action' has a wrong offset!");

// Function rug.rug_c.loadData
// 0x0110 (0x0110 - 0x0000)
struct Rug_c_LoadData final
{
public:
	struct FStruct_save                           Data;                                              // 0x0000(0x00C0)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x00C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_loadData_return;                          // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E6C[0x6];                                     // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_mString                        CallFunc_Array_Get_Item;                           // 0x00C8(0x0010)(HasGetValueTypeHash)
	struct FStruct_mInt                           CallFunc_Array_Get_Item_1;                         // 0x00D8(0x0010)(HasGetValueTypeHash)
	class FString                                 CallFunc_Array_Get_Item_2;                         // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_3;                         // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_4;                         // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rug_c_LoadData) == 0x000010, "Wrong alignment on Rug_c_LoadData");
static_assert(sizeof(Rug_c_LoadData) == 0x000110, "Wrong size on Rug_c_LoadData");
static_assert(offsetof(Rug_c_LoadData, Data) == 0x000000, "Member 'Rug_c_LoadData::Data' has a wrong offset!");
static_assert(offsetof(Rug_c_LoadData, Return) == 0x0000C0, "Member 'Rug_c_LoadData::Return' has a wrong offset!");
static_assert(offsetof(Rug_c_LoadData, CallFunc_loadData_return) == 0x0000C1, "Member 'Rug_c_LoadData::CallFunc_loadData_return' has a wrong offset!");
static_assert(offsetof(Rug_c_LoadData, CallFunc_Array_Get_Item) == 0x0000C8, "Member 'Rug_c_LoadData::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Rug_c_LoadData, CallFunc_Array_Get_Item_1) == 0x0000D8, "Member 'Rug_c_LoadData::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(Rug_c_LoadData, CallFunc_Array_Get_Item_2) == 0x0000E8, "Member 'Rug_c_LoadData::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(Rug_c_LoadData, CallFunc_Conv_StringToName_ReturnValue) == 0x0000F8, "Member 'Rug_c_LoadData::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rug_c_LoadData, CallFunc_Array_Get_Item_3) == 0x000100, "Member 'Rug_c_LoadData::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(Rug_c_LoadData, CallFunc_Array_Get_Item_4) == 0x000104, "Member 'Rug_c_LoadData::CallFunc_Array_Get_Item_4' has a wrong offset!");

// Function rug.rug_c.getData
// 0x02C0 (0x02C0 - 0x0000)
struct Rug_c_GetData final
{
public:
	struct FStruct_save                           Data;                                              // 0x0000(0x00C0)(Parm, OutParm, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x00D0(0x0010)(ReferenceParm)
	TArray<class FString>                         K2Node_MakeArray_Array_1;                          // 0x00E0(0x0010)(ReferenceParm)
	struct FStruct_mInt                           K2Node_MakeStruct_struct_mInt;                     // 0x00F0(0x0010)(HasGetValueTypeHash)
	struct FStruct_mString                        K2Node_MakeStruct_struct_mString;                  // 0x0100(0x0010)(HasGetValueTypeHash)
	TArray<struct FStruct_mInt>                   K2Node_MakeArray_Array_2;                          // 0x0110(0x0010)(ReferenceParm)
	struct FStruct_save                           CallFunc_getData_data;                             // 0x0120(0x00C0)(HasGetValueTypeHash)
	struct FStruct_mString                        CallFunc_Array_Get_Item;                           // 0x01E0(0x0010)(HasGetValueTypeHash)
	TArray<struct FStruct_mString>                K2Node_MakeArray_Array_3;                          // 0x01F0(0x0010)(ReferenceParm)
	struct FStruct_save                           K2Node_SetFieldsInStruct_StructOut;                // 0x0200(0x00C0)(HasGetValueTypeHash)
};
static_assert(alignof(Rug_c_GetData) == 0x000010, "Wrong alignment on Rug_c_GetData");
static_assert(sizeof(Rug_c_GetData) == 0x0002C0, "Wrong size on Rug_c_GetData");
static_assert(offsetof(Rug_c_GetData, Data) == 0x000000, "Member 'Rug_c_GetData::Data' has a wrong offset!");
static_assert(offsetof(Rug_c_GetData, CallFunc_Conv_NameToString_ReturnValue) == 0x0000C0, "Member 'Rug_c_GetData::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rug_c_GetData, K2Node_MakeArray_Array) == 0x0000D0, "Member 'Rug_c_GetData::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Rug_c_GetData, K2Node_MakeArray_Array_1) == 0x0000E0, "Member 'Rug_c_GetData::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(Rug_c_GetData, K2Node_MakeStruct_struct_mInt) == 0x0000F0, "Member 'Rug_c_GetData::K2Node_MakeStruct_struct_mInt' has a wrong offset!");
static_assert(offsetof(Rug_c_GetData, K2Node_MakeStruct_struct_mString) == 0x000100, "Member 'Rug_c_GetData::K2Node_MakeStruct_struct_mString' has a wrong offset!");
static_assert(offsetof(Rug_c_GetData, K2Node_MakeArray_Array_2) == 0x000110, "Member 'Rug_c_GetData::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(Rug_c_GetData, CallFunc_getData_data) == 0x000120, "Member 'Rug_c_GetData::CallFunc_getData_data' has a wrong offset!");
static_assert(offsetof(Rug_c_GetData, CallFunc_Array_Get_Item) == 0x0001E0, "Member 'Rug_c_GetData::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Rug_c_GetData, K2Node_MakeArray_Array_3) == 0x0001F0, "Member 'Rug_c_GetData::K2Node_MakeArray_Array_3' has a wrong offset!");
static_assert(offsetof(Rug_c_GetData, K2Node_SetFieldsInStruct_StructOut) == 0x000200, "Member 'Rug_c_GetData::K2Node_SetFieldsInStruct_StructOut' has a wrong offset!");

// Function rug.rug_c.getActionOptions
// 0x0058 (0x0058 - 0x0000)
struct Rug_c_GetActionOptions final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Component;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         Options;                                           // 0x0018(0x0010)(Parm, OutParm)
	TArray<Enum_interactionActions>               Options_enum;                                      // 0x0028(0x0010)(Parm, OutParm)
	TArray<class FText>                           OptionsNamesOverlay;                               // 0x0038(0x0010)(Parm, OutParm)
	TArray<Enum_interactionActions>               K2Node_MakeArray_Array;                            // 0x0048(0x0010)(ReferenceParm)
};
static_assert(alignof(Rug_c_GetActionOptions) == 0x000008, "Wrong alignment on Rug_c_GetActionOptions");
static_assert(sizeof(Rug_c_GetActionOptions) == 0x000058, "Wrong size on Rug_c_GetActionOptions");
static_assert(offsetof(Rug_c_GetActionOptions, Player) == 0x000000, "Member 'Rug_c_GetActionOptions::Player' has a wrong offset!");
static_assert(offsetof(Rug_c_GetActionOptions, Component) == 0x000008, "Member 'Rug_c_GetActionOptions::Component' has a wrong offset!");
static_assert(offsetof(Rug_c_GetActionOptions, Actor) == 0x000010, "Member 'Rug_c_GetActionOptions::Actor' has a wrong offset!");
static_assert(offsetof(Rug_c_GetActionOptions, Options) == 0x000018, "Member 'Rug_c_GetActionOptions::Options' has a wrong offset!");
static_assert(offsetof(Rug_c_GetActionOptions, Options_enum) == 0x000028, "Member 'Rug_c_GetActionOptions::Options_enum' has a wrong offset!");
static_assert(offsetof(Rug_c_GetActionOptions, OptionsNamesOverlay) == 0x000038, "Member 'Rug_c_GetActionOptions::OptionsNamesOverlay' has a wrong offset!");
static_assert(offsetof(Rug_c_GetActionOptions, K2Node_MakeArray_Array) == 0x000048, "Member 'Rug_c_GetActionOptions::K2Node_MakeArray_Array' has a wrong offset!");

}

