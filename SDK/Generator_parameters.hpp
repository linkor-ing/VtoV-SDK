#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Generator

#include "Basic.hpp"

#include "Struct_settings_structs.hpp"
#include "Struct_save_structs.hpp"
#include "Engine_structs.hpp"
#include "Enum_interactionActions_structs.hpp"
#include "InputCore_structs.hpp"
#include "Struct_mInt_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Struct_mBool_structs.hpp"


namespace SDK::Params
{

// Function generator.generator_C.ExecuteUbergraph_generator
// 0x0428 (0x0428 - 0x0000)
struct Generator_C_ExecuteUbergraph_generator final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainGamemode_C*                        K2Node_Event_gamemode;                             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStruct_settings                       K2Node_Event_settings;                             // 0x0020(0x00F0)(HasGetValueTypeHash)
	struct FKey                                   K2Node_Event_key;                                  // 0x0110(0x0018)(HasGetValueTypeHash)
	bool                                          K2Node_Event_pressed;                              // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Event_color;                                // 0x012C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUmg_texturePicker_C*                   K2Node_Event_picker;                               // 0x0140(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Event_texture;                              // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_index;                                // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_6;                             // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_3;                                // 0x0160(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          K2Node_Event_kick;                                 // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E9[0x3];                                      // 0x01E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_name;                                 // 0x01EC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F4[0x4];                                      // 0x01F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_5;                             // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_4;                             // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_2;                                // 0x0208(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         K2Node_Event_damage_1;                             // 0x0290(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_294[0x4];                                      // 0x0294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_3;                             // 0x0298(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_2;                             // 0x02A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_1;                             // 0x02A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x02B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B4[0x4];                                      // 0x02B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        K2Node_Select_Default;                             // 0x02B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x02C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player;                               // 0x02C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_1;                                // 0x02D0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	Enum_interactionActions                       K2Node_Event_action;                               // 0x0358(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0359(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35A[0x2];                                      // 0x035A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x035C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_actor;                                // 0x0360(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage;                               // 0x0368(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit;                                  // 0x036C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                K2Node_Event_impact;                               // 0x03F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_skipSetting;                          // 0x0400(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_401[0x7];                                      // 0x0401(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0408(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0418(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Generator_C_ExecuteUbergraph_generator) == 0x000008, "Wrong alignment on Generator_C_ExecuteUbergraph_generator");
static_assert(sizeof(Generator_C_ExecuteUbergraph_generator) == 0x000428, "Wrong size on Generator_C_ExecuteUbergraph_generator");
static_assert(offsetof(Generator_C_ExecuteUbergraph_generator, EntryPoint) == 0x000000, "Member 'Generator_C_ExecuteUbergraph_generator::EntryPoint' has a wrong offset!");
static_assert(offsetof(Generator_C_ExecuteUbergraph_generator, Temp_bool_Variable) == 0x000004, "Member 'Generator_C_ExecuteUbergraph_generator::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Generator_C_ExecuteUbergraph_generator, Temp_object_Variable) == 0x000008, "Member 'Generator_C_ExecuteUbergraph_generator::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(Generator_C_ExecuteUbergraph_generator, Temp_object_Variable_1) == 0x000010, "Member 'Generator_C_ExecuteUbergraph_generator::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(Generator_C_ExecuteUbergraph_generator, K2Node_Event_gamemode) == 0x000018, "Member 'Generator_C_ExecuteUbergraph_generator::K2Node_Event_gamemode' has a wrong offset!");
static_assert(offsetof(Generator_C_ExecuteUbergraph_generator, K2Node_Event_settings) == 0x000020, "Member 'Generator_C_ExecuteUbergraph_generator::K2Node_Event_settings' has a wrong offset!");
static_assert(offsetof(Generator_C_ExecuteUbergraph_generator, K2Node_Event_key) == 0x000110, "Member 'Generator_C_ExecuteUbergraph_generator::K2Node_Event_key' has a wrong offset!");
static_assert(offsetof(Generator_C_ExecuteUbergraph_generator, K2Node_Event_pressed) == 0x000128, "Member 'Generator_C_ExecuteUbergraph_generator::K2Node_Event_pressed' has a wrong offset!");
static_assert(offsetof(Generator_C_ExecuteUbergraph_generator, K2Node_Event_color) == 0x00012C, "Member 'Generator_C_ExecuteUbergraph_generator::K2Node_Event_color' has a wrong offset!");
static_assert(offsetof(Generator_C_ExecuteUbergraph_generator, K2Node_Event_picker) == 0x000140, "Member 'Generator_C_ExecuteUbergraph_generator::K2Node_Event_picker' has a wrong offset!");
static_assert(offsetof(Generator_C_ExecuteUbergraph_generator, K2Node_Event_texture) == 0x000148, "Member 'Generator_C_ExecuteUbergraph_generator::K2Node_Event_texture' has a wrong offset!");
static_assert(offsetof(Generator_C_ExecuteUbergraph_generator, K2Node_Event_index) == 0x000150, "Member 'Generator_C_ExecuteUbergraph_generator::K2Node_Event_index' has a wrong offset!");
static_assert(offsetof(Generator_C_ExecuteUbergraph_generator, K2Node_Event_player_6) == 0x000158, "Member 'Generator_C_ExecuteUbergraph_generator::K2Node_Event_player_6' has a wrong offset!");
static_assert(offsetof(Generator_C_ExecuteUbergraph_generator, K2Node_Event_hit_3) == 0x000160, "Member 'Generator_C_ExecuteUbergraph_generator::K2Node_Event_hit_3' has a wrong offset!");
static_assert(offsetof(Generator_C_ExecuteUbergraph_generator, K2Node_Event_kick) == 0x0001E8, "Member 'Generator_C_ExecuteUbergraph_generator::K2Node_Event_kick' has a wrong offset!");
static_assert(offsetof(Generator_C_ExecuteUbergraph_generator, K2Node_Event_name) == 0x0001EC, "Member 'Generator_C_ExecuteUbergraph_generator::K2Node_Event_name' has a wrong offset!");
static_assert(offsetof(Generator_C_ExecuteUbergraph_generator, K2Node_Event_player_5) == 0x0001F8, "Member 'Generator_C_ExecuteUbergraph_generator::K2Node_Event_player_5' has a wrong offset!");
static_assert(offsetof(Generator_C_ExecuteUbergraph_generator, K2Node_Event_player_4) == 0x000200, "Member 'Generator_C_ExecuteUbergraph_generator::K2Node_Event_player_4' has a wrong offset!");
static_assert(offsetof(Generator_C_ExecuteUbergraph_generator, K2Node_Event_hit_2) == 0x000208, "Member 'Generator_C_ExecuteUbergraph_generator::K2Node_Event_hit_2' has a wrong offset!");
static_assert(offsetof(Generator_C_ExecuteUbergraph_generator, K2Node_Event_damage_1) == 0x000290, "Member 'Generator_C_ExecuteUbergraph_generator::K2Node_Event_damage_1' has a wrong offset!");
static_assert(offsetof(Generator_C_ExecuteUbergraph_generator, K2Node_Event_player_3) == 0x000298, "Member 'Generator_C_ExecuteUbergraph_generator::K2Node_Event_player_3' has a wrong offset!");
static_assert(offsetof(Generator_C_ExecuteUbergraph_generator, K2Node_Event_player_2) == 0x0002A0, "Member 'Generator_C_ExecuteUbergraph_generator::K2Node_Event_player_2' has a wrong offset!");
static_assert(offsetof(Generator_C_ExecuteUbergraph_generator, K2Node_Event_player_1) == 0x0002A8, "Member 'Generator_C_ExecuteUbergraph_generator::K2Node_Event_player_1' has a wrong offset!");
static_assert(offsetof(Generator_C_ExecuteUbergraph_generator, CallFunc_SelectFloat_ReturnValue) == 0x0002B0, "Member 'Generator_C_ExecuteUbergraph_generator::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Generator_C_ExecuteUbergraph_generator, K2Node_Select_Default) == 0x0002B8, "Member 'Generator_C_ExecuteUbergraph_generator::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Generator_C_ExecuteUbergraph_generator, CallFunc_RandomIntegerInRange_ReturnValue) == 0x0002C0, "Member 'Generator_C_ExecuteUbergraph_generator::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(Generator_C_ExecuteUbergraph_generator, K2Node_Event_player) == 0x0002C8, "Member 'Generator_C_ExecuteUbergraph_generator::K2Node_Event_player' has a wrong offset!");
static_assert(offsetof(Generator_C_ExecuteUbergraph_generator, K2Node_Event_hit_1) == 0x0002D0, "Member 'Generator_C_ExecuteUbergraph_generator::K2Node_Event_hit_1' has a wrong offset!");
static_assert(offsetof(Generator_C_ExecuteUbergraph_generator, K2Node_Event_action) == 0x000358, "Member 'Generator_C_ExecuteUbergraph_generator::K2Node_Event_action' has a wrong offset!");
static_assert(offsetof(Generator_C_ExecuteUbergraph_generator, K2Node_SwitchEnum_CmpSuccess) == 0x000359, "Member 'Generator_C_ExecuteUbergraph_generator::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(Generator_C_ExecuteUbergraph_generator, CallFunc_Add_IntInt_ReturnValue) == 0x00035C, "Member 'Generator_C_ExecuteUbergraph_generator::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Generator_C_ExecuteUbergraph_generator, K2Node_Event_actor) == 0x000360, "Member 'Generator_C_ExecuteUbergraph_generator::K2Node_Event_actor' has a wrong offset!");
static_assert(offsetof(Generator_C_ExecuteUbergraph_generator, K2Node_Event_damage) == 0x000368, "Member 'Generator_C_ExecuteUbergraph_generator::K2Node_Event_damage' has a wrong offset!");
static_assert(offsetof(Generator_C_ExecuteUbergraph_generator, K2Node_Event_hit) == 0x00036C, "Member 'Generator_C_ExecuteUbergraph_generator::K2Node_Event_hit' has a wrong offset!");
static_assert(offsetof(Generator_C_ExecuteUbergraph_generator, K2Node_Event_impact) == 0x0003F4, "Member 'Generator_C_ExecuteUbergraph_generator::K2Node_Event_impact' has a wrong offset!");
static_assert(offsetof(Generator_C_ExecuteUbergraph_generator, K2Node_Event_skipSetting) == 0x000400, "Member 'Generator_C_ExecuteUbergraph_generator::K2Node_Event_skipSetting' has a wrong offset!");
static_assert(offsetof(Generator_C_ExecuteUbergraph_generator, CallFunc_Conv_IntToString_ReturnValue) == 0x000408, "Member 'Generator_C_ExecuteUbergraph_generator::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(Generator_C_ExecuteUbergraph_generator, CallFunc_Concat_StrStr_ReturnValue) == 0x000418, "Member 'Generator_C_ExecuteUbergraph_generator::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");

// Function generator.generator_C.playerR
// 0x0008 (0x0008 - 0x0000)
struct Generator_C_PlayerR final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Generator_C_PlayerR) == 0x000008, "Wrong alignment on Generator_C_PlayerR");
static_assert(sizeof(Generator_C_PlayerR) == 0x000008, "Wrong size on Generator_C_PlayerR");
static_assert(offsetof(Generator_C_PlayerR, Player) == 0x000000, "Member 'Generator_C_PlayerR::Player' has a wrong offset!");

// Function generator.generator_C.playerHold
// 0x0008 (0x0008 - 0x0000)
struct Generator_C_PlayerHold final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Generator_C_PlayerHold) == 0x000008, "Wrong alignment on Generator_C_PlayerHold");
static_assert(sizeof(Generator_C_PlayerHold) == 0x000008, "Wrong size on Generator_C_PlayerHold");
static_assert(offsetof(Generator_C_PlayerHold, Player) == 0x000000, "Member 'Generator_C_PlayerHold::Player' has a wrong offset!");

// Function generator.generator_C.playerUnequip
// 0x0008 (0x0008 - 0x0000)
struct Generator_C_PlayerUnequip final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Generator_C_PlayerUnequip) == 0x000008, "Wrong alignment on Generator_C_PlayerUnequip");
static_assert(sizeof(Generator_C_PlayerUnequip) == 0x000008, "Wrong size on Generator_C_PlayerUnequip");
static_assert(offsetof(Generator_C_PlayerUnequip, Player) == 0x000000, "Member 'Generator_C_PlayerUnequip::Player' has a wrong offset!");

// Function generator.generator_C.damageByPlayer
// 0x0098 (0x0098 - 0x0000)
struct Generator_C_DamageByPlayer final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         Damage;                                            // 0x0090(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Generator_C_DamageByPlayer) == 0x000008, "Wrong alignment on Generator_C_DamageByPlayer");
static_assert(sizeof(Generator_C_DamageByPlayer) == 0x000098, "Wrong size on Generator_C_DamageByPlayer");
static_assert(offsetof(Generator_C_DamageByPlayer, Player) == 0x000000, "Member 'Generator_C_DamageByPlayer::Player' has a wrong offset!");
static_assert(offsetof(Generator_C_DamageByPlayer, Hit) == 0x000008, "Member 'Generator_C_DamageByPlayer::Hit' has a wrong offset!");
static_assert(offsetof(Generator_C_DamageByPlayer, Damage) == 0x000090, "Member 'Generator_C_DamageByPlayer::Damage' has a wrong offset!");

// Function generator.generator_C.thrown
// 0x0008 (0x0008 - 0x0000)
struct Generator_C_Thrown final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Generator_C_Thrown) == 0x000008, "Wrong alignment on Generator_C_Thrown");
static_assert(sizeof(Generator_C_Thrown) == 0x000008, "Wrong size on Generator_C_Thrown");
static_assert(offsetof(Generator_C_Thrown, Player) == 0x000000, "Member 'Generator_C_Thrown::Player' has a wrong offset!");

// Function generator.generator_C.sendName
// 0x0008 (0x0008 - 0x0000)
struct Generator_C_SendName final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Generator_C_SendName) == 0x000004, "Wrong alignment on Generator_C_SendName");
static_assert(sizeof(Generator_C_SendName) == 0x000008, "Wrong size on Generator_C_SendName");
static_assert(offsetof(Generator_C_SendName, Param_Name) == 0x000000, "Member 'Generator_C_SendName::Param_Name' has a wrong offset!");

// Function generator.generator_C.kicked
// 0x0001 (0x0001 - 0x0000)
struct Generator_C_Kicked final
{
public:
	bool                                          Kick;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Generator_C_Kicked) == 0x000001, "Wrong alignment on Generator_C_Kicked");
static_assert(sizeof(Generator_C_Kicked) == 0x000001, "Wrong size on Generator_C_Kicked");
static_assert(offsetof(Generator_C_Kicked, Kick) == 0x000000, "Member 'Generator_C_Kicked::Kick' has a wrong offset!");

// Function generator.generator_C.player_use
// 0x0090 (0x0090 - 0x0000)
struct Generator_C_Player_use final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Generator_C_Player_use) == 0x000008, "Wrong alignment on Generator_C_Player_use");
static_assert(sizeof(Generator_C_Player_use) == 0x000090, "Wrong size on Generator_C_Player_use");
static_assert(offsetof(Generator_C_Player_use, Player) == 0x000000, "Member 'Generator_C_Player_use::Player' has a wrong offset!");
static_assert(offsetof(Generator_C_Player_use, Hit) == 0x000008, "Member 'Generator_C_Player_use::Hit' has a wrong offset!");

// Function generator.generator_C.texturePickerApply
// 0x0018 (0x0018 - 0x0000)
struct Generator_C_TexturePickerApply final
{
public:
	class UUmg_texturePicker_C*                   Picker;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Texture;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Generator_C_TexturePickerApply) == 0x000008, "Wrong alignment on Generator_C_TexturePickerApply");
static_assert(sizeof(Generator_C_TexturePickerApply) == 0x000018, "Wrong size on Generator_C_TexturePickerApply");
static_assert(offsetof(Generator_C_TexturePickerApply, Picker) == 0x000000, "Member 'Generator_C_TexturePickerApply::Picker' has a wrong offset!");
static_assert(offsetof(Generator_C_TexturePickerApply, Texture) == 0x000008, "Member 'Generator_C_TexturePickerApply::Texture' has a wrong offset!");
static_assert(offsetof(Generator_C_TexturePickerApply, Param_Index) == 0x000010, "Member 'Generator_C_TexturePickerApply::Param_Index' has a wrong offset!");

// Function generator.generator_C.applyColor
// 0x0010 (0x0010 - 0x0000)
struct Generator_C_ApplyColor final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Generator_C_ApplyColor) == 0x000004, "Wrong alignment on Generator_C_ApplyColor");
static_assert(sizeof(Generator_C_ApplyColor) == 0x000010, "Wrong size on Generator_C_ApplyColor");
static_assert(offsetof(Generator_C_ApplyColor, Color) == 0x000000, "Member 'Generator_C_ApplyColor::Color' has a wrong offset!");

// Function generator.generator_C.AnyKey
// 0x0020 (0x0020 - 0x0000)
struct Generator_C_AnyKey final
{
public:
	struct FKey                                   Param_Key;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Pressed;                                           // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Generator_C_AnyKey) == 0x000008, "Wrong alignment on Generator_C_AnyKey");
static_assert(sizeof(Generator_C_AnyKey) == 0x000020, "Wrong size on Generator_C_AnyKey");
static_assert(offsetof(Generator_C_AnyKey, Param_Key) == 0x000000, "Member 'Generator_C_AnyKey::Param_Key' has a wrong offset!");
static_assert(offsetof(Generator_C_AnyKey, Pressed) == 0x000018, "Member 'Generator_C_AnyKey::Pressed' has a wrong offset!");

// Function generator.generator_C.settingsApplied
// 0x00F0 (0x00F0 - 0x0000)
struct Generator_C_SettingsApplied final
{
public:
	struct FStruct_settings                       Settings;                                          // 0x0000(0x00F0)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(Generator_C_SettingsApplied) == 0x000008, "Wrong alignment on Generator_C_SettingsApplied");
static_assert(sizeof(Generator_C_SettingsApplied) == 0x0000F0, "Wrong size on Generator_C_SettingsApplied");
static_assert(offsetof(Generator_C_SettingsApplied, Settings) == 0x000000, "Member 'Generator_C_SettingsApplied::Settings' has a wrong offset!");

// Function generator.generator_C.stuffUpgraded
// 0x0008 (0x0008 - 0x0000)
struct Generator_C_StuffUpgraded final
{
public:
	class AMainGamemode_C*                        GameMode;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Generator_C_StuffUpgraded) == 0x000008, "Wrong alignment on Generator_C_StuffUpgraded");
static_assert(sizeof(Generator_C_StuffUpgraded) == 0x000008, "Wrong size on Generator_C_StuffUpgraded");
static_assert(offsetof(Generator_C_StuffUpgraded, GameMode) == 0x000000, "Member 'Generator_C_StuffUpgraded::GameMode' has a wrong offset!");

// Function generator.generator_C.upd
// 0x0018 (0x0018 - 0x0000)
struct Generator_C_Upd final
{
public:
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode;          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode_1;        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_1;                // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Generator_C_Upd) == 0x000008, "Wrong alignment on Generator_C_Upd");
static_assert(sizeof(Generator_C_Upd) == 0x000018, "Wrong size on Generator_C_Upd");
static_assert(offsetof(Generator_C_Upd, CallFunc_getMainGamemode_AsMain_Gamemode) == 0x000000, "Member 'Generator_C_Upd::CallFunc_getMainGamemode_AsMain_Gamemode' has a wrong offset!");
static_assert(offsetof(Generator_C_Upd, CallFunc_getMainGamemode_AsMain_Gamemode_1) == 0x000008, "Member 'Generator_C_Upd::CallFunc_getMainGamemode_AsMain_Gamemode_1' has a wrong offset!");
static_assert(offsetof(Generator_C_Upd, CallFunc_SelectFloat_ReturnValue) == 0x000010, "Member 'Generator_C_Upd::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Generator_C_Upd, CallFunc_SelectFloat_ReturnValue_1) == 0x000014, "Member 'Generator_C_Upd::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");

// Function generator.generator_C.Update
// 0x0020 (0x0020 - 0x0000)
struct Generator_C_Update final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             K2Node_Select_Default;                             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Generator_C_Update) == 0x000008, "Wrong alignment on Generator_C_Update");
static_assert(sizeof(Generator_C_Update) == 0x000020, "Wrong size on Generator_C_Update");
static_assert(offsetof(Generator_C_Update, Temp_bool_Variable) == 0x000000, "Member 'Generator_C_Update::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Generator_C_Update, Temp_object_Variable) == 0x000008, "Member 'Generator_C_Update::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(Generator_C_Update, Temp_object_Variable_1) == 0x000010, "Member 'Generator_C_Update::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(Generator_C_Update, K2Node_Select_Default) == 0x000018, "Member 'Generator_C_Update::K2Node_Select_Default' has a wrong offset!");

// Function generator.generator_C.canBePutInContainer
// 0x0001 (0x0001 - 0x0000)
struct Generator_C_CanBePutInContainer final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Generator_C_CanBePutInContainer) == 0x000001, "Wrong alignment on Generator_C_CanBePutInContainer");
static_assert(sizeof(Generator_C_CanBePutInContainer) == 0x000001, "Wrong size on Generator_C_CanBePutInContainer");
static_assert(offsetof(Generator_C_CanBePutInContainer, Return) == 0x000000, "Member 'Generator_C_CanBePutInContainer::Return' has a wrong offset!");

// Function generator.generator_C.asProp
// 0x0008 (0x0008 - 0x0000)
struct Generator_C_AsProp final
{
public:
	class AProp_C*                                Return;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Generator_C_AsProp) == 0x000008, "Wrong alignment on Generator_C_AsProp");
static_assert(sizeof(Generator_C_AsProp) == 0x000008, "Wrong size on Generator_C_AsProp");
static_assert(offsetof(Generator_C_AsProp, Return) == 0x000000, "Member 'Generator_C_AsProp::Return' has a wrong offset!");

// Function generator.generator_C.canPickup
// 0x0001 (0x0001 - 0x0000)
struct Generator_C_CanPickup final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Generator_C_CanPickup) == 0x000001, "Wrong alignment on Generator_C_CanPickup");
static_assert(sizeof(Generator_C_CanPickup) == 0x000001, "Wrong size on Generator_C_CanPickup");
static_assert(offsetof(Generator_C_CanPickup, Return) == 0x000000, "Member 'Generator_C_CanPickup::Return' has a wrong offset!");

// Function generator.generator_C.actionOptionIndex
// 0x0098 (0x0098 - 0x0000)
struct Generator_C_ActionOptionIndex final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	Enum_interactionActions                       Action;                                            // 0x0090(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Generator_C_ActionOptionIndex) == 0x000008, "Wrong alignment on Generator_C_ActionOptionIndex");
static_assert(sizeof(Generator_C_ActionOptionIndex) == 0x000098, "Wrong size on Generator_C_ActionOptionIndex");
static_assert(offsetof(Generator_C_ActionOptionIndex, Player) == 0x000000, "Member 'Generator_C_ActionOptionIndex::Player' has a wrong offset!");
static_assert(offsetof(Generator_C_ActionOptionIndex, Hit) == 0x000008, "Member 'Generator_C_ActionOptionIndex::Hit' has a wrong offset!");
static_assert(offsetof(Generator_C_ActionOptionIndex, Action) == 0x000090, "Member 'Generator_C_ActionOptionIndex::Action' has a wrong offset!");

// Function generator.generator_C.noRespawn
// 0x0002 (0x0002 - 0x0000)
struct Generator_C_NoRespawn final
{
public:
	bool                                          Param_NoRespawn;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Generator_C_NoRespawn) == 0x000001, "Wrong alignment on Generator_C_NoRespawn");
static_assert(sizeof(Generator_C_NoRespawn) == 0x000002, "Wrong size on Generator_C_NoRespawn");
static_assert(offsetof(Generator_C_NoRespawn, Param_NoRespawn) == 0x000000, "Member 'Generator_C_NoRespawn::Param_NoRespawn' has a wrong offset!");
static_assert(offsetof(Generator_C_NoRespawn, Return) == 0x000001, "Member 'Generator_C_NoRespawn::Return' has a wrong offset!");

// Function generator.generator_C.lookAt
// 0x00D8 (0x00D8 - 0x0000)
struct Generator_C_LookAt final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          Return;                                            // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Text;                                              // 0x0098(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    boundObjectReplace;                                // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Number;                                            // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Generator_C_LookAt) == 0x000008, "Wrong alignment on Generator_C_LookAt");
static_assert(sizeof(Generator_C_LookAt) == 0x0000D8, "Wrong size on Generator_C_LookAt");
static_assert(offsetof(Generator_C_LookAt, Player) == 0x000000, "Member 'Generator_C_LookAt::Player' has a wrong offset!");
static_assert(offsetof(Generator_C_LookAt, Hit) == 0x000008, "Member 'Generator_C_LookAt::Hit' has a wrong offset!");
static_assert(offsetof(Generator_C_LookAt, Return) == 0x000090, "Member 'Generator_C_LookAt::Return' has a wrong offset!");
static_assert(offsetof(Generator_C_LookAt, Text) == 0x000098, "Member 'Generator_C_LookAt::Text' has a wrong offset!");
static_assert(offsetof(Generator_C_LookAt, boundObjectReplace) == 0x0000A8, "Member 'Generator_C_LookAt::boundObjectReplace' has a wrong offset!");
static_assert(offsetof(Generator_C_LookAt, Number) == 0x0000B0, "Member 'Generator_C_LookAt::Number' has a wrong offset!");
static_assert(offsetof(Generator_C_LookAt, CallFunc_Conv_IntToString_ReturnValue) == 0x0000B8, "Member 'Generator_C_LookAt::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(Generator_C_LookAt, CallFunc_Concat_StrStr_ReturnValue) == 0x0000C8, "Member 'Generator_C_LookAt::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");

// Function generator.generator_C.isButtonUsed
// 0x0001 (0x0001 - 0x0000)
struct Generator_C_IsButtonUsed final
{
public:
	bool                                          Failed;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Generator_C_IsButtonUsed) == 0x000001, "Wrong alignment on Generator_C_IsButtonUsed");
static_assert(sizeof(Generator_C_IsButtonUsed) == 0x000001, "Wrong size on Generator_C_IsButtonUsed");
static_assert(offsetof(Generator_C_IsButtonUsed, Failed) == 0x000000, "Member 'Generator_C_IsButtonUsed::Failed' has a wrong offset!");

// Function generator.generator_C.landedOn
// 0x0010 (0x0010 - 0x0000)
struct Generator_C_LandedOn final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreFallDamage;                                  // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Generator_C_LandedOn) == 0x000008, "Wrong alignment on Generator_C_LandedOn");
static_assert(sizeof(Generator_C_LandedOn) == 0x000010, "Wrong size on Generator_C_LandedOn");
static_assert(offsetof(Generator_C_LandedOn, Player) == 0x000000, "Member 'Generator_C_LandedOn::Player' has a wrong offset!");
static_assert(offsetof(Generator_C_LandedOn, IgnoreFallDamage) == 0x000008, "Member 'Generator_C_LandedOn::IgnoreFallDamage' has a wrong offset!");

// Function generator.generator_C.dreamInv
// 0x0018 (0x0018 - 0x0000)
struct Generator_C_DreamInv final
{
public:
	TArray<struct FStruct_save>                   Invv;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class ADreamBase_C*                           Base;                                              // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Generator_C_DreamInv) == 0x000008, "Wrong alignment on Generator_C_DreamInv");
static_assert(sizeof(Generator_C_DreamInv) == 0x000018, "Wrong size on Generator_C_DreamInv");
static_assert(offsetof(Generator_C_DreamInv, Invv) == 0x000000, "Member 'Generator_C_DreamInv::Invv' has a wrong offset!");
static_assert(offsetof(Generator_C_DreamInv, Base) == 0x000010, "Member 'Generator_C_DreamInv::Base' has a wrong offset!");

// Function generator.generator_C.addDamage
// 0x00A8 (0x00A8 - 0x0000)
struct Generator_C_AddDamage final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x000C(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                Impact;                                            // 0x0094(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipSetting;                                       // 0x00A0(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Generator_C_AddDamage) == 0x000008, "Wrong alignment on Generator_C_AddDamage");
static_assert(sizeof(Generator_C_AddDamage) == 0x0000A8, "Wrong size on Generator_C_AddDamage");
static_assert(offsetof(Generator_C_AddDamage, Actor) == 0x000000, "Member 'Generator_C_AddDamage::Actor' has a wrong offset!");
static_assert(offsetof(Generator_C_AddDamage, Damage) == 0x000008, "Member 'Generator_C_AddDamage::Damage' has a wrong offset!");
static_assert(offsetof(Generator_C_AddDamage, Hit) == 0x00000C, "Member 'Generator_C_AddDamage::Hit' has a wrong offset!");
static_assert(offsetof(Generator_C_AddDamage, Impact) == 0x000094, "Member 'Generator_C_AddDamage::Impact' has a wrong offset!");
static_assert(offsetof(Generator_C_AddDamage, SkipSetting) == 0x0000A0, "Member 'Generator_C_AddDamage::SkipSetting' has a wrong offset!");

// Function generator.generator_C.loadData
// 0x0100 (0x0100 - 0x0000)
struct Generator_C_LoadData final
{
public:
	struct FStruct_save                           Data;                                              // 0x0000(0x00C0)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x00C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_loadData_return;                          // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_mInt                           CallFunc_Array_Get_Item;                           // 0x00C8(0x0010)(HasGetValueTypeHash)
	struct FStruct_mBool                          CallFunc_Array_Get_Item_1;                         // 0x00D8(0x0010)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_2;                         // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Get_Item_3;                         // 0x00EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_ED[0x3];                                       // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Get_Item_4;                         // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Generator_C_LoadData) == 0x000010, "Wrong alignment on Generator_C_LoadData");
static_assert(sizeof(Generator_C_LoadData) == 0x000100, "Wrong size on Generator_C_LoadData");
static_assert(offsetof(Generator_C_LoadData, Data) == 0x000000, "Member 'Generator_C_LoadData::Data' has a wrong offset!");
static_assert(offsetof(Generator_C_LoadData, Return) == 0x0000C0, "Member 'Generator_C_LoadData::Return' has a wrong offset!");
static_assert(offsetof(Generator_C_LoadData, CallFunc_loadData_return) == 0x0000C1, "Member 'Generator_C_LoadData::CallFunc_loadData_return' has a wrong offset!");
static_assert(offsetof(Generator_C_LoadData, CallFunc_Array_Get_Item) == 0x0000C8, "Member 'Generator_C_LoadData::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Generator_C_LoadData, CallFunc_Array_Get_Item_1) == 0x0000D8, "Member 'Generator_C_LoadData::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(Generator_C_LoadData, CallFunc_Array_Get_Item_2) == 0x0000E8, "Member 'Generator_C_LoadData::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(Generator_C_LoadData, CallFunc_Array_Get_Item_3) == 0x0000EC, "Member 'Generator_C_LoadData::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(Generator_C_LoadData, CallFunc_Array_Get_Item_4) == 0x0000F0, "Member 'Generator_C_LoadData::CallFunc_Array_Get_Item_4' has a wrong offset!");

// Function generator.generator_C.getData
// 0x02A0 (0x02A0 - 0x0000)
struct Generator_C_GetData final
{
public:
	struct FStruct_save                           Data;                                              // 0x0000(0x00C0)(Parm, OutParm, HasGetValueTypeHash)
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x00C0(0x0010)(ReferenceParm)
	TArray<bool>                                  K2Node_MakeArray_Array_1;                          // 0x00D0(0x0010)(ReferenceParm)
	struct FStruct_mInt                           K2Node_MakeStruct_struct_mInt;                     // 0x00E0(0x0010)(HasGetValueTypeHash)
	struct FStruct_mBool                          K2Node_MakeStruct_struct_mBool;                    // 0x00F0(0x0010)(HasGetValueTypeHash)
	TArray<struct FStruct_mInt>                   K2Node_MakeArray_Array_2;                          // 0x0100(0x0010)(ReferenceParm)
	TArray<struct FStruct_mBool>                  K2Node_MakeArray_Array_3;                          // 0x0110(0x0010)(ReferenceParm)
	struct FStruct_save                           CallFunc_getData_data;                             // 0x0120(0x00C0)(HasGetValueTypeHash)
	struct FStruct_save                           K2Node_SetFieldsInStruct_StructOut;                // 0x01E0(0x00C0)(HasGetValueTypeHash)
};
static_assert(alignof(Generator_C_GetData) == 0x000010, "Wrong alignment on Generator_C_GetData");
static_assert(sizeof(Generator_C_GetData) == 0x0002A0, "Wrong size on Generator_C_GetData");
static_assert(offsetof(Generator_C_GetData, Data) == 0x000000, "Member 'Generator_C_GetData::Data' has a wrong offset!");
static_assert(offsetof(Generator_C_GetData, K2Node_MakeArray_Array) == 0x0000C0, "Member 'Generator_C_GetData::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Generator_C_GetData, K2Node_MakeArray_Array_1) == 0x0000D0, "Member 'Generator_C_GetData::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(Generator_C_GetData, K2Node_MakeStruct_struct_mInt) == 0x0000E0, "Member 'Generator_C_GetData::K2Node_MakeStruct_struct_mInt' has a wrong offset!");
static_assert(offsetof(Generator_C_GetData, K2Node_MakeStruct_struct_mBool) == 0x0000F0, "Member 'Generator_C_GetData::K2Node_MakeStruct_struct_mBool' has a wrong offset!");
static_assert(offsetof(Generator_C_GetData, K2Node_MakeArray_Array_2) == 0x000100, "Member 'Generator_C_GetData::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(Generator_C_GetData, K2Node_MakeArray_Array_3) == 0x000110, "Member 'Generator_C_GetData::K2Node_MakeArray_Array_3' has a wrong offset!");
static_assert(offsetof(Generator_C_GetData, CallFunc_getData_data) == 0x000120, "Member 'Generator_C_GetData::CallFunc_getData_data' has a wrong offset!");
static_assert(offsetof(Generator_C_GetData, K2Node_SetFieldsInStruct_StructOut) == 0x0001E0, "Member 'Generator_C_GetData::K2Node_SetFieldsInStruct_StructOut' has a wrong offset!");

// Function generator.generator_C.getActionOptions
// 0x00A8 (0x00A8 - 0x0000)
struct Generator_C_GetActionOptions final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Component;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         Options;                                           // 0x0018(0x0010)(Parm, OutParm)
	TArray<Enum_interactionActions>               Options_enum;                                      // 0x0028(0x0010)(Parm, OutParm)
	TArray<class FText>                           OptionsNamesOverlay;                               // 0x0038(0x0010)(Parm, OutParm)
	uint8                                         Number;                                            // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B[0x5];                                       // 0x004B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<Enum_interactionActions>               Temp_byte_Variable;                                // 0x0050(0x0010)(ReferenceParm)
	TArray<Enum_interactionActions>               K2Node_MakeArray_Array;                            // 0x0060(0x0010)(ReferenceParm)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<Enum_interactionActions>               K2Node_MakeArray_Array_1;                          // 0x0078(0x0010)(ReferenceParm)
	TArray<Enum_interactionActions>               K2Node_Select_Default;                             // 0x0088(0x0010)(ReferenceParm)
	TArray<Enum_interactionActions>               K2Node_Select_Default_1;                           // 0x0098(0x0010)(ReferenceParm)
};
static_assert(alignof(Generator_C_GetActionOptions) == 0x000008, "Wrong alignment on Generator_C_GetActionOptions");
static_assert(sizeof(Generator_C_GetActionOptions) == 0x0000A8, "Wrong size on Generator_C_GetActionOptions");
static_assert(offsetof(Generator_C_GetActionOptions, Player) == 0x000000, "Member 'Generator_C_GetActionOptions::Player' has a wrong offset!");
static_assert(offsetof(Generator_C_GetActionOptions, Component) == 0x000008, "Member 'Generator_C_GetActionOptions::Component' has a wrong offset!");
static_assert(offsetof(Generator_C_GetActionOptions, Actor) == 0x000010, "Member 'Generator_C_GetActionOptions::Actor' has a wrong offset!");
static_assert(offsetof(Generator_C_GetActionOptions, Options) == 0x000018, "Member 'Generator_C_GetActionOptions::Options' has a wrong offset!");
static_assert(offsetof(Generator_C_GetActionOptions, Options_enum) == 0x000028, "Member 'Generator_C_GetActionOptions::Options_enum' has a wrong offset!");
static_assert(offsetof(Generator_C_GetActionOptions, OptionsNamesOverlay) == 0x000038, "Member 'Generator_C_GetActionOptions::OptionsNamesOverlay' has a wrong offset!");
static_assert(offsetof(Generator_C_GetActionOptions, Number) == 0x000048, "Member 'Generator_C_GetActionOptions::Number' has a wrong offset!");
static_assert(offsetof(Generator_C_GetActionOptions, Temp_bool_Variable) == 0x000049, "Member 'Generator_C_GetActionOptions::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Generator_C_GetActionOptions, Temp_bool_Variable_1) == 0x00004A, "Member 'Generator_C_GetActionOptions::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(Generator_C_GetActionOptions, Temp_byte_Variable) == 0x000050, "Member 'Generator_C_GetActionOptions::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(Generator_C_GetActionOptions, K2Node_MakeArray_Array) == 0x000060, "Member 'Generator_C_GetActionOptions::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Generator_C_GetActionOptions, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000070, "Member 'Generator_C_GetActionOptions::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(Generator_C_GetActionOptions, K2Node_MakeArray_Array_1) == 0x000078, "Member 'Generator_C_GetActionOptions::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(Generator_C_GetActionOptions, K2Node_Select_Default) == 0x000088, "Member 'Generator_C_GetActionOptions::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Generator_C_GetActionOptions, K2Node_Select_Default_1) == 0x000098, "Member 'Generator_C_GetActionOptions::K2Node_Select_Default_1' has a wrong offset!");

// Function generator.generator_C.gatherDataFromKey
// 0x0001 (0x0001 - 0x0000)
struct Generator_C_GatherDataFromKey final
{
public:
	bool                                          Gather;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Generator_C_GatherDataFromKey) == 0x000001, "Wrong alignment on Generator_C_GatherDataFromKey");
static_assert(sizeof(Generator_C_GatherDataFromKey) == 0x000001, "Wrong size on Generator_C_GatherDataFromKey");
static_assert(offsetof(Generator_C_GatherDataFromKey, Gather) == 0x000000, "Member 'Generator_C_GatherDataFromKey::Gather' has a wrong offset!");

}

