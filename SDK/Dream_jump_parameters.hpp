#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Dream_jump

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function dream_jump.dream_jump_C.ExecuteUbergraph_dream_jump
// 0x00D0 (0x00D0 - 0x0000)
struct Dream_jump_C_ExecuteUbergraph_dream_jump final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0028(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          CallFunc_getMainPlayer_AsMain_Player;              // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_addFood_full;                             // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode;          // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Dream_jump_C_ExecuteUbergraph_dream_jump) == 0x000008, "Wrong alignment on Dream_jump_C_ExecuteUbergraph_dream_jump");
static_assert(sizeof(Dream_jump_C_ExecuteUbergraph_dream_jump) == 0x0000D0, "Wrong size on Dream_jump_C_ExecuteUbergraph_dream_jump");
static_assert(offsetof(Dream_jump_C_ExecuteUbergraph_dream_jump, EntryPoint) == 0x000000, "Member 'Dream_jump_C_ExecuteUbergraph_dream_jump::EntryPoint' has a wrong offset!");
static_assert(offsetof(Dream_jump_C_ExecuteUbergraph_dream_jump, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000008, "Member 'Dream_jump_C_ExecuteUbergraph_dream_jump::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Dream_jump_C_ExecuteUbergraph_dream_jump, K2Node_ComponentBoundEvent_OtherActor) == 0x000010, "Member 'Dream_jump_C_ExecuteUbergraph_dream_jump::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(Dream_jump_C_ExecuteUbergraph_dream_jump, K2Node_ComponentBoundEvent_OtherComp) == 0x000018, "Member 'Dream_jump_C_ExecuteUbergraph_dream_jump::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(Dream_jump_C_ExecuteUbergraph_dream_jump, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000020, "Member 'Dream_jump_C_ExecuteUbergraph_dream_jump::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Dream_jump_C_ExecuteUbergraph_dream_jump, K2Node_ComponentBoundEvent_bFromSweep) == 0x000024, "Member 'Dream_jump_C_ExecuteUbergraph_dream_jump::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(Dream_jump_C_ExecuteUbergraph_dream_jump, K2Node_ComponentBoundEvent_SweepResult) == 0x000028, "Member 'Dream_jump_C_ExecuteUbergraph_dream_jump::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(Dream_jump_C_ExecuteUbergraph_dream_jump, K2Node_Event_DeltaSeconds) == 0x0000B0, "Member 'Dream_jump_C_ExecuteUbergraph_dream_jump::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(Dream_jump_C_ExecuteUbergraph_dream_jump, CallFunc_getMainPlayer_AsMain_Player) == 0x0000B8, "Member 'Dream_jump_C_ExecuteUbergraph_dream_jump::CallFunc_getMainPlayer_AsMain_Player' has a wrong offset!");
static_assert(offsetof(Dream_jump_C_ExecuteUbergraph_dream_jump, CallFunc_addFood_full) == 0x0000C0, "Member 'Dream_jump_C_ExecuteUbergraph_dream_jump::CallFunc_addFood_full' has a wrong offset!");
static_assert(offsetof(Dream_jump_C_ExecuteUbergraph_dream_jump, CallFunc_getMainGamemode_AsMain_Gamemode) == 0x0000C8, "Member 'Dream_jump_C_ExecuteUbergraph_dream_jump::CallFunc_getMainGamemode_AsMain_Gamemode' has a wrong offset!");

// Function dream_jump.dream_jump_C.BndEvt__dream_climb_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct Dream_jump_C_BndEvt__dream_climb_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Dream_jump_C_BndEvt__dream_climb_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on Dream_jump_C_BndEvt__dream_climb_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(Dream_jump_C_BndEvt__dream_climb_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on Dream_jump_C_BndEvt__dream_climb_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(Dream_jump_C_BndEvt__dream_climb_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'Dream_jump_C_BndEvt__dream_climb_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Dream_jump_C_BndEvt__dream_climb_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'Dream_jump_C_BndEvt__dream_climb_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(Dream_jump_C_BndEvt__dream_climb_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'Dream_jump_C_BndEvt__dream_climb_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(Dream_jump_C_BndEvt__dream_climb_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'Dream_jump_C_BndEvt__dream_climb_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Dream_jump_C_BndEvt__dream_climb_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'Dream_jump_C_BndEvt__dream_climb_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(Dream_jump_C_BndEvt__dream_climb_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'Dream_jump_C_BndEvt__dream_climb_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function dream_jump.dream_jump_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct Dream_jump_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Dream_jump_C_ReceiveTick) == 0x000004, "Wrong alignment on Dream_jump_C_ReceiveTick");
static_assert(sizeof(Dream_jump_C_ReceiveTick) == 0x000004, "Wrong size on Dream_jump_C_ReceiveTick");
static_assert(offsetof(Dream_jump_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'Dream_jump_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function dream_jump.dream_jump_C.gen
// 0x00D0 (0x00D0 - 0x0000)
struct Dream_jump_C_Gen final
{
public:
	int32                                         Temp_int_Variable;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FFloor_ReturnValue;                       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_2;            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_3;            // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0090(0x0030)(IsPlainOldData, NoDestructor)
	int32                                         CallFunc_AddInstance_ReturnValue;                  // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Dream_jump_C_Gen) == 0x000010, "Wrong alignment on Dream_jump_C_Gen");
static_assert(sizeof(Dream_jump_C_Gen) == 0x0000D0, "Wrong size on Dream_jump_C_Gen");
static_assert(offsetof(Dream_jump_C_Gen, Temp_int_Variable) == 0x000000, "Member 'Dream_jump_C_Gen::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(Dream_jump_C_Gen, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000004, "Member 'Dream_jump_C_Gen::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dream_jump_C_Gen, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000008, "Member 'Dream_jump_C_Gen::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dream_jump_C_Gen, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00000C, "Member 'Dream_jump_C_Gen::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dream_jump_C_Gen, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'Dream_jump_C_Gen::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dream_jump_C_Gen, CallFunc_RandomIntegerInRange_ReturnValue) == 0x000014, "Member 'Dream_jump_C_Gen::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dream_jump_C_Gen, CallFunc_RandomFloatInRange_ReturnValue) == 0x000018, "Member 'Dream_jump_C_Gen::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dream_jump_C_Gen, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x00001C, "Member 'Dream_jump_C_Gen::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Dream_jump_C_Gen, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000020, "Member 'Dream_jump_C_Gen::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dream_jump_C_Gen, CallFunc_MakeVector_ReturnValue) == 0x000024, "Member 'Dream_jump_C_Gen::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dream_jump_C_Gen, CallFunc_FFloor_ReturnValue) == 0x000030, "Member 'Dream_jump_C_Gen::CallFunc_FFloor_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dream_jump_C_Gen, CallFunc_Conv_IntToFloat_ReturnValue_2) == 0x000034, "Member 'Dream_jump_C_Gen::CallFunc_Conv_IntToFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Dream_jump_C_Gen, Temp_int_Variable_1) == 0x000038, "Member 'Dream_jump_C_Gen::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(Dream_jump_C_Gen, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00003C, "Member 'Dream_jump_C_Gen::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dream_jump_C_Gen, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000040, "Member 'Dream_jump_C_Gen::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Dream_jump_C_Gen, CallFunc_MakeVector_ReturnValue_1) == 0x000044, "Member 'Dream_jump_C_Gen::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Dream_jump_C_Gen, CallFunc_BooleanAND_ReturnValue) == 0x000050, "Member 'Dream_jump_C_Gen::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dream_jump_C_Gen, CallFunc_Conv_IntToFloat_ReturnValue_3) == 0x000054, "Member 'Dream_jump_C_Gen::CallFunc_Conv_IntToFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Dream_jump_C_Gen, CallFunc_MakeVector_ReturnValue_2) == 0x000058, "Member 'Dream_jump_C_Gen::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Dream_jump_C_Gen, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000064, "Member 'Dream_jump_C_Gen::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dream_jump_C_Gen, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x000070, "Member 'Dream_jump_C_Gen::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Dream_jump_C_Gen, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000074, "Member 'Dream_jump_C_Gen::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dream_jump_C_Gen, CallFunc_Add_VectorVector_ReturnValue) == 0x000080, "Member 'Dream_jump_C_Gen::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dream_jump_C_Gen, CallFunc_Add_IntInt_ReturnValue_1) == 0x00008C, "Member 'Dream_jump_C_Gen::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Dream_jump_C_Gen, CallFunc_MakeTransform_ReturnValue) == 0x000090, "Member 'Dream_jump_C_Gen::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dream_jump_C_Gen, CallFunc_AddInstance_ReturnValue) == 0x0000C0, "Member 'Dream_jump_C_Gen::CallFunc_AddInstance_ReturnValue' has a wrong offset!");

}

