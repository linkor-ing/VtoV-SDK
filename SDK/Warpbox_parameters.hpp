#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Warpbox

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Struct_save_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Enum_interactionActions_structs.hpp"
#include "Struct_mString_structs.hpp"
#include "Struct_mBool_structs.hpp"
#include "InputCore_structs.hpp"
#include "Struct_settings_structs.hpp"


namespace SDK::Params
{

// Function warpbox.warpbox_C.PlaySound
// 0x0008 (0x0008 - 0x0000)
struct Warpbox_C_PlaySound final
{
public:
	class USoundBase*                             NewSound;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Warpbox_C_PlaySound) == 0x000008, "Wrong alignment on Warpbox_C_PlaySound");
static_assert(sizeof(Warpbox_C_PlaySound) == 0x000008, "Wrong size on Warpbox_C_PlaySound");
static_assert(offsetof(Warpbox_C_PlaySound, NewSound) == 0x000000, "Member 'Warpbox_C_PlaySound::NewSound' has a wrong offset!");

// Function warpbox.warpbox_C.loadData
// 0x0130 (0x0130 - 0x0000)
struct Warpbox_C_LoadData final
{
public:
	struct FStruct_save                           Data;                                              // 0x0000(0x00C0)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x00C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E03[0x7];                                     // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_mString                        CallFunc_Array_Get_Item;                           // 0x00C8(0x0010)(HasGetValueTypeHash)
	struct FStruct_mBool                          CallFunc_Array_Get_Item_1;                         // 0x00D8(0x0010)(HasGetValueTypeHash)
	class FString                                 CallFunc_Array_Get_Item_2;                         // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Get_Item_3;                         // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Get_Item_4;                         // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E04[0x6];                                     // 0x00FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Array_Get_Item_5;                         // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FStruct_mBool                          CallFunc_Array_Get_Item_6;                         // 0x0110(0x0010)(HasGetValueTypeHash)
	bool                                          CallFunc_loadData_return;                          // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Warpbox_C_LoadData) == 0x000010, "Wrong alignment on Warpbox_C_LoadData");
static_assert(sizeof(Warpbox_C_LoadData) == 0x000130, "Wrong size on Warpbox_C_LoadData");
static_assert(offsetof(Warpbox_C_LoadData, Data) == 0x000000, "Member 'Warpbox_C_LoadData::Data' has a wrong offset!");
static_assert(offsetof(Warpbox_C_LoadData, Return) == 0x0000C0, "Member 'Warpbox_C_LoadData::Return' has a wrong offset!");
static_assert(offsetof(Warpbox_C_LoadData, CallFunc_Array_Get_Item) == 0x0000C8, "Member 'Warpbox_C_LoadData::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Warpbox_C_LoadData, CallFunc_Array_Get_Item_1) == 0x0000D8, "Member 'Warpbox_C_LoadData::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(Warpbox_C_LoadData, CallFunc_Array_Get_Item_2) == 0x0000E8, "Member 'Warpbox_C_LoadData::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(Warpbox_C_LoadData, CallFunc_Array_Get_Item_3) == 0x0000F8, "Member 'Warpbox_C_LoadData::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(Warpbox_C_LoadData, CallFunc_Array_Get_Item_4) == 0x0000F9, "Member 'Warpbox_C_LoadData::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(Warpbox_C_LoadData, CallFunc_Array_Get_Item_5) == 0x000100, "Member 'Warpbox_C_LoadData::CallFunc_Array_Get_Item_5' has a wrong offset!");
static_assert(offsetof(Warpbox_C_LoadData, CallFunc_Array_Get_Item_6) == 0x000110, "Member 'Warpbox_C_LoadData::CallFunc_Array_Get_Item_6' has a wrong offset!");
static_assert(offsetof(Warpbox_C_LoadData, CallFunc_loadData_return) == 0x000120, "Member 'Warpbox_C_LoadData::CallFunc_loadData_return' has a wrong offset!");

// Function warpbox.warpbox_C.upd
// 0x0028 (0x0028 - 0x0000)
struct Warpbox_C_Upd final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E05[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Get_Item_1;                         // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E06[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Warpbox_C_Upd) == 0x000008, "Wrong alignment on Warpbox_C_Upd");
static_assert(sizeof(Warpbox_C_Upd) == 0x000028, "Wrong size on Warpbox_C_Upd");
static_assert(offsetof(Warpbox_C_Upd, Temp_int_Array_Index_Variable) == 0x000000, "Member 'Warpbox_C_Upd::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Warpbox_C_Upd, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'Warpbox_C_Upd::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Warpbox_C_Upd, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'Warpbox_C_Upd::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Warpbox_C_Upd, CallFunc_BooleanAND_ReturnValue) == 0x00000C, "Member 'Warpbox_C_Upd::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(Warpbox_C_Upd, CallFunc_Array_Get_Item) == 0x000010, "Member 'Warpbox_C_Upd::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Warpbox_C_Upd, CallFunc_Array_Get_Item_1) == 0x000018, "Member 'Warpbox_C_Upd::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(Warpbox_C_Upd, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'Warpbox_C_Upd::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Warpbox_C_Upd, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'Warpbox_C_Upd::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function warpbox.warpbox_C.getPortal
// 0x0008 (0x0008 - 0x0000)
struct Warpbox_C_GetPortal final
{
public:
	class APortal_C*                              Param_Portal_obj;                                  // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Warpbox_C_GetPortal) == 0x000008, "Wrong alignment on Warpbox_C_GetPortal");
static_assert(sizeof(Warpbox_C_GetPortal) == 0x000008, "Wrong size on Warpbox_C_GetPortal");
static_assert(offsetof(Warpbox_C_GetPortal, Param_Portal_obj) == 0x000000, "Member 'Warpbox_C_GetPortal::Param_Portal_obj' has a wrong offset!");

// Function warpbox.warpbox_C.UserConstructionScript
// 0x0010 (0x0010 - 0x0000)
struct Warpbox_C_UserConstructionScript final
{
public:
	TArray<class UStaticMeshComponent*>           K2Node_MakeArray_Array;                            // 0x0000(0x0010)(ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(Warpbox_C_UserConstructionScript) == 0x000008, "Wrong alignment on Warpbox_C_UserConstructionScript");
static_assert(sizeof(Warpbox_C_UserConstructionScript) == 0x000010, "Wrong size on Warpbox_C_UserConstructionScript");
static_assert(offsetof(Warpbox_C_UserConstructionScript, K2Node_MakeArray_Array) == 0x000000, "Member 'Warpbox_C_UserConstructionScript::K2Node_MakeArray_Array' has a wrong offset!");

// Function warpbox.warpbox_C.OnNotifyEnd_7D39BA3C4D76CB4B48378FA14DE88C03
// 0x0008 (0x0008 - 0x0000)
struct Warpbox_C_OnNotifyEnd_7D39BA3C4D76CB4B48378FA14DE88C03 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Warpbox_C_OnNotifyEnd_7D39BA3C4D76CB4B48378FA14DE88C03) == 0x000004, "Wrong alignment on Warpbox_C_OnNotifyEnd_7D39BA3C4D76CB4B48378FA14DE88C03");
static_assert(sizeof(Warpbox_C_OnNotifyEnd_7D39BA3C4D76CB4B48378FA14DE88C03) == 0x000008, "Wrong size on Warpbox_C_OnNotifyEnd_7D39BA3C4D76CB4B48378FA14DE88C03");
static_assert(offsetof(Warpbox_C_OnNotifyEnd_7D39BA3C4D76CB4B48378FA14DE88C03, NotifyName) == 0x000000, "Member 'Warpbox_C_OnNotifyEnd_7D39BA3C4D76CB4B48378FA14DE88C03::NotifyName' has a wrong offset!");

// Function warpbox.warpbox_C.OnNotifyBegin_7D39BA3C4D76CB4B48378FA14DE88C03
// 0x0008 (0x0008 - 0x0000)
struct Warpbox_C_OnNotifyBegin_7D39BA3C4D76CB4B48378FA14DE88C03 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Warpbox_C_OnNotifyBegin_7D39BA3C4D76CB4B48378FA14DE88C03) == 0x000004, "Wrong alignment on Warpbox_C_OnNotifyBegin_7D39BA3C4D76CB4B48378FA14DE88C03");
static_assert(sizeof(Warpbox_C_OnNotifyBegin_7D39BA3C4D76CB4B48378FA14DE88C03) == 0x000008, "Wrong size on Warpbox_C_OnNotifyBegin_7D39BA3C4D76CB4B48378FA14DE88C03");
static_assert(offsetof(Warpbox_C_OnNotifyBegin_7D39BA3C4D76CB4B48378FA14DE88C03, NotifyName) == 0x000000, "Member 'Warpbox_C_OnNotifyBegin_7D39BA3C4D76CB4B48378FA14DE88C03::NotifyName' has a wrong offset!");

// Function warpbox.warpbox_C.OnInterrupted_7D39BA3C4D76CB4B48378FA14DE88C03
// 0x0008 (0x0008 - 0x0000)
struct Warpbox_C_OnInterrupted_7D39BA3C4D76CB4B48378FA14DE88C03 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Warpbox_C_OnInterrupted_7D39BA3C4D76CB4B48378FA14DE88C03) == 0x000004, "Wrong alignment on Warpbox_C_OnInterrupted_7D39BA3C4D76CB4B48378FA14DE88C03");
static_assert(sizeof(Warpbox_C_OnInterrupted_7D39BA3C4D76CB4B48378FA14DE88C03) == 0x000008, "Wrong size on Warpbox_C_OnInterrupted_7D39BA3C4D76CB4B48378FA14DE88C03");
static_assert(offsetof(Warpbox_C_OnInterrupted_7D39BA3C4D76CB4B48378FA14DE88C03, NotifyName) == 0x000000, "Member 'Warpbox_C_OnInterrupted_7D39BA3C4D76CB4B48378FA14DE88C03::NotifyName' has a wrong offset!");

// Function warpbox.warpbox_C.OnBlendOut_7D39BA3C4D76CB4B48378FA14DE88C03
// 0x0008 (0x0008 - 0x0000)
struct Warpbox_C_OnBlendOut_7D39BA3C4D76CB4B48378FA14DE88C03 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Warpbox_C_OnBlendOut_7D39BA3C4D76CB4B48378FA14DE88C03) == 0x000004, "Wrong alignment on Warpbox_C_OnBlendOut_7D39BA3C4D76CB4B48378FA14DE88C03");
static_assert(sizeof(Warpbox_C_OnBlendOut_7D39BA3C4D76CB4B48378FA14DE88C03) == 0x000008, "Wrong size on Warpbox_C_OnBlendOut_7D39BA3C4D76CB4B48378FA14DE88C03");
static_assert(offsetof(Warpbox_C_OnBlendOut_7D39BA3C4D76CB4B48378FA14DE88C03, NotifyName) == 0x000000, "Member 'Warpbox_C_OnBlendOut_7D39BA3C4D76CB4B48378FA14DE88C03::NotifyName' has a wrong offset!");

// Function warpbox.warpbox_C.OnCompleted_7D39BA3C4D76CB4B48378FA14DE88C03
// 0x0008 (0x0008 - 0x0000)
struct Warpbox_C_OnCompleted_7D39BA3C4D76CB4B48378FA14DE88C03 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Warpbox_C_OnCompleted_7D39BA3C4D76CB4B48378FA14DE88C03) == 0x000004, "Wrong alignment on Warpbox_C_OnCompleted_7D39BA3C4D76CB4B48378FA14DE88C03");
static_assert(sizeof(Warpbox_C_OnCompleted_7D39BA3C4D76CB4B48378FA14DE88C03) == 0x000008, "Wrong size on Warpbox_C_OnCompleted_7D39BA3C4D76CB4B48378FA14DE88C03");
static_assert(offsetof(Warpbox_C_OnCompleted_7D39BA3C4D76CB4B48378FA14DE88C03, NotifyName) == 0x000000, "Member 'Warpbox_C_OnCompleted_7D39BA3C4D76CB4B48378FA14DE88C03::NotifyName' has a wrong offset!");

// Function warpbox.warpbox_C.stuffUpgraded
// 0x0008 (0x0008 - 0x0000)
struct Warpbox_C_StuffUpgraded final
{
public:
	class AMainGamemode_C*                        GameMode;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Warpbox_C_StuffUpgraded) == 0x000008, "Wrong alignment on Warpbox_C_StuffUpgraded");
static_assert(sizeof(Warpbox_C_StuffUpgraded) == 0x000008, "Wrong size on Warpbox_C_StuffUpgraded");
static_assert(offsetof(Warpbox_C_StuffUpgraded, GameMode) == 0x000000, "Member 'Warpbox_C_StuffUpgraded::GameMode' has a wrong offset!");

// Function warpbox.warpbox_C.AnyKey
// 0x0020 (0x0020 - 0x0000)
struct Warpbox_C_AnyKey final
{
public:
	struct FKey                                   Param_Key;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Pressed;                                           // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Warpbox_C_AnyKey) == 0x000008, "Wrong alignment on Warpbox_C_AnyKey");
static_assert(sizeof(Warpbox_C_AnyKey) == 0x000020, "Wrong size on Warpbox_C_AnyKey");
static_assert(offsetof(Warpbox_C_AnyKey, Param_Key) == 0x000000, "Member 'Warpbox_C_AnyKey::Param_Key' has a wrong offset!");
static_assert(offsetof(Warpbox_C_AnyKey, Pressed) == 0x000018, "Member 'Warpbox_C_AnyKey::Pressed' has a wrong offset!");

// Function warpbox.warpbox_C.applyColor
// 0x0010 (0x0010 - 0x0000)
struct Warpbox_C_ApplyColor final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Warpbox_C_ApplyColor) == 0x000004, "Wrong alignment on Warpbox_C_ApplyColor");
static_assert(sizeof(Warpbox_C_ApplyColor) == 0x000010, "Wrong size on Warpbox_C_ApplyColor");
static_assert(offsetof(Warpbox_C_ApplyColor, Color) == 0x000000, "Member 'Warpbox_C_ApplyColor::Color' has a wrong offset!");

// Function warpbox.warpbox_C.player_use
// 0x0090 (0x0090 - 0x0000)
struct Warpbox_C_Player_use final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Warpbox_C_Player_use) == 0x000008, "Wrong alignment on Warpbox_C_Player_use");
static_assert(sizeof(Warpbox_C_Player_use) == 0x000090, "Wrong size on Warpbox_C_Player_use");
static_assert(offsetof(Warpbox_C_Player_use, Player) == 0x000000, "Member 'Warpbox_C_Player_use::Player' has a wrong offset!");
static_assert(offsetof(Warpbox_C_Player_use, Hit) == 0x000008, "Member 'Warpbox_C_Player_use::Hit' has a wrong offset!");

// Function warpbox.warpbox_C.kicked
// 0x0001 (0x0001 - 0x0000)
struct Warpbox_C_Kicked final
{
public:
	bool                                          Kick;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Warpbox_C_Kicked) == 0x000001, "Wrong alignment on Warpbox_C_Kicked");
static_assert(sizeof(Warpbox_C_Kicked) == 0x000001, "Wrong size on Warpbox_C_Kicked");
static_assert(offsetof(Warpbox_C_Kicked, Kick) == 0x000000, "Member 'Warpbox_C_Kicked::Kick' has a wrong offset!");

// Function warpbox.warpbox_C.sendName
// 0x0008 (0x0008 - 0x0000)
struct Warpbox_C_SendName final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Warpbox_C_SendName) == 0x000004, "Wrong alignment on Warpbox_C_SendName");
static_assert(sizeof(Warpbox_C_SendName) == 0x000008, "Wrong size on Warpbox_C_SendName");
static_assert(offsetof(Warpbox_C_SendName, Param_Name) == 0x000000, "Member 'Warpbox_C_SendName::Param_Name' has a wrong offset!");

// Function warpbox.warpbox_C.thrown
// 0x0008 (0x0008 - 0x0000)
struct Warpbox_C_Thrown final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Warpbox_C_Thrown) == 0x000008, "Wrong alignment on Warpbox_C_Thrown");
static_assert(sizeof(Warpbox_C_Thrown) == 0x000008, "Wrong size on Warpbox_C_Thrown");
static_assert(offsetof(Warpbox_C_Thrown, Player) == 0x000000, "Member 'Warpbox_C_Thrown::Player' has a wrong offset!");

// Function warpbox.warpbox_C.damageByPlayer
// 0x0090 (0x0090 - 0x0000)
struct Warpbox_C_DamageByPlayer final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Warpbox_C_DamageByPlayer) == 0x000008, "Wrong alignment on Warpbox_C_DamageByPlayer");
static_assert(sizeof(Warpbox_C_DamageByPlayer) == 0x000090, "Wrong size on Warpbox_C_DamageByPlayer");
static_assert(offsetof(Warpbox_C_DamageByPlayer, Player) == 0x000000, "Member 'Warpbox_C_DamageByPlayer::Player' has a wrong offset!");
static_assert(offsetof(Warpbox_C_DamageByPlayer, Hit) == 0x000008, "Member 'Warpbox_C_DamageByPlayer::Hit' has a wrong offset!");

// Function warpbox.warpbox_C.Open
// 0x0001 (0x0001 - 0x0000)
struct Warpbox_C_Open final
{
public:
	bool                                          Param_Opened;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Warpbox_C_Open) == 0x000001, "Wrong alignment on Warpbox_C_Open");
static_assert(sizeof(Warpbox_C_Open) == 0x000001, "Wrong size on Warpbox_C_Open");
static_assert(offsetof(Warpbox_C_Open, Param_Opened) == 0x000000, "Member 'Warpbox_C_Open::Param_Opened' has a wrong offset!");

// Function warpbox.warpbox_C.BndEvt__tilebox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct Warpbox_C_BndEvt__tilebox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E07[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Warpbox_C_BndEvt__tilebox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on Warpbox_C_BndEvt__tilebox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(Warpbox_C_BndEvt__tilebox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on Warpbox_C_BndEvt__tilebox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(Warpbox_C_BndEvt__tilebox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'Warpbox_C_BndEvt__tilebox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Warpbox_C_BndEvt__tilebox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'Warpbox_C_BndEvt__tilebox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(Warpbox_C_BndEvt__tilebox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'Warpbox_C_BndEvt__tilebox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(Warpbox_C_BndEvt__tilebox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'Warpbox_C_BndEvt__tilebox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Warpbox_C_BndEvt__tilebox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'Warpbox_C_BndEvt__tilebox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(Warpbox_C_BndEvt__tilebox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'Warpbox_C_BndEvt__tilebox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function warpbox.warpbox_C.settingsApplied
// 0x00CC (0x00CC - 0x0000)
struct Warpbox_C_SettingsApplied final
{
public:
	struct FStruct_settings                       Settings;                                          // 0x0000(0x00CC)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Warpbox_C_SettingsApplied) == 0x000004, "Wrong alignment on Warpbox_C_SettingsApplied");
static_assert(sizeof(Warpbox_C_SettingsApplied) == 0x0000CC, "Wrong size on Warpbox_C_SettingsApplied");
static_assert(offsetof(Warpbox_C_SettingsApplied, Settings) == 0x000000, "Member 'Warpbox_C_SettingsApplied::Settings' has a wrong offset!");

// Function warpbox.warpbox_C.actionOptionIndex
// 0x0098 (0x0098 - 0x0000)
struct Warpbox_C_ActionOptionIndex final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         Param_Index;                                       // 0x0090(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_interactionActions                       Action;                                            // 0x0094(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Warpbox_C_ActionOptionIndex) == 0x000008, "Wrong alignment on Warpbox_C_ActionOptionIndex");
static_assert(sizeof(Warpbox_C_ActionOptionIndex) == 0x000098, "Wrong size on Warpbox_C_ActionOptionIndex");
static_assert(offsetof(Warpbox_C_ActionOptionIndex, Player) == 0x000000, "Member 'Warpbox_C_ActionOptionIndex::Player' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ActionOptionIndex, Hit) == 0x000008, "Member 'Warpbox_C_ActionOptionIndex::Hit' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ActionOptionIndex, Param_Index) == 0x000090, "Member 'Warpbox_C_ActionOptionIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ActionOptionIndex, Action) == 0x000094, "Member 'Warpbox_C_ActionOptionIndex::Action' has a wrong offset!");

// Function warpbox.warpbox_C.ExecuteUbergraph_warpbox
// 0x04E8 (0x04E8 - 0x0000)
struct Warpbox_C_ExecuteUbergraph_warpbox final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E08[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player;                               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit;                                  // 0x0010(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         K2Node_Event_index;                                // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_interactionActions                       K2Node_Event_action;                               // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E09[0x3];                                     // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_CustomEvent_NotifyName_3;                   // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate;              // 0x00A8(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   K2Node_CustomEvent_NotifyName_2;                   // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_1;            // 0x00C0(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   K2Node_CustomEvent_NotifyName_1;                   // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_2;            // 0x00D8(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   K2Node_CustomEvent_NotifyName;                     // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_3;            // 0x00F0(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   Temp_name_Variable;                                // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E0A[0x2];                                     // 0x010A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable_1;                              // 0x010C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_2;                              // 0x0114(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x011C(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x011D(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x011E(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_4;                              // 0x011F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class USoundBase*                             Temp_object_Variable;                              // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_1;                            // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECollisionEnabled                             Temp_byte_Variable;                                // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             Temp_byte_Variable_1;                              // 0x0132(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_6;                              // 0x0133(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E0B[0x4];                                     // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Temp_object_Variable_2;                            // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_3;                            // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_7;                              // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECollisionEnabled                             Temp_byte_Variable_2;                              // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             Temp_byte_Variable_3;                              // 0x014A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E0C[0x1];                                     // 0x014B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainGamemode_C*                        K2Node_Event_gamemode;                             // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_Event_key;                                  // 0x0158(0x0018)(HasGetValueTypeHash)
	bool                                          K2Node_Event_pressed;                              // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E0D[0x3];                                     // 0x0171(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Event_color;                                // 0x0174(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E0E[0x4];                                     // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_3;                             // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_2;                                // 0x0190(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          K2Node_Event_kick;                                 // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E0F[0x3];                                     // 0x0219(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_name;                                 // 0x021C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E10[0x4];                                     // 0x0224(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_2;                             // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_1;                             // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_1;                                // 0x0238(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x02C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E11[0x3];                                     // 0x02C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Select_Default;                             // 0x02C4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E12[0x4];                                     // 0x02CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayMontageCallbackProxy*              CallFunc_CreateProxyObjectForPlayMontage_ReturnValue; // 0x02D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_opened;                         // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x02D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x02DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E13[0x5];                                     // 0x02DB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x02E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x02E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x02F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x02F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x02FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E14[0x3];                                     // 0x02FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0300(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AProp_C*                                K2Node_DynamicCast_AsProp;                         // 0x0388(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0390(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0391(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E15[0x2];                                     // 0x0392(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0394(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0398(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E16[0x3];                                     // 0x0399(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_CustomEvent_NotifyName_4;                   // 0x039C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x03A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x03A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E17[0x4];                                     // 0x03AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AWarpbox_C*>                     CallFunc_GetAllActorsOfClass_OutActors;            // 0x03B0(0x0010)(ReferenceParm)
	class AWarpbox_C*                             CallFunc_Array_Get_Item;                           // 0x03C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x03C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x03CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x03CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E18[0x2];                                     // 0x03CE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class APortal_C*                              CallFunc_getPortal_portal_obj;                     // 0x03D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_4;            // 0x03D8(0x0010)(ZeroConstructor, NoDestructor)
	class USoundBase*                             K2Node_Select_Default_1;                           // 0x03E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStruct_settings                       K2Node_Event_settings;                             // 0x03F0(0x00CC)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E19[0x4];                                     // 0x04BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInst_C*                            CallFunc_getMainGameInstance_AsGame_Inst;          // 0x04C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x04C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECollisionEnabled                             K2Node_Select_Default_2;                           // 0x04C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E1A[0x6];                                     // 0x04CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             K2Node_Select_Default_3;                           // 0x04D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode;          // 0x04D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             K2Node_Select_Default_4;                           // 0x04E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Warpbox_C_ExecuteUbergraph_warpbox) == 0x000008, "Wrong alignment on Warpbox_C_ExecuteUbergraph_warpbox");
static_assert(sizeof(Warpbox_C_ExecuteUbergraph_warpbox) == 0x0004E8, "Wrong size on Warpbox_C_ExecuteUbergraph_warpbox");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, EntryPoint) == 0x000000, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::EntryPoint' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, K2Node_Event_player) == 0x000008, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::K2Node_Event_player' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, K2Node_Event_hit) == 0x000010, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::K2Node_Event_hit' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, K2Node_Event_index) == 0x000098, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::K2Node_Event_index' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, K2Node_Event_action) == 0x00009C, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::K2Node_Event_action' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, K2Node_CustomEvent_NotifyName_3) == 0x0000A0, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::K2Node_CustomEvent_NotifyName_3' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, K2Node_CreateDelegate_OutputDelegate) == 0x0000A8, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, K2Node_CustomEvent_NotifyName_2) == 0x0000B8, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::K2Node_CustomEvent_NotifyName_2' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, K2Node_CreateDelegate_OutputDelegate_1) == 0x0000C0, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, K2Node_CustomEvent_NotifyName_1) == 0x0000D0, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::K2Node_CustomEvent_NotifyName_1' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, K2Node_CreateDelegate_OutputDelegate_2) == 0x0000D8, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, K2Node_CustomEvent_NotifyName) == 0x0000E8, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::K2Node_CustomEvent_NotifyName' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, K2Node_CreateDelegate_OutputDelegate_3) == 0x0000F0, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, Temp_name_Variable) == 0x000100, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, Temp_bool_Variable) == 0x000108, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, K2Node_SwitchName_CmpSuccess) == 0x000109, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::K2Node_SwitchName_CmpSuccess' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, Temp_name_Variable_1) == 0x00010C, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::Temp_name_Variable_1' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, Temp_name_Variable_2) == 0x000114, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::Temp_name_Variable_2' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, Temp_bool_Variable_1) == 0x00011C, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, Temp_bool_Variable_2) == 0x00011D, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, Temp_bool_Variable_3) == 0x00011E, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, Temp_bool_Variable_4) == 0x00011F, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, Temp_object_Variable) == 0x000120, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, Temp_object_Variable_1) == 0x000128, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, Temp_bool_Variable_5) == 0x000130, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, Temp_byte_Variable) == 0x000131, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, Temp_byte_Variable_1) == 0x000132, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, Temp_bool_Variable_6) == 0x000133, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, Temp_object_Variable_2) == 0x000138, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, Temp_object_Variable_3) == 0x000140, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, Temp_bool_Variable_7) == 0x000148, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, Temp_byte_Variable_2) == 0x000149, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, Temp_byte_Variable_3) == 0x00014A, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, Temp_int_Array_Index_Variable) == 0x00014C, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, K2Node_Event_gamemode) == 0x000150, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::K2Node_Event_gamemode' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, K2Node_Event_key) == 0x000158, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::K2Node_Event_key' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, K2Node_Event_pressed) == 0x000170, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::K2Node_Event_pressed' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, K2Node_Event_color) == 0x000174, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::K2Node_Event_color' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, K2Node_Event_player_3) == 0x000188, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::K2Node_Event_player_3' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, K2Node_Event_hit_2) == 0x000190, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::K2Node_Event_hit_2' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, K2Node_Event_kick) == 0x000218, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::K2Node_Event_kick' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, K2Node_Event_name) == 0x00021C, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::K2Node_Event_name' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, K2Node_Event_player_2) == 0x000228, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::K2Node_Event_player_2' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, K2Node_Event_player_1) == 0x000230, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::K2Node_Event_player_1' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, K2Node_Event_hit_1) == 0x000238, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::K2Node_Event_hit_1' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, CallFunc_Not_PreBool_ReturnValue) == 0x0002C0, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, K2Node_Select_Default) == 0x0002C4, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, CallFunc_CreateProxyObjectForPlayMontage_ReturnValue) == 0x0002D0, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::CallFunc_CreateProxyObjectForPlayMontage_ReturnValue' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, K2Node_CustomEvent_opened) == 0x0002D8, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::K2Node_CustomEvent_opened' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, CallFunc_IsValid_ReturnValue) == 0x0002D9, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, CallFunc_Array_Contains_ReturnValue) == 0x0002DA, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x0002E0, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, K2Node_ComponentBoundEvent_OtherActor) == 0x0002E8, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, K2Node_ComponentBoundEvent_OtherComp) == 0x0002F0, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x0002F8, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, K2Node_ComponentBoundEvent_bFromSweep) == 0x0002FC, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, K2Node_ComponentBoundEvent_SweepResult) == 0x000300, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, K2Node_DynamicCast_AsProp) == 0x000388, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::K2Node_DynamicCast_AsProp' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, K2Node_DynamicCast_bSuccess) == 0x000390, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000391, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, CallFunc_Array_Find_ReturnValue) == 0x000394, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000398, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, K2Node_CustomEvent_NotifyName_4) == 0x00039C, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::K2Node_CustomEvent_NotifyName_4' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, Temp_int_Loop_Counter_Variable) == 0x0003A4, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, CallFunc_Add_IntInt_ReturnValue) == 0x0003A8, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, CallFunc_GetAllActorsOfClass_OutActors) == 0x0003B0, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, CallFunc_Array_Get_Item) == 0x0003C0, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, CallFunc_Array_Length_ReturnValue) == 0x0003C8, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, CallFunc_Less_IntInt_ReturnValue) == 0x0003CC, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x0003CD, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, CallFunc_getPortal_portal_obj) == 0x0003D0, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::CallFunc_getPortal_portal_obj' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, K2Node_CreateDelegate_OutputDelegate_4) == 0x0003D8, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, K2Node_Select_Default_1) == 0x0003E8, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, K2Node_Event_settings) == 0x0003F0, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::K2Node_Event_settings' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, CallFunc_getMainGameInstance_AsGame_Inst) == 0x0004C0, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::CallFunc_getMainGameInstance_AsGame_Inst' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0004C8, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, K2Node_Select_Default_2) == 0x0004C9, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, K2Node_Select_Default_3) == 0x0004D0, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, CallFunc_getMainGamemode_AsMain_Gamemode) == 0x0004D8, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::CallFunc_getMainGamemode_AsMain_Gamemode' has a wrong offset!");
static_assert(offsetof(Warpbox_C_ExecuteUbergraph_warpbox, K2Node_Select_Default_4) == 0x0004E0, "Member 'Warpbox_C_ExecuteUbergraph_warpbox::K2Node_Select_Default_4' has a wrong offset!");

// Function warpbox.warpbox_C.dreamInv
// 0x0018 (0x0018 - 0x0000)
struct Warpbox_C_DreamInv final
{
public:
	TArray<struct FStruct_save>                   Invv;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class ADreamBase_C*                           Base;                                              // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Warpbox_C_DreamInv) == 0x000008, "Wrong alignment on Warpbox_C_DreamInv");
static_assert(sizeof(Warpbox_C_DreamInv) == 0x000018, "Wrong size on Warpbox_C_DreamInv");
static_assert(offsetof(Warpbox_C_DreamInv, Invv) == 0x000000, "Member 'Warpbox_C_DreamInv::Invv' has a wrong offset!");
static_assert(offsetof(Warpbox_C_DreamInv, Base) == 0x000010, "Member 'Warpbox_C_DreamInv::Base' has a wrong offset!");

// Function warpbox.warpbox_C.canBePutInContainer
// 0x0001 (0x0001 - 0x0000)
struct Warpbox_C_CanBePutInContainer final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Warpbox_C_CanBePutInContainer) == 0x000001, "Wrong alignment on Warpbox_C_CanBePutInContainer");
static_assert(sizeof(Warpbox_C_CanBePutInContainer) == 0x000001, "Wrong size on Warpbox_C_CanBePutInContainer");
static_assert(offsetof(Warpbox_C_CanBePutInContainer, Return) == 0x000000, "Member 'Warpbox_C_CanBePutInContainer::Return' has a wrong offset!");

// Function warpbox.warpbox_C.isButtonUsed
// 0x0001 (0x0001 - 0x0000)
struct Warpbox_C_IsButtonUsed final
{
public:
	bool                                          Failed;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Warpbox_C_IsButtonUsed) == 0x000001, "Wrong alignment on Warpbox_C_IsButtonUsed");
static_assert(sizeof(Warpbox_C_IsButtonUsed) == 0x000001, "Wrong size on Warpbox_C_IsButtonUsed");
static_assert(offsetof(Warpbox_C_IsButtonUsed, Failed) == 0x000000, "Member 'Warpbox_C_IsButtonUsed::Failed' has a wrong offset!");

// Function warpbox.warpbox_C.lookAt
// 0x00D8 (0x00D8 - 0x0000)
struct Warpbox_C_LookAt final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          Return;                                            // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E1B[0x7];                                     // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Text;                                              // 0x0098(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    boundObjectReplace;                                // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_MakeLiteralText_ReturnValue;              // 0x00B0(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Warpbox_C_LookAt) == 0x000008, "Wrong alignment on Warpbox_C_LookAt");
static_assert(sizeof(Warpbox_C_LookAt) == 0x0000D8, "Wrong size on Warpbox_C_LookAt");
static_assert(offsetof(Warpbox_C_LookAt, Player) == 0x000000, "Member 'Warpbox_C_LookAt::Player' has a wrong offset!");
static_assert(offsetof(Warpbox_C_LookAt, Hit) == 0x000008, "Member 'Warpbox_C_LookAt::Hit' has a wrong offset!");
static_assert(offsetof(Warpbox_C_LookAt, Return) == 0x000090, "Member 'Warpbox_C_LookAt::Return' has a wrong offset!");
static_assert(offsetof(Warpbox_C_LookAt, Text) == 0x000098, "Member 'Warpbox_C_LookAt::Text' has a wrong offset!");
static_assert(offsetof(Warpbox_C_LookAt, boundObjectReplace) == 0x0000A8, "Member 'Warpbox_C_LookAt::boundObjectReplace' has a wrong offset!");
static_assert(offsetof(Warpbox_C_LookAt, CallFunc_MakeLiteralText_ReturnValue) == 0x0000B0, "Member 'Warpbox_C_LookAt::CallFunc_MakeLiteralText_ReturnValue' has a wrong offset!");
static_assert(offsetof(Warpbox_C_LookAt, CallFunc_Conv_TextToString_ReturnValue) == 0x0000C8, "Member 'Warpbox_C_LookAt::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");

// Function warpbox.warpbox_C.noRespawn
// 0x0002 (0x0002 - 0x0000)
struct Warpbox_C_NoRespawn final
{
public:
	bool                                          Param_NoRespawn;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Warpbox_C_NoRespawn) == 0x000001, "Wrong alignment on Warpbox_C_NoRespawn");
static_assert(sizeof(Warpbox_C_NoRespawn) == 0x000002, "Wrong size on Warpbox_C_NoRespawn");
static_assert(offsetof(Warpbox_C_NoRespawn, Param_NoRespawn) == 0x000000, "Member 'Warpbox_C_NoRespawn::Param_NoRespawn' has a wrong offset!");
static_assert(offsetof(Warpbox_C_NoRespawn, Return) == 0x000001, "Member 'Warpbox_C_NoRespawn::Return' has a wrong offset!");

// Function warpbox.warpbox_C.canPickup
// 0x0001 (0x0001 - 0x0000)
struct Warpbox_C_CanPickup final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Warpbox_C_CanPickup) == 0x000001, "Wrong alignment on Warpbox_C_CanPickup");
static_assert(sizeof(Warpbox_C_CanPickup) == 0x000001, "Wrong size on Warpbox_C_CanPickup");
static_assert(offsetof(Warpbox_C_CanPickup, Return) == 0x000000, "Member 'Warpbox_C_CanPickup::Return' has a wrong offset!");

// Function warpbox.warpbox_C.asProp
// 0x0008 (0x0008 - 0x0000)
struct Warpbox_C_AsProp final
{
public:
	class AProp_C*                                Return;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Warpbox_C_AsProp) == 0x000008, "Wrong alignment on Warpbox_C_AsProp");
static_assert(sizeof(Warpbox_C_AsProp) == 0x000008, "Wrong size on Warpbox_C_AsProp");
static_assert(offsetof(Warpbox_C_AsProp, Return) == 0x000000, "Member 'Warpbox_C_AsProp::Return' has a wrong offset!");

// Function warpbox.warpbox_C.getActionOptions
// 0x0058 (0x0058 - 0x0000)
struct Warpbox_C_GetActionOptions final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Component;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         Options;                                           // 0x0018(0x0010)(Parm, OutParm)
	TArray<Enum_interactionActions>               Options_enum;                                      // 0x0028(0x0010)(Parm, OutParm)
	TArray<class FText>                           OptionsNamesOverlay;                               // 0x0038(0x0010)(Parm, OutParm)
	TArray<Enum_interactionActions>               K2Node_MakeArray_Array;                            // 0x0048(0x0010)(ReferenceParm)
};
static_assert(alignof(Warpbox_C_GetActionOptions) == 0x000008, "Wrong alignment on Warpbox_C_GetActionOptions");
static_assert(sizeof(Warpbox_C_GetActionOptions) == 0x000058, "Wrong size on Warpbox_C_GetActionOptions");
static_assert(offsetof(Warpbox_C_GetActionOptions, Player) == 0x000000, "Member 'Warpbox_C_GetActionOptions::Player' has a wrong offset!");
static_assert(offsetof(Warpbox_C_GetActionOptions, Component) == 0x000008, "Member 'Warpbox_C_GetActionOptions::Component' has a wrong offset!");
static_assert(offsetof(Warpbox_C_GetActionOptions, Actor) == 0x000010, "Member 'Warpbox_C_GetActionOptions::Actor' has a wrong offset!");
static_assert(offsetof(Warpbox_C_GetActionOptions, Options) == 0x000018, "Member 'Warpbox_C_GetActionOptions::Options' has a wrong offset!");
static_assert(offsetof(Warpbox_C_GetActionOptions, Options_enum) == 0x000028, "Member 'Warpbox_C_GetActionOptions::Options_enum' has a wrong offset!");
static_assert(offsetof(Warpbox_C_GetActionOptions, OptionsNamesOverlay) == 0x000038, "Member 'Warpbox_C_GetActionOptions::OptionsNamesOverlay' has a wrong offset!");
static_assert(offsetof(Warpbox_C_GetActionOptions, K2Node_MakeArray_Array) == 0x000048, "Member 'Warpbox_C_GetActionOptions::K2Node_MakeArray_Array' has a wrong offset!");

// Function warpbox.warpbox_C.form
// 0x0020 (0x0020 - 0x0000)
struct Warpbox_C_Form final
{
public:
	class APortal_phys_C*                         K2Node_DynamicCast_AsPortal_Phys;                  // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E1C[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APortal_C*                              K2Node_DynamicCast_AsPortal;                       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Warpbox_C_Form) == 0x000008, "Wrong alignment on Warpbox_C_Form");
static_assert(sizeof(Warpbox_C_Form) == 0x000020, "Wrong size on Warpbox_C_Form");
static_assert(offsetof(Warpbox_C_Form, K2Node_DynamicCast_AsPortal_Phys) == 0x000000, "Member 'Warpbox_C_Form::K2Node_DynamicCast_AsPortal_Phys' has a wrong offset!");
static_assert(offsetof(Warpbox_C_Form, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'Warpbox_C_Form::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Warpbox_C_Form, K2Node_DynamicCast_AsPortal) == 0x000010, "Member 'Warpbox_C_Form::K2Node_DynamicCast_AsPortal' has a wrong offset!");
static_assert(offsetof(Warpbox_C_Form, K2Node_DynamicCast_bSuccess_1) == 0x000018, "Member 'Warpbox_C_Form::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function warpbox.warpbox_C.getData
// 0x02B0 (0x02B0 - 0x0000)
struct Warpbox_C_GetData final
{
public:
	struct FStruct_save                           Data;                                              // 0x0000(0x00C0)(Parm, OutParm, HasGetValueTypeHash)
	TArray<class FString>                         K2Node_MakeArray_Array;                            // 0x00C0(0x0010)(ReferenceParm)
	struct FStruct_mString                        K2Node_MakeStruct_struct_mString;                  // 0x00D0(0x0010)(HasGetValueTypeHash)
	TArray<bool>                                  K2Node_MakeArray_Array_1;                          // 0x00E0(0x0010)(ReferenceParm)
	TArray<struct FStruct_mString>                K2Node_MakeArray_Array_2;                          // 0x00F0(0x0010)(ReferenceParm)
	struct FStruct_mBool                          K2Node_MakeStruct_struct_mBool;                    // 0x0100(0x0010)(HasGetValueTypeHash)
	struct FStruct_save                           CallFunc_getData_data;                             // 0x0110(0x00C0)(HasGetValueTypeHash)
	struct FStruct_mBool                          K2Node_MakeStruct_struct_mBool_1;                  // 0x01D0(0x0010)(HasGetValueTypeHash)
	TArray<struct FStruct_mBool>                  K2Node_MakeArray_Array_3;                          // 0x01E0(0x0010)(ReferenceParm)
	struct FStruct_save                           K2Node_SetFieldsInStruct_StructOut;                // 0x01F0(0x00C0)(HasGetValueTypeHash)
};
static_assert(alignof(Warpbox_C_GetData) == 0x000010, "Wrong alignment on Warpbox_C_GetData");
static_assert(sizeof(Warpbox_C_GetData) == 0x0002B0, "Wrong size on Warpbox_C_GetData");
static_assert(offsetof(Warpbox_C_GetData, Data) == 0x000000, "Member 'Warpbox_C_GetData::Data' has a wrong offset!");
static_assert(offsetof(Warpbox_C_GetData, K2Node_MakeArray_Array) == 0x0000C0, "Member 'Warpbox_C_GetData::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Warpbox_C_GetData, K2Node_MakeStruct_struct_mString) == 0x0000D0, "Member 'Warpbox_C_GetData::K2Node_MakeStruct_struct_mString' has a wrong offset!");
static_assert(offsetof(Warpbox_C_GetData, K2Node_MakeArray_Array_1) == 0x0000E0, "Member 'Warpbox_C_GetData::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(Warpbox_C_GetData, K2Node_MakeArray_Array_2) == 0x0000F0, "Member 'Warpbox_C_GetData::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(Warpbox_C_GetData, K2Node_MakeStruct_struct_mBool) == 0x000100, "Member 'Warpbox_C_GetData::K2Node_MakeStruct_struct_mBool' has a wrong offset!");
static_assert(offsetof(Warpbox_C_GetData, CallFunc_getData_data) == 0x000110, "Member 'Warpbox_C_GetData::CallFunc_getData_data' has a wrong offset!");
static_assert(offsetof(Warpbox_C_GetData, K2Node_MakeStruct_struct_mBool_1) == 0x0001D0, "Member 'Warpbox_C_GetData::K2Node_MakeStruct_struct_mBool_1' has a wrong offset!");
static_assert(offsetof(Warpbox_C_GetData, K2Node_MakeArray_Array_3) == 0x0001E0, "Member 'Warpbox_C_GetData::K2Node_MakeArray_Array_3' has a wrong offset!");
static_assert(offsetof(Warpbox_C_GetData, K2Node_SetFieldsInStruct_StructOut) == 0x0001F0, "Member 'Warpbox_C_GetData::K2Node_SetFieldsInStruct_StructOut' has a wrong offset!");

}

