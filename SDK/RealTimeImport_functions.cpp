#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RealTimeImport

#include "Basic.hpp"

#include "RealTimeImport_classes.hpp"
#include "RealTimeImport_parameters.hpp"


namespace SDK
{

// Function RealTimeImport.FileFunctionsRealTimeImport.addBytesToFile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// ERTIDirectoryType                       DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           bytes                                                  (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFileFunctionsRealTimeImport::AddBytesToFile(ERTIDirectoryType DirectoryType, const class FString& FilePath, const TArray<uint8>& bytes, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FileFunctionsRealTimeImport", "addBytesToFile");

	Params::FileFunctionsRealTimeImport_AddBytesToFile Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.FilePath = std::move(FilePath);
	Parms.bytes = std::move(bytes);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function RealTimeImport.FileFunctionsRealTimeImport.Base64Decode
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           base64EncodedString                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<uint8> UFileFunctionsRealTimeImport::Base64Decode(const class FString& base64EncodedString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FileFunctionsRealTimeImport", "Base64Decode");

	Params::FileFunctionsRealTimeImport_Base64Decode Parms{};

	Parms.base64EncodedString = std::move(base64EncodedString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RealTimeImport.FileFunctionsRealTimeImport.Base64Encode
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<uint8>                           bytes                                                  (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UFileFunctionsRealTimeImport::Base64Encode(const TArray<uint8>& bytes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FileFunctionsRealTimeImport", "Base64Encode");

	Params::FileFunctionsRealTimeImport_Base64Encode Parms{};

	Parms.bytes = std::move(bytes);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RealTimeImport.FileFunctionsRealTimeImport.base64StringToBytes
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// ERTIDirectoryType                       DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           base64String                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<uint8> UFileFunctionsRealTimeImport::base64StringToBytes(ERTIDirectoryType DirectoryType, const class FString& base64String, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FileFunctionsRealTimeImport", "base64StringToBytes");

	Params::FileFunctionsRealTimeImport_base64StringToBytes Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.base64String = std::move(base64String);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Success != nullptr)
		*Success = Parms.Success;

	return Parms.ReturnValue;
}


// Function RealTimeImport.FileFunctionsRealTimeImport.bytesToBase64String
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<uint8>                           bytes                                                  (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FString                           base64String                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFileFunctionsRealTimeImport::bytesToBase64String(const TArray<uint8>& bytes, class FString* base64String)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FileFunctionsRealTimeImport", "bytesToBase64String");

	Params::FileFunctionsRealTimeImport_bytesToBase64String Parms{};

	Parms.bytes = std::move(bytes);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (base64String != nullptr)
		*base64String = std::move(Parms.base64String);
}


// Function RealTimeImport.FileFunctionsRealTimeImport.CreateDirectory
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ERTIDirectoryType                       DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFileFunctionsRealTimeImport::CreateDirectory(ERTIDirectoryType DirectoryType, const class FString& Path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FileFunctionsRealTimeImport", "CreateDirectory");

	Params::FileFunctionsRealTimeImport_CreateDirectory Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RealTimeImport.FileFunctionsRealTimeImport.DeleteDirectory
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ERTIDirectoryType                       DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFileFunctionsRealTimeImport::DeleteDirectory(ERTIDirectoryType DirectoryType, const class FString& FilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FileFunctionsRealTimeImport", "DeleteDirectory");

	Params::FileFunctionsRealTimeImport_DeleteDirectory Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.FilePath = std::move(FilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RealTimeImport.FileFunctionsRealTimeImport.DeleteFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ERTIDirectoryType                       DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFileFunctionsRealTimeImport::DeleteFile(ERTIDirectoryType DirectoryType, const class FString& FilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FileFunctionsRealTimeImport", "DeleteFile");

	Params::FileFunctionsRealTimeImport_DeleteFile Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.FilePath = std::move(FilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RealTimeImport.FileFunctionsRealTimeImport.directoryExists
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ERTIDirectoryType                       DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFileFunctionsRealTimeImport::DirectoryExists(ERTIDirectoryType DirectoryType, const class FString& Path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FileFunctionsRealTimeImport", "directoryExists");

	Params::FileFunctionsRealTimeImport_DirectoryExists Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RealTimeImport.FileFunctionsRealTimeImport.fileExists
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ERTIDirectoryType                       DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFileFunctionsRealTimeImport::FileExists(ERTIDirectoryType DirectoryType, const class FString& FilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FileFunctionsRealTimeImport", "fileExists");

	Params::FileFunctionsRealTimeImport_FileExists Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.FilePath = std::move(FilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RealTimeImport.FileFunctionsRealTimeImport.fileSize
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ERTIDirectoryType                       DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 UFileFunctionsRealTimeImport::FileSize(ERTIDirectoryType DirectoryType, const class FString& FilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FileFunctionsRealTimeImport", "fileSize");

	Params::FileFunctionsRealTimeImport_FileSize Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.FilePath = std::move(FilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RealTimeImport.FileFunctionsRealTimeImport.fileToBase64String
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// ERTIDirectoryType                       DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           base64String                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Filename                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFileFunctionsRealTimeImport::FileToBase64String(ERTIDirectoryType DirectoryType, const class FString& FilePath, bool* Success, class FString* base64String, class FString* Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FileFunctionsRealTimeImport", "fileToBase64String");

	Params::FileFunctionsRealTimeImport_FileToBase64String Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.FilePath = std::move(FilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Success != nullptr)
		*Success = Parms.Success;

	if (base64String != nullptr)
		*base64String = std::move(Parms.base64String);

	if (Filename != nullptr)
		*Filename = std::move(Parms.Filename);
}


// Function RealTimeImport.FileFunctionsRealTimeImport.getAccessTimeStamp
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// ERTIDirectoryType                       DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDateTime                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FDateTime UFileFunctionsRealTimeImport::GetAccessTimeStamp(ERTIDirectoryType DirectoryType, const class FString& FilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FileFunctionsRealTimeImport", "getAccessTimeStamp");

	Params::FileFunctionsRealTimeImport_GetAccessTimeStamp Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.FilePath = std::move(FilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RealTimeImport.FileFunctionsRealTimeImport.getFileFunctionsRealTimeImport
// (Final, Native, Static, Public)
// Parameters:
// class UFileFunctionsRealTimeImport*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFileFunctionsRealTimeImport* UFileFunctionsRealTimeImport::GetFileFunctionsRealTimeImport()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FileFunctionsRealTimeImport", "getFileFunctionsRealTimeImport");

	Params::FileFunctionsRealTimeImport_GetFileFunctionsRealTimeImport Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RealTimeImport.FileFunctionsRealTimeImport.getFilenameOnDisk
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ERTIDirectoryType                       DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UFileFunctionsRealTimeImport::GetFilenameOnDisk(ERTIDirectoryType DirectoryType, const class FString& FilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FileFunctionsRealTimeImport", "getFilenameOnDisk");

	Params::FileFunctionsRealTimeImport_GetFilenameOnDisk Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.FilePath = std::move(FilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RealTimeImport.FileFunctionsRealTimeImport.getMD5FromFile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// ERTIDirectoryType                       DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Md5                                                    (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFileFunctionsRealTimeImport::GetMD5FromFile(ERTIDirectoryType DirectoryType, const class FString& FilePath, bool* Success, class FString* Md5)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FileFunctionsRealTimeImport", "getMD5FromFile");

	Params::FileFunctionsRealTimeImport_GetMD5FromFile Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.FilePath = std::move(FilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Success != nullptr)
		*Success = Parms.Success;

	if (Md5 != nullptr)
		*Md5 = std::move(Parms.Md5);
}


// Function RealTimeImport.FileFunctionsRealTimeImport.getTimeStamp
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// ERTIDirectoryType                       DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDateTime                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FDateTime UFileFunctionsRealTimeImport::GetTimeStamp(ERTIDirectoryType DirectoryType, const class FString& FilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FileFunctionsRealTimeImport", "getTimeStamp");

	Params::FileFunctionsRealTimeImport_GetTimeStamp Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.FilePath = std::move(FilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RealTimeImport.FileFunctionsRealTimeImport.isReadOnly
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ERTIDirectoryType                       DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFileFunctionsRealTimeImport::IsReadOnly(ERTIDirectoryType DirectoryType, const class FString& FilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FileFunctionsRealTimeImport", "isReadOnly");

	Params::FileFunctionsRealTimeImport_IsReadOnly Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.FilePath = std::move(FilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RealTimeImport.FileFunctionsRealTimeImport.moveFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ERTIDirectoryType                       DirectoryTypeTo                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePathTo                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERTIDirectoryType                       DirectoryTypeFrom                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePathFrom                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFileFunctionsRealTimeImport::MoveFile(ERTIDirectoryType DirectoryTypeTo, const class FString& FilePathTo, ERTIDirectoryType DirectoryTypeFrom, const class FString& FilePathFrom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FileFunctionsRealTimeImport", "moveFile");

	Params::FileFunctionsRealTimeImport_MoveFile Parms{};

	Parms.DirectoryTypeTo = DirectoryTypeTo;
	Parms.FilePathTo = std::move(FilePathTo);
	Parms.DirectoryTypeFrom = DirectoryTypeFrom;
	Parms.FilePathFrom = std::move(FilePathFrom);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RealTimeImport.FileFunctionsRealTimeImport.ReadBytesFromFile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// ERTIDirectoryType                       DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<uint8> UFileFunctionsRealTimeImport::ReadBytesFromFile(ERTIDirectoryType DirectoryType, const class FString& FilePath, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FileFunctionsRealTimeImport", "ReadBytesFromFile");

	Params::FileFunctionsRealTimeImport_ReadBytesFromFile Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.FilePath = std::move(FilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Success != nullptr)
		*Success = Parms.Success;

	return Parms.ReturnValue;
}


// Function RealTimeImport.FileFunctionsRealTimeImport.ReadStringFromFile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// ERTIDirectoryType                       DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Data                                                   (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFileFunctionsRealTimeImport::ReadStringFromFile(ERTIDirectoryType DirectoryType, const class FString& FilePath, bool* Success, class FString* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FileFunctionsRealTimeImport", "ReadStringFromFile");

	Params::FileFunctionsRealTimeImport_ReadStringFromFile Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.FilePath = std::move(FilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Success != nullptr)
		*Success = Parms.Success;

	if (Data != nullptr)
		*Data = std::move(Parms.Data);
}


// Function RealTimeImport.FileFunctionsRealTimeImport.setReadOnly
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ERTIDirectoryType                       DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNewReadOnlyValue                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFileFunctionsRealTimeImport::SetReadOnly(ERTIDirectoryType DirectoryType, const class FString& FilePath, bool bNewReadOnlyValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FileFunctionsRealTimeImport", "setReadOnly");

	Params::FileFunctionsRealTimeImport_SetReadOnly Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.FilePath = std::move(FilePath);
	Parms.bNewReadOnlyValue = bNewReadOnlyValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RealTimeImport.FileFunctionsRealTimeImport.setTimeStamp
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// ERTIDirectoryType                       DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDateTime                        DateTime                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFileFunctionsRealTimeImport::SetTimeStamp(ERTIDirectoryType DirectoryType, const class FString& FilePath, const struct FDateTime& DateTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FileFunctionsRealTimeImport", "setTimeStamp");

	Params::FileFunctionsRealTimeImport_SetTimeStamp Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.FilePath = std::move(FilePath);
	Parms.DateTime = std::move(DateTime);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RealTimeImport.FileFunctionsRealTimeImport.WriteBytesToFile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// ERTIDirectoryType                       DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           bytes                                                  (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFileFunctionsRealTimeImport::WriteBytesToFile(ERTIDirectoryType DirectoryType, const class FString& FilePath, const TArray<uint8>& bytes, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FileFunctionsRealTimeImport", "WriteBytesToFile");

	Params::FileFunctionsRealTimeImport_WriteBytesToFile Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.FilePath = std::move(FilePath);
	Parms.bytes = std::move(bytes);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function RealTimeImport.FileFunctionsRealTimeImport.WriteStringToFile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// ERTIDirectoryType                       DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Data                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFileFunctionsRealTimeImport::WriteStringToFile(ERTIDirectoryType DirectoryType, const class FString& Data, const class FString& FilePath, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FileFunctionsRealTimeImport", "WriteStringToFile");

	Params::FileFunctionsRealTimeImport_WriteStringToFile Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.Data = std::move(Data);
	Parms.FilePath = std::move(FilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function RealTimeImport.RealTimeImportAsyncNodeLoadMesh.LoadMeshFileAsyncNode
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ERTIMeshType                            FileType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERTIDirectoryType                       DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERTICoordinateSystem                    CoordinateSystem                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AutoDetectionNormalMap                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseSRGB                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    CreateMipMaps                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERTIERGBFormat                          RgbFormat                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class URealTimeImportAsyncNodeLoadMesh* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class URealTimeImportAsyncNodeLoadMesh* URealTimeImportAsyncNodeLoadMesh::LoadMeshFileAsyncNode(ERTIMeshType FileType, ERTIDirectoryType DirectoryType, const class FString& FilePath, ERTICoordinateSystem CoordinateSystem, bool AutoDetectionNormalMap, bool UseSRGB, bool CreateMipMaps, ERTIERGBFormat RgbFormat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportAsyncNodeLoadMesh", "LoadMeshFileAsyncNode");

	Params::RealTimeImportAsyncNodeLoadMesh_LoadMeshFileAsyncNode Parms{};

	Parms.FileType = FileType;
	Parms.DirectoryType = DirectoryType;
	Parms.FilePath = std::move(FilePath);
	Parms.CoordinateSystem = CoordinateSystem;
	Parms.AutoDetectionNormalMap = AutoDetectionNormalMap;
	Parms.UseSRGB = UseSRGB;
	Parms.CreateMipMaps = CreateMipMaps;
	Parms.RgbFormat = RgbFormat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction RealTimeImport.RealTimeImportAsyncNodeLoadMesh.LoadMeshCompleteDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams)
// Parameters:
// TArray<struct FRTIModelStruct>          ModelStructs                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportAsyncNodeLoadMesh::LoadMeshCompleteDelegate__DelegateSignature(const TArray<struct FRTIModelStruct>& ModelStructs, const class FString& ErrorMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RealTimeImportAsyncNodeLoadMesh", "LoadMeshCompleteDelegate__DelegateSignature");

	Params::RealTimeImportAsyncNodeLoadMesh_LoadMeshCompleteDelegate__DelegateSignature Parms{};

	Parms.ModelStructs = std::move(ModelStructs);
	Parms.ErrorMessage = std::move(ErrorMessage);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RealTimeImport.RealTimeImportAsyncNodeLoadFile.LoadFileAsyncNode
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ERTIDirectoryType                       DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class URealTimeImportAsyncNodeLoadFile* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class URealTimeImportAsyncNodeLoadFile* URealTimeImportAsyncNodeLoadFile::LoadFileAsyncNode(ERTIDirectoryType DirectoryType, const class FString& FilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportAsyncNodeLoadFile", "LoadFileAsyncNode");

	Params::RealTimeImportAsyncNodeLoadFile_LoadFileAsyncNode Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.FilePath = std::move(FilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction RealTimeImport.RealTimeImportAsyncNodeLoadFile.LoadFileCompleteDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams)
// Parameters:
// class FString                           Filename                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           bytes                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ErrorCode                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportAsyncNodeLoadFile::LoadFileCompleteDelegate__DelegateSignature(const class FString& Filename, const TArray<uint8>& bytes, const int32 ErrorCode, const class FString& ErrorMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RealTimeImportAsyncNodeLoadFile", "LoadFileCompleteDelegate__DelegateSignature");

	Params::RealTimeImportAsyncNodeLoadFile_LoadFileCompleteDelegate__DelegateSignature Parms{};

	Parms.Filename = std::move(Filename);
	Parms.bytes = std::move(bytes);
	Parms.ErrorCode = ErrorCode;
	Parms.ErrorMessage = std::move(ErrorMessage);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RealTimeImport.RealTimeImportAsyncNodeSaveFile.SaveFileAsyncNode
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ERTIDirectoryType                       DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           bytes                                                  (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    CreateDirectories                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OverwriteFile                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class URealTimeImportAsyncNodeSaveFile* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class URealTimeImportAsyncNodeSaveFile* URealTimeImportAsyncNodeSaveFile::SaveFileAsyncNode(ERTIDirectoryType DirectoryType, const class FString& FilePath, const TArray<uint8>& bytes, bool CreateDirectories, bool OverwriteFile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportAsyncNodeSaveFile", "SaveFileAsyncNode");

	Params::RealTimeImportAsyncNodeSaveFile_SaveFileAsyncNode Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.FilePath = std::move(FilePath);
	Parms.bytes = std::move(bytes);
	Parms.CreateDirectories = CreateDirectories;
	Parms.OverwriteFile = OverwriteFile;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction RealTimeImport.RealTimeImportAsyncNodeSaveFile.SaveFileCompleteDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class FString                           Filename                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FullPath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ErrorCode                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportAsyncNodeSaveFile::SaveFileCompleteDelegate__DelegateSignature(const class FString& Filename, const class FString& FullPath, const int32 ErrorCode, const class FString& ErrorMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RealTimeImportAsyncNodeSaveFile", "SaveFileCompleteDelegate__DelegateSignature");

	Params::RealTimeImportAsyncNodeSaveFile_SaveFileCompleteDelegate__DelegateSignature Parms{};

	Parms.Filename = std::move(Filename);
	Parms.FullPath = std::move(FullPath);
	Parms.ErrorCode = ErrorCode;
	Parms.ErrorMessage = std::move(ErrorMessage);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RealTimeImport.RealTimeImportAsyncNodeLoadAllFilesFromDirectory.LoadAllFilesFromDirectoryAsyncNode
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ERTIDirectoryType                       DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERTIFileType                            FileType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           DirPath                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    RecursiveSearch                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class URealTimeImportAsyncNodeLoadAllFilesFromDirectory*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class URealTimeImportAsyncNodeLoadAllFilesFromDirectory* URealTimeImportAsyncNodeLoadAllFilesFromDirectory::LoadAllFilesFromDirectoryAsyncNode(ERTIDirectoryType DirectoryType, ERTIFileType FileType, const class FString& DirPath, bool RecursiveSearch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportAsyncNodeLoadAllFilesFromDirectory", "LoadAllFilesFromDirectoryAsyncNode");

	Params::RealTimeImportAsyncNodeLoadAllFilesFromDirectory_LoadAllFilesFromDirectoryAsyncNode Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.FileType = FileType;
	Parms.DirPath = std::move(DirPath);
	Parms.RecursiveSearch = RecursiveSearch;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction RealTimeImport.RealTimeImportAsyncNodeLoadAllFilesFromDirectory.LoadAllFilesFromDirectoryCompleteDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams)
// Parameters:
// int32                                   Count                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   Files                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class FString>                   FilePaths                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void URealTimeImportAsyncNodeLoadAllFilesFromDirectory::LoadAllFilesFromDirectoryCompleteDelegate__DelegateSignature(const int32& Count, const TArray<class FString>& Files, const TArray<class FString>& FilePaths)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RealTimeImportAsyncNodeLoadAllFilesFromDirectory", "LoadAllFilesFromDirectoryCompleteDelegate__DelegateSignature");

	Params::RealTimeImportAsyncNodeLoadAllFilesFromDirectory_LoadAllFilesFromDirectoryCompleteDelegate__DelegateSignature Parms{};

	Parms.Count = Count;
	Parms.Files = std::move(Files);
	Parms.FilePaths = std::move(FilePaths);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RealTimeImport.RealTimeImportAsyncNodeCreateSoundWaveFromFile.CreateSoundWaveFromFileAsyncNode
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ERTIDirectoryType                       DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxFileSize                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERTISoundFileType                       SoundFileType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class URealTimeImportAsyncNodeCreateSoundWaveFromFile*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class URealTimeImportAsyncNodeCreateSoundWaveFromFile* URealTimeImportAsyncNodeCreateSoundWaveFromFile::CreateSoundWaveFromFileAsyncNode(ERTIDirectoryType DirectoryType, const class FString& FilePath, float MaxFileSize, ERTISoundFileType SoundFileType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportAsyncNodeCreateSoundWaveFromFile", "CreateSoundWaveFromFileAsyncNode");

	Params::RealTimeImportAsyncNodeCreateSoundWaveFromFile_CreateSoundWaveFromFileAsyncNode Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.FilePath = std::move(FilePath);
	Parms.MaxFileSize = MaxFileSize;
	Parms.SoundFileType = SoundFileType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction RealTimeImport.RealTimeImportAsyncNodeCreateSoundWaveFromFile.CreateSoundWaveFromFileCompleteDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class FString                           FileID                                                 (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundWaveProcedural*             SoundWave                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Filename                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ErrorCode                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportAsyncNodeCreateSoundWaveFromFile::CreateSoundWaveFromFileCompleteDelegate__DelegateSignature(const class FString& FileID, const class USoundWaveProcedural* SoundWave, const class FString& Filename, const int32 ErrorCode, const class FString& ErrorMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RealTimeImportAsyncNodeCreateSoundWaveFromFile", "CreateSoundWaveFromFileCompleteDelegate__DelegateSignature");

	Params::RealTimeImportAsyncNodeCreateSoundWaveFromFile_CreateSoundWaveFromFileCompleteDelegate__DelegateSignature Parms{};

	Parms.FileID = std::move(FileID);
	Parms.SoundWave = SoundWave;
	Parms.Filename = std::move(Filename);
	Parms.ErrorCode = ErrorCode;
	Parms.ErrorMessage = std::move(ErrorMessage);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RealTimeImport.RealTimeImportAsyncNodeCreateSoundWaveFromBytes.CreateSoundWaveFromBytesAsyncNode
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Param_Name                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           bytes                                                  (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// float                                   MaxFileSize                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERTISoundFileType                       SoundFileType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class URealTimeImportAsyncNodeCreateSoundWaveFromBytes*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class URealTimeImportAsyncNodeCreateSoundWaveFromBytes* URealTimeImportAsyncNodeCreateSoundWaveFromBytes::CreateSoundWaveFromBytesAsyncNode(const class FString& Param_Name, const TArray<uint8>& bytes, float MaxFileSize, ERTISoundFileType SoundFileType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportAsyncNodeCreateSoundWaveFromBytes", "CreateSoundWaveFromBytesAsyncNode");

	Params::RealTimeImportAsyncNodeCreateSoundWaveFromBytes_CreateSoundWaveFromBytesAsyncNode Parms{};

	Parms.Param_Name = std::move(Param_Name);
	Parms.bytes = std::move(bytes);
	Parms.MaxFileSize = MaxFileSize;
	Parms.SoundFileType = SoundFileType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction RealTimeImport.RealTimeImportAsyncNodeCreateSoundWaveFromBytes.CreateSoundWaveFromBytesCompleteDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class USoundWaveProcedural*             SoundWave                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ErrorCode                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportAsyncNodeCreateSoundWaveFromBytes::CreateSoundWaveFromBytesCompleteDelegate__DelegateSignature(const class USoundWaveProcedural* SoundWave, const int32 ErrorCode, const class FString& ErrorMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RealTimeImportAsyncNodeCreateSoundWaveFromBytes", "CreateSoundWaveFromBytesCompleteDelegate__DelegateSignature");

	Params::RealTimeImportAsyncNodeCreateSoundWaveFromBytes_CreateSoundWaveFromBytesCompleteDelegate__DelegateSignature Parms{};

	Parms.SoundWave = SoundWave;
	Parms.ErrorCode = ErrorCode;
	Parms.ErrorMessage = std::move(ErrorMessage);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RealTimeImport.RealTimeImportAsyncNodeLoadImageFile.LoadImageFileAsyncNode
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ERTIDirectoryType                       DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETextureCompressionSettings             CompressionSettings                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    SRGB                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    CreateMipMaps                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERTIERGBFormat                          RgbFormat                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class URealTimeImportAsyncNodeLoadImageFile*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class URealTimeImportAsyncNodeLoadImageFile* URealTimeImportAsyncNodeLoadImageFile::LoadImageFileAsyncNode(ERTIDirectoryType DirectoryType, const class FString& FilePath, ETextureCompressionSettings CompressionSettings, bool SRGB, bool CreateMipMaps, ERTIERGBFormat RgbFormat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportAsyncNodeLoadImageFile", "LoadImageFileAsyncNode");

	Params::RealTimeImportAsyncNodeLoadImageFile_LoadImageFileAsyncNode Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.FilePath = std::move(FilePath);
	Parms.CompressionSettings = CompressionSettings;
	Parms.SRGB = SRGB;
	Parms.CreateMipMaps = CreateMipMaps;
	Parms.RgbFormat = RgbFormat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction RealTimeImport.RealTimeImportAsyncNodeLoadImageFile.LoadImageFromFileCompleteDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class UTexture2D*                       Texture                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Filename                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ErrorCode                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportAsyncNodeLoadImageFile::LoadImageFromFileCompleteDelegate__DelegateSignature(const class UTexture2D* Texture, const class FString& Filename, const int32 ErrorCode, const class FString& ErrorMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RealTimeImportAsyncNodeLoadImageFile", "LoadImageFromFileCompleteDelegate__DelegateSignature");

	Params::RealTimeImportAsyncNodeLoadImageFile_LoadImageFromFileCompleteDelegate__DelegateSignature Parms{};

	Parms.Texture = Texture;
	Parms.Filename = std::move(Filename);
	Parms.ErrorCode = ErrorCode;
	Parms.ErrorMessage = std::move(ErrorMessage);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RealTimeImport.RealTimeImportAsyncNodeLoadImageBytes.LoadImageBytesAsyncNode
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Param_Name                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           bytes                                                  (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// ETextureCompressionSettings             CompressionSettings                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    SRGB                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    CreateMipMaps                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERTIERGBFormat                          RgbFormat                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class URealTimeImportAsyncNodeLoadImageBytes*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class URealTimeImportAsyncNodeLoadImageBytes* URealTimeImportAsyncNodeLoadImageBytes::LoadImageBytesAsyncNode(const class FString& Param_Name, const TArray<uint8>& bytes, ETextureCompressionSettings CompressionSettings, bool SRGB, bool CreateMipMaps, ERTIERGBFormat RgbFormat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportAsyncNodeLoadImageBytes", "LoadImageBytesAsyncNode");

	Params::RealTimeImportAsyncNodeLoadImageBytes_LoadImageBytesAsyncNode Parms{};

	Parms.Param_Name = std::move(Param_Name);
	Parms.bytes = std::move(bytes);
	Parms.CompressionSettings = CompressionSettings;
	Parms.SRGB = SRGB;
	Parms.CreateMipMaps = CreateMipMaps;
	Parms.RgbFormat = RgbFormat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction RealTimeImport.RealTimeImportAsyncNodeLoadImageBytes.LoadImageFromBytesCompleteDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class UTexture2D*                       Texture                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ErrorCode                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportAsyncNodeLoadImageBytes::LoadImageFromBytesCompleteDelegate__DelegateSignature(const class UTexture2D* Texture, const int32 ErrorCode, const class FString& ErrorMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RealTimeImportAsyncNodeLoadImageBytes", "LoadImageFromBytesCompleteDelegate__DelegateSignature");

	Params::RealTimeImportAsyncNodeLoadImageBytes_LoadImageFromBytesCompleteDelegate__DelegateSignature Parms{};

	Parms.Texture = Texture;
	Parms.ErrorCode = ErrorCode;
	Parms.ErrorMessage = std::move(ErrorMessage);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RealTimeImport.RealTimeImportBPLibrary.breakMaterialStruct
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRTIMaterialStruct               MaterialData                                           (Parm, NativeAccessSpecifierPublic)
// bool                                    HasTexture                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           MaterialName                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           TextureName                                            (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FRTITextureStruct>        Textures                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FColor                           Ambient                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           Diffuse                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           Specular                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SpecularExponent                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Dissolved                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DissolvedInverted                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportBPLibrary::breakMaterialStruct(const struct FRTIMaterialStruct& MaterialData, bool* HasTexture, class FString* MaterialName, class FString* TextureName, TArray<struct FRTITextureStruct>* Textures, struct FColor* Ambient, struct FColor* Diffuse, struct FColor* Specular, float* SpecularExponent, float* Dissolved, float* DissolvedInverted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportBPLibrary", "breakMaterialStruct");

	Params::RealTimeImportBPLibrary_breakMaterialStruct Parms{};

	Parms.MaterialData = std::move(MaterialData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (HasTexture != nullptr)
		*HasTexture = Parms.HasTexture;

	if (MaterialName != nullptr)
		*MaterialName = std::move(Parms.MaterialName);

	if (TextureName != nullptr)
		*TextureName = std::move(Parms.TextureName);

	if (Textures != nullptr)
		*Textures = std::move(Parms.Textures);

	if (Ambient != nullptr)
		*Ambient = std::move(Parms.Ambient);

	if (Diffuse != nullptr)
		*Diffuse = std::move(Parms.Diffuse);

	if (Specular != nullptr)
		*Specular = std::move(Parms.Specular);

	if (SpecularExponent != nullptr)
		*SpecularExponent = Parms.SpecularExponent;

	if (Dissolved != nullptr)
		*Dissolved = Parms.Dissolved;

	if (DissolvedInverted != nullptr)
		*DissolvedInverted = Parms.DissolvedInverted;
}


// Function RealTimeImport.RealTimeImportBPLibrary.breakMeshStruct
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FRTIMeshStruct                   MeshStruct                                             (Parm, NativeAccessSpecifierPublic)
// class FString                           GeometryName                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVector>                  Vertices                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<int32>                           Triangles                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FVector>                  Normals                                                (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FVector2D>                UV0                                                    (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FLinearColor>             VertexColors                                           (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FRTIMaterialStruct               MaterialStruct                                         (Parm, OutParm, NativeAccessSpecifierPublic)

void URealTimeImportBPLibrary::breakMeshStruct(const struct FRTIMeshStruct& MeshStruct, class FString* GeometryName, TArray<struct FVector>* Vertices, TArray<int32>* Triangles, TArray<struct FVector>* Normals, TArray<struct FVector2D>* UV0, TArray<struct FLinearColor>* VertexColors, struct FRTIMaterialStruct* MaterialStruct)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportBPLibrary", "breakMeshStruct");

	Params::RealTimeImportBPLibrary_breakMeshStruct Parms{};

	Parms.MeshStruct = std::move(MeshStruct);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (GeometryName != nullptr)
		*GeometryName = std::move(Parms.GeometryName);

	if (Vertices != nullptr)
		*Vertices = std::move(Parms.Vertices);

	if (Triangles != nullptr)
		*Triangles = std::move(Parms.Triangles);

	if (Normals != nullptr)
		*Normals = std::move(Parms.Normals);

	if (UV0 != nullptr)
		*UV0 = std::move(Parms.UV0);

	if (VertexColors != nullptr)
		*VertexColors = std::move(Parms.VertexColors);

	if (MaterialStruct != nullptr)
		*MaterialStruct = std::move(Parms.MaterialStruct);
}


// Function RealTimeImport.RealTimeImportBPLibrary.breakModelStruct
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRTIModelStruct                  ModelStruct                                            (Parm, NativeAccessSpecifierPublic)
// class FString                           Param_Name                                             (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       RelativeTransform                                      (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// TArray<struct FRTIMeshStruct>           MeshStructs                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void URealTimeImportBPLibrary::breakModelStruct(const struct FRTIModelStruct& ModelStruct, class FString* Param_Name, struct FTransform* RelativeTransform, TArray<struct FRTIMeshStruct>* MeshStructs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportBPLibrary", "breakModelStruct");

	Params::RealTimeImportBPLibrary_breakModelStruct Parms{};

	Parms.ModelStruct = std::move(ModelStruct);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Param_Name != nullptr)
		*Param_Name = std::move(Parms.Param_Name);

	if (RelativeTransform != nullptr)
		*RelativeTransform = std::move(Parms.RelativeTransform);

	if (MeshStructs != nullptr)
		*MeshStructs = std::move(Parms.MeshStructs);
}


// Function RealTimeImport.RealTimeImportBPLibrary.breakTextureStruct
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FRTITextureStruct                TextureData                                            (Parm, NativeAccessSpecifierPublic)
// class FString                           TextureName                                            (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       Texture                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERTITextureType                         TextureType                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportBPLibrary::breakTextureStruct(const struct FRTITextureStruct& TextureData, class FString* TextureName, class UTexture2D** Texture, ERTITextureType* TextureType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportBPLibrary", "breakTextureStruct");

	Params::RealTimeImportBPLibrary_breakTextureStruct Parms{};

	Parms.TextureData = std::move(TextureData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (TextureName != nullptr)
		*TextureName = std::move(Parms.TextureName);

	if (Texture != nullptr)
		*Texture = Parms.Texture;

	if (TextureType != nullptr)
		*TextureType = Parms.TextureType;
}


// Function RealTimeImport.RealTimeImportBPLibrary.changeTexturDestroyThreadSettings
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   ThreadSleepTimeInSeconds                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ShowLogs                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportBPLibrary::ChangeTexturDestroyThreadSettings(float ThreadSleepTimeInSeconds, bool ShowLogs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportBPLibrary", "changeTexturDestroyThreadSettings");

	Params::RealTimeImportBPLibrary_ChangeTexturDestroyThreadSettings Parms{};

	Parms.ThreadSleepTimeInSeconds = ThreadSleepTimeInSeconds;
	Parms.ShowLogs = ShowLogs;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RealTimeImport.RealTimeImportBPLibrary.changeVolumeSound
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           FileID                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VolumeMultiplier                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportBPLibrary::ChangeVolumeSound(const class FString& FileID, float VolumeMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportBPLibrary", "changeVolumeSound");

	Params::RealTimeImportBPLibrary_ChangeVolumeSound Parms{};

	Parms.FileID = std::move(FileID);
	Parms.VolumeMultiplier = VolumeMultiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RealTimeImport.RealTimeImportBPLibrary.CreateSoundWaveFromBytes
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           Param_Name                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           bytes                                                  (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// float                                   MaxFileSize                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERTISoundFileType                       SoundFileType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundWaveProcedural*             Sound                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ErrorCode                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportBPLibrary::CreateSoundWaveFromBytes(const class FString& Param_Name, const TArray<uint8>& bytes, float MaxFileSize, ERTISoundFileType SoundFileType, class USoundWaveProcedural** Sound, int32* ErrorCode, class FString* ErrorMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportBPLibrary", "CreateSoundWaveFromBytes");

	Params::RealTimeImportBPLibrary_CreateSoundWaveFromBytes Parms{};

	Parms.Param_Name = std::move(Param_Name);
	Parms.bytes = std::move(bytes);
	Parms.MaxFileSize = MaxFileSize;
	Parms.SoundFileType = SoundFileType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Sound != nullptr)
		*Sound = Parms.Sound;

	if (ErrorCode != nullptr)
		*ErrorCode = Parms.ErrorCode;

	if (ErrorMessage != nullptr)
		*ErrorMessage = std::move(Parms.ErrorMessage);
}


// Function RealTimeImport.RealTimeImportBPLibrary.CreateSoundWaveFromBytesAsync
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Param_Name                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           bytes                                                  (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// float                                   MaxFileSize                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERTISoundFileType                       SoundFileType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           EventID                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class URealTimeImportBPLibrary*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class URealTimeImportBPLibrary* URealTimeImportBPLibrary::CreateSoundWaveFromBytesAsync(const class FString& Param_Name, const TArray<uint8>& bytes, float MaxFileSize, ERTISoundFileType SoundFileType, const class FString& EventID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportBPLibrary", "CreateSoundWaveFromBytesAsync");

	Params::RealTimeImportBPLibrary_CreateSoundWaveFromBytesAsync Parms{};

	Parms.Param_Name = std::move(Param_Name);
	Parms.bytes = std::move(bytes);
	Parms.MaxFileSize = MaxFileSize;
	Parms.SoundFileType = SoundFileType;
	Parms.EventID = std::move(EventID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RealTimeImport.RealTimeImportBPLibrary.CreateSoundWaveFromFile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// ERTIDirectoryType                       DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxFileSize                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FileID                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERTISoundFileType                       SoundFileType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundWaveProcedural*             SoundWave                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Filename                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ErrorCode                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportBPLibrary::CreateSoundWaveFromFile(ERTIDirectoryType DirectoryType, const class FString& FilePath, float MaxFileSize, class FString* FileID, ERTISoundFileType SoundFileType, class USoundWaveProcedural** SoundWave, class FString* Filename, int32* ErrorCode, class FString* ErrorMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportBPLibrary", "CreateSoundWaveFromFile");

	Params::RealTimeImportBPLibrary_CreateSoundWaveFromFile Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.FilePath = std::move(FilePath);
	Parms.MaxFileSize = MaxFileSize;
	Parms.SoundFileType = SoundFileType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (FileID != nullptr)
		*FileID = std::move(Parms.FileID);

	if (SoundWave != nullptr)
		*SoundWave = Parms.SoundWave;

	if (Filename != nullptr)
		*Filename = std::move(Parms.Filename);

	if (ErrorCode != nullptr)
		*ErrorCode = Parms.ErrorCode;

	if (ErrorMessage != nullptr)
		*ErrorMessage = std::move(Parms.ErrorMessage);
}


// Function RealTimeImport.RealTimeImportBPLibrary.CreateSoundWaveFromFileAsync
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ERTIDirectoryType                       DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxFileSize                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERTISoundFileType                       SoundFileType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           EventID                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class URealTimeImportBPLibrary*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class URealTimeImportBPLibrary* URealTimeImportBPLibrary::CreateSoundWaveFromFileAsync(ERTIDirectoryType DirectoryType, const class FString& FilePath, float MaxFileSize, ERTISoundFileType SoundFileType, const class FString& EventID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportBPLibrary", "CreateSoundWaveFromFileAsync");

	Params::RealTimeImportBPLibrary_CreateSoundWaveFromFileAsync Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.FilePath = std::move(FilePath);
	Parms.MaxFileSize = MaxFileSize;
	Parms.SoundFileType = SoundFileType;
	Parms.EventID = std::move(EventID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RealTimeImport.RealTimeImportBPLibrary.emptySoundCache
// (Final, Native, Static, Public, BlueprintCallable)

void URealTimeImportBPLibrary::EmptySoundCache()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportBPLibrary", "emptySoundCache");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RealTimeImport.RealTimeImportBPLibrary.emptyTextureCacheAndDestroyTextures
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    EmptyTexturesBeforeDeleting                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportBPLibrary::EmptyTextureCacheAndDestroyTextures(bool EmptyTexturesBeforeDeleting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportBPLibrary", "emptyTextureCacheAndDestroyTextures");

	Params::RealTimeImportBPLibrary_EmptyTextureCacheAndDestroyTextures Parms{};

	Parms.EmptyTexturesBeforeDeleting = EmptyTexturesBeforeDeleting;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RealTimeImport.RealTimeImportBPLibrary.getRealTimeImportTarget
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class URealTimeImportBPLibrary*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class URealTimeImportBPLibrary* URealTimeImportBPLibrary::GetRealTimeImportTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportBPLibrary", "getRealTimeImportTarget");

	Params::RealTimeImportBPLibrary_GetRealTimeImportTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RealTimeImport.RealTimeImportBPLibrary.getSoundInfo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// ERTIDirectoryType                       DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Param_Name                                             (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FileNameExtension                                      (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   FileSize                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   NumChannels                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Quality                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   SampleDataSize                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   SampleRate                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportBPLibrary::GetSoundInfo(ERTIDirectoryType DirectoryType, const class FString& FilePath, class FString* Param_Name, class FString* FileNameExtension, int64* FileSize, float* Duration, int64* NumChannels, int32* Quality, int64* SampleDataSize, int64* SampleRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportBPLibrary", "getSoundInfo");

	Params::RealTimeImportBPLibrary_GetSoundInfo Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.FilePath = std::move(FilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Param_Name != nullptr)
		*Param_Name = std::move(Parms.Param_Name);

	if (FileNameExtension != nullptr)
		*FileNameExtension = std::move(Parms.FileNameExtension);

	if (FileSize != nullptr)
		*FileSize = Parms.FileSize;

	if (Duration != nullptr)
		*Duration = Parms.Duration;

	if (NumChannels != nullptr)
		*NumChannels = Parms.NumChannels;

	if (Quality != nullptr)
		*Quality = Parms.Quality;

	if (SampleDataSize != nullptr)
		*SampleDataSize = Parms.SampleDataSize;

	if (SampleRate != nullptr)
		*SampleRate = Parms.SampleRate;
}


// Function RealTimeImport.RealTimeImportBPLibrary.isSoundActive
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           FileID                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URealTimeImportBPLibrary::IsSoundActive(const class FString& FileID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportBPLibrary", "isSoundActive");

	Params::RealTimeImportBPLibrary_IsSoundActive Parms{};

	Parms.FileID = std::move(FileID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RealTimeImport.RealTimeImportBPLibrary.LoadAllFilesFromDirectory
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// ERTIDirectoryType                       DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERTIFileType                            FileType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           DirPath                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    RecursiveSearch                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Count                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   Files                                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class FString>                   FilePaths                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URealTimeImportBPLibrary::LoadAllFilesFromDirectory(ERTIDirectoryType DirectoryType, ERTIFileType FileType, const class FString& DirPath, bool RecursiveSearch, int32* Count, TArray<class FString>* Files, TArray<class FString>* FilePaths)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportBPLibrary", "LoadAllFilesFromDirectory");

	Params::RealTimeImportBPLibrary_LoadAllFilesFromDirectory Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.FileType = FileType;
	Parms.DirPath = std::move(DirPath);
	Parms.RecursiveSearch = RecursiveSearch;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Count != nullptr)
		*Count = Parms.Count;

	if (Files != nullptr)
		*Files = std::move(Parms.Files);

	if (FilePaths != nullptr)
		*FilePaths = std::move(Parms.FilePaths);

	return Parms.ReturnValue;
}


// Function RealTimeImport.RealTimeImportBPLibrary.loadAndPlaySoundBytesAsync
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           bytes                                                  (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// float                                   VolumeMultiplier                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlaySpeed                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   StartTimeInSeconds                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    PersistAcrossLevelTransition                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportBPLibrary::LoadAndPlaySoundBytesAsync(const class UObject* WorldContextObject, const TArray<uint8>& bytes, float VolumeMultiplier, float PlaySpeed, int32 StartTimeInSeconds, bool PersistAcrossLevelTransition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportBPLibrary", "loadAndPlaySoundBytesAsync");

	Params::RealTimeImportBPLibrary_LoadAndPlaySoundBytesAsync Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.bytes = std::move(bytes);
	Parms.VolumeMultiplier = VolumeMultiplier;
	Parms.PlaySpeed = PlaySpeed;
	Parms.StartTimeInSeconds = StartTimeInSeconds;
	Parms.PersistAcrossLevelTransition = PersistAcrossLevelTransition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RealTimeImport.RealTimeImportBPLibrary.loadAndPlaySoundFileAsync
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERTIDirectoryType                       DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxFileSize                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VolumeMultiplier                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlaySpeed                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   StartTimeInSeconds                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    PersistAcrossLevelTransition                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERTISoundFileType                       SoundFileType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportBPLibrary::LoadAndPlaySoundFileAsync(const class UObject* WorldContextObject, ERTIDirectoryType DirectoryType, const class FString& FilePath, float MaxFileSize, float VolumeMultiplier, float PlaySpeed, int32 StartTimeInSeconds, bool PersistAcrossLevelTransition, ERTISoundFileType SoundFileType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportBPLibrary", "loadAndPlaySoundFileAsync");

	Params::RealTimeImportBPLibrary_LoadAndPlaySoundFileAsync Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.DirectoryType = DirectoryType;
	Parms.FilePath = std::move(FilePath);
	Parms.MaxFileSize = MaxFileSize;
	Parms.VolumeMultiplier = VolumeMultiplier;
	Parms.PlaySpeed = PlaySpeed;
	Parms.StartTimeInSeconds = StartTimeInSeconds;
	Parms.PersistAcrossLevelTransition = PersistAcrossLevelTransition;
	Parms.SoundFileType = SoundFileType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RealTimeImport.RealTimeImportBPLibrary.LoadFile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// ERTIDirectoryType                       DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Filename                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           bytes                                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32                                   ErrorCode                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportBPLibrary::LoadFile(ERTIDirectoryType DirectoryType, const class FString& FilePath, class FString* Filename, TArray<uint8>* bytes, int32* ErrorCode, class FString* ErrorMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportBPLibrary", "LoadFile");

	Params::RealTimeImportBPLibrary_LoadFile Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.FilePath = std::move(FilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Filename != nullptr)
		*Filename = std::move(Parms.Filename);

	if (bytes != nullptr)
		*bytes = std::move(Parms.bytes);

	if (ErrorCode != nullptr)
		*ErrorCode = Parms.ErrorCode;

	if (ErrorMessage != nullptr)
		*ErrorMessage = std::move(Parms.ErrorMessage);
}


// Function RealTimeImport.RealTimeImportBPLibrary.LoadImageBytes
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           Param_Name                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           bytes                                                  (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class UTexture2D*                       Texture                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ErrorCode                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETextureCompressionSettings             CompressionSettings                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    SRGB                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    CreateMipMaps                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERTIERGBFormat                          RgbFormat                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportBPLibrary::LoadImageBytes(const class FString& Param_Name, const TArray<uint8>& bytes, class UTexture2D** Texture, int32* ErrorCode, class FString* ErrorMessage, ETextureCompressionSettings CompressionSettings, bool SRGB, bool CreateMipMaps, ERTIERGBFormat RgbFormat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportBPLibrary", "LoadImageBytes");

	Params::RealTimeImportBPLibrary_LoadImageBytes Parms{};

	Parms.Param_Name = std::move(Param_Name);
	Parms.bytes = std::move(bytes);
	Parms.CompressionSettings = CompressionSettings;
	Parms.SRGB = SRGB;
	Parms.CreateMipMaps = CreateMipMaps;
	Parms.RgbFormat = RgbFormat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Texture != nullptr)
		*Texture = Parms.Texture;

	if (ErrorCode != nullptr)
		*ErrorCode = Parms.ErrorCode;

	if (ErrorMessage != nullptr)
		*ErrorMessage = std::move(Parms.ErrorMessage);
}


// Function RealTimeImport.RealTimeImportBPLibrary.LoadImageBytesAsync
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Param_Name                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           bytes                                                  (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FString                           EventID                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETextureCompressionSettings             CompressionSettings                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    SRGB                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    CreateMipMaps                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERTIERGBFormat                          RgbFormat                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class URealTimeImportBPLibrary*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class URealTimeImportBPLibrary* URealTimeImportBPLibrary::LoadImageBytesAsync(const class FString& Param_Name, const TArray<uint8>& bytes, const class FString& EventID, ETextureCompressionSettings CompressionSettings, bool SRGB, bool CreateMipMaps, ERTIERGBFormat RgbFormat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportBPLibrary", "LoadImageBytesAsync");

	Params::RealTimeImportBPLibrary_LoadImageBytesAsync Parms{};

	Parms.Param_Name = std::move(Param_Name);
	Parms.bytes = std::move(bytes);
	Parms.EventID = std::move(EventID);
	Parms.CompressionSettings = CompressionSettings;
	Parms.SRGB = SRGB;
	Parms.CreateMipMaps = CreateMipMaps;
	Parms.RgbFormat = RgbFormat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RealTimeImport.RealTimeImportBPLibrary.LoadImageFile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// ERTIDirectoryType                       DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       Texture                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Filename                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ErrorCode                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETextureCompressionSettings             CompressionSettings                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    SRGB                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    CreateMipMaps                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERTIERGBFormat                          RgbFormat                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportBPLibrary::LoadImageFile(ERTIDirectoryType DirectoryType, const class FString& FilePath, class UTexture2D** Texture, class FString* Filename, int32* ErrorCode, class FString* ErrorMessage, ETextureCompressionSettings CompressionSettings, bool SRGB, bool CreateMipMaps, ERTIERGBFormat RgbFormat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportBPLibrary", "LoadImageFile");

	Params::RealTimeImportBPLibrary_LoadImageFile Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.FilePath = std::move(FilePath);
	Parms.CompressionSettings = CompressionSettings;
	Parms.SRGB = SRGB;
	Parms.CreateMipMaps = CreateMipMaps;
	Parms.RgbFormat = RgbFormat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Texture != nullptr)
		*Texture = Parms.Texture;

	if (Filename != nullptr)
		*Filename = std::move(Parms.Filename);

	if (ErrorCode != nullptr)
		*ErrorCode = Parms.ErrorCode;

	if (ErrorMessage != nullptr)
		*ErrorMessage = std::move(Parms.ErrorMessage);
}


// Function RealTimeImport.RealTimeImportBPLibrary.LoadImageFileAsync
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ERTIDirectoryType                       DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           EventID                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETextureCompressionSettings             CompressionSettings                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    SRGB                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    CreateMipMaps                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERTIERGBFormat                          RgbFormat                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class URealTimeImportBPLibrary*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class URealTimeImportBPLibrary* URealTimeImportBPLibrary::LoadImageFileAsync(ERTIDirectoryType DirectoryType, const class FString& FilePath, const class FString& EventID, ETextureCompressionSettings CompressionSettings, bool SRGB, bool CreateMipMaps, ERTIERGBFormat RgbFormat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportBPLibrary", "LoadImageFileAsync");

	Params::RealTimeImportBPLibrary_LoadImageFileAsync Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.FilePath = std::move(FilePath);
	Parms.EventID = std::move(EventID);
	Parms.CompressionSettings = CompressionSettings;
	Parms.SRGB = SRGB;
	Parms.CreateMipMaps = CreateMipMaps;
	Parms.RgbFormat = RgbFormat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RealTimeImport.RealTimeImportBPLibrary.LoadMeshFile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// ERTIMeshType                            FileType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERTIDirectoryType                       DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SuccessMessage                                         (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FRTIModelStruct>          ModelStructs                                           (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// ERTICoordinateSystem                    CoordinateSystem                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AutoDetectionNormalMap                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseSRGB                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    CreateMipMaps                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERTIERGBFormat                          RgbFormat                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportBPLibrary::LoadMeshFile(ERTIMeshType FileType, ERTIDirectoryType DirectoryType, const class FString& FilePath, bool* Success, class FString* SuccessMessage, TArray<struct FRTIModelStruct>* ModelStructs, ERTICoordinateSystem CoordinateSystem, bool AutoDetectionNormalMap, bool UseSRGB, bool CreateMipMaps, ERTIERGBFormat RgbFormat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportBPLibrary", "LoadMeshFile");

	Params::RealTimeImportBPLibrary_LoadMeshFile Parms{};

	Parms.FileType = FileType;
	Parms.DirectoryType = DirectoryType;
	Parms.FilePath = std::move(FilePath);
	Parms.CoordinateSystem = CoordinateSystem;
	Parms.AutoDetectionNormalMap = AutoDetectionNormalMap;
	Parms.UseSRGB = UseSRGB;
	Parms.CreateMipMaps = CreateMipMaps;
	Parms.RgbFormat = RgbFormat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Success != nullptr)
		*Success = Parms.Success;

	if (SuccessMessage != nullptr)
		*SuccessMessage = std::move(Parms.SuccessMessage);

	if (ModelStructs != nullptr)
		*ModelStructs = std::move(Parms.ModelStructs);
}


// Function RealTimeImport.RealTimeImportBPLibrary.Multiply_VectorArrayFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FVector>                  A                                                      (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// float                                   B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVector>                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FVector> URealTimeImportBPLibrary::Multiply_VectorArrayFloat(const TArray<struct FVector>& A, float B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportBPLibrary", "Multiply_VectorArrayFloat");

	Params::RealTimeImportBPLibrary_Multiply_VectorArrayFloat Parms{};

	Parms.A = std::move(A);
	Parms.B = B;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RealTimeImport.RealTimeImportBPLibrary.pauseSound
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           FileID                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportBPLibrary::PauseSound(const class FString& FileID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportBPLibrary", "pauseSound");

	Params::RealTimeImportBPLibrary_PauseSound Parms{};

	Parms.FileID = std::move(FileID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RealTimeImport.RealTimeImportBPLibrary.removeSoundFromCache
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           FileID                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportBPLibrary::RemoveSoundFromCache(const class FString& FileID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportBPLibrary", "removeSoundFromCache");

	Params::RealTimeImportBPLibrary_RemoveSoundFromCache Parms{};

	Parms.FileID = std::move(FileID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RealTimeImport.RealTimeImportBPLibrary.removeTextureFromCacheAndDestroyTexture
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UTexture*                         Texture                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    EmptyTextureBeforeDeleting                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportBPLibrary::RemoveTextureFromCacheAndDestroyTexture(class UTexture* Texture, bool EmptyTextureBeforeDeleting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportBPLibrary", "removeTextureFromCacheAndDestroyTexture");

	Params::RealTimeImportBPLibrary_RemoveTextureFromCacheAndDestroyTexture Parms{};

	Parms.Texture = Texture;
	Parms.EmptyTextureBeforeDeleting = EmptyTextureBeforeDeleting;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RealTimeImport.RealTimeImportBPLibrary.resumeSound
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           FileID                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportBPLibrary::ResumeSound(const class FString& FileID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportBPLibrary", "resumeSound");

	Params::RealTimeImportBPLibrary_ResumeSound Parms{};

	Parms.FileID = std::move(FileID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RealTimeImport.RealTimeImportBPLibrary.SaveFile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// ERTIDirectoryType                       DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    CreateDirectories                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OverwriteFile                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           bytes                                                  (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FString                           Filename                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FullPath                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ErrorCode                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportBPLibrary::SaveFile(ERTIDirectoryType DirectoryType, const class FString& FilePath, bool CreateDirectories, bool OverwriteFile, const TArray<uint8>& bytes, class FString* Filename, class FString* FullPath, int32* ErrorCode, class FString* ErrorMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportBPLibrary", "SaveFile");

	Params::RealTimeImportBPLibrary_SaveFile Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.FilePath = std::move(FilePath);
	Parms.CreateDirectories = CreateDirectories;
	Parms.OverwriteFile = OverwriteFile;
	Parms.bytes = std::move(bytes);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Filename != nullptr)
		*Filename = std::move(Parms.Filename);

	if (FullPath != nullptr)
		*FullPath = std::move(Parms.FullPath);

	if (ErrorCode != nullptr)
		*ErrorCode = Parms.ErrorCode;

	if (ErrorMessage != nullptr)
		*ErrorMessage = std::move(Parms.ErrorMessage);
}


// Function RealTimeImport.RealTimeImportBPLibrary.seekWavFileStream
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           FileID                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PositionInSeconds                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportBPLibrary::SeekWavFileStream(const class FString& FileID, float PositionInSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportBPLibrary", "seekWavFileStream");

	Params::RealTimeImportBPLibrary_SeekWavFileStream Parms{};

	Parms.FileID = std::move(FileID);
	Parms.PositionInSeconds = PositionInSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RealTimeImport.RealTimeImportBPLibrary.stopAllSounds
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    RemoveFromCache                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportBPLibrary::StopAllSounds(bool RemoveFromCache)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportBPLibrary", "stopAllSounds");

	Params::RealTimeImportBPLibrary_StopAllSounds Parms{};

	Parms.RemoveFromCache = RemoveFromCache;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RealTimeImport.RealTimeImportBPLibrary.stopSound
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           FileID                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    RemoveFromCache                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportBPLibrary::StopSound(const class FString& FileID, bool RemoveFromCache)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportBPLibrary", "stopSound");

	Params::RealTimeImportBPLibrary_StopSound Parms{};

	Parms.FileID = std::move(FileID);
	Parms.RemoveFromCache = RemoveFromCache;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RealTimeImport.RealTimeImportBPLibrary.streamWavFile
// (Final, BlueprintCosmetic, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERTIDirectoryType                       DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VolumeMultiplier                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   StartTimeInSeconds                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    PersistAcrossLevelTransition                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportBPLibrary::StreamWavFile(bool* Success, class FString* ErrorMessage, const class UObject* WorldContextObject, ERTIDirectoryType DirectoryType, const class FString& FilePath, float VolumeMultiplier, int32 StartTimeInSeconds, bool PersistAcrossLevelTransition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportBPLibrary", "streamWavFile");

	Params::RealTimeImportBPLibrary_StreamWavFile Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.DirectoryType = DirectoryType;
	Parms.FilePath = std::move(FilePath);
	Parms.VolumeMultiplier = VolumeMultiplier;
	Parms.StartTimeInSeconds = StartTimeInSeconds;
	Parms.PersistAcrossLevelTransition = PersistAcrossLevelTransition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Success != nullptr)
		*Success = Parms.Success;

	if (ErrorMessage != nullptr)
		*ErrorMessage = std::move(Parms.ErrorMessage);
}


// Function RealTimeImport.RealTimeImportBPLibrary.texture2dToByteArray
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UTexture2D*                       Texture2D                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERTIExportImageType                     Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Quality                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<uint8> URealTimeImportBPLibrary::Texture2dToByteArray(class UTexture2D* Texture2D, ERTIExportImageType Type, int32 Quality)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportBPLibrary", "texture2dToByteArray");

	Params::RealTimeImportBPLibrary_Texture2dToByteArray Parms{};

	Parms.Texture2D = Texture2D;
	Parms.Type = Type;
	Parms.Quality = Quality;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RealTimeImport.RealTimeImportBPLibrary.texture2DToTexture2DDynamic
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UTexture2D*                       Texture2D                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    DestroyTexture2D                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2DDynamic*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2DDynamic* URealTimeImportBPLibrary::Texture2DToTexture2DDynamic(class UTexture2D* Texture2D, bool DestroyTexture2D)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportBPLibrary", "texture2DToTexture2DDynamic");

	Params::RealTimeImportBPLibrary_Texture2DToTexture2DDynamic Parms{};

	Parms.Texture2D = Texture2D;
	Parms.DestroyTexture2D = DestroyTexture2D;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RealTimeImport.RealTimeImportBPLibrary.textureRenderTarget2D_ToByteArray
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTextureRenderTarget2D*           TextureRenderTarget2D                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERTIExportImageType                     Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Quality                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<uint8> URealTimeImportBPLibrary::TextureRenderTarget2D_ToByteArray(bool* Success, class FString* ErrorMessage, class UTextureRenderTarget2D* TextureRenderTarget2D, ERTIExportImageType Type, int32 Quality)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportBPLibrary", "textureRenderTarget2D_ToByteArray");

	Params::RealTimeImportBPLibrary_TextureRenderTarget2D_ToByteArray Parms{};

	Parms.TextureRenderTarget2D = TextureRenderTarget2D;
	Parms.Type = Type;
	Parms.Quality = Quality;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Success != nullptr)
		*Success = Parms.Success;

	if (ErrorMessage != nullptr)
		*ErrorMessage = std::move(Parms.ErrorMessage);

	return Parms.ReturnValue;
}


// Function RealTimeImport.RealTimeImportBPLibrary.ActiveSoundEnvelopeValueEventDelegate
// (Final, Native, Public)
// Parameters:
// float                                   AverageEnvelopeValue                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxEnvelope                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumWaveInstances                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportBPLibrary::ActiveSoundEnvelopeValueEventDelegate(const float AverageEnvelopeValue, const float MaxEnvelope, const int32 NumWaveInstances)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RealTimeImportBPLibrary", "ActiveSoundEnvelopeValueEventDelegate");

	Params::RealTimeImportBPLibrary_ActiveSoundEnvelopeValueEventDelegate Parms{};

	Parms.AverageEnvelopeValue = AverageEnvelopeValue;
	Parms.MaxEnvelope = MaxEnvelope;
	Parms.NumWaveInstances = NumWaveInstances;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction RealTimeImport.RealTimeImportBPLibrary.ActiveSoundEnvelopeValueEventDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// float                                   AverageEnvelopeValue                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxEnvelope                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumWaveInstances                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportBPLibrary::ActiveSoundEnvelopeValueEventDelegate__DelegateSignature(float AverageEnvelopeValue, float MaxEnvelope, int32 NumWaveInstances)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RealTimeImportBPLibrary", "ActiveSoundEnvelopeValueEventDelegate__DelegateSignature");

	Params::RealTimeImportBPLibrary_ActiveSoundEnvelopeValueEventDelegate__DelegateSignature Parms{};

	Parms.AverageEnvelopeValue = AverageEnvelopeValue;
	Parms.MaxEnvelope = MaxEnvelope;
	Parms.NumWaveInstances = NumWaveInstances;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RealTimeImport.RealTimeImportBPLibrary.ActiveSoundPositionEventDelegate
// (Final, Native, Public)
// Parameters:
// class FString                           FileID                                                 (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PositionSecondsStart                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PositionSecondsEnd                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PositionPercent                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportBPLibrary::ActiveSoundPositionEventDelegate(const class FString& FileID, const float PositionSecondsStart, const float PositionSecondsEnd, const float PositionPercent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RealTimeImportBPLibrary", "ActiveSoundPositionEventDelegate");

	Params::RealTimeImportBPLibrary_ActiveSoundPositionEventDelegate Parms{};

	Parms.FileID = std::move(FileID);
	Parms.PositionSecondsStart = PositionSecondsStart;
	Parms.PositionSecondsEnd = PositionSecondsEnd;
	Parms.PositionPercent = PositionPercent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction RealTimeImport.RealTimeImportBPLibrary.ActiveSoundPositionEventDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class FString                           FileID                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PositionSecondsStart                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PositionSecondsEnd                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PositionPercent                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportBPLibrary::ActiveSoundPositionEventDelegate__DelegateSignature(const class FString& FileID, float PositionSecondsStart, float PositionSecondsEnd, float PositionPercent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RealTimeImportBPLibrary", "ActiveSoundPositionEventDelegate__DelegateSignature");

	Params::RealTimeImportBPLibrary_ActiveSoundPositionEventDelegate__DelegateSignature Parms{};

	Parms.FileID = std::move(FileID);
	Parms.PositionSecondsStart = PositionSecondsStart;
	Parms.PositionSecondsEnd = PositionSecondsEnd;
	Parms.PositionPercent = PositionPercent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RealTimeImport.RealTimeImportBPLibrary.CreateSoundWaveFromBytesEventDelegate
// (Final, Native, Public)
// Parameters:
// int32                                   ErrorCode                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           EventID                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundWaveProcedural*             Sound                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportBPLibrary::CreateSoundWaveFromBytesEventDelegate(const int32 ErrorCode, const class FString& EventID, const class USoundWaveProcedural* Sound, const class FString& ErrorMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RealTimeImportBPLibrary", "CreateSoundWaveFromBytesEventDelegate");

	Params::RealTimeImportBPLibrary_CreateSoundWaveFromBytesEventDelegate Parms{};

	Parms.ErrorCode = ErrorCode;
	Parms.EventID = std::move(EventID);
	Parms.Sound = Sound;
	Parms.ErrorMessage = std::move(ErrorMessage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction RealTimeImport.RealTimeImportBPLibrary.CreateSoundWaveFromBytesEventDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// int32                                   ErrorCode                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           EventID                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundWaveProcedural*             Sound                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportBPLibrary::CreateSoundWaveFromBytesEventDelegate__DelegateSignature(int32 ErrorCode, const class FString& EventID, class USoundWaveProcedural* Sound, const class FString& ErrorMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RealTimeImportBPLibrary", "CreateSoundWaveFromBytesEventDelegate__DelegateSignature");

	Params::RealTimeImportBPLibrary_CreateSoundWaveFromBytesEventDelegate__DelegateSignature Parms{};

	Parms.ErrorCode = ErrorCode;
	Parms.EventID = std::move(EventID);
	Parms.Sound = Sound;
	Parms.ErrorMessage = std::move(ErrorMessage);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RealTimeImport.RealTimeImportBPLibrary.CreateSoundWaveFromFileEventDelegate
// (Final, Native, Public)
// Parameters:
// int32                                   ErrorCode                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           EventID                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundWaveProcedural*             Sound                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Filename                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportBPLibrary::CreateSoundWaveFromFileEventDelegate(const int32 ErrorCode, const class FString& EventID, const class USoundWaveProcedural* Sound, const class FString& Filename, const class FString& ErrorMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RealTimeImportBPLibrary", "CreateSoundWaveFromFileEventDelegate");

	Params::RealTimeImportBPLibrary_CreateSoundWaveFromFileEventDelegate Parms{};

	Parms.ErrorCode = ErrorCode;
	Parms.EventID = std::move(EventID);
	Parms.Sound = Sound;
	Parms.Filename = std::move(Filename);
	Parms.ErrorMessage = std::move(ErrorMessage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction RealTimeImport.RealTimeImportBPLibrary.CreateSoundWaveFromFileEventDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// int32                                   ErrorCode                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           EventID                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundWaveProcedural*             Sound                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportBPLibrary::CreateSoundWaveFromFileEventDelegate__DelegateSignature(int32 ErrorCode, const class FString& EventID, class USoundWaveProcedural* Sound, const class FString& Filename, const class FString& ErrorMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RealTimeImportBPLibrary", "CreateSoundWaveFromFileEventDelegate__DelegateSignature");

	Params::RealTimeImportBPLibrary_CreateSoundWaveFromFileEventDelegate__DelegateSignature Parms{};

	Parms.ErrorCode = ErrorCode;
	Parms.EventID = std::move(EventID);
	Parms.Sound = Sound;
	Parms.Filename = std::move(Filename);
	Parms.ErrorMessage = std::move(ErrorMessage);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RealTimeImport.RealTimeImportBPLibrary.LoadAllFilesFromDirectoryAsync
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ERTIDirectoryType                       DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERTIFileType                            FileType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           DirPath                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    RecursiveSearch                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           EventID                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class URealTimeImportBPLibrary*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class URealTimeImportBPLibrary* URealTimeImportBPLibrary::LoadAllFilesFromDirectoryAsync(ERTIDirectoryType DirectoryType, ERTIFileType FileType, const class FString& DirPath, bool RecursiveSearch, const class FString& EventID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RealTimeImportBPLibrary", "LoadAllFilesFromDirectoryAsync");

	Params::RealTimeImportBPLibrary_LoadAllFilesFromDirectoryAsync Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.FileType = FileType;
	Parms.DirPath = std::move(DirPath);
	Parms.RecursiveSearch = RecursiveSearch;
	Parms.EventID = std::move(EventID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RealTimeImport.RealTimeImportBPLibrary.LoadAllFilesFromDirectoryEventDelegate
// (Final, Native, Public, HasOutParams)
// Parameters:
// class FString                           EventID                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Count                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   Files                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class FString>                   FilePaths                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void URealTimeImportBPLibrary::LoadAllFilesFromDirectoryEventDelegate(const class FString& EventID, const int32& Count, const TArray<class FString>& Files, const TArray<class FString>& FilePaths)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RealTimeImportBPLibrary", "LoadAllFilesFromDirectoryEventDelegate");

	Params::RealTimeImportBPLibrary_LoadAllFilesFromDirectoryEventDelegate Parms{};

	Parms.EventID = std::move(EventID);
	Parms.Count = Count;
	Parms.Files = std::move(Files);
	Parms.FilePaths = std::move(FilePaths);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction RealTimeImport.RealTimeImportBPLibrary.LoadAllFilesFromDirectoryEventDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams)
// Parameters:
// class FString                           EventID                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   Files                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class FString>                   FilePaths                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void URealTimeImportBPLibrary::LoadAllFilesFromDirectoryEventDelegate__DelegateSignature(const class FString& EventID, int32 Count, const TArray<class FString>& Files, const TArray<class FString>& FilePaths)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RealTimeImportBPLibrary", "LoadAllFilesFromDirectoryEventDelegate__DelegateSignature");

	Params::RealTimeImportBPLibrary_LoadAllFilesFromDirectoryEventDelegate__DelegateSignature Parms{};

	Parms.EventID = std::move(EventID);
	Parms.Count = Count;
	Parms.Files = std::move(Files);
	Parms.FilePaths = std::move(FilePaths);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RealTimeImport.RealTimeImportBPLibrary.LoadFileAsync
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ERTIDirectoryType                       DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           EventID                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class URealTimeImportBPLibrary*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class URealTimeImportBPLibrary* URealTimeImportBPLibrary::LoadFileAsync(ERTIDirectoryType DirectoryType, const class FString& FilePath, const class FString& EventID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RealTimeImportBPLibrary", "LoadFileAsync");

	Params::RealTimeImportBPLibrary_LoadFileAsync Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.FilePath = std::move(FilePath);
	Parms.EventID = std::move(EventID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RealTimeImport.RealTimeImportBPLibrary.LoadFileEventDelegate
// (Final, Native, Public, HasOutParams)
// Parameters:
// int32                                   ErrorCode                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           EventID                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           bytes                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           Filename                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportBPLibrary::LoadFileEventDelegate(const int32 ErrorCode, const class FString& EventID, const TArray<uint8>& bytes, const class FString& Filename, const class FString& ErrorMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RealTimeImportBPLibrary", "LoadFileEventDelegate");

	Params::RealTimeImportBPLibrary_LoadFileEventDelegate Parms{};

	Parms.ErrorCode = ErrorCode;
	Parms.EventID = std::move(EventID);
	Parms.bytes = std::move(bytes);
	Parms.Filename = std::move(Filename);
	Parms.ErrorMessage = std::move(ErrorMessage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction RealTimeImport.RealTimeImportBPLibrary.LoadFileEventDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams)
// Parameters:
// int32                                   ErrorCode                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           EventID                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           bytes                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportBPLibrary::LoadFileEventDelegate__DelegateSignature(int32 ErrorCode, const class FString& EventID, const TArray<uint8>& bytes, const class FString& Filename, const class FString& ErrorMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RealTimeImportBPLibrary", "LoadFileEventDelegate__DelegateSignature");

	Params::RealTimeImportBPLibrary_LoadFileEventDelegate__DelegateSignature Parms{};

	Parms.ErrorCode = ErrorCode;
	Parms.EventID = std::move(EventID);
	Parms.bytes = std::move(bytes);
	Parms.Filename = std::move(Filename);
	Parms.ErrorMessage = std::move(ErrorMessage);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RealTimeImport.RealTimeImportBPLibrary.LoadImageBytesEventDelegate
// (Final, Native, Public)
// Parameters:
// int32                                   ErrorCode                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           EventID                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       Texture                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportBPLibrary::LoadImageBytesEventDelegate(const int32 ErrorCode, const class FString& EventID, const class UTexture2D* Texture, const class FString& ErrorMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RealTimeImportBPLibrary", "LoadImageBytesEventDelegate");

	Params::RealTimeImportBPLibrary_LoadImageBytesEventDelegate Parms{};

	Parms.ErrorCode = ErrorCode;
	Parms.EventID = std::move(EventID);
	Parms.Texture = Texture;
	Parms.ErrorMessage = std::move(ErrorMessage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction RealTimeImport.RealTimeImportBPLibrary.LoadImageBytesEventDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// int32                                   ErrorCode                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           EventID                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       Texture                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportBPLibrary::LoadImageBytesEventDelegate__DelegateSignature(int32 ErrorCode, const class FString& EventID, class UTexture2D* Texture, const class FString& ErrorMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RealTimeImportBPLibrary", "LoadImageBytesEventDelegate__DelegateSignature");

	Params::RealTimeImportBPLibrary_LoadImageBytesEventDelegate__DelegateSignature Parms{};

	Parms.ErrorCode = ErrorCode;
	Parms.EventID = std::move(EventID);
	Parms.Texture = Texture;
	Parms.ErrorMessage = std::move(ErrorMessage);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RealTimeImport.RealTimeImportBPLibrary.LoadImageFileEventDelegate
// (Final, Native, Public)
// Parameters:
// int32                                   ErrorCode                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           EventID                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       Texture                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Filename                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportBPLibrary::LoadImageFileEventDelegate(const int32 ErrorCode, const class FString& EventID, const class UTexture2D* Texture, const class FString& Filename, const class FString& ErrorMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RealTimeImportBPLibrary", "LoadImageFileEventDelegate");

	Params::RealTimeImportBPLibrary_LoadImageFileEventDelegate Parms{};

	Parms.ErrorCode = ErrorCode;
	Parms.EventID = std::move(EventID);
	Parms.Texture = Texture;
	Parms.Filename = std::move(Filename);
	Parms.ErrorMessage = std::move(ErrorMessage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction RealTimeImport.RealTimeImportBPLibrary.LoadImageFileEventDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// int32                                   ErrorCode                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           EventID                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       Texture                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportBPLibrary::LoadImageFileEventDelegate__DelegateSignature(int32 ErrorCode, const class FString& EventID, class UTexture2D* Texture, const class FString& Filename, const class FString& ErrorMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RealTimeImportBPLibrary", "LoadImageFileEventDelegate__DelegateSignature");

	Params::RealTimeImportBPLibrary_LoadImageFileEventDelegate__DelegateSignature Parms{};

	Parms.ErrorCode = ErrorCode;
	Parms.EventID = std::move(EventID);
	Parms.Texture = Texture;
	Parms.Filename = std::move(Filename);
	Parms.ErrorMessage = std::move(ErrorMessage);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RealTimeImport.RealTimeImportBPLibrary.PlaySoundEventDelegate
// (Final, Native, Public)
// Parameters:
// int32                                   ErrorCode                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FileID                                                 (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DurationInSeconds                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportBPLibrary::PlaySoundEventDelegate(const int32 ErrorCode, const class FString& FileID, const class FString& ErrorMessage, const float DurationInSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RealTimeImportBPLibrary", "PlaySoundEventDelegate");

	Params::RealTimeImportBPLibrary_PlaySoundEventDelegate Parms{};

	Parms.ErrorCode = ErrorCode;
	Parms.FileID = std::move(FileID);
	Parms.ErrorMessage = std::move(ErrorMessage);
	Parms.DurationInSeconds = DurationInSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction RealTimeImport.RealTimeImportBPLibrary.PlaySoundEventDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// int32                                   ErrorCode                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FileID                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DurationInSeconds                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportBPLibrary::PlaySoundEventDelegate__DelegateSignature(int32 ErrorCode, const class FString& FileID, const class FString& ErrorMessage, float DurationInSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RealTimeImportBPLibrary", "PlaySoundEventDelegate__DelegateSignature");

	Params::RealTimeImportBPLibrary_PlaySoundEventDelegate__DelegateSignature Parms{};

	Parms.ErrorCode = ErrorCode;
	Parms.FileID = std::move(FileID);
	Parms.ErrorMessage = std::move(ErrorMessage);
	Parms.DurationInSeconds = DurationInSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RealTimeImport.RealTimeImportBPLibrary.SaveFileAsync
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ERTIDirectoryType                       DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    CreateDirectories                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OverwriteFile                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           bytes                                                  (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FString                           EventID                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class URealTimeImportBPLibrary*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class URealTimeImportBPLibrary* URealTimeImportBPLibrary::SaveFileAsync(ERTIDirectoryType DirectoryType, const class FString& FilePath, bool CreateDirectories, bool OverwriteFile, const TArray<uint8>& bytes, const class FString& EventID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RealTimeImportBPLibrary", "SaveFileAsync");

	Params::RealTimeImportBPLibrary_SaveFileAsync Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.FilePath = std::move(FilePath);
	Parms.CreateDirectories = CreateDirectories;
	Parms.OverwriteFile = OverwriteFile;
	Parms.bytes = std::move(bytes);
	Parms.EventID = std::move(EventID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RealTimeImport.RealTimeImportBPLibrary.SaveFileEventDelegate
// (Final, Native, Public)
// Parameters:
// int32                                   ErrorCode                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           EventID                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Filename                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FullPath                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportBPLibrary::SaveFileEventDelegate(const int32 ErrorCode, const class FString& EventID, const class FString& Filename, const class FString& FullPath, const class FString& ErrorMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RealTimeImportBPLibrary", "SaveFileEventDelegate");

	Params::RealTimeImportBPLibrary_SaveFileEventDelegate Parms{};

	Parms.ErrorCode = ErrorCode;
	Parms.EventID = std::move(EventID);
	Parms.Filename = std::move(Filename);
	Parms.FullPath = std::move(FullPath);
	Parms.ErrorMessage = std::move(ErrorMessage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction RealTimeImport.RealTimeImportBPLibrary.SaveFileEventDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// int32                                   ErrorCode                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           EventID                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FullPath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportBPLibrary::SaveFileEventDelegate__DelegateSignature(int32 ErrorCode, const class FString& EventID, const class FString& Filename, const class FString& FullPath, const class FString& ErrorMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RealTimeImportBPLibrary", "SaveFileEventDelegate__DelegateSignature");

	Params::RealTimeImportBPLibrary_SaveFileEventDelegate__DelegateSignature Parms{};

	Parms.ErrorCode = ErrorCode;
	Parms.EventID = std::move(EventID);
	Parms.Filename = std::move(Filename);
	Parms.FullPath = std::move(FullPath);
	Parms.ErrorMessage = std::move(ErrorMessage);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RealTimeImport.RealTimeImportBPLibrary.StopSoundEventDelegate
// (Final, Native, Public)
// Parameters:
// class FString                           FileID                                                 (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportBPLibrary::StopSoundEventDelegate(const class FString& FileID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RealTimeImportBPLibrary", "StopSoundEventDelegate");

	Params::RealTimeImportBPLibrary_StopSoundEventDelegate Parms{};

	Parms.FileID = std::move(FileID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction RealTimeImport.RealTimeImportBPLibrary.StopSoundEventDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class FString                           FileID                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URealTimeImportBPLibrary::StopSoundEventDelegate__DelegateSignature(const class FString& FileID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RealTimeImportBPLibrary", "StopSoundEventDelegate__DelegateSignature");

	Params::RealTimeImportBPLibrary_StopSoundEventDelegate__DelegateSignature Parms{};

	Parms.FileID = std::move(FileID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RealTimeImport.RealTimeImportImage.getImageColors
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<uint8>                           ImageBytes                                             (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FColor>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FColor> URealTimeImportImage::GetImageColors(const TArray<uint8>& ImageBytes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportImage", "getImageColors");

	Params::RealTimeImportImage_GetImageColors Parms{};

	Parms.ImageBytes = std::move(ImageBytes);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RealTimeImport.RealTimeImportImage.getRealTimeImportImage
// (Final, Native, Static, Public)
// Parameters:
// class URealTimeImportImage*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class URealTimeImportImage* URealTimeImportImage::GetRealTimeImportImage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportImage", "getRealTimeImportImage");

	Params::RealTimeImportImage_GetRealTimeImportImage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RealTimeImport.RealTimeImportMesh.cleanTest
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<struct FRTIModelStruct>          ModelStructs                                           (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void URealTimeImportMesh::CleanTest(const TArray<struct FRTIModelStruct>& ModelStructs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportMesh", "cleanTest");

	Params::RealTimeImportMesh_CleanTest Parms{};

	Parms.ModelStructs = std::move(ModelStructs);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RealTimeImport.RealTimeImportMesh.getRealTimeImportMesh
// (Final, Native, Static, Public)
// Parameters:
// class URealTimeImportMesh*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class URealTimeImportMesh* URealTimeImportMesh::GetRealTimeImportMesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportMesh", "getRealTimeImportMesh");

	Params::RealTimeImportMesh_GetRealTimeImportMesh Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RealTimeImport.RealTimeImportSound.getRealTimeImportSound
// (Final, Native, Static, Public)
// Parameters:
// class URealTimeImportSound*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class URealTimeImportSound* URealTimeImportSound::GetRealTimeImportSound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealTimeImportSound", "getRealTimeImportSound");

	Params::RealTimeImportSound_GetRealTimeImportSound Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

