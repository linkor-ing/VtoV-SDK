#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WaterVolume

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass waterVolume.waterVolume_C
// 0x0098 (0x02B8 - 0x0220)
class AWaterVolume_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        LakeLoop;                                          // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   VolumeCube;                                        // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  PostProcess;                                       // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SurfacePlane;                                      // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Objects;                                           // 0x0258(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<bool>                                  Objects_origins;                                   // 0x0268(0x0010)(Edit, BlueprintVisible)
	float                                         Depth_w;                                           // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PlaneLoc;                                          // 0x027C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ARiverFlow_C*>                   RiverFlows;                                        // 0x0288(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	float                                         RiverForce;                                        // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Visible;                                           // 0x029C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SurfaceOnly;                                       // 0x029D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29E[0x2];                                      // 0x029E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AmbienceVolume;                                    // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A4[0x4];                                      // 0x02A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     InitMat;                                           // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Frozen;                                            // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_waterVolume(int32 EntryPoint);
	void Init();
	void GamemodeBeginPlay();
	void SignalDeleted();
	void SignalSaved();
	void StuffUpgraded(class AMainGamemode_C* GameMode);
	void Unfoc();
	void SettingsApplied(const struct FStruct_settings& Settings);
	void Unfocused();
	void GamemodePreLoad();
	void AnyKey(const struct FKey& Key, bool Pressed);
	void GamemodeMakeKeys();
	void PropRenderer_finishProps();
	void ApplyColor(const struct FLinearColor& Color);
	void TexturePickerApply(class UUmg_texturePicker_C* Picker, class UTexture2D* Texture, int32 Param_Index);
	void ReceiveBeginPlay();
	void BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void ReceiveTick(float DeltaSeconds);
	void UserConstructionScript();
	void SoundSurface(class AActor* Self2, class USoundBase* Sound, bool Effect, const struct FVector& Loc, const struct FVector& Scale);
	void boy(class AActor* Self2);
	void NewFunction_0(bool Condition);
	void Freeze(bool Param_Frozen);
	void UpdateWaterData();
	void DreamInv(TArray<struct FStruct_save>& Invv, class ADreamBase_C** Base);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"waterVolume_C">();
	}
	static class AWaterVolume_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWaterVolume_C>();
	}
};
static_assert(alignof(AWaterVolume_C) == 0x000008, "Wrong alignment on AWaterVolume_C");
static_assert(sizeof(AWaterVolume_C) == 0x0002B8, "Wrong size on AWaterVolume_C");
static_assert(offsetof(AWaterVolume_C, UberGraphFrame) == 0x000220, "Member 'AWaterVolume_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AWaterVolume_C, LakeLoop) == 0x000228, "Member 'AWaterVolume_C::LakeLoop' has a wrong offset!");
static_assert(offsetof(AWaterVolume_C, Box) == 0x000230, "Member 'AWaterVolume_C::Box' has a wrong offset!");
static_assert(offsetof(AWaterVolume_C, Scene) == 0x000238, "Member 'AWaterVolume_C::Scene' has a wrong offset!");
static_assert(offsetof(AWaterVolume_C, VolumeCube) == 0x000240, "Member 'AWaterVolume_C::VolumeCube' has a wrong offset!");
static_assert(offsetof(AWaterVolume_C, PostProcess) == 0x000248, "Member 'AWaterVolume_C::PostProcess' has a wrong offset!");
static_assert(offsetof(AWaterVolume_C, SurfacePlane) == 0x000250, "Member 'AWaterVolume_C::SurfacePlane' has a wrong offset!");
static_assert(offsetof(AWaterVolume_C, Objects) == 0x000258, "Member 'AWaterVolume_C::Objects' has a wrong offset!");
static_assert(offsetof(AWaterVolume_C, Objects_origins) == 0x000268, "Member 'AWaterVolume_C::Objects_origins' has a wrong offset!");
static_assert(offsetof(AWaterVolume_C, Depth_w) == 0x000278, "Member 'AWaterVolume_C::Depth_w' has a wrong offset!");
static_assert(offsetof(AWaterVolume_C, PlaneLoc) == 0x00027C, "Member 'AWaterVolume_C::PlaneLoc' has a wrong offset!");
static_assert(offsetof(AWaterVolume_C, RiverFlows) == 0x000288, "Member 'AWaterVolume_C::RiverFlows' has a wrong offset!");
static_assert(offsetof(AWaterVolume_C, RiverForce) == 0x000298, "Member 'AWaterVolume_C::RiverForce' has a wrong offset!");
static_assert(offsetof(AWaterVolume_C, Visible) == 0x00029C, "Member 'AWaterVolume_C::Visible' has a wrong offset!");
static_assert(offsetof(AWaterVolume_C, SurfaceOnly) == 0x00029D, "Member 'AWaterVolume_C::SurfaceOnly' has a wrong offset!");
static_assert(offsetof(AWaterVolume_C, AmbienceVolume) == 0x0002A0, "Member 'AWaterVolume_C::AmbienceVolume' has a wrong offset!");
static_assert(offsetof(AWaterVolume_C, InitMat) == 0x0002A8, "Member 'AWaterVolume_C::InitMat' has a wrong offset!");
static_assert(offsetof(AWaterVolume_C, Frozen) == 0x0002B0, "Member 'AWaterVolume_C::Frozen' has a wrong offset!");

}

