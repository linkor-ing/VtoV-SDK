#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Ticker_flickerer

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Ticker_base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass ticker_flickerer.ticker_flickerer_C
// 0x0020 (0x0258 - 0x0238)
class ATicker_flickerer_C final : public ATicker_base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_Ticker_flickerer_C;                 // 0x0238(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<class ATrigger_lightRoot_C*>           Roots;                                             // 0x0240(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         Min;                                               // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_ticker_flickerer(int32 EntryPoint);
	void GamemodeBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void ApplyColor(const struct FLinearColor& Color);
	void PropRenderer_finishProps();
	void GamemodeMakeKeys();
	void AnyKey(const struct FKey& Key, bool Pressed);
	void GamemodePreLoad();
	void Unfocused();
	void SettingsApplied(const struct FStruct_settings& Settings);
	void Unfoc();
	void StuffUpgraded(class AMainGamemode_C* Param_GameMode);
	void SignalSaved();
	void SignalDeleted();
	void DreamInv(TArray<struct FStruct_save>& Invv, class ADreamBase_C** Base);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ticker_flickerer_C">();
	}
	static class ATicker_flickerer_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATicker_flickerer_C>();
	}
};
static_assert(alignof(ATicker_flickerer_C) == 0x000008, "Wrong alignment on ATicker_flickerer_C");
static_assert(sizeof(ATicker_flickerer_C) == 0x000258, "Wrong size on ATicker_flickerer_C");
static_assert(offsetof(ATicker_flickerer_C, UberGraphFrame_Ticker_flickerer_C) == 0x000238, "Member 'ATicker_flickerer_C::UberGraphFrame_Ticker_flickerer_C' has a wrong offset!");
static_assert(offsetof(ATicker_flickerer_C, Roots) == 0x000240, "Member 'ATicker_flickerer_C::Roots' has a wrong offset!");
static_assert(offsetof(ATicker_flickerer_C, Min) == 0x000250, "Member 'ATicker_flickerer_C::Min' has a wrong offset!");

}

