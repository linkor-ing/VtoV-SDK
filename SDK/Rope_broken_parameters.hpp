#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Rope_broken

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Enum_interactionActions_structs.hpp"
#include "Struct_settings_structs.hpp"
#include "Struct_save_structs.hpp"
#include "Engine_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function rope_broken.rope_broken_C.ExecuteUbergraph_rope_broken
// 0x0818 (0x0818 - 0x0000)
struct Rope_broken_C_ExecuteUbergraph_rope_broken final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_6;                             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_7;                                // 0x0008(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AActor*                                 K2Node_Event_actor_1;                              // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_impact_1;                             // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AWaterVolume_C*                         K2Node_Event_water_3;                              // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWaterVolume_C*                         K2Node_Event_water_2;                              // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWaterVolume_C*                         K2Node_Event_water_1;                              // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWaterVolume_C*                         K2Node_Event_water;                                // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_activate;                             // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_static;                               // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_frozen;                               // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_active;                               // 0x00CB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_actor;                                // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_5;                             // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_6;                                // 0x00DC(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                K2Node_Event_impact;                               // 0x0164(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_skipSetting;                          // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_Event_key_2;                                // 0x0178(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_18;                            // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_5;                                // 0x0190(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         K2Node_Event_damage_4;                             // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_fuel;                                 // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_3;                             // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hot;                                  // 0x0224(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_2AC[0x4];                                      // 0x02AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_17;                            // 0x02B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_4;                                // 0x02B8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	Enum_interactionActions                       K2Node_Event_action;                               // 0x0340(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_341[0x7];                                      // 0x0341(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_16;                            // 0x0348(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_15;                            // 0x0350(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_2;                             // 0x0358(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_location_1;                           // 0x035C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_14;                            // 0x0368(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_13;                            // 0x0370(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_12;                            // 0x0378(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_wheelDelta;                           // 0x0380(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_384[0x4];                                      // 0x0384(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_11;                            // 0x0388(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Event_mouse;                                // 0x0390(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_10;                            // 0x0398(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_Event_key_1;                                // 0x03A0(0x0018)(HasGetValueTypeHash)
	bool                                          K2Node_Event_pressed_1;                            // 0x03B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B9[0x3];                                      // 0x03B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_temperature_1;                        // 0x03BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_temperature;                          // 0x03C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_speed;                                // 0x03C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_9;                             // 0x03C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_3;                                // 0x03D0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class FString                                 K2Node_Event_name_1;                               // 0x0458(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         K2Node_Event_volume;                               // 0x0468(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46C[0x4];                                      // 0x046C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_8;                             // 0x0470(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_location;                             // 0x0478(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_1;                             // 0x0484(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_clean_1;                              // 0x0488(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_489[0x7];                                      // 0x0489(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_7;                             // 0x0490(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_2;                                // 0x0498(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AHook_C*                                K2Node_Event_hook_1;                               // 0x0520(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_clean;                                // 0x0528(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52C[0x4];                                      // 0x052C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_6;                             // 0x0530(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHook_C*                                K2Node_Event_hook;                                 // 0x0538(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainGamemode_C*                        K2Node_Event_gamemode;                             // 0x0540(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStruct_settings                       K2Node_Event_settings;                             // 0x0548(0x00F0)(HasGetValueTypeHash)
	struct FKey                                   K2Node_Event_key;                                  // 0x0638(0x0018)(HasGetValueTypeHash)
	bool                                          K2Node_Event_pressed;                              // 0x0650(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_651[0x3];                                      // 0x0651(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Event_color;                                // 0x0654(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_664[0x4];                                      // 0x0664(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUmg_texturePicker_C*                   K2Node_Event_picker;                               // 0x0668(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Event_texture;                              // 0x0670(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_index;                                // 0x0678(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_67C[0x4];                                      // 0x067C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_5;                             // 0x0680(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_1;                                // 0x0688(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          K2Node_Event_kick;                                 // 0x0710(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_711[0x3];                                      // 0x0711(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_name;                                 // 0x0714(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71C[0x4];                                      // 0x071C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_4;                             // 0x0720(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_3;                             // 0x0728(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit;                                  // 0x0730(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         K2Node_Event_damage;                               // 0x07B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7BC[0x4];                                      // 0x07BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_2;                             // 0x07C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_1;                             // 0x07C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player;                               // 0x07D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_DestroyedActor;                 // 0x07D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x07E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7E1[0x3];                                      // 0x07E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class AActor* DestroyedActor)> K2Node_CreateDelegate_OutputDelegate;              // 0x07E4(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x07F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F5[0x3];                                      // 0x07F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AProp_C*                                K2Node_DynamicCast_AsProp;                         // 0x07F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0800(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_801[0x3];                                      // 0x0801(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0804(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(Rope_broken_C_ExecuteUbergraph_rope_broken) == 0x000008, "Wrong alignment on Rope_broken_C_ExecuteUbergraph_rope_broken");
static_assert(sizeof(Rope_broken_C_ExecuteUbergraph_rope_broken) == 0x000818, "Wrong size on Rope_broken_C_ExecuteUbergraph_rope_broken");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, EntryPoint) == 0x000000, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::EntryPoint' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_damage_6) == 0x000004, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_damage_6' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_hit_7) == 0x000008, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_hit_7' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_actor_1) == 0x000090, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_actor_1' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_impact_1) == 0x000098, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_impact_1' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_water_3) == 0x0000A8, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_water_3' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_water_2) == 0x0000B0, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_water_2' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_water_1) == 0x0000B8, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_water_1' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_water) == 0x0000C0, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_water' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_activate) == 0x0000C8, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_activate' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_static) == 0x0000C9, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_static' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_frozen) == 0x0000CA, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_frozen' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_active) == 0x0000CB, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_active' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_actor) == 0x0000D0, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_actor' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_damage_5) == 0x0000D8, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_damage_5' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_hit_6) == 0x0000DC, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_hit_6' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_impact) == 0x000164, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_impact' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_skipSetting) == 0x000170, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_skipSetting' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_key_2) == 0x000178, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_key_2' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_player_18) == 0x000188, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_player_18' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_hit_5) == 0x000190, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_hit_5' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_damage_4) == 0x000218, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_damage_4' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_fuel) == 0x00021C, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_fuel' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_damage_3) == 0x000220, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_damage_3' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_hot) == 0x000224, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_hot' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_player_17) == 0x0002B0, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_player_17' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_hit_4) == 0x0002B8, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_hit_4' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_action) == 0x000340, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_action' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_player_16) == 0x000348, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_player_16' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_player_15) == 0x000350, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_player_15' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_damage_2) == 0x000358, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_damage_2' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_location_1) == 0x00035C, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_location_1' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_player_14) == 0x000368, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_player_14' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_player_13) == 0x000370, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_player_13' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_player_12) == 0x000378, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_player_12' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_wheelDelta) == 0x000380, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_wheelDelta' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_player_11) == 0x000388, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_player_11' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_mouse) == 0x000390, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_mouse' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_player_10) == 0x000398, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_player_10' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_key_1) == 0x0003A0, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_key_1' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_pressed_1) == 0x0003B8, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_pressed_1' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_temperature_1) == 0x0003BC, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_temperature_1' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_temperature) == 0x0003C0, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_temperature' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_speed) == 0x0003C4, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_speed' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_player_9) == 0x0003C8, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_player_9' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_hit_3) == 0x0003D0, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_hit_3' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_name_1) == 0x000458, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_name_1' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_volume) == 0x000468, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_volume' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_player_8) == 0x000470, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_player_8' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_location) == 0x000478, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_location' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_damage_1) == 0x000484, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_damage_1' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_clean_1) == 0x000488, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_clean_1' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_player_7) == 0x000490, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_player_7' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_hit_2) == 0x000498, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_hit_2' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_hook_1) == 0x000520, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_hook_1' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_clean) == 0x000528, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_clean' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_player_6) == 0x000530, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_player_6' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_hook) == 0x000538, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_hook' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_gamemode) == 0x000540, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_gamemode' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_settings) == 0x000548, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_settings' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_key) == 0x000638, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_key' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_pressed) == 0x000650, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_pressed' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_color) == 0x000654, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_color' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_picker) == 0x000668, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_picker' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_texture) == 0x000670, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_texture' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_index) == 0x000678, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_index' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_player_5) == 0x000680, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_player_5' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_hit_1) == 0x000688, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_hit_1' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_kick) == 0x000710, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_kick' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_name) == 0x000714, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_name' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_player_4) == 0x000720, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_player_4' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_player_3) == 0x000728, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_player_3' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_hit) == 0x000730, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_hit' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_damage) == 0x0007B8, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_damage' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_player_2) == 0x0007C0, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_player_2' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_player_1) == 0x0007C8, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_player_1' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_Event_player) == 0x0007D0, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_Event_player' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_CustomEvent_DestroyedActor) == 0x0007D8, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_CustomEvent_DestroyedActor' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, CallFunc_IsValid_ReturnValue) == 0x0007E0, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_CreateDelegate_OutputDelegate) == 0x0007E4, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, CallFunc_IsValid_ReturnValue_1) == 0x0007F4, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_DynamicCast_AsProp) == 0x0007F8, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_DynamicCast_AsProp' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_DynamicCast_bSuccess) == 0x000800, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ExecuteUbergraph_rope_broken, K2Node_CreateDelegate_OutputDelegate_1) == 0x000804, "Member 'Rope_broken_C_ExecuteUbergraph_rope_broken::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");

// Function rope_broken.rope_broken_C.d_a
// 0x0008 (0x0008 - 0x0000)
struct Rope_broken_C_D_a final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rope_broken_C_D_a) == 0x000008, "Wrong alignment on Rope_broken_C_D_a");
static_assert(sizeof(Rope_broken_C_D_a) == 0x000008, "Wrong size on Rope_broken_C_D_a");
static_assert(offsetof(Rope_broken_C_D_a, DestroyedActor) == 0x000000, "Member 'Rope_broken_C_D_a::DestroyedActor' has a wrong offset!");

// Function rope_broken.rope_broken_C.playerR
// 0x0008 (0x0008 - 0x0000)
struct Rope_broken_C_PlayerR final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rope_broken_C_PlayerR) == 0x000008, "Wrong alignment on Rope_broken_C_PlayerR");
static_assert(sizeof(Rope_broken_C_PlayerR) == 0x000008, "Wrong size on Rope_broken_C_PlayerR");
static_assert(offsetof(Rope_broken_C_PlayerR, Player) == 0x000000, "Member 'Rope_broken_C_PlayerR::Player' has a wrong offset!");

// Function rope_broken.rope_broken_C.playerHold
// 0x0008 (0x0008 - 0x0000)
struct Rope_broken_C_PlayerHold final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rope_broken_C_PlayerHold) == 0x000008, "Wrong alignment on Rope_broken_C_PlayerHold");
static_assert(sizeof(Rope_broken_C_PlayerHold) == 0x000008, "Wrong size on Rope_broken_C_PlayerHold");
static_assert(offsetof(Rope_broken_C_PlayerHold, Player) == 0x000000, "Member 'Rope_broken_C_PlayerHold::Player' has a wrong offset!");

// Function rope_broken.rope_broken_C.playerUnequip
// 0x0008 (0x0008 - 0x0000)
struct Rope_broken_C_PlayerUnequip final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rope_broken_C_PlayerUnequip) == 0x000008, "Wrong alignment on Rope_broken_C_PlayerUnequip");
static_assert(sizeof(Rope_broken_C_PlayerUnequip) == 0x000008, "Wrong size on Rope_broken_C_PlayerUnequip");
static_assert(offsetof(Rope_broken_C_PlayerUnequip, Player) == 0x000000, "Member 'Rope_broken_C_PlayerUnequip::Player' has a wrong offset!");

// Function rope_broken.rope_broken_C.damageByPlayer
// 0x0098 (0x0098 - 0x0000)
struct Rope_broken_C_DamageByPlayer final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         Damage;                                            // 0x0090(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rope_broken_C_DamageByPlayer) == 0x000008, "Wrong alignment on Rope_broken_C_DamageByPlayer");
static_assert(sizeof(Rope_broken_C_DamageByPlayer) == 0x000098, "Wrong size on Rope_broken_C_DamageByPlayer");
static_assert(offsetof(Rope_broken_C_DamageByPlayer, Player) == 0x000000, "Member 'Rope_broken_C_DamageByPlayer::Player' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_DamageByPlayer, Hit) == 0x000008, "Member 'Rope_broken_C_DamageByPlayer::Hit' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_DamageByPlayer, Damage) == 0x000090, "Member 'Rope_broken_C_DamageByPlayer::Damage' has a wrong offset!");

// Function rope_broken.rope_broken_C.thrown
// 0x0008 (0x0008 - 0x0000)
struct Rope_broken_C_Thrown final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rope_broken_C_Thrown) == 0x000008, "Wrong alignment on Rope_broken_C_Thrown");
static_assert(sizeof(Rope_broken_C_Thrown) == 0x000008, "Wrong size on Rope_broken_C_Thrown");
static_assert(offsetof(Rope_broken_C_Thrown, Player) == 0x000000, "Member 'Rope_broken_C_Thrown::Player' has a wrong offset!");

// Function rope_broken.rope_broken_C.sendName
// 0x0008 (0x0008 - 0x0000)
struct Rope_broken_C_SendName final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rope_broken_C_SendName) == 0x000004, "Wrong alignment on Rope_broken_C_SendName");
static_assert(sizeof(Rope_broken_C_SendName) == 0x000008, "Wrong size on Rope_broken_C_SendName");
static_assert(offsetof(Rope_broken_C_SendName, Param_Name) == 0x000000, "Member 'Rope_broken_C_SendName::Param_Name' has a wrong offset!");

// Function rope_broken.rope_broken_C.kicked
// 0x0001 (0x0001 - 0x0000)
struct Rope_broken_C_Kicked final
{
public:
	bool                                          Kick;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Rope_broken_C_Kicked) == 0x000001, "Wrong alignment on Rope_broken_C_Kicked");
static_assert(sizeof(Rope_broken_C_Kicked) == 0x000001, "Wrong size on Rope_broken_C_Kicked");
static_assert(offsetof(Rope_broken_C_Kicked, Kick) == 0x000000, "Member 'Rope_broken_C_Kicked::Kick' has a wrong offset!");

// Function rope_broken.rope_broken_C.player_use
// 0x0090 (0x0090 - 0x0000)
struct Rope_broken_C_Player_use final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Rope_broken_C_Player_use) == 0x000008, "Wrong alignment on Rope_broken_C_Player_use");
static_assert(sizeof(Rope_broken_C_Player_use) == 0x000090, "Wrong size on Rope_broken_C_Player_use");
static_assert(offsetof(Rope_broken_C_Player_use, Player) == 0x000000, "Member 'Rope_broken_C_Player_use::Player' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_Player_use, Hit) == 0x000008, "Member 'Rope_broken_C_Player_use::Hit' has a wrong offset!");

// Function rope_broken.rope_broken_C.texturePickerApply
// 0x0018 (0x0018 - 0x0000)
struct Rope_broken_C_TexturePickerApply final
{
public:
	class UUmg_texturePicker_C*                   Picker;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Texture;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rope_broken_C_TexturePickerApply) == 0x000008, "Wrong alignment on Rope_broken_C_TexturePickerApply");
static_assert(sizeof(Rope_broken_C_TexturePickerApply) == 0x000018, "Wrong size on Rope_broken_C_TexturePickerApply");
static_assert(offsetof(Rope_broken_C_TexturePickerApply, Picker) == 0x000000, "Member 'Rope_broken_C_TexturePickerApply::Picker' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_TexturePickerApply, Texture) == 0x000008, "Member 'Rope_broken_C_TexturePickerApply::Texture' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_TexturePickerApply, Param_Index) == 0x000010, "Member 'Rope_broken_C_TexturePickerApply::Param_Index' has a wrong offset!");

// Function rope_broken.rope_broken_C.applyColor
// 0x0010 (0x0010 - 0x0000)
struct Rope_broken_C_ApplyColor final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rope_broken_C_ApplyColor) == 0x000004, "Wrong alignment on Rope_broken_C_ApplyColor");
static_assert(sizeof(Rope_broken_C_ApplyColor) == 0x000010, "Wrong size on Rope_broken_C_ApplyColor");
static_assert(offsetof(Rope_broken_C_ApplyColor, Color) == 0x000000, "Member 'Rope_broken_C_ApplyColor::Color' has a wrong offset!");

// Function rope_broken.rope_broken_C.AnyKey
// 0x0020 (0x0020 - 0x0000)
struct Rope_broken_C_AnyKey final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Pressed;                                           // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Rope_broken_C_AnyKey) == 0x000008, "Wrong alignment on Rope_broken_C_AnyKey");
static_assert(sizeof(Rope_broken_C_AnyKey) == 0x000020, "Wrong size on Rope_broken_C_AnyKey");
static_assert(offsetof(Rope_broken_C_AnyKey, Key) == 0x000000, "Member 'Rope_broken_C_AnyKey::Key' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_AnyKey, Pressed) == 0x000018, "Member 'Rope_broken_C_AnyKey::Pressed' has a wrong offset!");

// Function rope_broken.rope_broken_C.settingsApplied
// 0x00F0 (0x00F0 - 0x0000)
struct Rope_broken_C_SettingsApplied final
{
public:
	struct FStruct_settings                       Settings;                                          // 0x0000(0x00F0)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(Rope_broken_C_SettingsApplied) == 0x000008, "Wrong alignment on Rope_broken_C_SettingsApplied");
static_assert(sizeof(Rope_broken_C_SettingsApplied) == 0x0000F0, "Wrong size on Rope_broken_C_SettingsApplied");
static_assert(offsetof(Rope_broken_C_SettingsApplied, Settings) == 0x000000, "Member 'Rope_broken_C_SettingsApplied::Settings' has a wrong offset!");

// Function rope_broken.rope_broken_C.stuffUpgraded
// 0x0008 (0x0008 - 0x0000)
struct Rope_broken_C_StuffUpgraded final
{
public:
	class AMainGamemode_C*                        GameMode;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rope_broken_C_StuffUpgraded) == 0x000008, "Wrong alignment on Rope_broken_C_StuffUpgraded");
static_assert(sizeof(Rope_broken_C_StuffUpgraded) == 0x000008, "Wrong size on Rope_broken_C_StuffUpgraded");
static_assert(offsetof(Rope_broken_C_StuffUpgraded, GameMode) == 0x000000, "Member 'Rope_broken_C_StuffUpgraded::GameMode' has a wrong offset!");

// Function rope_broken.rope_broken_C.hookTension
// 0x0008 (0x0008 - 0x0000)
struct Rope_broken_C_HookTension final
{
public:
	class AHook_C*                                Hook;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rope_broken_C_HookTension) == 0x000008, "Wrong alignment on Rope_broken_C_HookTension");
static_assert(sizeof(Rope_broken_C_HookTension) == 0x000008, "Wrong size on Rope_broken_C_HookTension");
static_assert(offsetof(Rope_broken_C_HookTension, Hook) == 0x000000, "Member 'Rope_broken_C_HookTension::Hook' has a wrong offset!");

// Function rope_broken.rope_broken_C.cleanSponge
// 0x0010 (0x0010 - 0x0000)
struct Rope_broken_C_CleanSponge final
{
public:
	float                                         Clean;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          Player;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rope_broken_C_CleanSponge) == 0x000008, "Wrong alignment on Rope_broken_C_CleanSponge");
static_assert(sizeof(Rope_broken_C_CleanSponge) == 0x000010, "Wrong size on Rope_broken_C_CleanSponge");
static_assert(offsetof(Rope_broken_C_CleanSponge, Clean) == 0x000000, "Member 'Rope_broken_C_CleanSponge::Clean' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_CleanSponge, Player) == 0x000008, "Member 'Rope_broken_C_CleanSponge::Player' has a wrong offset!");

// Function rope_broken.rope_broken_C.hooked
// 0x0008 (0x0008 - 0x0000)
struct Rope_broken_C_Hooked final
{
public:
	class AHook_C*                                Hook;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rope_broken_C_Hooked) == 0x000008, "Wrong alignment on Rope_broken_C_Hooked");
static_assert(sizeof(Rope_broken_C_Hooked) == 0x000008, "Wrong size on Rope_broken_C_Hooked");
static_assert(offsetof(Rope_broken_C_Hooked, Hook) == 0x000000, "Member 'Rope_broken_C_Hooked::Hook' has a wrong offset!");

// Function rope_broken.rope_broken_C.playerUsedOn
// 0x0090 (0x0090 - 0x0000)
struct Rope_broken_C_PlayerUsedOn final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Rope_broken_C_PlayerUsedOn) == 0x000008, "Wrong alignment on Rope_broken_C_PlayerUsedOn");
static_assert(sizeof(Rope_broken_C_PlayerUsedOn) == 0x000090, "Wrong size on Rope_broken_C_PlayerUsedOn");
static_assert(offsetof(Rope_broken_C_PlayerUsedOn, Player) == 0x000000, "Member 'Rope_broken_C_PlayerUsedOn::Player' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_PlayerUsedOn, Hit) == 0x000008, "Member 'Rope_broken_C_PlayerUsedOn::Hit' has a wrong offset!");

// Function rope_broken.rope_broken_C.slice
// 0x0001 (0x0001 - 0x0000)
struct Rope_broken_C_Slice final
{
public:
	bool                                          Clean;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Rope_broken_C_Slice) == 0x000001, "Wrong alignment on Rope_broken_C_Slice");
static_assert(sizeof(Rope_broken_C_Slice) == 0x000001, "Wrong size on Rope_broken_C_Slice");
static_assert(offsetof(Rope_broken_C_Slice, Clean) == 0x000000, "Member 'Rope_broken_C_Slice::Clean' has a wrong offset!");

// Function rope_broken.rope_broken_C.reachedByExplosion
// 0x0010 (0x0010 - 0x0000)
struct Rope_broken_C_ReachedByExplosion final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rope_broken_C_ReachedByExplosion) == 0x000004, "Wrong alignment on Rope_broken_C_ReachedByExplosion");
static_assert(sizeof(Rope_broken_C_ReachedByExplosion) == 0x000010, "Wrong size on Rope_broken_C_ReachedByExplosion");
static_assert(offsetof(Rope_broken_C_ReachedByExplosion, Location) == 0x000000, "Member 'Rope_broken_C_ReachedByExplosion::Location' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ReachedByExplosion, Damage) == 0x00000C, "Member 'Rope_broken_C_ReachedByExplosion::Damage' has a wrong offset!");

// Function rope_broken.rope_broken_C.playerLookAway
// 0x0008 (0x0008 - 0x0000)
struct Rope_broken_C_PlayerLookAway final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rope_broken_C_PlayerLookAway) == 0x000008, "Wrong alignment on Rope_broken_C_PlayerLookAway");
static_assert(sizeof(Rope_broken_C_PlayerLookAway) == 0x000008, "Wrong size on Rope_broken_C_PlayerLookAway");
static_assert(offsetof(Rope_broken_C_PlayerLookAway, Player) == 0x000000, "Member 'Rope_broken_C_PlayerLookAway::Player' has a wrong offset!");

// Function rope_broken.rope_broken_C.stepped
// 0x0004 (0x0004 - 0x0000)
struct Rope_broken_C_Stepped final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rope_broken_C_Stepped) == 0x000004, "Wrong alignment on Rope_broken_C_Stepped");
static_assert(sizeof(Rope_broken_C_Stepped) == 0x000004, "Wrong size on Rope_broken_C_Stepped");
static_assert(offsetof(Rope_broken_C_Stepped, Volume) == 0x000000, "Member 'Rope_broken_C_Stepped::Volume' has a wrong offset!");

// Function rope_broken.rope_broken_C.ActionName
// 0x00A0 (0x00A0 - 0x0000)
struct Rope_broken_C_ActionName final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class FString                                 Param_Name;                                        // 0x0090(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Rope_broken_C_ActionName) == 0x000008, "Wrong alignment on Rope_broken_C_ActionName");
static_assert(sizeof(Rope_broken_C_ActionName) == 0x0000A0, "Wrong size on Rope_broken_C_ActionName");
static_assert(offsetof(Rope_broken_C_ActionName, Player) == 0x000000, "Member 'Rope_broken_C_ActionName::Player' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ActionName, Hit) == 0x000008, "Member 'Rope_broken_C_ActionName::Hit' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ActionName, Param_Name) == 0x000090, "Member 'Rope_broken_C_ActionName::Param_Name' has a wrong offset!");

// Function rope_broken.rope_broken_C.accumulateTemperature
// 0x0008 (0x0008 - 0x0000)
struct Rope_broken_C_AccumulateTemperature final
{
public:
	float                                         Temperature;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rope_broken_C_AccumulateTemperature) == 0x000004, "Wrong alignment on Rope_broken_C_AccumulateTemperature");
static_assert(sizeof(Rope_broken_C_AccumulateTemperature) == 0x000008, "Wrong size on Rope_broken_C_AccumulateTemperature");
static_assert(offsetof(Rope_broken_C_AccumulateTemperature, Temperature) == 0x000000, "Member 'Rope_broken_C_AccumulateTemperature::Temperature' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_AccumulateTemperature, Speed) == 0x000004, "Member 'Rope_broken_C_AccumulateTemperature::Speed' has a wrong offset!");

// Function rope_broken.rope_broken_C.addTemperature
// 0x0004 (0x0004 - 0x0000)
struct Rope_broken_C_AddTemperature final
{
public:
	float                                         Temperature;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rope_broken_C_AddTemperature) == 0x000004, "Wrong alignment on Rope_broken_C_AddTemperature");
static_assert(sizeof(Rope_broken_C_AddTemperature) == 0x000004, "Wrong size on Rope_broken_C_AddTemperature");
static_assert(offsetof(Rope_broken_C_AddTemperature, Temperature) == 0x000000, "Member 'Rope_broken_C_AddTemperature::Temperature' has a wrong offset!");

// Function rope_broken.rope_broken_C.playerHandAnyKey
// 0x0028 (0x0028 - 0x0000)
struct Rope_broken_C_PlayerHandAnyKey final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   Key;                                               // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Pressed;                                           // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Rope_broken_C_PlayerHandAnyKey) == 0x000008, "Wrong alignment on Rope_broken_C_PlayerHandAnyKey");
static_assert(sizeof(Rope_broken_C_PlayerHandAnyKey) == 0x000028, "Wrong size on Rope_broken_C_PlayerHandAnyKey");
static_assert(offsetof(Rope_broken_C_PlayerHandAnyKey, Player) == 0x000000, "Member 'Rope_broken_C_PlayerHandAnyKey::Player' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_PlayerHandAnyKey, Key) == 0x000008, "Member 'Rope_broken_C_PlayerHandAnyKey::Key' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_PlayerHandAnyKey, Pressed) == 0x000020, "Member 'Rope_broken_C_PlayerHandAnyKey::Pressed' has a wrong offset!");

// Function rope_broken.rope_broken_C.playerHandMouse
// 0x0010 (0x0010 - 0x0000)
struct Rope_broken_C_PlayerHandMouse final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Mouse;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rope_broken_C_PlayerHandMouse) == 0x000008, "Wrong alignment on Rope_broken_C_PlayerHandMouse");
static_assert(sizeof(Rope_broken_C_PlayerHandMouse) == 0x000010, "Wrong size on Rope_broken_C_PlayerHandMouse");
static_assert(offsetof(Rope_broken_C_PlayerHandMouse, Player) == 0x000000, "Member 'Rope_broken_C_PlayerHandMouse::Player' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_PlayerHandMouse, Mouse) == 0x000008, "Member 'Rope_broken_C_PlayerHandMouse::Mouse' has a wrong offset!");

// Function rope_broken.rope_broken_C.playerHandMouseWheel
// 0x0010 (0x0010 - 0x0000)
struct Rope_broken_C_PlayerHandMouseWheel final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WheelDelta;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rope_broken_C_PlayerHandMouseWheel) == 0x000008, "Wrong alignment on Rope_broken_C_PlayerHandMouseWheel");
static_assert(sizeof(Rope_broken_C_PlayerHandMouseWheel) == 0x000010, "Wrong size on Rope_broken_C_PlayerHandMouseWheel");
static_assert(offsetof(Rope_broken_C_PlayerHandMouseWheel, Player) == 0x000000, "Member 'Rope_broken_C_PlayerHandMouseWheel::Player' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_PlayerHandMouseWheel, WheelDelta) == 0x000008, "Member 'Rope_broken_C_PlayerHandMouseWheel::WheelDelta' has a wrong offset!");

// Function rope_broken.rope_broken_C.playerHandRelease_LMB
// 0x0008 (0x0008 - 0x0000)
struct Rope_broken_C_PlayerHandRelease_LMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rope_broken_C_PlayerHandRelease_LMB) == 0x000008, "Wrong alignment on Rope_broken_C_PlayerHandRelease_LMB");
static_assert(sizeof(Rope_broken_C_PlayerHandRelease_LMB) == 0x000008, "Wrong size on Rope_broken_C_PlayerHandRelease_LMB");
static_assert(offsetof(Rope_broken_C_PlayerHandRelease_LMB, Player) == 0x000000, "Member 'Rope_broken_C_PlayerHandRelease_LMB::Player' has a wrong offset!");

// Function rope_broken.rope_broken_C.playerHandRelease_RMB
// 0x0008 (0x0008 - 0x0000)
struct Rope_broken_C_PlayerHandRelease_RMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rope_broken_C_PlayerHandRelease_RMB) == 0x000008, "Wrong alignment on Rope_broken_C_PlayerHandRelease_RMB");
static_assert(sizeof(Rope_broken_C_PlayerHandRelease_RMB) == 0x000008, "Wrong size on Rope_broken_C_PlayerHandRelease_RMB");
static_assert(offsetof(Rope_broken_C_PlayerHandRelease_RMB, Player) == 0x000000, "Member 'Rope_broken_C_PlayerHandRelease_RMB::Player' has a wrong offset!");

// Function rope_broken.rope_broken_C.exploded
// 0x0010 (0x0010 - 0x0000)
struct Rope_broken_C_Exploded final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rope_broken_C_Exploded) == 0x000004, "Wrong alignment on Rope_broken_C_Exploded");
static_assert(sizeof(Rope_broken_C_Exploded) == 0x000010, "Wrong size on Rope_broken_C_Exploded");
static_assert(offsetof(Rope_broken_C_Exploded, Damage) == 0x000000, "Member 'Rope_broken_C_Exploded::Damage' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_Exploded, Location) == 0x000004, "Member 'Rope_broken_C_Exploded::Location' has a wrong offset!");

// Function rope_broken.rope_broken_C.playerHandUse_LMB
// 0x0008 (0x0008 - 0x0000)
struct Rope_broken_C_PlayerHandUse_LMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rope_broken_C_PlayerHandUse_LMB) == 0x000008, "Wrong alignment on Rope_broken_C_PlayerHandUse_LMB");
static_assert(sizeof(Rope_broken_C_PlayerHandUse_LMB) == 0x000008, "Wrong size on Rope_broken_C_PlayerHandUse_LMB");
static_assert(offsetof(Rope_broken_C_PlayerHandUse_LMB, Player) == 0x000000, "Member 'Rope_broken_C_PlayerHandUse_LMB::Player' has a wrong offset!");

// Function rope_broken.rope_broken_C.playerHandUse_RMB
// 0x0008 (0x0008 - 0x0000)
struct Rope_broken_C_PlayerHandUse_RMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rope_broken_C_PlayerHandUse_RMB) == 0x000008, "Wrong alignment on Rope_broken_C_PlayerHandUse_RMB");
static_assert(sizeof(Rope_broken_C_PlayerHandUse_RMB) == 0x000008, "Wrong size on Rope_broken_C_PlayerHandUse_RMB");
static_assert(offsetof(Rope_broken_C_PlayerHandUse_RMB, Player) == 0x000000, "Member 'Rope_broken_C_PlayerHandUse_RMB::Player' has a wrong offset!");

// Function rope_broken.rope_broken_C.actionOptionIndex
// 0x0098 (0x0098 - 0x0000)
struct Rope_broken_C_ActionOptionIndex final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	Enum_interactionActions                       Action;                                            // 0x0090(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rope_broken_C_ActionOptionIndex) == 0x000008, "Wrong alignment on Rope_broken_C_ActionOptionIndex");
static_assert(sizeof(Rope_broken_C_ActionOptionIndex) == 0x000098, "Wrong size on Rope_broken_C_ActionOptionIndex");
static_assert(offsetof(Rope_broken_C_ActionOptionIndex, Player) == 0x000000, "Member 'Rope_broken_C_ActionOptionIndex::Player' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ActionOptionIndex, Hit) == 0x000008, "Member 'Rope_broken_C_ActionOptionIndex::Hit' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ActionOptionIndex, Action) == 0x000090, "Member 'Rope_broken_C_ActionOptionIndex::Action' has a wrong offset!");

// Function rope_broken.rope_broken_C.receivedPhyiscsDamage
// 0x008C (0x008C - 0x0000)
struct Rope_broken_C_ReceivedPhyiscsDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hot;                                               // 0x0004(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Rope_broken_C_ReceivedPhyiscsDamage) == 0x000004, "Wrong alignment on Rope_broken_C_ReceivedPhyiscsDamage");
static_assert(sizeof(Rope_broken_C_ReceivedPhyiscsDamage) == 0x00008C, "Wrong size on Rope_broken_C_ReceivedPhyiscsDamage");
static_assert(offsetof(Rope_broken_C_ReceivedPhyiscsDamage, Damage) == 0x000000, "Member 'Rope_broken_C_ReceivedPhyiscsDamage::Damage' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ReceivedPhyiscsDamage, Hot) == 0x000004, "Member 'Rope_broken_C_ReceivedPhyiscsDamage::Hot' has a wrong offset!");

// Function rope_broken.rope_broken_C.ignite
// 0x0004 (0x0004 - 0x0000)
struct Rope_broken_C_Ignite final
{
public:
	float                                         Fuel;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rope_broken_C_Ignite) == 0x000004, "Wrong alignment on Rope_broken_C_Ignite");
static_assert(sizeof(Rope_broken_C_Ignite) == 0x000004, "Wrong size on Rope_broken_C_Ignite");
static_assert(offsetof(Rope_broken_C_Ignite, Fuel) == 0x000000, "Member 'Rope_broken_C_Ignite::Fuel' has a wrong offset!");

// Function rope_broken.rope_broken_C.fireDamage
// 0x0004 (0x0004 - 0x0000)
struct Rope_broken_C_FireDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rope_broken_C_FireDamage) == 0x000004, "Wrong alignment on Rope_broken_C_FireDamage");
static_assert(sizeof(Rope_broken_C_FireDamage) == 0x000004, "Wrong size on Rope_broken_C_FireDamage");
static_assert(offsetof(Rope_broken_C_FireDamage, Damage) == 0x000000, "Member 'Rope_broken_C_FireDamage::Damage' has a wrong offset!");

// Function rope_broken.rope_broken_C.steppedOn
// 0x0090 (0x0090 - 0x0000)
struct Rope_broken_C_SteppedOn final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Rope_broken_C_SteppedOn) == 0x000008, "Wrong alignment on Rope_broken_C_SteppedOn");
static_assert(sizeof(Rope_broken_C_SteppedOn) == 0x000090, "Wrong size on Rope_broken_C_SteppedOn");
static_assert(offsetof(Rope_broken_C_SteppedOn, Player) == 0x000000, "Member 'Rope_broken_C_SteppedOn::Player' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_SteppedOn, Hit) == 0x000008, "Member 'Rope_broken_C_SteppedOn::Hit' has a wrong offset!");

// Function rope_broken.rope_broken_C.setKey
// 0x0010 (0x0010 - 0x0000)
struct Rope_broken_C_SetKey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Rope_broken_C_SetKey) == 0x000008, "Wrong alignment on Rope_broken_C_SetKey");
static_assert(sizeof(Rope_broken_C_SetKey) == 0x000010, "Wrong size on Rope_broken_C_SetKey");
static_assert(offsetof(Rope_broken_C_SetKey, Key) == 0x000000, "Member 'Rope_broken_C_SetKey::Key' has a wrong offset!");

// Function rope_broken.rope_broken_C.addDamage
// 0x00A8 (0x00A8 - 0x0000)
struct Rope_broken_C_AddDamage final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x000C(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                Impact;                                            // 0x0094(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipSetting;                                       // 0x00A0(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Rope_broken_C_AddDamage) == 0x000008, "Wrong alignment on Rope_broken_C_AddDamage");
static_assert(sizeof(Rope_broken_C_AddDamage) == 0x0000A8, "Wrong size on Rope_broken_C_AddDamage");
static_assert(offsetof(Rope_broken_C_AddDamage, Actor) == 0x000000, "Member 'Rope_broken_C_AddDamage::Actor' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_AddDamage, Damage) == 0x000008, "Member 'Rope_broken_C_AddDamage::Damage' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_AddDamage, Hit) == 0x00000C, "Member 'Rope_broken_C_AddDamage::Hit' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_AddDamage, Impact) == 0x000094, "Member 'Rope_broken_C_AddDamage::Impact' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_AddDamage, SkipSetting) == 0x0000A0, "Member 'Rope_broken_C_AddDamage::SkipSetting' has a wrong offset!");

// Function rope_broken.rope_broken_C.setPropProps
// 0x0003 (0x0003 - 0x0000)
struct Rope_broken_C_SetPropProps final
{
public:
	bool                                          Static;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Frozen;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Active;                                            // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Rope_broken_C_SetPropProps) == 0x000001, "Wrong alignment on Rope_broken_C_SetPropProps");
static_assert(sizeof(Rope_broken_C_SetPropProps) == 0x000003, "Wrong size on Rope_broken_C_SetPropProps");
static_assert(offsetof(Rope_broken_C_SetPropProps, Static) == 0x000000, "Member 'Rope_broken_C_SetPropProps::Static' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_SetPropProps, Frozen) == 0x000001, "Member 'Rope_broken_C_SetPropProps::Frozen' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_SetPropProps, Active) == 0x000002, "Member 'Rope_broken_C_SetPropProps::Active' has a wrong offset!");

// Function rope_broken.rope_broken_C.virus
// 0x0001 (0x0001 - 0x0000)
struct Rope_broken_C_Virus final
{
public:
	bool                                          Activate;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Rope_broken_C_Virus) == 0x000001, "Wrong alignment on Rope_broken_C_Virus");
static_assert(sizeof(Rope_broken_C_Virus) == 0x000001, "Wrong size on Rope_broken_C_Virus");
static_assert(offsetof(Rope_broken_C_Virus, Activate) == 0x000000, "Member 'Rope_broken_C_Virus::Activate' has a wrong offset!");

// Function rope_broken.rope_broken_C.leaveWaterOrigin
// 0x0008 (0x0008 - 0x0000)
struct Rope_broken_C_LeaveWaterOrigin final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rope_broken_C_LeaveWaterOrigin) == 0x000008, "Wrong alignment on Rope_broken_C_LeaveWaterOrigin");
static_assert(sizeof(Rope_broken_C_LeaveWaterOrigin) == 0x000008, "Wrong size on Rope_broken_C_LeaveWaterOrigin");
static_assert(offsetof(Rope_broken_C_LeaveWaterOrigin, Water) == 0x000000, "Member 'Rope_broken_C_LeaveWaterOrigin::Water' has a wrong offset!");

// Function rope_broken.rope_broken_C.enterWaterOrigin
// 0x0008 (0x0008 - 0x0000)
struct Rope_broken_C_EnterWaterOrigin final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rope_broken_C_EnterWaterOrigin) == 0x000008, "Wrong alignment on Rope_broken_C_EnterWaterOrigin");
static_assert(sizeof(Rope_broken_C_EnterWaterOrigin) == 0x000008, "Wrong size on Rope_broken_C_EnterWaterOrigin");
static_assert(offsetof(Rope_broken_C_EnterWaterOrigin, Water) == 0x000000, "Member 'Rope_broken_C_EnterWaterOrigin::Water' has a wrong offset!");

// Function rope_broken.rope_broken_C.leaveWater
// 0x0008 (0x0008 - 0x0000)
struct Rope_broken_C_LeaveWater final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rope_broken_C_LeaveWater) == 0x000008, "Wrong alignment on Rope_broken_C_LeaveWater");
static_assert(sizeof(Rope_broken_C_LeaveWater) == 0x000008, "Wrong size on Rope_broken_C_LeaveWater");
static_assert(offsetof(Rope_broken_C_LeaveWater, Water) == 0x000000, "Member 'Rope_broken_C_LeaveWater::Water' has a wrong offset!");

// Function rope_broken.rope_broken_C.enterWater
// 0x0008 (0x0008 - 0x0000)
struct Rope_broken_C_EnterWater final
{
public:
	class AWaterVolume_C*                         Water;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rope_broken_C_EnterWater) == 0x000008, "Wrong alignment on Rope_broken_C_EnterWater");
static_assert(sizeof(Rope_broken_C_EnterWater) == 0x000008, "Wrong size on Rope_broken_C_EnterWater");
static_assert(offsetof(Rope_broken_C_EnterWater, Water) == 0x000000, "Member 'Rope_broken_C_EnterWater::Water' has a wrong offset!");

// Function rope_broken.rope_broken_C.ImpactDamage
// 0x00A8 (0x00A8 - 0x0000)
struct Rope_broken_C_ImpactDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0004(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0090(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Impact;                                            // 0x0098(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rope_broken_C_ImpactDamage) == 0x000008, "Wrong alignment on Rope_broken_C_ImpactDamage");
static_assert(sizeof(Rope_broken_C_ImpactDamage) == 0x0000A8, "Wrong size on Rope_broken_C_ImpactDamage");
static_assert(offsetof(Rope_broken_C_ImpactDamage, Damage) == 0x000000, "Member 'Rope_broken_C_ImpactDamage::Damage' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ImpactDamage, Hit) == 0x000004, "Member 'Rope_broken_C_ImpactDamage::Hit' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ImpactDamage, Actor) == 0x000090, "Member 'Rope_broken_C_ImpactDamage::Actor' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ImpactDamage, Impact) == 0x000098, "Member 'Rope_broken_C_ImpactDamage::Impact' has a wrong offset!");

// Function rope_broken.rope_broken_C.attach_a
// 0x0138 (0x0138 - 0x0000)
struct Rope_broken_C_Attach_a final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Loc_A;                                             // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Loc_B;                                             // 0x0014(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Param_Dist;                                        // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x0024(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x00B0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Rope_broken_C_Attach_a) == 0x000008, "Wrong alignment on Rope_broken_C_Attach_a");
static_assert(sizeof(Rope_broken_C_Attach_a) == 0x000138, "Wrong size on Rope_broken_C_Attach_a");
static_assert(offsetof(Rope_broken_C_Attach_a, Actor) == 0x000000, "Member 'Rope_broken_C_Attach_a::Actor' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_Attach_a, Loc_A) == 0x000008, "Member 'Rope_broken_C_Attach_a::Loc_A' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_Attach_a, Loc_B) == 0x000014, "Member 'Rope_broken_C_Attach_a::Loc_B' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_Attach_a, Param_Dist) == 0x000020, "Member 'Rope_broken_C_Attach_a::Param_Dist' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_Attach_a, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x000024, "Member 'Rope_broken_C_Attach_a::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_Attach_a, CallFunc_K2_SetActorLocation_ReturnValue) == 0x0000AC, "Member 'Rope_broken_C_Attach_a::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_Attach_a, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x0000B0, "Member 'Rope_broken_C_Attach_a::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");

// Function rope_broken.rope_broken_C.setLength
// 0x0008 (0x0008 - 0x0000)
struct Rope_broken_C_SetLength final
{
public:
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rope_broken_C_SetLength) == 0x000004, "Wrong alignment on Rope_broken_C_SetLength");
static_assert(sizeof(Rope_broken_C_SetLength) == 0x000008, "Wrong size on Rope_broken_C_SetLength");
static_assert(offsetof(Rope_broken_C_SetLength, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000000, "Member 'Rope_broken_C_SetLength::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_SetLength, CallFunc_FClamp_ReturnValue) == 0x000004, "Member 'Rope_broken_C_SetLength::CallFunc_FClamp_ReturnValue' has a wrong offset!");

// Function rope_broken.rope_broken_C.canBePutInContainer
// 0x0001 (0x0001 - 0x0000)
struct Rope_broken_C_CanBePutInContainer final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Rope_broken_C_CanBePutInContainer) == 0x000001, "Wrong alignment on Rope_broken_C_CanBePutInContainer");
static_assert(sizeof(Rope_broken_C_CanBePutInContainer) == 0x000001, "Wrong size on Rope_broken_C_CanBePutInContainer");
static_assert(offsetof(Rope_broken_C_CanBePutInContainer, Return) == 0x000000, "Member 'Rope_broken_C_CanBePutInContainer::Return' has a wrong offset!");

// Function rope_broken.rope_broken_C.asProp
// 0x0008 (0x0008 - 0x0000)
struct Rope_broken_C_AsProp final
{
public:
	class AProp_C*                                Return;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rope_broken_C_AsProp) == 0x000008, "Wrong alignment on Rope_broken_C_AsProp");
static_assert(sizeof(Rope_broken_C_AsProp) == 0x000008, "Wrong size on Rope_broken_C_AsProp");
static_assert(offsetof(Rope_broken_C_AsProp, Return) == 0x000000, "Member 'Rope_broken_C_AsProp::Return' has a wrong offset!");

// Function rope_broken.rope_broken_C.canPickup
// 0x0001 (0x0001 - 0x0000)
struct Rope_broken_C_CanPickup final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Rope_broken_C_CanPickup) == 0x000001, "Wrong alignment on Rope_broken_C_CanPickup");
static_assert(sizeof(Rope_broken_C_CanPickup) == 0x000001, "Wrong size on Rope_broken_C_CanPickup");
static_assert(offsetof(Rope_broken_C_CanPickup, Return) == 0x000000, "Member 'Rope_broken_C_CanPickup::Return' has a wrong offset!");

// Function rope_broken.rope_broken_C.noRespawn
// 0x0002 (0x0002 - 0x0000)
struct Rope_broken_C_NoRespawn final
{
public:
	bool                                          Param_NoRespawn;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Rope_broken_C_NoRespawn) == 0x000001, "Wrong alignment on Rope_broken_C_NoRespawn");
static_assert(sizeof(Rope_broken_C_NoRespawn) == 0x000002, "Wrong size on Rope_broken_C_NoRespawn");
static_assert(offsetof(Rope_broken_C_NoRespawn, Param_NoRespawn) == 0x000000, "Member 'Rope_broken_C_NoRespawn::Param_NoRespawn' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_NoRespawn, Return) == 0x000001, "Member 'Rope_broken_C_NoRespawn::Return' has a wrong offset!");

// Function rope_broken.rope_broken_C.lookAt
// 0x00B8 (0x00B8 - 0x0000)
struct Rope_broken_C_LookAt final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          Return;                                            // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Text;                                              // 0x0098(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    boundObjectReplace;                                // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Number;                                            // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rope_broken_C_LookAt) == 0x000008, "Wrong alignment on Rope_broken_C_LookAt");
static_assert(sizeof(Rope_broken_C_LookAt) == 0x0000B8, "Wrong size on Rope_broken_C_LookAt");
static_assert(offsetof(Rope_broken_C_LookAt, Player) == 0x000000, "Member 'Rope_broken_C_LookAt::Player' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_LookAt, Hit) == 0x000008, "Member 'Rope_broken_C_LookAt::Hit' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_LookAt, Return) == 0x000090, "Member 'Rope_broken_C_LookAt::Return' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_LookAt, Text) == 0x000098, "Member 'Rope_broken_C_LookAt::Text' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_LookAt, boundObjectReplace) == 0x0000A8, "Member 'Rope_broken_C_LookAt::boundObjectReplace' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_LookAt, Number) == 0x0000B0, "Member 'Rope_broken_C_LookAt::Number' has a wrong offset!");

// Function rope_broken.rope_broken_C.isButtonUsed
// 0x0001 (0x0001 - 0x0000)
struct Rope_broken_C_IsButtonUsed final
{
public:
	bool                                          Failed;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Rope_broken_C_IsButtonUsed) == 0x000001, "Wrong alignment on Rope_broken_C_IsButtonUsed");
static_assert(sizeof(Rope_broken_C_IsButtonUsed) == 0x000001, "Wrong size on Rope_broken_C_IsButtonUsed");
static_assert(offsetof(Rope_broken_C_IsButtonUsed, Failed) == 0x000000, "Member 'Rope_broken_C_IsButtonUsed::Failed' has a wrong offset!");

// Function rope_broken.rope_broken_C.landedOn
// 0x0010 (0x0010 - 0x0000)
struct Rope_broken_C_LandedOn final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreFallDamage;                                  // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Rope_broken_C_LandedOn) == 0x000008, "Wrong alignment on Rope_broken_C_LandedOn");
static_assert(sizeof(Rope_broken_C_LandedOn) == 0x000010, "Wrong size on Rope_broken_C_LandedOn");
static_assert(offsetof(Rope_broken_C_LandedOn, Player) == 0x000000, "Member 'Rope_broken_C_LandedOn::Player' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_LandedOn, IgnoreFallDamage) == 0x000008, "Member 'Rope_broken_C_LandedOn::IgnoreFallDamage' has a wrong offset!");

// Function rope_broken.rope_broken_C.dreamInv
// 0x0018 (0x0018 - 0x0000)
struct Rope_broken_C_DreamInv final
{
public:
	TArray<struct FStruct_save>                   Invv;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class ADreamBase_C*                           Base;                                              // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rope_broken_C_DreamInv) == 0x000008, "Wrong alignment on Rope_broken_C_DreamInv");
static_assert(sizeof(Rope_broken_C_DreamInv) == 0x000018, "Wrong size on Rope_broken_C_DreamInv");
static_assert(offsetof(Rope_broken_C_DreamInv, Invv) == 0x000000, "Member 'Rope_broken_C_DreamInv::Invv' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_DreamInv, Base) == 0x000010, "Member 'Rope_broken_C_DreamInv::Base' has a wrong offset!");

// Function rope_broken.rope_broken_C.getActionOptions
// 0x0060 (0x0060 - 0x0000)
struct Rope_broken_C_GetActionOptions final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Component;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         Options;                                           // 0x0018(0x0010)(Parm, OutParm)
	TArray<Enum_interactionActions>               Options_enum;                                      // 0x0028(0x0010)(Parm, OutParm)
	TArray<class FText>                           OptionsNamesOverlay;                               // 0x0038(0x0010)(Parm, OutParm)
	uint8                                         Number;                                            // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<Enum_interactionActions>               K2Node_MakeArray_Array;                            // 0x0050(0x0010)(ReferenceParm)
};
static_assert(alignof(Rope_broken_C_GetActionOptions) == 0x000008, "Wrong alignment on Rope_broken_C_GetActionOptions");
static_assert(sizeof(Rope_broken_C_GetActionOptions) == 0x000060, "Wrong size on Rope_broken_C_GetActionOptions");
static_assert(offsetof(Rope_broken_C_GetActionOptions, Player) == 0x000000, "Member 'Rope_broken_C_GetActionOptions::Player' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_GetActionOptions, Component) == 0x000008, "Member 'Rope_broken_C_GetActionOptions::Component' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_GetActionOptions, Actor) == 0x000010, "Member 'Rope_broken_C_GetActionOptions::Actor' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_GetActionOptions, Options) == 0x000018, "Member 'Rope_broken_C_GetActionOptions::Options' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_GetActionOptions, Options_enum) == 0x000028, "Member 'Rope_broken_C_GetActionOptions::Options_enum' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_GetActionOptions, OptionsNamesOverlay) == 0x000038, "Member 'Rope_broken_C_GetActionOptions::OptionsNamesOverlay' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_GetActionOptions, Number) == 0x000048, "Member 'Rope_broken_C_GetActionOptions::Number' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_GetActionOptions, K2Node_MakeArray_Array) == 0x000050, "Member 'Rope_broken_C_GetActionOptions::K2Node_MakeArray_Array' has a wrong offset!");

// Function rope_broken.rope_broken_C.setPath
// 0x0018 (0x0018 - 0x0000)
struct Rope_broken_C_SetPath final
{
public:
	TArray<struct FVector>                        Path;                                              // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Return;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Rope_broken_C_SetPath) == 0x000008, "Wrong alignment on Rope_broken_C_SetPath");
static_assert(sizeof(Rope_broken_C_SetPath) == 0x000018, "Wrong size on Rope_broken_C_SetPath");
static_assert(offsetof(Rope_broken_C_SetPath, Path) == 0x000000, "Member 'Rope_broken_C_SetPath::Path' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_SetPath, Return) == 0x000010, "Member 'Rope_broken_C_SetPath::Return' has a wrong offset!");

// Function rope_broken.rope_broken_C.getOnlyKey
// 0x0010 (0x0010 - 0x0000)
struct Rope_broken_C_GetOnlyKey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Rope_broken_C_GetOnlyKey) == 0x000008, "Wrong alignment on Rope_broken_C_GetOnlyKey");
static_assert(sizeof(Rope_broken_C_GetOnlyKey) == 0x000010, "Wrong size on Rope_broken_C_GetOnlyKey");
static_assert(offsetof(Rope_broken_C_GetOnlyKey, Key) == 0x000000, "Member 'Rope_broken_C_GetOnlyKey::Key' has a wrong offset!");

// Function rope_broken.rope_broken_C.processKeys
// 0x0001 (0x0001 - 0x0000)
struct Rope_broken_C_ProcessKeys final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Rope_broken_C_ProcessKeys) == 0x000001, "Wrong alignment on Rope_broken_C_ProcessKeys");
static_assert(sizeof(Rope_broken_C_ProcessKeys) == 0x000001, "Wrong size on Rope_broken_C_ProcessKeys");
static_assert(offsetof(Rope_broken_C_ProcessKeys, Return) == 0x000000, "Member 'Rope_broken_C_ProcessKeys::Return' has a wrong offset!");

// Function rope_broken.rope_broken_C.canBeUsedHold
// 0x0001 (0x0001 - 0x0000)
struct Rope_broken_C_CanBeUsedHold final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Rope_broken_C_CanBeUsedHold) == 0x000001, "Wrong alignment on Rope_broken_C_CanBeUsedHold");
static_assert(sizeof(Rope_broken_C_CanBeUsedHold) == 0x000001, "Wrong size on Rope_broken_C_CanBeUsedHold");
static_assert(offsetof(Rope_broken_C_CanBeUsedHold, Return) == 0x000000, "Member 'Rope_broken_C_CanBeUsedHold::Return' has a wrong offset!");

// Function rope_broken.rope_broken_C.GetKey
// 0x0010 (0x0010 - 0x0000)
struct Rope_broken_C_GetKey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Rope_broken_C_GetKey) == 0x000008, "Wrong alignment on Rope_broken_C_GetKey");
static_assert(sizeof(Rope_broken_C_GetKey) == 0x000010, "Wrong size on Rope_broken_C_GetKey");
static_assert(offsetof(Rope_broken_C_GetKey, Key) == 0x000000, "Member 'Rope_broken_C_GetKey::Key' has a wrong offset!");

// Function rope_broken.rope_broken_C.toolboxFix
// 0x0010 (0x0010 - 0x0000)
struct Rope_broken_C_ToolboxFix final
{
public:
	class AProp_toolbox_C*                        Toolbox;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Rope_broken_C_ToolboxFix) == 0x000008, "Wrong alignment on Rope_broken_C_ToolboxFix");
static_assert(sizeof(Rope_broken_C_ToolboxFix) == 0x000010, "Wrong size on Rope_broken_C_ToolboxFix");
static_assert(offsetof(Rope_broken_C_ToolboxFix, Toolbox) == 0x000000, "Member 'Rope_broken_C_ToolboxFix::Toolbox' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_ToolboxFix, Return) == 0x000008, "Member 'Rope_broken_C_ToolboxFix::Return' has a wrong offset!");

// Function rope_broken.rope_broken_C.gascanFuel
// 0x0010 (0x0010 - 0x0000)
struct Rope_broken_C_GascanFuel final
{
public:
	class AProp_gascan_C*                         Gascan;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Fueled;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Rope_broken_C_GascanFuel) == 0x000008, "Wrong alignment on Rope_broken_C_GascanFuel");
static_assert(sizeof(Rope_broken_C_GascanFuel) == 0x000010, "Wrong size on Rope_broken_C_GascanFuel");
static_assert(offsetof(Rope_broken_C_GascanFuel, Gascan) == 0x000000, "Member 'Rope_broken_C_GascanFuel::Gascan' has a wrong offset!");
static_assert(offsetof(Rope_broken_C_GascanFuel, Fueled) == 0x000008, "Member 'Rope_broken_C_GascanFuel::Fueled' has a wrong offset!");

// Function rope_broken.rope_broken_C.skipRadial
// 0x0001 (0x0001 - 0x0000)
struct Rope_broken_C_SkipRadial final
{
public:
	bool                                          Skip;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Rope_broken_C_SkipRadial) == 0x000001, "Wrong alignment on Rope_broken_C_SkipRadial");
static_assert(sizeof(Rope_broken_C_SkipRadial) == 0x000001, "Wrong size on Rope_broken_C_SkipRadial");
static_assert(offsetof(Rope_broken_C_SkipRadial, Skip) == 0x000000, "Member 'Rope_broken_C_SkipRadial::Skip' has a wrong offset!");

// Function rope_broken.rope_broken_C.getPriceMultiplier
// 0x0004 (0x0004 - 0x0000)
struct Rope_broken_C_GetPriceMultiplier final
{
public:
	float                                         PriceMult;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Rope_broken_C_GetPriceMultiplier) == 0x000004, "Wrong alignment on Rope_broken_C_GetPriceMultiplier");
static_assert(sizeof(Rope_broken_C_GetPriceMultiplier) == 0x000004, "Wrong size on Rope_broken_C_GetPriceMultiplier");
static_assert(offsetof(Rope_broken_C_GetPriceMultiplier, PriceMult) == 0x000000, "Member 'Rope_broken_C_GetPriceMultiplier::PriceMult' has a wrong offset!");

}

