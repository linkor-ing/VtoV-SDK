#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Ghostcar

#include "Basic.hpp"

#include "Enum_interactionActions_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function ghostcar.ghostcar_C.ExecuteUbergraph_ghostcar
// 0x01C0 (0x01C0 - 0x0000)
struct Ghostcar_C_ExecuteUbergraph_ghostcar final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0028(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AKerfurOmega_C*                         K2Node_DynamicCast_AsKerfur_Omega;                 // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_DynamicCast_AsMain_Player;                  // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IInt_objects_C>        CallFunc_addDamage_self_CastInput;                 // 0x00D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x00EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVelocity_ReturnValue_1;                // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0114(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x0120(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_GetVelocity_ReturnValue_2;                // 0x01A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x01BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Ghostcar_C_ExecuteUbergraph_ghostcar) == 0x000008, "Wrong alignment on Ghostcar_C_ExecuteUbergraph_ghostcar");
static_assert(sizeof(Ghostcar_C_ExecuteUbergraph_ghostcar) == 0x0001C0, "Wrong size on Ghostcar_C_ExecuteUbergraph_ghostcar");
static_assert(offsetof(Ghostcar_C_ExecuteUbergraph_ghostcar, EntryPoint) == 0x000000, "Member 'Ghostcar_C_ExecuteUbergraph_ghostcar::EntryPoint' has a wrong offset!");
static_assert(offsetof(Ghostcar_C_ExecuteUbergraph_ghostcar, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000008, "Member 'Ghostcar_C_ExecuteUbergraph_ghostcar::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Ghostcar_C_ExecuteUbergraph_ghostcar, K2Node_ComponentBoundEvent_OtherActor) == 0x000010, "Member 'Ghostcar_C_ExecuteUbergraph_ghostcar::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(Ghostcar_C_ExecuteUbergraph_ghostcar, K2Node_ComponentBoundEvent_OtherComp) == 0x000018, "Member 'Ghostcar_C_ExecuteUbergraph_ghostcar::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(Ghostcar_C_ExecuteUbergraph_ghostcar, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000020, "Member 'Ghostcar_C_ExecuteUbergraph_ghostcar::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Ghostcar_C_ExecuteUbergraph_ghostcar, K2Node_ComponentBoundEvent_bFromSweep) == 0x000024, "Member 'Ghostcar_C_ExecuteUbergraph_ghostcar::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(Ghostcar_C_ExecuteUbergraph_ghostcar, K2Node_ComponentBoundEvent_SweepResult) == 0x000028, "Member 'Ghostcar_C_ExecuteUbergraph_ghostcar::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(Ghostcar_C_ExecuteUbergraph_ghostcar, K2Node_DynamicCast_AsKerfur_Omega) == 0x0000B0, "Member 'Ghostcar_C_ExecuteUbergraph_ghostcar::K2Node_DynamicCast_AsKerfur_Omega' has a wrong offset!");
static_assert(offsetof(Ghostcar_C_ExecuteUbergraph_ghostcar, K2Node_DynamicCast_bSuccess) == 0x0000B8, "Member 'Ghostcar_C_ExecuteUbergraph_ghostcar::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Ghostcar_C_ExecuteUbergraph_ghostcar, K2Node_DynamicCast_AsMain_Player) == 0x0000C0, "Member 'Ghostcar_C_ExecuteUbergraph_ghostcar::K2Node_DynamicCast_AsMain_Player' has a wrong offset!");
static_assert(offsetof(Ghostcar_C_ExecuteUbergraph_ghostcar, K2Node_DynamicCast_bSuccess_1) == 0x0000C8, "Member 'Ghostcar_C_ExecuteUbergraph_ghostcar::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(Ghostcar_C_ExecuteUbergraph_ghostcar, CallFunc_addDamage_self_CastInput) == 0x0000D0, "Member 'Ghostcar_C_ExecuteUbergraph_ghostcar::CallFunc_addDamage_self_CastInput' has a wrong offset!");
static_assert(offsetof(Ghostcar_C_ExecuteUbergraph_ghostcar, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000E0, "Member 'Ghostcar_C_ExecuteUbergraph_ghostcar::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ghostcar_C_ExecuteUbergraph_ghostcar, CallFunc_GetVelocity_ReturnValue) == 0x0000EC, "Member 'Ghostcar_C_ExecuteUbergraph_ghostcar::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ghostcar_C_ExecuteUbergraph_ghostcar, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x0000F8, "Member 'Ghostcar_C_ExecuteUbergraph_ghostcar::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ghostcar_C_ExecuteUbergraph_ghostcar, CallFunc_GetVelocity_ReturnValue_1) == 0x0000FC, "Member 'Ghostcar_C_ExecuteUbergraph_ghostcar::CallFunc_GetVelocity_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Ghostcar_C_ExecuteUbergraph_ghostcar, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000108, "Member 'Ghostcar_C_ExecuteUbergraph_ghostcar::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ghostcar_C_ExecuteUbergraph_ghostcar, CallFunc_Add_VectorVector_ReturnValue) == 0x000114, "Member 'Ghostcar_C_ExecuteUbergraph_ghostcar::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ghostcar_C_ExecuteUbergraph_ghostcar, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x000120, "Member 'Ghostcar_C_ExecuteUbergraph_ghostcar::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Ghostcar_C_ExecuteUbergraph_ghostcar, CallFunc_GetVelocity_ReturnValue_2) == 0x0001A8, "Member 'Ghostcar_C_ExecuteUbergraph_ghostcar::CallFunc_GetVelocity_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Ghostcar_C_ExecuteUbergraph_ghostcar, CallFunc_VSize_ReturnValue) == 0x0001B4, "Member 'Ghostcar_C_ExecuteUbergraph_ghostcar::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ghostcar_C_ExecuteUbergraph_ghostcar, K2Node_Event_DeltaSeconds) == 0x0001B8, "Member 'Ghostcar_C_ExecuteUbergraph_ghostcar::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(Ghostcar_C_ExecuteUbergraph_ghostcar, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0001BC, "Member 'Ghostcar_C_ExecuteUbergraph_ghostcar::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function ghostcar.ghostcar_C.BndEvt__ghostcar_StaticMesh1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct Ghostcar_C_BndEvt__ghostcar_StaticMesh1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Ghostcar_C_BndEvt__ghostcar_StaticMesh1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on Ghostcar_C_BndEvt__ghostcar_StaticMesh1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(Ghostcar_C_BndEvt__ghostcar_StaticMesh1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on Ghostcar_C_BndEvt__ghostcar_StaticMesh1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(Ghostcar_C_BndEvt__ghostcar_StaticMesh1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'Ghostcar_C_BndEvt__ghostcar_StaticMesh1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Ghostcar_C_BndEvt__ghostcar_StaticMesh1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'Ghostcar_C_BndEvt__ghostcar_StaticMesh1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(Ghostcar_C_BndEvt__ghostcar_StaticMesh1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'Ghostcar_C_BndEvt__ghostcar_StaticMesh1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(Ghostcar_C_BndEvt__ghostcar_StaticMesh1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'Ghostcar_C_BndEvt__ghostcar_StaticMesh1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Ghostcar_C_BndEvt__ghostcar_StaticMesh1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'Ghostcar_C_BndEvt__ghostcar_StaticMesh1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(Ghostcar_C_BndEvt__ghostcar_StaticMesh1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'Ghostcar_C_BndEvt__ghostcar_StaticMesh1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function ghostcar.ghostcar_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct Ghostcar_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ghostcar_C_ReceiveTick) == 0x000004, "Wrong alignment on Ghostcar_C_ReceiveTick");
static_assert(sizeof(Ghostcar_C_ReceiveTick) == 0x000004, "Wrong size on Ghostcar_C_ReceiveTick");
static_assert(offsetof(Ghostcar_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'Ghostcar_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function ghostcar.ghostcar_C.ignoreSave
// 0x0001 (0x0001 - 0x0000)
struct Ghostcar_C_IgnoreSave final
{
public:
	bool                                          Param_IgnoreSave;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Ghostcar_C_IgnoreSave) == 0x000001, "Wrong alignment on Ghostcar_C_IgnoreSave");
static_assert(sizeof(Ghostcar_C_IgnoreSave) == 0x000001, "Wrong size on Ghostcar_C_IgnoreSave");
static_assert(offsetof(Ghostcar_C_IgnoreSave, Param_IgnoreSave) == 0x000000, "Member 'Ghostcar_C_IgnoreSave::Param_IgnoreSave' has a wrong offset!");

// Function ghostcar.ghostcar_C.getActionOptions
// 0x0060 (0x0060 - 0x0000)
struct Ghostcar_C_GetActionOptions final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Component;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         Options;                                           // 0x0018(0x0010)(Parm, OutParm)
	TArray<Enum_interactionActions>               Options_enum;                                      // 0x0028(0x0010)(Parm, OutParm)
	TArray<class FText>                           OptionsNamesOverlay;                               // 0x0038(0x0010)(Parm, OutParm)
	uint8                                         Number;                                            // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<Enum_interactionActions>               K2Node_MakeArray_Array;                            // 0x0050(0x0010)(ReferenceParm)
};
static_assert(alignof(Ghostcar_C_GetActionOptions) == 0x000008, "Wrong alignment on Ghostcar_C_GetActionOptions");
static_assert(sizeof(Ghostcar_C_GetActionOptions) == 0x000060, "Wrong size on Ghostcar_C_GetActionOptions");
static_assert(offsetof(Ghostcar_C_GetActionOptions, Player) == 0x000000, "Member 'Ghostcar_C_GetActionOptions::Player' has a wrong offset!");
static_assert(offsetof(Ghostcar_C_GetActionOptions, Component) == 0x000008, "Member 'Ghostcar_C_GetActionOptions::Component' has a wrong offset!");
static_assert(offsetof(Ghostcar_C_GetActionOptions, Actor) == 0x000010, "Member 'Ghostcar_C_GetActionOptions::Actor' has a wrong offset!");
static_assert(offsetof(Ghostcar_C_GetActionOptions, Options) == 0x000018, "Member 'Ghostcar_C_GetActionOptions::Options' has a wrong offset!");
static_assert(offsetof(Ghostcar_C_GetActionOptions, Options_enum) == 0x000028, "Member 'Ghostcar_C_GetActionOptions::Options_enum' has a wrong offset!");
static_assert(offsetof(Ghostcar_C_GetActionOptions, OptionsNamesOverlay) == 0x000038, "Member 'Ghostcar_C_GetActionOptions::OptionsNamesOverlay' has a wrong offset!");
static_assert(offsetof(Ghostcar_C_GetActionOptions, Number) == 0x000048, "Member 'Ghostcar_C_GetActionOptions::Number' has a wrong offset!");
static_assert(offsetof(Ghostcar_C_GetActionOptions, K2Node_MakeArray_Array) == 0x000050, "Member 'Ghostcar_C_GetActionOptions::K2Node_MakeArray_Array' has a wrong offset!");

}

