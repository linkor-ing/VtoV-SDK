#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Argc_spawn

#include "Basic.hpp"

#include "Argc_spawn_classes.hpp"
#include "Argc_spawn_parameters.hpp"


namespace SDK
{

// Function argc_spawn.argc_spawn_C.check
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AArgc_spawn_C::Check()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("argc_spawn_C", "check");

	UObject::ProcessEvent(Func, nullptr);
}


// Function argc_spawn.argc_spawn_C.exploded
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AArgc_spawn_C::Exploded(float Damage, const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("argc_spawn_C", "exploded");

	Params::Argc_spawn_C_Exploded Parms{};

	Parms.Damage = Damage;
	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function argc_spawn.argc_spawn_C.ExecuteUbergraph_argc_spawn
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AArgc_spawn_C::ExecuteUbergraph_argc_spawn(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("argc_spawn_C", "ExecuteUbergraph_argc_spawn");

	Params::Argc_spawn_C_ExecuteUbergraph_argc_spawn Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}

}

