#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Umg_reactor

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass umg_reactor.umg_reactor_C
// 0x00C0 (0x0320 - 0x0260)
class UUmg_reactor_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCanvasPanel*                           Canvas_tempCursor;                                 // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HorizontalBox;                                     // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_19;                                          // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_image;                                         // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Txt_avg;                                           // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Txt_cri;                                           // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Txt_eff;                                           // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Txt_temp;                                          // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Txt_tempShift;                                     // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Dynmat;                                            // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 Rt;                                                // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AReactor_C*                             Reactor;                                           // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<float>                                 Rods_heights;                                      // 0x02C8(0x0010)(Edit, BlueprintVisible)
	TArray<class UUmg_reactorRod_C*>              Rods;                                              // 0x02D8(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	TArray<float>                                 Rods_heights_lerp;                                 // 0x02E8(0x0010)(Edit, BlueprintVisible)
	float                                         Mid;                                               // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp;                                              // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFloatSpringState                      Spring;                                            // 0x0300(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	float                                         TempShift;                                         // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Effic;                                             // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Crit;                                              // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Efficiency;                                        // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CritA;                                             // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_umg_reactor(int32 EntryPoint);
	void Construct();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void GamemodeBeginPlay();
	void TexturePickerApply(class UUmg_texturePicker_C* Picker, class UTexture2D* Texture, int32 Param_Index);
	void ApplyColor(const struct FLinearColor& Color);
	void PropRenderer_finishProps();
	void GamemodeMakeKeys();
	void AnyKey(const struct FKey& Key, bool Pressed);
	void GamemodePreLoad();
	void Unfocused();
	void SettingsApplied(const struct FStruct_settings& Settings);
	void Unfoc();
	void StuffUpgraded(class AMainGamemode_C* GameMode);
	void SignalSaved();
	void SignalDeleted();
	void DreamInv(TArray<struct FStruct_save>& Invv, class ADreamBase_C** Base);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"umg_reactor_C">();
	}
	static class UUmg_reactor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUmg_reactor_C>();
	}
};
static_assert(alignof(UUmg_reactor_C) == 0x000008, "Wrong alignment on UUmg_reactor_C");
static_assert(sizeof(UUmg_reactor_C) == 0x000320, "Wrong size on UUmg_reactor_C");
static_assert(offsetof(UUmg_reactor_C, UberGraphFrame) == 0x000260, "Member 'UUmg_reactor_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUmg_reactor_C, Canvas_tempCursor) == 0x000268, "Member 'UUmg_reactor_C::Canvas_tempCursor' has a wrong offset!");
static_assert(offsetof(UUmg_reactor_C, HorizontalBox) == 0x000270, "Member 'UUmg_reactor_C::HorizontalBox' has a wrong offset!");
static_assert(offsetof(UUmg_reactor_C, Image_19) == 0x000278, "Member 'UUmg_reactor_C::Image_19' has a wrong offset!");
static_assert(offsetof(UUmg_reactor_C, Img_image) == 0x000280, "Member 'UUmg_reactor_C::Img_image' has a wrong offset!");
static_assert(offsetof(UUmg_reactor_C, Txt_avg) == 0x000288, "Member 'UUmg_reactor_C::Txt_avg' has a wrong offset!");
static_assert(offsetof(UUmg_reactor_C, Txt_cri) == 0x000290, "Member 'UUmg_reactor_C::Txt_cri' has a wrong offset!");
static_assert(offsetof(UUmg_reactor_C, Txt_eff) == 0x000298, "Member 'UUmg_reactor_C::Txt_eff' has a wrong offset!");
static_assert(offsetof(UUmg_reactor_C, Txt_temp) == 0x0002A0, "Member 'UUmg_reactor_C::Txt_temp' has a wrong offset!");
static_assert(offsetof(UUmg_reactor_C, Txt_tempShift) == 0x0002A8, "Member 'UUmg_reactor_C::Txt_tempShift' has a wrong offset!");
static_assert(offsetof(UUmg_reactor_C, Dynmat) == 0x0002B0, "Member 'UUmg_reactor_C::Dynmat' has a wrong offset!");
static_assert(offsetof(UUmg_reactor_C, Rt) == 0x0002B8, "Member 'UUmg_reactor_C::Rt' has a wrong offset!");
static_assert(offsetof(UUmg_reactor_C, Reactor) == 0x0002C0, "Member 'UUmg_reactor_C::Reactor' has a wrong offset!");
static_assert(offsetof(UUmg_reactor_C, Rods_heights) == 0x0002C8, "Member 'UUmg_reactor_C::Rods_heights' has a wrong offset!");
static_assert(offsetof(UUmg_reactor_C, Rods) == 0x0002D8, "Member 'UUmg_reactor_C::Rods' has a wrong offset!");
static_assert(offsetof(UUmg_reactor_C, Rods_heights_lerp) == 0x0002E8, "Member 'UUmg_reactor_C::Rods_heights_lerp' has a wrong offset!");
static_assert(offsetof(UUmg_reactor_C, Mid) == 0x0002F8, "Member 'UUmg_reactor_C::Mid' has a wrong offset!");
static_assert(offsetof(UUmg_reactor_C, Temp) == 0x0002FC, "Member 'UUmg_reactor_C::Temp' has a wrong offset!");
static_assert(offsetof(UUmg_reactor_C, Spring) == 0x000300, "Member 'UUmg_reactor_C::Spring' has a wrong offset!");
static_assert(offsetof(UUmg_reactor_C, TempShift) == 0x000308, "Member 'UUmg_reactor_C::TempShift' has a wrong offset!");
static_assert(offsetof(UUmg_reactor_C, Effic) == 0x00030C, "Member 'UUmg_reactor_C::Effic' has a wrong offset!");
static_assert(offsetof(UUmg_reactor_C, Crit) == 0x000310, "Member 'UUmg_reactor_C::Crit' has a wrong offset!");
static_assert(offsetof(UUmg_reactor_C, Efficiency) == 0x000314, "Member 'UUmg_reactor_C::Efficiency' has a wrong offset!");
static_assert(offsetof(UUmg_reactor_C, CritA) == 0x000318, "Member 'UUmg_reactor_C::CritA' has a wrong offset!");

}

