#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Prop_garbageClump

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Enum_interactionActions_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass prop_garbageClump.prop_garbageClump_C
// 0x0040 (0x0260 - 0x0220)
class AProp_garbageClump_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPhysicsImpactComponent_C*              PhysicsImpact;                                     // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         Type;                                              // 0x0238(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_2B90[0x4];                                     // 0x023C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          HoldPlayer;                                        // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          CanConvert;                                        // 0x0248(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          DelayOnHit;                                        // 0x0249(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B91[0x2];                                     // 0x024A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Max;                                               // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         InitLaunch;                                        // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipSave1;                                         // 0x0254(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B92[0x3];                                     // 0x0255(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LifeSpan;                                          // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_prop_garbageClump(int32 EntryPoint);
	void SetIgnoreSave(bool Ignore);
	void ImpactDamage(float Damage, const struct FHitResult& Hit, class AActor* Actor, const struct FVector& Impact);
	void EnterWater(class AWaterVolume_C* Water);
	void LeaveWater(class AWaterVolume_C* Water);
	void EnterWaterOrigin(class AWaterVolume_C* Water);
	void LeaveWaterOrigin(class AWaterVolume_C* Water);
	void Eaten();
	void Virus(bool Activate);
	void SetPropProps(bool Static, bool Frozen, bool Active);
	void AddDamage(class AActor* Actor, float Damage, const struct FHitResult& Hit, const struct FVector& Impact, bool SkipSetting);
	void SetKey(const class FString& Key);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void BndEvt__prop_garbageClump_StaticMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void Hooked(class AHook_C* Hook);
	void AttemptIgnite();
	void PlayerUsedOn(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void Slice(bool Clean);
	void bitten();
	void ReachedByExplosion(const struct FVector& Location, float Damage);
	void PlayerLookAway(class AMainPlayer_C* Player);
	void Stepped(float Volume);
	void ActionName(class AMainPlayer_C* Player, const struct FHitResult& Hit, const class FString& Param_Name);
	void AccumulateTemperature(float Temperature, float Speed);
	void AddTemperature(float Temperature);
	void MicrowaveElec();
	void PlayerHandAnyKey(class AMainPlayer_C* Player, const struct FKey& Key, bool Pressed);
	void PlayerHandMouse(class AMainPlayer_C* Player, const struct FVector2D& Mouse);
	void PlayerHandMouseWheel(class AMainPlayer_C* Player, float WheelDelta);
	void PlayerHandRelease_LMB(class AMainPlayer_C* Player);
	void PlayerHandRelease_RMB(class AMainPlayer_C* Player);
	void ExtinguishFire();
	void Exploded(float Damage, const struct FVector& Location);
	void PlayerHandUse_LMB(class AMainPlayer_C* Player);
	void PlayerHandUse_RMB(class AMainPlayer_C* Player);
	void ActionOptionIndex(class AMainPlayer_C* Player, const struct FHitResult& Hit, int32 Param_Index, Enum_interactionActions Action);
	void ReceivedPhyiscsDamage();
	void Microwave();
	void Ignite(float Fuel);
	void FireDamage(float Damage);
	void SteppedOn(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void Unhook();
	void DigUp();
	void PhysPreDestroyed();
	void PhysDestroyed();
	void UserConstructionScript();
	void Init();
	void SetTex();
	void GetActionOptions(class AMainPlayer_C* Player, class UPrimitiveComponent* Component, class AActor* Actor, TArray<class FString>* Options, TArray<Enum_interactionActions>* Options_enum, TArray<class FText>* OptionsNamesOverlay);
	void SetPath(const TArray<struct FVector>& Path, bool* Return);
	void GetOnlyKey(class FString* Key);
	void ProcessKeys(bool* Return);
	void CanBeUsedHold(bool* Return);
	void GetKey(class FString* Key);
	void ToolboxFix(class AProp_toolbox_C* Toolbox, bool* Return);
	void GascanFuel(class AProp_gascan_C* Gascan, bool* Fueled);
	void SkipRadial(bool* Skip);
	void SkipPreDelete(bool* Skip);
	void IgnoreSave(bool* Param_IgnoreSave);
	void LoadData(const struct FStruct_save& Data, bool* Return);
	void GetData(struct FStruct_save* Data);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"prop_garbageClump_C">();
	}
	static class AProp_garbageClump_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AProp_garbageClump_C>();
	}
};
static_assert(alignof(AProp_garbageClump_C) == 0x000008, "Wrong alignment on AProp_garbageClump_C");
static_assert(sizeof(AProp_garbageClump_C) == 0x000260, "Wrong size on AProp_garbageClump_C");
static_assert(offsetof(AProp_garbageClump_C, UberGraphFrame) == 0x000220, "Member 'AProp_garbageClump_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AProp_garbageClump_C, PhysicsImpact) == 0x000228, "Member 'AProp_garbageClump_C::PhysicsImpact' has a wrong offset!");
static_assert(offsetof(AProp_garbageClump_C, StaticMesh) == 0x000230, "Member 'AProp_garbageClump_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(AProp_garbageClump_C, Type) == 0x000238, "Member 'AProp_garbageClump_C::Type' has a wrong offset!");
static_assert(offsetof(AProp_garbageClump_C, HoldPlayer) == 0x000240, "Member 'AProp_garbageClump_C::HoldPlayer' has a wrong offset!");
static_assert(offsetof(AProp_garbageClump_C, CanConvert) == 0x000248, "Member 'AProp_garbageClump_C::CanConvert' has a wrong offset!");
static_assert(offsetof(AProp_garbageClump_C, DelayOnHit) == 0x000249, "Member 'AProp_garbageClump_C::DelayOnHit' has a wrong offset!");
static_assert(offsetof(AProp_garbageClump_C, Max) == 0x00024C, "Member 'AProp_garbageClump_C::Max' has a wrong offset!");
static_assert(offsetof(AProp_garbageClump_C, InitLaunch) == 0x000250, "Member 'AProp_garbageClump_C::InitLaunch' has a wrong offset!");
static_assert(offsetof(AProp_garbageClump_C, SkipSave1) == 0x000254, "Member 'AProp_garbageClump_C::SkipSave1' has a wrong offset!");
static_assert(offsetof(AProp_garbageClump_C, LifeSpan) == 0x000258, "Member 'AProp_garbageClump_C::LifeSpan' has a wrong offset!");

}

