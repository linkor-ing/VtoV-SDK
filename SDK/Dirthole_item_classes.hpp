#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Dirthole_item

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Struct_save_structs.hpp"
#include "Actor_save_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass dirthole_item.dirthole_item_C
// 0x0128 (0x0370 - 0x0248)
class ADirthole_item_C final : public AActor_save_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_Dirthole_item_C;                    // 0x0248(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       Sphere1;                                           // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FName                                   Name_Dirthole_item_C;                              // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UClass*                                 Object;                                            // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Grab;                                              // 0x0270(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_271[0xF];                                      // 0x0271(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_save                           Data;                                              // 0x0280(0x00C0)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class UPrimitiveComponent*                    RootComp;                                          // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Ac;                                                // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time;                                              // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         S;                                                 // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      A;                                                 // 0x0358(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          ShowItem;                                          // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_dirthole_item(int32 EntryPoint);
	void ReceiveDestroyed();
	void GamemodeBeginPlay();
	void ReceiveBeginPlay();
	void TexturePickerApply(class UUmg_texturePicker_C* Picker, class UTexture2D* Texture, int32 Param_Index);
	void ApplyColor(const struct FLinearColor& Color);
	void PropRenderer_finishProps();
	void GamemodeMakeKeys();
	void AnyKey(const struct FKey& Param_Key, bool Pressed);
	void GamemodePreLoad();
	void Unfocused();
	void SettingsApplied(const struct FStruct_settings& Settings);
	void Unfoc();
	void StuffUpgraded(class AMainGamemode_C* GameMode);
	void SignalSaved();
	void SignalDeleted();
	void PullOut();
	void buryItem(class AActor* Param_Ac);
	void DreamInv(TArray<struct FStruct_save>& Invv, class ADreamBase_C** Base);
	void LoadData(const struct FStruct_save& Param_Data, bool* Return);
	void GetData(struct FStruct_save* Param_Data);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"dirthole_item_C">();
	}
	static class ADirthole_item_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADirthole_item_C>();
	}
};
static_assert(alignof(ADirthole_item_C) == 0x000010, "Wrong alignment on ADirthole_item_C");
static_assert(sizeof(ADirthole_item_C) == 0x000370, "Wrong size on ADirthole_item_C");
static_assert(offsetof(ADirthole_item_C, UberGraphFrame_Dirthole_item_C) == 0x000248, "Member 'ADirthole_item_C::UberGraphFrame_Dirthole_item_C' has a wrong offset!");
static_assert(offsetof(ADirthole_item_C, Sphere1) == 0x000250, "Member 'ADirthole_item_C::Sphere1' has a wrong offset!");
static_assert(offsetof(ADirthole_item_C, Sphere) == 0x000258, "Member 'ADirthole_item_C::Sphere' has a wrong offset!");
static_assert(offsetof(ADirthole_item_C, Name_Dirthole_item_C) == 0x000260, "Member 'ADirthole_item_C::Name_Dirthole_item_C' has a wrong offset!");
static_assert(offsetof(ADirthole_item_C, Object) == 0x000268, "Member 'ADirthole_item_C::Object' has a wrong offset!");
static_assert(offsetof(ADirthole_item_C, Grab) == 0x000270, "Member 'ADirthole_item_C::Grab' has a wrong offset!");
static_assert(offsetof(ADirthole_item_C, Data) == 0x000280, "Member 'ADirthole_item_C::Data' has a wrong offset!");
static_assert(offsetof(ADirthole_item_C, RootComp) == 0x000340, "Member 'ADirthole_item_C::RootComp' has a wrong offset!");
static_assert(offsetof(ADirthole_item_C, Ac) == 0x000348, "Member 'ADirthole_item_C::Ac' has a wrong offset!");
static_assert(offsetof(ADirthole_item_C, Time) == 0x000350, "Member 'ADirthole_item_C::Time' has a wrong offset!");
static_assert(offsetof(ADirthole_item_C, S) == 0x000354, "Member 'ADirthole_item_C::S' has a wrong offset!");
static_assert(offsetof(ADirthole_item_C, A) == 0x000358, "Member 'ADirthole_item_C::A' has a wrong offset!");
static_assert(offsetof(ADirthole_item_C, ShowItem) == 0x000368, "Member 'ADirthole_item_C::ShowItem' has a wrong offset!");

}

