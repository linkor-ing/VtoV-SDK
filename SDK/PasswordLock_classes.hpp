#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PasswordLock

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "TriggerBase_classes.hpp"
#include "Enum_interactionActions_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass passwordLock.passwordLock_C
// 0x0070 (0x02F8 - 0x0288)
class APasswordLock_C final : public ATriggerBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_PasswordLock_C;                     // 0x0288(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UParticleSystemComponent*               ParticleSystem3;                                   // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cube;                                              // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class APasswordLock_C*                        Pair;                                              // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Pair_key;                                          // 0x02A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	bool                                          Active;                                            // 0x02B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F50[0x7];                                     // 0x02B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADoor_C*                                Door;                                              // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Door_key;                                          // 0x02C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	bool                                          Entering;                                          // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          EnterFalse;                                        // 0x02D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FLASE;                                             // 0x02DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F51[0x5];                                     // 0x02DB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Password;                                          // 0x02E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	bool                                          IsReset;                                           // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Protected;                                         // 0x02F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_passwordLock(int32 EntryPoint);
	void Kicked(bool Kick);
	void Open2();
	void RunTrigger(class AActor* Param_Owner, int32 Param_Index);
	void Reset();
	void SendName(class FName Param_Name);
	void DriveDetached();
	void broken();
	void Player_use(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void broken_fire();
	void Thrown(class AMainPlayer_C* Player);
	void Open(bool Param_Active);
	void FalseEnterEvent();
	void PowerChanged(bool Active_calc, bool Active_downl, bool Active_coords, bool Active_play, bool Active_light);
	void DamageByPlayer(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void ReceiveBeginPlay();
	void UpdateStrAgl();
	void SetActive(bool IsPairCall);
	void beep();
	void Upd();
	void IsButtonUsed(bool* Failed);
	void LookAt(class AMainPlayer_C* Player, const struct FHitResult& Hit, bool* Return, class FString* Text, class UPrimitiveComponent** boundObjectReplace);
	void NoRespawn(bool Param_NoRespawn, bool* Return);
	void CanPickup(bool* Return);
	void AsProp(class AProp_C** Return);
	void CanBePutInContainer(bool* Return);
	void ActionOptionIndex(class AMainPlayer_C* Player, const struct FHitResult& Hit, int32 Param_Index, Enum_interactionActions Action);
	void GamemodeBeginPlay();
	void UserConstructionScript();
	void GetTriggerData(struct FStruct_triggerSave* Data);
	void LoadTriggerData(const struct FStruct_triggerSave& Data, bool* Return);
	void IgnoreSave_trigger(bool* Ignore);
	void ProcessKeys(bool* Return);
	void DreamInv(TArray<struct FStruct_save>& Invv, class ADreamBase_C** Base);
	void GetActionOptions(class AMainPlayer_C* Player, class UPrimitiveComponent* Component, class AActor* Actor, TArray<class FString>* Options, TArray<Enum_interactionActions>* Options_enum, TArray<class FText>* OptionsNamesOverlay);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"passwordLock_C">();
	}
	static class APasswordLock_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<APasswordLock_C>();
	}
};
static_assert(alignof(APasswordLock_C) == 0x000008, "Wrong alignment on APasswordLock_C");
static_assert(sizeof(APasswordLock_C) == 0x0002F8, "Wrong size on APasswordLock_C");
static_assert(offsetof(APasswordLock_C, UberGraphFrame_PasswordLock_C) == 0x000288, "Member 'APasswordLock_C::UberGraphFrame_PasswordLock_C' has a wrong offset!");
static_assert(offsetof(APasswordLock_C, ParticleSystem3) == 0x000290, "Member 'APasswordLock_C::ParticleSystem3' has a wrong offset!");
static_assert(offsetof(APasswordLock_C, Cube) == 0x000298, "Member 'APasswordLock_C::Cube' has a wrong offset!");
static_assert(offsetof(APasswordLock_C, Pair) == 0x0002A0, "Member 'APasswordLock_C::Pair' has a wrong offset!");
static_assert(offsetof(APasswordLock_C, Pair_key) == 0x0002A8, "Member 'APasswordLock_C::Pair_key' has a wrong offset!");
static_assert(offsetof(APasswordLock_C, Active) == 0x0002B8, "Member 'APasswordLock_C::Active' has a wrong offset!");
static_assert(offsetof(APasswordLock_C, Door) == 0x0002C0, "Member 'APasswordLock_C::Door' has a wrong offset!");
static_assert(offsetof(APasswordLock_C, Door_key) == 0x0002C8, "Member 'APasswordLock_C::Door_key' has a wrong offset!");
static_assert(offsetof(APasswordLock_C, Entering) == 0x0002D8, "Member 'APasswordLock_C::Entering' has a wrong offset!");
static_assert(offsetof(APasswordLock_C, EnterFalse) == 0x0002D9, "Member 'APasswordLock_C::EnterFalse' has a wrong offset!");
static_assert(offsetof(APasswordLock_C, FLASE) == 0x0002DA, "Member 'APasswordLock_C::FLASE' has a wrong offset!");
static_assert(offsetof(APasswordLock_C, Password) == 0x0002E0, "Member 'APasswordLock_C::Password' has a wrong offset!");
static_assert(offsetof(APasswordLock_C, IsReset) == 0x0002F0, "Member 'APasswordLock_C::IsReset' has a wrong offset!");
static_assert(offsetof(APasswordLock_C, Protected) == 0x0002F1, "Member 'APasswordLock_C::Protected' has a wrong offset!");

}

