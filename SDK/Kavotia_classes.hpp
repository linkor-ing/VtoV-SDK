#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Kavotia

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Enum_interactionActions_structs.hpp"
#include "AIModule_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass kavotia.kavotia_C
// 0x0090 (0x0550 - 0x04C0)
class AKavotia_C final : public ACharacter
{
public:
	uint8                                         Pad_2A65[0x8];                                     // 0x04B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UParticleSystemComponent*               Light;                                             // 0x04C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight;                                         // 0x04D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x04D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Head;                                              // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        TentacleBallTalk_Cue;                              // 0x04E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        ShootVector;                                       // 0x04F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Charging;                                          // 0x04F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Eff_tentacleBallShootWindup;                       // 0x0500(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArm;                                         // 0x0508(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_a_8DAF4579458C75F47C22D5B63FCE7468;     // 0x0510(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_8DAF4579458C75F47C22D5B63FCE7468; // 0x0514(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A66[0x3];                                     // 0x0515(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x0518(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UKavotia_Skeleton_AnimBlueprint_C*      Anim;                                              // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  LookingAt;                                         // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Shooting;                                          // 0x0530(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A67[0x3];                                     // 0x0531(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ITalk;                                             // 0x0534(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AKavotiaPatrolController_C*             PatrolController;                                  // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         Neg;                                               // 0x0540(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PatrolRadius;                                      // 0x0544(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_kavotia(int32 EntryPoint);
	void OpenDoors();
	void RandCharge();
	void AddDamage(class AActor* Actor, float Damage, const struct FHitResult& Hit, const struct FVector& Impact, bool SkipSetting);
	void Talk();
	void RepeatTalk();
	void LaydownAnim();
	void ChargeSound();
	void Sense();
	void ReceiveTick(float DeltaSeconds);
	void Laydown();
	void ReceiveBeginPlay();
	void Hooked(class AHook_C* Hook);
	void AttemptIgnite();
	void PlayerUsedOn(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void Slice(bool Clean);
	void bitten();
	void ReachedByExplosion(const struct FVector& Location, float Damage);
	void PlayerLookAway(class AMainPlayer_C* Player);
	void Stepped(float Volume);
	void ActionName(class AMainPlayer_C* Player, const struct FHitResult& Hit, const class FString& Param_Name);
	void AccumulateTemperature(float Temperature, float Speed);
	void AddTemperature(float Temperature);
	void MicrowaveElec();
	void PlayerHandAnyKey(class AMainPlayer_C* Player, const struct FKey& Key, bool Pressed);
	void PlayerHandMouse(class AMainPlayer_C* Player, const struct FVector2D& Mouse);
	void PlayerHandMouseWheel(class AMainPlayer_C* Player, float WheelDelta);
	void PlayerHandRelease_LMB(class AMainPlayer_C* Player);
	void PlayerHandRelease_RMB(class AMainPlayer_C* Player);
	void ExtinguishFire();
	void Exploded(float Damage, const struct FVector& Location);
	void PlayerHandUse_LMB(class AMainPlayer_C* Player);
	void PlayerHandUse_RMB(class AMainPlayer_C* Player);
	void ActionOptionIndex(class AMainPlayer_C* Player, const struct FHitResult& Hit, int32 Param_Index, Enum_interactionActions Action);
	void ReceivedPhyiscsDamage();
	void Microwave();
	void Ignite(float Fuel);
	void FireDamage(float Damage);
	void SteppedOn(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void Unhook();
	void DigUp();
	void PhysPreDestroyed();
	void PhysDestroyed();
	void SetKey(const class FString& Key);
	void SetPropProps(bool Static, bool Frozen, bool Active);
	void Virus(bool Activate);
	void Eaten();
	void LeaveWaterOrigin(class AWaterVolume_C* Water);
	void EnterWaterOrigin(class AWaterVolume_C* Water);
	void LeaveWater(class AWaterVolume_C* Water);
	void EnterWater(class AWaterVolume_C* Water);
	void ImpactDamage(float Damage, const struct FHitResult& Hit, class AActor* Actor, const struct FVector& Impact);
	void OnSuccess_D3BAAC524A6477CC38D5F8B2F4C4058D(EPathFollowingResult MovementResult);
	void OnFail_D3BAAC524A6477CC38D5F8B2F4C4058D(EPathFollowingResult MovementResult);
	void OnCompleted_7446BBA34E6333FAAF6EF2BEF3744423(class FName NotifyName);
	void OnBlendOut_7446BBA34E6333FAAF6EF2BEF3744423(class FName NotifyName);
	void OnInterrupted_7446BBA34E6333FAAF6EF2BEF3744423(class FName NotifyName);
	void OnNotifyBegin_7446BBA34E6333FAAF6EF2BEF3744423(class FName NotifyName);
	void OnNotifyEnd_7446BBA34E6333FAAF6EF2BEF3744423(class FName NotifyName);
	void OnCompleted_8A6E6C9B4584D995E2F1F99BEB392865(class FName NotifyName);
	void OnBlendOut_8A6E6C9B4584D995E2F1F99BEB392865(class FName NotifyName);
	void OnInterrupted_8A6E6C9B4584D995E2F1F99BEB392865(class FName NotifyName);
	void OnNotifyBegin_8A6E6C9B4584D995E2F1F99BEB392865(class FName NotifyName);
	void OnNotifyEnd_8A6E6C9B4584D995E2F1F99BEB392865(class FName NotifyName);
	void OnSuccess_09A2354C485D4386CB2E13BC61C68416(EPathFollowingResult MovementResult);
	void OnFail_09A2354C485D4386CB2E13BC61C68416(EPathFollowingResult MovementResult);
	void Timeline_0__UpdateFunc();
	void Timeline_0__FinishedFunc();
	void UserConstructionScript();
	void UpdateTarget(class APawn* Param_LookingAt);
	void SensePawns(class APawn** OutputPin);
	void WalkLoc(struct FVector* RandomLocation);
	void Calm();
	void Alert(class APawn* Param_LookingAt);
	void GetActionOptions(class AMainPlayer_C* Player, class UPrimitiveComponent* Component, class AActor* Actor, TArray<class FString>* Options, TArray<Enum_interactionActions>* Options_enum, TArray<class FText>* OptionsNamesOverlay);
	void SetPath(const TArray<struct FVector>& Path, bool* Return);
	void GetOnlyKey(class FString* Key);
	void ProcessKeys(bool* Return);
	void CanBeUsedHold(bool* Return);
	void GetKey(class FString* Key);
	void ToolboxFix(class AProp_toolbox_C* Toolbox, bool* Return);
	void GascanFuel(class AProp_gascan_C* Gascan, bool* Fueled);
	void SkipRadial(bool* Skip);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"kavotia_C">();
	}
	static class AKavotia_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AKavotia_C>();
	}
};
static_assert(alignof(AKavotia_C) == 0x000010, "Wrong alignment on AKavotia_C");
static_assert(sizeof(AKavotia_C) == 0x000550, "Wrong size on AKavotia_C");
static_assert(offsetof(AKavotia_C, UberGraphFrame) == 0x0004C0, "Member 'AKavotia_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AKavotia_C, Light) == 0x0004C8, "Member 'AKavotia_C::Light' has a wrong offset!");
static_assert(offsetof(AKavotia_C, SpotLight) == 0x0004D0, "Member 'AKavotia_C::SpotLight' has a wrong offset!");
static_assert(offsetof(AKavotia_C, PointLight) == 0x0004D8, "Member 'AKavotia_C::PointLight' has a wrong offset!");
static_assert(offsetof(AKavotia_C, Head) == 0x0004E0, "Member 'AKavotia_C::Head' has a wrong offset!");
static_assert(offsetof(AKavotia_C, TentacleBallTalk_Cue) == 0x0004E8, "Member 'AKavotia_C::TentacleBallTalk_Cue' has a wrong offset!");
static_assert(offsetof(AKavotia_C, ShootVector) == 0x0004F0, "Member 'AKavotia_C::ShootVector' has a wrong offset!");
static_assert(offsetof(AKavotia_C, Charging) == 0x0004F8, "Member 'AKavotia_C::Charging' has a wrong offset!");
static_assert(offsetof(AKavotia_C, Eff_tentacleBallShootWindup) == 0x000500, "Member 'AKavotia_C::Eff_tentacleBallShootWindup' has a wrong offset!");
static_assert(offsetof(AKavotia_C, SpringArm) == 0x000508, "Member 'AKavotia_C::SpringArm' has a wrong offset!");
static_assert(offsetof(AKavotia_C, Timeline_0_a_8DAF4579458C75F47C22D5B63FCE7468) == 0x000510, "Member 'AKavotia_C::Timeline_0_a_8DAF4579458C75F47C22D5B63FCE7468' has a wrong offset!");
static_assert(offsetof(AKavotia_C, Timeline_0__Direction_8DAF4579458C75F47C22D5B63FCE7468) == 0x000514, "Member 'AKavotia_C::Timeline_0__Direction_8DAF4579458C75F47C22D5B63FCE7468' has a wrong offset!");
static_assert(offsetof(AKavotia_C, Timeline_0) == 0x000518, "Member 'AKavotia_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(AKavotia_C, Anim) == 0x000520, "Member 'AKavotia_C::Anim' has a wrong offset!");
static_assert(offsetof(AKavotia_C, LookingAt) == 0x000528, "Member 'AKavotia_C::LookingAt' has a wrong offset!");
static_assert(offsetof(AKavotia_C, Shooting) == 0x000530, "Member 'AKavotia_C::Shooting' has a wrong offset!");
static_assert(offsetof(AKavotia_C, ITalk) == 0x000534, "Member 'AKavotia_C::ITalk' has a wrong offset!");
static_assert(offsetof(AKavotia_C, PatrolController) == 0x000538, "Member 'AKavotia_C::PatrolController' has a wrong offset!");
static_assert(offsetof(AKavotia_C, Neg) == 0x000540, "Member 'AKavotia_C::Neg' has a wrong offset!");
static_assert(offsetof(AKavotia_C, PatrolRadius) == 0x000544, "Member 'AKavotia_C::PatrolRadius' has a wrong offset!");

}

