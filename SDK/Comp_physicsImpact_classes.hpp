#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Comp_physicsImpact

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Enum_interactionActions_structs.hpp"
#include "Struct_dangerProp_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Struct_physSound_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass comp_physicsImpact.comp_physicsImpact_C
// 0x01B8 (0x0268 - 0x00B0)
class UComp_physicsImpact_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class AActor*                                 Owner;                                             // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    HitComponent;                                      // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStruct_physSound                      PhysSoundData;                                     // 0x00C8(0x0040)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             HitResult;                                         // 0x0108(0x0088)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CanHit;                                            // 0x0190(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_191[0x3];                                      // 0x0191(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ImpactForce;                                       // 0x0194(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Mass;                                              // 0x0198(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ImpactThreshold;                                   // 0x019C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Imp_val;                                           // 0x01A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Impact;                                            // 0x01A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Damage;                                            // 0x01A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A9[0x3];                                      // 0x01A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_dangerProp                     DamageData;                                        // 0x01AC(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Health;                                            // 0x01BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   A;                                                 // 0x01C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsScraping;                                        // 0x01C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C9[0x7];                                      // 0x01C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        Scraping;                                          // 0x01D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Vol;                                               // 0x01D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CustomBreak;                                       // 0x01DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          NoSounds;                                          // 0x01DD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Debug;                                             // 0x01DE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1DF[0x1];                                      // 0x01DF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class AProp_C*                                AsProp;                                            // 0x01E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    boundsComponent;                                   // 0x01E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MakeHit;                                           // 0x01F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             HitEvent;                                          // 0x01F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          CustomPhysmat;                                     // 0x0208(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_209[0x7];                                      // 0x0209(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      PhysMat;                                           // 0x0210(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      Dyn;                                               // 0x0218(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         ImpRe;                                             // 0x0228(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFireDamage;                                      // 0x022C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22D[0x3];                                      // 0x022D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             HitOverThreshold;                                  // 0x0230(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UPhysicalMaterial*                      Physmat_override;                                  // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ScrapeTimer;                                       // 0x0248(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            Mesh;                                              // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OwnerIsPlayer;                                     // 0x0258(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          OnGround;                                          // 0x0259(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25A[0x2];                                      // 0x025A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LastHitNormal;                                     // 0x025C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void HitEvent__DelegateSignature(class UPrimitiveComponent* Param_HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Param_Hit);
	void HitOverThreshold__DelegateSignature(const struct FHitResult& Param_Hit, const struct FVector& Param_Impact);
	void ExecuteUbergraph_comp_physicsImpact(int32 EntryPoint);
	void ResetGround();
	void StopScraping();
	void CustomEvent(class UPrimitiveComponent* Param_HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Param_Hit);
	void RestoreHit();
	void HitCpp(class UPrimitiveComponent* Param_HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Param_Hit);
	void SetHit();
	void ResetOnGround();
	void FireDamage(float Param_Damage);
	void UpdateMaterial();
	void RetargetHit(class UPrimitiveComponent* Param_HitComponent);
	void StartScraping();
	void ImpactDamage(float Param_Damage, const struct FHitResult& Param_Hit, class AActor* Actor, const struct FVector& Param_Impact);
	void Init();
	void Hit(class UPrimitiveComponent* Param_HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Param_Hit);
	void HookTension(class AHook_C* Hook);
	void CleanSponge(float Clean, class AMainPlayer_C* Player);
	void Crafted();
	void Hooked(class AHook_C* Hook);
	void AttemptIgnite();
	void PlayerUsedOn(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void Slice(bool Clean);
	void bitten();
	void ReachedByExplosion(const struct FVector& Location, float Param_Damage);
	void PlayerLookAway(class AMainPlayer_C* Player);
	void Stepped(float Volume);
	void ActionName(class AMainPlayer_C* Player, const struct FHitResult& Hit, const class FString& Param_Name);
	void AccumulateTemperature(float Temperature, float Speed);
	void AddTemperature(float Temperature);
	void MicrowaveElec();
	void PlayerHandAnyKey(class AMainPlayer_C* Player, const struct FKey& Key, bool Pressed);
	void PlayerHandMouse(class AMainPlayer_C* Player, const struct FVector2D& Mouse);
	void PlayerHandMouseWheel(class AMainPlayer_C* Player, float WheelDelta);
	void PlayerHandRelease_LMB(class AMainPlayer_C* Player);
	void PlayerHandRelease_RMB(class AMainPlayer_C* Player);
	void ExtinguishFire();
	void Exploded(float Param_Damage, const struct FVector& Location);
	void PlayerHandUse_LMB(class AMainPlayer_C* Player);
	void PlayerHandUse_RMB(class AMainPlayer_C* Player);
	void ActionOptionIndex(class AMainPlayer_C* Player, const struct FHitResult& Hit, Enum_interactionActions Action);
	void ReceivedPhyiscsDamage(float Param_Damage, const struct FHitResult& Hot);
	void Microwave();
	void Ignite(float Fuel);
	void SteppedOn(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void Unhook();
	void DigUp();
	void PhysPreDestroyed();
	void PhysDestroyed();
	void SetKey(const class FString& Key);
	void AddDamage(class AActor* Actor, float Param_Damage, const struct FHitResult& Hit, const struct FVector& Param_Impact, bool SkipSetting);
	void SetPropProps(bool Static, bool Frozen, bool Active);
	void Virus(bool Param_Activate);
	void Eaten();
	void LeaveWaterOrigin(class AWaterVolume_C* Water);
	void EnterWaterOrigin(class AWaterVolume_C* Water);
	void LeaveWater(class AWaterVolume_C* Water);
	void EnterWater(class AWaterVolume_C* Water);
	void GeLens(class UPrimitiveComponent* InputPin, float* Lin, float* Ang);
	void MakePhysSound();
	void ToolboxFix(class AProp_toolbox_C* Toolbox, bool* Return);
	void GetKey(class FString* Key);
	void CanBeUsedHold(bool* Return);
	void ProcessKeys(bool* Return);
	void GetOnlyKey(class FString* Key);
	void SetPath(const TArray<struct FVector>& Path, bool* Return);
	void GetActionOptions(class AMainPlayer_C* Player, class UPrimitiveComponent* Component, class AActor* Actor, TArray<class FString>* Options, TArray<Enum_interactionActions>* Options_enum, TArray<class FText>* OptionsNamesOverlay, uint8* Number);
	void GascanFuel(class AProp_gascan_C* Gascan, bool* Fueled);
	void SkipRadial(bool* Skip);
	void GetPriceMultiplier(float* PriceMult);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"comp_physicsImpact_C">();
	}
	static class UComp_physicsImpact_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UComp_physicsImpact_C>();
	}
};
static_assert(alignof(UComp_physicsImpact_C) == 0x000008, "Wrong alignment on UComp_physicsImpact_C");
static_assert(sizeof(UComp_physicsImpact_C) == 0x000268, "Wrong size on UComp_physicsImpact_C");
static_assert(offsetof(UComp_physicsImpact_C, UberGraphFrame) == 0x0000B0, "Member 'UComp_physicsImpact_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UComp_physicsImpact_C, Owner) == 0x0000B8, "Member 'UComp_physicsImpact_C::Owner' has a wrong offset!");
static_assert(offsetof(UComp_physicsImpact_C, HitComponent) == 0x0000C0, "Member 'UComp_physicsImpact_C::HitComponent' has a wrong offset!");
static_assert(offsetof(UComp_physicsImpact_C, PhysSoundData) == 0x0000C8, "Member 'UComp_physicsImpact_C::PhysSoundData' has a wrong offset!");
static_assert(offsetof(UComp_physicsImpact_C, HitResult) == 0x000108, "Member 'UComp_physicsImpact_C::HitResult' has a wrong offset!");
static_assert(offsetof(UComp_physicsImpact_C, CanHit) == 0x000190, "Member 'UComp_physicsImpact_C::CanHit' has a wrong offset!");
static_assert(offsetof(UComp_physicsImpact_C, ImpactForce) == 0x000194, "Member 'UComp_physicsImpact_C::ImpactForce' has a wrong offset!");
static_assert(offsetof(UComp_physicsImpact_C, Mass) == 0x000198, "Member 'UComp_physicsImpact_C::Mass' has a wrong offset!");
static_assert(offsetof(UComp_physicsImpact_C, ImpactThreshold) == 0x00019C, "Member 'UComp_physicsImpact_C::ImpactThreshold' has a wrong offset!");
static_assert(offsetof(UComp_physicsImpact_C, Imp_val) == 0x0001A0, "Member 'UComp_physicsImpact_C::Imp_val' has a wrong offset!");
static_assert(offsetof(UComp_physicsImpact_C, Impact) == 0x0001A4, "Member 'UComp_physicsImpact_C::Impact' has a wrong offset!");
static_assert(offsetof(UComp_physicsImpact_C, Damage) == 0x0001A8, "Member 'UComp_physicsImpact_C::Damage' has a wrong offset!");
static_assert(offsetof(UComp_physicsImpact_C, DamageData) == 0x0001AC, "Member 'UComp_physicsImpact_C::DamageData' has a wrong offset!");
static_assert(offsetof(UComp_physicsImpact_C, Health) == 0x0001BC, "Member 'UComp_physicsImpact_C::Health' has a wrong offset!");
static_assert(offsetof(UComp_physicsImpact_C, A) == 0x0001C0, "Member 'UComp_physicsImpact_C::A' has a wrong offset!");
static_assert(offsetof(UComp_physicsImpact_C, IsScraping) == 0x0001C8, "Member 'UComp_physicsImpact_C::IsScraping' has a wrong offset!");
static_assert(offsetof(UComp_physicsImpact_C, Scraping) == 0x0001D0, "Member 'UComp_physicsImpact_C::Scraping' has a wrong offset!");
static_assert(offsetof(UComp_physicsImpact_C, Vol) == 0x0001D8, "Member 'UComp_physicsImpact_C::Vol' has a wrong offset!");
static_assert(offsetof(UComp_physicsImpact_C, CustomBreak) == 0x0001DC, "Member 'UComp_physicsImpact_C::CustomBreak' has a wrong offset!");
static_assert(offsetof(UComp_physicsImpact_C, NoSounds) == 0x0001DD, "Member 'UComp_physicsImpact_C::NoSounds' has a wrong offset!");
static_assert(offsetof(UComp_physicsImpact_C, Debug) == 0x0001DE, "Member 'UComp_physicsImpact_C::Debug' has a wrong offset!");
static_assert(offsetof(UComp_physicsImpact_C, AsProp) == 0x0001E0, "Member 'UComp_physicsImpact_C::AsProp' has a wrong offset!");
static_assert(offsetof(UComp_physicsImpact_C, boundsComponent) == 0x0001E8, "Member 'UComp_physicsImpact_C::boundsComponent' has a wrong offset!");
static_assert(offsetof(UComp_physicsImpact_C, MakeHit) == 0x0001F0, "Member 'UComp_physicsImpact_C::MakeHit' has a wrong offset!");
static_assert(offsetof(UComp_physicsImpact_C, HitEvent) == 0x0001F8, "Member 'UComp_physicsImpact_C::HitEvent' has a wrong offset!");
static_assert(offsetof(UComp_physicsImpact_C, CustomPhysmat) == 0x000208, "Member 'UComp_physicsImpact_C::CustomPhysmat' has a wrong offset!");
static_assert(offsetof(UComp_physicsImpact_C, PhysMat) == 0x000210, "Member 'UComp_physicsImpact_C::PhysMat' has a wrong offset!");
static_assert(offsetof(UComp_physicsImpact_C, Dyn) == 0x000218, "Member 'UComp_physicsImpact_C::Dyn' has a wrong offset!");
static_assert(offsetof(UComp_physicsImpact_C, ImpRe) == 0x000228, "Member 'UComp_physicsImpact_C::ImpRe' has a wrong offset!");
static_assert(offsetof(UComp_physicsImpact_C, IsFireDamage) == 0x00022C, "Member 'UComp_physicsImpact_C::IsFireDamage' has a wrong offset!");
static_assert(offsetof(UComp_physicsImpact_C, HitOverThreshold) == 0x000230, "Member 'UComp_physicsImpact_C::HitOverThreshold' has a wrong offset!");
static_assert(offsetof(UComp_physicsImpact_C, Physmat_override) == 0x000240, "Member 'UComp_physicsImpact_C::Physmat_override' has a wrong offset!");
static_assert(offsetof(UComp_physicsImpact_C, ScrapeTimer) == 0x000248, "Member 'UComp_physicsImpact_C::ScrapeTimer' has a wrong offset!");
static_assert(offsetof(UComp_physicsImpact_C, Mesh) == 0x000250, "Member 'UComp_physicsImpact_C::Mesh' has a wrong offset!");
static_assert(offsetof(UComp_physicsImpact_C, OwnerIsPlayer) == 0x000258, "Member 'UComp_physicsImpact_C::OwnerIsPlayer' has a wrong offset!");
static_assert(offsetof(UComp_physicsImpact_C, OnGround) == 0x000259, "Member 'UComp_physicsImpact_C::OnGround' has a wrong offset!");
static_assert(offsetof(UComp_physicsImpact_C, LastHitNormal) == 0x00025C, "Member 'UComp_physicsImpact_C::LastHitNormal' has a wrong offset!");

}

