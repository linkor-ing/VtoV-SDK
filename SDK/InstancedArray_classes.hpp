#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: InstancedArray

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass instancedArray.instancedArray_C
// 0x0060 (0x0280 - 0x0220)
class AInstancedArray_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UInstancedStaticMeshComponent*          InstancedStaticMesh;                               // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FIntVector                             Size;                                              // 0x0238(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Scale;                                             // 0x0244(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ObjRotation;                                       // 0x0250(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                ObjSize;                                           // 0x025C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ObjRotation_random;                                // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RandomRotation_roll;                               // 0x026C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26D[0x3];                                      // 0x026D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RandomSeed;                                        // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRandomStream                          Stream;                                            // 0x0274(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor)
	bool                                          RandomRotation_X;                                  // 0x027C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RandomRotation_Y;                                  // 0x027D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RandomRotation_Z;                                  // 0x027E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void Build();
	void UserConstructionScript();
	void ReceiveBeginPlay();
	void ExecuteUbergraph_instancedArray(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"instancedArray_C">();
	}
	static class AInstancedArray_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AInstancedArray_C>();
	}
};
static_assert(alignof(AInstancedArray_C) == 0x000008, "Wrong alignment on AInstancedArray_C");
static_assert(sizeof(AInstancedArray_C) == 0x000280, "Wrong size on AInstancedArray_C");
static_assert(offsetof(AInstancedArray_C, UberGraphFrame) == 0x000220, "Member 'AInstancedArray_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AInstancedArray_C, InstancedStaticMesh) == 0x000228, "Member 'AInstancedArray_C::InstancedStaticMesh' has a wrong offset!");
static_assert(offsetof(AInstancedArray_C, DefaultSceneRoot) == 0x000230, "Member 'AInstancedArray_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AInstancedArray_C, Size) == 0x000238, "Member 'AInstancedArray_C::Size' has a wrong offset!");
static_assert(offsetof(AInstancedArray_C, Scale) == 0x000244, "Member 'AInstancedArray_C::Scale' has a wrong offset!");
static_assert(offsetof(AInstancedArray_C, ObjRotation) == 0x000250, "Member 'AInstancedArray_C::ObjRotation' has a wrong offset!");
static_assert(offsetof(AInstancedArray_C, ObjSize) == 0x00025C, "Member 'AInstancedArray_C::ObjSize' has a wrong offset!");
static_assert(offsetof(AInstancedArray_C, ObjRotation_random) == 0x000268, "Member 'AInstancedArray_C::ObjRotation_random' has a wrong offset!");
static_assert(offsetof(AInstancedArray_C, RandomRotation_roll) == 0x00026C, "Member 'AInstancedArray_C::RandomRotation_roll' has a wrong offset!");
static_assert(offsetof(AInstancedArray_C, RandomSeed) == 0x000270, "Member 'AInstancedArray_C::RandomSeed' has a wrong offset!");
static_assert(offsetof(AInstancedArray_C, Stream) == 0x000274, "Member 'AInstancedArray_C::Stream' has a wrong offset!");
static_assert(offsetof(AInstancedArray_C, RandomRotation_X) == 0x00027C, "Member 'AInstancedArray_C::RandomRotation_X' has a wrong offset!");
static_assert(offsetof(AInstancedArray_C, RandomRotation_Y) == 0x00027D, "Member 'AInstancedArray_C::RandomRotation_Y' has a wrong offset!");
static_assert(offsetof(AInstancedArray_C, RandomRotation_Z) == 0x00027E, "Member 'AInstancedArray_C::RandomRotation_Z' has a wrong offset!");

}

