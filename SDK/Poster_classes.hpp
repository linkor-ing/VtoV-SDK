#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Poster

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Actor_save_classes.hpp"
#include "Enum_interactionActions_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass poster.poster_c
// 0x0028 (0x0270 - 0x0248)
class APoster_c : public AActor_save_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_Poster_c;                           // 0x0248(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          Coll;                                              // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        Decal;                                             // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         Type;                                              // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         Index_Poster_c;                                    // 0x0264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Dynmat;                                            // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_poster(int32 EntryPoint);
	void SettingsApplied(const struct FStruct_settings& Settings);
	void ReceiveBeginPlay();
	void GamemodeBeginPlay();
	void UpdateStrAgl();
	void DamageByPlayer(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void Thrown(class AMainPlayer_C* Player);
	void broken_fire();
	void broken();
	void SendName(class FName Param_Name);
	void Kicked(bool Kick);
	void Player_use(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void DriveDetached();
	void ApplyColor(const struct FLinearColor& Color);
	void PropRenderer_finishProps();
	void GamemodeMakeKeys();
	void AnyKey(const struct FKey& Param_Key, bool Pressed);
	void GamemodePreLoad();
	void Unfocused();
	void Unfoc();
	void StuffUpgraded(class AMainGamemode_C* GameMode);
	void SignalSaved();
	void SignalDeleted();
	void SetPoster();
	void CanBePutInContainer(bool* Return);
	void AsProp(class AProp_C** Return);
	void CanPickup(bool* Return);
	void NoRespawn(bool Param_NoRespawn, bool* Return);
	void LookAt(class AMainPlayer_C* Player, const struct FHitResult& Hit, bool* Return, class FString* Text, class UPrimitiveComponent** boundObjectReplace);
	void IsButtonUsed(bool* Failed);
	void DreamInv(TArray<struct FStruct_save>& Invv, class ADreamBase_C** Base);
	void ActionOptionIndex(class AMainPlayer_C* Player, const struct FHitResult& Hit, int32 Param_Index, Enum_interactionActions Action);
	void UserConstructionScript();
	void LoadData(const struct FStruct_save& Data, bool* Return);
	void GetData(struct FStruct_save* Data);
	void GetActionOptions(class AMainPlayer_C* Player, class UPrimitiveComponent* Component, class AActor* Actor, TArray<class FString>* Options, TArray<Enum_interactionActions>* Options_enum, TArray<class FText>* OptionsNamesOverlay);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"poster_c">();
	}
	static class APoster_c* GetDefaultObj()
	{
		return GetDefaultObjImpl<APoster_c>();
	}
};
static_assert(alignof(APoster_c) == 0x000008, "Wrong alignment on APoster_c");
static_assert(sizeof(APoster_c) == 0x000270, "Wrong size on APoster_c");
static_assert(offsetof(APoster_c, UberGraphFrame_Poster_c) == 0x000248, "Member 'APoster_c::UberGraphFrame_Poster_c' has a wrong offset!");
static_assert(offsetof(APoster_c, Coll) == 0x000250, "Member 'APoster_c::Coll' has a wrong offset!");
static_assert(offsetof(APoster_c, Decal) == 0x000258, "Member 'APoster_c::Decal' has a wrong offset!");
static_assert(offsetof(APoster_c, Type) == 0x000260, "Member 'APoster_c::Type' has a wrong offset!");
static_assert(offsetof(APoster_c, Index_Poster_c) == 0x000264, "Member 'APoster_c::Index_Poster_c' has a wrong offset!");
static_assert(offsetof(APoster_c, Dynmat) == 0x000268, "Member 'APoster_c::Dynmat' has a wrong offset!");

}

