#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Wire

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Enum_interactionActions_structs.hpp"


namespace SDK::Params
{

// Function wire.wire_C.ExecuteUbergraph_wire
// 0x04B0 (0x04B0 - 0x0000)
struct Wire_C_ExecuteUbergraph_wire final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0010(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AActor* DestroyedActor)> K2Node_CreateDelegate_OutputDelegate;              // 0x0064(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_74[0xC];                                       // 0x0074(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0080(0x0030)(IsPlainOldData, NoDestructor)
	class AMainPlayer_C*                          K2Node_Event_player_6;                             // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_2;                                // 0x00B8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          K2Node_Event_kick;                                 // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_141[0x3];                                      // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_name;                                 // 0x0144(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_5;                             // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_4;                             // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_1;                                // 0x0160(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         K2Node_Event_damage;                               // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1EC[0x4];                                      // 0x01EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_3;                             // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_2;                             // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_1;                             // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player;                               // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit;                                  // 0x0210(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	Enum_interactionActions                       K2Node_Event_action;                               // 0x0298(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_299[0x7];                                      // 0x0299(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_DestroyedActor_2;               // 0x02A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x02A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A9[0x7];                                      // 0x02A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_DestroyedActor_1;               // 0x02B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B9[0x7];                                      // 0x02B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_DestroyedActor;                 // 0x02C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x02C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C9[0x3];                                      // 0x02C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x02CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x02D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Vector_Distance_ReturnValue;              // 0x02E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_2;    // 0x02E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F4[0xC];                                      // 0x02F4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue_1;     // 0x0300(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x0330(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x033C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x0348(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_354[0xC];                                      // 0x0354(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x0360(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_3;    // 0x0390(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_InverseTransformLocation_ReturnValue;     // 0x039C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_InverseTransformLocation_ReturnValue_1;   // 0x03A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B4[0xC];                                      // 0x03B4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_2;              // 0x03C0(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_3;              // 0x03F0(0x0030)(IsPlainOldData, NoDestructor)
	TScriptInterface<class IInt_wire_C>           K2Node_DynamicCast_AsInt_Wire;                     // 0x0420(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0430(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_431[0x3];                                      // 0x0431(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class AActor* DestroyedActor)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0434(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_DoesImplementInterface_ReturnValue;       // 0x0444(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0445(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_446[0x2];                                      // 0x0446(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IInt_wire_C>           K2Node_DynamicCast_AsInt_Wire_1;                   // 0x0448(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0458(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_459[0x3];                                      // 0x0459(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class AActor* DestroyedActor)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x045C(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_46C[0x4];                                      // 0x046C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IInt_wire_C>           K2Node_DynamicCast_AsInt_Wire_2;                   // 0x0470(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0480(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_481[0x3];                                      // 0x0481(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_4;    // 0x0484(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_5;    // 0x0490(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Vector_Distance_ReturnValue_1;            // 0x049C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x04A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wire_C_ExecuteUbergraph_wire) == 0x000010, "Wrong alignment on Wire_C_ExecuteUbergraph_wire");
static_assert(sizeof(Wire_C_ExecuteUbergraph_wire) == 0x0004B0, "Wrong size on Wire_C_ExecuteUbergraph_wire");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, EntryPoint) == 0x000000, "Member 'Wire_C_ExecuteUbergraph_wire::EntryPoint' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000010, "Member 'Wire_C_ExecuteUbergraph_wire::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, CallFunc_BreakTransform_Location) == 0x000040, "Member 'Wire_C_ExecuteUbergraph_wire::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, CallFunc_BreakTransform_Rotation) == 0x00004C, "Member 'Wire_C_ExecuteUbergraph_wire::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, CallFunc_BreakTransform_Scale) == 0x000058, "Member 'Wire_C_ExecuteUbergraph_wire::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, K2Node_CreateDelegate_OutputDelegate) == 0x000064, "Member 'Wire_C_ExecuteUbergraph_wire::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, CallFunc_MakeTransform_ReturnValue) == 0x000080, "Member 'Wire_C_ExecuteUbergraph_wire::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, K2Node_Event_player_6) == 0x0000B0, "Member 'Wire_C_ExecuteUbergraph_wire::K2Node_Event_player_6' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, K2Node_Event_hit_2) == 0x0000B8, "Member 'Wire_C_ExecuteUbergraph_wire::K2Node_Event_hit_2' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, K2Node_Event_kick) == 0x000140, "Member 'Wire_C_ExecuteUbergraph_wire::K2Node_Event_kick' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, K2Node_Event_name) == 0x000144, "Member 'Wire_C_ExecuteUbergraph_wire::K2Node_Event_name' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, K2Node_Event_player_5) == 0x000150, "Member 'Wire_C_ExecuteUbergraph_wire::K2Node_Event_player_5' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, K2Node_Event_player_4) == 0x000158, "Member 'Wire_C_ExecuteUbergraph_wire::K2Node_Event_player_4' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, K2Node_Event_hit_1) == 0x000160, "Member 'Wire_C_ExecuteUbergraph_wire::K2Node_Event_hit_1' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, K2Node_Event_damage) == 0x0001E8, "Member 'Wire_C_ExecuteUbergraph_wire::K2Node_Event_damage' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, K2Node_Event_player_3) == 0x0001F0, "Member 'Wire_C_ExecuteUbergraph_wire::K2Node_Event_player_3' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, K2Node_Event_player_2) == 0x0001F8, "Member 'Wire_C_ExecuteUbergraph_wire::K2Node_Event_player_2' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, K2Node_Event_player_1) == 0x000200, "Member 'Wire_C_ExecuteUbergraph_wire::K2Node_Event_player_1' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, K2Node_Event_player) == 0x000208, "Member 'Wire_C_ExecuteUbergraph_wire::K2Node_Event_player' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, K2Node_Event_hit) == 0x000210, "Member 'Wire_C_ExecuteUbergraph_wire::K2Node_Event_hit' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, K2Node_Event_action) == 0x000298, "Member 'Wire_C_ExecuteUbergraph_wire::K2Node_Event_action' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, K2Node_CustomEvent_DestroyedActor_2) == 0x0002A0, "Member 'Wire_C_ExecuteUbergraph_wire::K2Node_CustomEvent_DestroyedActor_2' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, CallFunc_IsValid_ReturnValue) == 0x0002A8, "Member 'Wire_C_ExecuteUbergraph_wire::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, K2Node_CustomEvent_DestroyedActor_1) == 0x0002B0, "Member 'Wire_C_ExecuteUbergraph_wire::K2Node_CustomEvent_DestroyedActor_1' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, CallFunc_IsValid_ReturnValue_1) == 0x0002B8, "Member 'Wire_C_ExecuteUbergraph_wire::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, K2Node_CustomEvent_DestroyedActor) == 0x0002C0, "Member 'Wire_C_ExecuteUbergraph_wire::K2Node_CustomEvent_DestroyedActor' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, CallFunc_IsValid_ReturnValue_2) == 0x0002C8, "Member 'Wire_C_ExecuteUbergraph_wire::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x0002CC, "Member 'Wire_C_ExecuteUbergraph_wire::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x0002D8, "Member 'Wire_C_ExecuteUbergraph_wire::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, CallFunc_Vector_Distance_ReturnValue) == 0x0002E4, "Member 'Wire_C_ExecuteUbergraph_wire::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, CallFunc_K2_GetComponentLocation_ReturnValue_2) == 0x0002E8, "Member 'Wire_C_ExecuteUbergraph_wire::CallFunc_K2_GetComponentLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, CallFunc_K2_GetComponentToWorld_ReturnValue_1) == 0x000300, "Member 'Wire_C_ExecuteUbergraph_wire::CallFunc_K2_GetComponentToWorld_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, CallFunc_BreakTransform_Location_1) == 0x000330, "Member 'Wire_C_ExecuteUbergraph_wire::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, CallFunc_BreakTransform_Rotation_1) == 0x00033C, "Member 'Wire_C_ExecuteUbergraph_wire::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, CallFunc_BreakTransform_Scale_1) == 0x000348, "Member 'Wire_C_ExecuteUbergraph_wire::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, CallFunc_MakeTransform_ReturnValue_1) == 0x000360, "Member 'Wire_C_ExecuteUbergraph_wire::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, CallFunc_K2_GetComponentLocation_ReturnValue_3) == 0x000390, "Member 'Wire_C_ExecuteUbergraph_wire::CallFunc_K2_GetComponentLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, CallFunc_InverseTransformLocation_ReturnValue) == 0x00039C, "Member 'Wire_C_ExecuteUbergraph_wire::CallFunc_InverseTransformLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, CallFunc_InverseTransformLocation_ReturnValue_1) == 0x0003A8, "Member 'Wire_C_ExecuteUbergraph_wire::CallFunc_InverseTransformLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, CallFunc_MakeTransform_ReturnValue_2) == 0x0003C0, "Member 'Wire_C_ExecuteUbergraph_wire::CallFunc_MakeTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, CallFunc_MakeTransform_ReturnValue_3) == 0x0003F0, "Member 'Wire_C_ExecuteUbergraph_wire::CallFunc_MakeTransform_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, K2Node_DynamicCast_AsInt_Wire) == 0x000420, "Member 'Wire_C_ExecuteUbergraph_wire::K2Node_DynamicCast_AsInt_Wire' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, K2Node_DynamicCast_bSuccess) == 0x000430, "Member 'Wire_C_ExecuteUbergraph_wire::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, K2Node_CreateDelegate_OutputDelegate_1) == 0x000434, "Member 'Wire_C_ExecuteUbergraph_wire::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, CallFunc_DoesImplementInterface_ReturnValue) == 0x000444, "Member 'Wire_C_ExecuteUbergraph_wire::CallFunc_DoesImplementInterface_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, CallFunc_IsValid_ReturnValue_3) == 0x000445, "Member 'Wire_C_ExecuteUbergraph_wire::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, K2Node_DynamicCast_AsInt_Wire_1) == 0x000448, "Member 'Wire_C_ExecuteUbergraph_wire::K2Node_DynamicCast_AsInt_Wire_1' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, K2Node_DynamicCast_bSuccess_1) == 0x000458, "Member 'Wire_C_ExecuteUbergraph_wire::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, K2Node_CreateDelegate_OutputDelegate_2) == 0x00045C, "Member 'Wire_C_ExecuteUbergraph_wire::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, K2Node_DynamicCast_AsInt_Wire_2) == 0x000470, "Member 'Wire_C_ExecuteUbergraph_wire::K2Node_DynamicCast_AsInt_Wire_2' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, K2Node_DynamicCast_bSuccess_2) == 0x000480, "Member 'Wire_C_ExecuteUbergraph_wire::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, CallFunc_K2_GetComponentLocation_ReturnValue_4) == 0x000484, "Member 'Wire_C_ExecuteUbergraph_wire::CallFunc_K2_GetComponentLocation_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, CallFunc_K2_GetComponentLocation_ReturnValue_5) == 0x000490, "Member 'Wire_C_ExecuteUbergraph_wire::CallFunc_K2_GetComponentLocation_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, CallFunc_Vector_Distance_ReturnValue_1) == 0x00049C, "Member 'Wire_C_ExecuteUbergraph_wire::CallFunc_Vector_Distance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Wire_C_ExecuteUbergraph_wire, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0004A0, "Member 'Wire_C_ExecuteUbergraph_wire::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function wire.wire_C.destB
// 0x0008 (0x0008 - 0x0000)
struct Wire_C_DestB final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wire_C_DestB) == 0x000008, "Wrong alignment on Wire_C_DestB");
static_assert(sizeof(Wire_C_DestB) == 0x000008, "Wrong size on Wire_C_DestB");
static_assert(offsetof(Wire_C_DestB, DestroyedActor) == 0x000000, "Member 'Wire_C_DestB::DestroyedActor' has a wrong offset!");

// Function wire.wire_C.destA
// 0x0008 (0x0008 - 0x0000)
struct Wire_C_DestA final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wire_C_DestA) == 0x000008, "Wrong alignment on Wire_C_DestA");
static_assert(sizeof(Wire_C_DestA) == 0x000008, "Wrong size on Wire_C_DestA");
static_assert(offsetof(Wire_C_DestA, DestroyedActor) == 0x000000, "Member 'Wire_C_DestA::DestroyedActor' has a wrong offset!");

// Function wire.wire_C.destPass
// 0x0008 (0x0008 - 0x0000)
struct Wire_C_DestPass final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wire_C_DestPass) == 0x000008, "Wrong alignment on Wire_C_DestPass");
static_assert(sizeof(Wire_C_DestPass) == 0x000008, "Wrong size on Wire_C_DestPass");
static_assert(offsetof(Wire_C_DestPass, DestroyedActor) == 0x000000, "Member 'Wire_C_DestPass::DestroyedActor' has a wrong offset!");

// Function wire.wire_C.playerR
// 0x0008 (0x0008 - 0x0000)
struct Wire_C_PlayerR final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wire_C_PlayerR) == 0x000008, "Wrong alignment on Wire_C_PlayerR");
static_assert(sizeof(Wire_C_PlayerR) == 0x000008, "Wrong size on Wire_C_PlayerR");
static_assert(offsetof(Wire_C_PlayerR, Player) == 0x000000, "Member 'Wire_C_PlayerR::Player' has a wrong offset!");

// Function wire.wire_C.playerHold
// 0x0008 (0x0008 - 0x0000)
struct Wire_C_PlayerHold final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wire_C_PlayerHold) == 0x000008, "Wrong alignment on Wire_C_PlayerHold");
static_assert(sizeof(Wire_C_PlayerHold) == 0x000008, "Wrong size on Wire_C_PlayerHold");
static_assert(offsetof(Wire_C_PlayerHold, Player) == 0x000000, "Member 'Wire_C_PlayerHold::Player' has a wrong offset!");

// Function wire.wire_C.playerUnequip
// 0x0008 (0x0008 - 0x0000)
struct Wire_C_PlayerUnequip final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wire_C_PlayerUnequip) == 0x000008, "Wrong alignment on Wire_C_PlayerUnequip");
static_assert(sizeof(Wire_C_PlayerUnequip) == 0x000008, "Wrong size on Wire_C_PlayerUnequip");
static_assert(offsetof(Wire_C_PlayerUnequip, Player) == 0x000000, "Member 'Wire_C_PlayerUnequip::Player' has a wrong offset!");

// Function wire.wire_C.damageByPlayer
// 0x0098 (0x0098 - 0x0000)
struct Wire_C_DamageByPlayer final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         Damage;                                            // 0x0090(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wire_C_DamageByPlayer) == 0x000008, "Wrong alignment on Wire_C_DamageByPlayer");
static_assert(sizeof(Wire_C_DamageByPlayer) == 0x000098, "Wrong size on Wire_C_DamageByPlayer");
static_assert(offsetof(Wire_C_DamageByPlayer, Player) == 0x000000, "Member 'Wire_C_DamageByPlayer::Player' has a wrong offset!");
static_assert(offsetof(Wire_C_DamageByPlayer, Hit) == 0x000008, "Member 'Wire_C_DamageByPlayer::Hit' has a wrong offset!");
static_assert(offsetof(Wire_C_DamageByPlayer, Damage) == 0x000090, "Member 'Wire_C_DamageByPlayer::Damage' has a wrong offset!");

// Function wire.wire_C.thrown
// 0x0008 (0x0008 - 0x0000)
struct Wire_C_Thrown final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wire_C_Thrown) == 0x000008, "Wrong alignment on Wire_C_Thrown");
static_assert(sizeof(Wire_C_Thrown) == 0x000008, "Wrong size on Wire_C_Thrown");
static_assert(offsetof(Wire_C_Thrown, Player) == 0x000000, "Member 'Wire_C_Thrown::Player' has a wrong offset!");

// Function wire.wire_C.sendName
// 0x0008 (0x0008 - 0x0000)
struct Wire_C_SendName final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wire_C_SendName) == 0x000004, "Wrong alignment on Wire_C_SendName");
static_assert(sizeof(Wire_C_SendName) == 0x000008, "Wrong size on Wire_C_SendName");
static_assert(offsetof(Wire_C_SendName, Param_Name) == 0x000000, "Member 'Wire_C_SendName::Param_Name' has a wrong offset!");

// Function wire.wire_C.kicked
// 0x0001 (0x0001 - 0x0000)
struct Wire_C_Kicked final
{
public:
	bool                                          Kick;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wire_C_Kicked) == 0x000001, "Wrong alignment on Wire_C_Kicked");
static_assert(sizeof(Wire_C_Kicked) == 0x000001, "Wrong size on Wire_C_Kicked");
static_assert(offsetof(Wire_C_Kicked, Kick) == 0x000000, "Member 'Wire_C_Kicked::Kick' has a wrong offset!");

// Function wire.wire_C.player_use
// 0x0090 (0x0090 - 0x0000)
struct Wire_C_Player_use final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Wire_C_Player_use) == 0x000008, "Wrong alignment on Wire_C_Player_use");
static_assert(sizeof(Wire_C_Player_use) == 0x000090, "Wrong size on Wire_C_Player_use");
static_assert(offsetof(Wire_C_Player_use, Player) == 0x000000, "Member 'Wire_C_Player_use::Player' has a wrong offset!");
static_assert(offsetof(Wire_C_Player_use, Hit) == 0x000008, "Member 'Wire_C_Player_use::Hit' has a wrong offset!");

// Function wire.wire_C.attach_a
// 0x0298 (0x0298 - 0x0000)
struct Wire_C_Attach_a final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AMainPlayer_C*                          Player;                                            // 0x0088(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    C;                                                 // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CallFunc_K2_GetRootComponent_ReturnValue;          // 0x0098(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A2[0x2];                                       // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x00F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x010C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_DynamicCast_AsPrimitive_Component;          // 0x0128(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_131[0x3];                                      // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x0134(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x01BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1BD[0x3];                                      // 0x01BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IInt_wire_C>           K2Node_DynamicCast_AsInt_Wire;                     // 0x01C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoesImplementInterface_ReturnValue;       // 0x01D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D2[0x6];                                      // 0x01D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AWire_C*                                K2Node_DynamicCast_AsWire;                         // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E1[0x7];                                      // 0x01E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AProp_wirebattery_C*                    K2Node_DynamicCast_AsProp_Wirebattery;             // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F2[0x2];                                      // 0x01F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x01F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x0204(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_205[0x3];                                      // 0x0205(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult_1;     // 0x0208(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue_1;        // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0291(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wire_C_Attach_a) == 0x000008, "Wrong alignment on Wire_C_Attach_a");
static_assert(sizeof(Wire_C_Attach_a) == 0x000298, "Wrong size on Wire_C_Attach_a");
static_assert(offsetof(Wire_C_Attach_a, Hit) == 0x000000, "Member 'Wire_C_Attach_a::Hit' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_a, Player) == 0x000088, "Member 'Wire_C_Attach_a::Player' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_a, C) == 0x000090, "Member 'Wire_C_Attach_a::C' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_a, CallFunc_K2_GetRootComponent_ReturnValue) == 0x000098, "Member 'Wire_C_Attach_a::CallFunc_K2_GetRootComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_a, CallFunc_BreakHitResult_bBlockingHit) == 0x0000A0, "Member 'Wire_C_Attach_a::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_a, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000A1, "Member 'Wire_C_Attach_a::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_a, CallFunc_BreakHitResult_Time) == 0x0000A4, "Member 'Wire_C_Attach_a::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_a, CallFunc_BreakHitResult_Distance) == 0x0000A8, "Member 'Wire_C_Attach_a::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_a, CallFunc_BreakHitResult_Location) == 0x0000AC, "Member 'Wire_C_Attach_a::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_a, CallFunc_BreakHitResult_ImpactPoint) == 0x0000B8, "Member 'Wire_C_Attach_a::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_a, CallFunc_BreakHitResult_Normal) == 0x0000C4, "Member 'Wire_C_Attach_a::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_a, CallFunc_BreakHitResult_ImpactNormal) == 0x0000D0, "Member 'Wire_C_Attach_a::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_a, CallFunc_BreakHitResult_PhysMat) == 0x0000E0, "Member 'Wire_C_Attach_a::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_a, CallFunc_BreakHitResult_HitActor) == 0x0000E8, "Member 'Wire_C_Attach_a::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_a, CallFunc_BreakHitResult_HitComponent) == 0x0000F0, "Member 'Wire_C_Attach_a::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_a, CallFunc_BreakHitResult_HitBoneName) == 0x0000F8, "Member 'Wire_C_Attach_a::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_a, CallFunc_BreakHitResult_HitItem) == 0x000100, "Member 'Wire_C_Attach_a::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_a, CallFunc_BreakHitResult_ElementIndex) == 0x000104, "Member 'Wire_C_Attach_a::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_a, CallFunc_BreakHitResult_FaceIndex) == 0x000108, "Member 'Wire_C_Attach_a::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_a, CallFunc_BreakHitResult_TraceStart) == 0x00010C, "Member 'Wire_C_Attach_a::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_a, CallFunc_BreakHitResult_TraceEnd) == 0x000118, "Member 'Wire_C_Attach_a::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_a, K2Node_DynamicCast_AsPrimitive_Component) == 0x000128, "Member 'Wire_C_Attach_a::K2Node_DynamicCast_AsPrimitive_Component' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_a, K2Node_DynamicCast_bSuccess) == 0x000130, "Member 'Wire_C_Attach_a::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_a, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x000134, "Member 'Wire_C_Attach_a::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_a, CallFunc_K2_SetActorLocation_ReturnValue) == 0x0001BC, "Member 'Wire_C_Attach_a::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_a, K2Node_DynamicCast_AsInt_Wire) == 0x0001C0, "Member 'Wire_C_Attach_a::K2Node_DynamicCast_AsInt_Wire' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_a, K2Node_DynamicCast_bSuccess_1) == 0x0001D0, "Member 'Wire_C_Attach_a::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_a, CallFunc_DoesImplementInterface_ReturnValue) == 0x0001D1, "Member 'Wire_C_Attach_a::CallFunc_DoesImplementInterface_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_a, K2Node_DynamicCast_AsWire) == 0x0001D8, "Member 'Wire_C_Attach_a::K2Node_DynamicCast_AsWire' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_a, K2Node_DynamicCast_bSuccess_2) == 0x0001E0, "Member 'Wire_C_Attach_a::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_a, K2Node_DynamicCast_AsProp_Wirebattery) == 0x0001E8, "Member 'Wire_C_Attach_a::K2Node_DynamicCast_AsProp_Wirebattery' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_a, K2Node_DynamicCast_bSuccess_3) == 0x0001F0, "Member 'Wire_C_Attach_a::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_a, CallFunc_IsValid_ReturnValue) == 0x0001F1, "Member 'Wire_C_Attach_a::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_a, CallFunc_Array_Add_ReturnValue) == 0x0001F4, "Member 'Wire_C_Attach_a::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_a, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x0001F8, "Member 'Wire_C_Attach_a::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_a, CallFunc_K2_AttachToComponent_ReturnValue) == 0x000204, "Member 'Wire_C_Attach_a::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_a, CallFunc_K2_SetActorLocation_SweepHitResult_1) == 0x000208, "Member 'Wire_C_Attach_a::CallFunc_K2_SetActorLocation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_a, CallFunc_K2_SetActorLocation_ReturnValue_1) == 0x000290, "Member 'Wire_C_Attach_a::CallFunc_K2_SetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_a, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000291, "Member 'Wire_C_Attach_a::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function wire.wire_C.attach_b
// 0x0280 (0x0280 - 0x0000)
struct Wire_C_Attach_b final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AMainPlayer_C*                          Player;                                            // 0x0088(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    C;                                                 // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9A[0x2];                                       // 0x009A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x00E8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0104(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0110(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_K2_GetRootComponent_ReturnValue;          // 0x0120(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_DynamicCast_AsPrimitive_Component;          // 0x0128(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IInt_wire_C>           K2Node_DynamicCast_AsInt_Wire;                     // 0x0138(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoesImplementInterface_ReturnValue;       // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x014A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_14B[0x5];                                      // 0x014B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AWire_C*                                K2Node_DynamicCast_AsWire;                         // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_159[0x3];                                      // 0x0159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x015C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x01E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F1[0x3];                                      // 0x01F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult_1;     // 0x01F4(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x027C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue_1;       // 0x027D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wire_C_Attach_b) == 0x000008, "Wrong alignment on Wire_C_Attach_b");
static_assert(sizeof(Wire_C_Attach_b) == 0x000280, "Wrong size on Wire_C_Attach_b");
static_assert(offsetof(Wire_C_Attach_b, Hit) == 0x000000, "Member 'Wire_C_Attach_b::Hit' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_b, Player) == 0x000088, "Member 'Wire_C_Attach_b::Player' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_b, C) == 0x000090, "Member 'Wire_C_Attach_b::C' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_b, CallFunc_BreakHitResult_bBlockingHit) == 0x000098, "Member 'Wire_C_Attach_b::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_b, CallFunc_BreakHitResult_bInitialOverlap) == 0x000099, "Member 'Wire_C_Attach_b::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_b, CallFunc_BreakHitResult_Time) == 0x00009C, "Member 'Wire_C_Attach_b::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_b, CallFunc_BreakHitResult_Distance) == 0x0000A0, "Member 'Wire_C_Attach_b::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_b, CallFunc_BreakHitResult_Location) == 0x0000A4, "Member 'Wire_C_Attach_b::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_b, CallFunc_BreakHitResult_ImpactPoint) == 0x0000B0, "Member 'Wire_C_Attach_b::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_b, CallFunc_BreakHitResult_Normal) == 0x0000BC, "Member 'Wire_C_Attach_b::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_b, CallFunc_BreakHitResult_ImpactNormal) == 0x0000C8, "Member 'Wire_C_Attach_b::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_b, CallFunc_BreakHitResult_PhysMat) == 0x0000D8, "Member 'Wire_C_Attach_b::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_b, CallFunc_BreakHitResult_HitActor) == 0x0000E0, "Member 'Wire_C_Attach_b::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_b, CallFunc_BreakHitResult_HitComponent) == 0x0000E8, "Member 'Wire_C_Attach_b::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_b, CallFunc_BreakHitResult_HitBoneName) == 0x0000F0, "Member 'Wire_C_Attach_b::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_b, CallFunc_BreakHitResult_HitItem) == 0x0000F8, "Member 'Wire_C_Attach_b::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_b, CallFunc_BreakHitResult_ElementIndex) == 0x0000FC, "Member 'Wire_C_Attach_b::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_b, CallFunc_BreakHitResult_FaceIndex) == 0x000100, "Member 'Wire_C_Attach_b::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_b, CallFunc_BreakHitResult_TraceStart) == 0x000104, "Member 'Wire_C_Attach_b::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_b, CallFunc_BreakHitResult_TraceEnd) == 0x000110, "Member 'Wire_C_Attach_b::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_b, CallFunc_K2_GetRootComponent_ReturnValue) == 0x000120, "Member 'Wire_C_Attach_b::CallFunc_K2_GetRootComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_b, K2Node_DynamicCast_AsPrimitive_Component) == 0x000128, "Member 'Wire_C_Attach_b::K2Node_DynamicCast_AsPrimitive_Component' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_b, K2Node_DynamicCast_bSuccess) == 0x000130, "Member 'Wire_C_Attach_b::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_b, K2Node_DynamicCast_AsInt_Wire) == 0x000138, "Member 'Wire_C_Attach_b::K2Node_DynamicCast_AsInt_Wire' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_b, K2Node_DynamicCast_bSuccess_1) == 0x000148, "Member 'Wire_C_Attach_b::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_b, CallFunc_DoesImplementInterface_ReturnValue) == 0x000149, "Member 'Wire_C_Attach_b::CallFunc_DoesImplementInterface_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_b, CallFunc_IsValid_ReturnValue) == 0x00014A, "Member 'Wire_C_Attach_b::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_b, K2Node_DynamicCast_AsWire) == 0x000150, "Member 'Wire_C_Attach_b::K2Node_DynamicCast_AsWire' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_b, K2Node_DynamicCast_bSuccess_2) == 0x000158, "Member 'Wire_C_Attach_b::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_b, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x00015C, "Member 'Wire_C_Attach_b::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_b, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x0001E4, "Member 'Wire_C_Attach_b::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_b, CallFunc_K2_AttachToComponent_ReturnValue) == 0x0001F0, "Member 'Wire_C_Attach_b::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_b, CallFunc_K2_SetWorldLocation_SweepHitResult_1) == 0x0001F4, "Member 'Wire_C_Attach_b::CallFunc_K2_SetWorldLocation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_b, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x00027C, "Member 'Wire_C_Attach_b::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wire_C_Attach_b, CallFunc_K2_AttachToComponent_ReturnValue_1) == 0x00027D, "Member 'Wire_C_Attach_b::CallFunc_K2_AttachToComponent_ReturnValue_1' has a wrong offset!");

// Function wire.wire_C.canBePutInContainer
// 0x0001 (0x0001 - 0x0000)
struct Wire_C_CanBePutInContainer final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wire_C_CanBePutInContainer) == 0x000001, "Wrong alignment on Wire_C_CanBePutInContainer");
static_assert(sizeof(Wire_C_CanBePutInContainer) == 0x000001, "Wrong size on Wire_C_CanBePutInContainer");
static_assert(offsetof(Wire_C_CanBePutInContainer, Return) == 0x000000, "Member 'Wire_C_CanBePutInContainer::Return' has a wrong offset!");

// Function wire.wire_C.asProp
// 0x0008 (0x0008 - 0x0000)
struct Wire_C_AsProp final
{
public:
	class AProp_C*                                Return;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wire_C_AsProp) == 0x000008, "Wrong alignment on Wire_C_AsProp");
static_assert(sizeof(Wire_C_AsProp) == 0x000008, "Wrong size on Wire_C_AsProp");
static_assert(offsetof(Wire_C_AsProp, Return) == 0x000000, "Member 'Wire_C_AsProp::Return' has a wrong offset!");

// Function wire.wire_C.canPickup
// 0x0001 (0x0001 - 0x0000)
struct Wire_C_CanPickup final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wire_C_CanPickup) == 0x000001, "Wrong alignment on Wire_C_CanPickup");
static_assert(sizeof(Wire_C_CanPickup) == 0x000001, "Wrong size on Wire_C_CanPickup");
static_assert(offsetof(Wire_C_CanPickup, Return) == 0x000000, "Member 'Wire_C_CanPickup::Return' has a wrong offset!");

// Function wire.wire_C.noRespawn
// 0x0002 (0x0002 - 0x0000)
struct Wire_C_NoRespawn final
{
public:
	bool                                          Param_NoRespawn;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wire_C_NoRespawn) == 0x000001, "Wrong alignment on Wire_C_NoRespawn");
static_assert(sizeof(Wire_C_NoRespawn) == 0x000002, "Wrong size on Wire_C_NoRespawn");
static_assert(offsetof(Wire_C_NoRespawn, Param_NoRespawn) == 0x000000, "Member 'Wire_C_NoRespawn::Param_NoRespawn' has a wrong offset!");
static_assert(offsetof(Wire_C_NoRespawn, Return) == 0x000001, "Member 'Wire_C_NoRespawn::Return' has a wrong offset!");

// Function wire.wire_C.lookAt
// 0x0140 (0x0140 - 0x0000)
struct Wire_C_LookAt final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          Return;                                            // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Text;                                              // 0x0098(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    boundObjectReplace;                                // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Number;                                            // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00B3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x00E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0100(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x011C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0128(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_135[0x3];                                      // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_Select_Default;                             // 0x0138(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wire_C_LookAt) == 0x000008, "Wrong alignment on Wire_C_LookAt");
static_assert(sizeof(Wire_C_LookAt) == 0x000140, "Wrong size on Wire_C_LookAt");
static_assert(offsetof(Wire_C_LookAt, Player) == 0x000000, "Member 'Wire_C_LookAt::Player' has a wrong offset!");
static_assert(offsetof(Wire_C_LookAt, Hit) == 0x000008, "Member 'Wire_C_LookAt::Hit' has a wrong offset!");
static_assert(offsetof(Wire_C_LookAt, Return) == 0x000090, "Member 'Wire_C_LookAt::Return' has a wrong offset!");
static_assert(offsetof(Wire_C_LookAt, Text) == 0x000098, "Member 'Wire_C_LookAt::Text' has a wrong offset!");
static_assert(offsetof(Wire_C_LookAt, boundObjectReplace) == 0x0000A8, "Member 'Wire_C_LookAt::boundObjectReplace' has a wrong offset!");
static_assert(offsetof(Wire_C_LookAt, Number) == 0x0000B0, "Member 'Wire_C_LookAt::Number' has a wrong offset!");
static_assert(offsetof(Wire_C_LookAt, Temp_bool_Variable) == 0x0000B1, "Member 'Wire_C_LookAt::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Wire_C_LookAt, CallFunc_BreakHitResult_bBlockingHit) == 0x0000B2, "Member 'Wire_C_LookAt::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(Wire_C_LookAt, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000B3, "Member 'Wire_C_LookAt::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(Wire_C_LookAt, CallFunc_BreakHitResult_Time) == 0x0000B4, "Member 'Wire_C_LookAt::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(Wire_C_LookAt, CallFunc_BreakHitResult_Distance) == 0x0000B8, "Member 'Wire_C_LookAt::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(Wire_C_LookAt, CallFunc_BreakHitResult_Location) == 0x0000BC, "Member 'Wire_C_LookAt::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(Wire_C_LookAt, CallFunc_BreakHitResult_ImpactPoint) == 0x0000C8, "Member 'Wire_C_LookAt::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(Wire_C_LookAt, CallFunc_BreakHitResult_Normal) == 0x0000D4, "Member 'Wire_C_LookAt::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(Wire_C_LookAt, CallFunc_BreakHitResult_ImpactNormal) == 0x0000E0, "Member 'Wire_C_LookAt::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(Wire_C_LookAt, CallFunc_BreakHitResult_PhysMat) == 0x0000F0, "Member 'Wire_C_LookAt::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(Wire_C_LookAt, CallFunc_BreakHitResult_HitActor) == 0x0000F8, "Member 'Wire_C_LookAt::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(Wire_C_LookAt, CallFunc_BreakHitResult_HitComponent) == 0x000100, "Member 'Wire_C_LookAt::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(Wire_C_LookAt, CallFunc_BreakHitResult_HitBoneName) == 0x000108, "Member 'Wire_C_LookAt::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(Wire_C_LookAt, CallFunc_BreakHitResult_HitItem) == 0x000110, "Member 'Wire_C_LookAt::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(Wire_C_LookAt, CallFunc_BreakHitResult_ElementIndex) == 0x000114, "Member 'Wire_C_LookAt::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(Wire_C_LookAt, CallFunc_BreakHitResult_FaceIndex) == 0x000118, "Member 'Wire_C_LookAt::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(Wire_C_LookAt, CallFunc_BreakHitResult_TraceStart) == 0x00011C, "Member 'Wire_C_LookAt::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(Wire_C_LookAt, CallFunc_BreakHitResult_TraceEnd) == 0x000128, "Member 'Wire_C_LookAt::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(Wire_C_LookAt, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000134, "Member 'Wire_C_LookAt::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wire_C_LookAt, K2Node_Select_Default) == 0x000138, "Member 'Wire_C_LookAt::K2Node_Select_Default' has a wrong offset!");

// Function wire.wire_C.isButtonUsed
// 0x0001 (0x0001 - 0x0000)
struct Wire_C_IsButtonUsed final
{
public:
	bool                                          Failed;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wire_C_IsButtonUsed) == 0x000001, "Wrong alignment on Wire_C_IsButtonUsed");
static_assert(sizeof(Wire_C_IsButtonUsed) == 0x000001, "Wrong size on Wire_C_IsButtonUsed");
static_assert(offsetof(Wire_C_IsButtonUsed, Failed) == 0x000000, "Member 'Wire_C_IsButtonUsed::Failed' has a wrong offset!");

// Function wire.wire_C.landedOn
// 0x0010 (0x0010 - 0x0000)
struct Wire_C_LandedOn final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreFallDamage;                                  // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wire_C_LandedOn) == 0x000008, "Wrong alignment on Wire_C_LandedOn");
static_assert(sizeof(Wire_C_LandedOn) == 0x000010, "Wrong size on Wire_C_LandedOn");
static_assert(offsetof(Wire_C_LandedOn, Player) == 0x000000, "Member 'Wire_C_LandedOn::Player' has a wrong offset!");
static_assert(offsetof(Wire_C_LandedOn, IgnoreFallDamage) == 0x000008, "Member 'Wire_C_LandedOn::IgnoreFallDamage' has a wrong offset!");

// Function wire.wire_C.actionOptionIndex
// 0x0098 (0x0098 - 0x0000)
struct Wire_C_ActionOptionIndex final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	Enum_interactionActions                       Action;                                            // 0x0090(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wire_C_ActionOptionIndex) == 0x000008, "Wrong alignment on Wire_C_ActionOptionIndex");
static_assert(sizeof(Wire_C_ActionOptionIndex) == 0x000098, "Wrong size on Wire_C_ActionOptionIndex");
static_assert(offsetof(Wire_C_ActionOptionIndex, Player) == 0x000000, "Member 'Wire_C_ActionOptionIndex::Player' has a wrong offset!");
static_assert(offsetof(Wire_C_ActionOptionIndex, Hit) == 0x000008, "Member 'Wire_C_ActionOptionIndex::Hit' has a wrong offset!");
static_assert(offsetof(Wire_C_ActionOptionIndex, Action) == 0x000090, "Member 'Wire_C_ActionOptionIndex::Action' has a wrong offset!");

// Function wire.wire_C.ignoreSave
// 0x0001 (0x0001 - 0x0000)
struct Wire_C_IgnoreSave final
{
public:
	bool                                          Param_IgnoreSave;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wire_C_IgnoreSave) == 0x000001, "Wrong alignment on Wire_C_IgnoreSave");
static_assert(sizeof(Wire_C_IgnoreSave) == 0x000001, "Wrong size on Wire_C_IgnoreSave");
static_assert(offsetof(Wire_C_IgnoreSave, Param_IgnoreSave) == 0x000000, "Member 'Wire_C_IgnoreSave::Param_IgnoreSave' has a wrong offset!");

// Function wire.wire_C.skipPreDelete
// 0x0001 (0x0001 - 0x0000)
struct Wire_C_SkipPreDelete final
{
public:
	bool                                          Skip;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wire_C_SkipPreDelete) == 0x000001, "Wrong alignment on Wire_C_SkipPreDelete");
static_assert(sizeof(Wire_C_SkipPreDelete) == 0x000001, "Wrong size on Wire_C_SkipPreDelete");
static_assert(offsetof(Wire_C_SkipPreDelete, Skip) == 0x000000, "Member 'Wire_C_SkipPreDelete::Skip' has a wrong offset!");

// Function wire.wire_C.gascanFuel
// 0x0010 (0x0010 - 0x0000)
struct Wire_C_GascanFuel final
{
public:
	class AProp_gascan_C*                         Gascan;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Fueled;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wire_C_GascanFuel) == 0x000008, "Wrong alignment on Wire_C_GascanFuel");
static_assert(sizeof(Wire_C_GascanFuel) == 0x000010, "Wrong size on Wire_C_GascanFuel");
static_assert(offsetof(Wire_C_GascanFuel, Gascan) == 0x000000, "Member 'Wire_C_GascanFuel::Gascan' has a wrong offset!");
static_assert(offsetof(Wire_C_GascanFuel, Fueled) == 0x000008, "Member 'Wire_C_GascanFuel::Fueled' has a wrong offset!");

// Function wire.wire_C.getActionOptions
// 0x0070 (0x0070 - 0x0000)
struct Wire_C_GetActionOptions final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Component;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         Options;                                           // 0x0018(0x0010)(Parm, OutParm)
	TArray<Enum_interactionActions>               Options_enum;                                      // 0x0028(0x0010)(Parm, OutParm)
	TArray<class FText>                           OptionsNamesOverlay;                               // 0x0038(0x0010)(Parm, OutParm)
	uint8                                         Number;                                            // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           K2Node_MakeArray_Array;                            // 0x0050(0x0010)(ReferenceParm)
	TArray<Enum_interactionActions>               K2Node_MakeArray_Array_1;                          // 0x0060(0x0010)(ReferenceParm)
};
static_assert(alignof(Wire_C_GetActionOptions) == 0x000008, "Wrong alignment on Wire_C_GetActionOptions");
static_assert(sizeof(Wire_C_GetActionOptions) == 0x000070, "Wrong size on Wire_C_GetActionOptions");
static_assert(offsetof(Wire_C_GetActionOptions, Player) == 0x000000, "Member 'Wire_C_GetActionOptions::Player' has a wrong offset!");
static_assert(offsetof(Wire_C_GetActionOptions, Component) == 0x000008, "Member 'Wire_C_GetActionOptions::Component' has a wrong offset!");
static_assert(offsetof(Wire_C_GetActionOptions, Actor) == 0x000010, "Member 'Wire_C_GetActionOptions::Actor' has a wrong offset!");
static_assert(offsetof(Wire_C_GetActionOptions, Options) == 0x000018, "Member 'Wire_C_GetActionOptions::Options' has a wrong offset!");
static_assert(offsetof(Wire_C_GetActionOptions, Options_enum) == 0x000028, "Member 'Wire_C_GetActionOptions::Options_enum' has a wrong offset!");
static_assert(offsetof(Wire_C_GetActionOptions, OptionsNamesOverlay) == 0x000038, "Member 'Wire_C_GetActionOptions::OptionsNamesOverlay' has a wrong offset!");
static_assert(offsetof(Wire_C_GetActionOptions, Number) == 0x000048, "Member 'Wire_C_GetActionOptions::Number' has a wrong offset!");
static_assert(offsetof(Wire_C_GetActionOptions, K2Node_MakeArray_Array) == 0x000050, "Member 'Wire_C_GetActionOptions::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Wire_C_GetActionOptions, K2Node_MakeArray_Array_1) == 0x000060, "Member 'Wire_C_GetActionOptions::K2Node_MakeArray_Array_1' has a wrong offset!");

// Function wire.wire_C.setPath
// 0x0018 (0x0018 - 0x0000)
struct Wire_C_SetPath final
{
public:
	TArray<struct FVector>                        Path;                                              // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Return;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wire_C_SetPath) == 0x000008, "Wrong alignment on Wire_C_SetPath");
static_assert(sizeof(Wire_C_SetPath) == 0x000018, "Wrong size on Wire_C_SetPath");
static_assert(offsetof(Wire_C_SetPath, Path) == 0x000000, "Member 'Wire_C_SetPath::Path' has a wrong offset!");
static_assert(offsetof(Wire_C_SetPath, Return) == 0x000010, "Member 'Wire_C_SetPath::Return' has a wrong offset!");

// Function wire.wire_C.getOnlyKey
// 0x0010 (0x0010 - 0x0000)
struct Wire_C_GetOnlyKey final
{
public:
	class FString                                 Param_Key;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Wire_C_GetOnlyKey) == 0x000008, "Wrong alignment on Wire_C_GetOnlyKey");
static_assert(sizeof(Wire_C_GetOnlyKey) == 0x000010, "Wrong size on Wire_C_GetOnlyKey");
static_assert(offsetof(Wire_C_GetOnlyKey, Param_Key) == 0x000000, "Member 'Wire_C_GetOnlyKey::Param_Key' has a wrong offset!");

// Function wire.wire_C.processKeys
// 0x0001 (0x0001 - 0x0000)
struct Wire_C_ProcessKeys final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wire_C_ProcessKeys) == 0x000001, "Wrong alignment on Wire_C_ProcessKeys");
static_assert(sizeof(Wire_C_ProcessKeys) == 0x000001, "Wrong size on Wire_C_ProcessKeys");
static_assert(offsetof(Wire_C_ProcessKeys, Return) == 0x000000, "Member 'Wire_C_ProcessKeys::Return' has a wrong offset!");

// Function wire.wire_C.canBeUsedHold
// 0x0001 (0x0001 - 0x0000)
struct Wire_C_CanBeUsedHold final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wire_C_CanBeUsedHold) == 0x000001, "Wrong alignment on Wire_C_CanBeUsedHold");
static_assert(sizeof(Wire_C_CanBeUsedHold) == 0x000001, "Wrong size on Wire_C_CanBeUsedHold");
static_assert(offsetof(Wire_C_CanBeUsedHold, Return) == 0x000000, "Member 'Wire_C_CanBeUsedHold::Return' has a wrong offset!");

// Function wire.wire_C.GetKey
// 0x0010 (0x0010 - 0x0000)
struct Wire_C_GetKey final
{
public:
	class FString                                 Param_Key;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Wire_C_GetKey) == 0x000008, "Wrong alignment on Wire_C_GetKey");
static_assert(sizeof(Wire_C_GetKey) == 0x000010, "Wrong size on Wire_C_GetKey");
static_assert(offsetof(Wire_C_GetKey, Param_Key) == 0x000000, "Member 'Wire_C_GetKey::Param_Key' has a wrong offset!");

// Function wire.wire_C.toolboxFix
// 0x0010 (0x0010 - 0x0000)
struct Wire_C_ToolboxFix final
{
public:
	class AProp_toolbox_C*                        Toolbox;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wire_C_ToolboxFix) == 0x000008, "Wrong alignment on Wire_C_ToolboxFix");
static_assert(sizeof(Wire_C_ToolboxFix) == 0x000010, "Wrong size on Wire_C_ToolboxFix");
static_assert(offsetof(Wire_C_ToolboxFix, Toolbox) == 0x000000, "Member 'Wire_C_ToolboxFix::Toolbox' has a wrong offset!");
static_assert(offsetof(Wire_C_ToolboxFix, Return) == 0x000008, "Member 'Wire_C_ToolboxFix::Return' has a wrong offset!");

}

