#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HexahiveSPawner

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function hexahiveSPawner.hexahiveSPawner_C.ExecuteUbergraph_hexahiveSPawner
// 0x0004 (0x0004 - 0x0000)
struct HexahiveSPawner_C_ExecuteUbergraph_hexahiveSPawner final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HexahiveSPawner_C_ExecuteUbergraph_hexahiveSPawner) == 0x000004, "Wrong alignment on HexahiveSPawner_C_ExecuteUbergraph_hexahiveSPawner");
static_assert(sizeof(HexahiveSPawner_C_ExecuteUbergraph_hexahiveSPawner) == 0x000004, "Wrong size on HexahiveSPawner_C_ExecuteUbergraph_hexahiveSPawner");
static_assert(offsetof(HexahiveSPawner_C_ExecuteUbergraph_hexahiveSPawner, EntryPoint) == 0x000000, "Member 'HexahiveSPawner_C_ExecuteUbergraph_hexahiveSPawner::EntryPoint' has a wrong offset!");

// Function hexahiveSPawner.hexahiveSPawner_C.gen
// 0x0230 (0x0230 - 0x0000)
struct HexahiveSPawner_C_Gen final
{
public:
	bool                                          Spawn;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E2A[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      CallFunc_obj_static_obj;                           // 0x0010(0x0010)(ReferenceParm)
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0020(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Sqrt_ReturnValue;                         // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Sqrt_ReturnValue_1;                       // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Sqrt_ReturnValue_2;                       // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0068(0x0010)(ConstParm, ReferenceParm)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Conv_IntToBool_ReturnValue;               // 0x0085(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E2B[0x2];                                     // 0x0086(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E2C[0x3];                                     // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_2;            // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TransformLocation_ReturnValue;            // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Vector_Distance_ReturnValue;              // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E2D[0x3];                                     // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x00DC(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x0164(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0165(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0166(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E2E[0x1];                                     // 0x0167(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0170(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x017C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0188(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0194(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x01E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x01F0(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASusDirtHole_C*                         CallFunc_FinishSpawningActor_ReturnValue;          // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HexahiveSPawner_C_Gen) == 0x000010, "Wrong alignment on HexahiveSPawner_C_Gen");
static_assert(sizeof(HexahiveSPawner_C_Gen) == 0x000230, "Wrong size on HexahiveSPawner_C_Gen");
static_assert(offsetof(HexahiveSPawner_C_Gen, Spawn) == 0x000000, "Member 'HexahiveSPawner_C_Gen::Spawn' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, Temp_int_Variable) == 0x000004, "Member 'HexahiveSPawner_C_Gen::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000008, "Member 'HexahiveSPawner_C_Gen::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'HexahiveSPawner_C_Gen::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_obj_static_obj) == 0x000010, "Member 'HexahiveSPawner_C_Gen::CallFunc_obj_static_obj' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_GetTransform_ReturnValue) == 0x000020, "Member 'HexahiveSPawner_C_Gen::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_Sqrt_ReturnValue) == 0x000050, "Member 'HexahiveSPawner_C_Gen::CallFunc_Sqrt_ReturnValue' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000054, "Member 'HexahiveSPawner_C_Gen::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_Sqrt_ReturnValue_1) == 0x000058, "Member 'HexahiveSPawner_C_Gen::CallFunc_Sqrt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00005C, "Member 'HexahiveSPawner_C_Gen::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000060, "Member 'HexahiveSPawner_C_Gen::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_Sqrt_ReturnValue_2) == 0x000064, "Member 'HexahiveSPawner_C_Gen::CallFunc_Sqrt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, Temp_object_Variable) == 0x000068, "Member 'HexahiveSPawner_C_Gen::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000078, "Member 'HexahiveSPawner_C_Gen::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, Temp_int_Variable_1) == 0x00007C, "Member 'HexahiveSPawner_C_Gen::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_Percent_IntInt_ReturnValue) == 0x000080, "Member 'HexahiveSPawner_C_Gen::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000084, "Member 'HexahiveSPawner_C_Gen::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_Conv_IntToBool_ReturnValue) == 0x000085, "Member 'HexahiveSPawner_C_Gen::CallFunc_Conv_IntToBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_SelectFloat_ReturnValue) == 0x000088, "Member 'HexahiveSPawner_C_Gen::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x00008C, "Member 'HexahiveSPawner_C_Gen::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_Add_FloatFloat_ReturnValue) == 0x000090, "Member 'HexahiveSPawner_C_Gen::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_Multiply_IntInt_ReturnValue) == 0x000094, "Member 'HexahiveSPawner_C_Gen::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_Conv_IntToFloat_ReturnValue_2) == 0x000098, "Member 'HexahiveSPawner_C_Gen::CallFunc_Conv_IntToFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x00009C, "Member 'HexahiveSPawner_C_Gen::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_MakeVector_ReturnValue) == 0x0000A0, "Member 'HexahiveSPawner_C_Gen::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000AC, "Member 'HexahiveSPawner_C_Gen::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000B0, "Member 'HexahiveSPawner_C_Gen::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_TransformLocation_ReturnValue) == 0x0000BC, "Member 'HexahiveSPawner_C_Gen::CallFunc_TransformLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_Vector_Distance_ReturnValue) == 0x0000C8, "Member 'HexahiveSPawner_C_Gen::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000CC, "Member 'HexahiveSPawner_C_Gen::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x0000D8, "Member 'HexahiveSPawner_C_Gen::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_LineTraceSingleForObjects_OutHit) == 0x0000DC, "Member 'HexahiveSPawner_C_Gen::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x000164, "Member 'HexahiveSPawner_C_Gen::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_BreakHitResult_bBlockingHit) == 0x000165, "Member 'HexahiveSPawner_C_Gen::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_BreakHitResult_bInitialOverlap) == 0x000166, "Member 'HexahiveSPawner_C_Gen::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_BreakHitResult_Time) == 0x000168, "Member 'HexahiveSPawner_C_Gen::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_BreakHitResult_Distance) == 0x00016C, "Member 'HexahiveSPawner_C_Gen::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_BreakHitResult_Location) == 0x000170, "Member 'HexahiveSPawner_C_Gen::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_BreakHitResult_ImpactPoint) == 0x00017C, "Member 'HexahiveSPawner_C_Gen::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_BreakHitResult_Normal) == 0x000188, "Member 'HexahiveSPawner_C_Gen::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_BreakHitResult_ImpactNormal) == 0x000194, "Member 'HexahiveSPawner_C_Gen::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_BreakHitResult_PhysMat) == 0x0001A0, "Member 'HexahiveSPawner_C_Gen::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_BreakHitResult_HitActor) == 0x0001A8, "Member 'HexahiveSPawner_C_Gen::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_BreakHitResult_HitComponent) == 0x0001B0, "Member 'HexahiveSPawner_C_Gen::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_BreakHitResult_HitBoneName) == 0x0001B8, "Member 'HexahiveSPawner_C_Gen::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_BreakHitResult_HitItem) == 0x0001C0, "Member 'HexahiveSPawner_C_Gen::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_BreakHitResult_ElementIndex) == 0x0001C4, "Member 'HexahiveSPawner_C_Gen::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_BreakHitResult_FaceIndex) == 0x0001C8, "Member 'HexahiveSPawner_C_Gen::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_BreakHitResult_TraceStart) == 0x0001CC, "Member 'HexahiveSPawner_C_Gen::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_BreakHitResult_TraceEnd) == 0x0001D8, "Member 'HexahiveSPawner_C_Gen::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x0001E4, "Member 'HexahiveSPawner_C_Gen::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_MakeTransform_ReturnValue) == 0x0001F0, "Member 'HexahiveSPawner_C_Gen::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000220, "Member 'HexahiveSPawner_C_Gen::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(HexahiveSPawner_C_Gen, CallFunc_FinishSpawningActor_ReturnValue) == 0x000228, "Member 'HexahiveSPawner_C_Gen::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");

}

